["```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom skimage.io import imread, imshow\nfrom skimage.color import rgb2gray\n\n# read input image\nmy_im = imread('photo.jpg')\nplt.figure('Input Image')\nplt.imshow(my_im)\nplt.axis('off')  # hide axis\nplt.show()\n\n# convert the image to grayscale\ngray_im = rgb2gray(my_im)\n\n# applying FFT and center shift\nfourier_im = np.fft.fft2(gray_im)\nim_shift = np.fft.fftshift(fourier_im)\nplt.figure('Applying FFT')\nplt.imshow(np.log(abs(im_shift)), cmap='gray')\nplt.tight_layout()\nplt.show()\n```", "```py\n# create vertical & horizontal mask for noise removal\nrows, cols = gray_im.shape\ncrow, ccol = rows // 2, cols // 2\n\n# create a mask with ones in the vertical and horizontal strip\n# let's say width is equal to 100 pixels\nmask = np.zeros((rows, cols), dtype=np.float32)\nmask[crow - 50:crow + 50, :] = 1  # vertical strip in the center\nmask[:, ccol - 50:ccol + 50] = 1  # horizontal strip in the center\n\n# apply the mask to the shifted FFT\nfiltered_im_shift = im_shift * mask\n\n# inverse FFT to get the filtered image back\nfiltered_fourier_im = np.fft.ifftshift(filtered_im_shift)\nfiltered_image = np.fft.ifft2(filtered_fourier_im)\nfiltered_image = np.abs(filtered_image)  # Take absolute value\n\n# display the filtered image\nplt.figure('Filtered Image')\nplt.imshow(filtered_image, cmap='gray')\nplt.axis('off')  # hide axis\nplt.tight_layout()\nplt.show()\n```", "```py\ny₁(x, t) = A₁ sin(k₁ x - ω₁ t + φ₁)\ny₂(x, t) = A₂ sin(k₂ x - ω₂ t + φ₂) \n```", "```py\ny(x, t) = y₁(x, t) + y₂(x, t)\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# parameters for the first wave\nA1 = 1.0      # amplitude\nk1 = 2 * np.pi / 5  # wave number (2*pi/wavelength)\nomega1 = 2 * np.pi / 10  # angular frequency (2*pi/period)\nphi1 = 0      # phase shift\n\n# parameters for the second wave\nA2 = 0.5      # amplitude\nk2 = 2 * np.pi / 3   # wave number\nomega2 = 2 * np.pi / 15  # angular frequency\nphi2 = np.pi / 4  # phase shift\n\n# create an array of x values\nx = np.linspace(0, 30, 1000)\nt = 0  # time at which we calculate the waves\n\n# calculate the individual waves\ny1 = A1 * np.sin(k1 * x - omega1 * t + phi1)\ny2 = A2 * np.sin(k2 * x - omega2 * t + phi2)\n\n# calculate the superposition of the two waves\ny_superposition = y1 + y2\n\n# plotting\nplt.figure(figsize=(12, 8))\nplt.plot(x, y1, label='Wave 1', linestyle='--')\nplt.plot(x, y2, label='Wave 2', linestyle='--')\nplt.plot(x, y_superposition, label='Superposition', linewidth=2)\nplt.title('Superposition of Two Sinusoidal Waves')\nplt.xlabel('Position (x)')\nplt.ylabel('Amplitude')\nplt.legend()\nplt.show()\n```"]