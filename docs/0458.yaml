- en: The Power of Geospatial Intelligence and Similarity Analysis for Data Mapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-power-of-geospatial-intelligence-and-similarity-analysis-for-data-mapping-3ebae73a7e27?source=collection_archive---------7-----------------------#2024-02-17](https://towardsdatascience.com/the-power-of-geospatial-intelligence-and-similarity-analysis-for-data-mapping-3ebae73a7e27?source=collection_archive---------7-----------------------#2024-02-17)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Strategically enhancing address mapping during data integration using geocoding
    and string matching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jiayipan999?source=post_page---byline--3ebae73a7e27--------------------------------)[![Kirsten
    Jiayi Pan](../Images/d4f661ae3cb34d5cee9df5f201c72eb9.png)](https://medium.com/@jiayipan999?source=post_page---byline--3ebae73a7e27--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--3ebae73a7e27--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--3ebae73a7e27--------------------------------)
    [Kirsten Jiayi Pan](https://medium.com/@jiayipan999?source=post_page---byline--3ebae73a7e27--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--3ebae73a7e27--------------------------------)
    ·4 min read·Feb 17, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: 'Many individuals in the big data industry may encounter the following scenario:
    Is the acronym “TIL” equivalent to the phrase “Today I learned” when extracting
    these two entries from distinct systems? Your program might get confused too when
    records come in with different names even though it means the same thing. As we
    are pulling data with discrepancies together from different operational systems,
    the data ingestion process can be more time-consuming than originally thought!'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0de52bb74048c8450bc7651e644dc70d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image retrieved from: [https://unsplash.com/photos/turned-on-canopy-lights-g_V2rt6iG7A](https://unsplash.com/photos/turned-on-canopy-lights-g_V2rt6iG7A)'
  prefs: []
  type: TYPE_NORMAL
- en: Now, you are working for a food supply chain company whose clients are from
    the catering industry. The company provides two data extracts about clients’ contact
    information and their restaurant details from different operational systems. You
    need to link them together so that the front-end dashboarding team can gain more
    information from the populated data. Unfortunately, there are no unique primary
    keys to link these two data sources but some geographic information and names
    of restaurants. This article is going to enhance your geographical mapping solution
    by combining `geopy` and `fuzzywuzzy` on top of manual mapping.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `pandas` read the two data sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a347301f74e55c65c3cab943e8d86519.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by the author: custom_master.csv'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e57ba899745c1cf57a1c0765aa2f01c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by the author: client_profile.csv'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic Data Cleaning and Manual Mapping**'
  prefs: []
  type: TYPE_NORMAL
- en: When dealing with large datasets, every factor that might affect the accuracy
    of mapping needs to be considered. Including basic data cleaning and manual mapping
    as the first step can improve data consistency and alignment for more accurate
    results.
  prefs: []
  type: TYPE_NORMAL
- en: '**The following code should be applied to both data sources.*'
  prefs: []
  type: TYPE_NORMAL
- en: '1: Capitalization *(eg. 123 Main St and 123 MAIN ST should be mapped)*'
  prefs: []
  type: TYPE_NORMAL
- en: '2: Inadvertent Whitespace and Unnecessary Punctuations *(eg. 123 Main St_whitespace_
    or 123 Main St; should be mapped with 123 Main St)*'
  prefs: []
  type: TYPE_NORMAL
- en: '3: Standardizing Postal Abbreviation *(eg. 123 Main Street should be mapped
    with 123 Main St)*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Please consider using the full standardized postal abbreviation mapping table
    from the* [*United States Postal Service Street Suffix Abbreviations*](https://pe.usps.com/text/pub28/28apc_002.htm)
    *in practical applications for higher consistency and accuracy in mapping geographical
    locations.*'
  prefs: []
  type: TYPE_NORMAL
- en: Other potential factors that might affect the accuracy of mapping include misspellings
    in addresses *(eg. 123 Mian St and 123 Main St)* and shortened addresses *(eg.
    123 Forest Hill and 123 Frst Hl)* could be challenging to tackle using manual
    mapping approach, which more advanced mapping technique should be introduced.
  prefs: []
  type: TYPE_NORMAL
- en: '**Geopy**'
  prefs: []
  type: TYPE_NORMAL
- en: '`Geopy` is an open-source Python library that plays a crucial role in the geospatial
    landscape by converting human-readable addresses into precise geographic coordinates
    through address geocoding. It employs great-circle distance calculations to accurately
    compute latitude and longitude during the geocoding process. Other geocoding APIs
    such as the Google Maps Geocoding API, OpenCage Geocoding API, and Smarty API
    can also be considered based on the specific business requirements of the project.'
  prefs: []
  type: TYPE_NORMAL
- en: After the geocoding process, we can merge the two DataFrames using `LATITUDE`
    and `LONGITUDE` columns with `pandas` library and check the number of rows that
    are successfully mapped. Addresses that cannot be mapped will be passed on to
    the next mapping stage.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fuzzy Wuzzy**'
  prefs: []
  type: TYPE_NORMAL
- en: '`Fuzzywuzzy` is another Python library that is designed to facilitate fuzzy
    string matching, by providing a set of tools for comparing and measuring the similarity
    between strings. The library uses algorithms like Levenshtein distance to quantify
    the degree of resemblance between strings, which is particularly useful for data
    containing typos or discrepancies. A confidence score will be populated for each
    address comparison, which is a numerical value between 0 and 100\. A higher score
    suggests a stronger similarity between the strings, while a lower score indicates
    a lesser degree of similarity. In our case, we can use `fuzzywuzzy` to tackle
    the remaining rows that cannot be mapped with `geopy`**.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9687393d2b9a9dfecf5d163ed0959728.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by the author: Output from the code above using fuzzywuzzy to show confidence_score
    for the remaining rows that were unmapped.'
  prefs: []
  type: TYPE_NORMAL
- en: The demo above only uses column `ADDRESS` for string matching, adding another
    column in common `CLENT_NAME` to this process can advance mapping in this business
    scenario which brings more accurate output.
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusion**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This address mapping technique is versatile across various industries. The combination
    of manual mapping, `geopy`, and `fuzzywuzzy` provides a comprehensive approach
    to enhance geographical mapping accuracy, making it a valuable asset for businesses
    across different sectors that a facing similar challenges in data ingestion and
    integration.
  prefs: []
  type: TYPE_NORMAL
