["```py\nfrom typing import List, Union\nfrom collections import Counter\nimport math\n\ndef conditional_entropy(\n    x: List[Union[int, float]], \n    y: List[Union[int, float]]\n) -> float:\n    \"\"\" Calculates conditional entropy \"\"\"\n\n    # Count unique values\n    y_counter = Counter(y)  # Counts of unique values in y\n    xy_counter = Counter(list(zip(x, y)))  # Counts of unique pairs from (x, y)\n    # Calculate sum of y values\n    total_occurrences = sum(y_counter.values())\n    # (Re-)set entropy to 0\n    entropy = 0\n\n    # For every unique value pair of x and y\n    for xy in xy_counter.keys():\n        # Joint probability of x AND y\n        p_xy = xy_counter[xy] / total_occurrences\n        # Marginal probability of y\n        p_y = y_counter[xy[1]] / total_occurrences\n        # Conditional probability of x given y\n        p_x_given_y = p_xy / p_y\n        # Calculate the conditional entropy H(X|Y)\n        entropy += p_xy * math.log(p_x_given_y, 2)  # Use base 2 instead of natural (base e)\n\n    return -entropy\n```", "```py\nimport scipy.stats as ss\n\ndef theil_u(\n    x: List[Union[int, float]], \n    y: List[Union[int, float]]\n) -> float:\n    \"\"\" Calculate Theil U \"\"\"\n\n    # Calculate conditional entropy of x and y\n    H_xy = conditional_entropy(x,y)\n\n    # Count unique values\n    x_counter = Counter(x)\n\n    # Calculate sum of x values\n    total_occurrences = sum(x_counter.values())\n\n    # Convert all absolute counts of x values in x_counter to probabilities\n    p_x = list(map(lambda count: count/total_occurrences, x_counter.values()))\n\n    # Calculate entropy of single distribution x\n    H_x = ss.entropy(p_x)\n\n    return (H_x - H_xy) / H_x if H_x != 0 else 0\n```", "```py\nimport itertools\nimport pandas as pd\n\ndef get_theils_u_for_df(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\" Compute Theil's U for every feature combination in the input df \"\"\"\n\n    # Create an empty dataframe to fill\n    theilu = pd.DataFrame(index=df.columns, columns=df.columns)\n\n    # Insert Theil U values into empty dataframe\n    for var1, var2 in itertools.combinations(df, 2):\n        u = theil_u(df[var1],df[var2])\n        theilu[var1][var2] = round(u, 2) # fill lower diagonal\n\n        u = theil_u(df[var2],df[var1])   \n        theilu[var2][var1] = round(u, 2) # fill upper diagonal\n\n    # Set 1s to diagonal where row index + column index == n - 1\n    for i in range(0, len(theilu.columns)):\n        for j in range(0, len(theilu.columns)):\n            if i == j:\n                theilu.iloc[i, j] = 1\n\n    # Convert all values in the DataFrame to float\n    return theilu.map(float)\n```", "```py\nimport pandas as pd\nimport seaborn as sns\nimport itertools\nimport matplotlib.pyplot as plt\n\n# Load the Iris dataset from seaborn\ndf = sns.load_dataset('iris')\n\n# Compute Theil's U for every feature combination in the input df\ntheilu = get_theils_u_for_df(df)\n\n# Create a heatmap of the Theil's V values\nplt.figure(figsize=(10, 4))\nsns.heatmap(theilu, annot=True, cmap='Reds', fmt='.2f')\nplt.title('Heatmap of Theil\\'s U for all variable pairs') \nplt.show()\n```"]