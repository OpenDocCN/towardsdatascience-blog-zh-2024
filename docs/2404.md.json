["```py\nimport openai\nrecipient_name = \"John Doe\"\nreason_for_thanks = \"helping me with the project\"\ntone = \"professional\"\nprompt = f\"Write a thank you message to {recipient_name} for {reason_for_thanks}. Use a {tone} tone.\"\nresponse = openai.Completion.create(\"text-davinci-003\", prompt=prompt, n=1)\nemail_body = response.choices[0].text\n```", "```py\nprompt_template = PromptTemplate.from_template(\n    \"\"\"\n    You are an AI executive assistant to {sender_name} who writes letters on behalf of the executive.\n    Write a 3-5 sentence thank you message to {recipient_name} for {reason_for_thanks}.\n    Extract the first name from {sender_name} and sign the message with just the first name.\n    \"\"\"\n)\n...\nresponse = chain.invoke({\n    \"recipient_name\": \"John Doe\",\n    \"reason_for_thanks\": \"speaking at our Data Conference\",\n    \"sender_name\": \"Jane Brown\",\n})\n```", "```py\nfrom langchain_core.caches import InMemoryCache\nfrom langchain_core.globals import set_llm_cache\n\nset_llm_cache(InMemoryCache())\n\nprompt_template = PromptTemplate.from_template(\n    \"\"\"\n    What are the steps to put a freeze on my credit card account?\n    \"\"\"\n)\nchain = prompt_template | model | parser\n```", "```py\nprompt_template = PromptTemplate.from_template(\n    \"\"\"\n    Write a letter to a customer who has purchased a tour package.\n    The customer is traveling {group_type} and the tour is to {tour_destination}.\n    Sound excited to see them and explain some of the highlights of what they will see there\n    and some of the things they can do while there.\n    In the letter, use [CUSTOMER_NAME] to indicate the place to be replaced by their name\n    and [TOUR_GUIDE] to indicate the place to be replaced by the name of the tour guide.\n    \"\"\"\n)\nchain = prompt_template | model | parser\nprint(chain.invoke({\n    \"group_type\": \"family\",\n    \"tour_destination\": \"Toledo, Spain\",\n}))\n```", "```py\nDear [CUSTOMER_NAME],\n\nWe are thrilled to welcome you to Toledo on your upcoming tour! We can't wait to show you the beauty and history of this enchanting city.\n\nToledo, known as the \"City of Three Cultures,\" boasts a fascinating blend of Christian, Muslim, and Jewish heritage.  You'll be mesmerized by the stunning architecture, from the imposing Alc√°zar fortress to the majestic Toledo Cathedral. \n\nDuring your tour, you'll have the opportunity to:\n\n* **Explore the historic Jewish Quarter:** Wander through the narrow streets lined with ancient synagogues and traditional houses. \n* **Visit the Monastery of San Juan de los Reyes:** Admire the exquisite Gothic architecture and stunning cloisters.\n* **Experience the panoramic views:** Take a scenic walk along the banks of the Tagus River and soak in the breathtaking views of the city.\n* **Delve into the art of Toledo:** Discover the works of El Greco, the renowned painter who captured the essence of this city in his art.\n\nOur expert tour guide, [TOUR_GUIDE], will provide insightful commentary and share fascinating stories about Toledo's rich past. \n\nWe know you'll have a wonderful time exploring the city's treasures. Feel free to reach out if you have any questions before your arrival.\n\nWe look forward to welcoming you to Toledo!\n\nSincerely,\n\nThe [Tour Company Name] Team \n```", "```py\nprompt_template = PromptTemplate.from_template(\n    \"\"\"\n    You are a content writer for a manufacturer of paper machines.\n    Write a one-paragraph description of a {part_name}, which is one of the parts of a paper machine.\n    Explain what the part is used for, and reasons that might need to replace the part.\n    \"\"\"\n)\nchain = prompt_template | model | parser\nprint(chain.invoke({\n    \"part_name\": \"wet end\",\n}))\n```", "```py\nclass CatalogContent(BaseModel):\n    part_name: str = Field(\"Common name of part\")\n    part_id: str = Field(\"unique part id in catalog\")\n    part_description: str = Field(\"short description of part\")\n    price: str = Field(\"price of part\")\n\ncatalog_parser = JsonOutputParser(pydantic_object=CatalogContent)\n\nprompt_template = PromptTemplate(\n    template=\"\"\"\n    Extract the information needed and provide the output as JSON.\n    {database_info}\n    Part description follows:\n    {generated_description}\n    \"\"\",\n    input_variables=[\"generated_description\", \"database_info\"],\n    partial_variables={\"format_instructions\": catalog_parser.get_format_instructions()},\n)\n\nchain = prompt_template | model | catalog_parser\n```"]