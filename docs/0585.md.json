["```py\n1.27 GB / 1024 = 0.0010 TB * $8.13 = $0.0084 total costs\n```", "```py\nType       | Size\n-----------|---------------------------------------------------------------\nARRAY      | Sum of the size of its elements \nBIGNUMERIC | 32 logical bytes\nBOOL       | 1 logical byte\nBYTES      | 2 logical bytes + logical bytes in the value\nDATE       | 8 logical bytes\nDATETIME   | 8 logical bytes\nFLOAT64    | 8 logical bytes\nGEOGRAPHY  | 16 logical bytes + 24 logical bytes * vertices in the geo type\nINT64      | 8 logical bytes\nINTERVAL   | 16 logical bytes\nJSON       | Logical bytes in UTF-8 encoding of the JSON string\nNUMERIC    | 16 logical bytes\nSTRING     | 2 logical bytes + the UTF-8 encoded string size\nSTRUCT     | 0 logical bytes + the size of the contained fields\nTIME       | 8 logical bytes\nTIMESTAMP  | 8 logical bytes\n```", "```py\nCREATE TABLE gold.some_table (\n  user_id INT64,\n  other_id INT64,\n  some_String STRING, -- max 10 chars\n  country_code STRING(2),\n  user_name STRING,   -- max 20 chars\n  day DATE\n);\n```", "```py\n100.000.000 rows * (\n  8 bytes (INT64) +\n  8 bytes (INT64) +\n  2 bytes + 10 bytes (STRING) +\n  2 bytes + 2 bytes (STRING(2)) +\n  2 bytes + 20 bytes (STRING) +\n  8 bytes (DATE)\n) = 6200000000 bytes / 1024 / 1024 / 1024\n  = 5.78 GB\n```", "```py\nCREATE TABLE IF NOT EXISTS silver.some_partitioned_table (\n  title STRING,\n  topic STRING,\n  day DATE\n)\nPARTITION BY day\nOPTIONS (\n  partition_expiration_days = 365\n);\n```", "```py\nCREATE TABLE IF NOT EXISTS silver.some_partitioned_table (\n  title STRING,\n  topic STRING,\n  day DATE\n)\nPARTITION BY day\nCLUSTER BY topic\nOPTIONS (\n  partition_expiration_days = 365\n);\n```", "```py\nCREATE TABLE silver.logins (\n    user_id INT64,\n    country STRING(2),\n    logins ARRAY<STRUCT<\n        login_date DATE,\n        login_device STRING\n    >>,\n    day DATE\n)\nPARTITION BY day\nCLUSTER BY country, user_id\nOPTIONS (\n    require_partition_filter=true\n);\n```", "```py\nCREATE SEARCH INDEX example_index ON silver.some_table(ALL COLUMNS);\n```", "```py\nSELECT * FROM silver.some_table WHERE SEARCH(some_table, 'needle');\n```", "```py\nCREATE TABLE gold.inventory (\n date INT64 REFERENCES dim_date(id) NOT ENFORCED,\n item INT64 REFERENCES item(id) NOT ENFORCED,\n warehouse INT64 REFERENCES warehouse(id) NOT ENFORCED,\n quantity INT64,\n PRIMARY KEY(date, item, warehouse) NOT ENFORCED\n);\n```", "```py\nCREATE OR REPLACE TABLE project_x.silver.login_count AS\nSELECT\n    user_id,\n    platform,\n    login_count,\n    day\nFROM project_x.bronze.login_count;\n```", "```py\nCREATE TABLE project_x.silver.login_count\nCOPY project_x.bronze.login_count;\n```", "```py\nbq cp project_x:bronze.login_count project_x:silver.login_count\n```", "```py\n/some_orc_table/month=2024-01/000000_0.orc\n/some_orc_table/month=2024-01/000000_1.orc\n/some_orc_table/month=2024-02/000000_0.orc\n```", "```py\nCREATE EXTERNAL TABLE IF NOT EXISTS project_x.bronze.some_orc_table\nWITH PARTITION COLUMNS\nOPTIONS(\n  format=\"ORC\",\n  hive_partition_uri_prefix=\"gs://project_x/ingest/some_orc_table\",\n  uris=[\"gs://project_x/ingest/some_orc_table/*\"]\n);\n```", "```py\nLOAD DATA OVERWRITE project_x.silver.some_orc_table (\n  user_id INT64,\n  column_1 STRING,\n  column_2 STRING,\n  some_value INT64\n)\nCLUSTER BY column_1, column_2\nFROM FILES (\n  format=\"ORC\",\n  hive_partition_uri_prefix=\"gs://project_x/ingest/some_orc_table\",\n  uris=[\"gs://project_x/ingest/some_orc_table/*\"]\n)\nWITH PARTITION COLUMNS (\n  month STRING\n);\n```", "```py\nDELETE FROM silver.target WHERE day IN (\n  SELECT DISTINCT day\n  FROM bronze.ingest\n);\n```", "```py\nDROP TABLE silver.target$20240101\n```", "```py\nFOR x IN (SELECT DISTINCT day FROM bronze.ingest)\nDO\n  SELECT x; -- replace with DROP TABLE\nEND FOR;\n```", "```py\nSELECT DISTINCT day\nFROM bronze.ingest\n```", "```py\nBytes billed: 149.14 GB (= $1.18 depending on location)\n```", "```py\nSELECT PARSE_DATE('%Y%m%d', partition_id) AS day\nFROM bronze.INFORMATION_SCHEMA.PARTITIONS\nWHERE table_name = 'ingest'\n```", "```py\nBytes billed: 10 MB (= $0.00008 depending on location)\n```", "```py\nCREATE TABLE IF NOT EXISTS gold.some_fact_table (\n  user_id INT64,\n  payment_count INT64,\n  value_1 INT64,\n  value_2 INT64,\n  day DATE\n)\nPARTITION BY day\nCLUSTER BY user_id\nOPTIONS (\n  partition_expiration_days = 365\n);\n```", "```py\nCREATE OR REPLACE VIEW gold.some_fact_view AS\nSELECT\n  user_id,\n  payment_count,\n  value_1,\n  value_2,\n  payment_count > 0 AS is_paying_user,\n  value_1 + value_2 AS total_value,\n  day\nFROM gold.some_fact_table;\n```", "```py\n1000000000 rows * 8 B * 2 columns / 1024 / 1024 / 1024 = 15 GB\n```"]