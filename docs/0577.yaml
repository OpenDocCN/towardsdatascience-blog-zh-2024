- en: How to Read OSM Data with DuckDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-read-osm-data-with-duckdb-ffeb15197390?source=collection_archive---------0-----------------------#2024-03-02](https://towardsdatascience.com/how-to-read-osm-data-with-duckdb-ffeb15197390?source=collection_archive---------0-----------------------#2024-03-02)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A deep dive into OpenStreetMap data structure and how to utilize it in a scalable
    way
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://raczeq.medium.com/?source=post_page---byline--ffeb15197390--------------------------------)[![Kamil
    Raczycki](../Images/2c45075e217e60660ad3b4475530333d.png)](https://raczeq.medium.com/?source=post_page---byline--ffeb15197390--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--ffeb15197390--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--ffeb15197390--------------------------------)
    [Kamil Raczycki](https://raczeq.medium.com/?source=post_page---byline--ffeb15197390--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--ffeb15197390--------------------------------)
    ·29 min read·Mar 2, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1b9c4439391aa4851cbe3131de09a318.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Dall-E 3 image: Adorable and cute 3D render duck studying a paper map, bright
    sky, with blur background, high quality, 8k'
  prefs: []
  type: TYPE_NORMAL
- en: This article will provide an in-depth look at how to read OpenStreetMap data
    using the DuckDB database.
  prefs: []
  type: TYPE_NORMAL
- en: The steps described in this guide will allow the reader to load the OSM data
    using the Monaco example divided into nodes, ways, and relations.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d0ebfd971420ab909f885f939cc1ca64.png)![](../Images/0ff4cf3693bfcbf785e16967120a527e.png)![](../Images/05b73197def9157df492056b089d8d72.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The final result of OSM elements read using the DuckDB engine. From the left:
    nodes, ways and relations. Generated by the author using GeoPandas library.'
  prefs: []
  type: TYPE_NORMAL
- en: A basic knowledge of the SQL language is expected to fully understand the steps
    described in this tutorial. Most of the GIS-related operations and special joins
    are described further in the article.
  prefs: []
  type: TYPE_NORMAL
- en: Outline of the article
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is OSM? — introduction to the OSM service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenStreetMap data model — definition of objects used in the OSM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading OSM data — basic operations on the data using DuckDB.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing point geometries from the **nodes**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing linestring and polygon geometries from the **ways**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructing polygon and multi-polygon geometries from the **relations**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples of badly defined relation objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QuackOSM — a hassle-free tool for reading OSM data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is OSM?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenStreetMap ([OSM](https://openstreetmap.org/)) is the most popular free map
    of the world and it's kept alive by a growing base of volunteers and contributors.
  prefs: []
  type: TYPE_NORMAL
- en: The data collected and built by the community is available publicly for free
    and commercial purposes, so many companies, academic researchers and individual
    developers use this resource in their projects. All data is provided under the
    [Open Data Commons Open Database License](https://opendatacommons.org/licenses/odbl/1.0/)
    (ODbL).
  prefs: []
  type: TYPE_NORMAL
- en: 'The data can be accessed in multiple ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Overpass API (with Web GUI at [Overpass Turbo](https://overpass-turbo.eu/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading full data as [Planet OSM](https://planet.openstreetmap.org/) (currently
    over 70 GB in 2024)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Smaller extract downloads: [Geofabrik](https://download.geofabrik.de/), [BBBike](https://extract.bbbike.org/),
    [OpenStreetMap.fr](https://download.openstreetmap.fr/), [Protomaps](https://app.protomaps.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most space-efficient file type in which the data is stored is Protocolbuffer
    Binary Format with an extension `*.osm.pbf` . You can read more about it [here](https://wiki.openstreetmap.org/wiki/PBF_Format).
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also read this short article about OpenStreetMap from [Eugenia Anello](https://medium.com/u/86fdc517c278?source=post_page---user_mention--ffeb15197390--------------------------------):'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/a-comprehensive-guide-for-getting-started-with-openstreetmap-e92dff95fc80?source=post_page-----ffeb15197390--------------------------------)
    [## A comprehensive guide for getting started with OpenStreetMap'
  prefs: []
  type: TYPE_NORMAL
- en: Learn the basics concepts of OpenStreetMap while practising using the website
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/a-comprehensive-guide-for-getting-started-with-openstreetmap-e92dff95fc80?source=post_page-----ffeb15197390--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: OpenStreetMap data model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section is based on [OSM Wiki page](https://wiki.openstreetmap.org/wiki/Elements)
    about Elements
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Conceptually the data in OpenStreetMap is split into 3 components:'
  prefs: []
  type: TYPE_NORMAL
- en: Nodes represent points in space. They are represented by a pair of coordinates
    in a WGS84 Coordinate Reference System — longitude and latitude. Nodes can be
    used to define a single feature on a map (eg. bench, lamp post, tree) or be used
    with other nodes to represent a shape of a way.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1b8a31585dcda83fce64f09a495b165.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of a node — a tree in the park. Screenshot from the OpenStreetMap by
    the author.
  prefs: []
  type: TYPE_NORMAL
- en: Ways are shapes representing a polyline by using an **ordered** list of nodes.
    Those polylines can be open and represent roads, canals, and walls, or they can
    be closed to form a polygon and represent buildings, forests, lakes or other simple
    shapes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/66e199dab95b9bcb14552b0375443a37.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of a way — a part of a highway road. Screenshot from the OpenStreetMap
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Relations represent relationships between multiple objects and data elements
    defined in the OSM. This could be for example a bus route with ways showing roads
    on which the bus travels and nodes showing stops of a route, or a multi polygon
    with holes represented by at least 2 ways: these can be an *outer* polygon and
    an *inner* polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/638f80e316ca63427f0d70bd3f89cf98.png)'
  prefs: []
  type: TYPE_IMG
- en: An example of a relation— a hotel building outline with holes. Screenshot from
    the OpenStreetMap by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Each element can, but doesn’t have to, have **tags** attached. Tags describe
    the meaning of the element. They are composed of a key and a value. There is no
    fixed dictionary of those values, but users should stay within conventions documented
    in the OSM Wiki.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, each element has an ID that is unique in a given element type
    space (so there can be a node with ID = 100, a way with ID = 100 and a relation
    with ID = 100).
  prefs: []
  type: TYPE_NORMAL
- en: Reading OSM data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many tools allow users to transform the OSM data model to file formats commonly
    used in the GIS domain, such as [GDAL](https://gdal.org/drivers/vector/osm.html).
    These tools are automatically reconstructing geometries from the raw data. We
    will try to read it and reconstruct geometries manually.
  prefs: []
  type: TYPE_NORMAL
- en: Examples below show how to access raw data and are written in SQL using [DuckDB](https://duckdb.org/)
    engine with [Spatial](https://duckdb.org/docs/extensions/spatial.html) extension.
    All queries with a full Jupyer notebook can be accessed in the GitHub repository.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can run the notebook in the parallel or you can [install the DuckDB engine](https://duckdb.org/#quickinstall)
    and open the CLI to execute the queries there.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://github.com/RaczeQ/medium-articles/blob/main/articles/osm-duckdb/code.ipynb?source=post_page-----ffeb15197390--------------------------------)
    [## medium-articles/articles/osm-duckdb/code.ipynb at main · RaczeQ/medium-articles'
  prefs: []
  type: TYPE_NORMAL
- en: A repository for the code and data used in Medium articles - medium-articles/articles/osm-duckdb/code.ipynb
    at main ·…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/RaczeQ/medium-articles/blob/main/articles/osm-duckdb/code.ipynb?source=post_page-----ffeb15197390--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Getting the data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For simplicity and easy access, examples are focused entirely on the Monaco
    region. You can download the current extract from the Geofabrik download server:
    [https://download.geofabrik.de/europe/monaco.html](https://download.geofabrik.de/europe/monaco.html)
    (and click `monaco-latest.osm.pbf` download link)'
  prefs: []
  type: TYPE_NORMAL
- en: Familiarisation with the data structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start, we will use the `DESCRIBE`function to get information about the columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'There are 8 columns returned by the `ST_READOSM`function:'
  prefs: []
  type: TYPE_NORMAL
- en: kind — this is the type of an element. It can also have a value of `changeset`representing
    the changes after editing the existing element in the OSM. Extracts from the Geofabrik
    download server don’t contain changesets, so we don’t have to think about them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: id — the element identifier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'tags — map (or a dictionary) of two strings: a tag key and a tag value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: refs — list of member IDs related to the element. Nodes should have this list
    empty and ways and relations can’t have it empty.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: lat and lon — latitude and longitude of a node. Ways and relations should have
    these fields empty since only nodes can have coordinates in the OSM.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ref_roles and ref_types — a list of additional information about members: what
    role is assigned to the member and what type is it (node, way or relation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Counting the elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s see how many elements there are in total and per element type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Looking at the elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s check the examples of the data for each element type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can see how the elements are defined: nodes have coordinates, ways have
    *refs* lists filled with node IDs and relations have the most complicated structure
    with *refs* lists filled with IDs and *ref_types* lists showing which ID correspond
    to which element type. Additionally, *ref_roles* have information about the role
    of the member (admin_centre, label, inner, outer).'
  prefs: []
  type: TYPE_NORMAL
- en: Constructing point geometries from the nodes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know what the structure looks like, we can start building some geometries.
    Starting with nodes should be the easiest since it’s just a pair of latitudes
    and longitudes in the WGS84 Coordinate Reference System.
  prefs: []
  type: TYPE_NORMAL
- en: We should only extract nodes with at least one tag attached since those have
    any semantical meaning for analytical purposes. Nodes without any tags could be
    used to construct ways in the later stages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c940d87cb6db1a98fff59db98498049a.png)'
  prefs: []
  type: TYPE_IMG
- en: Nodes plotted on a map. Generated by the author using GeoPandas library.
  prefs: []
  type: TYPE_NORMAL
- en: After filtering the nodes based on tags, we are left with 3167 points.
  prefs: []
  type: TYPE_NORMAL
- en: It’s around 10% of the total number of nodes in the source file.
  prefs: []
  type: TYPE_NORMAL
- en: Constructing linestring and polygon geometries from the ways
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With nodes out of the *way* 😉, let’s focus now on ways. Ways can take the form
    of linestrings or polygons. Let’s focus on linestrings first and then we will
    assign proper geometry types.
  prefs: []
  type: TYPE_NORMAL
- en: 'To construct the ways we have to do multiple operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Select matching ways with tags.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unnest all nodes refs for each way element and keep them in the proper order
    (remember - nodes refs order matter!).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select required nodes with geometries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group nodes per way ID and construct a linestring geometry using `ST_MakeLine`function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join constructed geometries with tags.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start with selecting ways with tags.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now we will unnest refs lists and split them into individual rows. We will also
    utilize DuckDB’s indexing functions to remember the order of elements in the original
    list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, there are now multiple rows per way element and multiple ref
    values. Ref_idx represents the original order in the *refs* list.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also see the `SEMI JOIN`clause in the query. This is a special join
    available in the DuckDB, that just filters rows without actually joining the second
    table. You can read more about it in the official documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://duckdb.org/docs/sql/query_syntax/from?source=post_page-----ffeb15197390--------------------------------#semi-and-anti-joins)
    [## FROM & JOIN Clauses'
  prefs: []
  type: TYPE_NORMAL
- en: The FROM clause specifies the source of the data on which the remainder of the
    query should operate. Logically, the…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: duckdb.org](https://duckdb.org/docs/sql/query_syntax/from?source=post_page-----ffeb15197390--------------------------------#semi-and-anti-joins)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can select the required nodes based on the refs from the previous step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we can construct the full linestrings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4ac75ad2615c915d36bbd5d22d94dbf3.png)'
  prefs: []
  type: TYPE_IMG
- en: Ways linestrings plotted on a map. Generated by the author using GeoPandas library.
  prefs: []
  type: TYPE_NORMAL
- en: After doing all of those operations, we have ways in the linestring form. Now
    we have to select the ways that are supposed to be polygons. We can do this based
    on tag values. Unfortunately, there is no single source of truth for this operation.
    We can look at the page from the OSM wiki to see one of the definitions created
    by the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://wiki.openstreetmap.org/wiki/Overpass_turbo/Polygon_Features?source=post_page-----ffeb15197390--------------------------------)
    [## Overpass turbo/Polygon Features'
  prefs: []
  type: TYPE_NORMAL
- en: As OpenStreetMap doesn't have an intrinsic area data type, an heuristic has
    to be applied to determine whether a way is…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: wiki.openstreetmap.org](https://wiki.openstreetmap.org/wiki/Overpass_turbo/Polygon_Features?source=post_page-----ffeb15197390--------------------------------)
    ![](../Images/78cf5e001831f9276d433c6b61d252da.png)
  prefs: []
  type: TYPE_NORMAL
- en: A screenshot from the Overpass turbo/Polygon Features wiki page. Taken on 2024-01-17.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, this list is quite long, so for brevity we will only check if
    the linestring forms a closed loop and if the area tag value is not ‘no’.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now we can see the mix of linestring and polygon geometries in the final result.
    Of course, the predicate for the *is_polygon* column could (or even *should*)
    be extended by the logic mentioned above regarding the values of the tags.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to the image above, many more filled polygons are now visible on the
    map.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/15582954eacc19644cb8eff1f018f0cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Ways geometries plotted on a map. Generated by the author using GeoPandas library.
  prefs: []
  type: TYPE_NORMAL
- en: Constructing polygon and multi-polygon geometries from the relations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Relations are utilized in OSM to group multiple other elements into a single
    object. Here we will focus solely on the (multi-) polygons. These specific elements
    have a `type` tag with one of two values: `boundary`, and `multipolygon`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This kind of object is the most complex to reconstruct the geometry for and
    here is the list of steps we have to do:'
  prefs: []
  type: TYPE_NORMAL
- en: Select relations with proper `type` value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unnest all refs related to the relation and keep only way refs — we only need
    related way refs to reconstruct a polygon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select required ways with linestring geometries — here we can utilize steps
    from constructing ways.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assign an ‘outer’ role to the way ref if it’s `null` and check if any ref from
    the relation has the role ‘outer’ — if a relation has no ‘outer’ refs then treat
    all of them as ‘outer’.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Group all linestrings per ‘outer’ and ‘inner’ role and merge them into a single
    multilinestring — many relations are defined with multiple single linestrings
    that only together create a closed polygon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Split multilinestrings into single closed-loop linestrings and save them as
    polygons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Split geometries into ‘outer’ and ‘inner’ polygons. These can be extracted from
    the `ref_role` column of the relation object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each ‘outer’ polygon, select all ‘inner’ polygons that are fully within
    it and make holes in this polygon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make a union of all ‘outer’ polygons with holes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start with selecting relations with matching tag values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now we will unnest refs lists and split them into individual rows. Like with
    ways, here we will also utilize DuckDB’s indexing functions to remember the order
    of elements in the original list. Additionally, we will only keep the `way` refs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next step, we will construct linestrings for the ways required by the
    relations. The query below compresses almost full logic of reading ways in one
    go (getting required nodes, constructing points and grouping them into linestrings):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: After creating the required linestrings, now we can join them with relations
    data. We will also make sure that the required `ref_role` is properly parsed —
    fill in the empty values or replace them if the relation has incorrectly defined
    `ref_roles` in the OSM database.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, there are multiple ways with linestrings assigned to each relation.
    Let’s look at an example to see how they look on the map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a34fe385da26c62cce2dd5d832df57a9.png)'
  prefs: []
  type: TYPE_IMG
- en: A single relation ([5986437](https://www.openstreetmap.org/relation/5986437))
    with colour-coded ways that are part of it. Generated by the author using GeoPandas
    library.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create full polygons, we have to utilize a `ST_LineMerge` function, that
    will combine a list of linestrings (you can compare it to tying pieces of string
    together). You can read more about this operation here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://postgis.net/docs/ST_LineMerge.html?source=post_page-----ffeb15197390--------------------------------)
    [## ST_LineMerge'
  prefs: []
  type: TYPE_NORMAL
- en: ST_LineMerge - Return the lines formed by sewing together a MultiLineString.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: postgis.net](https://postgis.net/docs/ST_LineMerge.html?source=post_page-----ffeb15197390--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'As an additional validation step, we will check if the produced linestrings
    have at least 4 points and if the first point equals the last point, before converting
    them into polygons:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s see the previous example after this operation. We should expect two separate
    polygons to be present:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d72c2b5c71b7e6a1349da547f29bb068.png)'
  prefs: []
  type: TYPE_IMG
- en: A single relation ([5986437](https://www.openstreetmap.org/relation/5986437))
    with merged ways as two separate polygons. Generated by the author using GeoPandas
    library.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve mentioned previously the `outer` and `inner` ‘ref_types’ of ways that
    create a relation. Here you can see what it looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4bf65f217dccd5aedeea10bf2b511cde.png)'
  prefs: []
  type: TYPE_IMG
- en: A single relation ([8280869](https://www.openstreetmap.org/relation/828086))
    with merged ways grouped into outer and inner polygons. Generated by the author
    using GeoPandas library.
  prefs: []
  type: TYPE_NORMAL
- en: The roles mean that the `inner` ways are the ‘holes’ within `outer` polygons
    and we have to reproduce this step to make proper geometries.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s focus now on splitting the polygons into groups with and without holes,
    using the `ST_Within` predicate, which checks if a geometry is fully within another.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this query, there is utilized another special join — `ANTI JOIN`. This one
    filters out all the rows on the left-side table that are joined by the right-side
    table.
  prefs: []
  type: TYPE_NORMAL
- en: The last step that is needed is to merge all the polygons for a single relation
    using the `ST_Union_Agg` operation. It will combine all polygons into multipolygons
    (if there is more than one) and produce a single geometry.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the previous relation example, now with holes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/217a6f093c325a233d93a5d152a284d4.png)'
  prefs: []
  type: TYPE_IMG
- en: A single relation ([8280869](https://www.openstreetmap.org/relation/828086))
    — a polygon with holes. Generated by the author using GeoPandas library.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/206d0d2c26863920fd791636813f0d85.png)'
  prefs: []
  type: TYPE_IMG
- en: Relations geometries plotted on a map. Generated by the author using GeoPandas
    library.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of badly defined relation objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As OpenStreetMap data is mainly added by the community, there are examples where
    geometries are not properly defined. The OSM wiki describes rules for map makers
    on how to add geometries to a map.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://wiki.openstreetmap.org/wiki/Relation:multipolygon/validity?source=post_page-----ffeb15197390--------------------------------)
    [## Relation:multipolygon/validity'
  prefs: []
  type: TYPE_NORMAL
- en: This page is only a proposition, it doesn't represent a consenus of what is
    or isn't valid, but only what could and…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: wiki.openstreetmap.org](https://wiki.openstreetmap.org/wiki/Relation:multipolygon/validity?source=post_page-----ffeb15197390--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: This section will outline some common mistakes with examples.
  prefs: []
  type: TYPE_NORMAL
- en: Two overlapping ‘outer’ ways in the relation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This building is defined by two shapes: a rectangle and almost a circle. Since
    these two overlap, you can see how the rendering engine created a gap where there
    probably shouldn’t be any.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/671b8dd3fbcd20c09c06f10a11affd08.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from the OpenStreetMap by the author.
  prefs: []
  type: TYPE_NORMAL
- en: No ‘outer’ way in the relation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here you can see a paintball field with `way` members defined as ‘Main Building’
    and 4 ‘Arenas’. These should be all defined as `outer` ways.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/927a31510d513e7214b9c5a477933ade.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from the OpenStreetMap by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Two overlapping or touching ‘inner’ ways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/2dd6cb3b3ac6ea1ed1b73d63d44823ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from the OpenStreetMap by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in reading more about how these can be fixed, look into
    this repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/osmlab/fixing-polygons-in-osm/blob/master/doc/background.md?source=post_page-----ffeb15197390--------------------------------)
    [## fixing-polygons-in-osm/doc/background.md at master · osmlab/fixing-polygons-in-osm'
  prefs: []
  type: TYPE_NORMAL
- en: Fixing (multi)polygons in OpenStreetMap. Contribute to osmlab/fixing-polygons-in-osm
    development by creating an account…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/osmlab/fixing-polygons-in-osm/blob/master/doc/background.md?source=post_page-----ffeb15197390--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: QuackOSM — a hassle-free tool for reading OSM data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To end this article I want to highlight a library that can automatically download
    the OSM data, filter it by the geometry or using OSM tags and save it as a GeoParquet
    file that can be easily integrated into more scalable solutions. The library is
    written in Python and is open-source.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install it with a single command: `pip install quackosm[cli]`.'
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial contains a simplified version of the queries used in the QuackOSM
    🦆, but these won’t scale very well for the bigger regions. The library can easily
    parse whole countries such as France on a consumer-grade PC if you need to. You
    can of course utilize the DuckDB engine later on the prepared GeoParquet file
    using `SPATIAL` extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the steps defined here can be replaced with a single line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[](https://github.com/kraina-ai/quackosm?source=post_page-----ffeb15197390--------------------------------)
    [## GitHub - kraina-ai/quackosm: QuackOSM: an open-source Python and CLI tool
    for reading OpenStreetMap…'
  prefs: []
  type: TYPE_NORMAL
- en: 'QuackOSM: an open-source Python and CLI tool for reading OpenStreetMap PBF
    files using DuckDB - kraina-ai/quackosm'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/kraina-ai/quackosm?source=post_page-----ffeb15197390--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Disclaimer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’m the author of the `QuackOSM` library.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can reach me here:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[https://www.linkedin.com/in/raczyckikamil/](https://www.linkedin.com/in/raczyckikamil/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[https://github.com/raczeq](https://github.com/raczeq)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
