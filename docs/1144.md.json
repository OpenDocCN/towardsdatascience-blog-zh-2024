["```py\nfrom sklearn.decomposition import PCA\n\nn_components = 3\npca = PCA(n_components=n_components)\n\nX_tran = StandardScaler().fit_transform(X)\n\npca.fit(X_tran)\n```", "```py\npd.set_option('precision', 2)\n\nW = pca.components_\nW_df = pd.DataFrame(W, columns=hour_mapper.keys(), index=[f'PC_{i}' for i in range(1, n_components+1)])\nW_df.round(2).style.background_gradient(cmap='Blues')\n```", "```py\nZ = pca.fit_transform(X)\n\n# Name the PCs according to the insights on W matrix\nZ_df = pd.DataFrame(Z, index=origin_mapper.keys(), columns=['Night', 'Noon', 'Morning'])\n\n# Look at the stations we demonstrated earlier\nZ_df = Z_df.loc[['Zhongxiao_Fuxing', 'Taipei_City_Hall', 'Xinpu', 'Yongan_Market'], :]\nZ_df.style.background_gradient(cmap='Blues', axis=1)\n```", "```py\nfrom sklearn.cluster import KMeans\n\n# Fit Z matrix to K-Means model \nkmeans = KMeans(n_clusters=3)\nkmeans.fit(Z)\n```", "```py\nimport plotly.express as px\n\ncluster_df = pd.DataFrame(Z, columns=['PC1', 'PC2', 'PC3']).reset_index()\n\n# Turn the labels from integers to strings, \n# such that it can be treated as discrete numbers in the plot.\ncluster_df['label'] = kmeans.labels_\ncluster_df['label'] = cluster_df['label'].astype(str)\n\nfig = px.scatter_3d(cluster_df, x='PC1', y='PC2', z='PC3', \n                       color='label', \n                       hover_data={\"origin\": (pca_df['index'])},\n                       labels={\n                          \"PC1\": \"Night\",\n                          \"PC2\": \"Noon\",\n                          \"PC3\": \"Morning\",\n                          },\n                      opacity=0.7,\n                      size_max=1,\n                      width = 800, height = 500\n                    ).update_layout(margin=dict(l=0, r=0, b=0, t=0)\n                    ).update_traces(marker_size = 5) \n```"]