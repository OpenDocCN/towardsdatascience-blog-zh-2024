["```py\npip install streamlit\n```", "```py\npip install google-generativeai\n```", "```py\nclass ServiceGuides:\n    def __init__(self, db_name=\"database/persistent/general.db\"):\n        self.conn = sqlite3.connect(db_name)\n        self.create_table()\n\n    def add_service_guide(self, model_number, guide_name, guide_file_url):\n        cursor = self.conn.cursor()\n\n        cursor.execute('''\n            INSERT INTO service_guides (model, guide_name, guide_url)\n            VALUES (?, ?, ?)\n        ''', (model_number, guide_name, guide_file_url))\n\n        self.conn.commit()\n\n    def fetch_guides_by_model_number(self, model_number):\n        cursor = self.conn.cursor()\n        cursor.execute(\n            \"\"\"SELECT guide_url FROM service_guides WHERE model = ?\"\"\",\n            (model_number,),\n        )\n        return cursor.fetchone()\n```", "```py\nclass ServiceEngineerChatbot:\n    def __init__(self):\n        genai.configure(api_key=st.secrets[\"GEMINI_API_KEY\"])\n\n    def post_service_guide_to_gemini(self, title, path_to_service_guide):\n        service_guide = genai.upload_file(\n            path=path_to_service_guide,\n            display_name=title,\n        )\n\n        while service_guide.state.name == 'PROCESSING':\n            print('Waiting for file to be processed.')\n            time.sleep(2)\n            service_guide = genai.get_file(service_guide.name)\n\n        return service_guide\n```", "```py\nclass ServiceEngineerChatbot:\n    def __init__(self):\n        genai.configure(api_key=st.secrets[\"GEMINI_API_KEY\"])\n\n    def construct_flash_model(self, brand, sub_category, model_number):\n        model_system_instruction = f\"\"\"\n        Add your detailed system instructions here.\n        These instructions should define the chatbot's behavior, tone, and \n        provide any necessary context. For example, you might include \n        guidelines about how to respond to queries, the structure of \n        responses, or information about what the chatbot should and should\n        not do. Checkout my repo for this chatbot's system instructions.\n        \"\"\"\n\n        model_generation_cofig = genai.types.GenerationConfig(\n            candidate_count=1,\n            max_output_tokens=1500,\n            temperature=0.4,\n        ),\n\n        model = genai.GenerativeModel(\n            model_name=\"gemini-1.5-flash\",\n            system_instruction=model_system_instruction,\n            generation_config=model_generation_cofig,\n        )\n        return model\n```", "```py\nclass ServiceEngineerChatbot:\n    def _generate_context_cache(\n        self,\n        brand,\n        sub_category,\n        model_number,\n        service_guide_title,\n        service_guide,\n        ttl_mins=70,\n    ):\n        context_cache = caching.CachedContent.create(\n            model='models/gemini-1.5-flash-001',\n            display_name=f\"{service_guide_title}_cache\",\n            system_instruction=model_system_instruction,\n            contents=[\n                service_guide\n            ],\n            ttl=datetime.timedelta(\n                minutes=ttl_mins\n            ),\n        )\n\n        return context_cache\n```"]