- en: Running RStudio Inside a Container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/running-rstudio-inside-a-container-e9db5e809ff8?source=collection_archive---------5-----------------------#2024-03-09](https://towardsdatascience.com/running-rstudio-inside-a-container-e9db5e809ff8?source=collection_archive---------5-----------------------#2024-03-09)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A step-by-step guide for setting up an RStudio server inside a container with
    your local RStudio settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@rami.krispin?source=post_page---byline--e9db5e809ff8--------------------------------)[![Rami
    Krispin](../Images/8af28c282d42a2a27c28aa8af4c8d482.png)](https://medium.com/@rami.krispin?source=post_page---byline--e9db5e809ff8--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--e9db5e809ff8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--e9db5e809ff8--------------------------------)
    [Rami Krispin](https://medium.com/@rami.krispin?source=post_page---byline--e9db5e809ff8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--e9db5e809ff8--------------------------------)
    ·6 min read·Mar 9, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: This is a step-by-step guide for setting up an RStudio server inside a container
    with your local RStudio settings. We will use the [Rocker RStudio image](https://hub.docker.com/r/rocker/rstudio)
    and show how to customize it with the `docker run` command and its arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this tutorial, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch an RStudio server inside a container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mount local folders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clone local RStudio settings (color theme, code snippets, etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load local Renviron setting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/7758b9511dbe9829b8d18880f155bf26.png)'
  prefs: []
  type: TYPE_IMG
- en: A whale carries an R container (created by the author with Midjourney)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RStudio is the primary IDE for the R programming language. Unlike other general-purpose
    IDEs such as VScode, RStudio was built and designed specifically for R users and
    their needs. This is one of the reasons for the popularity of RStudio among R
    users. By default, RStudio does not have native support for Docker. The main method
    for setting and running RStudio inside a container is using the RStudio server
    version. This required installing and setting the server inside a container, which
    might be an entry barrier for some users. Luckily, the [Rocker project](https://rocker-project.org/)
    — the main source for R images provides built-in and ready-to-use images with
    an RStudio server.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this tutorial, we will use the Rocker RStudio image, which is available
    on [Docker Hub](https://hub.docker.com/r/rocker/rstudio/tags).
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with this tutorial and run the code below, you will need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Docker Desktop](https://www.docker.com/products/docker-desktop/) (or any alternative)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Docker Hub](https://hub.docker.com/) account'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic understanding of the [docker run](https://docs.docker.com/reference/cli/docker/container/run/)
    command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting Started with Rocker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The [Rocker Project](https://rocker-project.org/) is the main hub for built-in
    R images. It provides various images with different R environment settings, such
    as base-r, tidyverse, ML-verse, shiny, geospatial, and, of course, the RStudio
    server image. The full list of available R images is on the Rocker’s Docker Hub
    page.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fc1b996c4b0016643c33407f2c1880e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Rocker’s top images by number of downloads (screenshot from Docker Hub by the
    author)
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `rocker/rstudio` image, which, as its name implies, has an RStudio
    server installed and ready to use. Using the`docker run` command, we can launch
    this container in an interactive mode and access the RStudio server via the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s get started by pulling the image with the `docker pull` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the `docker images` command to verify that the image was downloaded
    successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now go ahead and use the suggested command from the Rocker Project to
    launch RStudio inside the container with the `docker run` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we open the RStudio server on the browser, let’s review the `run` arguments
    we used above:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rm` — Automatically remove the container when it exits (from the terminal
    `control + c`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ti` — Run the container in an interactive mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`e` — Set environment variable, in this case, to define the server login password
    as `yourpassword`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p` — Define the port mapping. In this case, we will map the container’s `8787`
    port with port `8787` on the local machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After running the command, you can access the RStudio server on local host
    8787 (e.g., [http://localhost:8787](http://localhost:8787)). This will prompt
    the login page, where you should use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Username: `rstudio`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Password: `yourpassword` (as set in the `run` commend)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You should expect the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e8094acf875b3185fd4cd5beaabec26d.png)'
  prefs: []
  type: TYPE_IMG
- en: The initial view of the RStudio server (screenshot by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** You can stop the running container on terminal by clicking `control+c`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Oh No! It Is Ephemeral!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the Docker container runs in ephemeral mode. Any code created and
    saved on the container or input you generated will be lost when terminating the
    container run time. This is neither practical nor useful if you wish to use Docker
    as your development environment. To address this issue, we will use the **volume**
    (or `v`)argument, which enables the mount of local folders with the container
    files system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The below code demonstrates the use of the volume argument to mount the folder
    we execute the `run` command from (e.g., `.`) with the RStudio server home folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The volume argument maps the local folder (e.g., `source`) with the container
    (e.g., `target`) using the following format `source:target`.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s now go back to the browser and reopen the RStudio server using the local
    host address — [http://localhost:8787](http://localhost:8787). You should expect
    to see in the RStudio files section the folders and/or files that are available
    on the local folder you mount to the container. In my case, I will mount my tutorials
    folder, which has the following folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see in the screenshot below, the local folders are now available
    and accessible from the RStudio server (marked with a purple rectangle):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d2d338f2101155644d12e5b19282414a.png)'
  prefs: []
  type: TYPE_IMG
- en: RStudio server with a local volume (screenshot by the author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: You can use the volume argument to mount multiple volumes. For example,
    one for your project and second for a folder with your data folders'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This enables us to read from and write to the local folder from the container
    during run time.
  prefs: []
  type: TYPE_NORMAL
- en: Clone Your Local RStudio Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we saw how to mount a local folder to the container
    with the volume argument. This enables us to save our code locally while working
    inside the container. In this section, we will see how we can leverage the volume
    argument to mount our local RStudio setting with the ones on the container. The
    idea here is to launch the container and run the RStudio server with our local
    settings without needing to update the settings any time we relaunch the container.
    This includes loading local settings such as color theme settings, code snippets,
    environment variables, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we can update the `docker run` with the local RStudio configuration
    folder, we need to identify the folder path of the config folder of both the local
    and the one on the container. For example, the path on my machine is `~/.config/rstudio`
    and it contains the following folders and files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, the `.config/rstudio` folder on the container is under the `/home/rstudio/`.
    Therefore, we will use the following mapping:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Likewise, we want to mount the `.Renviron` file with the local environment
    variables. The `.Renviron` file is under the root folder on the local machine,
    and we follow the same approach to map the local file with the ones on the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now add it all together and relaunch the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'After mounting the local RStudio config folder with the one on the container,
    the server settings are now mapped with the local RStudio settings on my machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9681c75361b6e632fd25354a3f02ddf1.png)'
  prefs: []
  type: TYPE_IMG
- en: RStudio server with the local settings (screenshot by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This tutorial focuses on customizing the Rocker’s RStudio image with the `docker
    run` command. We used the `volume` argument to mount the local folder to the container
    working directory. This enables us to work inside a containerized environment
    and save our work locally. In addition, we used the volume argument to clone the
    local RStudio settings to the container. This makes the transition from the local
    environment to the containerized smoother. The command can become long and convoluted
    as we add and use more arguments. Once you have finalized your `run` settings,
    the next step is to transition it into a YAML file using the [Docker Compose](https://docs.docker.com/compose/).
    Beyond the simplification of the launch process of the container, Docker Compose
    enables you to manage more complex scenarios, such as launching multiple containers.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RStudio — [https://posit.co/products/open-source/rstudio/](https://posit.co/products/open-source/rstudio/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Rocker Project — [https://rocker-project.org/](https://rocker-project.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Hub — [https://hub.docker.com/](https://hub.docker.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
