["```py\ndata = [\n    {\n        \"question\": \"How many movies were released in 1995?\",\n        \"cypher\": \"MATCH (m:Movie) WHERE m.Year = 1995 RETURN count(*) AS result\",\n    },\n    {\n        \"question\": \"Who directed the movie Inception?\",\n        \"cypher\": \"MATCH (m:Movie {title: 'Inception'})<-[:DIRECTED]-(d) RETURN d.name\",\n    },\n    {\n        \"question\": \"Which actors played in the movie Casino?\",\n        \"cypher\": \"MATCH (m:Movie {title: 'Casino'})<-[:ACTED_IN]-(a) RETURN a.name\",\n    },\n    {\n        \"question\": \"How many movies has Tom Hanks acted in?\",\n        \"cypher\": \"MATCH (a:Actor {name: 'Tom Hanks'})-[:ACTED_IN]->(m:Movie) RETURN count(m)\",\n    },\n    {\n        \"question\": \"List all the genres of the movie Schindler's List\",\n        \"cypher\": \"MATCH (m:Movie {title: 'Schindler\\\\'s List'})-[:IN_GENRE]->(g:Genre) RETURN g.name\",\n    },\n    ...\n]\n```", "```py\ngraph = Neo4jGraph()\nprint(graph.schema)\n# Node properties are the following:\n# Movie {posterEmbedding: LIST, url: STRING, runtime: INTEGER, revenue: INTEGER, budget: INTEGER, plotEmbedding: LIST, imdbRating: FLOAT, released: STRING, countries: LIST, languages: LIST, plot: STRING, imdbVotes: INTEGER, imdbId: STRING, year: INTEGER, poster: STRING, movieId: STRING, tmdbId: STRING, title: STRING}\n# Genre {name: STRING}\n# User {userId: STRING, name: STRING}\n# Actor {url: STRING, bornIn: STRING, bio: STRING, died: DATE, born: DATE, imdbId: STRING, name: STRING, poster: STRING, tmdbId: STRING}\n# Director {url: STRING, bornIn: STRING, born: DATE, died: DATE, tmdbId: STRING, imdbId: STRING, name: STRING, poster: STRING, bio: STRING}\n# Person {url: STRING, bornIn: STRING, bio: STRING, died: DATE, born: DATE, imdbId: STRING, name: STRING, poster: STRING, tmdbId: STRING}\n# Relationship properties are the following:\n# RATED {rating: FLOAT, timestamp: INTEGER}\n# ACTED_IN {role: STRING}\n# DIRECTED {role: STRING}\n# The relationships are the following:\n# (:Movie)-[:IN_GENRE]->(:Genre)\n# (:User)-[:RATED]->(:Movie)\n# (:Actor)-[:ACTED_IN]->(:Movie)\n# (:Actor)-[:DIRECTED]->(:Movie)\n# (:Director)-[:DIRECTED]->(:Movie)\n# (:Director)-[:ACTED_IN]->(:Movie)\n# (:Person)-[:ACTED_IN]->(:Movie)\n# (:Person)-[:DIRECTED]->(:Movie)\n```", "```py\ncypher_template = \"\"\"Based on the Neo4j graph schema below, \nwrite a Cypher query that would answer the user's question.\nReturn only Cypher statement, no backticks, nothing else.\n{schema}\n\nQuestion: {question}\nCypher query:\"\"\"  # noqa: E501\n\ncypher_prompt = ChatPromptTemplate.from_messages(\n    [\n        (\n            \"system\",\n            \"Given an input question, convert it to a Cypher query. No pre-amble.\",\n        ),\n        (\"human\", cypher_template),\n    ]\n)\n\ncypher_chain = (\n    RunnablePassthrough.assign(\n        schema=lambda _: graph.get_schema,\n    )\n    | cypher_prompt\n    | llm.bind(stop=[\"\\nCypherResult:\"])\n    | StrOutputParser()\n)\n```", "```py\nresponse = cypher_chain.invoke(\n    {\n        \"question\": \"How many movies have the keyword 'love' in the title and a runtime under 2 hours?\"\n    }\n)\nprint(response)\n# MATCH (m:Movie) \n# WHERE m.title CONTAINS 'love' AND m.runtime < 120 \n# RETURN count(m) as NumberOfMovies\n```", "```py\n# Iterate over each row with tqdm to show a progress bar\nfor index, row in tqdm(df.iterrows(), total=df.shape[0]):\n    # Fetch data based on the test Cypher statement\n    true_data = graph.query(row[\"cypher\"])\n    # Generate 3 Cypher statement and fetch data\n    example_generated_cyphers = []\n    example_eval_datas = []\n    for _ in range(3):\n        cypher = cypher_chain.invoke({\"question\": row[\"question\"]})\n        example_generated_cyphers.append(cypher)\n        # Fetch data based on the generated Cypher statement\n        try:\n            example_eval_datas.append(graph.query(cypher))\n        except ValueError:  # Handle syntax error\n            example_eval_datas.append([{\"id\": \"Cypher syntax error\"}])\n\n    # These metrics require only the first cypher/response\n    jaro_winkler = get_jw_distance(row[\"cypher\"], example_generated_cyphers[0])\n    pass_1 = (\n        1\n        if df_sim_pair(\n            (row[\"cypher\"], true_data),\n            (example_generated_cyphers[0], example_eval_datas[0]),\n        )\n        == 1\n        else 0\n    )\n    jaccard = df_sim_pair(\n        (row[\"cypher\"], true_data),\n        (example_generated_cyphers[0], example_eval_datas[0]),\n    )\n    # Pass@3 check all 3 responses\n    pass_3 = 1 if any(\n        df_sim_pair((row[\"cypher\"], true_data), (gen_cypher, eval_data)) == 1\n        for gen_cypher, eval_data in zip(example_generated_cyphers, example_eval_datas)\n    ) else 0\n\n    # Append the results to their respective lists\n    generated_cyphers.append(example_generated_cyphers)\n    true_datas.append(true_data)\n    eval_datas.append(example_eval_datas)\n    jaro_winklers.append(jaro_winkler)\n    pass_1s.append(pass_1)\n    pass_3s.append(pass_3)\n    jaccards.append(jaccard)\n```", "```py\nrow = df.iloc[24]\n# Print the desired information\nprint(\"Question:\", row[\"question\"], \"\\n\")\nprint(\"True Cypher:\", row[\"cypher\"], \"\\n\")\nprint(\"Generated Cypher\", row[\"generated_cypher\"][0], \"\\n\")\n\n# Question: Which directors have never had a movie with a rating below 6.0? \n# True Cypher: \n# MATCH (d:Director)-[:DIRECTED]->(m:Movie) \n# WITH d, MIN(m.imdbRating) AS lowestRating WHERE lowestRating >= 6.0 \n# RETURN d.name, lowestRating \n\n# Generated Cypher\n# MATCH (d:Director)-[:DIRECTED]->(m:Movie)\n# WHERE NOT EXISTS {\n#     MATCH (d)-[:DIRECTED]->(m2:Movie)\n#     WHERE m2.imdbRating < 6.0\n# }\n# RETURN DISTINCT d.name \n```"]