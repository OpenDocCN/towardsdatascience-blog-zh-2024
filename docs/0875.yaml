- en: Packaging Your TypeScript Client into a Python Backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/packaging-your-typescript-client-into-a-python-backend-b087e50c5c1a?source=collection_archive---------6-----------------------#2024-04-05](https://towardsdatascience.com/packaging-your-typescript-client-into-a-python-backend-b087e50c5c1a?source=collection_archive---------6-----------------------#2024-04-05)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/b458042bef9c23c961a0c8f73536f6cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: A FULL HANDS-ON GUIDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Combine your React Application with the FastAPI web-server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://itay-bittan.medium.com/?source=post_page---byline--b087e50c5c1a--------------------------------)[![Itay
    Bittan](../Images/328e4d9b0b98b65e59e42983e9d1afaa.png)](https://itay-bittan.medium.com/?source=post_page---byline--b087e50c5c1a--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b087e50c5c1a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b087e50c5c1a--------------------------------)
    [Itay Bittan](https://itay-bittan.medium.com/?source=post_page---byline--b087e50c5c1a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b087e50c5c1a--------------------------------)
    ·6 min read·Apr 5, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: In this guide, you will learn how to package a simple TypeScript [React Application](https://react.dev/)
    into a **Python package** and serve it from your [FastAPI](https://fastapi.tiangolo.com/)
    Python web server. Check out the [client](https://github.com/itayB/vite-project)
    and the [server](https://github.com/itayB/backend) repos, if you want to see the
    full code. Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: 'During the development process, you probably use two different IDEs:'
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript or JavaScript React App window, running on a dedicated listening
    port (e.g., 5173) to serve the client/frontend pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Python FastAPI, running on a different port (e.g., 8080) to serve a REST API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In other words, you have two different servers running locally. Whenever you
    want to call your FastAPI server, the browser interacts with two different servers.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ddea8edae4c7663617a54bd567a9a9d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Local development (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: While it works fine locally (in `localhost`), you’ll encounter a “Cross-Origin
    Request Blocked” error in your browser when you deploy that code. Before taking
    your code to production, the best practice is to serve both client pages and REST
    API from the same backend web server. That way the browser will interact with
    a single backend. It’s better for security, performance, and simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9b7ad97acecff8862df24587b69f1b25.png)'
  prefs: []
  type: TYPE_IMG
- en: Preparing for Production (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Create a Simple React Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, in your `workspace` directory, let’s create a new TypeScript React application
    using [vite](https://vitejs.dev/):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, enter into the new project directory, install the dependencies, and run
    the application ([http://localhost:5173](http://localhost:5174/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a3d3ba1a5cafb7f5ac88a61678ae6210.png)'
  prefs: []
  type: TYPE_IMG
- en: First Vite React Template (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s make a small addition to the template — we’ll add an async HTTP
    call to the future FastAPI backend to get its status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And now we should get something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fbc82ab99eee369cf0e6acce971c153d.png)'
  prefs: []
  type: TYPE_IMG
- en: With a Backend call (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the **Backend Status** is `unknown` because we haven’t implemented
    it yet. No worries, we will handle that shortly. Lastly, let’s build the client
    for packaging it later on:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The build output should create a `dist` folder with the final optimized code
    that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Building a Python Package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this point, we are switching to Python. I prefer to work in a [virtual environment](https://docs.python.org/3/library/venv.html)
    for isolation. In a dedicated virtual environment, we will install `twine` and
    `build` , for creating our Python package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s create a new `setup.py` file in the root folder (`vite-project`), with
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'and run the following to create the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The last line above is optional if you intend to upload your package to a remote
    repository such as [PyPI](https://pypi.org/), [JFrog Artifactory](https://jfrog.com/artifactory/),
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Create a FastAPI Python web-server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The final step is to build the Python server and use the client package. For
    that, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `backend`directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new virtual environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install the relevant packages and our client package:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we installed our client package from a local path that we created
    earlier. If you uploaded your package to a remote repository, you can install
    it with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s create a simple Python server (2 files):'
  prefs: []
  type: TYPE_NORMAL
- en: '**__main__.py**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: health_router.py
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the implementation above, we added support for serving any static file from
    our client application by mounting the `static` and `assets` folders, as well
    as any other client file to be served by our Python server.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also created a simple GET endpoint, `v1/health-check/liveness` that returns
    a simple `{“status": “success"}` JSON response. That way we can ensure that our
    server handles both client static files and our server-side RESTful API.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we go to [localhost:8080](http://localhost:8080) we can see our client
    up and running. Pay attention to the **Backend Status** below, it’s now `success`
    (rather than `unknown`).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dcee5308f6c616195bfc292a2ea1e253.png)'
  prefs: []
  type: TYPE_IMG
- en: Running a Python server together with React Application (Image by Author)
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial, we created a simple React Application that does a single call
    to the backend. We wrapped this client application as a Python package and served
    it from our FastAPI Python web server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this approach allows you to leverage the best tools in both worlds: TypeScript
    and React for the frontend, and Python with FastAPI for the backend. Yet, we want
    to keep high cohesion and low coupling between those two components. That way,
    you will get all the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Velocity, by separating front-end and backend to different repositories, each
    part can be developed by a different team.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stability and Quality, by locking a versioned client package and bumping it
    only when the server is ready to support a new client version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Safety — The browser interacts with only one backend server. We don’t need to
    enable CORS or any other security-compromising workarounds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplicity — By working via a single server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
