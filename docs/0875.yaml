- en: Packaging Your TypeScript Client into a Python Backend
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你的 TypeScript 客户端打包成 Python 后端
- en: 原文：[https://towardsdatascience.com/packaging-your-typescript-client-into-a-python-backend-b087e50c5c1a?source=collection_archive---------6-----------------------#2024-04-05](https://towardsdatascience.com/packaging-your-typescript-client-into-a-python-backend-b087e50c5c1a?source=collection_archive---------6-----------------------#2024-04-05)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/packaging-your-typescript-client-into-a-python-backend-b087e50c5c1a?source=collection_archive---------6-----------------------#2024-04-05](https://towardsdatascience.com/packaging-your-typescript-client-into-a-python-backend-b087e50c5c1a?source=collection_archive---------6-----------------------#2024-04-05)
- en: '![](../Images/b458042bef9c23c961a0c8f73536f6cc.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b458042bef9c23c961a0c8f73536f6cc.png)'
- en: Photo by [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Markus Spiske](https://unsplash.com/@markusspiske?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: A FULL HANDS-ON GUIDE
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整的实操指南
- en: Combine your React Application with the FastAPI web-server
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将你的 React 应用与 FastAPI Web 服务器结合
- en: '[](https://itay-bittan.medium.com/?source=post_page---byline--b087e50c5c1a--------------------------------)[![Itay
    Bittan](../Images/328e4d9b0b98b65e59e42983e9d1afaa.png)](https://itay-bittan.medium.com/?source=post_page---byline--b087e50c5c1a--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b087e50c5c1a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b087e50c5c1a--------------------------------)
    [Itay Bittan](https://itay-bittan.medium.com/?source=post_page---byline--b087e50c5c1a--------------------------------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://itay-bittan.medium.com/?source=post_page---byline--b087e50c5c1a--------------------------------)[![Itay
    Bittan](../Images/328e4d9b0b98b65e59e42983e9d1afaa.png)](https://itay-bittan.medium.com/?source=post_page---byline--b087e50c5c1a--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b087e50c5c1a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b087e50c5c1a--------------------------------)
    [Itay Bittan](https://itay-bittan.medium.com/?source=post_page---byline--b087e50c5c1a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b087e50c5c1a--------------------------------)
    ·6 min read·Apr 5, 2024
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b087e50c5c1a--------------------------------)
    ·阅读时间 6 分钟·2024年4月5日
- en: --
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: In this guide, you will learn how to package a simple TypeScript [React Application](https://react.dev/)
    into a **Python package** and serve it from your [FastAPI](https://fastapi.tiangolo.com/)
    Python web server. Check out the [client](https://github.com/itayB/vite-project)
    and the [server](https://github.com/itayB/backend) repos, if you want to see the
    full code. Let’s get started!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南中，你将学习如何将一个简单的 TypeScript [React 应用程序](https://react.dev/) 打包成一个 **Python
    包**，并通过你的 [FastAPI](https://fastapi.tiangolo.com/) Python Web 服务器提供服务。如果你想查看完整的代码，请查看
    [客户端](https://github.com/itayB/vite-project) 和 [服务器](https://github.com/itayB/backend)
    的代码库。让我们开始吧！
- en: 'During the development process, you probably use two different IDEs:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，你可能会使用两个不同的集成开发环境（IDE）：
- en: TypeScript or JavaScript React App window, running on a dedicated listening
    port (e.g., 5173) to serve the client/frontend pages.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TypeScript 或 JavaScript React 应用窗口，运行在专用监听端口（例如：5173）上，用于提供客户端/前端页面。
- en: Python FastAPI, running on a different port (e.g., 8080) to serve a REST API.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Python FastAPI，运行在另一个端口（例如：8080）上，用于提供 REST API。
- en: In other words, you have two different servers running locally. Whenever you
    want to call your FastAPI server, the browser interacts with two different servers.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，你有两个不同的服务器在本地运行。每当你想调用 FastAPI 服务器时，浏览器需要与两个不同的服务器进行交互。
- en: '![](../Images/ddea8edae4c7663617a54bd567a9a9d5.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ddea8edae4c7663617a54bd567a9a9d5.png)'
- en: Local development (Image by Author)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本地开发（图示来自作者）
- en: While it works fine locally (in `localhost`), you’ll encounter a “Cross-Origin
    Request Blocked” error in your browser when you deploy that code. Before taking
    your code to production, the best practice is to serve both client pages and REST
    API from the same backend web server. That way the browser will interact with
    a single backend. It’s better for security, performance, and simplicity.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在本地（`localhost`）运行时一切正常，但当你将代码部署到生产环境时，浏览器会遇到“跨源请求被阻止”的错误。在将代码部署到生产环境之前，最佳实践是将客户端页面和
    REST API 都从同一个后端 Web 服务器提供服务。这样浏览器将只与一个后端交互，这对安全性、性能和简洁性更有益。
- en: '![](../Images/9b7ad97acecff8862df24587b69f1b25.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b7ad97acecff8862df24587b69f1b25.png)'
- en: Preparing for Production (Image by Author)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 准备上线（图示来自作者）
- en: 1\. Create a Simple React Application
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 创建一个简单的 React 应用
- en: 'First, in your `workspace` directory, let’s create a new TypeScript React application
    using [vite](https://vitejs.dev/):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在你的 `workspace` 目录中，使用 [vite](https://vitejs.dev/) 创建一个新的 TypeScript React
    应用程序：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, enter into the new project directory, install the dependencies, and run
    the application ([http://localhost:5173](http://localhost:5174/)):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，进入新的项目目录，安装依赖并运行应用程序（[http://localhost:5173](http://localhost:5174/)）：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should see something like:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该会看到类似的内容：
- en: '![](../Images/a3d3ba1a5cafb7f5ac88a61678ae6210.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a3d3ba1a5cafb7f5ac88a61678ae6210.png)'
- en: First Vite React Template (Image by Author)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 Vite React 模板（图片来自作者）
- en: 'Now, let’s make a small addition to the template — we’ll add an async HTTP
    call to the future FastAPI backend to get its status:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们对模板做一个小修改——我们将添加一个异步 HTTP 调用来获取未来 FastAPI 后端的状态：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And now we should get something like this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们应该能看到类似这样的结果：
- en: '![](../Images/fbc82ab99eee369cf0e6acce971c153d.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fbc82ab99eee369cf0e6acce971c153d.png)'
- en: With a Backend call (Image by Author)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用后端调用（图片来自作者）
- en: 'At this point, the **Backend Status** is `unknown` because we haven’t implemented
    it yet. No worries, we will handle that shortly. Lastly, let’s build the client
    for packaging it later on:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，**后端状态**是 `unknown`，因为我们尚未实现它。别担心，我们很快就会处理它。最后，让我们构建客户端，方便稍后进行打包：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The build output should create a `dist` folder with the final optimized code
    that looks like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 打包输出应创建一个 `dist` 文件夹，其中包含最终优化后的代码，如下所示：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 2\. Building a Python Package
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 构建 Python 包
- en: 'At this point, we are switching to Python. I prefer to work in a [virtual environment](https://docs.python.org/3/library/venv.html)
    for isolation. In a dedicated virtual environment, we will install `twine` and
    `build` , for creating our Python package:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们切换到 Python 环境。我更喜欢在 [虚拟环境](https://docs.python.org/3/library/venv.html)
    中工作以实现隔离。在一个专用的虚拟环境中，我们将安装 `twine` 和 `build` 来创建我们的 Python 包：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s create a new `setup.py` file in the root folder (`vite-project`), with
    the following content:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在根文件夹（`vite-project`）中创建一个新的 `setup.py` 文件，内容如下：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'and run the following to create the package:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后运行以下命令来创建包：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The last line above is optional if you intend to upload your package to a remote
    repository such as [PyPI](https://pypi.org/), [JFrog Artifactory](https://jfrog.com/artifactory/),
    etc.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的最后一行是可选的，如果你打算将你的包上传到远程仓库，例如 [PyPI](https://pypi.org/)、[JFrog Artifactory](https://jfrog.com/artifactory/)
    等。
- en: 3\. Create a FastAPI Python web-server
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 创建一个 FastAPI Python Web 服务器
- en: 'The final step is to build the Python server and use the client package. For
    that, we will:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是构建 Python 服务器并使用客户端包。为此，我们将：
- en: Create a new `backend`directory.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的 `backend` 目录。
- en: Create a new virtual environment.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的虚拟环境。
- en: 'Install the relevant packages and our client package:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装相关的包和我们的客户端包：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note that we installed our client package from a local path that we created
    earlier. If you uploaded your package to a remote repository, you can install
    it with:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们从之前创建的本地路径安装了我们的客户端包。如果你将包上传到远程仓库，你可以使用以下命令安装：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, let’s create a simple Python server (2 files):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个简单的 Python 服务器（2 个文件）：
- en: '**__main__.py**'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**__main__.py**'
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: health_router.py
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: health_router.py
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the implementation above, we added support for serving any static file from
    our client application by mounting the `static` and `assets` folders, as well
    as any other client file to be served by our Python server.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的实现中，我们通过挂载 `static` 和 `assets` 文件夹以及任何其他客户端文件来支持从客户端应用程序提供静态文件，并由我们的 Python
    服务器进行服务。
- en: 'We also created a simple GET endpoint, `v1/health-check/liveness` that returns
    a simple `{“status": “success"}` JSON response. That way we can ensure that our
    server handles both client static files and our server-side RESTful API.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '我们还创建了一个简单的 GET 端点 `v1/health-check/liveness`，它返回一个简单的 `{“status": “success"}`
    JSON 响应。这样我们就能确保服务器同时处理客户端静态文件和服务器端 RESTful API。'
- en: Now, if we go to [localhost:8080](http://localhost:8080) we can see our client
    up and running. Pay attention to the **Backend Status** below, it’s now `success`
    (rather than `unknown`).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们访问 [localhost:8080](http://localhost:8080)，我们可以看到我们的客户端正在运行。注意下面的 **后端状态**，现在它是
    `success`（而不是 `unknown`）。
- en: '![](../Images/dcee5308f6c616195bfc292a2ea1e253.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dcee5308f6c616195bfc292a2ea1e253.png)'
- en: Running a Python server together with React Application (Image by Author)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 同时运行 Python 服务器与 React 应用程序（图片来自作者）
- en: Summary
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this tutorial, we created a simple React Application that does a single call
    to the backend. We wrapped this client application as a Python package and served
    it from our FastAPI Python web server.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们创建了一个简单的React应用程序，该应用程序向后端发出单个请求。我们将这个客户端应用程序封装为一个Python包，并通过我们的FastAPI
    Python Web服务器提供服务。
- en: 'Using this approach allows you to leverage the best tools in both worlds: TypeScript
    and React for the frontend, and Python with FastAPI for the backend. Yet, we want
    to keep high cohesion and low coupling between those two components. That way,
    you will get all the benefits:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这种方法可以让你在两个领域中利用最好的工具：前端使用TypeScript和React，后端使用Python和FastAPI。然而，我们希望保持这两个组件之间的高度内聚和低耦合。这样，你将获得所有的好处：
- en: Velocity, by separating front-end and backend to different repositories, each
    part can be developed by a different team.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 效率，通过将前端和后端分离到不同的代码库，每个部分可以由不同的团队进行开发。
- en: Stability and Quality, by locking a versioned client package and bumping it
    only when the server is ready to support a new client version.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稳定性和质量，通过锁定版本化的客户端包，并仅在服务器准备好支持新客户端版本时才进行更新。
- en: Safety — The browser interacts with only one backend server. We don’t need to
    enable CORS or any other security-compromising workarounds.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性——浏览器仅与一个后端服务器进行交互。我们无需启用CORS或任何其他可能妥协安全性的解决方法。
- en: Simplicity — By working via a single server
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单性——通过使用单一服务器进行工作
