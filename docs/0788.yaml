- en: Adding Temporal Resiliency to Data Science Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/adding-temporal-resiliency-to-data-science-applications-6b052d7b81af?source=collection_archive---------5-----------------------#2024-03-26](https://towardsdatascience.com/adding-temporal-resiliency-to-data-science-applications-6b052d7b81af?source=collection_archive---------5-----------------------#2024-03-26)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Can our applications reap the reliability benefit of redundancy without spending
    any money on redundant resources?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@rohitpandey576?source=post_page---byline--6b052d7b81af--------------------------------)[![Rohit
    Pandey](../Images/af817d8f68f2984058f0afb8fd7ecbe9.png)](https://medium.com/@rohitpandey576?source=post_page---byline--6b052d7b81af--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--6b052d7b81af--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--6b052d7b81af--------------------------------)
    [Rohit Pandey](https://medium.com/@rohitpandey576?source=post_page---byline--6b052d7b81af--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--6b052d7b81af--------------------------------)
    ·13 min read·Mar 26, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e6319aa63a42a694776ce5c00399319.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by midjourney
  prefs: []
  type: TYPE_NORMAL
- en: Modern applications almost exclusively store their state in databases and also
    read any state they require to perform their tasks from databases. We’ll concern
    ourselves with adding resilience to the processes of reading from and writing
    to these databases, making them highly reliable.
  prefs: []
  type: TYPE_NORMAL
- en: The obvious way to do this is to improve the quality of the hardware and software
    comprising the database so our reads and writes never fail. But this becomes a
    law of diminishing returns where once we’re already at high availabilities, pouring
    more money in moves the needle only marginally. Adding redundancy to achieve high
    availability quickly becomes a much better strategy.
  prefs: []
  type: TYPE_NORMAL
- en: So, what does this high reliability via adding redundancy to the architecture
    look like? We remove single points of failure by spending more money on redundant
    systems. For example, maintaining redundant copies of the data so that if one
    copy gets corrupted or damaged, the others can be used to repair. Another example
    is having a redundant database which can be read from and written to when the
    primary one is unavailable. We’ll call these kinds of solutions…
  prefs: []
  type: TYPE_NORMAL
