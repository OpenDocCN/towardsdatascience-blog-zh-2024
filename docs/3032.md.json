["```py\nimport itertools\nimport pandas as pd\nimport tqdm\n\n# reading data\ndf = pd.read_csv('marketing_campaign_estimations.csv', sep = '\\t')\ndf['segment'] = df.country + ' - ' + df.channel\n\n# calculating combinations\ncombinations = []\nsegments = list(df.segment.values)[:15]\nprint('number of segments: ', len(segments))\n\nfor num_items in range(len(segments) + 1):\n  combinations.extend(\n      itertools.combinations(segments, num_items)\n  )\nprint('number of combinations: ', len(combinations))\n\ntmp = []\nfor selected in tqdm.tqdm(combinations):\n    tmp_df = df[df.segment.isin(selected)]\n    tmp.append(\n        {\n        'selected_segments': ', '.join(selected),\n        'users': tmp_df.users.sum(),\n        'cs_contacts': tmp_df.cs_contacts.sum(),\n        'marketing_spending': tmp_df.marketing_spending.sum(),\n        'revenue': tmp_df.revenue.sum()\n        }\n    )\n\n# number of segments:  15\n# number of combinations:  32768\n```", "```py\n2**62 / 7000 / 3600 / 24 / 365\n# 20 890 800.6\n```", "```py\ndf['share_of_revenue'] = df.revenue/df.revenue.sum() * 100\ndf['segment_group'] = list(map(\n    lambda x, y: x if y >= 0.1 else 'other',\n    df.segment,\n    df.share_of_revenue\n))\n\nprint(df[df.segment_group == 'other'].share_of_revenue.sum())\n# 0.53\nprint(df.segment_group.nunique())\n# 52\n```", "```py\ndf['revenue_per_spend'] = df.revenue / df.marketing_spending \ndf = df.sort_values('revenue_per_spend', ascending = False)\ndf['spend_cumulative'] = df.marketing_spending.cumsum()\nselected_df = df[df.spend_cumulative <= 30000000]\nprint(selected_df.shape[0])\n# 48 \nprint(selected_df.revenue.sum()/1000000)\n# 107.92\n```", "```py\n! pip install pulp\n```", "```py\nfrom pulp import *\nproblem = LpProblem(\"Marketing_campaign\", LpMaximize)\n```", "```py\nsegments = range(df.shape[0])  \nselected = LpVariable.dicts(\"Selected\", segments, cat=\"Binary\")\n```", "```py\nproblem += lpSum(\n  selected[i] * list(df['revenue'].values)[i] \n  for i in segments\n)\n```", "```py\nproblem += lpSum(\n    selected[i] * df['marketing_spending'].values[i]\n    for i in segments\n) <= 30 * 10**6\n```", "```py\nproblem.solve()\n```", "```py\nResult - Optimal solution found\n\nObjective value:                110162662.21000001\nEnumerated nodes:               4\nTotal iterations:               76\nTime (CPU seconds):             0.02\nTime (Wallclock seconds):       0.02\n```", "```py\ndf['selected'] = list(map(lambda x: x.value(), selected.values()))\nprint(df[df.selected == 1].revenue.sum()/10**6)\n# 110.16\n```", "```py\n# define the problem\nproblem_v2 = LpProblem(\"Marketing_campaign_v2\", LpMaximize)\n\n# decision variables\nsegments = range(df.shape[0]) \nselected = LpVariable.dicts(\"Selected\", segments, cat=\"Binary\")\n\n# objective function\nproblem_v2 += lpSum(\n  selected[i] * list(df['revenue'].values)[i] \n  for i in segments\n)\n\n# Constraints\nproblem_v2 += lpSum(\n    selected[i] * df['marketing_spending'].values[i]\n    for i in segments\n) <= 30 * 10**6\n\nproblem_v2 += lpSum(\n    selected[i] * df['cs_contacts'].values[i]\n    for i in segments\n) <= 5000\n\nproblem_v2 += lpSum(\n    selected[i] * df['cs_contacts'].values[i]\n    for i in segments\n) <= 0.042 * lpSum(\n    selected[i] * df['users'].values[i]\n    for i in segments\n)\n\n# run the optimisation\nproblem_v2.solve()\n```", "```py\n# define the problem\nproblem_v3 = LpProblem(\"Marketing_campaign_v2\", LpMaximize)\n\n# decision variables\nsegments = range(df.shape[0]) \nselected = LpVariable.dicts(\"Selected\", segments, cat=\"Binary\")\n\n# objective function\nproblem_v3 += lpSum(\n  selected[i] * list(df['revenue'].values)[i] \n  for i in segments\n)\n\n# constraints\nproblem_v3 += lpSum(\n    selected[i] * df['marketing_spending'].values[i]\n    for i in segments\n) <= 30 * 10**6\n\nproblem_v3 += lpSum(\n    selected[i] for i in segments\n) <= 10\n\n# run the optimisation\nproblem_v3.solve()\ndf['selected'] = list(map(lambda x: x.value(), selected.values()))\nprint(df.selected.sum())\n# 10\n```", "```py\n# define the problem\nproblem_v4 = LpProblem(\"Marketing_campaign_v2\", LpMaximize)\n\n# decision variables\nsegments = range(df.shape[0]) \nselected = LpVariable.dicts(\"Selected\", segments, cat=\"Binary\")\n\n# objective Function\nproblem_v4 += (\n    0.5 * lpSum(\n        selected[i] * df['revenue'].values[i] / df['revenue'].sum()\n        for i in segments\n    )\n    + 0.5 * lpSum(\n        selected[i] * df['users'].values[i] / df['users'].sum()\n        for i in segments\n    )\n)\n\n# constraints\nproblem_v4 += lpSum(\n    selected[i] * df['marketing_spending'].values[i]\n    for i in segments\n) <= 30 * 10**6\n\n# run the optimisation\nproblem_v4.solve()\ndf['selected'] = list(map(lambda x: x.value(), selected.values()))\n```"]