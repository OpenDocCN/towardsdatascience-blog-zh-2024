["```py\nnp.random.seed(1234)\n\n# Create intervention flag\nmask = (df['date'] >= \"2024-04-14\") & (df['date'] <= \"2024-06-02\")\ndf['intervention'] = mask.astype(int)\n\nrow_count = len(df)\n\n# Create intervention uplift\ndf['uplift_perc'] = np.random.uniform(0.10, 0.20, size=row_count)\ndf['uplift_abs'] = round(df['uplift_perc'] * df['GB'])\ndf['y'] = df['GB']\ndf.loc[df['intervention'] == 1, 'y'] = df['GB'] + df['uplift_abs']\n```", "```py\ndef synth_plot(df, counterfactual):\n\n    plt.figure(figsize=(14, 8))\n    sns.set_style(\"white\")\n\n    # Create plot\n    sns.lineplot(data=df, x='date', y='y', label='Actual', color='b', linewidth=2.5)\n    sns.lineplot(data=df, x='date', y=counterfactual, label='Counterfactual', color='r', linestyle='--', linewidth=2.5)\n    plt.title('Synthetic Control Method: Actual vs. Counterfactual', fontsize=24)\n    plt.xlabel('Date', fontsize=20)\n    plt.ylabel('Metric Value', fontsize=20)\n    plt.legend(fontsize=16)\n    plt.gca().xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%Y-%m-%d'))\n    plt.xticks(rotation=90)\n    plt.grid(True, linestyle='--', alpha=0.5)\n\n    # High the intervention point\n    intervention_date = '2024-04-07'\n    plt.axvline(pd.to_datetime(intervention_date), color='k', linestyle='--', linewidth=1)\n    plt.text(pd.to_datetime(intervention_date), plt.ylim()[1]*0.95, 'Intervention', color='k', fontsize=18, ha='right')\n\n    plt.tight_layout()\n    plt.show()\n```", "```py\nsynth_plot(df, 'GB')\n```", "```py\n# Delete the original target column so we don't use it as a feature by accident\ndel df['GB']\n\n# set feature & targets\nX = df.columns[1:50]\ny = 'y'\n```", "```py\ndef train_reg(df, start_index, reg_class):\n\n    df_temp = df.iloc[start_index:].copy().reset_index()\n\n    X_pre = df_temp[df_temp['intervention'] == 0][X]\n    y_pre = df_temp[df_temp['intervention'] == 0][y]\n\n    X_train, X_test, y_train, y_test = train_test_split(X_pre, y_pre, test_size=0.10, random_state=42)\n\n    model = reg_class\n    model.fit(X_train, y_train)\n\n    yhat_train = model.predict(X_train)\n    yhat_test = model.predict(X_test)\n\n    mse_train = mean_squared_error(y_train, yhat_train)\n    mse_test = mean_squared_error(y_test, yhat_test)\n    print(f\"Mean Squared Error train: {round(mse_train, 2)}\")\n    print(f\"Mean Squared Error test: {round(mse_test, 2)}\")\n\n    r2_train = r2_score(y_train, yhat_train)\n    r2_test = r2_score(y_test, yhat_test)\n    print(f\"R2 train: {round(r2_train, 2)}\")\n    print(f\"R2 test: {round(r2_test, 2)}\")\n\n    df_temp['pred'] = model.predict(df_temp.loc[:, X])\n    df_temp['delta'] = df_temp['y'] - df_temp['pred']\n\n    pred_lift = df_temp[df_temp['intervention'] == 1]['delta'].sum()\n    actual_lift = df_temp[df_temp['intervention'] == 1]['uplift_abs'].sum()\n    abs_error_perc = abs(pred_lift - actual_lift) / actual_lift\n    print(f\"Predicted lift: {round(pred_lift, 2)}\")\n    print(f\"Actual lift: {round(actual_lift, 2)}\")\n    print(f\"Absolute error percentage: {round(abs_error_perc, 2)}\")\n\n    return df_temp, abs_error_perc\n```", "```py\ndf_lin_reg_100, pred_lift_lin_reg_100 = train_reg(df, 100, LinearRegression())\n```", "```py\nsynth_plot(df_lin_reg_100, 'pred')\n```", "```py\ndef synthetic_control(weights, control_units, treated_unit):\n\n    synthetic = np.dot(control_units.values, weights)\n\n    return np.sqrt(np.sum((treated_unit - synthetic)**2))\n\ndef train_synth(df, start_index):\n\n    df_temp = df.iloc[start_index:].copy().reset_index()\n\n    X_pre = df_temp[df_temp['intervention'] == 0][X]\n    y_pre = df_temp[df_temp['intervention'] == 0][y]\n\n    X_train, X_test, y_train, y_test = train_test_split(X_pre, y_pre, test_size=0.10, random_state=42)\n\n    initial_weights = np.ones(len(X)) / len(X)\n\n    constraints = ({'type': 'eq', 'fun': lambda w: np.sum(w) - 1})\n\n    bounds = [(0, 1) for _ in range(len(X))]\n\n    result = minimize(synthetic_control, \n                     initial_weights, \n                     args=(X_train, y_train),\n                     method='SLSQP', \n                     bounds=bounds, \n                     constraints=constraints,\n                     options={'disp': False, 'maxiter': 1000, 'ftol': 1e-9},\n    )\n\n    optimal_weights = result.x\n\n    yhat_train = np.dot(X_train.values, optimal_weights)\n    yhat_test = np.dot(X_test.values, optimal_weights)\n\n    mse_train = mean_squared_error(y_train, yhat_train)\n    mse_test = mean_squared_error(y_test, yhat_test)\n    print(f\"Mean Squared Error train: {round(mse_train, 2)}\")\n    print(f\"Mean Squared Error test: {round(mse_test, 2)}\")\n\n    r2_train = r2_score(y_train, yhat_train)\n    r2_test = r2_score(y_test, yhat_test)\n    print(f\"R2 train: {round(r2_train, 2)}\")\n    print(f\"R2 test: {round(r2_test, 2)}\")    \n\n    df_temp['pred'] = np.dot(df_temp.loc[:, X].values, optimal_weights)\n    df_temp['delta'] = df_temp['y'] - df_temp['pred']\n\n    pred_lift = df_temp[df_temp['intervention'] == 1]['delta'].sum()\n    actual_lift = df_temp[df_temp['intervention'] == 1]['uplift_abs'].sum()\n    abs_error_perc = abs(pred_lift - actual_lift) / actual_lift\n    print(f\"Predicted lift: {round(pred_lift, 2)}\")\n    print(f\"Actual lift: {round(actual_lift, 2)}\")\n    print(f\"Absolute error percentage: {round(abs_error_perc, 2)}\")\n\n    return df_temp, abs_error_perc\n```", "```py\ndf_synth_100, pred_lift_synth_100 = train_synth(df, 100)\n```", "```py\nsynth_plot(df_synth_100, 'pred')\n```", "```py\n# run regression experiments\ndf_lin_reg_00, pred_lift_lin_reg_00 = train_reg(df, 0, LinearRegression())\ndf_lin_reg_100, pred_lift_lin_reg_100 = train_reg(df, 100, LinearRegression())\ndf_ridge_00, pred_lift_ridge_00 = train_reg(df, 0, RidgeCV())\ndf_ridge_100, pred_lift_ridge_100 = train_reg(df, 100, RidgeCV())\ndf_lasso_00, pred_lift_lasso_00 = train_reg(df, 0, LassoCV())\ndf_lasso_100, pred_lift_lasso_100 = train_reg(df, 100, LassoCV())\n\n# run synthetic control experiments\ndf_synth_00, pred_lift_synth_00 = train_synth(df, 0)\ndf_synth_100, pred_lift_synth_100 = train_synth(df, 100)\n\nexperiment_data = {\n    \"Method\": [\"Linear\", \"Linear\", \"Ridge\", \"Ridge\", \"Lasso\", \"Lasso\", \"Synthetic Control\", \"Synthetic Control\"],\n    \"Data Size\": [\"Large\", \"Small\", \"Large\", \"Small\", \"Large\",  \"Small\", \"Large\", \"Small\"],\n    \"Value\": [pred_lift_lin_reg_00, pred_lift_lin_reg_100, pred_lift_ridge_00, pred_lift_ridge_100,pred_lift_lasso_00, pred_lift_lasso_100, pred_lift_synth_00, pred_lift_synth_100]\n}\n\ndf_experiments = pd.DataFrame(experiment_data)\n```", "```py\n# Set the style\nsns.set_style=\"whitegrid\"\n\n# Create the bar plot\nplt.figure(figsize=(10, 6))\nbar_plot = sns.barplot(x=\"Method\", y=\"Value\", hue=\"Data Size\", data=df_experiments, palette=\"muted\")\n\n# Add labels and title\nplt.xlabel(\"Method\")\nplt.ylabel(\"Absolute error percentage\")\nplt.title(\"Synthetic Controls - Comparison of Methods Across Different Data Sizes\")\nplt.legend(title=\"Data Size\")\n\n# Show the plot\nplt.show()\n```"]