- en: Generating Synthetic Descriptive Data in PySpark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/methods-for-generating-synthetic-descriptive-data-c6678cc10aff?source=collection_archive---------16-----------------------#2024-01-04](https://towardsdatascience.com/methods-for-generating-synthetic-descriptive-data-c6678cc10aff?source=collection_archive---------16-----------------------#2024-01-04)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Use various data source types to quickly generate text data for artificial datasets.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mc12338?source=post_page---byline--c6678cc10aff--------------------------------)[![Matt
    Collins](../Images/b28ac8100d6fb287e3fa6926eec7939a.png)](https://medium.com/@mc12338?source=post_page---byline--c6678cc10aff--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--c6678cc10aff--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--c6678cc10aff--------------------------------)
    [Matt Collins](https://medium.com/@mc12338?source=post_page---byline--c6678cc10aff--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--c6678cc10aff--------------------------------)
    ·7 min read·Jan 4, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c14575928334898bcaeff52c63f7c0b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image generated with DALL-E 3
  prefs: []
  type: TYPE_NORMAL
- en: In a [previous article](https://medium.com/towards-data-science/create-many-to-one-relationships-between-columns-in-a-synthetic-table-with-pyspark-udfs-41e39d97c936),
    we explored creating many-to-one relationships between columns in a synthetic
    PySpark DataFrame. This DataFrame only consisted of Foreign Key information and
    we didn’t produce any textual information that might be useful in a demo DataSet.
  prefs: []
  type: TYPE_NORMAL
- en: For anyone looking to populate an artificial dataset, it is likely you will
    want to produce descriptive data such as product information, location details,
    customer demographics, etc.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we’ll dig into a few sources that can be used to create synthetic
    text data at little effort and cost, and use the techniques to pull together a
    DataFrame containing customer details.
  prefs: []
  type: TYPE_NORMAL
- en: Why create an synthetic dataset?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Synthetic datasets are a great way to anonymously demonstrate your data product,
    such as a website or analytics platform. Allowing users and stakeholders to interact
    with example data, exposing meaningful analysis without breaching any privacy
    concerns with sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: It can also be great for exploring Machine Learning algorithms, allowing Data
    Scientists to train models in the case of limited real data.
  prefs: []
  type: TYPE_NORMAL
- en: Performance testing Data Engineering pipeline activities is another great use
    case for synthetic data, giving teams the ability to ramp up the scale of data
    pushed through an infrastructure and identify weaknesses in the design, as well
    as benchmarking runtimes.
  prefs: []
  type: TYPE_NORMAL
- en: In my case, I’m currently creating an example dataset to performance-test some
    Power BI capabilities at high volumes, which I’ll be writing about in due course.
  prefs: []
  type: TYPE_NORMAL
- en: The dataset will contain sales data, including transaction amounts and other
    descriptive features such as store location, employee name and customer email
    address.
  prefs: []
  type: TYPE_NORMAL
- en: Random characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting off simple, we can use some built-in functionality to generate random
    text data. Importing the *random* and *string* Python modules, we can use the
    following simple function to create a random string of the desired length.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f5c3e3853d273114a21f52033204e2ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Screenshot of several examples of results'
  prefs: []
  type: TYPE_NORMAL
- en: We can run this multiple times to generate enough data for our column, appending
    the information to a list.
  prefs: []
  type: TYPE_NORMAL
- en: We will review how to add this to our DataFrame further down this post.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits and Limitations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This kind of data generation is very generic, with limited applications in demo
    datasets. That being said, it can be combined with other string generation techniques
    (such as concatenation) to give a bit more value at very little effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be seen below for random usernames, with a base of a first name appended
    by an underscore and random characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c8517d9ff5eb3a9f5a9282474f70455c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Screenshot of several usernames created with random strings
    appended.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example data points where this could be useful may include:'
  prefs: []
  type: TYPE_NORMAL
- en: Email addresses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product codes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usernames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: APIs are a great source of information, and will likely be data sources when
    building your real Analytics platforms!
  prefs: []
  type: TYPE_NORMAL
- en: However, there are also many API endpoints worth querying for generic placeholder
    data that can give you more meaning for demo dashboards through representative
    data for various topics, such as currency rates.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to retrieve geographical data for a field for a user’s country, we
    could generate this from the [rest countries](https://restcountries.com/) API
    endpoint. This API is free to access and requires no sign-up to get started. Using
    the *requests* python module we’re up and running with a list of countries very
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b5dac3970e70b95dcbe8d60a20579702.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: print(sample_countries) statement showing a sample of the
    shuffled results.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Note: You should always sense-check your outputs — this API request returns
    250 results, which exceeds the real-life number of countries!***'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/befb2f37181c4f9022dfae51979fe72f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Snippet of the pprint(sorted(countries_list)) statement, showing
    various “countries” associated with the United States.'
  prefs: []
  type: TYPE_NORMAL
- en: Benefits and Limitations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Getting data from APIs can vary in complexity and security requirements can
    be off-putting. The way data is requested can also vary, as can the format in
    which it returns. Documentation is produced by the provider themselves, which
    can also be a bottleneck worth considering.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning at this point that there are various packages created
    by developers to interact with APIs in simplified manners — we’ll talk about third-party
    Python libraries in the next section!
  prefs: []
  type: TYPE_NORMAL
- en: With all of that being said, there is plenty of rich data available for you
    to pull that may be utilised in customer-facing data products as well as for demo
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are also some great ready-made packages out there for us to use. This
    takes some of the heavy effort out of finding a source, processing and formatting
    the data ready for consumption.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Faker*](https://faker.readthedocs.io/en/master/) is one such example, with
    the ability to generate names, addresses, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: Install, import and use packages like this at your convenience!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c9fde8d06322cc6cf8fdc931cef243b5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Screenshot of several Faker generated names'
  prefs: []
  type: TYPE_NORMAL
- en: Benefits and Limitations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As much of the leg-work has been done for you by other developers, packages
    such as *Faker* can be very high-impact and low-cost (in both price and time).
  prefs: []
  type: TYPE_NORMAL
- en: With just *Faker* in mind, we’ve already been able to generate generic and informative
    user data intuitively. Other libraries are available (often interacting with common
    APIs) to allow developers to easily pull useful through to their applications.
  prefs: []
  type: TYPE_NORMAL
- en: Blockers could lie within your organisation’s regulations around using third-party
    packages, licensing and maintainability of the package itself, so please be aware
    of possible restrictions here.
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It wouldn’t be fitting to overlook Large Language Models (LLMs) as they are
    a great asset in data generation.
  prefs: []
  type: TYPE_NORMAL
- en: A simple approach could be to get ChatGPT (or equivalent) to generate you a
    list of data points, such as possible customer names.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fca72ada96922b20dad3cc47c19b5c79.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Asking ChatGPT for a list of names.'
  prefs: []
  type: TYPE_NORMAL
- en: We can do one better and ask for the LLM to help build the random variable function
    itself. You can include details about data sources and even ask ChatGPT to write
    a function to interact with an API you have found.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example here is requesting help with the [bored](https://www.boredapi.com/)
    API, extracting the activity field and returning it for your own use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/235b4db7b487fcdfe34a35b5d3a9bde1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Asking ChatGPT for a random activity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa33275bfb5ab9d86127ae4b04fe1c3a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Example result of ChatGPT generated function from bored API.'
  prefs: []
  type: TYPE_NORMAL
- en: '***Note: Always check the output of your result to ensure an LLM generated
    function is working as expected.***'
  prefs: []
  type: TYPE_NORMAL
- en: Benefits and Limitations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generative AI is showing its strengths in rapid data generation (prominently
    around content creation, as shown by [this Gartner report](https://www.gartner.com/en/doc/779868-emerging-tech-top-use-cases-for-generative-ai))
    and I expect to see more grounded approaches for this in populating example datasets
    next year. As such, it makes creation of various data points at scale accessible
    to users of various backgrounds and levels of technicality.
  prefs: []
  type: TYPE_NORMAL
- en: With that being said, reliability and consistency of LLMs is being heavily investigated
    at the same time. Depending on the type of data you need to populate, this may
    introduce rigorous checks into data quality and anonymity and determine whether
    or not this is the right tool for specific use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Putting this into a DataFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The approach we’ve taken across the previous sections is to generate our data
    ready to be processed into the DataFrame column of interest.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few choices of how to implement the synthetic data at this stage.
    UDFs are a neat way to apply a function for each row of the column and can help
    define uniqueness.
  prefs: []
  type: TYPE_NORMAL
- en: '[Databricks Labs Data Generator](https://github.com/databrickslabs/dbldatagen)
    is another great library that can help speed things up with distributed computing
    at the core of this data generation.'
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating how we generate the lists of values to be populated, we can implement
    the *withColumn* PySpark function and combine this with our list data to produce
    our text column at great speed.
  prefs: []
  type: TYPE_NORMAL
- en: For our test case, we’ll use a combination of both of these approaches. We can
    use Databricks Labs Data Generator to create our DataFrame wireframe, populating
    100 rows with a unique *Id* column, and any values we might not require to be
    unique, such as *Country*.
  prefs: []
  type: TYPE_NORMAL
- en: Other columns which we might wish to be distinct, such as the *Full Name* and
    *Username*, we can make use of a UDF to use the id column to access a unique name
    from the list we’ve created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Putting it all together, we can create our DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b95dfec9c2964ac183945715b0cb2303.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: DataFrame'
  prefs: []
  type: TYPE_NORMAL
- en: A quick data profile shows that our *Full Name* and *Username* columns have
    completely unique values as desired!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/62726d1e14223a3cc0f25d04f6e293b3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Data profile of Categorical columns showing 100 unique values
    for “Full Name” and “Username” columns'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve outlined a variety of methods to generate textual synthetic data quickly,
    allowing us to accelerate our demonstrative dataset creation.
  prefs: []
  type: TYPE_NORMAL
- en: All the examples above can be extended, refined and tailored to your specific
    use-case.
  prefs: []
  type: TYPE_NORMAL
- en: Are there any tricks that I have missed? What are you using synthetic datasets
    for? Let me know in the comments!
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading, and as always, feel free to find the code for your own use
    [here](https://github.com/MattPCollins/SyntheticDimensionTableExamples).
  prefs: []
  type: TYPE_NORMAL
