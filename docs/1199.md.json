["```py\n{\n    \"name\": \"Crêpes\",\n    \"serving_size\": 4,\n    \"ingredients\": [\n        {\n            \"id\": 1,\n            \"name\": \"white flour\",\n            \"quantity\": 300.0,\n            \"unit\": \"g\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"eggs\",\n            \"quantity\": 3.0,\n            \"unit\": \"unit\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"milk\",\n            \"quantity\": 60.0,\n            \"unit\": \"cl\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"beer\",\n            \"quantity\": 20.0,\n            \"unit\": \"cl\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"butter\",\n            \"quantity\": 30.0,\n            \"unit\": \"g\"\n        }\n    ],\n    \"steps\": [\n        {\n            \"number\": 1,\n            \"description\": \"Mix flour, eggs, and melted butter in a bowl.\",\n            \"preparation_time\": null,\n            \"cooking_time\": null,\n            \"used_ingredients\": [1,2,5]\n        },\n        {\n            \"number\": 2,\n            \"description\": \"Slowly add milk and beer until the dough becomes fluid enough.\",\n            \"preparation_time\": 5,\n            \"cooking_time\": null,\n            \"used_ingredients\": [3,4]\n        },\n        {\n            \"number\": 3,\n            \"description\": \"Let the dough rest for one hour.\",\n            \"preparation_time\": 60,\n            \"cooking_time\": null,\n            \"used_ingredients\": []\n        },\n        {\n            \"number\": 4,\n            \"description\": \"Cook the crêpe in a flat pan, one ladle at a time.\",\n            \"preparation_time\": 10,\n            \"cooking_time\": null,\n            \"used_ingredients\": []\n        }\n    ]\n}\n```", "```py\n\"\"\"`schemas.py`\"\"\"\n\nfrom pydantic import BaseModel, Field, field_validator\n\nclass Ingredient(BaseModel):\n    \"\"\"Ingredient schema\"\"\"\n\n    id: int = Field(\n        description=\"Randomly generated unique identifier of the ingredient\",\n        examples=[1, 2, 3, 4, 5, 6],\n    )\n    name: str = Field(\n        description=\"The name of the ingredient\", \n        examples=[\"flour\", \"sugar\", \"salt\"]\n    )\n    quantity: float | None = Field(\n        None,\n        description=\"The quantity of the ingredient\",\n        examples=[200, 4, 0.5, 1, 1, 1],\n    )\n    unit: str | None = Field(\n        None,\n        description=\"The unit in which the quantity is specified\",\n        examples=[\"ml\", \"unit\", \"l\", \"unit\", \"teaspoon\", \"tablespoon\"],\n    )\n\n    @field_validator(\"quantity\", mode=\"before\")\n    def parse_quantity(cls, value: float | int | str | None):\n        \"\"\"Converts the quantity to a float if it is not already one\"\"\"\n\n        if isinstance(value, str):\n            try:\n                value = float(value)\n            except ValueError:\n                try:\n                    value = eval(value)\n                except Exception as e:\n                    print(e)\n                    pass\n\n        return value\n\nclass Step(BaseModel):\n    number: int | None = Field(\n        None,\n        description=\"The position of the step in the recipe\",\n        examples=[1, 2, 3, 4, 5, 6],\n    )\n    description: str = Field(\n        description=\"The action that needs to be performed during that step\",\n        examples=[\n            \"Preheat the oven to 180°C\",\n            \"Mix the flour and sugar in a bowl\",\n            \"Add the eggs and mix well\",\n            \"Pour the batter into a greased cake tin\",\n            \"Bake for 30 minutes\",\n            \"Let the cake cool down before serving\",\n        ],\n    )\n    preparation_time: int | None = Field(\n        None,\n        description=\"The preparation time mentioned in the step description if any.\",\n        examples=[5, 10, 15, 20, 25, 30],\n    )\n    cooking_time: int | None = Field(\n        None,\n        description=\"The cooking time mentioned in the step description if any.\",\n        examples=[5, 10, 15, 20, 25, 30],\n    )\n    used_ingredients: list[int] = Field(\n        [],\n        description=\"The list of ingredient ids used in the step\",\n        examples=[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]],\n    )\n\nclass Recipe(BaseModel):\n    \"\"\"Recipe schema\"\"\"\n\n    name: str = Field(\n        description=\"The name of the recipe\",\n        examples=[\n            \"Chocolate Cake\",\n            \"Apple Pie\",\n            \"Pasta Carbonara\",\n            \"Pumpkin Soup\",\n            \"Chili con Carne\",\n        ],\n    )\n    serving_size: int | None = Field(\n        None,\n        description=\"The number of servings the recipe makes\",\n        examples=[1, 2, 4, 6, 8, 10],\n    )\n    ingredients: list[Ingredient] = []\n    steps: list[Step] = []\n    total_preparation_time: int | None = Field(\n        None,\n        description=\"The total preparation time for the recipe\",\n        examples=[5, 10, 15, 20, 25, 30],\n    )\n    total_cooking_time: int | None = Field(\n        None,\n        description=\"The total cooking time for the recipe\",\n        examples=[5, 10, 15, 20, 25, 30],\n    )\n    comments: list[str] = []\n```", "```py\n\"\"\" `prompt.py`\n\nThe import statements and the create_prompt function have not been included \nin this snippet.\n\"\"\"\n# Note : Extra spaces have been included here for readability.\n\nDEFAULT_BASE_PROMPT = \"\"\"\nWhat are the ingredients and their associated quantities \nas well as the steps to make the recipe described \nby the following {ingredients} and {steps} provided as raw text ?\n\nIn particular, please provide the following information:\n- The name of the recipe\n- The serving size\n- The ingredients and their associated quantities\n- The steps to make the recipe and in particular, the duration of each step\n- The total duration of the recipe broken \ndown into preparation, cooking and waiting time. \nThe totals must be consistent with the sum of the durations of the steps. \n- Any additional comments\n\n{format_instructions}\nMake sure to provide a valid and well-formatted JSON.\n\n\"\"\"\n```", "```py\n# demo.ipynb\nimport os\nfrom pathlib import Path\n\nimport pandas as pd\nfrom langchain.output_parsers import PydanticOutputParser\nfrom langchain_mistralai.chat_models import ChatMistralAI\nfrom dotenv import load_dotenv\n\nfrom core import run\nfrom prompt import DEFAULT_BASE_PROMPT, create_prompt\nfrom schemas import Recipe\n # End of first cell\n\n# Setup environment\nload_dotenv()\nMISTRAL_API_KEY = os.getenv(\"MISTRAL_API_KEY\") #1\n # End of second cell\n\n# Load the data\npath_to_data = Path(os.getcwd()) / \"data\" / \"input\" #2\ndf = pd.read_json(\"data/input/recipes_v1.json\")\ndf.head()\n # End of third cell\n\n# Preparing the components of the system\nllm = ChatMistralAI(api_key=MISTRAL_API_KEY, model_name=\"open-mixtral-8x7b\")\nparser = PydanticOutputParser(pydantic_object=Recipe)\nprompt = create_prompt(\n    DEFAULT_BASE_PROMPT, \n    parser, \n    df[\"ingredients\"][0], \n    df[\"direction\"][0]\n)\n#prompt  \n  # End of fourth cell\n\n# Combining the components  \nexample = await run(llm, prompt, parser)\n#example\n # End of fifth cell\n```"]