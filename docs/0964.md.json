["```py\n# import libraries\nimport seaborn as sns\nimport pandas as pd\n\n# load dataset via seaborn lib\ndf = sns.load_dataset(\"mpg\")\n\n# inspect missing values\ndf.isna().sum() #result: minimal, hence OK to remove\n\n# remove missing values\ndf.dropna(inplace=True)\n\n# create a new categorical column based on mpg column\ndf[\"efficiency\"] = df[\"mpg\"].apply(lambda x: \"yes\" if x >= 25 else \"no\")\n\n# dataframe info\ndf.info()\n\n# dataframe head\ndf.head()\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import pearsonr\n\n# prepare variables to inspect\nnumeric_features = ['cylinders','displacement','horsepower',\n                    'weight','acceleration','model_year']\ntarget = 'mpg'\n\n# Create a figure and axis\nfig, axes = plt.subplots(nrows=2, ncols=3, figsize=(12, 6))\n\n# Loop through the numerical columns and plot each scatter plot\nfor i, col in enumerate(numeric_features):\n    # Calculate Pearson correlation coefficient\n    corr_coeff, p_val = pearsonr(df[col],df[target])\n\n    # Scatter plot using seaborn\n    sns.scatterplot(data=df, x=col, y=target, ax=axes[i//3, i%3])\n\n    # Set title with Pearson correlation coefficient\n    # Print ** after the correlation if the correlation coefficient is significant\n    axes[i//3, i%3].set_title(f'{col} vs {target} (Corr: {corr_coeff:.2f} {\"**\" if p_val < 0.05 else \"\"})')\n\nplt.tight_layout()\nplt.show()\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import f_oneway\n\n# Create a KDE plot with hue\nsns.set(style=\"whitegrid\")\nax = sns.kdeplot(data=df, x=\"mpg\", hue=\"origin\", fill=True)\n\n# Calculate one-way ANOVA p-value\np_value = f_oneway(*[df[df['origin'] == cat]['mpg'] for cat in df['origin'].unique()])[1]\n\n# Set title with one-way ANOVA p-value\nax.set_title(f'KDE Plot mpg by origin (One-way ANOVA p-value: {p_value:.4f})')\n\nplt.show()\n```", "```py\n# create frequency table of each origin-efficient pair\nchi_df = (\n    df[['origin','efficiency']]\n    .value_counts()\n    .reset_index()\n    .sort_values(['origin','efficiency'], ignore_index=True)\n)\n\n# calculate expected frequency for each pair\nn = chi_df['count'].sum()\n\nexp = []\nfor i in range(len(chi_df)):\n  sum_row = chi_df.loc[chi_df['origin']==chi_df['origin'][i],'count'].sum()\n  sum_col = chi_df.loc[chi_df['efficiency']==chi_df['efficiency'][i],'count'].sum()\n  e = sum_row * sum_col / n\n  exp.append(e)\n\nchi_df['exp'] = exp\nchi_df\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom scipy.stats import chisquare\n\n# Create a count plot with hue\nsns.set(style=\"whitegrid\")\nax = sns.countplot(data=df, x=\"origin\", hue=\"efficiency\", fill=True)\n\n# Calculate chi-square p-value\np_value = chisquare(chi_df['count'], chi_df['exp'])[1]\n\n# Set title with chi-square p-value\nax.set_title(f'Count Plot efficiency vs origin (chi2 p-value: {p_value:.4f})')\n\nplt.show()\n```"]