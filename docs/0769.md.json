["```py\ncnt_vt_precos_correntes<- \n  get_sidra(x = 1846,\n            period = lista_trimestres)\n\ncnt_vt_precos_correntes <- janitor::clean_names(cnt_vt_precos_correntes)\n\ncnt_taxa_variacao<-\n    get_sidra(x = 5932,\n            period = lista_trimestres\n            )\n\ncnt_taxa_variacao<- janitor::clean_names(cnt_taxa_variacao)\n```", "```py\n lista_trimestres\n  [1] \"199601\" \"199602\" \"199603\" \"199604\" \"199701\" \"199702\" \"199703\" \"199704\" \"199801\" \"199802\" \"199803\" \"199804\" \"199901\"\n [14] \"199902\" \"199903\" \"199904\" \"200001\" \"200002\" \"200003\" \"200004\" \"200101\" \"200102\" \"200103\" \"200104\" \"200201\" \"200202\"\n [27] \"200203\" \"200204\" \"200301\" \"200302\" \"200303\" \"200304\" \"200401\" \"200402\" \"200403\" \"200404\" \"200501\" \"200502\" \"200503\"\n [40] \"200504\" \"200601\" \"200602\" \"200603\" \"200604\" \"200701\" \"200702\" \"200703\" \"200704\" \"200801\" \"200802\" \"200803\" \"200804\"\n [53] \"200901\" \"200902\" \"200903\" \"200904\" \"201001\" \"201002\" \"201003\" \"201004\" \"201101\" \"201102\" \"201103\" \"201104\" \"201201\"\n [66] \"201202\" \"201203\" \"201204\" \"201301\" \"201302\" \"201303\" \"201304\" \"201401\" \"201402\" \"201403\" \"201404\" \"201501\" \"201502\"\n [79] \"201503\" \"201504\" \"201601\" \"201602\" \"201603\" \"201604\" \"201701\" \"201702\" \"201703\" \"201704\" \"201801\" \"201802\" \"201803\"\n [92] \"201804\" \"201901\" \"201902\" \"201903\" \"201904\" \"202001\" \"202002\" \"202003\" \"202004\" \"202101\" \"202102\" \"202103\" \"202104\"\n[105] \"202201\" \"202202\" \"202203\" \"202204\" \"202301\" \"202302\" \"202303\" \"202304\" \"202401\" \"202402\" \"202403\" \"202404\"\n```", "```py\nlibrary(flexdashboard)\nlibrary(plotly)\nlibrary(shiny)\nlibrary(purrr)\n\n# Install thematic and un-comment for themed static plots (i.e., ggplot2)\n thematic::thematic_rmd(bg= \"#101010\", fg=\"#ffda00\", accent = NA )\n```", "```py\n # Preparação dos dados\n  dados_grafico_corrente_ano <<- cnt_vt_precos_correntes %>%\n    filter(setores_e_subsetores %in% input$conta_ano) %>%\n    inner_join(dados_pib) %>%\n    mutate(data_nominal = gera_meses_trimestre(trimestre_codigo), # Essa função precisa ser definida ou alterada conforme o contexto\n           setores_e_subsetores = str_wrap(setores_e_subsetores,20))  %>%\n    group_by(ano = format(data_nominal, \"%Y\"),\n             setores_e_subsetores) %>%\n    summarize(data_nominal = min(data_nominal),\n              valor = sum(valor),\n              valor_pib = sum(valor_pib)) %>%\n    ungroup() %>%\n    mutate(valor_perc = ((valor/valor_pib))*100)\n\n  sel_data <- dados_grafico_corrente_ano %>%\n    filter(year(data_nominal) %in% input$ano)\n```", "```py\n# Create placeholder for the downloadButton\nuiOutput(\"downloadUI_conta_perc_ano\")\n# Create the actual downloadButton\noutput$downloadUI_conta_perc_ano <- renderUI( {\n  downloadButton(\"download_conta_perc_ano\",\"Download\", style = \"width:100%;\")\n})\noutput$download_conta_perc_ano<- downloadHandler(\n  filename = function() {\n    paste('dados_grafico_perc_ano',  '.csv', sep='')\n  },\n  content = function(file) {\n    #dados_conta_trimestre_corrente <- graph_mapa_regic$data\n    write.table(dados_grafico_corrente_ano, file, sep = \";\",row.names = FALSE,fileEncoding = \"UTF-8\",dec=\",\")\n  }\n)\n```", "```py\n dados_grafico_taxa_acum_ano<<-\n    cnt_taxa_variacao %>%\n    filter(setores_e_subsetores %in% input$conta_var,\n           variavel_codigo == \"6562\") %>%\n    mutate(data_nominal = gera_meses_trimestre(trimestre_codigo),\n           setores_e_subsetores = str_wrap(setores_e_subsetores,20))\n```", "```py\ncalcula_serie_constante<- function(tabela_taxa, tabela_precos, trimestres_filtro, conta, ano_referencia){\n\n  # Preparação dos dados\n  dados_grafico_acumulado_lab <- tabela_taxa %>%\n    filter(setores_e_subsetores %in% conta, variavel_codigo == \"6563\", trimestre_codigo %in% trimestres_filtro) %>%\n    mutate(data_nominal = gera_meses_trimestre(trimestre_codigo), setores_e_subsetores = str_wrap(setores_e_subsetores, 20), ano = year(data_nominal)) %>%\n    select(ano, setores_e_subsetores, valor) %>%\n    rename(variacao = valor)\n\n  tabela_base <- tabela_precos %>%\n    filter(setores_e_subsetores %in% conta) %>%\n    mutate(data_nominal = gera_meses_trimestre(trimestre_codigo), setores_e_subsetores = str_wrap(setores_e_subsetores, 20), ano = as.numeric(format(data_nominal, \"%Y\"))) %>%\n    summarise(valor = sum(valor), .by = c(setores_e_subsetores, ano)) %>%\n    ungroup() %>%\n    inner_join(dados_grafico_acumulado_lab, by = c(\"ano\", \"setores_e_subsetores\"))\n\n  dados_grafico_constante_ano <- unique(tabela_base$setores_e_subsetores) %>%\n    map_dfr(function(setor) {\n      tabela_anterior <- calcular_valor_referencia(tabela_base, setor, ano_referencia, \"anterior\")\n      tabela_posterior <- calcular_valor_referencia(tabela_base, setor, ano_referencia, \"posterior\")\n\n      bind_rows(tabela_anterior, tabela_posterior[-1, ]) %>%\n        arrange(ano) %>%\n        mutate(valor_constante = valor_referencia/10^3)})\n\n}\n\n# Função para otimizar a criação de tabelas e cálculo de valor_referencia\ncalcular_valor_referencia <- function(tabela_base, setor, ano_referencia, direcao) {\n\n  if (direcao==\"anterior\"){\n    tabela_filtrada <- \n      tabela_base %>%\n      filter(setores_e_subsetores == setor, \n             ano <= ano_referencia) %>%\n      arrange(desc(ano))\n\n  } else{\n    tabela_filtrada <- \n      tabela_base %>%\n      filter(setores_e_subsetores == setor, \n             ano >= ano_referencia) %>%\n      arrange(ano)\n\n  }\n\n  if(nrow(tabela_filtrada) > 1) {\n\n    tabela_filtrada$valor_referencia <- NA\n    tabela_filtrada$valor_referencia[1] <- tabela_filtrada$valor[1]\n\n    ajuste <- if_else(direcao == \"anterior\", -1, 1)\n\n    for(i in 2:nrow(tabela_filtrada)){\n\n      if (ajuste==-1){\n\n        tabela_filtrada$valor_referencia[i] <- tabela_filtrada$valor_referencia[i-1] * (1 + ajuste * (tabela_filtrada$variacao[i-1]/100))\n\n      } else{\n\n        tabela_filtrada$valor_referencia[i] <- tabela_filtrada$valor_referencia[i-1] * (1 + ajuste * (tabela_filtrada$variacao[i]/100))\n      }\n\n    }\n  }\n\n  return(tabela_filtrada)\n} \n```"]