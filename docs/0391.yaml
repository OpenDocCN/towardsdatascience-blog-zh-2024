- en: How to Build Your Own Google AI Chatbot Within 5 Minutes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-build-your-own-ai-chatbot-within-5-minutes-using-google-llm-and-your-private-knowledge-eed4b6852917?source=collection_archive---------0-----------------------#2024-02-11](https://towardsdatascience.com/how-to-build-your-own-ai-chatbot-within-5-minutes-using-google-llm-and-your-private-knowledge-eed4b6852917?source=collection_archive---------0-----------------------#2024-02-11)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Fully utilising the power of Google LLM and your private knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lizhuohang.selina?source=post_page---byline--eed4b6852917--------------------------------)[![Selina
    Li](../Images/8bc2e0079d72b4d23f9d903b24144acb.png)](https://medium.com/@lizhuohang.selina?source=post_page---byline--eed4b6852917--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--eed4b6852917--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--eed4b6852917--------------------------------)
    [Selina Li](https://medium.com/@lizhuohang.selina?source=post_page---byline--eed4b6852917--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--eed4b6852917--------------------------------)
    ·14 min read·Feb 11, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: 'Authors: [Selina Li](https://medium.com/u/7b9ea39b0d79?source=post_page---user_mention--eed4b6852917--------------------------------),
    [Tianyi Li](https://medium.com/u/4092d7367010?source=post_page---user_mention--eed4b6852917--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: · [The Problem](#e714)
  prefs: []
  type: TYPE_NORMAL
- en: · [The Solution](#1b3c)
  prefs: []
  type: TYPE_NORMAL
- en: · [Use Case](#5489)
  prefs: []
  type: TYPE_NORMAL
- en: · [Step by Step Guide](#59ba)
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Step 1: Environment Setup](#9037)'
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Step 2: Prepare Private Knowledge and store them into Google Cloud Storage
    (low code)](#f3cd)'
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Step 3: Create Chatbot and the Data Store sitting behind the Chatbot (no
    code)](#4368)'
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Step 4: Test the Chatbot (no code)](#7842)'
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Step 5: Publish / Integrate your Chatbot (low code)](#5ba1)'
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Step 6 (Optional): Publish it through a Beautiful Application (low code)](#eb61)'
  prefs: []
  type: TYPE_NORMAL
- en: · [What makes this “magic”?](#c1a0)
  prefs: []
  type: TYPE_NORMAL
- en: · [Some Observations](#d869)
  prefs: []
  type: TYPE_NORMAL
- en: · [Wrap-up](#9e33)
  prefs: []
  type: TYPE_NORMAL
- en: · [Enjoyed This Story?](#1884)
  prefs: []
  type: TYPE_NORMAL
- en: The Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might have been familiar with AI chats powered by Large Language Model (LLM)
    such as OpenAI ChatGPT or Google Bard. And you might have noticed one thing —
    these LLMs have extensive general knowledge about the world, but might not give
    you satisfactory answers when you ask about a very specific or professional area,
    especially if the knowledge of this area is not that publicly available or sharable.
  prefs: []
  type: TYPE_NORMAL
- en: Have you thought about “giving” your private knowledge to LLM and creating your
    own Chatbot?
  prefs: []
  type: TYPE_NORMAL
- en: Do you know this can be done within 5 minutes with no code or low code?
  prefs: []
  type: TYPE_NORMAL
- en: 'The end product will be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/43425b636db296b5f717c704821742cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Github link: [https://github.com/bianbianzhu/property-hunter](https://github.com/bianbianzhu/property-hunter)'
  prefs: []
  type: TYPE_NORMAL
- en: The Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During the Asia Pacific Google Cloud Applied AI Summit, **Alan Blount** from
    **Google** shared an interesting idea of achieving this using Google Cloud Vertex
    AI Search and Conversation, which I found pretty attractive to try out.
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea is simple, first put a corpus of private knowledge documents onto
    Google Cloud Storage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ef41c9002b1f774d04761323d723ee89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'then create a Data Store, and import the documents from the Cloud Storage into
    the Data Store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fb494f7b0897ae6aebf5ea2e54c71af5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'finally plug that Data Store into Dialogflow CX:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1accd902a2ca0296ef96a71fff49740.png)'
  prefs: []
  type: TYPE_IMG
- en: then we are done!
  prefs: []
  type: TYPE_NORMAL
- en: 'We can test Chatbot like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/acc5dc21a230ba1d9c21fb32d076d0c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And if we want to publish it through a beautiful application, Google provides
    a public git repo for a Chat App that we can utilise. With a bit of coding knowledge,
    we can plug the link of the Dialogflow Chatbot into the Chat App, and customize
    the interface like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6b68e2456865c0acdd93a11b340e53a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'OR this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6c6a1713a41172745feeeb5b0d0a147d.png)'
  prefs: []
  type: TYPE_IMG
- en: Use Case
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this case, assuming I am the owner of an ecommerce website. I would like
    to create a Chatbot, so my users can ask specific questions regarding anything
    about this website (price, product, service, shipping, etc.) as they are in the
    store. The Chatbot will be supplied with the “private knowledge” and ground its
    answers to the contents of the website.
  prefs: []
  type: TYPE_NORMAL
- en: Given I am not actually owning an ecommerce website, I will take a workaround
    to crawl contents from an existing website available on the Internet. This is
    tricky because most websites are anti-scraping as specified in their terms of
    use, and it could be illegal to scrape ecommerce websites such as Amazon, eBay,
    Alibaba, etc.
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT provided me with a perfect option —
  prefs: []
  type: TYPE_NORMAL
- en: Books to Scrape ([https://books.toscrape.com/](https://books.toscrape.com/)).
    A simulated bookstore specifically designed for web scraping practice. It offers
    a straightforward structure for scraping book details like title, price, and rating.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this use case, I would assume I am the owner of this [Books to Scrape website](https://books.toscrape.com/),
    and create the Chatbot based on it.
  prefs: []
  type: TYPE_NORMAL
- en: Step by Step Guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This might look a bit lengthy at first glance because it covers every detailed
    step that you will need. Once you have run through, you can get the same done
    within 5 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1: Environment Setup**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tool we are going to use is sitting on Google Vertex AI and we will need
    a Google Cloud Platform (GCP) account.
  prefs: []
  type: TYPE_NORMAL
- en: Google has a [free-tier program](https://cloud.google.com/free/docs/free-cloud-features#free-trial)
    to provide new Google Cloud Platform (GCP) users with a 90-day trial period that
    includes $300 as free Cloud Billing credits.
  prefs: []
  type: TYPE_NORMAL
- en: Follow the [tutorial here](https://medium.com/@lizhuohang.selina/create-a-free-tier-google-cloud-account-9f4303516a28)
    to set up the free **Google Cloud account**.
  prefs: []
  type: TYPE_NORMAL
- en: After you have set up Google Cloud account and can access the console, **create
    a storage bucket** ([step-by-step guide here](https://cloud.google.com/storage/docs/creating-buckets#create_a_new_bucket))
    for the next step use.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 2: Prepare Private Knowledge and store them into Google Cloud Storage
    (low code)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned above, the private knowledge in this case will be the contents
    sitting on the book store website.
  prefs: []
  type: TYPE_NORMAL
- en: For owners of ecommerce websites, all you need to do is to provide the website
    URLs, and Google can automatically crawl website content from a list of domains
    you define.
  prefs: []
  type: TYPE_NORMAL
- en: Given I am not a real owner, I will resolve this by scrawling. Alan Blount from
    Google provided [a very useful notebook](https://goo.gle/4847mcz) to achieve this.
    All the code snippet does is to scrawl webpages from the website that you specified
    and store them in a Google Cloud Storage bucket that you specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is all you need to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '**2.1 Save a copy of the notebook in your own drive**'
  prefs: []
  type: TYPE_NORMAL
- en: Recall that in step 2 you have created a new Google account when you registered
    for Google Cloud? Your Google account will have [Google Drive](https://drive.google.com/drive/u/0/home)
    and you can save a copy of this notebook to your drive.
  prefs: []
  type: TYPE_NORMAL
- en: Select “Save a copy in Drive” option from the dropdown menu of “File”
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd5f4b55322d2af0a812da6fa47b221b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from [Google Colab Notebook](https://colab.research.google.com/gist/zeroasterisk/54e6caa81fc8dea0c629275f12463e5f/-flutter-vertex-ai-demo-crawl-a-website-and-save-the-html-files-to-google-cloud-bucket.ipynb?utm_source=events-with-google&utm_medium=et&utm_campaign=FY24-Q1-apac-EXP89-onlineevent-er-applied-ai-summit-2023-apac-mc&utm_content=apac_appaisummit_lp_2024_resources)
    by Alan Blount
  prefs: []
  type: TYPE_NORMAL
- en: Then if you go to [Google Drive](https://drive.google.com/drive/u/0/home), you
    will be able to see the notebook you created. Feel free to rename it according
    to your need.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4991dcbe134654bcd5e1f935c794a203.png)'
  prefs: []
  type: TYPE_IMG
- en: '**2.2 On your own notebook, locate the below and specify**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/78797a6185557f76579a72b238276df1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Colab Notebook
  prefs: []
  type: TYPE_NORMAL
- en: '`website_url` refers to the website page URL that you would like to scrawl.'
  prefs: []
  type: TYPE_NORMAL
- en: '`storage_bucket` refers to the Google Cloud Storage that you created in above
    step 1.'
  prefs: []
  type: TYPE_NORMAL
- en: '`metadata_filename` refers to a json file that will be created and stored together
    with the webpages. You might want to make it relevant to your website by changing
    `applied_ai_summit_flutter_search` to something that can describe your use case.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is my version:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/852466c2662e2ff8f9b098cf809280f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Colab Notebook
  prefs: []
  type: TYPE_NORMAL
- en: '**2.3 Run all**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a3ddf0b6c7e615dab7fd751a6cf39d12.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Colab Notebook
  prefs: []
  type: TYPE_NORMAL
- en: '**2.4 When it prompts you to authenticate the Google Colab notebook to access
    your Google credentials, click “Allow” -> “Continue”**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e9f5054915992ec2a7fb33474c87e91a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Colab Notebook
  prefs: []
  type: TYPE_NORMAL
- en: 'Then the script should run through and show the progress of the scrawling at
    the bottom, just like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/243dc44d573ffe7e5e813866425dae78.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Colab Notebook
  prefs: []
  type: TYPE_NORMAL
- en: 'And if you refer to your Google Cloud storage bucket, you will see these html
    files get scrawled and stored properly within your bucket:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1958b429f4b9a1dfe1b2cda49c66baa1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: One thing to notice is that the code snippet is not designed for every use case,
    and you might need some slight tuning of the codes to achieve your goal.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in my case, I tuned the code a bit by changing
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: into
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: By default the `html_string` will be uploaded as `text/plain` . By changing
    into `text/html` , I would like to enable this HTML contents to show properly
    in a later stage.
  prefs: []
  type: TYPE_NORMAL
- en: You can tune the code as much as you like.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 3: Create Chatbot and the Data Store sitting behind the Chatbot (no
    code)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Go to Google Cloud Console ([https://console.cloud.google.com/](https://console.cloud.google.com/))
    and type “search and conversation” as the service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cdc2fa2c03fe7366995674b632080c99.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create “NEW APP”:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/23fb1e16321fa04a0763e1412706040e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: 'Select “Chat”:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a9bdcf2828414350c09b17a39ffcfa3a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: Provide your “Company name” and “Agent name”. Note that the **“Agent name”**
    here will be the **name of the Chatbot**, you might want to put a good name for
    your users.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7de2b5b1cef6e653803f3fc9e071c515.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: 'At this “Data” page, select “CREATE NEW DATA STORE”:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4a7c4131fcc6fb7d1fd7022478b60752.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: For owners of ecommerce websites, select “Website URLs” and provision your website
    URLs
  prefs: []
  type: TYPE_NORMAL
- en: 'As I have scrawled the website contents into Cloud Storage, we can select “Cloud
    Storage” here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/26f6021d1fbe20f93b4e51f4c1fbf0f5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: 'Specify the Cloud Storage bucket name, and select “Unstructured documents”
    in below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/007f40ea225ea53e2f09824696bccb9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: Give your data store a name, then “CREATE”
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cb47148fdce7687e914f5e42e94ef37c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: You will see your data store listed, then “CREATE”
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/263ca3f4e929d8484d3e6affe02f50e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: Your data store will be created as below
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f3a674367d1e83604ab947a730fdffdb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click into it, you will see your data store is “processing data” by
    importing documents from the Cloud Storage bucket that we specified earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5e4d7f67be0634518a6421f5aab1f710.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click the “ACTIVITY” tab, we can see the import is in progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f185ddec47ae70cf303ae4d317ff3bf6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: Import will take minutes to hours depending on the number of documents in your
    Cloud Storage bucket.
  prefs: []
  type: TYPE_NORMAL
- en: In my case, I have over 1,000 files and it finishes within minutes.
  prefs: []
  type: TYPE_NORMAL
- en: 'After import is completed, the status as highlighted has changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d2d95cd21050dbab5288a33a8627fa5d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: 'And if you switch back to the “DOCUMENTS” tab, you will see the list of files
    imported into the data store:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5e45c1fa781b8ae0197c8fd6f51382df.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: That means you’ve got all the materials and you are ready to cook!
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Test the Chatbot (no code)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In step 3 above, we have already created a Chatbot app as well as the data store
    sitting behind it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click “Apps” on the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7450fedd30a09bc504966d67b4733843.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the Chatbot you created in the previous step 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/00b8eead5847c59b5fed9fb8485fb09d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click into the Chatbot name, you will be directed to the Dialogflow
    CX page like below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2a7e6e5f22342f2be8407396c90ad25b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the Chatbot, select “Test Agent” in the right up corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2caf01d59ef23194b0031248b5cfe325.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: 'And the dialogue box will pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0bfcf164f96e4f7c25ffec31b04d1d39.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: 'You can start the conversation by saying “hi” and start asking questions to
    the Chatbot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49719ee09a923fcf2fac33803a903ec1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: It works!
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Publish / Integrate your Chatbot (low code)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are happy with the Chatbot, it is easy to integrate it with your web
    application
  prefs: []
  type: TYPE_NORMAL
- en: Go to the left pane, select “Manage” -> “Integrations” -> “Dialogflow Messenger”
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0773340e4495d08c40822981036748b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: You can choose the type of API and UI style according to your needs
  prefs: []
  type: TYPE_NORMAL
- en: 'For demo purpose, I selected “Unauthenticated API” as API and “Pop-out” as
    UI style:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a29403b6a78b67cac4c9de6dea005d10.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting “Done”, a code snippet in HTML will be generated in the next
    page as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8635dec907fe99d3b43227079a7cf16d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: You may copy the code snippet and easily paste it into your applications for
    integration.
  prefs: []
  type: TYPE_NORMAL
- en: For demo purpose, I copy paste this HTML snippet into [JSFiddle](https://jsfiddle.net/)
    and run it, then I am getting my little Chatbot working as shown in the right
    down corner!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/65bb7fe604bec0cf0d4394f324f190b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from [JSFiddle](https://jsfiddle.net/)
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 6 (Optional): Publish it through a Beautiful Application (low code)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In case you don’t have an application yet and you want to have one, Google provides
    a good starting point through a public git repository [Chat App](https://github.com/GoogleCloudPlatform/generative-ai/tree/main/conversation/chat-app).
  prefs: []
  type: TYPE_NORMAL
- en: This is a Chatbot Application written in Node.js and you can easily adapt it
    for your own use by changing the code snippets a bit within `chat-app/src/routes/+page.svelte`
    .
  prefs: []
  type: TYPE_NORMAL
- en: You will need to change the `project-id`, `agent-id` and `chat-title` into yours.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4b3fe26c95da711768cf3af30a354c3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from git repo [https://github.com/GoogleCloudPlatform/generative-ai/tree/main/conversation/chat-ap](https://github.com/GoogleCloudPlatform/generative-ai/tree/main/conversation/chat-app)
  prefs: []
  type: TYPE_NORMAL
- en: 'And once you run/deploy the app, you will get the web UI like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c6c931e4ab087b0f9dec6bb65bf71225.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from git repo [https://github.com/GoogleCloudPlatform/generative-ai/tree/main/conversation/chat-app](https://github.com/GoogleCloudPlatform/generative-ai/tree/main/conversation/chat-app)
  prefs: []
  type: TYPE_NORMAL
- en: Of course you can change the appearance of the UI as you like.
  prefs: []
  type: TYPE_NORMAL
- en: Now you can have your own application!
  prefs: []
  type: TYPE_NORMAL
- en: What makes this “magic”?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Recalling the solution design that we mentioned at the beginning. This looks
    a bit magic as you can get your own LLM powered Chatbot by simply supplying your
    private knowledge to a Google Cloud Storage bucket.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1accd902a2ca0296ef96a71fff49740.png)'
  prefs: []
  type: TYPE_IMG
- en: This is achieved as Google has done quite a bit of integrations behind the scene,
    by integrating **Vertex AI platform** with the chatbot agent service **Dialogflow
    CX**, and coming up with a new abstraction called **Vertex AI Conversation** (formerly
    Gen App Builder). This new abstraction also supports **Search** and **Recommend**,
    and the full name of this service is “**Vertex AI Search and Conversation**”.
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, this new abstraction of “Vertex AI Search and Conversation” is
    sitting on top of Vertex AI which has orchestrated a bunch of foundation models,
    and gets “augmented” by user-supplied updated real world information, so it can
    contextualize its responses to these information.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98e515df9473082c7f1482959086d777.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image as a slide from Google Cloud CEO speech [Generative AI: The next frontier
    for developers](https://youtu.be/L-UKYBPJTWE?si=zJR9gJs7YTH_JiJ1)'
  prefs: []
  type: TYPE_NORMAL
- en: The integration is great as it can help at least two groups of people —
  prefs: []
  type: TYPE_NORMAL
- en: traditional Chatbot builder, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: people exploring GenAI solutions but having not identified a good use case
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Imagine you are a **traditional Chatbot builder** using Dialogflow CX, you are
    creating pages, intents and routes to route customer intentions to the corresponding
    page. Basically you are defining “if customer say this then I respond with this”
    which is a bit hard-coding. Now Google plugs in Vertex AI which can utilise LLM
    models (e.g. text-bison, gemini) to generate agent responses and control conversation
    flow in a much smarter way. This can significantly reduce agent design time and
    improve agent quality.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, image you are **exploring the power of LLMs and Generative
    AI but not sure what to do with it**. This **Vertex AI Conversation** feature
    can enable you to easily build and launch your own Chatbot applications quickly
    and make them available for real use case. This can significantly shorten the
    go-to-market time of LLM and GenAI solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Some Observations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Despite the “magic” as it appears, we observed several things worth sharing
    with developers who are considering use this “**Vertex AI Search and Conversation**”
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: Our gut feeling is this is a new product Google brought in by “integrating”
    several existing tools and is still working towards making it better. It lacks
    clarity how the integration happens behind the scene, and how developers can best
    understand and configure it.
  prefs: []
  type: TYPE_NORMAL
- en: I got our chatbot very quickly but once I started looking at how to fine tune
    it, it took me quite a bit of time to figure out how Dialogflow CX works, what
    is “generator” and how it works. At this moment I’m still confused why this Chatbot
    works so great without me even configuring any [“generator” as described in Google
    doc](https://cloud.google.com/dialogflow/cx/docs/concept/generative/generators),
    and whether/how we can make it better by using “generator”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some other observations during the development:'
  prefs: []
  type: TYPE_NORMAL
- en: Indexing a website or a set of documents can take minutes or days, depending
    on the amount of data. There is no clear estimate on how long this process will
    take, and what developers can do is just wait and check periodically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We know how to link a datastore to a Chatbot app, but looks like we cannot “unlink”
    it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Despite the level of grounding, the quality of the data supplied by users can
    significantly impact the performance of the Chatbot. “Rubbish in, rubbish out”
    still applies to a great extent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “Augment” by supplying private data and knowledge helps resolve one issue of
    LLM — lack of updated real world information. But the issue of hallucination stays
    as sometimes the Chatbot can give “fake” information (of course depending on the
    data quality of the private knowledge you supplied).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chatbot provides links to the relevant web page / document page (e.g. PDF)
    during chat with users. This is great, but the link supplied by the Chatbot comes
    as Google Cloud Storage Authenticated URL and can only be accessed by users with
    granted permission. Developers need to figure out how to make them into the signed-URLs
    which are safe to share with public anonymous users, instead of using the Google
    Cloud Storage Authenticated URLs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The data store sitting behind the Chatbot works best for unstructured data.
    For structured data, it supports linking to CSV structured data but it has to
    be in the format of “question” and “answer” as mentioned in Google doc:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/5afdef6df1cace674c95147b7bfb630f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Google Cloud Console
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ba0455873dd78c1f5dfeaec6cb327dfd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from [Google Cloud Dialogflow Guides](https://cloud.google.com/dialogflow/vertex/docs/concept/data-store#structured)
  prefs: []
  type: TYPE_NORMAL
- en: Wrap-up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the above use case, I assume I am an online book store owner and created
    a Chatbot based on my e-commerce website contents in HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, you can supply “private knowledge” in the format of **blogs**, **files
    (e.g. PDF, HTML, TXT)** and **all kinds of websites** to the Google Cloud Storage,
    and create your own Chatbot.
  prefs: []
  type: TYPE_NORMAL
- en: This enables individuals / businesses to fully utilize the power of the Google
    LLMs (text-bison, gemini, etc.) and augment it with private knowledge, and create
    own Chatbots in a very quick manner.
  prefs: []
  type: TYPE_NORMAL
- en: This marks the end of this article. Hope you find it helpful!
  prefs: []
  type: TYPE_NORMAL
- en: '(PS: I am working on a video to make this step-by-step guide easier to follow.
    Will share if I get it done in near future.)'
  prefs: []
  type: TYPE_NORMAL
- en: Enjoyed This Story?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Selina Li** ([Selina Li](https://medium.com/u/7b9ea39b0d79?source=post_page---user_mention--eed4b6852917--------------------------------),
    [LinkedIn](https://www.linkedin.com/in/selina-zhuohang-li-3b7355120/)) is a Principal
    Data Engineer working at [Officeworks](https://www.officeworks.com.au/) in Melbourne
    Australia. Selina is passionate about AI/ML, data engineering and investment.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jason Li** ([Tianyi Li](https://medium.com/u/4092d7367010?source=post_page---user_mention--eed4b6852917--------------------------------),
    [LinkedIn](https://www.linkedin.com/in/tianyi-li-jason/)) is a Full-stack Developer
    working at [Mindset Health](https://www.mindsethealth.com/) in Melbourne Australia.
    Jason is passionate about AI, front-end development and space related technologies.'
  prefs: []
  type: TYPE_NORMAL
- en: Selina and Jason would love to explore technologies to help people achieve their
    goals.
  prefs: []
  type: TYPE_NORMAL
- en: '*Unless otherwise noted, all images are by the authors.*'
  prefs: []
  type: TYPE_NORMAL
