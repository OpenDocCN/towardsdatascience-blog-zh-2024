["```py\nimport pandas as pd\nimport seaborn as sns\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport xarray as xr\n\nimport statsmodels.api as sm\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom scipy import stats\n```", "```py\nfrom ambivalent import STYLES\nimport opinionated\nplt.style.use(STYLES['ambivalent'])\nplt.style.use(\"dark_background\")\n```", "```py\ndata = xr.open_dataset('Medium_data.nc')\ndata\n```", "```py\ndf = data.sel(latitude=52.53, longitude=101.63, method='pad').to_pandas().drop(['latitude', 'longitude'], axis=1)\n```", "```py\nfig, ax = plt.subplots(ncols = 2, nrows = 2, figsize=(16,9))\ndf['t2m'].plot(ax=ax[0,0])\nax[0,0].set_title('Air Temperature')\ndf['ssr'].plot(ax=ax[0,1])\nax[0,1].set_title('Surface Net Solar Radiation')\ndf['sp'].plot(ax=ax[1,0])\nax[1,0].set_title('Surface Pressure')\ndf['tp'].plot(ax=ax[1,1])\nax[1,1].set_title('Total Precipitation')\nplt.tight_layout()\nplt.show()\n```", "```py\nvars = {'t2m': 'Air Temperature', 'tp': 'Total Precipitation', 'sp': 'Surface Pressure', 'ssr': 'Surface Net Solar Radiation'}\nfor var in df.columns:\n  result = sm.tsa.seasonal_decompose(df[var], model='additive', period = 24)\n  results_df = pd.DataFrame({'trend': result.trend, 'seasonal': result.seasonal, 'resid': result.resid, 'observed': result.observed})\n  fig, ax = plt.subplots(ncols = 2, nrows = 2,figsize=(16,9))\n  ax[0,0].plot(df.index, results_df.trend)\n  ax[0,0].set_title('Trend')\n  ax[0,0].set_ylabel('Value')\n\n  ax[0,1].plot(df.index, results_df.seasonal)\n  ax[0,1].set_title('Seasonal')\n\n  ax[1,0].plot(df.index, results_df.resid)\n  ax[1,0].set_title('Residual')\n  ax[1,0].set_ylabel('Value')\n  ax[1,0].set_xlabel('time')\n\n  ax[1,1].plot(df.index, results_df.observed)\n  ax[1,1].set_title('Observed')\n  ax[1,1].set_xlabel('time')\n\n  opinionated.set_title_and_suptitle(vars[var], f\"Dickey-Fuller test: {round(sm.tsa.stattools.adfuller(df[var])[1],5)}\", position_title=[0.45,1],\n                                     position_sub_title=[0.95, 1])\n  plt.tight_layout()\n  plt.savefig(f'Seasonal_{var}.png')\n  plt.show()\n```", "```py\ndf_d = df.resample('1d').mean()\n```", "```py\nax = sns.pairplot(df, diag_kind='kde')\nax.map_upper(sns.histplot, bins=20)\nax.map_lower(sns.kdeplot, levels=5, color='.1')\nplt.show()\n```", "```py\ndf_d['t2m_box'], _ = stats.boxcox(df_d.t2m)\nfig, ax = plt.subplots(nrows=1, ncols=2, figsize=(15,7))\nsns.histplot(df_d.t2m_box, kde=True, ax=ax[0])\nsns.histplot(df_d.t2m, kde=True, ax=ax[1])\n```", "```py\nfig = plt.figure()\n\nax1 = fig.add_subplot(211)\nprob = stats.probplot(df_d.t2m, dist=stats.norm, plot=ax1)\nax1.get_lines()[1].set_color('w')\nax1.get_lines()[0].set_color('#8dd3c7')\nax1.set_title('Probplot against normal distribution')\n\nax2 = fig.add_subplot(212)\nprob = stats.probplot(df_d.t2m_box, dist=stats.norm, plot=ax2)\nax2.get_lines()[1].set_color('w')\nax2.get_lines()[0].set_color('#8dd3c7')\nax2.set_title('Probplot after Box-Cox transformation')\nplt.tight_layout()fig = plt.figure()\n\nax1 = fig.add_subplot(211)\nprob = stats.probplot(df_d.t2m, dist=stats.norm, plot=ax1)\nax1.set_title('Probplot against normal distribution')\n\nax2 = fig.add_subplot(212)\nprob = stats.probplot(df_d.t2m_box, dist=stats.norm, plot=ax2)\nax2.set_title('Probplot after Box-Cox transformation')\nplt.tight_layout()\n```", "```py\nfor var in df.columns[:-1]:\n  fig, (ax1, ax2) = plt.subplots(2,1,figsize=(10,8))\n  plot_acf(df_d.t2m, ax = ax1)\n  plot_pacf(df_d.t2m, ax = ax2)\n  opinionated.set_title_and_suptitle(vars[var], '',position_title=[0.38,1],\n                                     position_sub_title=[0.95, 1])\n  plt.tight_layout()\n  plt.show()\n```"]