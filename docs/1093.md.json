["```py\n2022-10-02 09:35:17 INFO 67305985 VOTA Voter was enabled\n2022-10-02 09:43:55 INFO 67305985 VOTA Vote confirmed for [Federal Deputy]\n2022-10-02 09:48:39 INFO 67305985 VOTA Vote confirmed for [State Deputy]\n2022-10-02 09:49:10 INFO 67305985 VOTA Vote confirmed for [Senator]\n2022-10-02 09:49:47 INFO 67305985 VOTA Vote confirmed for [Governor]\n2022-10-02 09:50:08 INFO 67305985 VOTA Vote confirmed for [President]\n2022-10-02 09:50:09 INFO 67305985 VOTA The voter's vote was computed\n# Literal Translations to English\n# Events that represent a vote\n```", "```py\n| State         | City              | Mean Voting Time (seconds) | Max Votes Computed in 5 Min |\n|---------------|-------------------|----------------------------|-----------------------------|\n| Null          | Null              | 50                         | 260                         |\n| São Paulo     | São Paulo         | 30                         | 300                         |\n| São Paulo     | Campinas          | 35                         | 260                         |\n| São Paulo     | Null              | 20                         | 260                         |\n| Rio de Janeiro| Rio de Janeiro    | 25                         | 360                         |\n| Minas Gerais  | Belo Horizonte    | 40                         | 180                         |\n| Bahia         | Salvador          | 28                         | 320                         |\n| Rio Grande ...| Porto Alegre      | 30                         | 300                         |\n| ...           | ...               | ...                        | ...                         |\n```", "```py\npip install duckdb\n```", "```py\ncursor = duckdb.connect(\"\")\n```", "```py\nquery = f\"\"\"\n    COPY (\n        SELECT \n            * \n        FROM read_csv('/data/logs/2_{state}/*.csv', filename=True)\n    ) TO '{state}.parquet' (FORMAT 'parquet');\n\"\"\"\n```", "```py\ncursor.execute(query)\n```", "```py\nmy_df = cursor.execute(query).df()\n```", "```py\n VOTES_DESCRIPTIONS = [\n    # VOTES\n    \"event_description = 'Aguardando digitação do título'\",  \n    # Awaiting voter's title (Voter Registration ID) input\n    \"event_description = 'Título digitado pelo mesário'\",  \n    # Voter's title entered by the poll worker\n    \"event_description = 'Eleitor foi habilitado'\",  \n    # Voter has been enabled\n    \"event_description ILIKE 'Voto confirmado par%'\", \n    # Vote confirmed for ... could be [PRESIDENT, SENATOR, DEPUTY, ...]\n    \"event_description = 'O voto do eleitor foi computado'\",  \n    # Voter's vote has been computed\n]\n\nACCEPTED_DATES = [\n    '2022-10-02', '2022-10-30', # Constitutional date of the election filter\n    '2022-10-03', '2022-10-31', \n]\n\nquery = F\"\"\"\n    SELECT \n        *\n    FROM (\n        SELECT\n            event_timestamp,\n            event_timestamp::date AS event_date,\n            event_type,\n            some_id,\n            event_system,\n            event_description,\n            event_id,\n\n            REPLACE(SPLIT_PART(filename, '/', 5), '_new.csv', '') AS filename,\n\n            -- Metadata from filename\n            SUBSTRING( SPLIT_PART(SPLIT_PART(filename, '/', 5), '-', 2),  1, 5 ) AS city_code,\n            SUBSTRING( SPLIT_PART(SPLIT_PART(filename, '/', 5), '-', 2),  6, 4 ) AS zone_code,\n            SUBSTRING( SPLIT_PART(SPLIT_PART(filename, '/', 5), '-', 2), 10, 4 ) AS section_code,\n            REPLACE(SPLIT_PART(filename, '/', 4), '2_', '') AS uf\n        FROM\n            {DATASET}\n        WHERE 1=1\n            AND ( {' OR '.join(VOTES_DESCRIPTIONS)} )\n    ) _\n    WHERE 1=1\n    AND event_date IN ({', '.join([F\"'{date}'\" for date in ACCEPTED_DATES])})\n\"\"\"\n```", "```py\nfor state in states:\n    for date in ACCEPTED_DATES:\n        for zone_group in ZONE_GROUPS:\n            query = F\"\"\"\n                COPY \n                {\n                    complex_query_goes_here\n                    .replace('<uf>', state)\n                    .replace('<event_date>', date)\n                    .replace('<zone_id_min>', str(zone_group[0]))\n                    .replace('<zone_id_max>', str(zone_group[1]))\n                } \n                TO 'VOTES.parquet' \n                (FORMAT 'parquet', PARTITION_BY (event_date, uf, zone_group), OVERWRITE_OR_IGNORE 1);\n            \"\"\"\n```", "```py\nquery_metrics = F\"\"\"\n    SELECT\n        turno, state,\n        zone_code,\n       section_code,\n\n        COUNT(*) AS total_votes,\n        COUNT( DISTINCT state || zone_code || section_code ) AS total_sections,\n\n        SUM( vote_time ) AS voting_time_sum,\n        AVG( vote_time  ) AS average_voting_time,\n\n        MAX( nr_of_votes )   AS total_ballot_items_voted,\n        SUM( nr_of_keys_pressed ) AS total_keys_pressed\n\n    FROM\n        source\n    GROUP BY ROLLUP(turno, state, zone_code, section_code)\n\"\"\"\n```"]