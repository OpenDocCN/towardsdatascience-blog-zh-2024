["```py\nimport numpy as np\nimport pandas as pd\n\nmath_score = [60, 70, 80, 90]\nfavorite_subject = [\"History\", \"English\", \"Science\", \"Math\"]\nstd_deviation =  5  \nnum_samples = 30   \n\n# Generate 30 samples with a normal distribution\nscores = []\nsubjects = []\nfor i in range(4):\n  scores.extend(np.random.normal(math_score[i], std_deviation, num_samples))\n  subjects.extend([favorite_subject[i]]*num_samples)\n\ndata = {'Score': scores, 'Subject': subjects}\ndf_math = pd.DataFrame(data)\n\n# Print the DataFrame\nprint(df_math.sample(frac=0.04))import numpy as np\nimport pandas as pd\nimport random\n\nmath_score = [60, 70, 80, 90]\nfavorite_subject = [\"History\", \"English\", \"Science\", \"Math\"]\nstd_deviation =  5  # Standard deviation in cm\nnum_samples = 30   # Number of samples\n\n# Generate 30 samples with a normal distribution\nscores = []\nsubjects = []\nfor i in range(4):\n  scores.extend(np.random.normal(math_score[i], std_deviation, num_samples))\n  subjects.extend([favorite_subject[i]]*num_samples)\n\ndata = {'Score': scores, 'Subject': subjects}\ndf_math = pd.DataFrame(data)\n\n# Print the DataFrame\nsampled_index = random.sample(range(len(df_math)), 5)\nsampled = df_math.iloc[sampled_index]\nprint(sampled)\n```", "```py\n# Simple way\ndf_math['Subject_num'] = df_math['Subject'].replace({'History': 0, 'Science': 1, 'English': 2, 'Math': 3})\nprint(df_math.iloc[sampled_index])\n```", "```py\n# Scikit-learn\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf_math[\"Subject_num_scikit\"] = le.fit_transform(df_math[['Subject']])\nprint(df_math.iloc[sampled_index])\n```", "```py\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(df_math[[\"Subject_num\"]], df_math[[\"Score\"]])\n\ncoefficients = model.coef_\n\nprint(\"Coefficients:\", coefficients)\n```", "```py\nimport numpy as np\nimport pandas as pd\n\n# Set the parameters\nmean_height = [110, 140, 160, 175, 180]  # Mean height in cm\ngrade = [\"kindergarten\", \"elementary school\", \"middle school\", \"high school\", \"college\"]\nstd_deviation = 5  # Standard deviation in cm\nnum_samples = 10   # Number of samples\n\n# Generate 10 samples with a normal distribution\nheights = []\ngrades = []\nfor i in range(5):\n  heights.extend(np.random.normal(mean_height[i], std_deviation, num_samples))\n  grades.extend([grade[i]]*10)\n\ndata = {'Grade': grades, 'Height': heights}\ndf = pd.DataFrame(data)\n\nsampled_index = random.sample(range(len(df)), 5)\nsampled = df.iloc[sampled_index]\nprint(sampled)\n```", "```py\nfrom sklearn.preprocessing import OrdinalEncoder\n\nencoder = OrdinalEncoder(categories=[grade])\ndf['Category'] = encoder.fit_transform(df[['Grade']])\nprint(encoder.categories_)\nprint(df.iloc[sampled_index])\n```", "```py\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(df[[\"Category\"]], df[[\"Height\"]])\n\ncoefficients = model.coef_\n\nprint(\"Coefficients:\", coefficients)\n\nheight_diff = [mean_height[i] - mean_height[i-1] for i in range(1, len(mean_height),1)]\nprint(\"Average Height Difference:\", sum(height_diff)/len(height_diff))\n```", "```py\nfrom sklearn.preprocessing import OneHotEncoder\n\ndata = {'Score': scores, 'Subject': subjects}\ndf_math = pd.DataFrame(data)\n\ny = df_math[\"Score\"] # Target \nx = df_math.drop('Score', axis=1)\n\n# Define encoder\nencoder = OneHotEncoder()\nx_ohe = encoder.fit_transform(x)\nprint(\"Type:\",type(x_ohe))\n# Convert x_ohe to array so that it is more compatible\nx_ohe = x_ohe.toarray()\nprint(\"Dimension:\", x_ohe.shape)\n\n# Convet back to pandas dataframe\nx_ohe = pd.DataFrame(x_ohe, columns=encoder.get_feature_names_out())\ndf_math_ohe = pd.concat([y, x_ohe], axis=1)\nsampled_ohe_idx = random.sample(range(len(df_math_ohe)), 5)\nprint(df_math_ohe.iloc[sampled_ohe_idx])\n```", "```py\nmodel = LinearRegression()\nmodel.fit(x_ohe, y)\n\ncoefficients = model.coef_\nintercept = model.intercept_\n\nprint(\"Coefficients:\", coefficients)\nprint(encoder.get_feature_names_out())\nprint(\"Intercept:\",intercept)\n```", "```py\nencoder_with_drop = OneHotEncoder(drop=\"first\")\nx_ohe_drop = encoder_with_drop.fit_transform(x)\n\n# if you don't sparse_output = False, you need to run the following to convert type\nx_ohe_drop = x_ohe_drop.toarray()\n\nx_ohe_drop = pd.DataFrame(x_ohe_drop, columns=encoder_with_drop.get_feature_names_out())\n\nmodel = LinearRegression()\nmodel.fit(x_ohe_drop, y)\n\ncoefficients = model.coef_\nintercept = model.intercept_\n\nprint(\"Coefficients:\", coefficients)\nprint(encoder_with_drop.get_feature_names_out())\nprint(\"Intercept:\",intercept)\n```", "```py\n# Define 1000 categories (for simplicity, these are just numbered)\ncategories = [f\"Category_{i}\" for i in range(1, 200)]\n\nmanufacturers = [\"Manufacturer_A\", \"Manufacturer_B\", \"Manufacturer_C\"]\nsatisfied = [\"Satisfied\", \"Not Satisfied\"]\nn_rows = 1000  \n\n# Generate random data\ndata = {\n    \"Product_ID\": [f\"Product_{i}\" for i in range(n_rows)],\n    \"Category\": [random.choice(categories) for _ in range(n_rows)],\n    \"Price\": [round(random.uniform(10, 500), 2) for _ in range(n_rows)],\n    \"Quality\": [random.choice(satisfied) for _ in range(n_rows)],\n    \"Manufacturer\": [random.choice(manufacturers) for _ in range(n_rows)],\n}\n\ndf = pd.DataFrame(data)\n\nprint(\"Dimension before one-hot encoding:\",df.shape)\nprint(df.head())\n```", "```py\n# Now do one-hot encoding\nencoder = OneHotEncoder(sparse_output=False)\n\n# Reshape the 'Category' column to a 2D array as required by the OneHotEncoder\ncategory_array = df['Category'].values.reshape(-1, 1)\n\none_hot_encoded_array = encoder.fit_transform(category_array)\none_hot_encoded_df = pd.DataFrame(one_hot_encoded_array, columns=encoder.get_feature_names_out(['Category']))\nencoded_df = pd.concat([df.drop('Category', axis=1), one_hot_encoded_df], axis=1)\n\nprint(\"Dimension after one-hot encoding:\", encoded_df.shape)\n```", "```py\nfrom sklearn.preprocessing import TargetEncoder\nx = df.drop([\"Price\"], axis=1)\nx_need_encode = df[\"Category\"].to_frame()\ny = df[\"Price\"]\n\n# Define encoder\nencoder = TargetEncoder()\nx_encoded = encoder.fit_transform(x_need_encode, y)\n\n# Encoder with 0 smoothing\nencoder_no_smooth = TargetEncoder(smooth=0)\nx_encoded_no_smooth = encoder_no_smooth.fit_transform(x_need_encode, y)\n\nx_encoded = pd.DataFrame(x_encoded, columns=[\"encoded_category\"])\ndata_target = pd.concat([x, x_encoded], axis=1)\n\nprint(\"Dimension before encoding:\", df.shape)\nprint(\"Dimension after encoding:\", data_target.shape)\nprint(\"---------\")\nprint(\"Encoding\")\nprint(encoder.encodings_[0][:5])\nprint(encoder.categories_[0][:5])\nprint(\" \")\nprint(\"Encoding with no smooth\")\nprint(encoder_no_smooth.encodings_[0][:5])\nprint(encoder_no_smooth.categories_[0][:5])\nprint(\"---------\")\nprint(\"Mean by Category\")\nprint(df.groupby(\"Category\").mean(\"Price\").head())\nprint(\"---------\")\nprint(\"dataset:\")\nprint(data_target.head())\n```", "```py\nx = df.drop([\"Quality\"], axis=1)\nx_need_encode = df[\"Category\"].to_frame()\ny = df[\"Quality\"]\n\n# Define encoder\nencoder = TargetEncoder()\nx_encoded = encoder.fit_transform(x_need_encode, y)\n\nx_encoded = pd.DataFrame(x_encoded, columns=[\"encoded_category\"])\ndata_target = pd.concat([x, x_encoded], axis=1)\n\nprint(\"Dimension:\", data_target.shape)\nprint(\"---------\")\nprint(\"Encoding\")\nprint(encoder.encodings_[0][:5])\nprint(encoder.categories_[0][:5])\nprint(\"---------\")\nprint(encoder.classes_)\nprint(\"---------\")\nprint(\"dataset:\")\nprint(data_target.head())\n```", "```py\nx = df.drop([\"Manufacturer\"], axis=1)\nx_need_encode = df[\"Category\"].to_frame()\ny = df[\"Manufacturer\"]\n\n# Define encoder\nencoder = TargetEncoder()\nx_encoded = encoder.fit_transform(x_need_encode, y)\n\nx_encoded = pd.DataFrame(x_encoded, columns=encoder.classes_)\ndata_target = pd.concat([x, x_encoded], axis=1)\n\nprint(\"Dimension:\", data_target.shape)\nprint(\"---------\")\nprint(\"Encoding\")\nprint(encoder.encodings_[0][:5])\nprint(encoder.categories_[0][:5])\nprint(\"---------\")\nprint(\"dataset:\")\nprint(data_target.head())\n```", "```py\nfrom sklearn.compose import make_column_transformer\nohe_cols = [\"Manufacturer\"]\nte_cols = [\"Category\", \"Quality\"]\n\nencoding = make_column_transformer(\n    (OneHotEncoder(), ohe_cols),\n    (TargetEncoder(), te_cols)\n)\n\nx = df.drop([\"Price\"], axis=1)\ny = df[\"Price\"]\n\n# Fit the transformer\nx_encoded = encoding.fit_transform(x, y)\nx_encoded = pd.DataFrame(x_encoded, columns=encoding.get_feature_names_out())\n\nx_rest = x.drop(ohe_cols+te_cols, axis=1)\nprint(pd.concat([x_rest, x_encoded],axis=1).head()) \n```"]