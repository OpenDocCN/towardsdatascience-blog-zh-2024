["```py\nimport torch\nimport torch.nn as nn\nfrom torch.utils.data import *\nimport torchvision\nfrom torchvision import transforms\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom ml_utils import *\nfrom hindi.datasets import Digits\n\nset_seed( 5842 )\n\nbatch_size = 32\n\nimg_transformer = transforms.Compose([\n                        transforms.Grayscale(),\n                        transforms.ToTensor()\n                    ])\n\ntrain_dataset = Digits( \"./data\", train=True, transform=img_transformer, download=True )\n\ntest_dataset = Digits( \"./data\", train=False, transform=img_transformer, download=True )\n\ntrain_loader = DataLoader( train_dataset, batch_size=batch_size, shuffle=True )\n\ntest_loader = DataLoader( test_dataset, batch_size=batch_size )\n```", "```py\ndevice = torch.device( 'cuda' if torch.cuda.is_available() else 'cpu' )\nloss_func = nn.CrossEntropyLoss()\ninput_channels = 1\nclasses = 10\nfilters = 16\nkernel_size = 3\npadding = kernel_size//2\npool_size = 2\noriginal_pixels_per_channel = 32*32\n\nthree_convs_model = nn.Sequential(\n                                    nn.Conv2d( input_channels, filters, kernel_size, padding=padding ), # 1x32x32 => 16x32x32\n                                    nn.ReLU(inplace=True), #16x32x32 => 16x32x32\n                                    nn.Conv2d(filters, filters, kernel_size, padding=padding ), # 16x32x32 => 16x32x32\n                                    nn.ReLU(inplace=True), #16x32x32 => 16x32x32\n                                    nn.Conv2d(filters, filters, kernel_size, padding=padding ), # 16x32x32 => 16x32x32\n                                    nn.ReLU(inplace=True), #16x32x32 => 16x32x32\n                                    nn.MaxPool2d(pool_size), # 16x32x32 => 16x16x16\n\n                                    nn.Flatten(), # 16x16x16 => 4096\n                                    nn.Linear( 4096, classes) # 1024 => 10\n                                )\n```", "```py\nthree_convs_wth_bn_model = nn.Sequential(\n                                            nn.Conv2d( input_channels, filters, kernel_size, padding=padding ), # 1x32x32 => 16x32x32\n                                            nn.BatchNorm2d( filters ), #16x32x32 => 16x32x32\n                                            nn.ReLU(inplace=True), #16x32x32 => 16x32x32\n                                            nn.Conv2d(filters, filters, kernel_size, padding=padding ), # 16x32x32 => 16x32x32\n                                            nn.BatchNorm2d( filters ), #16x32x32 => 16x32x32\n                                            nn.ReLU(inplace=True), #16x32x32 => 16x32x32\n                                            nn.Conv2d(filters, filters, kernel_size, padding=padding ), # 16x32x32 => 16x32x32\n                                            nn.BatchNorm2d( filters ), #16x32x32 => 16x32x32\n                                            nn.ReLU(inplace=True), #16x32x32 => 16x32x32\n                                            nn.MaxPool2d(pool_size), # 16x32x32 => 16x16x16\n\n                                            nn.Flatten(), # 16x16x16 => 4096\n                                            nn.Linear( 4096, classes) # 4096 => 10\n                                       )\n```", "```py\nthree_convs_model_results_df = train_model( \n                                            three_convs_model,\n                                            loss_func, \n                                            train_loader, \n                                            test_loader=test_loader, \n                                            score_funcs={'accuracy': accuracy_score}, \n                                            device=device, \n                                            epochs=30,\n                                            capture_conv_sample_weights=True, \n                                            conv_index=4, \n                                            wx_flt_index=3, \n                                            wx_ch_index=4, \n                                            wx_ro_index=1, \n                                            wx_index=0,\n                                            wy_flt_index=3,\n                                            wy_ch_index=8, \n                                            wy_ro_index=1, \n                                            wy_index=0\n                                         )\n\nthree_convs_wth_bn_model_results_df = train_model( \n                                                    three_convs_wth_bn_model,\n                                                    loss_func, \n                                                    train_loader, \n                                                    test_loader=test_loader, \n                                                    score_funcs={'accuracy': accuracy_score}, \n                                                    device=device, \n                                                    epochs=30,\n                                                    capture_conv_sample_weights=True, \n                                                    conv_index=6, \n                                                    wx_flt_index=3, \n                                                    wx_ch_index=4, \n                                                    wx_ro_index=1, \n                                                    wx_index=0,\n                                                    wy_flt_index=3,\n                                                    wy_ch_index=8, \n                                                    wy_ro_index=1, \n                                                    wy_index=0\n                                                 )\n```", "```py\nsns.lineplot( x='epoch', y='test accuracy', data=three_convs_model_results_df, label=\"Three Convs Without BN2D Model\" )\nsns.lineplot( x='epoch', y='test accuracy', data=three_convs_wth_bn_model_results_df, label=\"Three Convs Wth BN2D Model\" )\n```", "```py\nsns.lineplot( x='epoch', y='train loss', data=three_convs_model_results_df, label=\"Three Convs Without BN2D Model\" )\nsns.lineplot( x='epoch', y='train loss', data=three_convs_wth_bn_model_results_df, label=\"Three Convs Wth BN2D Model\" )\n```", "```py\nfig1 = draw_loss_descent( three_convs_model_results_df, title='Three Convs Model Without BN2D Training Loss' )\nfig2 = draw_loss_descent( three_convs_wth_bn_model_results_df, title='Three Convs With BN2D Model Training Loss' )\n```"]