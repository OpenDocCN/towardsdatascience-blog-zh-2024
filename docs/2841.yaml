- en: Dynamic, Lazy Dependency Injection in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/dynamic-lazy-dependency-injection-in-python-a96e6980becd?source=collection_archive---------10-----------------------#2024-11-22](https://towardsdatascience.com/dynamic-lazy-dependency-injection-in-python-a96e6980becd?source=collection_archive---------10-----------------------#2024-11-22)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Automatic Python dependency injection to make your code more testable, decoupled,
    uncomplicated and readable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mikehuls.medium.com/?source=post_page---byline--a96e6980becd--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page---byline--a96e6980becd--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a96e6980becd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a96e6980becd--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page---byline--a96e6980becd--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a96e6980becd--------------------------------)
    ·6 min read·Nov 22, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/48dbe91b9e0d4d3e5489fac91cf2f169.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Rapha Wilde](https://unsplash.com/@veloradio?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)
    / [Unsplash](https://unsplash.com/?utm_source=ghost&utm_medium=referral&utm_campaign=api-credit)
  prefs: []
  type: TYPE_NORMAL
- en: Dependency Injection (DI) solves many problems by improving testability, decoupling,
    maintainability and readability. However, managing dependencies can sometimes
    introduce new problems. When do we initialize them? How do we initialize? Can
    they be reused effectively?
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to take DI to the next level I’ve created [FastInject](https://pypi.org/project/fastinject):
    a Python package that simplifies dependency management with just a few decorators.
    FastInject automatically handles dependency instantiation and injection so that
    you can focus on your project. Features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**improved performance**: Only create dependencies when they are actually needed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**simpler initialization**: Dependencies are resolved dynamically'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**avoid circular imports**: Dependency resolution is deferred until runtime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**improved flexibility**: Dependencies can be influenced by runtime information
    or configuration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s code!
  prefs: []
  type: TYPE_NORMAL
- en: Contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DI refresher: A comparison of code that uses DI versus code that doesn’t'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dependency management with FastInject…
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
