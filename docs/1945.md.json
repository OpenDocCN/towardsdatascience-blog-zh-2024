["```py\n# Step 1: Create a mlflow.pyfunc model\nclass ToyModel(mlflow.pyfunc.PythonModel):\n    \"\"\"\n    ToyModel is a simple example implementation of an MLflow Python model.\n    \"\"\"\n\n    def predict(self, context, model_input):\n        \"\"\"\n        A basic predict function that takes a model_input list and returns a new list \n        where each element is increased by one.\n\n        Parameters:\n        - context (Any): An optional context parameter provided by MLflow.\n        - model_input (list of int or float): A list of numerical values that the model will use for prediction.\n\n        Returns:\n        - list of int or float: A list with each element in model_input is increased by one.\n        \"\"\"\n        return [x + 1 for x in model_input]\n```", "```py\n# Step 2: log this model as an mlflow run\nwith mlflow.start_run():\n    mlflow.pyfunc.log_model(\n        artifact_path = \"model\", \n        python_model=ToyModel()\n    )\n    run_id = mlflow.active_run().info.run_id\n```", "```py\n# Step 3: load the logged model to perform inference\nmodel = mlflow.pyfunc.load_model(f\"runs:/{run_id}/model\")\n# dummy new data\nx_new = [1,2,3]\n# model inference for the new data\nprint(model.predict(x_new))\n```", "```py\n[2, 3, 4]\n```", "```py\nimport json\nimport xgboost as xgb\nimport mlflow.pyfunc\nfrom typing import Any, Dict, Union\nimport pandas as pd\n\nclass XGB_PIPELINE(mlflow.pyfunc.PythonModel):\n    \"\"\"\n    XGBWithPreprocess is an example implementation of an MLflow Python model with XGBoost.\n    \"\"\"\n\n    def __init__(self, params: Dict[str, Union[str, int, float]]):\n        \"\"\"\n        Initialize the model with given parameters.\n\n        Parameters:\n        - params (Dict[str, Union[str, int, float]]): Parameters for the XGBoost model.\n        \"\"\"\n        self.params = params\n        self.xgb_model = None\n        self.config = None      \n\n    def preprocess_input(self, model_input: pd.DataFrame) -> pd.DataFrame:\n        \"\"\"\n        Preprocess the input data.\n\n        Parameters:\n        - model_input (pd.DataFrame): The input data to preprocess.\n\n        Returns:\n        - pd.DataFrame: The preprocessed input data.\n        \"\"\"\n        processed_input = model_input.copy()\n        # put any desired preprocessing logic here\n        processed_input.drop(processed_input.columns[0], axis=1, inplace=True)\n\n        return processed_input\n\n    def fit(self, X_train: pd.DataFrame, y_train: pd.Series):\n        \"\"\"\n        Train the XGBoost model.\n\n        Parameters:\n        - X_train (pd.DataFrame): The training input data.\n        - y_train (pd.Series): The target values.\n        \"\"\"\n        processed_model_input = self.preprocess_input(X_train.copy())\n        dtrain = xgb.DMatrix(processed_model_input, label=y_train)\n        self.xgb_model = xgb.train(self.params, dtrain)\n\n    def predict(self, context: Any, model_input: pd.DataFrame) -> Any:\n        \"\"\"\n        Predict using the trained XGBoost model.\n\n        Parameters:\n        - context (Any): An optional context parameter provided by MLflow.\n        - model_input (pd.DataFrame): The input data for making predictions.\n\n        Returns:\n        - Any: The prediction results.\n        \"\"\"\n        processed_model_input = self.preprocess_input(model_input.copy())\n        dmatrix = xgb.DMatrix(processed_model_input)\n        return self.xgb_model.predict(dmatrix)\n```", "```py\nfrom sklearn.datasets import make_regression\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\n\n# Generate synthetic datasets for demo\nX, y = make_regression(n_samples=1000, n_features=10, noise=0.1, random_state=42)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# train and log the model\nwith mlflow.start_run(run_name = 'xgb_demo') as run:\n\n    # Create an instance of XGB_PIPELINE\n    params = {\n        'objective': 'reg:squarederror',  \n        'max_depth': 3,  \n        'learning_rate': 0.1,\n    }\n    model = XGB_PIPELINE(params)\n\n    # Fit the model\n    model.fit(X_train=pd.DataFrame(X_train), y_train=y_train)\n\n    # Log the model\n    model_info = mlflow.pyfunc.log_model(\n        artifact_path = 'model',\n        python_model = model,\n    )\n\n    run_id = mlflow.active_run().info.run_id\n```", "```py\nloaded_model = mlflow.pyfunc.load_model(model_uri=model_info.model_uri)\nloaded_model.predict(pd.DataFrame(X_test))\n```", "```py\narray([ 4.11692047e+00,  7.30551958e+00, -2.36042137e+01, -1.31888123e+02,\n       ...\n```", "```py\nprint(loaded_model.params)\n```", "```py\nAttributeError: 'PyFuncModel' object has no attribute 'params'\n```", "```py\nunwrapped_model = loaded_model.unwrap_python_model()\nprint(unwrapped_model.params)\n```", "```py\n{'objective': 'reg:squarederror', 'max_depth': 3, 'learning_rate': 0.1}\n```", "```py\nloaded_model = mlflow.pyfunc.load_model(model_uri)\n# the context parameter is not needed when calling `predict`\nloaded_model.predict(model_input)\n```", "```py\nunwrapped_model = loaded_model.unwrap_python_model()\n# need to provide context mannually\nunwrapped_model.predict(context=None, model_input)\n```", "```py\n# get run_id of a loaded model\nprint(loaded_model.metadata.run_id)\n```", "```py\n38a617d0f30645e8ae95eea4642a03c2\n```"]