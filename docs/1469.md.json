["```py\nimport json\nimport random\nimport numpy as np\nimport datetime\n\n# Remove existing 'retail_transactions.jsonl' file, if any\n! rm -f /p/a/t/h retail_transactions.jsonl\n\n# Set the no of transactions\nno_of_iteration = 500000\n\n# Open a file in write mode\nwith open('retail_transactions.jsonl', 'w') as f:\n  for num in range(no_of_iteration):\n    if (random.randint(1, 10000) != 5000):\n      # Create a valid transaction\n      new_txn = {\n        'orderID': num,\n        'customerID': random.randint(1, 100000),\n        'productID': np.random.randint(10000, size=random.randint(1, 5)).tolist(),\n        'paymentMthd': random.choice(['Credit card', 'Debit card', 'Digital wallet', 'Cash on delivery', 'Cryptocurrency']),\n        'totalAmt': round(random.random() * 5000, 2),\n        'invoiceTime': datetime.datetime.now().isoformat()\n      }\n    else:\n      # Create an invalid transaction\n      new_txn = {\n        'orderID': \"\",\n        'customerID': \"\",\n        'productID': \"\",\n        'paymentMthd': \"\",\n        'totalAmt': \"\",\n        'invoiceTime': \"\"\n       }\n\n     # Write the transaciton as a JSON line to the file\n     f.write(json.dumps(new_txn) + \"\\n\")\n```", "```py\nimport json\n\ndef read_json_file(file_name):\n  # Read the JSONL file\n  with open(file_name) as f:\n    for line in f:\n      txn = json.loads(line)\n      # Yield valid transactions only\n      if (txn['orderID'] != \"\"):\n        yield(txn)\n\ntxn_generator = read_json_file('retail_transactions.jsonl')\n```", "```py\n{\n 'orderID': 10000,\n 'customerID': 48316,\n 'productID': [5620],\n 'paymentMthd': 'Cash on delivery',\n 'totalAmt': 9301.2,\n 'invoiceTime': '2024-06-10T23:30:29.608443',\n 'price': -1\n}\n```", "```py\nfrom datetime import datetime\nfrom pydantic import BaseModel, ValidationError\n\n# Define the data model for a transaction record\nclass TxnModel(BaseModel):\n  orderID: int\n  customerID: int\n  productID: list[int]\n  paymentMthd: str\n  totalAmt: float\n  invoiceTime: datetime\n\ntry:\n  # Validate the sample case against the schema\n  TxnModel.model_validate(sample_txn)\n  print(\"Validated successfully!\")\nexcept ValidationError as exc:\n  # Print error messages for any validation error\n  print(\"Validation Error:\")\n  print(exc.errors())\n\n# Output:\n# Validated successfully\n```", "```py\nfrom typing import Annotated\nfrom pydantic.functional_validators import AfterValidator\n\n# Customize the validation rule\ndef validate_payment_mthd(paymentMthd: str):\n  possible_values = ['Credit card', 'Debit card', 'Digital wallet', 'Cash on delivery', 'Cryptocurrency']\n  if paymentMthd not in possible_values:\n    raise ValueError(f\"Invalid paymentMthd, payment type must be one of {possible_values}\")\n  return storage\n\n# Define the data model for a transaction record\nclass TxnModel(BaseModel):\n  orderID: int = Field(strict=True)\n  customerID: int\n  productID: list[int]\n  paymentMthd: Annotated[str, AfterValidator(validate_payment_mthd)]\n  totalAmt: Annotated[float, Field(strict=True, gt=0)]\n  invoiceTime: datetime\n\n# Manually define a non-existent payment method\nsample_txn['paymentMthd'] = 'Bitcoin'\n\ntry:\n  # Validate the sample case against the schema\n  TxnModel.model_validate(sample_txn)\n  print(\"Validated successfully!\")\nexcept ValidationError as exc:\n  # Print error messages for any validation error\n  print(\"Validation Error:\")\n  print(exc.errors()[0]['ctx'])\n\n# Output\n# Validation Error:\n# {'error': ValueError(\"Invalid paymentMthd, payment type must be one of ['Credit card', 'Debit card', 'Digital wallet', 'Cash on delivery', 'Cryptocurrency']\")}\n```", "```py\nimport time\n\n# Measure the excution time of a given function\ndef time_decorator(func):\n  def wrapper(*args, **kwargs):\n    begin_time = time.time()\n    output = func(*args, **kwargs)\n    end_time = time.time()\n    print(f\"Execution time of function {func.__name__}: {round(end_time - begin_time, 2)} seconds.\")\n    return output\n  return wrapper\n\n# Categorize the total amount of each transaction\n@time_decorator\ndef group_txn_price(data):\n  for txn in data:\n    price = txn['totalAmt']\n    if 0 <= price <= 1500:\n      txn['totalAmtCat'] = 'Low'\n    elif 1500 < price <= 3500:\n      txn['totalAmtCat'] = 'Moderate'\n    elif 3500 < price:\n      txn['totalAmtCat'] = 'High'\n    return data\n\ntxn_list = group_txn_price(txn_list)\n\n# Output\n# Execution time of function group_txn_price: 0.26 seconds.\n```", "```py\nupdated_txn_list = list(map(lambda x: {\n                      'paymentMthd': f\"{x['paymentMthd']}_2024\",\n                      \"totalAmt\": x[\"totalAmt\"]\n                   }, txn_list))\n\nprint(updated_txn_list)\n\n# Output\n# [{'paymentMthd': 'Cryptocurrency_2024', 'totalAmt': 3339.85},\n# {'paymentMthd': 'Cash on delivery_2024', 'totalAmt': 872.52},\n# ...]\n```", "```py\nupdated_txn_list = list(map(lambda x: x, filter(lambda y: y[\"paymentMthd\"] == \"Cryptocurrency\", txn_list)))\n\nprint(updated_txn_list)\n\n# Output\n# [{'paymentMthd': 'Cryptocurrency', 'totalAmt': 3339.85},\n# {'paymentMthd': 'Cryptocurrency', 'totalAmt': 576.15},\n# ...]\n```", "```py\nfrom functools import reduce\n\ntotal_amt_crypto = reduce(lambda acc, x: acc + x[\"totalAmt\"], updated_txn_list, 0)\n\nprint(total_amt_crypto)\n\n# Output\n# 250353984.67000002\n```", "```py\n# Categorize the total amount of each transaction\ndef add_features(sample_cases):\n  for txn in sample_cases:\n    price = txn[‘totalAmt’]\n  if 0 <= price <= 1500:\n    txn[‘totalAmtCat’] = ‘Low’\n  elif 1500 < price <= 3500:\n    txn[‘totalAmtCat’] = ‘Moderate’\n  elif 3500 < price:\n    txn[‘totalAmtCat’] = ‘High’\n\nreturn sample_cases\n```", "```py\nfrom feature_engineering import add_features\n\ndef test_add_features():\n  sample_cases = [{\n      'orderID': 1,\n      'customerID': 36536,\n      'productID': [2209, 2262, 4912, 3162, 5734],\n      'paymentMthd': 'Cryptocurrency',\n      'totalAmt': 576.15,\n      'invoiceTime': '2024–06–10T23:53:25.329928'\n    }]\n\n  # Call the function with the sample cases\n  sample_cases = add_features(sample_cases)\n\n  # Check the assertations\n  for txn in sample_cases: \n    assert 'totalAmtCat' in list(txn.keys())\n    assert len(txn) == 7\n    assert len(txn['totalAmtCat']) != 0\n```", "```py\nimport pytest\nimport json\nfrom feature_engineering import load_data, clean_data, add_features\n\n# Set up a temporary JSONL file\n@pytest.fixture\ndef jsonl_file(tmp_path):\n  sample_cases = [{'orderID': 10000,\n    'customerID': 48316,\n    'productID': [5620],\n    'paymentMthd': 'Cash on delivery',\n    'totalAmt': 9301.2,\n    'invoiceTime': '2024-06-10T23:30:29.608443',\n    'price': -1\n  }]\n\n  file_path = tmp_path + \"/test_transactions.jsonl\"\n\n  with open(file_path, 'w') as f:\n    for txn in sample_cases:\n        f.write(json.dumps(txn) + \"\\n\")\n\n  return file_path\n\n# Test function to validate the `load_data` function\ndef test_load_data(jsonl_file):\n  data = load_data(jsonl_file)\n  # assert statements here\n\n# Test function to validate the `clean_data` function\ndef test_clean_data(jsonl_file):\n  data = load_data(jsonl_file)\n  data = clean_data(data)\n  # assert statements here\n\n# Test function to validate the `add_features` function\ndef test_add_features(jsonl_file):\n  data = load_data(jsonl_file)\n  data = clean_data(data)\n  data = add_features(data)\n  # assert statements here\n```"]