- en: Manage Dev and Prod Using Terraform and Local yaml Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/manage-dev-and-prod-using-terraform-and-local-yaml-files-a0db7afb10a2?source=collection_archive---------4-----------------------#2024-06-24](https://towardsdatascience.com/manage-dev-and-prod-using-terraform-and-local-yaml-files-a0db7afb10a2?source=collection_archive---------4-----------------------#2024-06-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Make your terraform spin in multiple projects using yaml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@danlowgw?source=post_page---byline--a0db7afb10a2--------------------------------)[![Daniel
    Low](../Images/60b8deeb913548bbba0ed22239196d93.png)](https://medium.com/@danlowgw?source=post_page---byline--a0db7afb10a2--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a0db7afb10a2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a0db7afb10a2--------------------------------)
    [Daniel Low](https://medium.com/@danlowgw?source=post_page---byline--a0db7afb10a2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a0db7afb10a2--------------------------------)
    ·3 min read·Jun 24, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: In a corporate production setting, typically cloud projects are split into development
    (dev) and production (prod) to segregate the two environments. As an engineer,
    it is important to be able to do the necessary testing and development in (dev)
    and move them into (prod) once approved, in a quick and efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d804850b95a696cc600926446ef80166.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Alvaro Reyes](https://unsplash.com/@alvarordesign?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: As expected, there are several solutions to do this, terragrunt is an immediate
    one that comes to mind. However, not everyone is familiar with terraform, much
    less terragrunt. How can I simplify this template to enable others in a team simply
    using terraform and yaml files? Here is my take on a simplified implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Repository Structure**'
  prefs: []
  type: TYPE_NORMAL
- en: As a reference for this article, here was how i structured my repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Create your terraform locals.tf**'
  prefs: []
  type: TYPE_NORMAL
- en: The locals.tf file is the default way terraform interacts with locally stored
    files. Your locals.tf should point to the terraform workspace that you would like
    to work in, this in turn will call the correct config file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Using a local files that can be committed via git is much preferred over maintaining
    several .tfvars individually across several developers. Please take care not to
    commit sensitive information in the yaml file.
  prefs: []
  type: TYPE_NORMAL
- en: Also terraform does allow for other types of config files other than yaml, including
    json and text [see [link](https://developer.hashicorp.com/terraform/language/functions/yamldecode)].
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Create configuration files for both dev and prod**'
  prefs: []
  type: TYPE_NORMAL
- en: In the environment directory, create your config files. Be sure in your naming
    that the name is also the same one as your terraform workspace as we will be using
    the variable `${terraform.workspace}` to differentiate between the two files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**3\. Modules**'
  prefs: []
  type: TYPE_NORMAL
- en: I use module blocks to separate resources used. There is no strict rule as to
    what goes in a module, but I typically group resources that are spun up for the
    same service together (e.g. An airflow job that writes to a SQL table, or a VM
    and its associated load balancers).
  prefs: []
  type: TYPE_NORMAL
- en: The main thing here is that your modules point to a local.config in this case
    the yaml file that we created. The locals.tf should then take care of the rest.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Sources**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Terraform workspaces: [link](https://developer.hashicorp.com/terraform/language/state/workspaces)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Terraform locals: [link](https://developer.hashicorp.com/terraform/language/values/locals)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
