["```py\nfrom fastapi import FastAPI, Query, HTTPException\n\nVERIFICATION_TOKEN = \"abcdefg12345\"\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef verify_whatsapp(\n    hub_mode: str = Query(\"subscribe\", description=\"The mode of the webhook\", alias=\"hub.mode\"),\n    hub_challenge: int = Query(..., description=\"The challenge to verify the webhook\", alias=\"hub.challenge\"),\n    hub_verify_token: str = Query(..., description=\"The verification token\", alias=\"hub.verify_token\"),\n):\n    if hub_mode == \"subscribe\" and hub_verify_token == VERIFICATION_TOKEN:\n        return hub_challenge\n    raise HTTPException(status_code=403, detail=\"Invalid verification token\")\n\n@app.get(\"/health\")\ndef health():\n    return {\"status\": \"healthy\"}\n\n@app.get(\"/readiness\")\ndef readiness():\n    return {\"status\": \"ready\"}\n```", "```py\nuvicorn main:app --reload\n```", "```py\n> ngrok config add-authtoken $YOUR-AUTHENTICATION_TOKEN\n> ngrok http http://localhost:8000\n\nForwarding                    https://<random-string>.ngrok.io -> http://localhost:8000\n```", "```py\nForwarding                    https://<random-string>.ngrok.io -> http://localhost:8000\n```", "```py\n# app/schema.py\nfrom typing import List, Optional  \nfrom pydantic import BaseModel, Field   \n\nclass Profile(BaseModel):  \n    name: str  \n\nclass Contact(BaseModel):  \n    profile: Profile  \n    wa_id: str  \n\nclass Text(BaseModel):  \n    body: str\n\nclass Image(BaseModel):  \n    mime_type: str  \n    sha256: str  \n    id: str  \n\nclass Audio(BaseModel):  \n    mime_type: str  \n    sha256: str  \n    id: str  \n    voice: bool  \n\nclass Message(BaseModel):  \n    from_: str = Field(..., alias=\"from\")  \n    id: str  \n    timestamp: str  \n    text: Text | None = None  \n    image: Image | None = None  \n    audio: Audio | None = None  \n    type: str\n\nclass Metadata(BaseModel):  \n    display_phone_number: str  \n    phone_number_id: str\n\nclass Value(BaseModel):  \n    messaging_product: str  \n    metadata: Metadata  \n    contacts: List[Contact] | None = None  \n    messages: List[Message] | None = None  \n\nclass Change(BaseModel):  \n    value: Value  \n    field: str  \n    statuses: List[dict] | None = None  \n\nclass Entry(BaseModel):  \n    id: str  \n    changes: List[Change]  \n\nclass Payload(BaseModel):  \n    object: str  \n    entry: List[Entry]\n\nclass User(BaseModel):  \n    id: int  \n    first_name: str  \n    last_name: str  \n    phone: str\n    role: str\n\nclass UserMessage(BaseModel):  \n    user: User  \n    message: str | None = None  \n    image: Image | None = None  \n    audio: Audio | None = None\n```", "```py\n# app/main.py\n\nfrom app.domain import message_service\n\ndef parse_message(payload: Payload) -> Message | None:  \n    if not payload.entry[0].changes[0].value.messages:  \n        return None  \n    return payload.entry[0].changes[0].value.messages[0]  \n\ndef get_current_user(message: Annotated[Message, Depends(parse_message)]) -> User | None:  \n    if not message:  \n        return None  \n    return message_service.authenticate_user_by_phone_number(message.from_)  \n\ndef parse_audio_file(message: Annotated[Message, Depends(parse_message)]) -> Audio | None:  \n    if message and message.type == \"audio\":  \n        return message.audio  \n    return None  \n\ndef parse_image_file(message: Annotated[Message, Depends(parse_message)]) -> Image | None:  \n    if message and message.type == \"image\":  \n        return message.image  \n    return None  \n\ndef message_extractor(  \n        message: Annotated[Message, Depends(parse_message)],  \n        audio: Annotated[Audio, Depends(parse_audio_file)],  \n):  \n    if audio:  \n        return message_service.transcribe_audio(audio)  \n    if message and message.text:  \n        return message.text.body  \n    return None\n```", "```py\n# app/main.py\nimport threading  \nfrom typing_extensions import Annotated  \nfrom fastapi import APIRouter, Query, HTTPException, Depends  \nfrom app.domain import message_service  \nfrom app.schema import Payload, Message, Audio, Image, User  \n\n# ... rest of the code ...\n\n@app.post(\"/\", status_code=200)  \ndef receive_whatsapp(  \n        user: Annotated[User, Depends(get_current_user)],  \n        user_message: Annotated[str, Depends(message_extractor)],  \n        image: Annotated[Image, Depends(parse_image_file)],  \n):  \n    if not user and not user_message and not image:  \n        return {\"status\": \"ok\"}  \n    if not user:  \n        raise HTTPException(status_code=401, detail=\"Unauthorized\")  \n    if image:  \n        return print(\"Image received\")  \n    if user_message:  \n        thread = threading.Thread(\n            target=message_service.respond_and_send_message, \n            args=(user_message, user)\n        )  \n        thread.daemon = True  \n        thread.start()  \n    return {\"status\": \"ok\"}\n```", "```py\nimport os  \nimport json  \nimport requests  \nfrom typing import BinaryIO\n\nWHATSAPP_API_KEY = \"YOUR_ACCESS_TOKEN\"\nllm = OpenAI(api_key=\"YOUR_OPENAI_API_KEY\")\n```", "```py\ndef download_file_from_facebook(file_id: str, file_type: str, mime_type: str) -> str | None:  \n    # First GET request to retrieve the download URL  \n    url = f\"https://graph.facebook.com/v19.0/{file_id}\"  \n    headers = {\"Authorization\": f\"Bearer {WHATSAPP_API_KEY}\"}  \n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:  \n            download_url = response.json().get('url')  \n            # Second GET request to download the file  \n            response = requests.get(download_url, headers=headers)  \n            if response.status_code == 200:\n                # Extract file extension from mime_type    \n                file_extension = mime_type.split('/')[-1].split(';')[0]\n                # Create file_path with extension\n                file_path = f\"{file_id}.{file_extension}\"  \n                with open(file_path, 'wb') as file:  \n                    file.write(response.content)  \n                if file_type == \"image\" or file_type == \"audio\":  \n                    return file_path  \n            raise ValueError(f\"Failed to download file. Status code: {response.status_code}\")  \n        raise ValueError(f\"Failed to retrieve download URL. Status code: {response.status_code}\")\n```", "```py\ndef transcribe_audio_file(audio_file: BinaryIO) -> str:  \n    if not audio_file:  \n        return \"No audio file provided\"  \n    try:  \n        transcription = llm.audio.transcriptions.create(  \n            file=audio_file,  \n            model=\"whisper-1\",  \n            response_format=\"text\"  \n        )  \n        return transcription  \n    except Exception as e:  \n        raise ValueError(\"Error transcribing audio\") from e\n```", "```py\ndef transcribe_audio(audio: Audio) -> str:  \n    file_path = download_file_from_facebook(audio.id, \"audio\", audio.mime_type)  \n    with open(file_path, 'rb') as audio_binary:  \n        transcription = transcribe_audio_file(audio_binary)  \n    try:  \n        os.remove(file_path)  \n    except Exception as e:  \n        print(f\"Failed to delete file: {e}\")  \n    return transcription\n```", "```py\ndef authenticate_user_by_phone_number(phone_number: str) -> User | None:  \n    allowed_users = [  \n        {\"id\": 1, \"phone\": \"+1234567890\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"role\": \"default\"},  \n        {\"id\": 2, \"phone\": \"+0987654321\", \"first_name\": \"Jane\", \"last_name\": \"Smith\", \"role\": \"default\"}  \n    ]    \n    for user in allowed_users:  \n        if user[\"phone\"] == phone_number:  \n            return User(**user)  \n    return None\n```", "```py\ndef send_whatsapp_message(to, message, template=True):  \n    url = f\"https://graph.facebook.com/v18.0/289534840903017/messages\"  \n    headers = {  \n        \"Authorization\": f\"Bearer \" + WHATSAPP_API_KEY,  \n        \"Content-Type\": \"application/json\"  \n    }  \n    if not template:  \n        data = {  \n            \"messaging_product\": \"whatsapp\",  \n            \"preview_url\": False,  \n            \"recipient_type\": \"individual\",  \n            \"to\": to,  \n            \"type\": \"text\",  \n            \"text\": {  \n                \"body\": message  \n            }  \n        }  \n    else:  \n        data = {  \n            \"messaging_product\": \"whatsapp\",  \n            \"to\": to,  \n            \"type\": \"template\",  \n            \"template\": {  \n                \"name\": \"hello_world\",  \n                \"language\": {  \n                    \"code\": \"en_US\"  \n                }  \n            }  \n        }  \n\n    response = requests.post(url, headers=headers, data=json.dumps(data))  \n    return response.json()\n```", "```py\n# app/domain/message_service.py\nimport json  \nimport requests\nfrom app.domain.agents.routing_agent import RoutingAgent  \nfrom app.schema import User  \n\ndef respond_and_send_message(user_message: str, user: User):  \n    agent = RoutingAgent()  \n    response = agent.run(user_message, user.id)  \n    send_whatsapp_message(user.phone, response, template=False)\n```"]