- en: 'SQLite in Modern Web Production: Dreams Becoming Reality'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite在现代网页生产中的应用：梦想变为现实
- en: 原文：[https://towardsdatascience.com/sqlite-in-production-dreams-becoming-reality-94557bec095b?source=collection_archive---------0-----------------------#2024-12-12](https://towardsdatascience.com/sqlite-in-production-dreams-becoming-reality-94557bec095b?source=collection_archive---------0-----------------------#2024-12-12)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/sqlite-in-production-dreams-becoming-reality-94557bec095b?source=collection_archive---------0-----------------------#2024-12-12](https://towardsdatascience.com/sqlite-in-production-dreams-becoming-reality-94557bec095b?source=collection_archive---------0-----------------------#2024-12-12)
- en: On the virtues of radical simplicity
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于激进简化的美德
- en: '[](https://medium.com/@ed.izaguirre?source=post_page---byline--94557bec095b--------------------------------)[![Ed
    Izaguirre](../Images/c9eded1f06c47571baa662107428483f.png)](https://medium.com/@ed.izaguirre?source=post_page---byline--94557bec095b--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--94557bec095b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--94557bec095b--------------------------------)
    [Ed Izaguirre](https://medium.com/@ed.izaguirre?source=post_page---byline--94557bec095b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@ed.izaguirre?source=post_page---byline--94557bec095b--------------------------------)[![Ed
    Izaguirre](../Images/c9eded1f06c47571baa662107428483f.png)](https://medium.com/@ed.izaguirre?source=post_page---byline--94557bec095b--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--94557bec095b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--94557bec095b--------------------------------)
    [Ed Izaguirre](https://medium.com/@ed.izaguirre?source=post_page---byline--94557bec095b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--94557bec095b--------------------------------)
    ·10 min read·Dec 12, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--94557bec095b--------------------------------)
    ·10分钟阅读·2024年12月12日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/2bc16ed3ce0f1cb1d7050f5368656ff2.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2bc16ed3ce0f1cb1d7050f5368656ff2.png)'
- en: A simple landscape. From Unsplash.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的风景。图片来源：Unsplash。
- en: '*This**is the first in a two-part series on using SQLite for web applications
    and machine learning. In this article, I dive into why SQLite is rapidly becoming
    a production-ready database for modern web apps. In the second article, I will
    discuss how to perform retrieval-augmented-generation using SQLite.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*这是关于使用SQLite进行网页应用和机器学习的两篇系列文章中的第一篇。在本文中，我将深入探讨为什么SQLite正在迅速成为现代网页应用的生产就绪数据库。在第二篇文章中，我将讨论如何使用SQLite进行检索增强生成（RAG）。*'
- en: '*If you’d like a custom web application with generative AI integration, visit*
    [*losangelesaiapps.com*](https://losangelesaiapps.com/)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果您想要一个定制的网页应用程序，并且集成了生成型AI，请访问* [*losangelesaiapps.com*](https://losangelesaiapps.com/)'
- en: 'SQLite: Escape from the Cave of Complexity'
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite：逃离复杂性的洞穴
- en: '![](../Images/3621646166a7c86da96ea5b1aaa9caf6.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3621646166a7c86da96ea5b1aaa9caf6.png)'
- en: '[Plato’s Allegory of the Cave](https://en.wikipedia.org/wiki/Allegory_of_the_cave),
    by Jan Saenredam, 1604.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[柏拉图的洞穴寓言](https://en.wikipedia.org/wiki/Allegory_of_the_cave)，由Jan Saenredam创作，1604年。'
- en: “If you seek tranquility, do less.
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '“如果你追求宁静，就少做事。” '
- en: ''
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — *Marcus Aurelius*
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — *马库斯·奥勒留*
- en: Most databases running modern web software today operate on a **client-server
    architecture**. In this architecture, the server is the central system that manages
    data. It processes requests from and sends responses to clients. Clients here
    refer to users or applications that interact with the database through the server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当今运行现代网页软件的大多数数据库都采用**客户端-服务器架构**。在这种架构中，服务器是管理数据的中央系统。它处理来自客户端的请求并向客户端发送响应。这里的客户端指的是通过服务器与数据库交互的用户或应用程序。
- en: '![](../Images/079e71dc5d51a6101c4f07437aa23740.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/079e71dc5d51a6101c4f07437aa23740.png)'
- en: The client-server architecture. From pixabay.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端-服务器架构。图片来源：pixabay。
- en: A simple way to understand this architecture is to use the analogy of libraries.
    The server is the *library*, each piece of data is a *book*, and the client is
    a *visitor*. In this world, visitors don’t pick books out directly from the shelves.
    They instead must go through the librarian, who has meticulously organized their
    library to make it easy to find a book. In this world, a visitor’s access to the
    library is mediated entirely through the library’s staff (server-side).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这一架构的简单方法是通过类比图书馆。服务器是*图书馆*，每一条数据就是一本*书*，而客户端是*访客*。在这个世界中，访客不能直接从书架上拿书。他们必须通过图书管理员，图书管理员精心整理了图书馆，以便访客能够轻松找到所需的书。在这个世界里，访客进入图书馆的过程完全通过图书馆的工作人员（服务器端）来媒介化。
- en: This is a pretty neat architecture. However, for smaller, lightweight applications
    it is engineering overkill. If you only have a few books, why do you need to build
    multiple shelves, let alone multiple rooms? The alternative to the client-server
    architecture is the **single-file architecture** used by the **SQLite database**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种相当巧妙的架构。然而，对于较小、轻量级的应用程序来说，这种做法过于复杂。如果你只有几本书，为什么需要建立多个书架，更不用说多个房间了？与客户端-服务器架构相对的，是**SQLite数据库**使用的**单文件架构**。
- en: 'For the uninitiated, SQLite is the Platonic ideal of databases. As opposed
    to running an entire server to manage the access to data, this database is housed
    entirely within a single file. Your application is then able to create, read,
    update, and destroy data by simply modifying this one file. When you deploy a
    web application backed by a client-server database, you are deploying not one
    service but two services: one for your application and one for your database.
    With SQLite, you only have to deploy a single service: your application with the
    SQLite file included. This means less complexity and less cost.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于初学者来说，SQLite是数据库的柏拉图式理想。与运行整个服务器来管理数据访问不同，这个数据库完全存储在一个单一文件中。然后，你的应用程序只需通过修改这个文件来创建、读取、更新和销毁数据。当你部署一个由客户端-服务器数据库支持的Web应用程序时，你实际上是在部署两个服务：一个是你的应用程序，另一个是你的数据库。而使用SQLite时，你只需部署一个服务：包含SQLite文件的应用程序。这意味着更少的复杂性和更低的成本。
- en: Returning to our analogy, using SQLite is like having a single notebook in which
    all of your data is stored. No shelves, no libraries, no librarians. You just
    open the book and add, delete, or update your data. Perhaps you can get fancy,
    and add an index in the back of your book to speed up search. You can imagine
    how much simpler this would be.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的类比，使用SQLite就像拥有一本存储所有数据的单一笔记本。没有书架，没有图书馆，没有图书管理员。你只需打开书本，添加、删除或更新你的数据。也许你可以使其更复杂些，在书本的后面加一个索引来加速搜索。你可以想象这会变得多么简单。
- en: 'However, as they say in economics: there are no solutions, there are only trade-offs.
    SQLite is not perfect, and there are valid reasons for why it has rarely seen
    usage in modern web applications. In this article, I will highlight some of the
    issues that have dogged SQLite and how recent advancements have removed these
    barriers.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正如经济学中所说的：没有解决方案，只有权衡。SQLite并不完美，现代Web应用中很少使用它有其合理的原因。在本文中，我将重点讨论一些困扰SQLite的问题，以及近年来的进展如何消除了这些障碍。
- en: 'Issue #1: Concurrency'
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '问题 #1：并发'
- en: The primary issue in SQLite has traditionally been **concurrency related.**
    SQLite uses a write lock to ensure that only one write operation occurs at a time.
    We don’t want transactions interfering with each other. If you attempt to send
    concurrent write requests, you will often get a `SQLITE_BUSY` error, and one of
    the transactions will have been lost. In the case of concurrent requests, we want
    the transactions to queue up and play nice with each other.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite的主要问题通常与**并发性相关**。SQLite使用写锁来确保一次只有一个写操作进行。我们不希望事务相互干扰。如果你尝试发送并发写请求，你通常会遇到`SQLITE_BUSY`错误，并且其中一个事务会丢失。在并发请求的情况下，我们希望事务排队并彼此友好地运行。
- en: 'Unfortunately, the default transaction mode in SQLite does not facilitate this.
    Some important background: a **transaction** typically involves a series of database
    **statements**, such as reads and writes, that are executed together.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，SQLite中的默认事务模式并不促进这一点。一些重要的背景信息：**事务**通常涉及一系列数据库**语句**，例如读取和写入，它们一起执行。
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The default transaction mode in SQLite is the **deferred transaction mode.**
    In this mode:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite中的默认事务模式是**延迟事务模式**。在此模式下：
- en: No lock is acquired at the start of the transaction.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事务开始时不会获取任何锁。
- en: A **read-only statement** doesn’t trigger a write lock; it only requires a shared
    read lock, which allows concurrent reads. Think `SELECT` statements.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**只读语句**不会触发写锁；它只需要一个共享的读锁，这允许并发读取。想想`SELECT`语句。'
- en: A **write statement** requires an exclusive write lock, which blocks all other
    reads and writes until the transaction is complete. Think `INSERT`, `UPDATE`,
    or `DELETE` statements.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**写语句**需要一个独占的写锁，这会阻止所有其他读取和写入，直到事务完成。想想`INSERT`、`UPDATE`或`DELETE`语句。'
- en: 'As an example, take a look at the following two transactions. Suppose they
    were to run at the same time:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，来看一下以下两笔交易。假设它们同时运行：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this scenario, because `Transaction 1` was mid-transaction when the `SQLITE_BUSY`
    exception was thrown, it will not be re-queued after `Transaction 2` is finished
    with the write lock; it will just be cancelled. SQLite doesn’t want to risk inconsistent
    results should another transaction modify overlapping data during the lock wait,
    so it just tells the interrupted transaction to buzz off.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，由于`事务1`在抛出`SQLITE_BUSY`异常时正处于事务中，它不会在`事务2`完成写锁后重新排队，而是会被取消。SQLite不想冒险出现不一致的结果，万一另一个事务在锁等待期间修改了重叠的数据，所以它只会告诉被中断的事务放弃。
- en: 'Think of it this way: imagine you and your friend are sharing a notebook. You
    start reading a half-finished story in the notebook, planning to write the next
    part. But before you can pick up your pen, your friend snatches the notebook.
    “*You weren’t writing anything anyway!*” they exclaim. What if they change something
    crucial in your story? Frustrated and unable to continue, you give up in a huff,
    abandoning your attempt to finish the story. Turns out, your friend isn’t as nice
    as you thought!'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这样想：假设你和你的朋友正在共享一本笔记本。你开始阅读笔记本里的一篇未完成的故事，打算写下下一部分。但在你准备拿起笔之前，你的朋友抢走了笔记本。“*反正你也没写什么！*”他们大声说道。如果他们在你的故事中改变了什么关键内容怎么办？你感到沮丧，无法继续下去，愤怒地放弃了，放弃了完成这个故事的尝试。结果发现，你的朋友并不像你想象的那么友好！
- en: 'How can we fix this issue? What if you establish the following rule: when one
    of you grabs the notebook, **regardless of if you are reading or writing**, that
    person gets to use the notebook until they are done? Issue solved!'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何解决这个问题呢？假设你们规定一个规则：当你们中的任何一个人拿到笔记本时，**无论是读还是写**，那个人都可以使用笔记本直到完成？问题解决！
- en: This transaction mode in SQLite is known as **immediate**. Now, when one transaction
    begins, regardless of whether it is writing or reading, it claims the write lock.
    If a concurrent transaction attempts to claim the write lock, it will now queue
    up nicely behind the current one instead of throwing the `SQLITE_BUSY` .
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite中的这种事务模式被称为**即时模式**。现在，当一个事务开始时，无论它是写操作还是读操作，它都会占用写锁。如果一个并发事务试图占用写锁，它会排队等待当前事务完成，而不会抛出`SQLITE_BUSY`错误。
- en: Using the immediate transaction mode goes a long way towards solving the concurrency
    issue in SQLite. To continue improving concurrency, we can also change the **journal
    mode**. The default here is a **rollback journal**. In this paradigm, the original
    content of a database page is copied *before* modification. This way, if the transaction
    fails or if you so desire, you can always go back to the journal to restore the
    database to its original state. This is great for reproducibility, but bad for
    concurrency. Copying an entire page in a database is slow and grabs the write
    lock, delaying any read operations.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用即时事务模式可以大大缓解SQLite中的并发问题。为了进一步提高并发性，我们还可以更改**日志模式**。默认的模式是**回滚日志**。在这种模式下，数据库页面的原始内容会在修改之前*被复制*。这样，如果事务失败或者你愿意，你总是可以回到日志中恢复数据库到其原始状态。这对于可重复性非常有用，但对并发性不利。复制整个数据库页面的操作非常慢，并且会占用写锁，延迟任何读操作。
- en: To fix this issue we can instead use **write-ahead logging (WAL)**. Rather than
    writing changes directly to the main database file, the changes are first recorded
    in a separate log file (the “write-ahead log”) before being applied to the database
    at regular intervals. Readers can still access the most recently committed write
    operations, as SQLite checks the WAL file in addition to the main database file
    on read. This separates write and read operations, easing concurrency issues that
    can come as a result of scaling.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以改用**预写日志（WAL）**。不同于直接将更改写入主数据库文件，首先会将更改记录在一个单独的日志文件（即“预写日志”）中，然后按一定间隔将其应用到数据库中。读取者仍然可以访问最近提交的写操作，因为SQLite在读取时不仅会检查主数据库文件，还会检查WAL文件。这将写操作和读操作分离开，缓解了由于扩展所带来的并发问题。
- en: To continue our analogy, write-ahead logging is like grabbing a post-it-note
    every time a change to the shared notebook needs to occur. If anyone wants to
    read a section of the notebook, they can check if there are any post-its attached
    to that section to get the latest updates. You can have many people simultaneously
    reading the notebook at the same time with this method. Once a lot of post-its
    start to accumulate, you can then edit the actual notebook itself, tossing the
    post-its once the edits have finished.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续我们的类比，写前日志就像每次对共享笔记本进行更改时，都需要抓取一张便签。如果有人想查看笔记本中的某个部分，他们可以检查该部分是否附有便签，以获取最新的更新。通过这种方法，你可以让很多人同时阅读同一本笔记本。当便签积累到一定程度时，你就可以开始编辑笔记本本身，编辑完成后可以丢掉这些便签。
- en: These configuration options in SQLite have been around for decades (write-ahead-logging
    was introduced in 2010). Given this, why hasn’t SQLite been used in production
    for decades? That leads us to our next issue.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些SQLite中的配置选项已经存在了几十年（写前日志在2010年引入）。既然如此，为什么SQLite在生产环境中已经使用了几十年？这就引出了我们下一个问题。
- en: 'Issue #2: Slow hardware'
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '问题 #2：慢速硬件'
- en: Hard disk drives (HDD) are notoriously slow compared to solid state drives (SSD)
    on a variety of operations that are important to database management. For example,
    SSDs are about 100 times faster than HDDs when it comes to latency (time it takes
    for a single I/O operation). In random I/O operations per second (IOPS), SSDs
    are about 50–1000 times faster than HDDs. SSDs are so much faster than HDDs because
    of the lack of moving parts. HDDs use spinning disks and moving parts to read
    and write data, much like an old turntable, whereas SDDs use only electronic components,
    much like a giant USB stick.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与固态硬盘（SSD）相比，硬盘驱动器（HDD）在多种对数据库管理至关重要的操作上表现得非常慢。例如，在延迟（单次I/O操作所需的时间）方面，SSD比HDD快大约100倍。在随机I/O操作每秒（IOPS）方面，SSD比HDD快约50至1000倍。SSD之所以比HDD快得多，是因为SSD没有运动部件。HDD使用旋转的磁盘和运动部件来读取和写入数据，类似于老式的唱盘，而SSD仅使用电子组件，类似于一个巨大的USB闪存盘。
- en: Despite their inferiority, HDDs have historically dominated the storage market
    primarily due to low cost. However, SDDs have quickly been catching up. In 2011,
    SSDs were roughly 32 times more expensive per GB than HDDs ([source](https://www.tomshardware.com/news/ssd-hdd-solid-state-drive-hard-disk-drive-prices%2C14336.html?utm_source=chatgpt.com)).
    By 2023, the price gap narrowed, with SSDs now being about 3 to 5 times more expensive
    per GB compared to HDDs ([source](https://darwinsdata.com/how-much-does-ssd-cost-per-gb-vs-hdd/?utm_source=chatgpt.com)).
    In the past year, SSD prices have increased due to cuts from manufacturers like
    Samsung and increasing demand in data centers. In the long run however, we can
    expect SSDs to continue to decrease in price. Even if parity is never reached
    with HDDs, the low absolute price is enough to ensure widespread adoption. In
    2020, SSDs outsold HDDs, with 333 million units shipped compared to 260 million
    HDDs, marking a turning point in the storage market ([source](https://www.pcgamer.com/fun-fact-ssds-outsold-hdds-last-year-but-not-in-total-capacity/?utm_source=chatgpt.com)).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管其性能较差，HDD（硬盘驱动器）历史上主要因低成本而主导了存储市场。然而，SSD（固态硬盘）迅速迎头赶上。2011年，SSD的每GB价格大约是HDD的32倍（[来源](https://www.tomshardware.com/news/ssd-hdd-solid-state-drive-hard-disk-drive-prices%2C14336.html?utm_source=chatgpt.com)）。到2023年，价格差距缩小，SSD的每GB价格大约是HDD的3到5倍（[来源](https://darwinsdata.com/how-much-does-ssd-cost-per-gb-vs-hdd/?utm_source=chatgpt.com)）。在过去的一年里，由于三星等制造商的价格削减以及数据中心需求的增加，SSD的价格有所上升。然而，从长远来看，我们可以预期SSD的价格会继续下降。即使与HDD的价格永远无法持平，SSD的低绝对价格足以确保其广泛采用。在2020年，SSD的销量超过了HDD，出货量达到3.33亿台，而HDD为2.6亿台，这标志着存储市场的一个转折点（[来源](https://www.pcgamer.com/fun-fact-ssds-outsold-hdds-last-year-but-not-in-total-capacity/?utm_source=chatgpt.com)）。
- en: As of December 2024, you can rent a dedicated vCPU with 80 GB of SSD storage
    for about $16 USD per month on a service like [Hetzner](https://www.hetzner.com/cloud).
    240 GB can be had for about $61\. You can get even cheaper prices with a shared
    vCPU. For many smaller applications this storage is more than enough. The use
    of cheap SSDs has removed a significant bottleneck when using SQLite in production-grade
    web applications. But there is still one more important issue to deal with.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2024年12月，你可以在像[Hetzner](https://www.hetzner.com/cloud)这样的服务上租用一台配备80GB SSD存储的专用vCPU，每月约需16美元。240GB的存储大约需要61美元。你还可以通过共享vCPU获得更便宜的价格。对于许多较小的应用程序来说，这种存储空间绰绰有余。便宜的SSD的使用解决了在生产级Web应用中使用SQLite时的一个重要瓶颈。但仍然有一个更重要的问题需要处理。
- en: 'Issue #3: Backups'
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '问题 #3：备份'
- en: It goes without saying that having a backup to your database is critical in
    production. The last thing any startup wants is to have their primary database
    get corrupted and all user data lost.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 不言而喻，在生产环境中为数据库创建备份至关重要。任何创业公司最不希望发生的事情就是其主数据库损坏，导致所有用户数据丢失。
- en: 'The first option for creating a backup is the simplest. Since the SQLite database
    is just a file, you can essentially copy and paste your database into a folder
    on your computer, or upload it to a cloud service like AWS S3 buckets for more
    reliability. For small databases with infrequent writes this is a great option.
    As a simple example (taken from the [Litestream docs](https://litestream.io/alternatives/cron/)),
    here is a bash script creating a backup:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 创建备份的第一个选项是最简单的。由于SQLite数据库仅仅是一个文件，你可以本质上将数据库复制并粘贴到计算机上的一个文件夹中，或者将其上传到AWS S3桶等云服务中以提高可靠性。对于小型数据库以及写操作不频繁的情况，这是一个很好的选择。以下是一个简单的示例（取自[Litestream文档](https://litestream.io/alternatives/cron/)），展示了一个用于创建备份的bash脚本：
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A few notes:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 几个注意事项：
- en: The `-e` option in`set -e` stands for “exit immediately”. This makes sure that
    the script will be stopped if any command fails.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set -e`中的`-e`选项表示“立即退出”。这确保了如果任何命令失败，脚本将会停止执行。'
- en: SQLite’s `VACUUM INTO` command creates a compact backup of the SQLite database.
    It reduces fragmentation in the database and the file size. Think of it as a neat
    and tidy version of your database. However you don’t have to use `VACUUM INTO`
    ; you can replace it with `.backup` . This copies the entire database file, including
    all its data and structure as-is to another file.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite的`VACUUM INTO`命令会创建SQLite数据库的紧凑备份。它减少了数据库中的碎片化，并且减小了文件大小。可以把它当作数据库的整洁版。不过，你不一定要使用`VACUUM
    INTO`；你也可以用`.backup`来替代。这会将整个数据库文件，包括所有数据和结构，原样复制到另一个文件中。
- en: SQLite databases compress well, and the `gzip` command facilitates this.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQLite数据库压缩效果很好，`gzip`命令可以方便地实现这一点。
- en: Finally, you can upload the copy of the file to your cloud storage provider
    of choice. Here we are uploading to S3.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，你可以将文件副本上传到你选择的云存储提供商。在这里，我们将文件上传到S3。
- en: 'If you want to have your backups run automatically, you can configure `crontab`
    to run this job on a regular basis. Here we are running the script daily at midnight:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望备份任务自动运行，可以配置`crontab`以定期执行此任务。这里我们每天午夜运行脚本：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For write-heavy databases, where you would want to capture the state of the
    database at any given moment, you can use [Litestream](https://litestream.io/alternatives/cron/).
    This is an open-source tool designed to provide *real-time replication* for SQLite
    databases by streaming changes to a remote storage backend.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于写操作频繁的数据库，如果你想要在任何给定时刻捕获数据库的状态，可以使用[Litestream](https://litestream.io/alternatives/cron/)。这是一个开源工具，旨在通过将更改流式传输到远程存储后端，为SQLite数据库提供*实时复制*。
- en: Litestream is able to track changes to SQLite’s WAL file. Remember the post-it
    notes? Whenever a new transaction is recorded to the WAL file, Litestream is able
    to replicate these incrementally to your cloud storage provider of choice. This
    allows us to maintain a near real-time backup of the database without creating
    full copies each time.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Litestream能够跟踪SQLite的WAL文件的变化。还记得便签纸吗？每当新的事务记录到WAL文件时，Litestream就能将这些增量数据复制到你选择的云存储提供商。这使得我们能够保持数据库的近实时备份，而无需每次都创建完整的副本。
- en: 'To get started with Litestream, you first have to install it. On MacOS this
    means using Homebrew. Then, you need to setup a `litestream.yml` configuration
    file:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Litestream，首先需要安装它。在MacOS上，您可以使用Homebrew进行安装。然后，你需要设置一个`litestream.yml`配置文件：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, we are going to be streaming transactions to our database to an S3 bucket.
    Then we can run the following command to begin replication:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们将向S3桶流式传输数据库事务。然后，我们可以运行以下命令开始复制：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this case, we are setting any transactions in `your.db` to be replicated
    in an S3 bucket. That’s it! You are then able to restore a SQLite database to
    any previous state by replaying WAL changes. As an example, if you want to create
    a copy of your db called `restored.db` from a timestamp of 15:00 UTC dated 2024–12–10,
    you can run the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们设置将`your.db`中的任何事务复制到S3桶中。就这样！然后，你就可以通过回放WAL的更改将SQLite数据库恢复到任何先前的状态。例如，如果你想从2024年12月10日UTC时间15:00的时间戳创建一个名为`restored.db`的数据库副本，你可以运行以下命令：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To get a backup of the latest version of your database, just omit the `-timestamp
    flag` .
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取数据库的最新版本备份，只需省略`-timestamp`标志。
- en: Conclusion
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: I encourage you to watch this recent [talk at Rails World 2024](https://www.youtube.com/watch?v=wFUy120Fts8)
    to see how SQLite is rapidly becoming production-ready for modern web apps. They
    have implemented some of the changes we have discussed here to their SQLite adapter.
    I also recommend reading [Stephen Margheim’s article](https://fractaledmind.github.io/2024/04/15/sqlite-on-rails-the-how-and-why-of-optimal-performance/)
    detailing his work on SQLite in Rails if you want to dive deeper. You better believe
    these sorts of improvement are coming soon to [Django](https://gcollazo.com/optimal-sqlite-settings-for-django/),
    [Laravel](https://laravel-news.com/optimize-db-for-laravel-sqlite), etc.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你观看最近的 [Rails World 2024 讲座](https://www.youtube.com/watch?v=wFUy120Fts8)，了解
    SQLite 如何快速变得适合现代 web 应用的生产环境。他们已经将我们在这里讨论的一些改进应用到了他们的 SQLite 适配器中。如果你想深入了解，我还推荐阅读
    [Stephen Margheim 的文章](https://fractaledmind.github.io/2024/04/15/sqlite-on-rails-the-how-and-why-of-optimal-performance/)，详细介绍了他在
    Rails 中对 SQLite 的工作。你最好相信，这些改进很快也会应用到 [Django](https://gcollazo.com/optimal-sqlite-settings-for-django/)、[Laravel](https://laravel-news.com/optimize-db-for-laravel-sqlite)
    等框架中。
- en: The improvements to SQLite for production are not finished. David Heinemeier
    Hansson, creator of Rails, wants to push SQLite to be able to run a mid-size SaaS
    company off of. Exciting times!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 在生产环境中的改进尚未完成。Rails 的创造者 **David Heinemeier Hansson** 希望推动 SQLite，使其能够支撑一个中型
    SaaS 公司运营。令人激动的时刻！
