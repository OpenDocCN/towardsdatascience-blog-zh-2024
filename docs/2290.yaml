- en: Improving Code Quality with Array and DataFrame Type Hints
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提升代码质量：数组和DataFrame类型提示
- en: 原文：[https://towardsdatascience.com/improving-code-quality-with-array-and-dataframe-type-hints-cac0fb75cc11?source=collection_archive---------5-----------------------#2024-09-19](https://towardsdatascience.com/improving-code-quality-with-array-and-dataframe-type-hints-cac0fb75cc11?source=collection_archive---------5-----------------------#2024-09-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/improving-code-quality-with-array-and-dataframe-type-hints-cac0fb75cc11?source=collection_archive---------5-----------------------#2024-09-19](https://towardsdatascience.com/improving-code-quality-with-array-and-dataframe-type-hints-cac0fb75cc11?source=collection_archive---------5-----------------------#2024-09-19)
- en: How generic type specification permits powerful static analysis and runtime
    validation
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 泛型类型规范如何实现强大的静态分析和运行时验证
- en: '[](https://medium.com/@flexatone?source=post_page---byline--cac0fb75cc11--------------------------------)[![Christopher
    Ariza](../Images/35208ace15080724e4cd6690e43d6502.png)](https://medium.com/@flexatone?source=post_page---byline--cac0fb75cc11--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--cac0fb75cc11--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--cac0fb75cc11--------------------------------)
    [Christopher Ariza](https://medium.com/@flexatone?source=post_page---byline--cac0fb75cc11--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@flexatone?source=post_page---byline--cac0fb75cc11--------------------------------)[![Christopher
    Ariza](../Images/35208ace15080724e4cd6690e43d6502.png)](https://medium.com/@flexatone?source=post_page---byline--cac0fb75cc11--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--cac0fb75cc11--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--cac0fb75cc11--------------------------------)
    [Christopher Ariza](https://medium.com/@flexatone?source=post_page---byline--cac0fb75cc11--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--cac0fb75cc11--------------------------------)
    ·10 min read·Sep 19, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--cac0fb75cc11--------------------------------)
    ·10分钟阅读·2024年9月19日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a75b36f65c66b95f33aea2faefea4dbb.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a75b36f65c66b95f33aea2faefea4dbb.png)'
- en: Photo by Author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者照片
- en: As tools for Python type annotations (or hints) have evolved, more complex data
    structures can be typed, improving maintainability and static analysis. Arrays
    and DataFrames, as complex containers, have only recently supported complete type
    annotations in Python. NumPy 1.22 introduced generic specification of arrays and
    dtypes. Building on NumPy’s foundation, [StaticFrame](https://github.com/static-frame/static-frame)
    2.0 introduced complete type specification of DataFrames, employing NumPy primitives
    and variadic generics. This article demonstrates practical approaches to fully
    type-hinting arrays and DataFrames, and shows how the same annotations can improve
    code quality with both static analysis and runtime validation.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 随着Python类型注解（或类型提示）工具的发展，越来越复杂的数据结构可以被指定类型，从而提高了代码的可维护性和静态分析能力。数组和DataFrame作为复杂的数据容器，直到最近才开始在Python中支持完整的类型注解。NumPy
    1.22引入了数组和数据类型（dtypes）的通用规格。在NumPy的基础上，[StaticFrame](https://github.com/static-frame/static-frame)
    2.0引入了DataFrame的完整类型规格，采用了NumPy原语和可变泛型。本文展示了对数组和DataFrame进行完全类型提示的实际方法，并展示了如何通过静态分析和运行时验证来提高代码质量。
- en: '[StaticFrame](https://github.com/static-frame/static-frame) is an open-source
    DataFrame library of which I am an author.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[StaticFrame](https://github.com/static-frame/static-frame)是一个开源的DataFrame库，我是该库的作者之一。'
- en: Type Hints Improve Code Quality
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型提示提升代码质量
- en: Type hints (see [PEP 484](https://peps.python.org/pep-0484/)) improve code quality
    in a number of ways. Instead of using variable names or comments to communicate
    types, Python-object-based type annotations provide maintainable and expressive
    tools for type specification. These type annotations can be tested with type checkers
    such as `mypy` or `pyright`, quickly discovering potential bugs without executing
    code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提示（参见[PEP 484](https://peps.python.org/pep-0484/)）通过多种方式提升代码质量。与使用变量名或注释来传达类型不同，基于Python对象的类型注解提供了可维护且富有表现力的工具用于类型规范。这些类型注解可以通过类型检查工具（如`mypy`或`pyright`）进行测试，能够在不执行代码的情况下迅速发现潜在的bug。
- en: The same annotations can be used for runtime validation. While reliance on duck-typing
    over runtime validation is common in Python, runtime validation is more often
    needed with complex data structures such as arrays and DataFrames. For example,
    an interface expecting a DataFrame argument, if given a Series, might not need
    explicit validation as usage of the wrong type will likely raise. However, an
    interface expecting a 2D array of floats, if given an array of Booleans, might
    benefit from validation as usage of the wrong type may not raise.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的注解可以用于运行时验证。虽然在Python中依赖鸭子类型（duck-typing）而非运行时验证较为常见，但对于复杂数据结构（如数组和DataFrame），往往更需要运行时验证。例如，期望DataFrame作为参数的接口，如果传入一个Series，可能不需要显式验证，因为错误类型的使用很可能会引发异常。然而，期望二维浮点数组的接口，如果传入一个布尔值数组，则可能受益于验证，因为错误类型的使用可能不会引发异常。
- en: 'Many important typing utilities are only available with the most-recent versions
    of Python. Fortunately, the `typing-extensions` package back-ports standard library
    utilities for older versions of Python. A related challenge is that type checkers
    can take time to implement full support for new features: many of the examples
    shown here require at least `mypy` 1.9.0.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 许多重要的类型工具仅在最新版本的Python中可用。幸运的是，`typing-extensions`包为较旧版本的Python提供了标准库工具的后向移植。一个相关的挑战是，类型检查器可能需要一些时间才能完全支持新特性：这里展示的许多示例至少需要`mypy`
    1.9.0。
- en: Elemental Type Annotations
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本类型注解
- en: 'Without type annotations, a Python function signature gives no indication of
    the expected types. For example, the function below might take and return any
    types:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有类型注解，Python函数签名无法指示期望的类型。例如，下面的函数可能接受和返回任何类型：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'By adding type annotations, the signature informs readers of the expected types.
    With modern Python, user-defined and built-in classes can be used to specify types,
    with additional resources (such as `Any`, `Iterator`, `cast()`, and `Annotated`)
    found in the standard library `typing` module. For example, the interface below
    improves the one above by making expected types explicit:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加类型注解，函数签名向读者表明期望的类型。在现代Python中，可以使用用户定义的类和内置类来指定类型，更多的资源（如`Any`、`Iterator`、`cast()`和`Annotated`）可以在标准库`typing`模块中找到。例如，下面的接口通过明确指定期望类型来改进上述接口：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When used with a type checker like `mypy`, code that violates the specifications
    of the type annotations will raise an error during static analysis (shown as comments,
    below). For example, providing an integer when a Boolean is required is an error:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当与像`mypy`这样的类型检查器一起使用时，违反类型注解规范的代码将在静态分析时抛出错误（如下所示的评论）。例如，当需要布尔值时提供整数是一个错误：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Static analysis can only validate statically defined types. The full range of
    runtime inputs and outputs is often more diverse, suggesting some form of runtime
    validation. The best of both worlds is possible by reusing type annotations for
    runtime validation. While there are libraries that do this (e.g., `typeguard`
    and `beartype`), StaticFrame offers `CallGuard`, a tool specialized for comprehensive
    array and DataFrame type-annotation validation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 静态分析只能验证静态定义的类型。运行时输入和输出的完整范围通常更加多样化，这意味着需要某种形式的运行时验证。通过重复使用类型注解进行运行时验证，可以实现两全其美。虽然有一些库可以做到这一点（例如，`typeguard`和`beartype`），但StaticFrame提供了专门用于全面数组和DataFrame类型注解验证的工具`CallGuard`。
- en: 'A Python decorator is ideal for leveraging annotations for runtime validation.
    `CallGuard` offers two decorators: `[@CallGuard](http://twitter.com/CallGuard).check`,
    which raises an informative `Exception` on error, or `[@CallGuard](http://twitter.com/CallGuard).warn`,
    which issues a warning.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Python装饰器非常适合利用注解进行运行时验证。`CallGuard`提供了两个装饰器：`[@CallGuard](http://twitter.com/CallGuard).check`，在出错时抛出详细的`Exception`，或者`[@CallGuard](http://twitter.com/CallGuard).warn`，在出错时发出警告。
- en: 'Further extending the `process0` function above with `[@CallGuard](http://twitter.com/CallGuard).check`,
    the same type annotations can be used to raise an `Exception` (shown again as
    comments) when runtime objects violate the requirements of the type annotations:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在上面的`process0`函数中扩展`[@CallGuard](http://twitter.com/CallGuard).check`，可以使用相同的类型注解，当运行时对象违反类型注解的要求时，抛出`Exception`（如评论中再次显示）：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'While type annotations must be valid Python, they are irrelevant at runtime
    and can be wrong: it is possible to have correctly verified types that do not
    reflect runtime reality. As shown above, reusing type annotations for runtime
    checks ensures annotations are valid.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然类型注解必须是有效的 Python，但它们在运行时是无关的，且可能是错误的：有可能拥有正确验证的类型，但它们并未反映运行时的实际情况。如上所示，通过重用类型注解进行运行时检查可以确保注解的有效性。
- en: Array Type Annotations
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组类型注解
- en: Python classes that permit component type specification are “generic”. Component
    types are specified with positional “type variables”. A list of integers, for
    example, is annotated with `list[int]`; a dictionary of floats keyed by tuples
    of integers and strings is annotated `dict[tuple[int, str], float]`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 允许组件类型规范的 Python 类被称为“泛型”。组件类型通过位置型“类型变量”来指定。例如，一个整数列表的注解是`list[int]`；一个由整数和字符串元组作为键的浮点数字典的注解是`dict[tuple[int,
    str], float]`。
- en: With NumPy 1.20, `ndarray` and `dtype` become generic. The generic `ndarray`
    requires two arguments, a shape and a `dtype`. As the usage of the first argument
    is still under development, `Any` is commonly used. The second argument, `dtype`,
    is itself a generic that requires a type variable for a NumPy type such as `np.int64`.
    NumPy also offers more general generic types such as `np.integer[Any]`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NumPy 1.20 版本中，`ndarray` 和 `dtype` 变得更加泛型化。泛型 `ndarray` 需要两个参数，一个是形状，另一个是
    `dtype`。由于第一个参数的使用仍在开发中，因此通常使用 `Any`。第二个参数 `dtype` 本身是一个泛型，要求使用一个类型变量来指定 NumPy
    类型，例如 `np.int64`。NumPy 还提供了更为通用的泛型类型，如 `np.integer[Any]`。
- en: For example, an array of Booleans is annotated `np.ndarray[Any, np.dtype[np.bool_]]`;
    an array of any type of integer is annotated `np.ndarray[Any, np.dtype[np.integer[Any]]]`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个布尔数组的注解是`np.ndarray[Any, np.dtype[np.bool_]]`；任何类型整数的数组的注解是`np.ndarray[Any,
    np.dtype[np.integer[Any]]]`。
- en: As generic annotations with component type specifications can become verbose,
    it is practical to store them as type aliases (here prefixed with “T”). The following
    function specifies such aliases and then uses them in a function.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于带有组件类型规范的泛型注解可能变得冗长，因此将它们存储为类型别名（此处以“T”作为前缀）是实际的做法。以下函数指定了此类别名，并在函数中使用它们。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'As before, when used with `mypy`, code that violates the type annotations will
    raise an error during static analysis. For example, providing an integer when
    a Boolean is required is an error:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，当与 `mypy` 一起使用时，违反类型注解的代码将在静态分析期间引发错误。例如，在需要布尔值时提供整数是一个错误：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The interface requires 8-bit signed integers (`np.int8`); attempting to use
    a different sized integer is also an error:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 该接口要求使用 8 位有符号整数（`np.int8`）；尝试使用不同大小的整数也是错误的：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: While some interfaces might benefit from such narrow numeric type specifications,
    broader specification is possible with NumPy’s generic types such as `np.integer[Any]`,
    `np.signedinteger[Any]`, `np.float[Any]`, etc. For example, we can define a new
    function that accepts any size signed integer. Static analysis now passes with
    both `TNDArrayInt8` and `TNDArrayInt64` arrays.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管某些接口可能受益于如此狭窄的数值类型规范，但使用 NumPy 的泛型类型，如`np.integer[Any]`、`np.signedinteger[Any]`、`np.float[Any]`等，依然可以进行更广泛的规范。例如，我们可以定义一个新的函数，接受任何大小的有符号整数。静态分析现在通过了
    `TNDArrayInt8` 和 `TNDArrayInt64` 数组。
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Just as shown above with elements, generically specified NumPy arrays can be
    validated at runtime if decorated with `CallGuard.check`:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 正如上面所示的元素，使用泛型指定的 NumPy 数组可以在运行时进行验证，前提是它们使用了 `CallGuard.check` 装饰器：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'StaticFrame provides utilities to extend runtime validation beyond type checking.
    Using the `typing` module’s `Annotated` class (see [PEP 593](https://peps.python.org/pep-0593/)),
    we can extend the type specification with one or more StaticFrame `Require` objects.
    For example, to validate that an array has a 1D shape of `(24,)`, we can replace
    `TNDArrayIntAny` with `Annotated[TNDArrayIntAny, sf.Require.Shape(24)]`. To validate
    that a float array has no NaNs, we can replace `TNDArrayFloat64` with `Annotated[TNDArrayFloat64,
    sf.Require.Apply(lambda a: ~a.insna().any())]`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 'StaticFrame 提供了扩展运行时验证的工具，超出了类型检查的范围。使用 `typing` 模块的 `Annotated` 类（见 [PEP 593](https://peps.python.org/pep-0593/)），我们可以通过一个或多个
    StaticFrame `Require` 对象来扩展类型规范。例如，要验证一个数组具有 `(24,)` 的一维形状，我们可以将 `TNDArrayIntAny`
    替换为 `Annotated[TNDArrayIntAny, sf.Require.Shape(24)]`。要验证浮点数组没有 NaN，我们可以将 `TNDArrayFloat64`
    替换为 `Annotated[TNDArrayFloat64, sf.Require.Apply(lambda a: ~a.insna().any())]`。'
- en: 'Implementing a new function, we can require that all input and output arrays
    have the shape `(24,)`. Calling this function with the previously created arrays
    raises an error:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现一个新函数时，我们可以要求所有输入和输出数组的形状为 `(24,)`。调用这个函数时，如果使用先前创建的数组，则会引发错误：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: DataFrame Type Annotations
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataFrame 类型注解
- en: 'Just like a dictionary, a DataFrame is a complex data structure composed of
    many component types: the index labels, column labels, and the column values are
    all distinct types.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 就像字典一样，DataFrame 是一个由许多组件类型组成的复杂数据结构：索引标签、列标签和列值都是不同的类型。
- en: A challenge of generically specifying a DataFrame is that a DataFrame has a
    variable number of columns, where each column might be a different type. The Python
    `TypeVarTuple` variadic generic specifier (see [PEP 646](https://peps.python.org/pep-0646/)),
    first released in Python 3.11, permits defining a variable number of column type
    variables.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通用地指定 DataFrame 的挑战在于 DataFrame 有可变数量的列，每一列可能有不同的类型。Python 的 `TypeVarTuple`
    可变参数泛型说明符（见 [PEP 646](https://peps.python.org/pep-0646/)），首次在 Python 3.11 中发布，允许定义可变数量的列类型变量。
- en: With StaticFrame 2.0, `Frame`, `Series`, `Index` and related containers become
    generic. Support for variable column type definitions is provided by `TypeVarTuple`,
    back-ported with the implementation in `typing-extensions` for compatibility down
    to Python 3.9.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 StaticFrame 2.0 中，`Frame`、`Series`、`Index` 和相关容器变成了通用类型。`TypeVarTuple` 提供了对可变列类型定义的支持，通过在
    `typing-extensions` 中的实现向下兼容到 Python 3.9。
- en: 'A generic `Frame` requires two or more type variables: the type of the index,
    the type of the columns, and zero or more specifications of columnar value types
    specified with NumPy types. A generic `Series` requires two type variables: the
    type of the index and a NumPy type for the values. The `Index` is itself generic,
    also requiring a NumPy type as a type variable.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通用的 `Frame` 需要两个或更多类型变量：索引类型、列类型，以及一个或多个通过 NumPy 类型指定的列值类型。通用的 `Series` 需要两个类型变量：索引类型和用于值的
    NumPy 类型。`Index` 本身是通用的，也需要一个作为类型变量的 NumPy 类型。
- en: With generic specification, a `Series` of floats, indexed by dates, can be annotated
    with `sf.Series[sf.IndexDate, np.float64]`. A `Frame` with dates as index labels,
    strings as column labels, and column values of integers and floats can be annotated
    with `sf.Frame[sf.IndexDate, sf.Index[np.str_], np.int64, np.float64]`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用通用规格，浮动类型的 `Series`，由日期索引，可以注解为 `sf.Series[sf.IndexDate, np.float64]`。一个以日期作为索引标签，字符串作为列标签，整数和浮动类型作为列值的
    `Frame` 可以注解为 `sf.Frame[sf.IndexDate, sf.Index[np.str_], np.int64, np.float64]`。
- en: 'Given a complex `Frame`, deriving the annotation might be difficult. StaticFrame
    offers the `via_type_clinic` interface to provide a complete generic specification
    for any component at runtime:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个复杂的`Frame`，推导注解可能会很困难。StaticFrame 提供了 `via_type_clinic` 接口，在运行时为任何组件提供完整的通用规格：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: As shown with arrays, storing annotations as type aliases permits reuse and
    more concise function signatures. Below, a new function is defined with generic
    `Frame` and `Series` arguments fully annotated. A `cast` is required as not all
    operations can statically resolve their return type.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如同数组一样，将注解存储为类型别名可以实现重用并使函数签名更简洁。以下是一个新函数的定义，带有完全注解的通用 `Frame` 和 `Series` 参数。由于并非所有操作都能静态解析它们的返回类型，因此需要进行
    `cast`。
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: These more complex annotated interfaces can also be validated with `mypy`. Below,
    a `Frame` without the expected column value types is passed, causing `mypy` to
    error (shown as comments, below).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些更复杂的注解接口也可以通过 `mypy` 进行验证。下面，传入了一个没有预期列值类型的 `Frame`，导致 `mypy` 报错（如下面的注释所示）。
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: To use the same type hints for runtime validation, the `sf.CallGuard.check`
    decorator can be applied. Below, a `Frame` of three integer columns is provided
    where a `Frame` of two columns is expected.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在运行时验证使用相同的类型提示，可以应用 `sf.CallGuard.check` 装饰器。以下提供了一个包含三列整数的 `Frame`，而预期的是一个包含两列的
    `Frame`。
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'It might not be practical to annotate every column of every `Frame`: it is
    common for interfaces to work with `Frame` of variable column sizes. `TypeVarTuple`
    supports this through the usage of `*tuple[]` expressions (introduced in Python
    3.11, back-ported with the `Unpack` annotation). For example, the function above
    could be defined to take any number of integer columns with that annotation `Frame[IndexDate,
    Index[np.str_], *tuple[np.int64, ...]]`, where `*tuple[np.int64, ...]]` means
    zero or more integer columns.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 为每一列的每个 `Frame` 注解可能不实际：接口通常需要处理具有可变列数的 `Frame`。`TypeVarTuple` 通过使用 `*tuple[]`
    表达式（在 Python 3.11 中引入，并通过 `Unpack` 注解向后移植）来支持这一点。例如，上面的函数可以定义为接受任意数量的整数列，注解为 `Frame[IndexDate,
    Index[np.str_], *tuple[np.int64, ...]]`，其中 `*tuple[np.int64, ...]]` 表示零个或多个整数列。
- en: 'The same implementation can be annotated with a far more general specification
    of columnar types. Below, the column values are annotated with `np.number[Any]`
    (permitting any type of numeric NumPy type) and a `*tuple[]` expression (permitting
    any number of columns): `*tuple[np.number[Any], …]`. Now neither `mypy` nor `CallGuard`
    errors with either previously created `Frame`.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的实现可以用更通用的列类型规范进行注解。下面，列值用 `np.number[Any]` 注解（允许任何类型的数值 NumPy 类型）和 `*tuple[]`
    表达式注解（允许任意数量的列）：`*tuple[np.number[Any], …]`。现在，既不会有 `mypy` 错误，也不会有 `CallGuard`
    错误。
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As with NumPy arrays, `Frame` annotations can wrap `Require` specifications
    in `Annotated` generics, permitting the definition of additional run-time validations.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 与 NumPy 数组类似，`Frame` 注解可以将 `Require` 规范包装在 `Annotated` 泛型中，从而允许定义额外的运行时验证。
- en: Type Annotations with Other Libraries
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与其他库的类型注解
- en: While StaticFrame might be the first DataFrame library to offer complete generic
    specification and a unified solution for both static type analysis and run-time
    type validation, other array and DataFrame libraries offer related utilities.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 StaticFrame 可能是第一个提供完整泛型规范并为静态类型分析和运行时类型验证提供统一解决方案的 DataFrame 库，但其他数组和 DataFrame
    库也提供了相关的工具。
- en: Neither the `Tensor` class in PyTorch (2.4.0), nor the `Tensor` class in TensorFlow
    (2.17.0) support generic type or shape specification. While both libraries offer
    a `TensorSpec` object that can be used to perform run-time type and shape validation,
    static type checking with tools like `mypy` is not supported.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch（2.4.0）中的 `Tensor` 类和 TensorFlow（2.17.0）中的 `Tensor` 类都不支持泛型类型或形状规范。虽然这两个库都提供了可以用于进行运行时类型和形状验证的
    `TensorSpec` 对象，但像 `mypy` 这样的工具不支持静态类型检查。
- en: As of Pandas 2.2.2, neither the Pandas `Series` nor `DataFrame` support generic
    type specifications. A number of third-party packages have offered partial solutions.
    The `pandas-stubs` library, for example, provides type annotations for the Pandas
    API, but does not make the `Series` or `DataFrame` classes generic. The Pandera
    library permits defining `DataFrameSchema` classes that can be used for run-time
    validation of Pandas DataFrames. For static-analysis with `mypy`, Pandera offers
    alternative `DataFrame` and `Series` subclasses that permit generic specification
    with the same `DataFrameSchema` classes. This approach does not permit the expressive
    opportunities of using generic NumPy types or the unpack operator for supplying
    variadic generic expressions.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Pandas 2.2.2 开始，Pandas 的 `Series` 和 `DataFrame` 都不支持泛型类型规范。一些第三方包提供了部分解决方案。例如，`pandas-stubs`
    库为 Pandas API 提供了类型注解，但并未使 `Series` 或 `DataFrame` 类变成泛型。Pandera 库允许定义 `DataFrameSchema`
    类，可以用于 Pandas DataFrame 的运行时验证。对于与 `mypy` 进行静态分析，Pandera 提供了替代的 `DataFrame` 和
    `Series` 子类，允许使用相同的 `DataFrameSchema` 类进行泛型规范。该方法无法利用使用泛型 NumPy 类型或解包操作符提供变参泛型表达式的表达能力。
- en: Conclusion
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Python type annotations can make static analysis of types a valuable check of
    code quality, discovering errors before code is even executed. Up until recently,
    an interface might take an array or a DataFrame, but no specification of the types
    contained in those containers was possible. Now, complete specification of component
    types is possible in NumPy and StaticFrame, permitting more powerful static analysis
    of types.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Python 类型注解可以使静态类型分析成为检查代码质量的宝贵工具，能够在代码执行之前发现错误。直到最近，接口可能接受数组或 DataFrame，但无法指定这些容器中包含的类型。现在，NumPy
    和 StaticFrame 中已可以完整地指定组件类型，从而允许更强大的类型静态分析。
- en: Providing correct type annotations is an investment. Reusing those annotations
    for runtime checks provides the best of both worlds. StaticFrame’s `CallGuard`
    runtime type checker is specialized to correctly evaluate fully specified generic
    NumPy types, as well as all generic StaticFrame containers.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 提供正确的类型注解是一项投资。复用这些注解进行运行时检查提供了两全其美的效果。StaticFrame 的 `CallGuard` 运行时类型检查器专门用于正确评估完全指定的泛型
    NumPy 类型，以及所有泛型 StaticFrame 容器。
