["```py\n# Example 1 - marketing spend on each channel is equal: biased coefficients\nnp.random.seed(150)\n\ntv_spend = np.random.normal(0, 50, 1000)\nsocial_spend = tv_spend\nsales = 0.10 * tv_spend + 0.20 * social_spend\nX = np.column_stack((tv_spend, social_spend))\nclf = LinearRegression()\nclf.fit(X, sales)\n\nprint(f'Coefficients: {clf.coef_}')\n```", "```py\n# Example 2 - marketing spend on each channel follows the same trend: biased coefficients and sign flip\nnp.random.seed(150)\n\ntv_spend = np.random.normal(0, 50, 1000)\nsocial_spend = tv_spend * 0.50\nsales = 0.10 * tv_spend + 0.20 * social_spend\nX = np.column_stack((tv_spend, social_spend))\nclf = LinearRegression()\nclf.fit(X, sales)\n\nprint(f'Coefficients: {clf.coef_}')\n```", "```py\n# Example 3 - random noise added to marketing spend: correct coefficients\nnp.random.seed(150)\n\ntv_spend = np.random.normal(0, 50, 1000)\nsocial_spend = tv_spend * 0.50 + np.random.normal(0, 1, 1000)\nsales = 0.10 * tv_spend + 0.20 * social_spend\nX = np.column_stack((tv_spend, social_spend))\nclf = LinearRegression()\nclf.fit(X, sales)\n\nprint(f'Coefficients: {clf.coef_}')\n```", "```py\n-- example SQL code to extract data\nselect\n  observation_date,\n  sum(tv_spend) as tv_spend,\n  sum(social_spend) as social_spend,\n  sum(sales) as sales\nfrom mmm_data_mart\ngroup by\n  observation_date;\n```", "```py\n# set coefficients for each channel using actual spend data\nmarketing_contribution = tv_spend * 0.10 + social_spend * 0.20\n\n# calculate the remaining contribution\nother_contribution = sales - marketing_contribution\n\n# create arrays for regression\nX = np.column_stack((tv_spend, social_spend, other_contribution))\ny = sales\n```", "```py\n# train regression model\nclf = LinearRegression()\nclf.fit(X, y)\n\n# recover coefficients\nprint(f'Recovered coefficients: {clf.coef_}')\n```", "```py\ndef data_generator(spend_rand_change, true_coef):\n    '''\n    Generate simulated marketing data with demand, forecasted demand, social and TV spend, and sales.\n\n    Args:\n        spend_rand_change (float): Random variation parameter for marketing spend.\n    true_coef (list): True coefficients for demand, social media spend, and TV spend effects on sales.\n\n    Returns:\n        pd.DataFrame: DataFrame containing the simulated data.\n    '''\n\n    # Parameters for data generation\n    start_date = \"2018-01-01\"\n    periods = 365 * 3  # Daily data for three years\n    trend_slope = 0.01  # Linear trend component\n    seasonal_amplitude = 5  # Amplitude of the seasonal component\n    seasonal_period = 30.44  # Monthly periodicity\n    noise_level = 5  # Level of random noise in demand\n\n    # Generate time variables\n    time = np.arange(periods)\n    date_range = pd.date_range(start=start_date, periods=periods)\n\n    # Create demand components\n    trend_component = trend_slope * time\n    seasonal_component = seasonal_amplitude * np.sin(2 * np.pi * time / seasonal_period)\n    noise_component = noise_level * np.random.randn(periods)\n\n    # Combine to form demand series\n    demand = 100 + trend_component + seasonal_component + noise_component\n\n    # Initialize DataFrame\n    df = pd.DataFrame({'date': date_range, 'demand': demand})\n\n    # Add forecasted demand with slight random variation\n    df['demand_forecast'] = df['demand'] * np.random.uniform(0.95, 1.05, len(df))\n\n    # Simulate social media and TV spend with random variation\n    df['social_spend'] = df['demand_forecast'] * 10 * np.random.uniform(1 - spend_rand_change, 1 + spend_rand_change, len(df))\n    df['tv_spend'] = df['demand_forecast'] * 20 * np.random.uniform(1 - spend_rand_change, 1 + spend_rand_change, len(df))\n    df['total_spend'] = df['social_spend'] + df['tv_spend']\n\n    # Calculate sales based on demand, social, and TV spend, with some added noise\n    df['sales'] = (\n        df['demand'] * true_coef[0] + \n        df['social_spend'] * true_coef[1] + \n        df['tv_spend'] * true_coef[2]\n    )\n    sales_noise = 0.01 * df['sales'] * np.random.randn(len(df))\n    df['sales'] += sales_noise\n\n    return df\n```", "```py\ndef run_reg(df, features, target):\n    '''\n    Runs a linear regression on the specified features to predict the target variable.\n\n    Args:\n        df (pd.DataFrame): The input data containing features and target.\n    features (list): List of column names to be used as features in the regression.\n    target (str): The name of the target column to be predicted.\n    Returns:\n        np.ndarray: Array of recovered coefficients from the linear regression model.\n    '''\n\n    # Extract features and target values\n    X = df[features].values\n    y = df[target].values\n\n    # Initialize and fit linear regression model\n    model = LinearRegression()\n    model.fit(X, y)\n\n    # Output recovered coefficients\n    coefficients = model.coef_\n    print(f'Recovered coefficients: {coefficients}')\n\n    return coefficients\n```", "```py\nnp.random.seed(40)\n\ntrue_coef = [0.35, 0.15, 0.05]\n\nfeatures = [\n    \"demand\",\n    \"social_spend\",\n    \"tv_spend\"\n]\n\ntarget = \"sales\"\n\nsim_1 = data_generator(0.00, true_coef)\nreg_1 = run_reg(sim_1, features, target)\n\nprint(f\"True coefficients: {true_coef}\")\n```", "```py\ndate_col = \"date\"\n\ny_col = \"sales\"\n\nchannel_cols = [\"social_spend\",\n                \"tv_spend\"]\n\ncontrol_cols = [\"demand\"]\n\nX = sim_1[[date_col] + channel_cols + control_cols]\ny = sim_1[y_col]\n```", "```py\n# calculate contribution\ntrue_contributions = [round(np.sum(X[\"demand\"] * true_coef[0]) / np.sum(y), 2), \n                      round(np.sum(X[\"social_spend\"] * true_coef[1]) / np.sum(y), 2), \n                      round(np.sum(X[\"tv_spend\"] * true_coef[2]) / np.sum(y), 2)]\ntrue_contributions\n```", "```py\nmmm_default = MMM(\n    adstock=\"geometric\",\n    saturation=\"logistic\",\n    date_column=date_col,\n    channel_columns=channel_cols,\n    control_columns=control_cols,\n    adstock_max_lag=4,\n    yearly_seasonality=2,\n)\n\nmmm_default.default_model_config\n```", "```py\nsigma = 2\n\nx1 = np.linspace(0, 10, 1000)\ny1 = halfnorm.pdf(x1, scale=sigma)\n\nplt.figure(figsize=(8, 6))\nplt.plot(x1, y1, 'b-')\nplt.fill_between(x1, y1, alpha=0.2, color='blue')\nplt.title('Saturation beta: HalfNormal Distribution (sigma=2)')\nplt.xlabel('Saturation beta')\nplt.ylabel('Probability Density')\nplt.grid(True)\nplt.show()\n```", "```py\nmmm_default.fit(X, y)\nmmm_default.plot_waterfall_components_decomposition();\n```", "```py\ntotal_spend_per_channel = df[channel_cols].sum(axis=0)\nspend_share = total_spend_per_channel / total_spend_per_channel.sum()\n\nn_channels = df[channel_cols].shape[1]\nprior_sigma = n_channels * spend_share.to_numpy()\n\nspend_share\n```", "```py\nmy_model_config = {'saturation_beta': {'dist': 'HalfNormal', 'kwargs': {'sigma': prior_sigma}}}\n\nmmm_priors = MMM(\n    model_config=my_model_config,\n    adstock=\"geometric\",\n    saturation=\"logistic\",\n    date_column=date_col,\n    channel_columns=channel_cols,\n    control_columns=control_cols,\n    adstock_max_lag=4,\n    yearly_seasonality=2,\n)\n\nmmm_priors.default_model_config\n```", "```py\nmmm_priors.fit(X, y)\nmmm_priors.plot_waterfall_components_decomposition();\n```", "```py\nnp.random.seed(40)\n\n# Define list to store results\nresults = []\n\n# Loop through a range of random adjustments to spend\nfor spend_rand_change in np.arange(0.00, 0.05, 0.001):\n    # Generate simulated data with the current spend_rand_change\n    sim_data = data_generator(spend_rand_change, true_coef)\n\n    # Run the regression\n    coefficients = run_reg(sim_data, features=['demand', 'social_spend', 'tv_spend'], target='sales')\n\n    # Store the spend_rand_change and coefficients for later plotting\n    results.append({\n        'spend_rand_change': spend_rand_change,\n        'coef_demand': coefficients[0],\n        'coef_social_spend': coefficients[1],\n        'coef_tv_spend': coefficients[2]\n    })\n\n# Convert results to DataFrame for easy plotting\nresults_df = pd.DataFrame(results)\n\n# Plot the coefficients as a function of spend_rand_change\nplt.figure(figsize=(10, 6))\nplt.plot(results_df['spend_rand_change'], results_df['coef_demand'], label='Demand Coef', color='r', marker='o')\nplt.plot(results_df['spend_rand_change'], results_df['coef_social_spend'], label='Social Spend Coef', color='g', marker='o')\nplt.plot(results_df['spend_rand_change'], results_df['coef_tv_spend'], label='TV Spend Coef', color='b', marker='o')\n\n# Add lines for the true coefficients\nplt.axhline(y=true_coef[0], color='r', linestyle='--', label='True Demand Coef')\nplt.axhline(y=true_coef[1], color='g', linestyle='--', label='True Social Spend Coef')\nplt.axhline(y=true_coef[2], color='b', linestyle='--', label='True TV Spend Coef')\n\nplt.title('Regression Coefficients vs Spend Random Change')\nplt.xlabel('Spend Random Change')\nplt.ylabel('Coefficient Value')\nplt.legend()\nplt.grid(True)\nplt.show()\n```"]