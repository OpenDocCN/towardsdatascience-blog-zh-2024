- en: Key Insights for Teaching AI Agents to Remember
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/key-insights-for-teaching-ai-agents-to-remember-c23deffe7f1a?source=collection_archive---------10-----------------------#2024-09-10](https://towardsdatascience.com/key-insights-for-teaching-ai-agents-to-remember-c23deffe7f1a?source=collection_archive---------10-----------------------#2024-09-10)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Recommendations on building robust memory capabilities based on experimentation
    with Autogen’s “Teachable Agents”
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@sandibesen?source=post_page---byline--c23deffe7f1a--------------------------------)[![Sandi
    Besen](../Images/97361d97f50269f70b6621da2256bc29.png)](https://medium.com/@sandibesen?source=post_page---byline--c23deffe7f1a--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--c23deffe7f1a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--c23deffe7f1a--------------------------------)
    [Sandi Besen](https://medium.com/@sandibesen?source=post_page---byline--c23deffe7f1a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--c23deffe7f1a--------------------------------)
    ·16 min read·Sep 10, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Memory is undoubtedly becoming a crucial aspect of Agentic AI. As the use cases
    for AI Agents grow in complexity, so does the need for these agents to learn from
    past experiences, utilize stored business-specific knowledge, and adapt to evolving
    scenarios based on accumulated information.
  prefs: []
  type: TYPE_NORMAL
- en: 'In my previous article, “[Memory in AI: Key Benefits and Investment Considerations](https://medium.com/towards-data-science/the-important-role-of-memory-in-agentic-ai-896b22542b3e),”
    I explored why memory is pivotal for AI, discussing its role in recall, reasoning,
    and continuous learning. This piece, however, will dive directly into the implementation
    of memory by examining its impact through the “teachability” functionality in
    the popular agent framework, [Autogen](https://microsoft.github.io/autogen/).'
  prefs: []
  type: TYPE_NORMAL
- en: '***Note****:* *While this article is technical in nature, it offers value for
    both technical professionals and business leaders looking to evaluate the role
    of memory in Agentic AI systems. I’ve structured it so that readers can skip over
    the code sections and still grasp the way memory can augment the responses of
    your AI systems. If you don’t wish to follow the code, you may read the descriptions
    of each step to get a sense of the process… or just the key findings and recommendations
    section.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8d57b87125a4809bbd544b77bc1db128.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Dalle3 , Prompt Author:Sandi Besen'
  prefs: []
  type: TYPE_NORMAL
- en: Key Findings and Recommendations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: My exploration of Autogen’s Teachable Agents revealed both their potential and
    limitations in handling both simple and complex memory tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Out of the box, Autogen’s TeachableAgent performs less brilliantly than expected.
    The Agen’ts reasoning ability conflates memories together in a non productive
    way and the included retrieval mechanism is not set up for multi-step searches
    necessary for answering complex questions. **This limitation suggests that if
    you would like to use Autogen’s Teachable Agents, there needs to be substantial
    customization to both supplement reasoning capabilities and achieve more sophisticated
    memory retrieval.**
  prefs: []
  type: TYPE_NORMAL
- en: '**To build more robust memory capabilities, it’s crucial to implement multi-step
    search functionality.** A single memory search often falls short of providing
    the comprehensive information needed for complex tasks. Implementing a series
    of interconnected searches could significantly enhance the agent’s ability to
    gather and synthesize relevant information.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The “teachability” feature, while powerful, should be approached with caution**.
    **Continuous activation without oversight risks data poisoning and compromise
    of trusted information sources**. Business leaders and solution architects should
    consider implementing a human-in-the-loop approach, allowing users to approve
    what the system learns versus treating every inference as ground truth the system
    should learn from. This oversight in Autogen’s current Teachable Agent design
    could cause significant risks associated with unchecked learning.'
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, the method of memory retrieval from a knowledge store plays a large
    role in the system’s effectiveness. **Moving beyond simple nearest neighbor searches,
    which is the TeachableAgent’s default, to more advanced techniques such as hybrid
    search** (combining keyword and vector approaches), **semantic search, or knowledge
    graph utilization** **could dramatically improve the relevance and accuracy of
    retrieved information**.
  prefs: []
  type: TYPE_NORMAL
- en: Descriptive Code Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To appropriately demonstrate how external memory can be valuable, I created
    a fictitious scenario for a car parts manufacturing plant. Follow the code below
    to implement a Teachable Agent yourself.
  prefs: []
  type: TYPE_NORMAL
- en: '***Scenario****: A car parts manufacturing facility needs to put a plan in
    place in case there are energy constraints. The plan needs to be flexible and
    adapt based on how much power consumption the facility can use and which parts
    and models are in demand.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1:**'
  prefs: []
  type: TYPE_NORMAL
- en: Pre- set up requires you to pip install autogen if you don’t have it installed
    in your active environment and create a config JSON file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example of a compatible config file which uses Azure OpenAI’s service model
    GPT4–o:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Autogen for python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 2:**'
  prefs: []
  type: TYPE_NORMAL
- en: Import the necessary libraries to your notebook or file and load the config
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 3:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create the Agents. We will need two agents because of the way that Autogen’s
    framework works. We use a UserProxyAgent to execute tasks and interact with or
    replace human involvement (depending on the desired amount of human in the loop).
    We also create a Conversable Agent as the “Teachable Agent” which is meant to
    interact with other agents (not the user). You can read more about the [UserProxyAgents](https://microsoft.github.io/autogen/docs/reference/agentchat/user_proxy_agent/)
    and [ConversableAgents](https://microsoft.github.io/autogen/docs/reference/agentchat/conversable_agent/)
    here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 4:**'
  prefs: []
  type: TYPE_NORMAL
- en: To have a baseline, let’s ask the same question to the agents before and after
    we “teach” it. I purposely decided to demonstrate different levels of question
    difficulty to show performance on tasks that require a single step vs multistep
    memory retrieval. To successfully address the intricate multi-step question, the
    retrieval mechanism must provide information from two separate memories as context
    to the language model responsible for generating a final response.
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple Question**: “The facility is experiencing a power shortage of 40%.
    What models need to be prioritized?”'
  prefs: []
  type: TYPE_NORMAL
- en: '**Complex Multi Step Question**: “The facility is experiencing a power shortage
    of 40%. Provide me a detailed breakdown of what machines should be deactivated
    and which machines should remain active.”'
  prefs: []
  type: TYPE_NORMAL
- en: As expected the responses are generic and not particularly applicable to an
    individual business.
  prefs: []
  type: TYPE_NORMAL
- en: '**Response prior to enabling long term memory:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Code to ask baseline questions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 5:**'
  prefs: []
  type: TYPE_NORMAL
- en: Create the “teachability” capability that you then add to the agent. The Teachability
    class inherits from the AgentCapabiliy class, which essentially allows you to
    add customizable capabilities to the Agents.
  prefs: []
  type: TYPE_NORMAL
- en: The Teachability class has many optional parameters that can be further explored
    [here](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_teachability.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: The out of the box Teachability class is a quick and convenient way of adding
    long term memory to the agents, but will likely need to be customized for use
    in a production setting, as outlined in the key findings section. It involves
    sending messages to an Analyzer Agent that evaluates the user messages for potential
    storage and retrieval. The Analyzer Agent looks for advice that could be applicable
    to similar tasks in the future and then summarizes and stores task-advice pairs
    in a binary database serving as the agent’s “memory”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 6:**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that the teachable_agent is configured, we need to provide it the information
    that we want the agent to “learn” (store in the database and retrieve from).
  prefs: []
  type: TYPE_NORMAL
- en: 'In line with our scenario, I wanted the agent to have basic understanding of
    the facility which consisted of:'
  prefs: []
  type: TYPE_NORMAL
- en: the types of components the manufacturing plant produces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the types of car models the components need to be made for
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: which machines are used to make each component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additionally, I wanted to provide some operational guidance on the priorities
    of the facility depending on how power constrained it is. This includes:'
  prefs: []
  type: TYPE_NORMAL
- en: Guidance in case of energy capacity constraint of more than 50%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guidance in case of energy capacity constraint between 25–50%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Guidance in case of energy capacity constraint between 0–25%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 7:**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have added important information to long term memory, let’s ask
    the Agent the same question and see the difference in its responses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple Question:** “The facility is experiencing a power shortage of 40%.
    What models need to be prioritized?”'
  prefs: []
  type: TYPE_NORMAL
- en: '**Complex Multi Step Question:** “The facility is experiencing a power shortage
    of 40%. Provide me a detailed breakdown of what machines should be deactivated
    and which machines should remain active.”'
  prefs: []
  type: TYPE_NORMAL
- en: '**Results after implementing long term memory:**'
  prefs: []
  type: TYPE_NORMAL
- en: The Teachable Agent was able to partially answer the simple question. It was
    correct on the car models that need to be prioritized, but it provided additional
    incorrect information about which components needed to be included.
  prefs: []
  type: TYPE_NORMAL
- en: The complex multi-step question was not adequately addressed. It erroneously
    merged two distinct business guidelines for 0–25% and 25–50% capacity constraints
    into a single, generalized guideline, resulting in an inaccurate response. Additionally,
    it only provided a partial list of machines that should remain active or be deactivated
    for each component’s production, omitting crucial details from the complete operational
    protocol. This demonstrates the challenges in accurately retrieving and synthesizing
    information from multiple, separate memory sources for complex queries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Autogen provides a straightforward introduction to AI systems with memory,
    it falls short in handling complex tasks effectively.
  prefs: []
  type: TYPE_NORMAL
- en: '***When developing your own AI Agent System with memory capabilities, consider
    focusing on these key capabilities****:*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Implement multi-step searches** to ensure comprehensive and relevant results.
    This allows the agent to assess the usefulness of search outcomes and address
    all aspects of a query using the retrieved information. Additionally, **consider
    using more advanced retrieval approaches** such as semantic search, hybrid search,
    or knowledge graphs for the best results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To limit the potential for data poisoning, **develop a thoughtful approach to
    who should be able to “teach” the agent and when the agent should “learning”**.
    Based on guidelines set by the business or developer, one can also use agent reasoning
    to determine if something should be added to memory and by whom.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the likelihood of retrieving out of date information by **adding a memory
    decaying mechanism** that determines when a memory is no longer relevant or a
    newer memory should replace it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**For multi-agent systems** involving group chats or inter-agent information
    sharing, **explore various communication patterns**. Determine the most effective
    methods for transferring supplemental knowledge and establish limits to prevent
    information overload.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note: The opinions expressed both in this article and paper are solely those
    of the authors and do not necessarily reflect the views or policies of their respective
    employers.'
  prefs: []
  type: TYPE_NORMAL
- en: If you still have questions or think that something needs to be further clarified?
    Drop me a DM on [Linkedin](https://www.linkedin.com/in/sandibesen/)! I‘m always
    eager to engage in food for thought and iterate on my work.
  prefs: []
  type: TYPE_NORMAL
