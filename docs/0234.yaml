- en: Arrays in Python and Excel VBA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/arrays-in-python-and-excel-vba-efd73b649d6d?source=collection_archive---------14-----------------------#2024-01-23](https://towardsdatascience.com/arrays-in-python-and-excel-vba-efd73b649d6d?source=collection_archive---------14-----------------------#2024-01-23)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learning about arrays through simple examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@himalaya.birshrestha?source=post_page---byline--efd73b649d6d--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page---byline--efd73b649d6d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--efd73b649d6d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--efd73b649d6d--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page---byline--efd73b649d6d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--efd73b649d6d--------------------------------)
    ·8 min read·Jan 23, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: As someone without a formal education in programming, my journey has been shaped
    by self-learning. Recognizing the significance of revisiting basic programming
    concepts, I have found that a solid foundation enhances the overall programming
    experience. In this tutorial, we will delve into one such fundamental concept
    — arrays. Specifically, we’ll explore the concept of arrays in both Python and
    Excel VBA through simple examples. Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f66043ed20c7b741ea145dcadfe8031d.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Nathan Dumlao](https://unsplash.com/@nate_dumlao?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Arrays in Python**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An array is a special variable that can hold one or multiple values of any data
    type. In Python, there is [no built-in support](https://www.w3schools.com/python/python_arrays.asp)
    for arrays, unlike similar data types such as lists. However, one can create arrays
    using the array module of the [numpy](https://numpy.org/doc/stable/index.html)
    package. The index of a numpy array object always starts with a 0\. The last item
    inside a numpy array can be accessed by referring to -1\. A numpy array can hold
    variables of a particular data type or multiple data types.
  prefs: []
  type: TYPE_NORMAL
- en: This is shown in the code snippet below. The snippet also shows how the shape
    (dimensions i.e., rows, columns), size (number of elements) and length (number
    of items in a container i.e., rows) can be accessed from a numpy array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**1.1 Using numpy arrays for algebraic matrix operations**'
  prefs: []
  type: TYPE_NORMAL
- en: Because of their flexible structure, numpy arrays are very handy in creating
    matrix objects of different dimensions and performing operations on them. The
    screenshot above has the examples of 1-dimensional array objects.
  prefs: []
  type: TYPE_NORMAL
- en: Below, I have created two array objects `a` and `b` both of which are 2-dimensional
    arrays. They can be considered as 2*2 matrices. Performing the dot product of
    the two matrices is as simple as doing just `np.dot(a, b)`. In dot product, `a`
    and `b` are regarded as vectors (objects having both magnitude and direction).
    In matrix multiplication, each element in matrix `a` is multiplied with the corresponding
    element in matrix `b`. For example, a11 (first row, first column item) is multiplied
    by b11, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Furthermore, one can perform other matrix operations such as addition, subtraction,
    and transpose. To get the determinant of the matrix, one can use `np.linalg.det(a)`.
    To get the multiplicative inverse of a matrix, one can use `np.linalg.inv(a)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**1.2 Creating a m*n shape numpy array from list objects**'
  prefs: []
  type: TYPE_NORMAL
- en: I have two lists called `countries_lived` and `capitals` which contain the list
    of countries I have lived in and their corresponding capitals.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To create an array containing these list objects, I can use `np.array([countries_lived,
    capitals])`. This will return me an array of shape 2*4 (i.e., 2 rows and 4 columns).
    If I want to have a single country and its corresponding capital in the same row,
    I can just transpose the same array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 1.3 Appending an item to a numpy array and creating a dataframe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Say I want to append an item France and Paris to `array2` as an additional row,
    this can be done using the syntax `np.append(arr, values, axis = None)`. The values
    must be of the same shape as `arr`, excluding the axis. If the axis is not given,
    both arr and values are flattened before use.
  prefs: []
  type: TYPE_NORMAL
- en: As shown below, I appended the new item as a new row to the array. Finally,
    the `array2` of shape (5,2) is used to create a dataframe object `df` with Country
    and Capital columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Arrays in Excel VBA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to Python, arrays are also a collection of variables in Excel VBA. The
    lower bound for arrays can start from either 0 or 1 in Excel VBA. The default
    lower bound is 0\. However, the lower bounds for arrays can be specified by stating
    `Option Base 0` or `Option Base 1` on the top ofeach module.
  prefs: []
  type: TYPE_NORMAL
- en: To detect the lower bound and upper bound used for an array, one can use `Lbound(array_name)`
    and `Ubound(array_name)` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**2.1 Declaring an array**'
  prefs: []
  type: TYPE_NORMAL
- en: Arrays can be declared publicly (i.e. globally) by using the `Public` keyword.
    Declaring an array or any other variable publicly in Excel VBA allows it to be
    used in any module or subroutine without declaring again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, arrays can be declared locally inside a subroutine simply using
    the `Dim` keyword. These arrays can then be used only inside the specific subroutine.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the above examples, the size of the arrays is also specified. Specifying
    1 to 4 or only 4 both imply the array of size 4.
  prefs: []
  type: TYPE_NORMAL
- en: '**2.2 One-dimensional array**'
  prefs: []
  type: TYPE_NORMAL
- en: A one-dimensional array is assigned by declaring the number of rows (e.g., 1
    to 5) i.e., the number of elements to be contained by an array. An example of
    creating a 1-dimensional array of the four countries I have lived in is given
    below. It will print the name of these countries in column A in the worksheet
    of the Excel file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the running the `array_1d` subroutine is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98813e9fa922046d745c6bd04c89ee36.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of array_1d subroutine. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**2.2 2-dimensional array**'
  prefs: []
  type: TYPE_NORMAL
- en: Two-dimensional arrays are defined by declaring the number of rows and columns.
    In the following example, I declare a 2-dimensional array called `country_capital`.
    The first element in each row corresponds to the element of the `countries`array
    declared in the previous section. The second element in each row corresponds to
    their capital cities which have been declared individually in the code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this sub-routine returns the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bf21b342e5a6abf274ac8e8deed484e9.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of array_2d subroutine. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**2.3 Dynamic arrays**'
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic arrays are useful in cases when one is not certain about the size of
    the array and the size of the array can change in the future. In the code below,
    I specify two arrays `countries_visited` and `population` without specifying the
    size of the arrays. Inside the `dynamic_array` subroutine, I specify the size
    of both of these arrays as 4 by using the `ReDim` statement. Next, I specify each
    element of the array individually based on the four countries I have visited and
    their populations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: After a while, I realize that I have also visited one more country (Portugal).
    I redefine the size of the array while preserving the original contents/elements
    in these arrays. I increase the size of these arrays by 1\. For this, I use the
    `ReDim Preserve` statement as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The full code is given below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the above code is as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/53b0ee04a2d02ab0aaa51c25d3e5f899.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of dynamic_array subroutine. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**2.4 Declaring arrays to store variables of different data types**'
  prefs: []
  type: TYPE_NORMAL
- en: In the section above, the `countries_visited` array is declared to store the
    variables of the *String* data type and the `population` array is declared to
    store the variables of the *Long* data type. Similar to Python numpy arrays, it
    is also possible to store variables of different data types in arrays in Excel
    VBA. In that case, the array has be to declared as a `Variant` type.
  prefs: []
  type: TYPE_NORMAL
- en: In the example below, an array `test` is declared as a *Variant*. Its size is
    specified as 3 using the `ReDim` statement. The three elements of types *String*,
    *Integer,* and *Date* are specified inside the `test`. The data types can be identified
    by passing the variable inside the `TypeName()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/11ecf26f56ad68da974831b0b645b8b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of variant_test subroutine. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Arrays are a collection of values/variables of one or more data types. Each
    variable is associated with a particular index number in an array. Arrays can
    be of one-dimension, two-dimensions, or multiple dimensions. In Python, there
    is no built-in support for arrays, but one can create arrays using the numpy package.
    Besides storing the values, the numpy arrays are also very useful in performing
    matrix operations. In Excel VBA, arrays are very useful in working with large
    databases of elements. In Excel VBA, an array can be static where the size of
    the array is pre-defined. Or array can be dynamic where the size of the array
    is not pre-defined, but it can be specified as we move along and even resized
    while preserving the elements already stored in the array.
  prefs: []
  type: TYPE_NORMAL
- en: The Python notebook, Excel workbook along with VBA scripts are available in
    this [GitHub repository](https://github.com/hbshrestha/Data_Analytics). Thank
    you for reading!
  prefs: []
  type: TYPE_NORMAL
