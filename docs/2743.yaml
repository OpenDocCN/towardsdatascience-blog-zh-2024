- en: Calibrating Marketing Mix Models In Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/calibrating-marketing-mix-models-in-python-49dce1a5b33d?source=collection_archive---------3-----------------------#2024-11-11](https://towardsdatascience.com/calibrating-marketing-mix-models-in-python-49dce1a5b33d?source=collection_archive---------3-----------------------#2024-11-11)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Part 2 of a hands-on guide to help you master MMM in pymc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@raz1470?source=post_page---byline--49dce1a5b33d--------------------------------)[![Ryan
    O''Sullivan](../Images/7cd161d38d67d2c0b7da2d8f3e7d33fe.png)](https://medium.com/@raz1470?source=post_page---byline--49dce1a5b33d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--49dce1a5b33d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--49dce1a5b33d--------------------------------)
    [Ryan O''Sullivan](https://medium.com/@raz1470?source=post_page---byline--49dce1a5b33d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--49dce1a5b33d--------------------------------)
    ·11 min read·Nov 11, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a0f58172d399a875389bad12c2003712.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: What is this series about?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to part 2 of my series on marketing mix modeling (MMM), a hands-on guide
    to help you master MMM. Throughout this series, we’ll cover key topics such as
    model training, validation, calibration and budget optimisation, all using the
    powerful **pymc-marketing** python package. Whether you’re new to MMM or looking
    to sharpen your skills, this series will equip you with practical tools and insights
    to improve your marketing strategies.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you missed part 1 check it out here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/mastering-marketing-mix-modelling-in-python-7bbfe31360f9?source=post_page-----49dce1a5b33d--------------------------------)
    [## Mastering Marketing Mix Modelling In Python'
  prefs: []
  type: TYPE_NORMAL
- en: Part 1 of a hands-on guide to help you master MMM in pymc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/mastering-marketing-mix-modelling-in-python-7bbfe31360f9?source=post_page-----49dce1a5b33d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the second instalment of this series we will shift our focus to calibrating
    our models using informative priors from experiments:'
  prefs: []
  type: TYPE_NORMAL
- en: Why is it important to calibrate marketing mix models?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can we use Bayesian priors to calibrate our model?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What experiments can we run to inform our Bayesian priors?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will then finish off with a walkthrough in Python using the **pymc-marketing**
    package to calibrate the model we built in the first article.
  prefs: []
  type: TYPE_NORMAL
- en: 'The full notebook can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/raz1470/pymc_marketing/blob/main/notebooks/2.%20calibrating%20marketing%20mix%20models%20%28MMM%29%20in%20python.ipynb?source=post_page-----49dce1a5b33d--------------------------------)
    [## pymc_marketing/notebooks/2\. calibrating marketing mix models (MMM) in python.ipynb
    at main ·…'
  prefs: []
  type: TYPE_NORMAL
- en: A demo of the MMM package pymc_marketing. Contribute to raz1470/pymc_marketing
    development by creating an account on…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/raz1470/pymc_marketing/blob/main/notebooks/2.%20calibrating%20marketing%20mix%20models%20%28MMM%29%20in%20python.ipynb?source=post_page-----49dce1a5b33d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 1.0 Calibrating marketing mix models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Marketing mix modelling (MMM) is a statistical technique used to estimate the
    impact of various marketing channels (such as TV, social media, paid search) on
    sales. The goal of MMM is to understand the return on investment (ROI) of each
    channel and optimise future marketing spend.
  prefs: []
  type: TYPE_NORMAL
- en: There are several reasons why we need to calibrate our models. Before we get
    into the python walkthrough let’s explore them a bit!
  prefs: []
  type: TYPE_NORMAL
- en: 1\. 1 Why is it important to calibrate marketing mix models?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Calibrating MMM is crucial because, while they provide valuable insights, they
    are often limited by several factors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Multi-collinearity:** This occurs when different marketing channels are highly
    correlated, making it difficult to distinguish their individual effects. For example,
    TV and social may run simultaneously, causing overlap in their impacts. Calibration
    helps untangle the effects of these channels by incorporating additional data
    or constraints.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unobserved confounders:** MMM models rely on observed data, but they may
    miss important variables that also affect both marketing and sales, such as seasonality
    or changes in market demand. Calibration can help adjust for these unobserved
    confounders.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/68daffe027c9c869f3578b756419d9d3.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image (excalidraw)
  prefs: []
  type: TYPE_NORMAL
- en: '**Re-targeting bias:** Have you ever visited a website for a product and then
    found that all of your social media platforms are now suddenly “coincidently”
    showing you ads for that product? This isn’t a coincidence, it’s what we call
    retargeting and it can be effective. However, a number of prospects who get retargeted
    and then go on to purchase would have anyway!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Without proper calibration, these issues can lead to inaccurate estimates of
    marketing channel performance, resulting in poor decision-making on marketing
    spend and strategy.
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 How can we use Bayesian priors to calibrate our models?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the last article we talked about how Bayesian priors represent our initial
    beliefs about the parameters in the model, such as the effect of TV spend on sales.
    We also covered how the default parameters in **pymc-marketing** were sensible
    choices but weakly informative. Supplying informative priors based on experiments
    can help calibrate our models and deal with the issues raised in the last section.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/09be29c95962045bad0dd42d193c19b4.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image (excalidraw)
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a couple of ways in which we can supply priors in **pymc-marketing**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the default saturation_beta priors directly like in the example below
    using a truncated normal distribution to enforce positive values:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the add_lift_test_measurements method, which adds a new likelihood term
    to the model which helps calibrate the saturation curve (don’t worry, we will
    cover this in more detail in the python walkthrough):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[## lift_test - Open Source Marketing Analytics Solution'
  prefs: []
  type: TYPE_NORMAL
- en: Adding lift tests as observations of saturation function. This provides the
    inner workings of…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.pymc-marketing.io](https://www.pymc-marketing.io/en/stable/api/generated/pymc_marketing.mmm.lift_test.html?source=post_page-----49dce1a5b33d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'What if you aren’t comfortable with Bayesian analysis? Your alternative is
    running a constrained regression using a package like cvxpy. Below is an example
    of how you can do that using upper and lower bounds for the coefficients of variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 1.3 What experiments can we run to inform our Bayesian priors?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Experiments can provide strong evidence to inform the priors used in MMM. Some
    common experiments include:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d28e5030229ad7f14f05a6b055c9363d.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image (excalidraw)
  prefs: []
  type: TYPE_NORMAL
- en: '**Conversion lift tests —** These tests are often run on platforms like Facebook,
    YouTube, Snapchat, TikTok and DV360, where users are randomly split into a test
    and control group. The test group is exposed to the marketing campaign, while
    the control group is not. The difference in conversion rates between the two groups
    informs the actual lift attributable to the channel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Geo-lift tests —** In a geo-lift test, marketing efforts are turned off in
    certain geographic regions while continuing in others. By comparing the performance
    in test and control regions, you can measure the incremental impact of marketing
    in each region. The CausalPy python package has an easy to use implementation
    which is worth checking out:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://causalpy.readthedocs.io/en/stable/notebooks/geolift1.html?source=post_page-----49dce1a5b33d--------------------------------)
    [## Bayesian geolift with CausalPy - CausalPy 0.4.0 documentation'
  prefs: []
  type: TYPE_NORMAL
- en: This notebook covers how to use 's Bayesian synthetic control functionality
    to assess 'geolift'. Our hypothetical…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: causalpy.readthedocs.io](https://causalpy.readthedocs.io/en/stable/notebooks/geolift1.html?source=post_page-----49dce1a5b33d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**Switch-back testing —** This method involves quickly switching marketing
    campaigns on and off over short intervals to observe changes in consumer behavior.
    It’s most applicable to channels with an immediate impact, like paid search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By using these experiments, you can gather strong empirical data to inform your
    Bayesian priors and further improve the accuracy and calibration of your Marketing
    Mix Model.
  prefs: []
  type: TYPE_NORMAL
- en: 2.0 Python walkthrough
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we understand why we need to calibrate our models, let’s calibrate our
    model from the first article! In this walkthrough we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Simulating data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulating experimental results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-processing the experimental results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calibrating the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validating the model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.1 Simulating data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to start by simulating the data used in the first article. If
    you want to understand more about the data-generating-process take a look at the
    first article where we did a detailed walkthrough:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/mastering-marketing-mix-modelling-in-python-7bbfe31360f9?source=post_page-----49dce1a5b33d--------------------------------)
    [## Mastering Marketing Mix Modelling In Python'
  prefs: []
  type: TYPE_NORMAL
- en: Part 1 of a hands-on guide to help you master MMM in pymc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/mastering-marketing-mix-modelling-in-python-7bbfe31360f9?source=post_page-----49dce1a5b33d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: When we trained the model in the first article, the contribution of TV, social,
    and search were all overestimated. This appeared to be driven by the demand proxy
    not contributing as much as true demand. So let’s pick up where we left off and
    think about running an experiment to deal with this!
  prefs: []
  type: TYPE_NORMAL
- en: 2.2 Simulating experimental results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To simulate some experimental results, we write a function which takes in the
    known parameters for a channel and outputs the true contribution for the channel.
    Remember, in reality we would not know these parameters, but this exercise will
    help us understand and test out the calibration method from **pymc-marketing**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Below we use the function to create results for an 8 week lift test on TV:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/82ca31f7bb5e906574175cff8124b1c4.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: Even though we spend the same amount on TV each week, the contribution of TV
    varies each week. This is driven by the adstock effect and our best option here
    is to take the average weekly contribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b87fa975b77daba3d51a287bcb99f5a1.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: 2.3 Pre-processing the experimental results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we have collected the experimental results, we need to pre-process them
    to get them into the required format to add to our model. We will need to supply
    the model a dataframe with 1 row per experiment in the following format:'
  prefs: []
  type: TYPE_NORMAL
- en: '`channel`: The channel that was tested'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x`: Pre-test channel spend'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delta_x`: Change made to `x`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delta_y`: Inferred change in sales due to `delta_x`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sigma`: Standard deviation of `delta_y`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We didn’t simulate experimental results with a measure of uncertainty, so to
    keep things simple we set sigma as 5% of lift.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/31c7f7ff61f7e48e2004d04e86bcda7c.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: In terms of sigma, ideally you would have a measure of uncertainty for your
    results (which you could get from most conversion lift or geo-lift tests).
  prefs: []
  type: TYPE_NORMAL
- en: 2.4 Calibrating the model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are now going to re-train the model from the first article. We will prepare
    the training data in the same way as last time by:'
  prefs: []
  type: TYPE_NORMAL
- en: Splitting data into features and target.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating indices for train and out-of-time slices — The out-of-time slice will
    help us validate our model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we load the model which we saved from the first article and re-train the
    model after adding the experimental results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We won’t focus on the model diagnostics this time round, but you can check out
    the notebook if you would like to go through it.
  prefs: []
  type: TYPE_NORMAL
- en: 2.5 Validating the model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'So let’s assess how our new model compares to the true contributions now. Below
    we inspect the true contributions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/775f5cc4b1d5e6bd935488919049ea2b.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: When we compare the true contributions to our new model, we see that the contribution
    of TV is now very close (and much closer than the model from our first article
    where the contribution was 24%!).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2b659394dc0db5dcd50d4458f33da52e.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: The contribution for search and social is still overestimated, but we could
    also run experiments here to deal with this.
  prefs: []
  type: TYPE_NORMAL
- en: Closing thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Today we showed you how we can incorporate priors using experimental results.
    The **pymc-marketing** package makes things easy for the analyst running the model.
    If you want to go a little deeper into the working, checkout their tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.pymc-marketing.io/en/stable/notebooks/mmm/mmm_lift_test.html?source=post_page-----49dce1a5b33d--------------------------------)
    [## Lift Test Calibration - Open Source Marketing Analytics Solution'
  prefs: []
  type: TYPE_NORMAL
- en: You may have heard of the phrase " All models are wrong but some are useful.
    " This is true in many areas, and it's…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.pymc-marketing.io](https://www.pymc-marketing.io/en/stable/notebooks/mmm/mmm_lift_test.html?source=post_page-----49dce1a5b33d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: However, don’t be fooled….There are still some major challenges on your road
    to a well calibrated model!
  prefs: []
  type: TYPE_NORMAL
- en: Logistical challenges in terms of constraints around how many geographic regions
    vs channels you have or struggling to get buy-in for experiments from the marketing
    team are just a couple of those challenges.
  prefs: []
  type: TYPE_NORMAL
- en: One thing worth considering is running one complete blackout on marketing and
    using the results as priors to inform demand/base sales. This helps with the logistical
    challenge and also improves the power of your experiment (as the effect size increases).
  prefs: []
  type: TYPE_NORMAL
- en: I hope you enjoyed the second instalment! Follow me if you want to continue
    this path towards mastering MMM— In the next article we will start to think about
    how we can optimise marketing budgets!
  prefs: []
  type: TYPE_NORMAL
