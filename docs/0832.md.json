["```py\ndef find_max_name_length(df: pd.DataFrame) -> int:\n    df[\"name_len\"] = df[\"name\"].str.len()  # side effect\n    return max(df[\"name_len\"])\n```", "```py\ndef find_max_name_length(df: pd.DataFrame) -> int:\n    lengths: pd.Series = df[\"name\"].str.len()\n    return max(lengths)\n```", "```py\ndf = pd.DataFrame({\"name\": [\"bert\", \"albert\"]})\n\nseries = df[\"name\"]     # shallow copy\nseries[0] = \"roberta\"   # <-- this changes the original DataFrame\n\nseries = df[\"name\"].copy(deep=True)\nseries[0] = \"roberta\"   # <-- this does not change the original DataFrame\n\nseries = df[\"name\"].str.title()  # not a copy whatsoever\nseries[0] = \"roberta\"   # <-- this does not change the original DataFrame\n```", "```py\ndef create_name_len_col(series: pd.Series) -> pd.Series:\n    return series.str.len()\n\ndef find_max_element(collection: Collection) -> int:\n    return max(collection) if len(collection) else 0\n\ndf = pd.DataFrame({\"name\": [\"bert\", \"albert\"]})\ndf[\"name_len\"] = create_name_len_col(df.name)\nmax_name_len = find_max_element(df.name_len)\n```", "```py\ndef compute_length(word: str) -> int:\n    return len(word)\n\ndef prepare_data(df: pd.DataFrame) -> pd.DataFrame:\n    return pd.concat([\n        df.copy(deep=True),  # deep copy\n        df.name.apply(compute_length).rename(\"name_len\"),\n        ...\n    ], axis=1)\n```", "```py\ndef create_name_len_col(df: pd.DataFrame, orig_col: str, target_col: str) -> pd.Series:\n    return df[orig_col].str.len().rename(target_col)\n\nname_label, name_len_label = \"name\", \"name_len\"\npd.concat([\n    df,\n    create_name_len_col(df, name_label, name_len_label)\n], axis=1)\n```", "```py\ndef find_max_name_length(df: pd.DataFrame) -> int:\n    df[\"name_len\"] = df[\"name\"].str.len()  # side effect\n    return max(df[\"name_len\"])\n\n@pytest.mark.parametrize(\"df, result\", [\n    (pd.DataFrame({\"name\": []}), 0),  # oops, this fails!\n    (pd.DataFrame({\"name\": [\"bert\"]}), 4),\n    (pd.DataFrame({\"name\": [\"bert\", \"roberta\"]}), 7),\n])\ndef test_find_max_name_length(df: pd.DataFrame, result: int):\n    assert find_max_name_length(df) == result\n```", "```py\ndef create_name_len_col(series: pd.Series) -> pd.Series:\n    return series.str.len()\n\n@pytest.mark.parametrize(\"series1, series2\", [\n    (pd.Series([]), pd.Series([])),\n    (pd.Series([\"bert\"]), pd.Series([4])),\n    (pd.Series([\"bert\", \"roberta\"]), pd.Series([4, 7]))\n])\ndef test_create_name_len_col(series1: pd.Series, series2: pd.Series):\n    pd.testing.assert_series_equal(create_name_len_col(series1), series2, check_dtype=False)\n```", "```py\ndef compute_length(word: Optional[str]) -> int:\n    return len(word) if word else 0\n\n@pytest.mark.parametrize(\"word, length\", [\n    (\"\", 0),\n    (\"bert\", 4),\n    (None, 0)\n])\ndef test_compute_length(word: str, length: int):\n    assert compute_length(word) == length\n```", "```py\ndef find_max_element(collection: Collection) -> int:\n    return max(collection) if len(collection) else 0\n\n@pytest.mark.parametrize(\"collection, result\", [\n    ([], 0),\n    ([4], 4),\n    ([4, 7], 7),\n    (pd.Series([4, 7]), 7),\n])\ndef test_find_max_element(collection: Collection, result: int):\n    assert find_max_element(collection) == result\n```"]