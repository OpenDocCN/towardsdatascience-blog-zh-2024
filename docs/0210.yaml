- en: Tips and Tricks to Organize Jupyter Notebook Visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/an-easier-way-to-wrangle-jupyter-notebook-visualizations-620a86cd9279?source=collection_archive---------2-----------------------#2024-01-22](https://towardsdatascience.com/an-easier-way-to-wrangle-jupyter-notebook-visualizations-620a86cd9279?source=collection_archive---------2-----------------------#2024-01-22)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Optimize your data science workflow by automating matplotlib output — with 1
    line of code. Here’s how.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mmore500?source=post_page---byline--620a86cd9279--------------------------------)[![Matthew
    Andres Moreno](../Images/ca7da9fd9e5c744ee0ebd2aa5d979eb5.png)](https://medium.com/@mmore500?source=post_page---byline--620a86cd9279--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--620a86cd9279--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--620a86cd9279--------------------------------)
    [Matthew Andres Moreno](https://medium.com/@mmore500?source=post_page---byline--620a86cd9279--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--620a86cd9279--------------------------------)
    ·6 min read·Jan 22, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Naming things is hard. After a long enough day, we’ve all ended up with the
    highly-descriptive likes of “`graph7(1)_FINAL(2).png`” and “`output.pdf`" Look
    familiar?
  prefs: []
  type: TYPE_NORMAL
- en: We can do better — and quite easily, actually.
  prefs: []
  type: TYPE_NORMAL
- en: When we use data-oriented “*seaborn*-esque” plotting mechanisms, the ingredients
    for a descriptive filename are all there. A typical call looks like this,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Right there we know we’ve got “`total_bill`” on the ***x* axis**, “`time`” **color
    coded**, etc. So what if we used the **plotting function name** and those semantic
    **column keys** to organize the output for us?
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what that workflow looks like, using the ***teeplot***tool.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2ff934bb137db56e6f6e5497ab52e969.png)'
  prefs: []
  type: TYPE_IMG
- en: teeplots/hue=time+viz=scatterplot+x=total-bill+y=tip+ext=.eps
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: teeplots/hue=time+viz=scatterplot+x=total-bill+y=tip+ext=.pdf
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We’ve actually done ***three things*** in this example — *1)* we rendered the
    plot in the notebook and *2)* we’ve saved our visualization to file with a meaningful
    filename and *3)* we’vehooked our visualization into a framework where notebook
    outputs can be***managed at a global level (***in this case, enabling *eps/pdf*
    output*).*
  prefs: []
  type: TYPE_NORMAL
- en: This article will explain how to harness the ***teeplot*** Python package to
    get better organized and free up your mental workload to focus on more interesting
    things.
  prefs: []
  type: TYPE_NORMAL
- en: I am the primary author and maintainer of the project, which I have used in
    my own workflow for several years and found useful enough to package and share
    more widely with the community. ***teeplot*** is open source under the MIT license.
  prefs: []
  type: TYPE_NORMAL
- en: The teeplot Workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '***teeplot*** is designed to simplify work with data visualizations created
    with libraries like *matplotlib*, *seaborn*, and *pandas*. It acts as a wrapper
    around your plotting calls to handle output management for you.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/947b3f58acf23f40400530b4c26d3d85.png)'
  prefs: []
  type: TYPE_IMG
- en: teeplot workflow in action
  prefs: []
  type: TYPE_NORMAL
- en: Here’s how to **use *teeplot*** in **3 steps**,
  prefs: []
  type: TYPE_NORMAL
- en: '**Choose Your Plotting Function:** Start by selecting your preferred plotting
    function, whether it’s from *matplotlib*, *seaborn*, *pandas*, etc. or one you
    wrote yourself.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Add Your Plotting Arguments:** Pass your plotting function as the first argument
    to `tee`, followed by the arguments you want to use for your visualization.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Automatic Plotting and Saving:** *teeplot* captures your plotting function
    and its arguments, executes the plot, and then takes care of wrangling the plot
    outputs for you.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it!
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let’s look at **3 brief examples** that demonstrate: **a)** *basic use*,
    **b)** *custom post-processing*, and **c)** *custom plotting functions*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1: Using a built-in pandas Plotter'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this example, we pass a DataFrame `df`’s member function `df.plot.box` as
    our plotter and two semantic keys: “age” and “gender.” *teeplot* takes care of
    the rest.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: teeplots/by=gender+column=age+viz=box+ext=.pdf
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: teeplots/by=gender+column=age+viz=box+ext=.png
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/020f0d97db5ab73a7ef2c6468a875d52.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Example 2: Matplotlib with Manual Tweaks'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like it or not, getting good results from matplotlib and its derivative libraries
    often requires some manual tweaks after the initial plotting call.
  prefs: []
  type: TYPE_NORMAL
- en: '*teeplot* fully supports this pattern. Just pass the `teeplot_callback` kwarg,
    and teeplot will give you back a callable handle in addition to the output of
    the initial plotting call. After you’ve finished adjusting your plot, just invoke
    the handle to save and display as usual.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: teeplots/c=profit+s=carbon+viz=scatter+x=weight+y=price+ext=.eps
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/ff2943c73549e3d6bd14cb4efc52cfdc.png)'
  prefs: []
  type: TYPE_IMG
- en: Note the `__` value unpacked from the `tp.tee` call above. This is because `plt.scatter`’s
    return value is a line collection that’s not useful for our tweaks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 3: Custom Plotter'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Custom plotters work just like external library plotters — *teeplot* can infer
    your plotting function’s name for the `viz=` output key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: teeplots/amount=4+descriptor=good+subject=who+viz=cuteplot+ext=.png
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: teeplots/amount=4+descriptor=good+subject=who+viz=cuteplot+ext=.pdf
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/93d5c7a746f966f71dc9282d108a9152.png)'
  prefs: []
  type: TYPE_IMG
- en: via seaborn-data, BSD License/Copyright © 2012–2023, Michael L. Waskom
  prefs: []
  type: TYPE_NORMAL
- en: Shout-out `sns.dogplot`… always a howl!
  prefs: []
  type: TYPE_NORMAL
- en: Further Information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/637567441a096bd6d8840f8f4185fc29.png)'
  prefs: []
  type: TYPE_IMG
- en: And that’s all there is to it!
  prefs: []
  type: TYPE_NORMAL
- en: I’ve been using this tool regularly for the last two years, and recently decided
    to take the time to package it up and share. Hope it can be an asset to the community.
  prefs: []
  type: TYPE_NORMAL
- en: The *teeplot* library has a few additional advanced features beyond what was
    covered here, like configurability via environment variables (useful in CI!).
    You can read more in the project’s [*usage guide*](https://github.com/mmore500/teeplot/blob/master/README.rst#usage)
    and [*API listing*](https://github.com/mmore500/teeplot/blob/master/README.rst#api).
    The project is open source on GitHub at [*mmore500/teeplot*](https://github.com/mmore500/teeplot)*—
    consider leaving a ⭐️!*
  prefs: []
  type: TYPE_NORMAL
- en: '*teeplot* can be installed as `python3 -m pip install teeplot`'
  prefs: []
  type: TYPE_NORMAL
- en: Authorship
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This tutorial is contributed by me, [Matthew Andres Moreno](https://mmore500.com/).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a74bc3879e65ad0ded64e1e434af933.png)'
  prefs: []
  type: TYPE_IMG
- en: I currently serve as a postdoctoral scholar at the [University of Michigan](https://umich.edu),
    where my work is supported by the Eric and Wendy Schmidt AI in Science Postdoctoral
    Fellowship, a Schmidt Futures program.
  prefs: []
  type: TYPE_NORMAL
- en: My appointment is split between the university’s Ecology and Evolutionary Biology
    Department, the Center for the Study of Complexity, and the Michigan Institute
    for Data Science.
  prefs: []
  type: TYPE_NORMAL
- en: Find me on Twitter as [@MorenoMatthewA](https://twitter.com/morenomatthewa)
    and on GitHub as [@mmore500](https://github.com/mmore500/).
  prefs: []
  type: TYPE_NORMAL
- en: '*Disclaimer*: I am the `teeplot` library author.'
  prefs: []
  type: TYPE_NORMAL
- en: Citations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*J. D. Hunter, “Matplotlib: A 2D Graphics Environment”, Computing in Science
    & Engineering, vol. 9, no. 3, pp. 90–95, 2007\.* [*https://doi.org/10.1109/MCSE.2007.55*](https://doi.org/10.1109/MCSE.2007.55)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Data structures for statistical computing in python, McKinney, Proceedings
    of the 9th Python in Science Conference, Volume 445, 2010\.* [*https://doi.org/*](https://doi.org/)
    *10.25080/Majora-92bf1922–00a*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Matthew Andres Moreno. (2023). mmore500/teeplot. Zenodo.* [*https://doi.org/10.5281/zenodo.10440670*](https://doi.org/10.5281/zenodo.10440670)'
  prefs: []
  type: TYPE_NORMAL
- en: '*Waskom, M. L., (2021). seaborn: statistical data visualization. Journal of
    Open Source Software, 6(60), 3021,* [*https://doi.org/10.21105/joss.03021.*](https://doi.org/10.21105/joss.03021.)'
  prefs: []
  type: TYPE_NORMAL
- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install dependencies for examples in this article,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*Unless otherwise noted, all images are works of the author. “dogplot” image
    is via seaborn, find the a copy of the seaborn license* [*here*](https://github.com/mwaskom/seaborn/blob/master/LICENSE.md)*.*'
  prefs: []
  type: TYPE_NORMAL
