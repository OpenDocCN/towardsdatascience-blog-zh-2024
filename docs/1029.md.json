["```py\nconda install -c conda-forge gdal\n```", "```py\npip install deepdespeckling\n```", "```py\nfrom deepdespeckling.utils.load_cosar import cos2mat\nfrom deepdespeckling.utils.constants import PATCH_SIZE, STRIDE_SIZE\nfrom deepdespeckling.merlin.merlin_denoiser import MerlinDenoiser\n\n# Path to one image (cos or npy file)\nimage_path=\"path/to/cosar/image\"\n# Model name, can be \"spotlight\", \"stripmap\" or \"Sentinel-TOPS\"\nmodel_name = \"spotlight\"\nsymetrise = True\n\nimage = cos2mat(image_path).astype(np.float32)\n\ndenoiser = MerlinDenoiser(model_name=model_name, symetrise=symetrise)\ndenoised_image = denoiser.denoise_image(image, patch_size=PATCH_SIZE, stride_size=STRIDE_SIZE)\n```", "```py\nfrom deepdespeckling.utils.load_cosar import cos2mat\nfrom deepdespeckling.utils.constants import PATCH_SIZE, STRIDE_SIZE\nfrom deepdespeckling.sar2sar.sar2sar_denoiser import Sar2SarDenoiser\n\n# Path to one image (tiff or npy file)\nimage_path=\"path/to/cosar/image\"\n\n# Works exactly the same as with MERLIN\nimage = cos2mat(image_path).astype(np.float32)\n\n# Denoise the image with SAR2SAR\ndenoiser = Sar2SarDenoiser()\ndenoised_image = denoiser.denoise_image(image, patch_size=PATCH_SIZE, stride_size=STRIDE_SIZE)\n```", "```py\nfrom deepdespeckling.despeckling import despeckle\n\n# Path to a folder of several images \n# images have to be in .tiff or .npy formats if using sar2sar \n# images have to be in .cos or .npy formats is using merlin (\"spotlight\", \"stripmap\" or \"Sentinel-TOPS\")\nimage_path=\"path/to/cosar/image\"\n# Folder where results are stored\ndestination_directory=\"path/where/to/save/results\"\n\n# Can be \"sar2sar\", \"spotlight' or \"stripmap\"\nmodel_name = \"spotlight\"\n# symetrise parameter if using \"spotlight\", \"stripmap\" or \"Sentinel-TOPS\" (harmless if using \"sar2sar\")\nsymetrise = True\n\ndespeckle(image_path, destination_directory, model_name=model_name, symetrise=symetrise)\n```", "```py\nfrom deepdespeckling.despeckling import despeckle_from_coordinates\n\n# Path to a folder of several images \n# images have to be in .tiff or .npy formats if using sar2sar \n# images have to be in .cos or .npy formats is using merlin (\"spotlight\", \"stripmap\" or \"Sentinel-TOPS\")\nimage_path=\"path/to/cosar/image\"\n# Folder where results are stored\ndestination_directory=\"path/where/to/save/results\"\n# Example of coordinates of the subparts of the images to be despeckled\ncoordinates_dictionnary = {'x_start':2600,'y_start':1000,'x_end':3000,'y_end':1200}\n\n# Can be \"sar2sar\", \"spotlight\", \"stripmap\" or \"Sentinel-TOPS\"\nmodel_name = \"spotlight\"\n# symetrise parameter if using \"spotlight\", \"stripmap\" or \"Sentinel-TOPS\" (harmless if using \"sar2sar\")\nsymetrise = True\n\ndespeckle_from_coordinates(image_path, coordinates_dict, destination_directory, \n                            model_name=model_name, symetrise=symetrise)\n```", "```py\nfrom deepdespeckling.merlin.inference.despeckling import despeckle_from_crop\n\n# Path to a folder of several images \n# images have to be in .tiff or .npy formats if using sar2sar \n# images have to be in .cos or .npy formats is using merlin (\"spotlight\", \"stripmap\" or \"Sentinel-TOPS\")\nimage_path=\"path/to/cosar/image\"\n# Folder where results are stored\ndestination_directory=\"path/where/to/save/results\"\n\n# If True it will crop a 256*256 image from the position of your click\n# If False you will draw free-handly the area of your interest\nfixed = True\n# Can be \"sar2sar\", \"spotlight\", \"stripmap\" or \"Sentinel-TOPS\"\nmodel_name = \"spotlight\"\n# symetrise parameter if using \"spotlight\"\"stripmap\" or \"Sentinel-TOPS\" (harmless if using \"sar2sar\")\nsymetrise = True\n\ndespeckle_from_crop(image_path, destination_directory, model_name=model_name, fixed=fixed, symetrise=symetrise)\n```"]