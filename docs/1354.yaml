- en: Constructive Heuristics in Discrete Optimization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**离散优化中的构造性启发式**'
- en: 原文：[https://towardsdatascience.com/constructive-heuristics-in-discrete-optimization-f6a41bf26d01?source=collection_archive---------5-----------------------#2024-05-30](https://towardsdatascience.com/constructive-heuristics-in-discrete-optimization-f6a41bf26d01?source=collection_archive---------5-----------------------#2024-05-30)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/constructive-heuristics-in-discrete-optimization-f6a41bf26d01?source=collection_archive---------5-----------------------#2024-05-30](https://towardsdatascience.com/constructive-heuristics-in-discrete-optimization-f6a41bf26d01?source=collection_archive---------5-----------------------#2024-05-30)
- en: Obtain initial solutions for combinatorial optimization problems with Python
    examples
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Python示例为组合优化问题获得初始解
- en: '[](https://medium.com/@bruscalia12?source=post_page---byline--f6a41bf26d01--------------------------------)[![Bruno
    Scalia C. F. Leite](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page---byline--f6a41bf26d01--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f6a41bf26d01--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f6a41bf26d01--------------------------------)
    [Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page---byline--f6a41bf26d01--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@bruscalia12?source=post_page---byline--f6a41bf26d01--------------------------------)[![Bruno
    Scalia C. F. Leite](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page---byline--f6a41bf26d01--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f6a41bf26d01--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f6a41bf26d01--------------------------------)
    [Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page---byline--f6a41bf26d01--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f6a41bf26d01--------------------------------)
    ·11 min read·May 30, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f6a41bf26d01--------------------------------)
    ·阅读时间11分钟·2024年5月30日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a97a50e5ff6012c41ccf3d6b3143c9d5.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a97a50e5ff6012c41ccf3d6b3143c9d5.png)'
- en: Representation of a constructive heuristic selecting elements from a ground
    set. (Image by the author).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 表示构造性启发式从基集选择元素的过程。（图像来源：作者）
- en: Discrete or Combinatorial Optimization is a relevant study area in Operations
    Research (OR) and Computer Science, dedicated to identifying the best (or a suitable)
    solution from a finite set of possibilities. With applications including vehicle
    routing, operations scheduling, and network design, often the problems cannot
    be tackled by exact approaches in tractable runtimes. Therefore, heuristics can
    be an interesting alternative to provide fast and good quality solutions guiding
    operations in reasonable computing time.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 离散优化或组合优化是运筹学（OR）和计算机科学中的一个重要研究领域，致力于从有限的可能解集中识别最佳（或合适的）解。其应用包括车辆路径规划、操作调度和网络设计等。通常，这类问题无法通过精确方法在可接受的运行时间内解决。因此，启发式方法提供了一个有趣的替代方案，能够在合理的计算时间内提供快速且质量较好的解决方案，指导操作。
- en: Not only as stand-alone techniques, constructive heuristics can be coupled with
    other algorithms to improve their runtimes, cost functions, or other performance
    aspects. For instance, providing an initial solution to a Mixed-Integer Programming
    (MIP) solver can establish a dual bound that helps to prune the search space.
    Additionally, this initial solution can enable the solver to incorporate local
    search heuristics more effectively, potentially leading to faster convergence
    and better overall solution quality.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**构造性启发式**不仅可以作为独立的技术使用，还可以与其他算法结合，以提高它们的运行时间、成本函数或其他性能方面。例如，为混合整数规划（MIP）求解器提供初始解，可以建立一个双重界限，帮助剪枝搜索空间。此外，这个初始解还可以使求解器更有效地结合局部搜索启发式方法，从而可能加速收敛并提升整体解的质量。'
- en: In this article, you will find basic definitions of discrete optimization with
    an introduction to constructive heuristics. Python examples will be used to illustrate
    the topics with applications to the *Knapsack* and *Maximum Independent Set* problems.
    Random choices and greedy selection of elements will be analyzed as we create
    our solutions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你将找到离散优化的基本定义，并介绍了**构造性启发式**方法。文章将通过Python示例来阐释相关主题，并应用于*背包问题*和*最大独立集*问题。我们将分析随机选择和贪婪选择元素的过程，并通过这些方法来创建解决方案。
- en: The complete code for these problems, besides several other optimization examples,
    is available in my [GitHub repository](https://github.com/bruscalia/optimization-demo-files).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了几个其他优化示例外，针对这些问题的完整代码可以在我的[GitHub 仓库](https://github.com/bruscalia/optimization-demo-files)中找到。
- en: Discrete Optimization
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离散优化
- en: In a broad sense, a numerical optimization problem aims to find the best value
    of an objective *f* which is a function of decision variables ***x*** and might
    be subject to some equality and inequality constraints, functions of ***x*** as
    well. The objective can be defined in either a *minimization* or a *maximization*
    sense.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 广义上，数值优化问题旨在找到目标函数*f*的最佳值，目标函数*f*是决策变量***x***的函数，且可能受到某些等式和不等式约束的限制，这些约束也是***x***的函数。目标可以定义为*最小化*或*最大化*。
- en: Discrete optimization refers to a category of optimization problems in which
    decision variables can assume only discrete values. Therefore one faces a finite
    (although it might be large) set *S* of possible solutions from which it must
    be selected a feasible one leading to the best objective.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 离散优化是指一类优化问题，其中决策变量只能取离散值。因此，面临的是一个有限的（尽管可能很大）可行解集合*S*，必须从中选择一个可行解，使目标函数达到最佳。
- en: Solution Construction
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解构建
- en: Many algorithms for combinatorial optimization problems build a solution incrementally
    from scratch, where at each step, a single ground set element is added to the
    partial solution under construction. A ground set element to be added at each
    step cannot be such that its combination with one or more previously added elements
    leads to an infeasibility *(Resende & Ribeiro, 2016)*.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 许多组合优化问题的算法通过从头构建解决方案，逐步增加基础集合中的元素，在每一步中将一个基础集合元素添加到正在构建的部分解中。每一步添加的基础集合元素不能与之前添加的一个或多个元素结合，导致不可行性*(Resende
    & Ribeiro, 2016)*。
- en: Suppose we have a ground set *E* of elements that might be used to compose a
    solution *S*. Suppose *F* is a subset of elements from *E* that included into
    a partial solution *S* would not lead to infeasibility and would improve the overall
    results. A pseudocode for a constructive heuristic can be described as the following.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个元素的基础集合*E*，这些元素可能用于构建一个解* S*。假设*F*是*E*的一个子集，将*F*中的元素加入到部分解* S*中不会导致不可行，并且会改善整体结果。一个构造性启发式算法的伪代码可以描述如下。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The choice of the next element to include in the solution can vary according
    to the problem and strategy adopted. In some situations, choosing one element
    that leads to the best immediate effect in the partial solution can be an interesting
    alternative, in other situations random effects might be desirable. We will compare
    both approaches in two different problems in the remainder of this article.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步选择添加到解决方案中的元素可能会根据问题和采用的策略有所不同。在某些情况下，选择一个能够在部分解中带来最佳即时效果的元素可能是一个有趣的替代方案，而在其他情况下，随机效果可能是可取的。我们将在本文的剩余部分中对两种方法在两个不同问题中的表现进行比较。
- en: In some problems, there are exact constructive algorithms in polynomial time
    even when adopting a greedy incremental approach as will be presented in this
    article. An interesting example is the Minimum Spanning Tree (MST) problem. However,
    this is not the case for the problems that will be presented here.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些问题中，即使采用贪心的增量方法，也有精确的构造算法可以在多项式时间内完成，正如本文将展示的那样。一个有趣的例子是最小生成树（MST）问题。然而，对于本文将介绍的问题，情况并非如此。
- en: The knapsack problem
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背包问题
- en: In the knapsack problem, from a set of items with individual attributes of weight
    and value, one must select the most valuable ones to include in a knapsack of
    pre-defined capacity in such a way that the total weight of items selected does
    not exceed it. In this problem, we can think of the items available as our *ground
    set*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在背包问题中，给定一组具有重量和价值属性的物品，必须选择最有价值的物品放入一个预定义容量的背包中，且所选物品的总重量不能超过背包容量。在这个问题中，我们可以将可用物品视为我们的*基础集合*。
- en: So let us create a Python class to represent each of our items available.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们创建一个 Python 类来表示我们每个可用物品。
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We also create attributes `density` with the corresponding “value per weight”
    ratio of the given item, `index` with its corresponding identifier, and `selected`
    to indicate if that item is part of our final solution. The *classmethod* `from_dict`
    is useful for initializing a new item from a Python `dict` with keys *index*,
    *weight*, and *value*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了属性`density`，表示给定物品的“每单位重量的价值”比率，`index`表示它的标识符，`selected`表示该物品是否为我们最终解的一部分。*classmethod*
    `from_dict`用于从一个包含*index*、*weight*和*value*键的Python `dict`初始化一个新物品。
- en: Now, let us think of an abstraction of a constructive heuristic for the knapsack
    problem. It takes as initialization arguments the knapsack capacity and a list
    of items (as dictionaries). Both should be available as attributes of our class
    to be used in the solution procedure.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们考虑背包问题的一种构造性启发式抽象。它的初始化参数是背包容量和一个物品列表（以字典形式提供）。这两个参数应作为我们类的属性，以便在解决过程中使用。
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A naive solution procedure can iterate over our set of items and include the
    next item in the solution if its corresponding weight is lesser than or equal
    to the remaining capacity.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的解决过程可以遍历我们的物品集合，并在下一个物品的重量小于或等于剩余容量时将其包括在解中。
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: However, this method can lead to poor-quality solutions. Suppose at the beginning
    of our list there was a heavy item with a small value. It would be included in
    the solution occupying available space that more valuable alternatives could use.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法可能会导致较差的解。假设在列表的开头有一个重量较大的物品，但其价值较小。它将被纳入解中，占据了本可以用于更有价值物品的可用空间。
- en: A better choice could have been to first sort items by their *density* and then
    run the previous procedure of including the next from the input if it fits in
    the remaining space. That leads us to the *Greedy* selection.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的选择可能是先按*密度*对物品进行排序，然后执行之前的步骤，依次从输入中选择下一个物品，前提是它能够适应剩余空间。这将引导我们进入*贪心*选择方法。
- en: Greedy selection
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 贪心选择
- en: A greedy approximation algorithm is an iterative algorithm which produces a
    partial solution incrementally. Each iteration makes a locally optimal or suboptimal
    augmentation to the current partial solution, so that a globally suboptimal solution
    is reached at the end of the algorithm *(Wan, 2013)*.
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 贪心近似算法是一种迭代算法，通过逐步构建部分解来产生结果。每次迭代都会对当前部分解进行局部最优或次优的增量，从而在算法结束时得到一个全局次优解*(Wan,
    2013)*。
- en: In the context of the knapsack problem, we could choose the next element using
    a priority of *density* as previously suggested. In this case, a greedy approach
    does not guarantee the optimality of the solution, but it can be an interesting
    alternative for fast and good-quality results. In our Python code, we can achieve
    that just by sorting our items in place previously to applying the solution procedure.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在背包问题的背景下，我们可以像之前建议的那样，基于*密度*优先选择下一个元素。在这种情况下，贪心方法并不能保证解的最优性，但它可以成为快速且高质量结果的有趣替代方案。在我们的Python代码中，我们可以通过在应用解法之前对物品进行排序来实现这一点。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In my [GitHub repository](https://github.com/bruscalia/optimization-demo-files/tree/main/mip/knapsack/heuristics),
    you might find an instance with 10 items to which I applied both methods. While
    the choice based on the original input sequence produced a solution with a total
    value of 68, the choice based on density resulted in a total value of 91\. I would
    go with the greedy approach for good-quality and fast solutions on this one.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的[GitHub 仓库](https://github.com/bruscalia/optimization-demo-files/tree/main/mip/knapsack/heuristics)中，你可能会找到一个包含10个物品的实例，我对这些物品应用了两种方法。基于原始输入序列的选择产生的解总价值为68，而基于密度的选择则得到了总价值91。我会选择贪心方法，因为它能够提供高质量且快速的解。
- en: The maximum independent set problem
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最大独立集问题
- en: The next example is a classical problem on subset partitioning in which our
    goal is to find a subset of elements from an undirected graph *G*(*V*, *E*) with
    the maximum number of elements such that there are no edges connecting any pair
    from the given subset.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个例子是一个经典的子集划分问题，其中我们的目标是从无向图*G*(*V*, *E*)中找到一个元素子集，使得子集中的元素数最多且没有任何一对元素之间存在边连接。
- en: 'Let us start by creating classes to work with the graph elements of this problem.
    The class `Node` will be used to represent a vertice (or node) from our undirected
    graph. It will have as attributes:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建类来处理此问题的图元素开始。`Node`类将用于表示我们无向图中的一个顶点（或节点）。它将具有以下属性：
- en: '`neighbors`: A list of neighbor vertices'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`neighbors`：一个邻接顶点的列表'
- en: '`index`: Its identifier'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index`：它的标识符'
- en: '`selected`: A boolean to indicate when it was included in the solution'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selected`：一个布尔值，用于表示何时将其包含在解集中。'
- en: Whenever a `Node` instance is deleted from our feasible subset of elements,
    we must remove it from its neighbors’ list of neighbors, so we create a method
    `delete` to make it easier.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每当从我们的可行元素子集删除一个`Node`实例时，我们必须将其从邻居的邻居列表中移除，因此我们创建一个`delete`方法以简化这一过程。
- en: The property `degree` computes the number of neighbors from a given node and
    will be used as our criterion for choosing the next element in the *greedy* approach.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 属性`degree`计算给定节点的邻居数量，并将作为我们选择下一个元素的*贪心*方法的标准。
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, let us create our `Graph` class. It should be instantiated from a list
    of edges and an optional list of nodes. It should have an attribute `N` which
    is a dictionary of existing nodes (or vertices).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建我们的`Graph`类。它应该通过一个边的列表和一个可选的节点列表来实例化。它应该有一个属性`N`，该属性是一个包含现有节点（或顶点）的字典。
- en: The property `queue` should return a list of nodes not yet selected for us to
    consider including in the solution at each step of our constructive heuristic.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 属性`queue`应返回一个节点列表，这些节点尚未被选中，以便我们在每一步的构造性启发式方法中考虑将其纳入解集中。
- en: Whenever a new `Node` instance is selected, the method `select` should be called,
    which changes its `selected` attribute and calls its `delete` method.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 每当选择一个新的`Node`实例时，应该调用`select`方法，它会更改其`selected`属性并调用其`delete`方法。
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, let us create an abstraction for our constructive heuristic. It should
    be instantiated, as its corresponding `Graph`, from a list of edges and an optional
    list of nodes. When instantiated, its attribute `graph` is defined from the original
    graph of the problem instance.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们为我们的构造性启发式方法创建一个抽象。它应该像对应的`Graph`一样，通过一个边的列表和一个可选的节点列表来实例化。在实例化时，它的属性`graph`将从问题实例的原始图定义。
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `solve` method will be at the core of our solution procedure. It should
    return a subgraph of *G*(*V*, *E*) with a candidate solution. When using an instance
    of the solution procedure as a callable, it should overwrite its nodes’ `selected`
    attributes based on the result returned by the `solve` method.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`solve`方法将是我们求解过程的核心。它应该返回一个候选解的子图*G*(*V*, *E*)。当使用解程序的实例作为可调用对象时，它应该根据`solve`方法返回的结果覆盖其节点的`selected`属性。'
- en: Notice the `choice` method here is an abstraction yet to be overwritten by child
    classes.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`choice`方法在这里是一个抽象，尚未被子类覆盖。
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Let us first create an algorithm that randomly chooses the next node to include
    into our solution.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个随机选择下一个要加入解集的节点的算法。
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It can already be used in our solution procedure and creates feasible solutions
    that are *maximal independent sets* (not *maximum*). However, its performance
    varies according to the random sequence and we might be vulnerable to poor results.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它已经可以在我们的求解过程中使用，并且生成*最大独立集*的可行解（不是*最大*的）。然而，它的性能会根据随机序列的不同而变化，我们可能会受到较差结果的影响。
- en: Adaptive greedy
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自适应贪心
- en: Alternatively, at each step, we could have chosen the next node that has the
    smallest impact on the “pool” of feasible elements from the ground set. It would
    mean choosing the next element that in the subgraph has the smallest number of
    neighbors. In other words, with the smallest `degree` attribute. This is the same
    approach adopted by Feo et al. (1994).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在每一步中，我们可以选择对“可行元素池”影响最小的下一个节点。这意味着选择子图中邻居数量最少的下一个元素。换句话说，选择具有最小`degree`属性的下一个元素。这是Feo等人（1994）采用的相同方法。
- en: Notice the `degree` of our nodes might vary as the partial solution changes
    and elements are removed from the subgraph. It can be therefore defined as an
    *adaptive greedy* procedure.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们节点的`degree`可能会随着部分解的变化和元素从子图中移除而变化。因此，它可以定义为一个*自适应贪心*过程。
- en: There are other situations where the cost of the contribution of an element
    is affected by the previous choices of elements made by the algorithm. We shall
    call these adaptive greedy algorithms *(Resende & Ribeiro, 2016)*.
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 还有一些情况，元素贡献的成本会受到算法先前选择的元素的影响。我们将这些称为自适应贪心算法*(Resende & Ribeiro, 2016)*。
- en: Let us then implement an algorithm that chooses as the next element the one
    from the subgraph with the smallest `degree`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后让我们实现一个算法，选择子图中`degree`最小的元素作为下一个元素。
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Although it does not provide proof of optimality, the adaptive greedy approach
    can also be an interesting strategy for providing fast and good-quality results
    to this problem. But try running the random approach multiple times… In some instances,
    it might outperform the greedy strategy (at least in one or a few runs). Why not
    implement a multi-start framework then?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管它并未提供最优性的证明，但自适应贪婪方法仍然是为此问题提供快速且高质量解的一个有趣策略。试着多次运行随机方法…在某些情况下，它可能会优于贪婪策略（至少在一次或几次运行中）。那为什么不实现一个多启动框架呢？
- en: Multistarts
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多启动
- en: In this approach, multiple independent runs are performed, and a registry of
    the best solution is kept. In the end, the best solution is returned.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，执行多个独立的运行，并记录最佳解。最终返回最好的解。
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In my [GitHub repository](https://github.com/bruscalia/optimization-demo-files/blob/5546625793917492f4abe1aca0a571527e256e32/graph-coloring/max_independent_set.ipynb),
    you will find an example of a 32-node graph in which the *adaptive greedy* found
    a subset of 5 vertices, but a random framework with multi-start found a solution
    with 6\. The solution procedure is represented below.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的[GitHub 仓库](https://github.com/bruscalia/optimization-demo-files/blob/5546625793917492f4abe1aca0a571527e256e32/graph-coloring/max_independent_set.ipynb)中，您将找到一个32节点图的例子，其中*自适应贪婪*方法找到了一个5个顶点的子集，但使用多启动的随机框架找到了一个包含6个顶点的解。解决过程如下所示。
- en: '![](../Images/abb86a60627ac000096137ee77138ed8.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/abb86a60627ac000096137ee77138ed8.png)'
- en: Solution procedure of constructive heuristic applied to a maximum independent
    set problem. (Animation by the author).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 解决构造性启发式应用于最大独立集问题的过程。（由作者制作的动画）。
- en: Further reading
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: At the beginning of this text, I suggested constructive heuristics can be coupled
    with local search techniques. One fantastic meta-heuristic that explores it is
    called *Greedy Randomized Adaptive Search Procedure* (GRASP).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文开头，我提到过构造性启发式可以与局部搜索技术结合。一种探索这一方法的极具潜力的元启发式方法叫做*贪婪随机自适应搜索过程*（GRASP）。
- en: The idea of GRASP is to use a multi-start framework in which a random element
    will lead the constructive phase to produce different initial solutions to which
    local search should be applied. This way, the solution procedure escapes local
    optima. For those interested in exploring heuristics and meta-heuristics in more
    detail, it is worth checking the [website of Prof Mauricio Resende](https://mauricio.resende.info/),
    one of the authors who originally proposed GRASP. There, he lists several of his
    works and contributions to the academic community on operations research.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: GRASP的思路是使用一个多启动框架，其中随机元素将引导构造阶段生成不同的初始解，接着对其应用局部搜索。这样，解决过程能够避免局部最优解。对于那些有兴趣更详细探讨启发式和元启发式方法的人，值得访问[毛里西奥·雷森德教授的官网](https://mauricio.resende.info/)，他是最初提出GRASP的作者之一。在该网站上，他列出了自己的一些工作和对运筹学学术界的贡献。
- en: Those interested in coding examples of GRASP might also check my [GitHub repository](https://github.com/bruscalia/jobshop)
    with an application for the Job-Shop Scheduling Problem.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有兴趣了解GRASP代码示例的人，也可以查看我的[GitHub 仓库](https://github.com/bruscalia/jobshop)，其中包含用于作业车间调度问题的应用。
- en: To those interested in exploring more optimization problems and solution techniques,
    I have several other stories available on Medium which I have aggregated on a
    comprehensive list.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些有兴趣深入探讨更多优化问题和解决技术的人，我在Medium上有一些其他故事，可以在一个综合列表中找到。
- en: '![Bruno Scalia C. F. Leite](../Images/0c7396e41d4b598be2349eaea982c984.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![Bruno Scalia C. F. Leite](../Images/0c7396e41d4b598be2349eaea982c984.png)'
- en: '[Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page-----f6a41bf26d01--------------------------------)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page-----f6a41bf26d01--------------------------------)'
- en: Tales of the Optimization Age
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化时代的故事
- en: '[View list](https://medium.com/@bruscalia12/list/tales-of-the-optimization-age-c15faf64a6ca?source=post_page-----f6a41bf26d01--------------------------------)15
    stories![](../Images/848ca03a7d7366b8a040f720f5d51f5c.png)![](../Images/b79fd62ce301f6295199d983f7633588.png)![](../Images/a6e8cbe0e088f4e7b1edcf27c524b072.png)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看列表](https://medium.com/@bruscalia12/list/tales-of-the-optimization-age-c15faf64a6ca?source=post_page-----f6a41bf26d01--------------------------------)15个故事![](../Images/848ca03a7d7366b8a040f720f5d51f5c.png)![](../Images/b79fd62ce301f6295199d983f7633588.png)![](../Images/a6e8cbe0e088f4e7b1edcf27c524b072.png)'
- en: Conclusions
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Throughout this article, constructive heuristics in the context of discrete
    optimization were introduced and applied to the *knapsack* and the *maximum independent
    set* problems. Intuitions on how to choose ground elements to build a solution
    were presented exemplifying a greedy choice, random factors, and multi-starts.
    The complete code is available in my [GitHub repository](https://github.com/bruscalia/optimization-demo-files).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，介绍并应用了离散优化背景下的构造性启发式方法，具体应用于*背包问题*和*最大独立集问题*。阐述了如何选择基本元素以构建解决方案的直觉，举例说明了贪心选择、随机因素和多重起始的使用。完整的代码可以在我的[GitHub
    仓库](https://github.com/bruscalia/optimization-demo-files)中找到。
- en: References
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: Feo, T. A., Resende, M. G., & Smith, S. H., 1994\. A greedy randomized adaptive
    search procedure for maximum independent set. *Operations Research*, *42*(5),
    860–878.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Feo, T. A., Resende, M. G., & Smith, S. H., 1994\. 一种用于最大独立集的贪心随机自适应搜索过程。*运筹学*，*42*(5)，860–878。
- en: Resende, M. G., & Ribeiro, C. C., 2016\. *Optimization by GRASP*. Springer Science+
    Business Media New York.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Resende, M. G., & Ribeiro, C. C., 2016\. *通过 GRASP 进行优化*。Springer Science+ Business
    Media 纽约。
- en: 'Wan, PJ., 2013\. Greedy Approximation Algorithms. In: Pardalos, P., Du, DZ.,
    Graham, R. (eds) Handbook of Combinatorial Optimization. Springer, New York, NY.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Wan, PJ., 2013\. 贪心近似算法。载：Pardalos, P., Du, DZ., Graham, R.（编辑）《组合优化手册》。Springer,
    纽约, NY。
