- en: I Built a Reusable Dashboard for Read the Docs Traffic Analytics Using Vizro-AI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/i-built-a-reusable-dashboard-for-read-the-docs-traffic-analytics-using-vizro-47dc15dc04f8?source=collection_archive---------1-----------------------#2024-05-17](https://towardsdatascience.com/i-built-a-reusable-dashboard-for-read-the-docs-traffic-analytics-using-vizro-47dc15dc04f8?source=collection_archive---------1-----------------------#2024-05-17)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: (In less than 50 lines of code)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://stichbury.medium.com/?source=post_page---byline--47dc15dc04f8--------------------------------)[![Jo
    Stichbury](../Images/c72e6f969467e9dfcaa156924ebf061e.png)](https://stichbury.medium.com/?source=post_page---byline--47dc15dc04f8--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--47dc15dc04f8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--47dc15dc04f8--------------------------------)
    [Jo Stichbury](https://stichbury.medium.com/?source=post_page---byline--47dc15dc04f8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--47dc15dc04f8--------------------------------)
    ·7 min read·May 17, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/540bdff879af04e5dad6ac1ae7ddefcc.png)'
  prefs: []
  type: TYPE_IMG
- en: The resulting dashboard from typical traffic data
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, I’ll explain how I built a dashboard to visualize the traffic
    data for some documentation I maintain as a technical writer. I have few design
    skills and limited Python experience, so needed a simple, low-code approach to
    show the impact and usage of the documentation I maintain. This turned out to
    be an open-source solution: [Vizro](https://github.com/mckinsey/vizro) as a template
    for a low-code dashboard, and [Vizro-AI](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/)
    to build the individual charts with generative AI.'
  prefs: []
  type: TYPE_NORMAL
- en: TL;DR?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to jump right in, you can find the Jupyter Notebook code for the
    dashboard in my [GitHub repo](https://github.com/stichbury/documentation_project).
  prefs: []
  type: TYPE_NORMAL
- en: A Read the Docs dashboard project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If, like me, you manage an open-source docs project with [Read the Docs (RTD)](https://docs.readthedocs.io/en/stable/),
    you have probably discovered that you can download the last 90 days’ worth of
    traffic data in CSV format from your project dashboard. The dashboard also displays
    a daily pageview totals chart, like the one below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a52c2996c34389553866d91c6c49758b.png)'
  prefs: []
  type: TYPE_IMG
- en: A typical RTD pageviews chart (the only graphical traffic data provided)
  prefs: []
  type: TYPE_NORMAL
- en: For additional visual output, you could harness Google Analytics (GA). However,
    some projects prefer not to use GA because its compliance with the General Data
    Protection Regulation (GDPR) is seen as [controversial](https://usercentrics.com/knowledge-hub/google-analytics-and-gdpr-compliance-rulings/),
    particularly in the European Union (EU).
  prefs: []
  type: TYPE_NORMAL
- en: '**Get the code and data**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Just a note that in the example below I’ve used a set of fake CSV traffic
    data that I generated, with help from OpenAI, to keep the traffic to our project
    private. The fake data has the same fields as genuine RTD data so you can download
    and use the dashboard with the data downloaded from your RTD dashboard.*'
  prefs: []
  type: TYPE_NORMAL
- en: To run through the example yourself, you’ll need my fake data (or your own download)
    and the Jupyter Notebook code, stored in my [GitHub repo](https://github.com/stichbury/documentation_project).
    It’s simple to step through at a basic level, but a more advanced user can extend
    it. Please let me know if you do create an enhanced version!
  prefs: []
  type: TYPE_NORMAL
- en: What are Vizro and Vizro-AI?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Vizro](https://github.com/mckinsey/vizro) is a framework built on top of [Plotly](https://plotly.com/)
    and [Dash](https://dash.plotly.com/) that uses a configuration approach to specify
    custom dashboard layouts. A Vizro dashboard can be populated with charts built
    by Vizro-AI, a package separate from Vizro that simplifies the visualization process
    by leaning on generative AI.'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, I supplied the data and natural language instructions, and
    Vizro-AI generated Python code and created my requested charts. This worked well
    for me as a writer, since I have no front-end design skills and I’m unfamiliar
    with Plotly, but I’m happy to phrase a suitable generative AI prompt and coax
    a chart from OpenAI.
  prefs: []
  type: TYPE_NORMAL
- en: '**Set up Vizro-AI**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before running the Notebook code, you need to [set up Vizro-AI](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/pages/user-guides/install/)
    inside a virtual environment with Python 3.9 or later. Install the package with
    `pip install vizro_ai`.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you need an API key to access OpenAI. If you don’t already have an account,
    [create one](https://platform.openai.com/signup), and buy some credits to use
    a model since you cannot use the free version. Generate an API key and add it
    to your environment so the code you write in the next step can access it to successfully
    call OpenAI. There are some straightforward [instructions in the OpenAI docs](https://platform.openai.com/docs/quickstart/step-2-set-up-your-api-key),
    and the process is also covered in the [Vizro-AI LLM setup guide](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/pages/user-guides/install/#set-up-access-to-a-large-language-model).
  prefs: []
  type: TYPE_NORMAL
- en: '**Build a chart**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this point you can [open a Jupyter Notebook to make your first chart,](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/pages/tutorials/quickstart/#2-open-a-jupyter-notebook)
    or just open the [Notebook from my repo](https://github.com/stichbury/documentation_project/tree/main)
    to step through the code I created, and load your RTD data (or the fake data I’ve
    provided) into a pandas DataFrame, named `df` in the code below.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows how to submit a request to Vizro-AI to build a chart
    that resembles the chart in the Read the Docs project dashboard, showing views
    by date, but splitting the data into two traces, for the [stable and latest versions
    of the documentation](https://docs.readthedocs.io/en/stable/versions.html):'
  prefs: []
  type: TYPE_NORMAL
- en: “Combine rows of Views for each Date for latest and stable Version. Draw a smoothed
    line graph comparing Views per Date for latest and stable.”
  prefs: []
  type: TYPE_NORMAL
- en: Vizro-AI passes the natural language query “**Combine rows of Views for each
    Date for latest and stable Version. Draw a line graph comparing Views per Date
    for latest and stable**” and the dataframe to the model. Note that in the example
    above, I’ve specified a gpt-4 model. Vizro-AI will [default to use gpt-3.5-turbo](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/pages/user-guides/customize-vizro-ai/)
    because it offers a lower price point and higher speed for providing answers,
    but it does not offer the most sophisticated charting, so I opted to make an explicit
    request to use a gpt-4 model.
  prefs: []
  type: TYPE_NORMAL
- en: The chart output will depend on your data, and on the output received from OpenAI
    at the time the query was submitted. The parameter `explain=True` requests that
    Vizro-AI explains how the resulting chart was obtained, and the explanation is
    shown as output in the Jupyter Notebook, along with the chart which is displayed
    by the `show()` command.
  prefs: []
  type: TYPE_NORMAL
- en: The Insights text returned by Vizro-AI explains how to manipulate the traffic
    data. The Code section describes the steps the code snippet follows to generate
    the line graph requested.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/01e9aec5fc54dae71510d4b1ca24b752.png)'
  prefs: []
  type: TYPE_IMG
- en: Insights section returned from the call to plot() with instructions “Combine
    rows of Views for each Date for latest and stable Version. Draw a smoothed line
    graph comparing Views per Date for latest and stable.”
  prefs: []
  type: TYPE_NORMAL
- en: 'The chart returned looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/183d6d66f15d5403b42d6e4d87730231.png)'
  prefs: []
  type: TYPE_IMG
- en: Chart returned from the call to plot() with instructions “Combine rows of Views
    for each Date for latest and stable Version. Draw a smoothed line graph comparing
    Views per Date for latest and stable.”
  prefs: []
  type: TYPE_NORMAL
- en: '**Build more charts**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I created some additional charts to further illustrate the traffic to our documentation,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: “*Collate rows of data for Path where Version==stable. Create a horizontal bar
    chart describing the total Views for the top 5 pages. Add the numbers to each
    bar and title ‘Total views for top 5 stable pages’. Decrease font size of marks*”
    and “Collate rows of data for Path where Version==stable. Create a line graph
    for the total Views per Date for the top 5 Paths”
  prefs: []
  type: TYPE_NORMAL
- en: Vizro-AI has done the heavy lifting for me by generating the code to manipulate
    the data and generate a set of charts, which are useful in themselves . More useful
    still would be to group them together in combination to make a complete dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a Vizro dashboard**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use Vizro in the same Jupyter Notebook as the Vizro-AI code above.
    Make sure to `pip install vizro` as the [Vizro documentation](https://vizro.readthedocs.io/en/stable/pages/user-guides/install/)
    describes. Here is some code for the skeleton of a simple dashboard without the
    chart generation:'
  prefs: []
  type: TYPE_NORMAL
- en: The `# TO DO` section is where we add in each of the charts.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two options at this point:'
  prefs: []
  type: TYPE_NORMAL
- en: Use Vizro-AI to generate the charts each time the dashboard is generated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the Python code that Vizro-AI returned to call directly to Plotly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first option requires less code but will be slower to return, and more expensive,
    because it uses Vizro-AI, which calls OpenAI. The second option is faster but
    requires more code manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a cell containing the dashboard code that demonstrates the first option
    with functions that call through to Vizro-AI (*if you plan to run this for yourself,
    make sure you’re using the Notebook in my repo, have loaded the data and stepped
    through the cells that set up the calls to Vizro-AI*):'
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a slightly different version, which uses the second option to generate
    one of the charts. I‘ve taken the opportunity to tweak the Python code slightly
    to change the colors of the lines, which is about my limit for Plotly manipulation!
    (*Again, if you plan to run this for yourself, make sure you’re using the Notebook
    in my repo, have loaded the data and stepped through the cells that set up the
    chart creation functions*).
  prefs: []
  type: TYPE_NORMAL
- en: You can download the Jupyter Notebook to try out the dashboard with your own
    Read the Docs data. It looks as follows with the fake data I supplied.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/21aad4bf348f8e913cfff9c1d0d9666e.png)'
  prefs: []
  type: TYPE_IMG
- en: The final output built using method 2 which enabled me to tweak the colours
    in the first chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'One of my colleagues (thanks Nadija!) gave me a tip that you can run the dashboard
    in the Notebook and then view it in a separate browser window by viewing the port
    you choose as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively (thanks Antony!), as I’ve shown in the second dashboard example
    above, you can generate a clickable link to view the dashboard as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Wrapping up**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, I showed how to use Vizro-AI to generate Plotly charts to visualize
    documentation traffic, and then built those charts into a Vizro dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: If you have data science and Python skills, and a talent for design, you’ll
    *maybe* want the challenge of building a dashboard with Plotly and Dash. But,
    to someone like me without those skills, it’s a game changer to be able to use
    OpenAI and achieve the output above. I now have a useful visualization for Read
    the Docs traffic data in about 50 lines of code. It looks professional and is
    easily extensible and relatively easy to share. With more effort, I could improve
    it further to add customizations such as [filters, parameters](https://vizro.readthedocs.io/en/stable/pages/user-guides/filters/)
    or separate [navigable pages](https://vizro.readthedocs.io/en/stable/pages/user-guides/navigation/).
  prefs: []
  type: TYPE_NORMAL
- en: What’s more, I can collaborate on the dashboard code with my colleagues to adapt
    for other Read the Docs projects. I’ve used a Jupyter Notebook to make it easy
    to demonstrate the project, but this approach works equally well in a Python script,
    making it easily sharable and maintainable in version control. I can also [deploy
    the dashboard](https://vizro.readthedocs.io/en/stable/pages/user-guides/run/#deployment)
    so my colleagues can access it directly without running the code.
  prefs: []
  type: TYPE_NORMAL
- en: Our team now has a useful and usable dashboard for tracking documentation impact,
    put together by a technical writer in an afternoon. Who can ask for more?
  prefs: []
  type: TYPE_NORMAL
- en: I’d like to thank my colleagues, particularly [Nadija](https://www.linkedin.com/in/nadija-ratkusic-graca-b044a143)
    and [Anna](https://github.com/Anna-Xiong), and [Joe,](https://www.linkedin.com/in/joseph-perkins-aa278272/)
    for several rounds of review feedback as I was putting this post together.
  prefs: []
  type: TYPE_NORMAL
