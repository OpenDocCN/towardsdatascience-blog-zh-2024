- en: I Built a Reusable Dashboard for Read the Docs Traffic Analytics Using Vizro-AI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我为“Read the Docs”流量分析构建了一个可重复使用的仪表板，使用了Vizro-AI
- en: 原文：[https://towardsdatascience.com/i-built-a-reusable-dashboard-for-read-the-docs-traffic-analytics-using-vizro-47dc15dc04f8?source=collection_archive---------1-----------------------#2024-05-17](https://towardsdatascience.com/i-built-a-reusable-dashboard-for-read-the-docs-traffic-analytics-using-vizro-47dc15dc04f8?source=collection_archive---------1-----------------------#2024-05-17)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/i-built-a-reusable-dashboard-for-read-the-docs-traffic-analytics-using-vizro-47dc15dc04f8?source=collection_archive---------1-----------------------#2024-05-17](https://towardsdatascience.com/i-built-a-reusable-dashboard-for-read-the-docs-traffic-analytics-using-vizro-47dc15dc04f8?source=collection_archive---------1-----------------------#2024-05-17)
- en: (In less than 50 lines of code)
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: （不到50行代码）
- en: '[](https://stichbury.medium.com/?source=post_page---byline--47dc15dc04f8--------------------------------)[![Jo
    Stichbury](../Images/c72e6f969467e9dfcaa156924ebf061e.png)](https://stichbury.medium.com/?source=post_page---byline--47dc15dc04f8--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--47dc15dc04f8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--47dc15dc04f8--------------------------------)
    [Jo Stichbury](https://stichbury.medium.com/?source=post_page---byline--47dc15dc04f8--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://stichbury.medium.com/?source=post_page---byline--47dc15dc04f8--------------------------------)[![Jo
    Stichbury](../Images/c72e6f969467e9dfcaa156924ebf061e.png)](https://stichbury.medium.com/?source=post_page---byline--47dc15dc04f8--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--47dc15dc04f8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--47dc15dc04f8--------------------------------)
    [Jo Stichbury](https://stichbury.medium.com/?source=post_page---byline--47dc15dc04f8--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--47dc15dc04f8--------------------------------)
    ·7 min read·May 17, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--47dc15dc04f8--------------------------------)
    ·阅读时间7分钟·2024年5月17日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/540bdff879af04e5dad6ac1ae7ddefcc.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/540bdff879af04e5dad6ac1ae7ddefcc.png)'
- en: The resulting dashboard from typical traffic data
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 来自典型流量数据的最终仪表板
- en: 'In this article, I’ll explain how I built a dashboard to visualize the traffic
    data for some documentation I maintain as a technical writer. I have few design
    skills and limited Python experience, so needed a simple, low-code approach to
    show the impact and usage of the documentation I maintain. This turned out to
    be an open-source solution: [Vizro](https://github.com/mckinsey/vizro) as a template
    for a low-code dashboard, and [Vizro-AI](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/)
    to build the individual charts with generative AI.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将解释我是如何构建一个仪表板来可视化我作为技术作家维护的一些文档的流量数据的。我设计技能有限，Python经验也不多，所以我需要一个简单的、低代码的方法来展示我所维护文档的影响和使用情况。最终，我找到了一个开源解决方案：[Vizro](https://github.com/mckinsey/vizro)作为低代码仪表板的模板，和[Vizro-AI](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/)来使用生成性AI构建单独的图表。
- en: TL;DR?
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TL;DR?
- en: If you want to jump right in, you can find the Jupyter Notebook code for the
    dashboard in my [GitHub repo](https://github.com/stichbury/documentation_project).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想直接开始，可以在我的[GitHub仓库](https://github.com/stichbury/documentation_project)中找到仪表板的Jupyter
    Notebook代码。
- en: A Read the Docs dashboard project
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个Read the Docs仪表板项目
- en: If, like me, you manage an open-source docs project with [Read the Docs (RTD)](https://docs.readthedocs.io/en/stable/),
    you have probably discovered that you can download the last 90 days’ worth of
    traffic data in CSV format from your project dashboard. The dashboard also displays
    a daily pageview totals chart, like the one below.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果像我一样，你管理着一个使用[Read the Docs (RTD)](https://docs.readthedocs.io/en/stable/)的开源文档项目，你可能已经发现，你可以从项目仪表板中下载过去90天的流量数据，文件格式为CSV。仪表板还会显示一个每日页面浏览量总计的图表，像下面这个图。
- en: '![](../Images/a52c2996c34389553866d91c6c49758b.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a52c2996c34389553866d91c6c49758b.png)'
- en: A typical RTD pageviews chart (the only graphical traffic data provided)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的RTD页面浏览量图表（唯一提供的图形流量数据）
- en: For additional visual output, you could harness Google Analytics (GA). However,
    some projects prefer not to use GA because its compliance with the General Data
    Protection Regulation (GDPR) is seen as [controversial](https://usercentrics.com/knowledge-hub/google-analytics-and-gdpr-compliance-rulings/),
    particularly in the European Union (EU).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要额外的可视化输出，您可以使用 Google Analytics (GA)。然而，某些项目不愿意使用 GA，因为它是否符合通用数据保护条例（GDPR）在[欧盟](https://usercentrics.com/knowledge-hub/google-analytics-and-gdpr-compliance-rulings/)等地区存在争议。
- en: '**Get the code and data**'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**获取代码和数据**'
- en: '*Just a note that in the example below I’ve used a set of fake CSV traffic
    data that I generated, with help from OpenAI, to keep the traffic to our project
    private. The fake data has the same fields as genuine RTD data so you can download
    and use the dashboard with the data downloaded from your RTD dashboard.*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*请注意，在下面的示例中，我使用了一组由 OpenAI 帮助生成的虚假 CSV 流量数据，以确保项目流量的私密性。这些虚假数据与真实的 RTD 数据具有相同的字段，因此您可以下载并使用从
    RTD 仪表板中下载的数据。*'
- en: To run through the example yourself, you’ll need my fake data (or your own download)
    and the Jupyter Notebook code, stored in my [GitHub repo](https://github.com/stichbury/documentation_project).
    It’s simple to step through at a basic level, but a more advanced user can extend
    it. Please let me know if you do create an enhanced version!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 若要亲自运行此示例，您需要我的虚假数据（或您自己的下载数据）以及存储在我的[GitHub 仓库](https://github.com/stichbury/documentation_project)中的
    Jupyter Notebook 代码。基本使用非常简单，但高级用户可以对其进行扩展。如果您确实创建了增强版，请告诉我！
- en: What are Vizro and Vizro-AI?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Vizro 和 Vizro-AI 是什么？
- en: '[Vizro](https://github.com/mckinsey/vizro) is a framework built on top of [Plotly](https://plotly.com/)
    and [Dash](https://dash.plotly.com/) that uses a configuration approach to specify
    custom dashboard layouts. A Vizro dashboard can be populated with charts built
    by Vizro-AI, a package separate from Vizro that simplifies the visualization process
    by leaning on generative AI.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[Vizro](https://github.com/mckinsey/vizro) 是一个基于 [Plotly](https://plotly.com/)
    和 [Dash](https://dash.plotly.com/) 构建的框架，采用配置方式指定自定义仪表板布局。Vizro 仪表板可以通过 Vizro-AI
    填充，Vizro-AI 是一个独立的软件包，通过依赖生成 AI 简化了可视化过程。'
- en: In this example, I supplied the data and natural language instructions, and
    Vizro-AI generated Python code and created my requested charts. This worked well
    for me as a writer, since I have no front-end design skills and I’m unfamiliar
    with Plotly, but I’m happy to phrase a suitable generative AI prompt and coax
    a chart from OpenAI.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我提供了数据和自然语言指令，Vizro-AI 生成了 Python 代码并创建了我所请求的图表。对我作为作者来说，这非常有效，因为我没有前端设计技能，也不熟悉
    Plotly，但我很乐意给出适当的生成 AI 提示，并从 OpenAI 生成图表。
- en: '**Set up Vizro-AI**'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**设置 Vizro-AI**'
- en: Before running the Notebook code, you need to [set up Vizro-AI](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/pages/user-guides/install/)
    inside a virtual environment with Python 3.9 or later. Install the package with
    `pip install vizro_ai`.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 Notebook 代码之前，您需要在一个虚拟环境中使用 Python 3.9 或更高版本[安装 Vizro-AI](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/pages/user-guides/install/)。使用
    `pip install vizro_ai` 安装该软件包。
- en: Next, you need an API key to access OpenAI. If you don’t already have an account,
    [create one](https://platform.openai.com/signup), and buy some credits to use
    a model since you cannot use the free version. Generate an API key and add it
    to your environment so the code you write in the next step can access it to successfully
    call OpenAI. There are some straightforward [instructions in the OpenAI docs](https://platform.openai.com/docs/quickstart/step-2-set-up-your-api-key),
    and the process is also covered in the [Vizro-AI LLM setup guide](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/pages/user-guides/install/#set-up-access-to-a-large-language-model).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要一个 API 密钥来访问 OpenAI。如果您还没有账号，请[创建一个](https://platform.openai.com/signup)，并购买一些积分来使用模型，因为您不能使用免费版本。生成一个
    API 密钥并将其添加到您的环境中，以便您在下一步编写的代码可以成功调用 OpenAI。有关详细的[指南，请参考 OpenAI 文档](https://platform.openai.com/docs/quickstart/step-2-set-up-your-api-key)，该过程也可以在[Vizro-AI
    LLM 设置指南](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/pages/user-guides/install/#set-up-access-to-a-large-language-model)中找到。
- en: '**Build a chart**'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**构建图表**'
- en: At this point you can [open a Jupyter Notebook to make your first chart,](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/pages/tutorials/quickstart/#2-open-a-jupyter-notebook)
    or just open the [Notebook from my repo](https://github.com/stichbury/documentation_project/tree/main)
    to step through the code I created, and load your RTD data (or the fake data I’ve
    provided) into a pandas DataFrame, named `df` in the code below.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您可以[打开Jupyter Notebook制作您的第一个图表，](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/pages/tutorials/quickstart/#2-open-a-jupyter-notebook)或者只需打开[我的存储库中的Notebook](https://github.com/stichbury/documentation_project/tree/main)来逐步执行我创建的代码，并将您的RTD数据（或我提供的虚假数据）加载到一个名为`df`的pandas
    DataFrame中，如下面的代码所示。
- en: 'The following code shows how to submit a request to Vizro-AI to build a chart
    that resembles the chart in the Read the Docs project dashboard, showing views
    by date, but splitting the data into two traces, for the [stable and latest versions
    of the documentation](https://docs.readthedocs.io/en/stable/versions.html):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '以下代码显示了如何向Vizro-AI提交请求，以构建一个类似于Read the Docs项目仪表板中显示的图表，显示按日期查看的图表，但将数据分为两个跟踪，用于[文档的稳定和最新版本](https://docs.readthedocs.io/en/stable/versions.html)： '
- en: “Combine rows of Views for each Date for latest and stable Version. Draw a smoothed
    line graph comparing Views per Date for latest and stable.”
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “为最新和稳定版本的每个日期组合Views行。绘制一条平滑的线图，比较最新和稳定版本每个日期的Views。”
- en: Vizro-AI passes the natural language query “**Combine rows of Views for each
    Date for latest and stable Version. Draw a line graph comparing Views per Date
    for latest and stable**” and the dataframe to the model. Note that in the example
    above, I’ve specified a gpt-4 model. Vizro-AI will [default to use gpt-3.5-turbo](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/pages/user-guides/customize-vizro-ai/)
    because it offers a lower price point and higher speed for providing answers,
    but it does not offer the most sophisticated charting, so I opted to make an explicit
    request to use a gpt-4 model.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Vizro-AI将自然语言查询“**为最新和稳定版本的每个日期组合Views行。绘制一条比较最新和稳定版本每个日期Views的线图**”和数据框传递给模型。请注意，在上面的示例中，我指定了一个gpt-4模型。Vizro-AI将[默认使用gpt-3.5-turbo](https://vizro.readthedocs.io/projects/vizro-ai/en/latest/pages/user-guides/customize-vizro-ai/)，因为它提供了更低的价格和更高的速度来提供答案，但它并不提供最复杂的图表功能，因此我选择明确请求使用gpt-4模型。
- en: The chart output will depend on your data, and on the output received from OpenAI
    at the time the query was submitted. The parameter `explain=True` requests that
    Vizro-AI explains how the resulting chart was obtained, and the explanation is
    shown as output in the Jupyter Notebook, along with the chart which is displayed
    by the `show()` command.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图表输出将取决于您的数据，以及在提交查询时从OpenAI收到的输出。参数`explain=True`请求Vizro-AI解释生成的图表是如何获得的，解释将显示在Jupyter
    Notebook的输出中，同时使用`show()`命令显示的图表也会显示出来。
- en: The Insights text returned by Vizro-AI explains how to manipulate the traffic
    data. The Code section describes the steps the code snippet follows to generate
    the line graph requested.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Vizro-AI返回的Insights文本解释了如何操作流量数据。代码部分描述了代码片段遵循的步骤，以生成所请求的线图。
- en: '![](../Images/01e9aec5fc54dae71510d4b1ca24b752.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/01e9aec5fc54dae71510d4b1ca24b752.png)'
- en: Insights section returned from the call to plot() with instructions “Combine
    rows of Views for each Date for latest and stable Version. Draw a smoothed line
    graph comparing Views per Date for latest and stable.”
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用plot()返回的Insights部分带有指令“为最新和稳定版本的每个日期组合Views行。绘制一条平滑的线图，比较最新和稳定版本每个日期的Views。”
- en: 'The chart returned looks as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的图表如下所示：
- en: '![](../Images/183d6d66f15d5403b42d6e4d87730231.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/183d6d66f15d5403b42d6e4d87730231.png)'
- en: Chart returned from the call to plot() with instructions “Combine rows of Views
    for each Date for latest and stable Version. Draw a smoothed line graph comparing
    Views per Date for latest and stable.”
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用plot()返回的图表带有指令“为最新和稳定版本的每个日期组合Views行。绘制一条平滑的线图，比较最新和稳定版本每个日期的Views。”
- en: '**Build more charts**'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**构建更多图表**'
- en: 'I created some additional charts to further illustrate the traffic to our documentation,
    as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一些额外的图表，以进一步说明我们文档的流量情况，如下所示：
- en: “*Collate rows of data for Path where Version==stable. Create a horizontal bar
    chart describing the total Views for the top 5 pages. Add the numbers to each
    bar and title ‘Total views for top 5 stable pages’. Decrease font size of marks*”
    and “Collate rows of data for Path where Version==stable. Create a line graph
    for the total Views per Date for the top 5 Paths”
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: “*整理 Path 中 Version==stable 的数据行。创建描述前 5 个页面总浏览量的水平条形图。在每个条形图上添加数字和标题‘前 5 个稳定页面的总浏览量’。减小标记的字体大小*”
    和 “整理 Path 中 Version==stable 的数据行。为前 5 个 Path 的每个日期的总浏览量创建折线图”
- en: Vizro-AI has done the heavy lifting for me by generating the code to manipulate
    the data and generate a set of charts, which are useful in themselves . More useful
    still would be to group them together in combination to make a complete dashboard.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Vizro-AI 通过生成操作数据和生成一组图表的代码为我减轻了很大的负担，这些图表本身就很有用。更有用的是将它们组合在一起形成一个完整的仪表板。
- en: '**Create a Vizro dashboard**'
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**创建一个 Vizro 仪表板**'
- en: 'You can use Vizro in the same Jupyter Notebook as the Vizro-AI code above.
    Make sure to `pip install vizro` as the [Vizro documentation](https://vizro.readthedocs.io/en/stable/pages/user-guides/install/)
    describes. Here is some code for the skeleton of a simple dashboard without the
    chart generation:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在与上面的 Vizro-AI 代码相同的 Jupyter Notebook 中使用 Vizro。确保按照 [Vizro 文档](https://vizro.readthedocs.io/en/stable/pages/user-guides/install/)
    中的描述进行 `pip install vizro`。这里是一个简单仪表板框架的代码，没有图表生成：
- en: The `# TO DO` section is where we add in each of the charts.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`# TO DO` 部分是我们添加每个图表的地方。'
- en: 'There are two options at this point:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此时有两个选项：
- en: Use Vizro-AI to generate the charts each time the dashboard is generated
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Vizro-AI 每次生成仪表板时生成图表
- en: Use the Python code that Vizro-AI returned to call directly to Plotly.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Vizro-AI 返回的 Python 代码直接调用 Plotly。
- en: The first option requires less code but will be slower to return, and more expensive,
    because it uses Vizro-AI, which calls OpenAI. The second option is faster but
    requires more code manipulation.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项需要的代码较少，但返回速度较慢，而且更昂贵，因为它使用了调用 OpenAI 的 Vizro-AI。第二个选项速度更快，但需要更多的代码操作。
- en: 'Here’s a cell containing the dashboard code that demonstrates the first option
    with functions that call through to Vizro-AI (*if you plan to run this for yourself,
    make sure you’re using the Notebook in my repo, have loaded the data and stepped
    through the cells that set up the calls to Vizro-AI*):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包含演示第一个选项的仪表板代码的单元格，其中包含调用 Vizro-AI 的函数（*如果您打算自己运行这个，请确保您正在使用我的存储库中的 Notebook，在加载数据并逐步执行设置调用
    Vizro-AI 的单元格*）：
- en: Here’s a slightly different version, which uses the second option to generate
    one of the charts. I‘ve taken the opportunity to tweak the Python code slightly
    to change the colors of the lines, which is about my limit for Plotly manipulation!
    (*Again, if you plan to run this for yourself, make sure you’re using the Notebook
    in my repo, have loaded the data and stepped through the cells that set up the
    chart creation functions*).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个稍微不同的版本，它使用第二个选项生成其中一个图表。我趁机稍微调整了 Python 代码以改变线条的颜色，这已经是我对 Plotly 操作的极限了！（*再次强调，如果你打算自己运行这个，请确保你正在使用我的存储库中的
    Notebook，在加载数据并逐步执行设置图表创建函数的单元格*）。
- en: You can download the Jupyter Notebook to try out the dashboard with your own
    Read the Docs data. It looks as follows with the fake data I supplied.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以下载 Jupyter Notebook 来尝试使用您自己的 Read the Docs 数据查看仪表板。使用我提供的虚假数据，它看起来如下。
- en: '![](../Images/21aad4bf348f8e913cfff9c1d0d9666e.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/21aad4bf348f8e913cfff9c1d0d9666e.png)'
- en: The final output built using method 2 which enabled me to tweak the colours
    in the first chart.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 使用第 2 种方法构建的最终输出，这使我能够调整第一个图表中的颜色。
- en: 'One of my colleagues (thanks Nadija!) gave me a tip that you can run the dashboard
    in the Notebook and then view it in a separate browser window by viewing the port
    you choose as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我的一位同事（感谢 Nadija！）给了我一个提示，你可以在 Notebook 中运行仪表板，然后通过查看你选择的端口在单独的浏览器窗口中查看，方法如下：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively (thanks Antony!), as I’ve shown in the second dashboard example
    above, you can generate a clickable link to view the dashboard as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 或者（感谢 Antony！），如我在上面的第二个仪表板示例中所示，你可以生成一个可点击的链接来查看仪表板，方法如下：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Wrapping up**'
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In this example, I showed how to use Vizro-AI to generate Plotly charts to visualize
    documentation traffic, and then built those charts into a Vizro dashboard.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我展示了如何使用 Vizro-AI 生成 Plotly 图表来可视化文档流量，然后将这些图表构建到一个 Vizro 仪表板中。
- en: If you have data science and Python skills, and a talent for design, you’ll
    *maybe* want the challenge of building a dashboard with Plotly and Dash. But,
    to someone like me without those skills, it’s a game changer to be able to use
    OpenAI and achieve the output above. I now have a useful visualization for Read
    the Docs traffic data in about 50 lines of code. It looks professional and is
    easily extensible and relatively easy to share. With more effort, I could improve
    it further to add customizations such as [filters, parameters](https://vizro.readthedocs.io/en/stable/pages/user-guides/filters/)
    or separate [navigable pages](https://vizro.readthedocs.io/en/stable/pages/user-guides/navigation/).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你具备数据科学和 Python 技能，并且有设计天赋，你*可能*会想挑战一下用 Plotly 和 Dash 构建一个仪表盘。但对于像我这样没有这些技能的人来说，能够使用
    OpenAI 并实现上面提到的输出，简直是一个游戏规则的改变者。我现在只用大约 50 行代码，就能得到一个有用的 Read the Docs 流量数据可视化。它看起来专业，且容易扩展，相对也容易分享。通过更多的努力，我可以进一步改进它，添加自定义功能，如[过滤器，参数](https://vizro.readthedocs.io/en/stable/pages/user-guides/filters/)或独立的[可导航页面](https://vizro.readthedocs.io/en/stable/pages/user-guides/navigation/)。
- en: What’s more, I can collaborate on the dashboard code with my colleagues to adapt
    for other Read the Docs projects. I’ve used a Jupyter Notebook to make it easy
    to demonstrate the project, but this approach works equally well in a Python script,
    making it easily sharable and maintainable in version control. I can also [deploy
    the dashboard](https://vizro.readthedocs.io/en/stable/pages/user-guides/run/#deployment)
    so my colleagues can access it directly without running the code.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，我可以和我的同事们一起合作修改仪表盘代码，以适应其他 Read the Docs 项目。我使用了一个 Jupyter Notebook 来方便演示这个项目，但这种方法同样适用于
    Python 脚本，使得它在版本控制中既易于分享又易于维护。我还可以[部署仪表盘](https://vizro.readthedocs.io/en/stable/pages/user-guides/run/#deployment)，这样我的同事们就可以直接访问，而无需运行代码。
- en: Our team now has a useful and usable dashboard for tracking documentation impact,
    put together by a technical writer in an afternoon. Who can ask for more?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的团队现在有了一个实用且可用的仪表盘，用于跟踪文档的影响，这个仪表盘是由一位技术写作者在一个下午内完成的。还有什么比这更好的呢？
- en: I’d like to thank my colleagues, particularly [Nadija](https://www.linkedin.com/in/nadija-ratkusic-graca-b044a143)
    and [Anna](https://github.com/Anna-Xiong), and [Joe,](https://www.linkedin.com/in/joseph-perkins-aa278272/)
    for several rounds of review feedback as I was putting this post together.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我想感谢我的同事们，特别是[Nadija](https://www.linkedin.com/in/nadija-ratkusic-graca-b044a143)和[Anna](https://github.com/Anna-Xiong)，以及[Joe,](https://www.linkedin.com/in/joseph-perkins-aa278272/)，感谢他们在我整理这篇文章时提供了多轮的反馈意见。
