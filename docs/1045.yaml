- en: Building an Email Assistant Application with Burr
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Burr构建邮件助手应用程序
- en: 原文：[https://towardsdatascience.com/building-an-email-assistant-application-with-burr-324bc34c547d?source=collection_archive---------4-----------------------#2024-04-25](https://towardsdatascience.com/building-an-email-assistant-application-with-burr-324bc34c547d?source=collection_archive---------4-----------------------#2024-04-25)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/building-an-email-assistant-application-with-burr-324bc34c547d?source=collection_archive---------4-----------------------#2024-04-25](https://towardsdatascience.com/building-an-email-assistant-application-with-burr-324bc34c547d?source=collection_archive---------4-----------------------#2024-04-25)
- en: A tutorial to demonstrate how to use Burr, using simple OpenAI client calls
    to GPT4, and FastAPI to create a custom email assistant agent.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本教程演示了如何使用Burr，通过简单的OpenAI客户端调用GPT4，以及使用FastAPI来创建一个定制的邮件助手智能体。
- en: '[](https://medium.com/@stefan.krawczyk?source=post_page---byline--324bc34c547d--------------------------------)[![Stefan
    Krawczyk](../Images/150405abaad9590e1dc2589168ed2fa3.png)](https://medium.com/@stefan.krawczyk?source=post_page---byline--324bc34c547d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--324bc34c547d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--324bc34c547d--------------------------------)
    [Stefan Krawczyk](https://medium.com/@stefan.krawczyk?source=post_page---byline--324bc34c547d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@stefan.krawczyk?source=post_page---byline--324bc34c547d--------------------------------)[![Stefan
    Krawczyk](../Images/150405abaad9590e1dc2589168ed2fa3.png)](https://medium.com/@stefan.krawczyk?source=post_page---byline--324bc34c547d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--324bc34c547d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--324bc34c547d--------------------------------)
    [Stefan Krawczyk](https://medium.com/@stefan.krawczyk?source=post_page---byline--324bc34c547d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--324bc34c547d--------------------------------)
    ·12 min read·Apr 25, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--324bc34c547d--------------------------------)
    ·12分钟阅读·2024年4月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7b059bfe0d0e941f2f4d698e8c8ce886.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7b059bfe0d0e941f2f4d698e8c8ce886.png)'
- en: The control flow of the agent application we’ll create. Image by author.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建的智能体应用程序的控制流程。图像由作者提供。
- en: 'In this tutorial, I will demonstrate how to use [Burr](https://github.com/dagworks-inc/burr),
    an open source framework (disclosure: I helped create it), using simple OpenAI
    client calls to GPT4, and [FastAPI](https://fastapi.tiangolo.com/) to create a
    custom email assistant agent. We’ll describe the challenge one faces and then
    how you can solve for them. For the application frontend we provide a reference
    implementation but won’t dive into details for it.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我将演示如何使用 [Burr](https://github.com/dagworks-inc/burr)，一个开源框架（披露：我参与了它的创建），通过简单的OpenAI客户端调用GPT4，以及
    [FastAPI](https://fastapi.tiangolo.com/) 来创建一个定制的邮件助手智能体。我们将描述面对的挑战，然后讲解如何解决这些问题。对于应用的前端，我们提供一个参考实现，但不会深入细节。
- en: '**Why are interactive agents applications a challenge?**'
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**为什么交互式智能体应用程序是一项挑战？**'
- en: LLMs rarely achieve complex goals on their own, and almost never on the first
    try. While it is in vogue to claim that ChatGPT given an internet connection can
    solve the world’s problems, the majority of high-value tools we’ve encountered
    use a blend of AI ingenuity and human guidance. This is part of the general move
    towards building agents — an approach where the AI makes decisions from information
    it receives — this could be information it queries, information a user provides,
    or information another LLM gives it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 大型语言模型（LLMs）很少能单独完成复杂的任务，而且几乎从未在第一次尝试时成功。虽然目前流行一种说法，认为如果给ChatGPT连接互联网，它可以解决世界上的所有问题，但我们遇到的大多数高价值工具都使用了AI的创新和人类的引导。这是构建智能体（agent）的普遍趋势——一种由AI根据收到的信息做出决策的方法——这些信息可以是它查询的内容、用户提供的信息，或者是另一个大型语言模型提供的信息。
- en: A simple example of this is a tool to help you draft a response to an email.
    You put the email and your response goals, and it writes the response for you.
    At a minimum, you’ll want to provide feedback so it can adjust the response. Furthermore,
    you will want it to give a chance to ask clarifying questions (an overly confident
    yet incorrect chatbot helps no one).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的例子是一个帮助你起草邮件回复的工具。你提供邮件内容和你的回复目标，它会为你写出回复内容。至少，你需要提供反馈，这样它才能调整回复内容。此外，你还希望它能有机会提出澄清性问题（一个过于自信但错误的聊天机器人对任何人都没有帮助）。
- en: 'In designing this interaction, your system will, inevitably, become a back-and-forth
    between user/LLM control. In addition to the standard challenges around AI applications
    (unreliable APIs, stochastic implementations, etc…), you will face a suite of
    new problems, including:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计这个交互时，你的系统将不可避免地成为用户/LLM控制之间的反复往返。除了AI应用程序的标准挑战（不可靠的API、随机实现等），你还将面临一系列新的问题，包括：
- en: Logically modeling a set of interaction points/flows
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合理建模一组交互点/流程
- en: Persisting the state so the user can pick up the interaction/application from
    where it left off
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持久化状态，以便用户可以从中断的地方继续交互/应用程序
- en: Monitoring the decisions the LLM made (E.G. whether to ask the user questions
    or not)
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控LLM做出的决策（例如，是否向用户提问）
- en: And so on… In this post we’re going to walk through how to approach solving
    these — we’ll use the Burr library as well as FastAPI to build a web service to
    address these challenges in an extensible, modular manner; so you can then use
    this as a blue print for your own agent assistant needs.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以此类推……在本文中，我们将讲解如何解决这些问题——我们将使用Burr库和FastAPI构建一个Web服务，以可扩展、模块化的方式解决这些挑战；这样你就可以将其作为自己代理助手需求的蓝图。
- en: The Tools
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具
- en: Burr
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Burr
- en: '[Burr](https://github.com/dagworks-inc/burr) is a lightweight python library
    you use to build applications as state machines. You construct your application
    out of a series of actions (these can be either decorated functions or objects),
    which declare inputs from state, as well as inputs from the user. These specify
    custom logic (delegating to any framework), as well as instructions on how to
    update state. State is immutable, which allows you to inspect it at any given
    point. Burr handles orchestration, monitoring and persistence.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[Burr](https://github.com/dagworks-inc/burr)是一个轻量级的Python库，用于构建状态机应用程序。你可以通过一系列操作（这些可以是装饰函数或对象）构建你的应用程序，这些操作声明来自状态的输入，以及来自用户的输入。这些操作指定自定义逻辑（可以委托给任何框架），以及如何更新状态的指令。状态是不可变的，这使得你可以在任何时候检查它。Burr处理编排、监控和持久化。'
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that the action above has two returns — the results (the counter), and
    the new, modified state (with the counter field incremented).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述操作有两个返回值——结果（计数器），以及新的、修改后的状态（计数器字段已增加）。
- en: You run your Burr actions as part of an application — this allows you to string
    them together with a series of (optionally) conditional transitions from action
    to action.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将Burr操作作为应用程序的一部分运行——这使得你可以将它们通过一系列（可选的）条件过渡串联起来。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Burr comes with a user-interface that enables monitoring/telemetry, as well
    as hooks to persist state/execute arbitrary code during execution.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Burr提供了一个用户界面，支持监控/遥测功能，并提供钩子来在执行过程中持久化状态/执行任意代码。
- en: 'You can visualize this as a flow chart, i.e. graph / state machine:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将其可视化为一个流程图，即图形/状态机：
- en: '![](../Images/82b3314c0dd8202e046fac71eb013c1d.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/82b3314c0dd8202e046fac71eb013c1d.png)'
- en: Image of our application as produced by Burr. Image by author.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的图像，由Burr生成。图像来自作者。
- en: 'And monitor it using the local telemetry debugger:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用本地遥测调试器进行监控：
- en: '![](../Images/7cfd6694f108ffd1e74d01f09afba486.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7cfd6694f108ffd1e74d01f09afba486.png)'
- en: Burr comes with a UI — this is what it looks like when inspecting a run of our
    counter example. Image by author.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Burr自带UI——这是我们检查计数器示例运行时的界面。图像来自作者。
- en: While we showed the (very simple) counter example above, Burr is more commonly
    used for building chatbots/agents (we’ll be going over an example in this post).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们在上面展示了（非常简单的）计数器示例，Burr通常用于构建聊天机器人/代理（我们将在本文中展示一个示例）。
- en: FastAPI
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FastAPI
- en: '[FastAPI](https://fastapi.tiangolo.com/) is a framework that lets you expose
    python functions in a REST API. It has a simple interface — you write your functions
    then decorate them, and run your script — turning it into a server with self-documenting
    endpoints through [OpenAPI](https://www.openapis.org/).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[FastAPI](https://fastapi.tiangolo.com/)是一个框架，可以让你将Python函数暴露为REST API。它有一个简单的接口——你编写你的函数并装饰它们，然后运行你的脚本——将其转换为一个具有自文档化端点的服务器，通过[OpenAPI](https://www.openapis.org/)实现。'
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: FastAPI is easy to deploy on any cloud provider — it is infrastructure-agnostic
    and can generally scale horizontally (so long as consideration into state management
    is done). See [this page](https://fastapi.tiangolo.com/deployment/cloud/?h=deploy)
    for more information.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI易于在任何云提供商上部署——它是基础设施无关的，通常可以横向扩展（只要考虑到状态管理）。有关更多信息，请参阅[此页面](https://fastapi.tiangolo.com/deployment/cloud/?h=deploy)。
- en: React (or any frontend framework)
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React（或任何前端框架）
- en: You can use any frontend framework you want — react-based tooling, however,
    has a natural advantage as it models everything as a function of state, which
    can map 1:1 with the concept in Burr. In the demo app we use [react](https://react.dev/),
    [react-query](https://tanstack.com/query/latest/docs/framework/react/overview),
    and [tailwind](https://tailwindcss.com/), but we’ll be skipping over this largely
    (it is not central to the purpose of the post).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用任何前端框架——然而，基于 React 的工具具有天然优势，因为它将一切建模为状态的函数，这可以与 Burr 中的概念 1:1 映射。在演示应用程序中，我们使用了[react](https://react.dev/)、[react-query](https://tanstack.com/query/latest/docs/framework/react/overview)
    和[tailwind](https://tailwindcss.com/)，但我们将大部分跳过这部分内容（因为它与文章的主要目的无关）。
- en: Building
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建
- en: 'Let’s dig a bit more into the conceptual model. At a high-level, our email
    assistant will do the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地探讨一下概念模型。从高层次来看，我们的电子邮件助手将执行以下操作：
- en: Accept an email + instructions to respond
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受电子邮件和回应指令
- en: Come up with a set of clarifying questions (if the LLM deems it required)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提出一组澄清性问题（如果 LLM 认为有必要）
- en: Generates a draft using the answer to those questions
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这些问题的答案生成草稿
- en: Accept feedback to that draft and generates another one, repeating until the
    user is happy
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受反馈并生成另一个草稿，重复此过程直到用户满意
- en: Return the final draft (done)
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回最终草稿（完成）
- en: Modeling Control Flow
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制流建模
- en: As Burr requires you to build a control flow from *actions* and *transitions*,
    we can initially model this as a simple flowchart.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Burr 要求你从*动作*和*过渡*中构建控制流，我们最初可以将其建模为一个简单的流程图。
- en: '![](../Images/7b059bfe0d0e941f2f4d698e8c8ce886.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7b059bfe0d0e941f2f4d698e8c8ce886.png)'
- en: What our application will look like. Image by author.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用程序的外观。图片由作者提供。
- en: We drafted this before actually writing any code — you will see it transforms
    to code naturally.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在实际编写任何代码之前就已草拟了这个——你会看到它自然地转化为代码。
- en: The green nodes represent actions (these take state in and modify it), and the
    blue nodes represent inputs (these are points at which the app has to pause and
    ask the user for information). Note that there is a loop (formulate_draft ⇔process_feedback)
    — we iterate on feedback until we’re happy with the results.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 绿色节点代表动作（这些操作接收状态并修改它），蓝色节点代表输入（这些是应用程序必须暂停并向用户询问信息的点）。请注意，存在一个循环（formulate_draft
    ⇔process_feedback）——我们根据反馈进行迭代，直到对结果满意为止。
- en: 'This diagram is simply a stylized version of what Burr shows you — the modeling
    is meant to be close to the actual code. We have not displayed state information
    (the data the steps take in/return), but we’ll need to track the following (that
    may or may not be populated at any given point) so we can make decisions about
    what to do next:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 该图表仅是 Burr 所展示内容的样式化版本——建模应该尽量接近实际代码。我们没有显示状态信息（步骤中传入/返回的数据），但我们需要跟踪以下内容（这些内容在任何给定时刻可能会被填充，也可能不会），以便我们做出下一步决策：
- en: 'The initial inputs: `{email_to_respond: str, response_instructions: str}`'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '初始输入：`{email_to_respond: str, response_instructions: str}`'
- en: 'The questions the LLM asks and the user responses (if any):`{clarifications:
    list[str], response_instructions: list[str]}`'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'LLM 提出的问题和用户的回答（如果有的话）：`{clarifications: list[str], response_instructions:
    list[str]}`'
- en: 'The list of drafts + feedback: `{drafts: list[str], feedback_history: list[str]}`'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '草稿和反馈的列表：`{drafts: list[str], feedback_history: list[str]}`'
- en: 'The final result: `{final_result: str}`'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '最终结果：`{final_result: str}`'
- en: Implementing/Testing
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施/测试
- en: 'Looking at the requirements above, we can build a straightforward burr application
    since we can very closely match our code with our diagram above. Let’s take a
    look at the [determine_clarifications](https://github.com/DAGWorks-Inc/burr/blob/c3810dcf5a4aa44153957377ddb17fc97e05ac92/examples/email-assistant/application.py#L32C1-L65C46)
    step, for example:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述需求，我们可以构建一个简单的 Burr 应用程序，因为我们的代码可以与上面的图表紧密匹配。举个例子，我们来看一下[determine_clarifications](https://github.com/DAGWorks-Inc/burr/blob/c3810dcf5a4aa44153957377ddb17fc97e05ac92/examples/email-assistant/application.py#L32C1-L65C46)步骤：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note that this uses simple OpenAI calls — you can replace this with [Langchain](https://www.langchain.com/),
    [LlamaIndex](https://www.llamaindex.ai/), [Hamilton](https://github.com/dagWorks-Inc/hamilton)
    (or something else) if you prefer more abstraction, and delegate to whatever LLM
    you like to use. And, you should probably use something a little more concrete
    (E.G. [instructor](https://github.com/jxnl/instructor)) to guarantee output shape.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这使用的是简单的OpenAI调用——如果你希望更抽象一些，你可以将其替换为[Langchain](https://www.langchain.com/)、[LlamaIndex](https://www.llamaindex.ai/)、[Hamilton](https://github.com/dagWorks-Inc/hamilton)（或其他类似工具），并委托你喜欢使用的LLM。而且，你应该可能使用一些更具体的工具（例如[instructor](https://github.com/jxnl/instructor)）来保证输出格式。
- en: To tie these together, we put them into the application builder — this allows
    us to set conditional transitions (e.g. `len(clarification_questions>0`) and therefore
    connect actions, recreating the diagram above.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这些结合在一起，我们将它们放入应用构建器中——这使我们能够设置条件转移（例如`len(clarification_questions>0)`），从而连接不同的动作，重现上面的图表。
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To iterate on this, we used a [jupyter notebook.](https://github.com/DAGWorks-Inc/burr/blob/main/examples/email-assistant/notebook.ipynb)
    Running our application is simple — all you do is call the `.run()` method on
    the Application, with the right *halting* conditions. We’ll want it to halt before
    any action that requires user input (`clarify_instructions` and `process_feedback`),
    and after `final_result`. We can then run it in a while loop, asking for user
    input and feeding it back to the state machine:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行迭代，我们使用了一个[jupyter notebook.](https://github.com/DAGWorks-Inc/burr/blob/main/examples/email-assistant/notebook.ipynb)
    运行我们的应用非常简单——你只需要在Application上调用`.run()`方法，并设置合适的*停止*条件。我们希望它在任何需要用户输入的动作之前停止（`clarify_instructions`和`process_feedback`），以及在`final_result`之后停止。然后，我们可以在一个while循环中运行它，要求用户输入并将其反馈给状态机：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can then use the Burr UI to monitor your application as it runs!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以使用Burr UI来监控应用的运行！
- en: '![](../Images/fe14069261250066fd0ba15e25320d6b.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fe14069261250066fd0ba15e25320d6b.png)'
- en: Example of using the Burr UI (with the email app UI) and then seeing it’s execution.
    Image by author.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Burr UI（结合电子邮件应用UI）并查看其执行情况的示例。图像由作者提供。
- en: Persistence
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久化
- en: We’re going to persist our results to an SQLite server (although as you’ll see
    later on this is customizable). To do this, we need to add a few lines to the
    ApplicationBuilder.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把结果保存到一个SQLite服务器中（虽然正如你稍后看到的，这可以自定义）。为此，我们需要向ApplicationBuilder中添加几行代码。
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This ensures that every email draft we create will be saved and can be loaded
    at every step. When you want to resume a prior draft of an email, all you have
    to do is rerun the code and it will start where it left off.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了我们创建的每个电子邮件草稿都会被保存，并且可以在每个步骤中加载。当你想恢复之前的电子邮件草稿时，你只需要重新运行代码，它将从上次停止的地方继续。
- en: Integrating in a web server
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成到Web服务器中
- en: To expose this in a web server we’ll be using FastAPI to create endpoints and
    Pydantic to represent types. Before we get into the details, we’ll note that Burr
    naturally provides an `application_id` (either generated or specified) for every
    instance of an application. In this case the `application_id` would correspond
    to a particular email draft. This allows us to uniquely access it, query from
    the db, etc… It also allows for a partition key (E.G. user_id) so you can add
    additional indexing in your database. We center the API around inputs/outputs
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Web服务器中暴露这些端点，我们将使用FastAPI来创建端点，并使用Pydantic来表示类型。在深入细节之前，我们需要注意，Burr自然为每个应用实例提供了一个`application_id`（可以是生成的或指定的）。在这种情况下，`application_id`对应于某个特定的电子邮件草稿。这使得我们能够唯一地访问它，从数据库中查询等……它还支持分区键（例如user_id），这样你可以在数据库中添加额外的索引。我们将API围绕输入/输出进行设计。
- en: Endpoints
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端点
- en: 'We will construct the following endpoints:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建以下端点：
- en: '`POST /create`: This will create a new application and return the ID'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`POST /create`: 这将创建一个新应用并返回ID'
- en: '`PUT /initialize_draft/{id}/`: This calls out to process_input, passing in
    the email and instructions'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PUT /initialize_draft/{id}/`: 这会调用process_input，传入电子邮件和指令'
- en: '`PUT /clarify_instructions/{id}`: This will give answers back to the LLM'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PUT /clarify_instructions/{id}`: 这将把答案返回给LLM'
- en: '`PUT /process_feedback/{id}`: This will give feedback back to the LLM'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PUT /process_feedback/{id}`: 这将把反馈返回给LLM'
- en: '`GET /{id}/state`: This will return the current state of the application'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`GET /{id}/state`: 这将返回应用程序的当前状态'
- en: The GET endpoint allows us to get the current state of the application — this
    enables the user to reload if they quit the browser/get distracted. Each of these
    endpoints will return the full state of the application, which can be rendered
    on the frontend. Furthermore, it will indicate the next API endpoint we call,
    which allows the UI to render the appropriate form and submit to the right endpoint.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: GET端点允许我们获取应用的当前状态——这使得用户可以在退出浏览器或被分心后重新加载。每个端点将返回应用的完整状态，可以在前端渲染。此外，它将指示我们调用的下一个API端点，从而让用户界面渲染正确的表单并提交到正确的端点。
- en: 'Using FastAPI + Pydantic, this becomes very simple to implement. First, let’s
    add a utility to get the application object. This will use a cached version or
    instantiate it:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用FastAPI + Pydantic，这变得非常简单。首先，我们添加一个工具来获取应用对象。它将使用缓存的版本或实例化它：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: All this does is call our function application in email_assistant that recreates
    the application. We have not included the `create` function here, but it calls
    out to the same API.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这仅仅是调用我们在email_assistant中的应用函数，该函数重新创建了应用。我们没有在这里包含`create`函数，但它会调用相同的API。
- en: Data Model
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据模型
- en: 'Let’s then define a Pydantic model to represent the state, and the app object
    in FastAPI:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义一个Pydantic模型来表示状态，以及FastAPI中的应用对象：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that every endpoint will return this same pydantic model!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，每个端点将返回相同的Pydantic模型！
- en: Endpoints
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端点
- en: Given that each endpoint returns the same thing (a representation of the current
    state as well as the next step to execute), they all look the same. We can first
    implement a generic `run_through`function, which will progress our state machine
    forward, and return the state.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于每个端点返回相同的内容（当前状态的表示以及要执行的下一步），它们看起来都是一样的。我们可以首先实现一个通用的`run_through`函数，它将推动我们的状态机前进，并返回状态。
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This represents a simple but powerful architecture. We can continue calling
    these endpoints until we’re at a “terminal” state, at which point we can always
    ask for the state. If we decide to add more input steps, we can modify the state
    machine and add more input steps. We are not required to hold state in the app
    (it is all delegated to Burr’s persistence), so we can easily load up from any
    given point, allowing the user to wait for seconds, minutes, hours, or even days
    before continuing.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这代表了一个简单但强大的架构。我们可以继续调用这些端点，直到达到“终端”状态，在此时我们可以随时请求状态。如果我们决定添加更多的输入步骤，我们可以修改状态机并添加更多的输入步骤。我们不需要在应用中保持状态（所有状态都委托给Burr的持久化），因此我们可以轻松地从任何给定的点加载，允许用户在继续之前等待几秒钟、几分钟、几小时甚至几天。
- en: As the frontend simply renders based on the current state and the next step,
    it will always be correct, and the user can always pick up where they left off.
    With Burr’s telemetry capabilities you can debug any state-related issues, ensuring
    a smooth user experience.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 由于前端只是根据当前状态和下一步渲染，它始终是正确的，用户总是可以从上次离开的地方继续。通过Burr的遥测功能，你可以调试任何与状态相关的问题，确保流畅的用户体验。
- en: Adding a UI
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加用户界面
- en: 'Now that we have a set of endpoints, the UI is simple. In fact, it mirrors
    the API almost exactly. We won’t dig into this too much, but the high-level is
    that you’ll want the following capabilities:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一组端点，用户界面很简单。事实上，它几乎与API完全一致。我们不会深入探讨这一点，但总体思路是你将需要以下功能：
- en: Render the current state (show the history, latest draft)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 渲染当前状态（显示历史记录，最新草稿）
- en: Include a form for the next action’s inputs (provide feedback, answer clarifications)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为下一步的输入操作包含一个表单（提供反馈，回答澄清问题）
- en: Post the results to your FastAPI endpoints, pause for response, GOTO (1)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将结果发布到你的FastAPI端点，暂停等待响应，转到（1）
- en: 'You can see the UI [here](https://github.com/DAGWorks-Inc/burr/blob/main/telemetry/ui/src/examples/EmailAssistant.tsx).
    Here’s an example of it in action:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[这里](https://github.com/DAGWorks-Inc/burr/blob/main/telemetry/ui/src/examples/EmailAssistant.tsx)查看用户界面。以下是它运行时的一个示例：
- en: '![](../Images/3e645b6e63e200b656e18c6fce0a0cf0.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3e645b6e63e200b656e18c6fce0a0cf0.png)'
- en: You can play around with it if you download burr (``pip install “burr[start]”
    && burr``), and navigate to [http://localhost:7241/demos/email-assistant](http://localhost:7241/demos/email-assistant).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你下载了burr（``pip install “burr[start]” && burr``），并导航到[http://localhost:7241/demos/email-assistant](http://localhost:7241/demos/email-assistant)，你可以随意尝试。
- en: Note that there are *many* tools that make this easier/simpler to prototype,
    including [chainlit](https://docs.chainlit.io/get-started/overview), [streamlit](https://streamlit.io/),
    etc… The backend API we built is amenable to interacting with them as well.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有 *许多* 工具使得原型制作更简单/更容易，包括 [chainlit](https://docs.chainlit.io/get-started/overview)、[streamlit](https://streamlit.io/)
    等等……我们构建的后端 API 也可以与这些工具进行交互。
- en: Additional Capabilities
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外功能
- en: Customizing Persistence
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义持久化
- en: While we used the simple SQLLite persister, you can use any of the others that
    come with Burr or implement your own to match your schema/db infrastructure. To
    do this you implement the [BaseStatePersister](https://burr.dagworks.io/reference/persister/#burr.core.persistence.BaseStatePersister)
    class, and add it in with the ApplicationBuilder, instead of the SQLLite persister
    we used above.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们使用了简单的 SQLLite 持久化方式，但你可以使用 Burr 提供的其他持久化方法，或者实现自己的持久化方式，以匹配你的架构/数据库基础设施。为此，你需要实现
    [BaseStatePersister](https://burr.dagworks.io/reference/persister/#burr.core.persistence.BaseStatePersister)
    类，并将其与 ApplicationBuilder 一起使用，而不是我们上面使用的 SQLLite 持久化方式。
- en: Additional Monitoring/Visibility
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外的监控/可视化
- en: Using the Burr UI to monitor is not the only way. You can integrate your own
    by leveraging [lifecycle hooks](https://burr.dagworks.io/concepts/hooks/), enabling
    you to log data in a custom format to, say, [datadog](http://datadog.com/), [langsmith](https://www.langchain.com/langsmith),
    or [langfuse](http://langfuse.com/).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Burr UI 进行监控并不是唯一的方法。你可以通过利用 [生命周期钩子](https://burr.dagworks.io/concepts/hooks/)
    来集成自己的监控方式，允许你以自定义格式记录数据，并将其发送到比如 [datadog](http://datadog.com/)、[langsmith](https://www.langchain.com/langsmith)
    或 [langfuse](http://langfuse.com/)。
- en: Furthermore, you can leverage additional monitoring capabilities to track spans/traces,
    either logging them directly to the Burr UI or to any of the above providers.
    See the list of available hooks [here](https://burr.dagworks.io/reference/lifecycle/#hooksref).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以利用额外的监控功能来跟踪跨度/追踪，直接记录到 Burr UI 或上述任何提供商。查看可用钩子列表 [这里](https://burr.dagworks.io/reference/lifecycle/#hooksref)。
- en: Async/Streaming
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步/流式处理
- en: While we kept the APIs we exposed synchronous for simplicity, Burr supports
    asynchronous execution as well. Burr also supports streaming responses for those
    who want to provide a more interactive UI/reduce *time to first token*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然为了简化，我们暴露的 API 是同步的，但 Burr 也支持异步执行。Burr 还支持流式响应，以便为那些想要提供更互动 UI/减少 *首次响应时间*
    的用户提供支持。
- en: So how does it do in practice?
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么它在实践中如何运作呢？
- en: As with any LLM application, the entire prompt matters. If you can provide the
    right guidance, the results are going to be better than if you don’t. Much like
    if you are going to instruct a human, more guidance is always better. That said,
    if you find yourself always correcting some aspect, then changing the base prompt
    is likely the best course of action. For example, using a [single-shot or few-shot](https://neptune.ai/blog/zero-shot-and-few-shot-learning-with-llms#:~:text=%E2%80%9COne%2Dshot%E2%80%9D%20means%20we,examples%20%E2%80%93%20you%20get%20the%20gist.)
    approach might be a good choice to try to help instruct the LLM as to what you’d
    like to see given your specific context.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与任何 LLM 应用一样，整个提示是至关重要的。如果你能提供正确的指导，结果会比不提供指导时更好。就像你给人类下达指令一样，更多的指导总是更好。也就是说，如果你总是在修正某些方面，那么改变基本的提示可能是最好的解决方案。例如，使用
    [单次或少次示例](https://neptune.ai/blog/zero-shot-and-few-shot-learning-with-llms#:~:text=%E2%80%9COne%2Dshot%E2%80%9D%20means%20we,examples%20%E2%80%93%20you%20get%20the%20gist.)
    方法可能是一个不错的选择，帮助指导 LLM 明确你希望根据特定上下文看到的内容。
- en: Post Summary
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文章总结
- en: In this post we discussed how to address some of the challenges around building
    human-in-the-loop agentic workflows. We ran through an example of making an email
    assistant using Burr to build and run it as a state machine, and FastAPI to run
    Burr in a web service. We finally showed how you can extend the tooling we used
    here for a variety of common production needs — e.g. monitoring & storage.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们讨论了如何解决构建人机协作代理工作流的一些挑战。我们演示了如何使用 Burr 构建并运行一个状态机的电子邮件助手示例，并使用 FastAPI
    在 Web 服务中运行 Burr。最后，我们展示了如何扩展我们在这里使用的工具，以满足各种常见的生产需求——例如，监控和存储。
- en: Additional Resources
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外资源
- en: Join Burr’s [Discord](https://discord.gg/6Zy2DwP4f3) for help or if you have
    questions!
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加入 Burr 的 [Discord](https://discord.gg/6Zy2DwP4f3)，寻求帮助或如果你有任何问题！
- en: '[Burr’s Github repository](http://github.com/dagworks-inc/burr) (if you like
    it we’d love a ⭐️)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Burr 的 Github 仓库](http://github.com/dagworks-inc/burr)（如果你喜欢它，我们很高兴收到你的 ⭐️）'
- en: '[FastAPI guide](https://fastapi.tiangolo.com/)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[FastAPI 指南](https://fastapi.tiangolo.com/)'
- en: '[Technical deep-dive of built with a web-server on github](https://github.com/DAGWorks-Inc/burr/tree/main/examples/web-server)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 上的 Web 服务器技术深度解析](https://github.com/DAGWorks-Inc/burr/tree/main/examples/web-server)'
- en: '[Code for the email assistant](https://github.com/DAGWorks-Inc/burr/tree/main/examples/email-assistant)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[电子邮件助手的代码](https://github.com/DAGWorks-Inc/burr/tree/main/examples/email-assistant)'
