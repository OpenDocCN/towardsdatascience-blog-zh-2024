- en: Performing Customer Analytics with LangChain and LLMs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/performing-customer-analytics-with-langchain-and-llms-0af4ea38f7b5?source=collection_archive---------6-----------------------#2024-02-13](https://towardsdatascience.com/performing-customer-analytics-with-langchain-and-llms-0af4ea38f7b5?source=collection_archive---------6-----------------------#2024-02-13)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Discover the potentials and constraints of LangChain in calculating statistics,
    insight generation, visualization, and making conversation for customer analytics
    — with implementation codes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@johnleungTJ?source=post_page---byline--0af4ea38f7b5--------------------------------)[![John
    Leung](../Images/ef45063e759e3450fa7f3c32b2f292c3.png)](https://medium.com/@johnleungTJ?source=post_page---byline--0af4ea38f7b5--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0af4ea38f7b5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0af4ea38f7b5--------------------------------)
    [John Leung](https://medium.com/@johnleungTJ?source=post_page---byline--0af4ea38f7b5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0af4ea38f7b5--------------------------------)
    ·11 min read·Feb 13, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Many businesses possess a lot of proprietary data stored in their databases.
    However, the data is complex and unapproachable for users, so they often struggle
    to identify trends and extract actionable insights. That’s where business intelligence
    (BI) dashboards play an essential role, which is the starting point for users
    to interact with the consolidated view of data at a glance.
  prefs: []
  type: TYPE_NORMAL
- en: The bottleneck of the BI dashboards
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[An effective BI dashboard](/how-to-build-effective-and-useful-dashboards-711759534639)
    should be designed to contain only the relevant information for the target audience
    and avoid picking cluttered visual elements into one. But this does not well address
    a challenge. Sometimes users suddenly have additional inquiries or wish to explore
    new analytical perspectives beyond what is displayed in the dashboard. If they
    do not have any technical background to dynamically tailor the underlying logic
    of visualization, it may fail to meet their needs.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e4b6e426628a25f509d7e9dfd59374d.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Emily Morter](https://unsplash.com/@emilymorter?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: The recent framework [LangChain](https://www.langchain.com/) reduces the technical
    barrier of interacting with data due to its advanced language processing capabilities,
    it thus potentially presents new opportunities for businesses. Let’s explore the
    basics of how it works.
  prefs: []
  type: TYPE_NORMAL
- en: How LangChain works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Large-language models (LLMs), such as [ChatGPT](/how-chatgpt-works-the-models-behind-the-bot-1ce5fca96286)
    and [Llama](/mistral-ai-vs-meta-comparing-top-open-source-llms-565c1bc1516e),
    have high abilities in language comprehension and text generation. As an open-source
    library, LangChain integrates LLMs into the applications. It provides multiple
    modules for efficient interaction and streamlining the workflow, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Document loader:**](https://python.langchain.com/docs/modules/data_connection/document_loaders/)
    Facilitate the data loading from various sources, including CSV files, SQL databases,
    and public datasets like Wikipedia.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Agent:**](https://python.langchain.com/docs/modules/agents/) Use the language
    model as a reasoning engine to determine which actions to take and in which order.
    It repeats through a continuous cycle of thought-action-observation until the
    task is completed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Chain:**](https://python.langchain.com/docs/modules/chains) Different from
    agents, they consist of predetermined sequences of actions, which are hard coded.
    It addresses complex and well-defined tasks by guiding multiple tools with high-level
    directions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Memory**:](https://python.langchain.com/docs/modules/memory/) Currently
    the beta version supports accessing windows of past messages, this provides the
    application with a conversational interface'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using these modules as the foundation, we will start coding a simple application
    that utilizes the LLM. In this hands-on journey, we will assume the roles of business
    users and experiment to see if we can conduct exploratory data analysis simply
    by inputting natural language inquiries.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4a1935229d65ad2facd8159084fcd6f6.png)'
  prefs: []
  type: TYPE_IMG
- en: The flows that LLM-based application works (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: Consider a scenario where you plan to conduct customer analytics for a retail
    shop, so you have collected sales data over the past 12 months. Your goal is to
    understand better diverse aspects such as customer demographics, spending behaviors,
    and product categories.
  prefs: []
  type: TYPE_NORMAL
- en: 'The [dataset](https://www.kaggle.com/datasets/mohammadtalib786/retail-sales-dataset/data)
    [with license as [CC0: Public domain](https://creativecommons.org/publicdomain/zero/1.0/)]
    obtained from Kaggle contains several fields, including transaction ID, transaction
    date, customer ID, gender, age, product category, the number of units of the products
    purchased, the price per unit, and the total amount of transactions. We can begin
    our analysis now.'
  prefs: []
  type: TYPE_NORMAL
- en: The initial setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to set up the environment and configurations properly to use LangChain
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Prepare the Python environment with LangChain library alongside other necessary
    dependencies like [SQLite](https://docs.python.org/3/library/sqlite3.html) and
    Pandas
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Configure an OpenAI Key](https://platform.openai.com/docs/quickstart?context=python)
    to query GPT models'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import a CSV file ‘retail_sales_dataset.csv’ into a table within the SQLite
    database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create a LangChain Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '#1 Generate basic statistics'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is the number of transactions **per year and month**?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: To inquire about basic statistics related to the sales SQL table, we use the
    `create_sql_agent` agent helper. Both parameters `verbose` and `return_intermediate_steps`
    are set as True so that the internal states and steps during the execution process
    can be shown. This will be effective for us to iteratively evaluate and refine
    the approach to communicating with the agent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The complete content of the outputs is provided below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bad38dc35915f2c73dadda0eb4efd523.png)'
  prefs: []
  type: TYPE_IMG
- en: Agent’s output steps — basic statistics (1/2) (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a2921b9c569084cd7f01fec74e6255ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Agent’s output steps — basic statistics (2/2) (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The agent writes the query which includes rectifying the formatting of the ‘Date’
    column and producing the correct results. It successfully presents the breakdown
    of transaction counts from Jan 2023 to Jan 2024.
  prefs: []
  type: TYPE_NORMAL
- en: '#2 Perform feature engineering'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is the number of transactions across different **age groups** of customers?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This time, we slightly modified the inquiries to focus on the dimension ‘age
    groups’. This aims to evaluate the agent’s ability to generate new features that
    do not directly originate from the dataset. Applied with a similar concept, you
    can additionally explore statistics across dimensions like transaction dates categorized
    by weekdays/ weekends, purchasing frequency, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4fce5e101ed1a96cd92a54947c47a667.png)'
  prefs: []
  type: TYPE_IMG
- en: A portion of agent’s output steps —feature engineering (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The agent attempts to write the query but unfortunately gives the wrong answer.
    It seems that the agent oversimplifies the concept of ‘age group’, so it is not
    classified as a distinct dimension, and considers it as just ‘age’.
  prefs: []
  type: TYPE_NORMAL
- en: '**Improvement: Use a prompt template with background context**'
  prefs: []
  type: TYPE_NORMAL
- en: When we find that the model misunderstood our intended meaning, or lacks certain
    knowledge, we can use class `PromptTemplate` to create parametrized [prompts](https://python.langchain.com/docs/modules/model_io/prompts/)
    for language models. In this case, I have supplemented additional context about
    examples of extra features in customer analytics as background information, right
    before showing the user inquiry. This aims to provide the model with clearer guidelines
    and deliver our human intent for generating appropriate machine-generated responses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here are the key highlights from the corresponding outputs.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3bb50f647dc9bc1c190b9a8db16a3fc0.png)'
  prefs: []
  type: TYPE_IMG
- en: Agent’s improved output — feature engineering (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: With the aid of the prompt, the agent now successfully categorizes the transactions
    into multiple age groups. It is worth mentioning that there are potentially other
    ways to achieve the same goal, such as using few-shot examples to demonstrate
    the question-answer pairs.
  prefs: []
  type: TYPE_NORMAL
- en: '#3 Plot chart for multi-dimensional features'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We used the `create_sql_agent` agent to calculate basic statistics and generate
    insights. With the art of prompt design, the agent is consequently fit to perform
    the tasks. To support asking new inquiries that cannot be achieved solely by SQL
    query, we need to develop our [custom tool](https://python.langchain.com/docs/modules/agents/tools/custom_tools).
  prefs: []
  type: TYPE_NORMAL
- en: 'Show a **grouped bar graph** visualizing the answer to the following question:
    What are the relationships between product category, average total amount, and
    gender?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this example, the inquiry involves data exploration and visualization. We
    will create our agent based on `create_sql_agent`, and will add the tool `PythonREPLTool`
    for executing Python commands, such as using `Matplotlib` for visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see how the tools are implemented in practice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The flow of SQL agent output is similar to the previous examples we went through
    above, so it is omitted here. The subsequent output from the Python REPL tool
    is presented below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2374f89484dacd6394cd1b6ecdfb387a.png)'
  prefs: []
  type: TYPE_IMG
- en: Agent’s output — plot chart (1/2) (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c6ccbc8e867b34bf3a2caa369c2a718a.png)'
  prefs: []
  type: TYPE_IMG
- en: Agent’s output — plot chart (2/2) (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The customized tool combination successfully translates the natural language
    inquiry into an SQL query. The summarized query results are then used to generate
    a grouped bar chart, which clearly and effectively illustrates the relationships
    through the x-axis, y-axis, and legend.
  prefs: []
  type: TYPE_NORMAL
- en: While the overall design and execution process look smooth, there are indeed
    some limitations in the current design. For example, suppose we want to generate
    a scatter plot with most of the transaction data points. In that case, the execution
    process should generate a long query output that covers all the respective information.
    However, the agent’s output may not be ideal, due to the occasional use of the
    `LIMIT` clause by the agent (that sets an upper limit on the number of tuples),
    or query result larger than the maximum token limit (in our case, 4096 tokens).
    The variety of visualizations that can be generated may thus be limited.
  prefs: []
  type: TYPE_NORMAL
- en: '#4 Make coherent conversation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In reality, business users often have follow-up questions once they receive
    the results of a customer analysis. To address these situations, we need to enhance
    the existing basic LLM application to become more chat-like. We add memory buffers
    to retain past interactions, allowing the LLM to generate responses for the ongoing
    conversation’s context. This works by constantly storing LLM outputs and referencing
    the memory storage before generating a response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initial question: How do customers adapt their shopping habits during different
    seasons?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Follow-up question: Can you elaborate more?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'We supplement and rectify the customized tools combination below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Agent’s responses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c4c4102f9a2c4a12b9b29c4e85b9729a.png)'
  prefs: []
  type: TYPE_IMG
- en: Agent’s output — initial question (1/2) (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e6d8a6f9d9700b85a1f484aab55b6fcd.png)'
  prefs: []
  type: TYPE_IMG
- en: Agent’s output — follow-up question (2/2) (Image by author)
  prefs: []
  type: TYPE_NORMAL
- en: In the follow-up question “Can you elaborate more?”, we intentionally did not
    provide any hints/ keywords about what we were asking, but the agent demonstrated
    its ability to continue the analysis of shopping habits in various seasons. This
    indicates the effectiveness of using memory and shows its advantage by providing
    a more in-depth description across product categories and seasons.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping it up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We conducted experiments to explore the key functionalities and potential approaches
    of LangChain in developing a customer analytics application based on LLM:'
  prefs: []
  type: TYPE_NORMAL
- en: Calculating statistics, by using an `create_sql_agent` agent to query the database
    and retrieve relevant statistical information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insight generation, by applying the prompt template to define the key data features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualization, by using the combination of a custom agent and tool `PythonREPLTool`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conversation capabilities, by adding the memory buffer to store and retrieve
    the chat history.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The choices of wordings in natural language inquiry often do not align precisely
    with those in the database schema. It was observed that the LangChain executor
    sometimes does not work as expected, and may even [hallucinate](https://www.pinecone.io/learn/series/langchain/langchain-retrieval-augmentation/),
    particularly when identifying the data relationships to generate a graph. Therefore,
    the development of codes requires iterative troubleshooting. While the LangChain
    framework may only be somewhat reliable and effective in handling diverse customer
    analytics tasks, it can still offer users with marginal advantage when they have
    a compelling need to discover insights beyond the traditional analysis dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: The design of this application is only the initial stage, and there are further
    possibilities to discover. For example, customer data is sometimes available in
    text format, such as customer reviews or product descriptions. LangChain provides
    the [tagging function](https://python.langchain.com/docs/use_cases/tagging) so
    that we can conduct a comprehensive analysis by labeling the sentiments, language,
    style, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Before you go
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you enjoy this reading, I invite you tofollow my [Medium page](https://medium.com/@johnleungTJ)
    and [LinkedIn page](https://www.linkedin.com/in/john-leung-639800115/). By doing
    so, you can stay updated with exciting content related to data science side projects,
    Machine Learning Operations (MLOps) demonstrations, and project management methodologies.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/managing-the-technical-debts-of-machine-learning-systems-5b85d420ab9d?source=post_page-----0af4ea38f7b5--------------------------------)
    [## Managing the Technical Debts of Machine Learning Systems'
  prefs: []
  type: TYPE_NORMAL
- en: Explore the practices with implementation codes for sustainably mitigating the
    cost of speedy delivery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'towardsdatascience.com](/managing-the-technical-debts-of-machine-learning-systems-5b85d420ab9d?source=post_page-----0af4ea38f7b5--------------------------------)
    [](/monitoring-machine-learning-models-in-production-why-and-how-13d07a5ff0c6?source=post_page-----0af4ea38f7b5--------------------------------)
    [## Monitoring Machine Learning Models in Production: Why and How?'
  prefs: []
  type: TYPE_NORMAL
- en: How our model is impacted in the evolving world? An analysis focusing on drift
    examples, and implementing Python-based…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/monitoring-machine-learning-models-in-production-why-and-how-13d07a5ff0c6?source=post_page-----0af4ea38f7b5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
