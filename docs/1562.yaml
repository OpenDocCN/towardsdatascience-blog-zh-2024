- en: Unveiling Metadynamics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/unveiling-metadynamics-a-beginners-guide-to-mastering-plumed-part-1-of-3-0442e1196abb?source=collection_archive---------4-----------------------#2024-06-22](https://towardsdatascience.com/unveiling-metadynamics-a-beginners-guide-to-mastering-plumed-part-1-of-3-0442e1196abb?source=collection_archive---------4-----------------------#2024-06-22)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A beginner’s guide to mastering PLUMED (Part 1 of 3)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@stimpsondon?source=post_page---byline--0442e1196abb--------------------------------)[![Don
    Robert Stimpson](../Images/271627469edde5c5309ea0289ec0177d.png)](https://medium.com/@stimpsondon?source=post_page---byline--0442e1196abb--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0442e1196abb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0442e1196abb--------------------------------)
    [Don Robert Stimpson](https://medium.com/@stimpsondon?source=post_page---byline--0442e1196abb--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0442e1196abb--------------------------------)
    ·10 min read·Jun 22, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dbe602816330054eafcd9d481d2c12cb.png)'
  prefs: []
  type: TYPE_IMG
- en: DALL-E-generated cover image
  prefs: []
  type: TYPE_NORMAL
- en: In computational chemistry and molecular dynamics (MD), understanding complex
    systems sometimes requires analysis beyond what is provided by your MD engine
    or a visualization in VMD. I personally work with atomistic simulations of biological
    molecules, and they’re pretty friggin’ big. And with the complexity of calculating
    the trajectories of every atom in those big simulation boxes, typically I don’t
    get to see trajectories that go beyond 1 or 2 microseconds, which is a consistent
    upper limit for many MD runs. This means that, while traditional MD is great for
    seeing fluctuations in your trajectories for processes that occur in less than
    that amount of time, but what about ones that take longer?
  prefs: []
  type: TYPE_NORMAL
- en: A powerful technique exists to look at these processes called metadynamics,
    and PLUMED stands out as a leading tool in this domain due to its seamless integration
    with the GROMACS engine. In this series of articles, we will build up an understanding
    of metadynamics, both in terms of theory, code, and syntax, with the end goal
    of being able to generate complex metadynamics simulations for whatever you’re
    trying to get a better look at! This article specifically will be an introduction
    to the concepts and some general code for properly installing PLUMED and a quick
    run.
  prefs: []
  type: TYPE_NORMAL
- en: This article assumes the reader is already familiar with some Molecular Dynamics
    (MD) engine and can generate a system for that engine. This isn’t necessary if
    you’re just looking to learn about a cool technique, but I recommend getting somewhat
    familiar with an MD engine (my preference is GROMACS) if you’re looking to implement
    metadynamics.
  prefs: []
  type: TYPE_NORMAL
- en: What is Metadynamics?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metadynamics is an advanced sampling method designed to explore free energy
    landscapes of molecular systems. It helps to study rare events and slow processes
    by encouraging those events over the ones the system is comfortably doing.
  prefs: []
  type: TYPE_NORMAL
- en: It manages to do this by adding a history-dependent bias potential that allows
    the system to leave local minima in CV space and overcome energy barriers to explore
    a wider variety of configurations specific to what you’re looking to do.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/baaf400885c26ecc903982b077b11f00.png)'
  prefs: []
  type: TYPE_IMG
- en: A 3D rendering of an old metadynamics run I did looking at relative locations
    of two subunits of a membrane protein with respect to each other. Contouring and
    coloring indicate relative free energy, and the 3D view shows that in the context
    of a physical landscape. (Image generated by author).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Gaussian Distributions in Metadynamics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So the key to the success of metadynamics is the implementation of targeted
    Gaussian distributions in the relative free energy of the system. To understand
    this process, let’s take a look at the classical physics trope of a ball on a
    hill. We all know the ball rolls down, but what if the hill isn’t just a hyperbolic
    hump but a mountain range? Well the ball will still roll down, but it’s likely
    to get itself trapped in a crevice or come to rest in a flatter area rather than
    go to the global lowest point in the mountain range.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b723674067a74491103ad65e7ffec45f.png)'
  prefs: []
  type: TYPE_IMG
- en: Look at it go! (DALL-E-generated)
  prefs: []
  type: TYPE_NORMAL
- en: Metadynamics modifies this scenario by sequentially adding Gaussian kernels,
    like small mounds of dirt, under the ball. When you add enough dirt over the ball,
    it’ll be in a position to keep rolling again. We basically do this until we’ve
    more-or-less filled up the valleys with dirt, and we keep track of every mound
    of dirt we add. Once we’ve added enough dirt to get a flat surface instead of
    a mountain range, we can determine the depth of each area by counting up how many
    mounds we’ve added along with the size of each mound, and we can figure out from
    that where the lowest-energy spot in the mountain range was.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now this may not be the most efficient way of doing things with a real ball
    in a real mountain range; it’s not cost effective or environmentally friendly,
    and you ruined a mountain range in the process. But if we apply that idea to the
    free energy surface of a system, it becomes a very desirable option. If we replace
    the position of the ball with collective variable(s) (CVs) that we’re interested
    in and perform the same basic task within it, adding Gaussian distributions as
    we go, we can form a Free Energy Surface (FES) that tells us the relative Gibbs
    free energy of different conformations of our system, like the one below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c7a793f84ff7fa505905bbc09eef3584.png)'
  prefs: []
  type: TYPE_IMG
- en: The top graph here is the free energy surface (FES), which shows the relative
    Gibbs Free Eenrgy as a function of position in 2 dimensions. The second graph
    traces the path that the “ball” took in those dimensions. (Images generated by
    author)
  prefs: []
  type: TYPE_NORMAL
- en: So I’ve included two graphical analyses of a theoretical metadynamics simulation
    above. The first graph is the one we just discussed, building a topological map
    of the relative free energies of the system being in a certain state using 2 CVs.
    I’ve made things easier here by just making the two dimensions spatial, so we’re
    looking at the position of a molecule relative to point (0, 0) and the energy
    associated with that. The second one aims to simplify that point by showing a
    trace of where the molecule has traveled in that coordinate space over time, with
    coloration to indicate at what time it was in what area. Basically it’s a path
    that the ball rolled, and if there’s a big clump of points somewhere it’s likely
    that it corresponds to a minimum on the FES graph. Now a quick point I need to
    make here is that this was a Multiple Walker (MW) simulation because I just grabbed
    one quickly from my archives; what that means is that I had three balls rolling
    and was adding dirt for all three that remained there for all three. We’ll talk
    about why this is done in a future article, but in case you took a really close
    look at that graph, that’s why there are 3 separate traces.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, while I’ve used spatial dimensions to more effectively explain the
    analogy, the CV axes of this graph could be almost anything you can algorithmically
    explain to PLUMED including torsion, angles, vectors, etc. Visualizing it like
    a topographical map is just an easy way of understanding how the CVs work and/or
    work together.
  prefs: []
  type: TYPE_NORMAL
- en: Okay so what up with all the dirt we’re adding? What is a Gaussian Distribution?
  prefs: []
  type: TYPE_NORMAL
- en: A Gaussian distribution (the kernels added), also known as a normal distribution,
    is a bell-shaped curve characterized by its mean (μ) and standard deviation (σ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7527ef36287cd99494309e7cef4f8e83.png)'
  prefs: []
  type: TYPE_IMG
- en: A graph of a Gaussian distribution I made quickly in python showing the mean
    and standard deviations. (Image generated by author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The mathematical representation of a Gaussian distribution is given by the
    equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/321edf81f4fb7b88b416e43460b0775a.png)'
  prefs: []
  type: TYPE_IMG
- en: Gaussian Distribution equation (Image generated by author)
  prefs: []
  type: TYPE_NORMAL
- en: In the context of metadynamics, Gaussian hills are added to the free energy
    surface at regular intervals (usually) to prevent the system from revisiting previously
    explored states. These hills are described by Gaussian functions centered at the
    current position of the system in the collective variable (CV) space. The height
    and width of these Gaussians determine the influence of the bias.
  prefs: []
  type: TYPE_NORMAL
- en: 'The equation for a Gaussian hill in metadynamics is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1812db0da59a31cf17a26bee5b7194b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Bias potential equation (Image generated by author)
  prefs: []
  type: TYPE_NORMAL
- en: In which s(τ) is the position in CV space at time point τ, W is the height of
    the Gaussian bias deposit, δ is the width of the deposit, and the sum runs across
    all times τ where a deposit was added. Basically a fancy way of saying “We added
    this much dirt in these places”. I’ll delve more into the math behind metadynamics
    in Part 2 of this article series, so don’t feel like these equations need to make
    sense to you yet, just knowing about the ball on the hill is plenty for running
    and analyzing our first metadynamics simulation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started with PLUMED
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Installation**:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Not gonna lie, this gets a little annoying, it needs to be patched into your
    MD engine. If you’re not interested in GROMACS as your MD engine, here’s a link
    to the plumed main page because you’re on your own regarding installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.plumed.org/doc-v2.9/user-doc/html/_installation.html?source=post_page-----0442e1196abb--------------------------------)
    [## PLUMED: Installation'
  prefs: []
  type: TYPE_NORMAL
- en: In this page you can learn how to configure, compile, and install PLUMED. For
    those of you who are impatient, the…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: www.plumed.org](https://www.plumed.org/doc-v2.9/user-doc/html/_installation.html?source=post_page-----0442e1196abb--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Otherwise, here’s how to install them both and properly patch them. Follow all
    of these commands if you have neither but ignore the GROMACS installation if you
    already have it installed and working. These commands should be executed one-by-one
    in your terminal/command line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You’ll notice I’ve picked an older version of gromacs; this is just to give
    us a better chance that there are no unforseen bugs moving through these articles,
    you’re more than welcome to use a more recent version at your discretion, just make sure that it’s PLUMED-compatible.
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic Configuration**:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a PLUMED input file to define the collective variables (CVs) that describe
    the system’s important degrees of freedom.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here’s an example file. I’ll go into more detail on some fancier options in
    Part 3 of this article series, but for now we’ll start by looking at the conformational
    state of a set of atoms by using distance and torsion as our CVs. Other potential
    CVs include distances between atoms, angles, dihedrals, or more complex functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The comments in that code block should be extensive enough for a basic understanding
    of everything going on, but I’ll get to all of this in article 3, and we’ll even
    delve beyond into complex functions!
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, once you have this input file (typically named plumed.dat) and the
    .tpr file required for an MD run using GROMACS (look at gmx grompp documentation
    for generating that file), you can run the metadynamics simulation by going to
    the working directory and typing into the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Both PLUMED and GROMACS accept extra arguments. I’ll go over some of the more
    useful ones for both in Part 3 of this series of articles along with some of the
    scripts I’ve written for more advanced runs, and you can look at the documentation
    for any others.
  prefs: []
  type: TYPE_NORMAL
- en: After the simulation, use PLUMED’s analysis tools to reconstruct the free energy
    surface and identify relevant metastable states and transition pathways. Most
    ubiquitous is the use of PLUMED’s `sum_hills` tool to reconstruct the free energy
    surface.
  prefs: []
  type: TYPE_NORMAL
- en: You can take a look at the free energy surface (FES) after that command using
    this python code which will tell you how values of one CV relate to the other.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The output should look similar to the topographical graph I posted earlier on
    (I can’t give you what your FESwill look like because you had the freedom of choosing
    your own system).
  prefs: []
  type: TYPE_NORMAL
- en: You should also visualize the results using popular visualization software like
    VMD to gain insights into the molecular behavior in low energy and metastable
    states.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Metadynamics, powered by PLUMED, offers a robust framework for exploring complex
    molecular systems. By efficiently sampling the free energy landscape, we can uncover
    hidden mechanisms in molecular systems that can’t be achieved through traditional
    MD due to computational constraints.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you are a novice or an experienced researcher, mastering PLUMED can
    significantly enhance your computational chemistry toolkit, so don’t forget to
    check out my upcoming two articles to help you go from beginner to expert!
  prefs: []
  type: TYPE_NORMAL
- en: Article 2 will unveil the mathematical concepts behind adding metadynamics components
    to an MD engine, and Article 3 will expose you to advanced techniques in metadynamics
    such as multiple walker metadynamics, condensing more than 2 variables into a
    readable format, utilizing metadynamics on high-performance clusters, and more
    in-depth analytical techniques to visualize and quantitatively analyze your system
    results (with plenty of sample code).
  prefs: []
  type: TYPE_NORMAL
