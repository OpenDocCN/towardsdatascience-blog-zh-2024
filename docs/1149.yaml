- en: Demo AI Products Like a Pro
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/demo-ai-products-like-a-pro-785a2d9f2d63?source=collection_archive---------7-----------------------#2024-05-07](https://towardsdatascience.com/demo-ai-products-like-a-pro-785a2d9f2d63?source=collection_archive---------7-----------------------#2024-05-07)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An intro to expert guide on using Gradio to demonstrate product value to expert
    and non-technical audiences.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@josephgeorgelewis2000?source=post_page---byline--785a2d9f2d63--------------------------------)[![Joseph
    George Lewis](../Images/2d7c47bd9a323dd0f4a6b610e7fb08fd.png)](https://medium.com/@josephgeorgelewis2000?source=post_page---byline--785a2d9f2d63--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--785a2d9f2d63--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--785a2d9f2d63--------------------------------)
    [Joseph George Lewis](https://medium.com/@josephgeorgelewis2000?source=post_page---byline--785a2d9f2d63--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--785a2d9f2d63--------------------------------)
    ·15 min read·May 7, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9660be088f4c71b28a709809fc9ddc34.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Austin Distel](https://unsplash.com/@austindistel?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: We have all experienced at least one demo that has fallen flat. This is particularly
    a problem in data science, a field where a lot can go wrong on the day. Data scientists
    often have to balance challenges when presenting to audiences with varying experience
    levels. It can be challenging to both show the value and explain core concepts
    of a solution to a wide audience.
  prefs: []
  type: TYPE_NORMAL
- en: This article aims to help overcome the hurdles and help you share your hard
    work! We always work so hard to improve models, process data, and configure infrastructure.
    It’s only fair that we also work hard to make sure others see the value in that
    work. We will explore using the Gradio tool to share AI products. Gradio is an
    important part of the Hugging Face ecosystem. It’s also used by Google, Amazon
    and Facebook so you’ll be in great company! Whilst we will use Gradio, a lot of
    the key concepts can be replicated in common alternatives like StreamLit with
    Python or Shiny with R.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of stakeholder/customer engagement in data science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first challenge when pitching is ensuring that you are pitching at the right
    level. To understand how your AI model solves problems, customers first need to
    understand what it does, and what the problems are. They may have a PhD in data
    science, or they may never have heard of a model before. You don’t need to teach
    them linear algebra nor should you talk through a white paper of your solution.
    Your goal is to convey the value added by your solution, to all audiences.
  prefs: []
  type: TYPE_NORMAL
- en: This is where a practical demo comes in. **Gradio** is a lightweight open source
    package for making practical demos [1]. It is well documented that live demos
    can feel more personal, and help to drive conversation/generate new leads [2].
    **Practical demos can be crucial in building trust and understanding with new
    users**. Trust builds from seeing you use the tool, or even better testing with
    your own inputs. When users can demo the tool they know there is no “Clever Hans”
    [3] process going on and what they see is what they get. Understanding grows from
    users seeing the “if-this-then-that” patterns in how your solution operates.
  prefs: []
  type: TYPE_NORMAL
- en: Then comes the flipside … everyone has been to a bad live demo. We have all
    sat through or made others sit through technical difficulties.
  prefs: []
  type: TYPE_NORMAL
- en: 'But technical difficulties aren’t the only thing that give us reason to fear
    live demos. Some other common off-putting factors are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Information dumping**: Pitching to customers should never feel like a lecture.
    Adding demos that are inaccessible can give customers too much to learn too quickly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developing a demo**: Demos can be slow to build and actually slow down development.
    Regularly feeding back in “show and tells” is a particular problem for agile teams.
    Getting content for the show and tell can be an ordeal. Especially if customers
    grow accustomed to a live demo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Broken dependencies**: If you are responsible for developing a demo you might
    rely on some things staying constant. If they change you’ll need to start again.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Gradio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now to the technical part. Gradio is a framework for demonstrating machine
    learning/AI models and it integrates with the rest of the Hugging Face ecosystem.
    The framework can be implemented using Python or JavaScript SDKs. Here, we will
    use Python. Before we build a demo an example Gradio app for named entity recognition
    is below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f978c0de3422eea0c51b1308d0284395.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image Source: Hugging Face Documentation [4]'
  prefs: []
  type: TYPE_NORMAL
- en: You can implement Gradio anywhere you currently work, and this is a key benefit
    of using the framework. If you are quickly prototyping code in a notebook and
    want instant feedback from stakeholders/colleagues you can add a Gradio interface.
    **In my experience of using Gradio, I have implemented in Jupyter and Google Colab
    notebooks.** You can also implement Gradio as a standalone site, through a public
    link hosted on HuggingFace. We will explore deployment options later.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gradio demos help us solve the problems above, and get us over the fear of
    the live demo:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Information dumping**: Gradio provides a simple interface that abstracts
    away a lot of the difficult information. Customers aren’t overloaded with working
    out how to interact with our tool **and** what the tool is all at once.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developing a demo**: Gradio demos have the same benefits as StreamLit and
    Shiny. The demo code is simple and builds on top of Python code you have already
    written for your product. This means you can make changes quickly and get instant
    feedback. You can also see the demo from the customer point of view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Broken dependencies**: No framework will overcome complete project overhauls.
    Gradio is built to accomodate new data, data types and even new models. The simplicity
    and range of allowed inputs/outputs, means that Gradio demos are kept quite constant.
    Not only that but if you have many tools, many customers and many projects the
    good news is that most of your demo code won’t change! You can just swap a text
    output to an image output and you’re all set up to move from LLM to Stable Diffusion!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Step-by-step guide to creating a demo using Gradio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The practical section of this article takes you from complete beginner to demonstration
    expert in Gradio. That being said, sometimes less can be more, if you are looking
    for a really simple demo to highlight the impact of your work by all means, stick
    to the basics!
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on alternatives like StreamLit, check out my earlier post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://python.plainenglish.io/building-lightweight-geospatial-data-viewers-with-streamlit-and-pydeck-de1e0fbd7ba7?source=post_page-----785a2d9f2d63--------------------------------)
    [## Building Lightweight Geospatial Data Viewers with StreamLit and PyDeck'
  prefs: []
  type: TYPE_NORMAL
- en: Using two cutting edge libraries to build and deploy interactive web apps in
    Python for geospatial data vis.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: python.plainenglish.io](https://python.plainenglish.io/building-lightweight-geospatial-data-viewers-with-streamlit-and-pydeck-de1e0fbd7ba7?source=post_page-----785a2d9f2d63--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '**The basics**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with a Hello World style example so that we can learn more about
    what makes up a Gradio demo. We have three fundamental components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Input variables: We provide any number of input variables which users can input
    using toggles, sliders or other input widgets in our demo.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Function: The author of the demo makes a function which does the heavy lifting.
    This is where code changes **between** demos the most. The function will transform
    input variables into an output that the user sees. This is where we can call a
    model, transform data or do anything else we may need.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Interface: The interface combines the input variables, input widgets, function
    and output widgets into one demo.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So let’s see how that looks in code form:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This gives us the following demo. Notice how the input and output are both
    of the text type as we defined above:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/29a50a435e096a72a026dd978ab32828.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image Source: Image by Author'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the basic components of Gradio, let’s get a bit more
    technical.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see how we can apply Gradio to a machine learning problem, we will use the
    simplest algorithm we can. A linear regression. For the first example. We will
    build a linear regression using the California House Prices dataset. First, we
    update the basic code so that the function makes a prediction based on a linear
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we update the interface so that the inputs and outputs match what we need.
    Note that we also use the **Number** type here as an input:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we hit run and see how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8a5fed64fc3219ad8d38670010e3dfac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image Source: Image by Author'
  prefs: []
  type: TYPE_NORMAL
- en: Why stop now! We can use **Blocks** in Gradio to make our demos even more complex,
    insightful and engaging.
  prefs: []
  type: TYPE_NORMAL
- en: '**Controlling the interface**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Blocks are more or less exactly as described. They are the building **blocks**
    of Gradio applications. So far, we have only used the higher level **Interface**
    wrapper. In the example below we will use blocks which has a slightly different
    coding pattern. Let’s update the last example to use **blocks** so that we can
    understand how they work:'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of before when we had inputs, function and interface. We have now rolled
    everything back to its most basic form in Gradio. We no longer set up an interface
    and ask for it to add number inputs for us! Now we provide each individual Number
    input and one Number output. Building like this gives us much more control of
    the display.
  prefs: []
  type: TYPE_NORMAL
- en: With this new control over the demo we can even add new tabs. Tabs enable us
    to control the user flows and experience. We can first explain a concept, like
    how our predictions are distributed. Then on the next tab, we have a whole new
    area to let users prompt the model for predictions of their own. We can also use
    tabs to overcome technical difficulties. The first tab gives users a lot of information
    about model performance. This is all done through functions that were implemented
    earlier. If the model code doesn’t run on the day we still have something insightful
    to share. It’s not perfect, but it’s a lot better than a blank screen!
  prefs: []
  type: TYPE_NORMAL
- en: '**Note: This doesn’t mean we can hide technical difficulties behind tabs! We
    can just use tabs to give audiences something to go on if all else fails. Then
    reshare the demo when we resolve the technical issues.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7e59515adde18648612aaddc49612081.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image Source: Image by Author'
  prefs: []
  type: TYPE_NORMAL
- en: Ramping up the complexity shows how useful Gradio can be to show all kinds of
    information! So far though we have kept to a pretty simple model. Let’s now explore
    how we would use Gradio for something a bit more complex.
  prefs: []
  type: TYPE_NORMAL
- en: '**Gradio for AI Models and Images**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next application will look at using Gradio to demonstrate Generative AI.
    Once again, we will use Blocks to build the interface. This time the demo will
    have two core components:'
  prefs: []
  type: TYPE_NORMAL
- en: An intro tab explaining the limitations, in and out of scope uses of the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An inspiration tab showing some images generated earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An interactive tab where users can submit prompts to generate images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this blog we will just demo a pre-trained model. To learn more about Stable
    Diffusion models, including key concepts and fine-tuning, check out my earlier
    blog:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://levelup.gitconnected.com/stable-diffusion-how-ai-converts-text-to-images-68943171bd8a?source=post_page-----785a2d9f2d63--------------------------------)
    [## Stable Diffusion: How AI converts text to images'
  prefs: []
  type: TYPE_NORMAL
- en: Documenting my journey learning and getting hands-on with Stable Diffusion for
    other learners.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: levelup.gitconnected.com](https://levelup.gitconnected.com/stable-diffusion-how-ai-converts-text-to-images-68943171bd8a?source=post_page-----785a2d9f2d63--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'As this is a demo, we will start from the most difficult component. This ensures
    we will have the most time to deliver the hardest piece of work. The interactive
    tab is likely to be the most challenging, so we will start there. So that we have
    an idea of what we are aiming for our demo page will end up looking something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b8baf45c751ee03c3bcb95dcb66f10b8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image Source: Image by Author. Stable Diffusion Images are AI Generated.'
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this the demo code will combine the two examples above. We will use
    blocks, functions, inputs and **buttons**. Buttons enable us to work in a similar
    way to before where we have inputs, outputs and functions. We use buttons as **event
    listeners.** Event listeners help to control our logic flow.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s imagine we are trying to start our demo. At runtime (as soon as the demo
    starts), we have no inputs. As we have no input, the model the demo uses has no
    prompt. With no prompt, the model cannot generate an image. **This will cause
    an error**. To overcome the error we use an **event listener**. The button listens
    for an event, in this case, a click of the button. Once it “hears” the event,
    or gets clicked, it then triggers an action. In this case, the action will be
    submitting a completed prompt to the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s review some new code that uses buttons and compare it to the previous
    **interface** examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The button code looks like the interface code, but there are some big conceptual
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: The button code uses blocks. This is because whilst we are using the button
    in a similar way to **interface**,we still need something to determine what the
    demo looks like.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Input and output widgets are used as objects instead of strings. If you go back
    to the first example, our input was **“text”** of type *string* but here it is
    **prompt** of type *gr.Text()*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We use [*button.click*](http://button.click)*()* instead of *Interface.launch()*.
    This is because the interface was our whole demo before. This time the event is
    the button click.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is how the demo ends up looking:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2132eea144bcbfca0ae1ce07e99f7225.png)![](../Images/10c685bb515e7a68a427dcfb73809bbf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image Source: Image by Author. Stable Diffusion Images are AI Generated.'
  prefs: []
  type: TYPE_NORMAL
- en: Can you see how important an event listener is! It has saved us lots of work
    in trying to make sure things happen in the right order. The beauty of Gradio
    means we also get some feedback on how long we will have to wait for images. The
    progress bar and time information on the left are great for user feedback and
    engagement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next part of the demo is sharing images we generated beforehand. This will
    serve as inspiration to customers. They will be able to see what is possible from
    the tool. For this we will implement another new output widget, a **Gallery.**
    The gallery displays the images we just generated:'
  prefs: []
  type: TYPE_NORMAL
- en: '**An important note**: We actually make use of our *generate_images()* function
    from before. As we said above, all of these lightweight app libraries enable us
    to simply build on top of our existing code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The demo now looks like this, users are able to switch between two core functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a0c4e5fd9735cafd05a38e91a11fe0a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image Source: Image by Author. Stable Diffusion Images are AI Generated.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally we will tie everything together with a landing page for the demo. In
    a live or recorded demo the landing page will give us something to talk through.
    It’s useful but not essential. The main reason we include a landing page, is for
    any **users that will test the tool without us being present**. This helps to
    build accessibility of the tool and trust and understanding in users. If you need
    to be there every time customers use your product, it’s not going to deliver value.
  prefs: []
  type: TYPE_NORMAL
- en: 'This time we won’t be using anything new. Instead we will show the power of
    the *Markdown()* component. You may have noticed we have used some Markdown already.
    For those familiar, Markdown can help express all kinds of information in text.
    The code below has some ideas, but for your demos, get creative and see how far
    you can take Markdown in Gradio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/194507b2071a3fd7cf000686584d7480.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image Source: Image by Author'
  prefs: []
  type: TYPE_NORMAL
- en: The finished demo is below. Let me know what you think in the comments!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bb4a4b5f04dff429b7705cb6a06e8863.png)![](../Images/2f07696ad3cd718c3ffd703ccbf65ebc.png)![](../Images/bc04001d4371fc82f9de7772d42329ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image Source: Image by Author. Stable Diffusion Images are AI Generated.'
  prefs: []
  type: TYPE_NORMAL
- en: Sharing with customers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whether you’re a seasoned pro, or pitching beginner sharing the demo can be
    daunting. Building demonstrations and pitching are two very different skillsets.
    This article so far has helped to build your demo. There are great resources online
    to help pitching [5]. Let’s now focus on the intersection of the two, how you
    can share the demo you built, effectively.
  prefs: []
  type: TYPE_NORMAL
- en: Baring in mind your preferred style, live demo is guaranteed to liven up your
    pitch (pun intended!). To a technical audience we can set off our demo right in
    our notebook. This is useful to those who want to get into the code. I recommend
    sharing this way with new colleagues, senior developers and anyone looking to
    collaborate or expand your work. If you are using an alternative to Gradio, I’d
    still recommend sharing your code at a high level with this audience. It can help
    bring new developers onboard, or explain your latest changes to senior developers.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative is to present the live demo using just a “front-end”. This can
    be done using the link provided when you run the demo. When you share this way
    customers don’t have to get bogged down in code to see your demo. This is how
    the screenshots so far have been taken. I’d recommend this for live non-technical
    audiences, new customers and for agile feedback/show and tell sessions. We can
    get to this using a link provided if you built your demo in Gradio.
  prefs: []
  type: TYPE_NORMAL
- en: 'The link we can use to share also allows us to share the demo with others.
    By setting a **share** parameter when we launch the demo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This works well for users who can’t make the live session, or want more time
    to experiment with the product. This link is available for 72 hours. **There is
    a need for caution at this point as demos are hosted publicly from your machine**.
    It is advised that you consider the security aspects of your system before sharing
    this way. One thing we can do to make this a bit more secure is to share our demo
    with password protection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This adds a password pop-up to the demo.
  prefs: []
  type: TYPE_NORMAL
- en: You can take this further by using authorisation techniques. Examples include
    using Hugging Face directly or Google for OAuth identity providers [6]. Further
    protections can be put in place for blocked files and file paths on the host machine
    [6].
  prefs: []
  type: TYPE_NORMAL
- en: '*This does not solve security concerns with sharing this way completely. If
    you are looking to share privately, containerisation through a cloud provider
    may be a better option* [7].'
  prefs: []
  type: TYPE_NORMAL
- en: For wider engagement, you may want to share your demo publicly to an online
    audience. This can be brilliant for finding prospective customers, building word
    of mouth or getting some feedback on your latest AI project. I have been sharing
    work publicly for feedback for years on Medium, Kaggle and GitHub. The feedback
    I have had has definitely improved my work over time.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Gradio demos can be publicly shared through Hugging Face.
    Hugging Face provides **Spaces** which are used for sharing Gradio apps. Spaces
    provide a free platform to share your demo. There are costs attached to GPU instances
    (ranging from $0.40 to $5 per hour). To share to spaces, the following documentation
    is available [6]. The docs explain how you can:'
  prefs: []
  type: TYPE_NORMAL
- en: Share to spaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement CI/CD of spaces with GitHub actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding Gradio demos in your own website from spaces!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spaces are helpful for reaching a wider audience, without worrying about resources.
    It is also a permanent link for prospective customers. It does make it more important
    to include as much guidance as possible. Again, this is a public sharing platform
    on compute you do not own. For more secure requirements, containerisation and
    dedicated hosting may be preferred. A particularly great example is this Minecraft
    skin generator [8].
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3ac10b3136b8000af1cd05ac8407dcd2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image Source: Nick088, Hugging Face [[Stable Diffusion Finetuned Minecraft
    Skin Generator — a Hugging Face Space by Nick088](https://huggingface.co/spaces/Nick088/Stable_Diffusion_Finetuned_Minecraft_Skin_Generator)]'
  prefs: []
  type: TYPE_NORMAL
- en: Additional considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The elephant in the room in the whole AI community right now is of course LLMs.
    Gradio has plenty of components built with LLM in mind. This includes using agentic
    workflows and models as a service [9].
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also worth mentioning **custom components**. Custom components have been
    developed by other data scientists and developers. They are extensions on top
    of the Gradio framework. Some great examples are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image annotation component: [gradio_image_annotation V0.0.6 — a Hugging Face
    Space by edgargg](https://huggingface.co/spaces/edgargg/gradio_image_annotation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Question answering with an uploaded PDF: [gradio_pdf V0.0.6 — a Hugging Face
    Space by awacke1](https://huggingface.co/spaces/awacke1/Gradio-PDF-Document-QA-PDF-UI)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extensions are not unique to Gradio. If you choose to use StreamLit or Shiny
    to build your demo there are great extensions to those frameworks as well:'
  prefs: []
  type: TYPE_NORMAL
- en: 'StreamLit Extras, an extension of the StreamLit UI components: [https://extras.streamlit.app/](https://extras.streamlit.app/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Awesome R Shiny, additional reactive/UI/theming components for Shiny: [https://github.com/nanxstats/awesome-shiny-extensions](https://github.com/nanxstats/awesome-shiny-extensions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A final word on sharing work, in an agile context. When sharing regularly through
    show and tells or feedback sessions lightweight demos are a game changer. The
    ability to easily layer on from MVP to final product really helps customers see
    their journey with your product.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, Gradio is a lightweight, open source tool for sharing AI products.
    Some important security steps may need consideration depending on your requirements.
    I really hope you are feeling more prepared with your demos!
  prefs: []
  type: TYPE_NORMAL
- en: If you enjoyed this article please consider giving me a follow, sharing this
    article or leaving a comment. I write a range of content across the data science
    field, so please checkout more on my profile.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] Gradio Documentation. [https://www.gradio.app/](https://www.gradio.app/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] User Pilot Product Demos. [https://userpilot.com/blog/product-demos/](https://userpilot.com/blog/product-demos/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] Clever Hans Wikipedia. [https://en.wikipedia.org/wiki/Clever_Hans](https://en.wikipedia.org/wiki/Clever_Hans)'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] Gradio Named Entity Recognition App. [Named Entity Recognition (](https://www.gradio.app/guides/named-entity-recognition)[gradio.app](http://gradio.app)[)](https://www.gradio.app/guides/named-entity-recognition)'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] Harvard Business Review. What makes a great pitch. [What Makes a Great
    Pitch (](https://hbr.org/2020/05/what-makes-a-great-pitch)[hbr.org](http://hbr.org)[)](https://hbr.org/2020/05/what-makes-a-great-pitch)'
  prefs: []
  type: TYPE_NORMAL
- en: '[6] Gradio Deploying to Spaces. [Sharing Your App (](https://www.gradio.app/guides/sharing-your-app#authentication)[gradio.app](http://gradio.app)[)](https://www.gradio.app/guides/sharing-your-app#authentication).'
  prefs: []
  type: TYPE_NORMAL
- en: '[7] Deploying Gradio to Docker. [Deploying Gradio With Docker](https://www.gradio.app/main/guides/deploying-gradio-with-docker)'
  prefs: []
  type: TYPE_NORMAL
- en: '[8] Amazing Minecraft Skin Generator Example. [Stable Diffusion Finetuned Minecraft
    Skin Generator — a Hugging Face Space by Nick088](https://huggingface.co/spaces/Nick088/Stable_Diffusion_Finetuned_Minecraft_Skin_Generator)'
  prefs: []
  type: TYPE_NORMAL
- en: '[9] Gradio for LLM. [Gradio And Llm Agents](https://www.gradio.app/guides/gradio-and-llm-agents)'
  prefs: []
  type: TYPE_NORMAL
