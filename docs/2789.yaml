- en: 'Navigating Networks with NetworkX: A Short Guide to Graphs in Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/navigating-networks-with-networkx-a-short-guide-to-graphs-in-python-c16cbafe8063?source=collection_archive---------1-----------------------#2024-11-18](https://towardsdatascience.com/navigating-networks-with-networkx-a-short-guide-to-graphs-in-python-c16cbafe8063?source=collection_archive---------1-----------------------#2024-11-18)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/e8bb442e9e37d2c3417e291b25f19312.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Alina Grubnyak](https://unsplash.com/@alinnnaaaa?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Explore NetworkX for building, analyzing, and visualizing graphs in Python.
    Discovering Insights in Connected Data.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@technologger?source=post_page---byline--c16cbafe8063--------------------------------)[![Diego
    Penilla](../Images/aa69a740a3b915e5548219fe762dd2ae.png)](https://medium.com/@technologger?source=post_page---byline--c16cbafe8063--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--c16cbafe8063--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--c16cbafe8063--------------------------------)
    [Diego Penilla](https://medium.com/@technologger?source=post_page---byline--c16cbafe8063--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--c16cbafe8063--------------------------------)
    ·14 min read·Nov 18, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: In a world brimming with connections — from social media friendships to complex
    transportation networks — understanding relationships and patterns is key to making
    sense of the systems around us. Imagine visualizing a social network where each
    person is a dot (a “node”) connected to friends by lines (or “edges”). Or picture
    mapping a city’s metro system where each station is a node and each route is an
    edge connecting them.
  prefs: []
  type: TYPE_NORMAL
- en: This is where [NetworkX](https://networkx.org/) shines, offering a powerful
    way to build, analyze, and visualize these intricate webs of relationships.
  prefs: []
  type: TYPE_NORMAL
- en: NetworkX allows us to represent data in ways that would be cumbersome or even
    impractical with traditional tables but become easy and natural in a graph format.
    Relationships that would take many rows and columns to define in a spreadsheet
    can be captured in an intuitive, visual way, helping us to understand and interpret
    complex data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1485ea18d9293697705cd993ec0707fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Terry Vlisidis](https://unsplash.com/@vlisidis?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: The library lets us apply a wide range of methods and algorithms to these graphs,
    providing fresh insights each time as we reframe our data with a new approach.
  prefs: []
  type: TYPE_NORMAL
- en: '`NetworkX`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start out by breaking down what a graph is. In network analysis, a graph
    is made up of **nodes** (or vertices) and **edges** (or links).
  prefs: []
  type: TYPE_NORMAL
- en: Think of nodes as the main entities, like people or web pages, and edges as
    the connections between them — like friendships in a social network or hyperlinks
    between websites.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some edges even carry weights, representing the strength, distance, or cost
    of the connection between two nodes. This added layer of information helps us
    analyze not just if two nodes are connected, but how strongly or closely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*These graphs can be used to model a wide variety of systems, from social networks,
    to molecules and transportation grids.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by seeing how to create a graph using `networkx`. If you don’t
    have it installed first run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make a network we will:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialize the network: by creating a graph with `G = nx.Graph()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add Nodes with Attributes: Use G.add_node() to add nodes, each of which can
    store custom attributes like labels or ages.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add Edges: Connect nodes with G`.add_edge()`, where each edge can include a
    weight attribute to represent the strength or cost of the connection.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visualize the Graph: Use Matplotlib functions like `nx.draw()` and `nx.draw_networkx_edge_labels()`
    to display the graph, showing node labels and edge weights for easy interpretation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is the code to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/31f6d8dffd659af64706b7862af9d16f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: A weighted graph with nodes 1 to 4\. Image by author.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example we initialise the graph and then create:'
  prefs: []
  type: TYPE_NORMAL
- en: '**4 nodes** (1, 2, 3, 4) by calling `G.add_node(node, label, attr)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3 weighted edges** that connect these nodes: (1, 2), (1, 3), and (2, 4) by
    calling `G.add_edge(node1, node2, attr)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both nodes and edges in NetworkX can hold additional attributes, making the
    graph richer with information.
  prefs: []
  type: TYPE_NORMAL
- en: Node attributes (accessed via `nx.get_node_attributes(G, ‘attribute’))` allow
    each node to store data, like a person’s occupation in a social network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edge attributes (accessed via `nx.get_edge_attributes(G, ‘attribute’))` store
    information for each connection, such as the distance or travel time in a transportation
    network. These attributes add context and depth, enabling more detailed analysis
    of the network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then use NetworkX’s spring layout `pos = nx.spring_layout(G)` to position
    the nodes for visualization, ensuring they’re spaced naturally within the plot.
    Finally, `nx.draw()` and `nx.draw_networkx_edge_labels()` display the graph with
    node labels and edge weights, creating a clear view of the network’s structure
    and connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'While this was a rather simple network, it illustrates the basics of working
    with networks: to manipulate graphs we need to handle the nodes and their connections
    along any attributes they might have.'
  prefs: []
  type: TYPE_NORMAL
- en: Karate Club Network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the most well-known examples in network science is the [*Zachary’s Karate
    Club,*](https://en.wikipedia.org/wiki/Zachary''s_karate_club) often used to illustrate
    social network analysis and community detection. The dataset is public domain
    and is included in networkx by default. You can access as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/37559d2c05050146006e7e491f775bf6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Zachary’s Karate Club Network. Image by author.'
  prefs: []
  type: TYPE_NORMAL
- en: This network represents the friendships among 34 members of a karate club, and
    it is famous for the split that occurred between two factions, each centered around
    a central figure — Mr. Hi and Officer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at the attributes contained within the node data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The node attribute `club` refers to the community `"Officer"` or `"Mr. Hi"`
    that each node belongs to. Let’s use them to create color the nodes in the graph.
  prefs: []
  type: TYPE_NORMAL
- en: To do this we assign the blue color to the nodes with `club` label `"Mr Hi"`
    and red those with label `"Officer"` in a list `color_map` , which we can use
    to visualize the network using `nx.draw`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b3706bc713c845290a772d81cf771a9e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Communities “Mr Hi” and “Officer” in Karate Club Network. Image by
    author.'
  prefs: []
  type: TYPE_NORMAL
- en: The legend tells that a conflict arose between the club’s instructor, “Mr. Hi,”
    and the club’s administrator, “Officer.” This division eventually caused the club
    to split into two distinct groups, each centered around one of these leaders.
  prefs: []
  type: TYPE_NORMAL
- en: By representing these relationships as a network, we can visually capture this
    split and reveal patterns and clusters within the data — insights that may be
    hard to see having the data in traditional table formats.
  prefs: []
  type: TYPE_NORMAL
- en: Centrality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand the structure and dynamics of a network, it’s essential to identify
    the most influential or strategically positioned nodes. This is where **centrality**
    measures come in, a key concept in network science.
  prefs: []
  type: TYPE_NORMAL
- en: 'It measures the position of nodes based on their types connections, identifying
    key nodes based on certain criteria. Common measures include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*degree centrality*](https://www.sciencedirect.com/topics/computer-science/degree-centrality)
    (merely the number of connections each node possess)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*closeness centrality*](https://www.sciencedirect.com/topics/computer-science/closeness-centrality)(how
    quickly a node can access all other nodes in the network).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and [*betweenness centrality*](https://www.sciencedirect.com/topics/computer-science/betweenness-centrality)
    (how often a node appears on the shortest paths between other nodes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These measures help reveal key players or bottlenecks in the network, giving
    insight into its structure/dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c2f6342dc1490a55efdca0cfa0684d04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Nodes with highest centrality in Karate Club Network. Image by author.'
  prefs: []
  type: TYPE_NORMAL
- en: For nodes `0` and `33` we see, that these nodes are the most central in the
    network, with high degree, betweenness, and closeness centralities.
  prefs: []
  type: TYPE_NORMAL
- en: Their central roles suggest they are well-connected hubs, frequently acting
    as bridges between other members and able to quickly reach others in the network.
    This positioning highlights them as key players, holding significance in the network’s
    flow and structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[Community Detection with Girvan-Newman Algorithm](https://www.google.com/url?q=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FGirvan%25E2%2580%2593Newman_algorithm)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*A community C is a set of nodes (e.g., individuals in a social network, web
    pages connected by hyperlinks etc.) that exhibit stronger connections among themselves
    than with the rest of the network.*'
  prefs: []
  type: TYPE_NORMAL
- en: With a visual representation of centrality in mind, let’s apply the Girvan-Newman
    Algorithm to this graph.
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm generates a series of community splits as it progressively removes
    edges with the highest betweenness centrality.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first time the algorithm is run, it identifies the most significant community
    division.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bdb890e21aaf06f875e267e1260c4b0c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: First split in karate club network by the girvan newman algorithm.
    Image by author.'
  prefs: []
  type: TYPE_NORMAL
- en: Since `girvan_newman(G)` returns an iterator as `comp`, calling `next(comp)`
    allows you to retrieve the first split, i.e., the first division of the network
    into two communities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s compare the detected communities with the actual node label `club`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The communities detected by the Girvan-Newman algorithm *are similar to the
    actual Mr. Hi and Officer communities but not an exact match****.*** This is because
    the Girvan-Newman algorithm divides the network based solely on edge betweenness
    centrality, without relying on any predefined community labels.
  prefs: []
  type: TYPE_NORMAL
- en: 'This approach is especially useful in unstructured datasets where labels are
    absent, as it reveals meaningful groupings based on the network’s structural properties.
    This highlights a key consideration in community detection: there is no strict
    definition of what constitutes a community.'
  prefs: []
  type: TYPE_NORMAL
- en: As a result, there is no single “correct” way to partition a network. Different
    methods, driven by varying metrics, can yield diverse results, each providing
    valuable insights depending on the context.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/22467af082bfdb6ed871e214c41385c4.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Source](https://images.unsplash.com/photo-1639322537228-f710d846310a?q=80&w=1932&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D)'
  prefs: []
  type: TYPE_NORMAL
- en: Cliques
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A useful concept in networks is the clique. In network science, a clique refers
    to a subset of nodes in a graph where every node is connected to every other node
    in that subset. This means that all members of a clique have direct relationships
    with each other, forming a tightly-knit group. Cliques can be particularly useful
    when studying the structure of complex networks because they often represent highly
    connected or cohesive groups within a larger system.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example in:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In social Networks: cliques can represent groups of people who know each other,
    such as close-knit circles of friends or professional colleagues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In collaborative Networks: In a collaborative network (e.g., research collaborations),
    cliques can reveal teams of researchers who work together on the same topics or
    projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In biological Networks: In biological networks, cliques can indicate functional
    groups of proteins or genes that interact closely within a biological process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s find the biggest clique in the karate network. We will find the largest
    group of people that have all links with each other.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6ed6565bd4b26fac324ca4c6d6de509f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Largest clique in Karate Club Network, nodes 0, 1, 2, 3 and 13 are
    interconnected. Image by author.'
  prefs: []
  type: TYPE_NORMAL
- en: Despite the challenges in defining “community” in network science, cliques offer
    a concrete and well-defined concept for identifying groups that are fully interconnected,
    offering meaningful insights into both structured and unstructured networks.
  prefs: []
  type: TYPE_NORMAL
- en: Shortest Path
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another interesting concept in network science is Shortest Path. The shortest
    path between two nodes in a graph refers to the sequence of edges that connects
    the nodes while minimizing the total distance or cost, which can be interpreted
    in various ways depending on the application. This concept plays a crucial role
    in fields like routing algorithms, network design, transportation planning, and
    even social network analysis.
  prefs: []
  type: TYPE_NORMAL
- en: NetworkX provides several algorithms to compute shortest paths, such as Dijkstra’s
    Algorithm for weighted graphs and Breadth-First Search (BFS) for unweighted graphs.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/51cc5e26a2bcbc16ddfb596244abe583.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ed 259](https://unsplash.com/@ed259?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look at an example, we will create a synthetic dataset where nodes
    represent stations and the edges connections between the stations.
  prefs: []
  type: TYPE_NORMAL
- en: We will also add weighted edge time, representing the time it takes to reach
    from one station to the next.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8f261cc230e141c399330c326b939259.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Example transportation network where nodes represent stations and
    the edges time or length. Image by author.'
  prefs: []
  type: TYPE_NORMAL
- en: In this example we use Dijkstra’s algorithm to compute the shortest path from
    station A to station H, where the edge weights represent travel times. The shortest
    path and its total travel time are printed, and the path is highlighted in red
    on the graph for visualization, with edge weights shown to indicate travel times
    between stations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8ce1d37688551b9219a4ecc9dc8ad390.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: Shortest path between input nodes A and H for the given graph — 45
    minutes. Image by author.'
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm calculates both the shortest route and its total travel time,
    which are then displayed. The shortest path between A and H is highlighted in
    red on the graph , with edge weights showing the time between each connected station,
    adding to a total of 45.
  prefs: []
  type: TYPE_NORMAL
- en: While this was a simple computation, shortest path algorithms have broad applications.
    In transportation, they optimize routes and reduce travel time; in digital communication,
    they route data efficiently. They’re essential in logistics to minimize costs,
    in supply chains for timely deliveries, and in social networks to gauge closeness
    between individuals. Understanding shortest paths enables data-driven decisions
    across fields — from urban planning to network infrastructure — making it a vital
    tool for navigating complex systems efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve explored several fundamental concepts in Network Science using NetworkX,
    such as shortest path algorithms, community detection, and the power of graph
    theory to model and analyze complex systems.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to continue learning, I’ve placed a couple of links below :). In
    case you want to go deeper on community detection algorithms take a look to the
    CDLib library.
  prefs: []
  type: TYPE_NORMAL
- en: '[Networkx Tutorial](https://networkx.org/documentation/stable/tutorial.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[CDLib,](https://cdlib.readthedocs.io/en/latest/) a library for community detection'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**NOTE**: Computing advanced metrics and measures on graphs can often be ambiguous
    or even misleading. With so many potential metrics available, it’s easy to generate
    numbers that may not hold meaningful value or may misrepresent the network’s true
    structure. Choosing the right metrics requires careful consideration, as not all
    measures will provide relevant insights for every type of network analysis. If
    this resonates, have a look here for more information: [statistical inference
    links data and theory in network science](https://www.nature.com/articles/s41467-022-34267-9)'
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Karate Club Network:* [*Zachary, Wayne W. “An information flow model for conflict
    and fission in small groups.” Journal of Anthropological Research, 33(4), 452–473,
    1977.*](https://web.archive.org/web/20171021192632/http://networkdata.ics.uci.edu:80/data.php?id=105)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
