["```py\ndf.groupby(['base_col']).agg(\n  agg_col=('ori_col','agg_func')\n)\n```", "```py\nimport pandas as pd\nimport seaborn as sns\n\n# import titanic dataset\ntitanic = sns.load_dataset(\"titanic\")\ntitanic.head()\n```", "```py\nimport pandas as pd\n\n# load dataset\ndf = pd.read_csv(\"dir/to/Metro_Interstate_Traffic_Volume.csv\")\n\n# convert date_time column from object to proper datetime format\ndf['date_time'] = pd.to_datetime(df['date_time'])\n\n# head\ndf.head()\n```", "```py\n# only consider 2016 onwards data\ndf = df.loc[df['date_time']>=\"2016-01-01\",:]\n\n# feature engineering is_congested column\ndf['is_congested'] = df['traffic_volume'].apply(lambda x: 1 if x > 5000 else 0)\n```", "```py\n# create month column based on date_time\n# sample values: 2016-01, 2026-02\ndf['month'] = df['date_time'].dt.to_period(\"M\")\n\n# get sum of traffic_volume by month\nmonthly_traffic = df.groupby('month', as_index=False).agg(\n    total_traffic = ('traffic_volume', 'sum')\n)\n\n# convert month column to string for viz\nmonthly_traffic['month'] = monthly_traffic['month'].astype(str)\n\nmonthly_traffic.head()\n```", "```py\n# draw time series plot\nplt.figure(figsize=(12,5))\nsns.lineplot(data=monthly_traffic, x =\"month\", y=\"total_traffic\")\nplt.xticks(rotation=90)\nplt.title(\"Monthly Traffic Volume\")\nplt.show()\n```", "```py\n# create column date from date_time\n# sample values: 2016-01-01, 2016-01-02\ndf['date'] = df['date_time'].dt.to_period('D')\n\n# create  dayname column\n# sample values: Monday, Tuesday\ndf['dayname'] = df['date_time'].dt.day_name()\n\n# get sum of traffic, at date level\ndaily_traffic = df.groupby(['dayname','date'], as_index=False).agg(\n    total_traffic = ('traffic_volume', 'sum')\n)\n\n# map dayname to number for viz later\ndayname_map = {\n    'Monday': 1,\n    'Tuesday': 2,\n    'Wednesday': 3,\n    'Thursday': 4,\n    'Friday': 5,\n    'Saturday': 6,\n    'Sunday': 7\n}\n\ndaily_traffic['dayname_index'] = daily_traffic['dayname'].map(dayname_map)\ndaily_traffic = daily_traffic.sort_values(by='dayname_index')\n\ndaily_traffic.head()\n```", "```py\n# draw boxplot per day name\nplt.figure(figsize=(12,5))\nsns.boxplot(data=daily_traffic, x=\"dayname\", y=\"total_traffic\")\nplt.xticks(rotation=90)\nplt.title(\"Daily Traffic Volume\")\nplt.show()\n```", "```py\n# extract hour digit from date_time\n# sample values: 1,2,3\ndf['hour'] = df['date_time'].dt.hour\n\n# create is_weekend flag based on dayname\ndf['is_weekend'] = df['dayname'].apply(lambda x: 1 if x in ['Saturday', 'Sunday'] else 0)\n\n# get average traffic at hour level, broken down by is_weekend flag\nhourly_traffic = df.groupby(['is_weekend','hour'], as_index=False).agg(\n    avg_traffic = ('traffic_volume', 'mean')\n)\n\nhourly_traffic.head()\n```", "```py\n# draw as barplot with hue = is_weekend\nplt.figure(figsize=(20,6))\nsns.barplot(data=hourly_traffic, x='hour', y='avg_traffic', hue='is_weekend')\nplt.title(\"Average Hourly Traffic Volume: Weekdays (blue) vs Weekend (orange)\", fontsize=14)\nplt.show()\n```", "```py\n# rate of congestion (is_congested) , grouped by weather description\ncongested_weather = df.groupby('weather_description', as_index=False).agg(\n    congested_rate = ('is_congested', 'mean')\n).sort_values(by='congested_rate', ascending=False, ignore_index=True)\n\ncongested_weather.head()\n```", "```py\n# draw as barplot\nplt.figure(figsize=(20,6))\nsns.barplot(data=congested_weather, x='weather_description', y='congested_rate')\nplt.xticks(rotation=90)\nplt.title('Top Weather with High Congestion Rates')\nplt.show()\n```"]