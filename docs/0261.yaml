- en: 'Graphcast: How to Get Things Done'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/graphcast-how-to-get-things-done-f2fd5630c5fb?source=collection_archive---------0-----------------------#2024-01-29](https://towardsdatascience.com/graphcast-how-to-get-things-done-f2fd5630c5fb?source=collection_archive---------0-----------------------#2024-01-29)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A guide on how to make predictions using Google’s latest tool, from fetching
    data to formatting and so much more.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://abhinavyesss.medium.com/?source=post_page---byline--f2fd5630c5fb--------------------------------)[![Abhinav
    Kumar](../Images/96f52cd59bc0dcfc91a500c965c0d5a2.png)](https://abhinavyesss.medium.com/?source=post_page---byline--f2fd5630c5fb--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f2fd5630c5fb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f2fd5630c5fb--------------------------------)
    [Abhinav Kumar](https://abhinavyesss.medium.com/?source=post_page---byline--f2fd5630c5fb--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f2fd5630c5fb--------------------------------)
    ·14 min read·Jan 29, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/588d8016408891c86301bee99f160e65.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [NOAA](https://unsplash.com/@noaa?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Weather prediction is a very complex problem to solve. Numerical Weather Predictions
    (NWP) models, Weather Research and Forecasting (WRF) models, have been used to
    solve the problem, however, the accuracy and precision sometimes are found to
    be lacking.
  prefs: []
  type: TYPE_NORMAL
- en: 'Being the complex problem it is, it has attracted interest and the pursuit
    of solutions from data scientists to data science enthusiasts to meteorological
    engineers. Solutions have been found, however consistency and uniformity has not.
    The solution varies from area to area, from mountain to plateau, from swamps to
    tundra. From my own personal experience and I am sure from others’ experiences
    too, weather prediction has been found to be a tough cookie to crack. Quoting
    a certain shrimp billionaire:'
  prefs: []
  type: TYPE_NORMAL
- en: It is like a box of chocolates, you never know what you’re gonna get.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Recently, Deepmind released a new tool: [**Graphcast, an AI model for faster
    and more accurate global weather forecasting**](https://deepmind.google/discover/blog/graphcast-ai-model-for-faster-and-more-accurate-global-weather-forecasting/),
    taking a shot at making this particular bag of chocolates tastier and more efficient.
    On a Google TPU v4 machine, using Graphcast, one can fetch predictions at a 0.25
    degree spatial resolution in less than a minute. It solves a lot of issues one
    might face when predicting using conventional methods:'
  prefs: []
  type: TYPE_NORMAL
- en: predictions are generated for all coordinates all at once,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: editing the logic depending on the coordinate is now redundant,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mind boggling efficiency and response time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What isn’t so mind boggling is the data preparation required to fetch predictions
    using the aforementioned tool.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/375e9e1395130580aa5d391c57e3527e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ali Kokab](https://unsplash.com/@_alikokab_?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: However, worry not, I shall be your knight in a dark and gloomy armor and explain,
    in this article, the steps required to prepare and format data and finally, fetch
    predictions using Graphcast.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: The usage of the word “AI” nowadays reminds me very much of how “quantum”
    is used in Marvel movies.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Getting the predictions is a process which can be divided into the below sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Fetching the input data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the targets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the forcing data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Processing and formatting the data into a suitable format.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bringing them all together and making predictions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Graphcast states that using the current weather data and the data from 6 hours
    ago, one can make predictions 6 hours into the future. Taking an example to put
    it simply:'
  prefs: []
  type: TYPE_NORMAL
- en: '**if predictions are required for**: 2024–01–01 18:00,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**then input data to be put forth**: 2024–01–01 12:00 & 2024–01–01 06:00.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is important to note that **2024–01–01 18:00 will be the first prediction
    fetched**. Graphcast can additionally fetch data for 10 days, with a 6 hour gap
    between each prediction. So, the other timestamps for which predictions can be
    fetched are:'
  prefs: []
  type: TYPE_NORMAL
- en: 2024–01–02 00:00, 06:00, 12:00, 18:00,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2024–01–03 00:00, 06:00 and similarly till,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2024–01–10 06:00, 12:00.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To summarize, **data for 40 timestamps** **can be predicted** **using the input
    of two timestamps**.
  prefs: []
  type: TYPE_NORMAL
- en: Assumptions and important parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the code I will present in this article, I have assigned the following values
    to certain parameters that dictate how fast you can get the predictions and the
    memory used.
  prefs: []
  type: TYPE_NORMAL
- en: '**Input timestamp**: 2024–01–01 6:00, 12:00.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**First prediction timestamp**: 2024–01–01 18:00.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Number of predictions**: 4.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spatial resolution**: 1 degree.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pressure levels**: 13.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Below is the code for importing the required packages, initializing arrays for
    fields required for input and prediction purposes and other variables that will
    come in handy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Inputs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When it comes to machine learning, in order to get some predictions, you have
    to give the ML model some data using which it spits out a prediction. For example,
    when predicting whether a person is Batman, the input data might be:'
  prefs: []
  type: TYPE_NORMAL
- en: How much sleep do they get?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do they have a tan line on their face?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do they sleep during early morning meetings?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much is their net worth?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Similarly, Graphcast too takes certain inputs, which we obtain from [**CDS**](https://cds.climate.copernicus.eu/cdsapp#!/home),
    using its python library: [**cdsapi**](https://pypi.org/project/cdsapi/). Currently,
    the data publisher [**uses the Creative Commons Attribution 4.0 License**](https://publications.copernicus.org/for_authors/licence_and_copyright.html),
    which means that anyone can copy, distribute, transmit, and adapt the work as
    long as the original author is given credit.'
  prefs: []
  type: TYPE_NORMAL
- en: However, authentication is required before making requests to fetch data using
    cdsapi, the [**instructions for which are provided**](https://cds.climate.copernicus.eu/api-how-to)
    by CDS and is pretty straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you are now CDS-approved, inputs can be created, which involves the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Getting the single-level values**: These are dependent on the ***coordinates***
    and ***time***. One of the input fields required is ***total_precipitation_6hr***.As
    the name suggests, it is the cumulation of the previous 6 hours of rainfall from
    that particular timestamp. Hence, instead of getting the values for just the two
    input timestamps, we have to get values for timestamps ranging from, in our case:
    **2024–01–01 00:00 to 12:00**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Getting the pressure-level values**: In addition to being dependent on the
    ***coordinates***, they also depend on the ***pressure-level***. Hence, when requesting
    data, we mention the pressure levels we need the data for. In this case, we get
    values for the two input timestamps only.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Merging the single and pressure values**: An inner-merge operation is carried
    out on the aforementioned data on the basis of ***time***, ***latitude*** and
    ***longitude***.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Integrating year and day progress**: In addition to the single and pressure
    fields, four more fields need to be added to the input data: ***year_progress_sin***,
    ***year_progress_cos***, ***day_progress_sin*** and ***day_progress_cos***. This
    can be done using functions provided by the [**graphcast**](https://github.com/google-deepmind/graphcast?tab=readme-ov-file)
    package.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Other small steps include:'
  prefs: []
  type: TYPE_NORMAL
- en: Renaming the columns after they are fetched from CDS because CDS outputs a shortened
    form of the weather variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Renaming ***geopotential*** variable to ***geopotential_at_surface*** for the
    single-level data, since pressure-level has the same field name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using [**math**](https://docs.python.org/3/library/math.html)functions to calculate
    the sin and cos values after the ***progress*** value is obtained from graphcast.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Renaming ***latitude*** to ***lat***, ***longitude*** to ***lon*** and introducing
    another index: ***batch***, which is assigned the value 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code for creating the input data is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are 11 prediction fields:'
  prefs: []
  type: TYPE_NORMAL
- en: u_component_of_wind,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: v_component_of_wind,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: geopotential,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: specific_humidity,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: temperature,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: vertical_velocity,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10m_u_component_of_wind,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10m_v_component_of_wind,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2m_temperature,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mean_sea_level_pressure,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: total_precipitation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/812a9485ce1659178f38f686944419c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ricardo Arce](https://unsplash.com/@jrarce?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'The targets one passes is essentially an empty xarray for all the prediction
    fields at:'
  prefs: []
  type: TYPE_NORMAL
- en: every ***coordinate***,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: prediction ***timestamps*** and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***pressure level***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code to do so, is shared below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Forcings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As was the case with the **targets**, **forcings** too contains values for
    every coordinate and prediction timestamp **but not the pressure level**. The
    fields in **forcings** are:'
  prefs: []
  type: TYPE_NORMAL
- en: total_incident_solar_radiation,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: year_progress_sin,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: year_progress_cos,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: day_progress_sin,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: day_progress_cos.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is important to note that the above values are **assigned wrt the prediction
    timestamp**. As was the case when processing the **inputs**, ***year*** and ***day
    progress*** depends only on the timestamp and the ***solar radiation*** was fetched
    from the single-level source. However, since one is making predictions, i.e.,
    getting values for the future, the solar values, in the case of **forcings**,
    will not be available in the CDS dataset. For this we simulate the solar radiation
    values using the [**pysolar**](https://pypi.org/project/pysolar/) library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Post-processing the inputs, targets and forcings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the three pillars of Graphcast is created, we enter the home stretch.
    Like in a NBA final, having won 3 games, we now proceed to the nittiest grittiest
    part, to get it done.
  prefs: []
  type: TYPE_NORMAL
- en: Like Kobe Bryant once said,
  prefs: []
  type: TYPE_NORMAL
- en: Job’s not over yet.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/e70074bb06ef6d6bd94183c390f84b2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Mike Von](https://unsplash.com/@thevoncomplex?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to an xarray, there are two main types of data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Coordinates, the indices: ***lat***, ***lon***, ***time***….. and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data variables, the columns: ***land_sea_mask***, ***geopotential*** et cetera.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every value that a data variable contains, has certain coordinates assigned
    to it. The coordinates are those on which the value of the data variable depends
    on. Taking an example out of our own data,
  prefs: []
  type: TYPE_NORMAL
- en: '***land_sea_mask*** depends solely on the ***latitude*** and ***longitude***,
    which are its coordinates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***geopotential***’s coordinates are ***batch***, ***latitude***, ***longitude***,
    ***time*** and ***pressure level***.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In a stark contrast, but while making sense, the coordinates of ***geopotential_at_surface***
    are ***latitude*** and ***longitude***.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hence, before we proceed to predicting the weather, we make sure each data variable
    is assigned to its right coordinates, the code for which is presented below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Predictions using Graphcast
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having calculated, processed and assembled the **inputs**, **targets** and **forcings**,
    it is now time to make **predictions**.
  prefs: []
  type: TYPE_NORMAL
- en: We now require the model weights and normalization statistics files, which are
    [**provided by Deepmind**](https://console.cloud.google.com/storage/browser/dm_graphcast;tab=objects?prefix=&forceOnObjectsSortingFiltering=false).
  prefs: []
  type: TYPE_NORMAL
- en: 'The files to be downloaded are:'
  prefs: []
  type: TYPE_NORMAL
- en: stats/diffs_stddev_by_level.nc,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stats/stddev_by_level.nc,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stats/mean_by_level.nc and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: params/GraphCast_small — ERA5 1979–2015 — resolution 1.0 — pressure levels 13
    — mesh 2to5 — precipitation input and output.npz.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The relative paths of the aforementioned files wrt the prediction file is depicted
    below. It is **important to maintain the structure** so that the required files
    can be imported and read successfully.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With the [**prediction code being provided by Deepmind**](https://colab.research.google.com/drive/1X9WcRis_PC_DyuHYIiUwKWCAIr8T-4Pd#scrollTo=Sd99tPA3TBa4),
    all the above functions culminate with the predictions being made using the snippet
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Above, I have provided the code for each process that will be undertaken:'
  prefs: []
  type: TYPE_NORMAL
- en: creating the inputs, targets and forcings,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: processing the above data to a viable format and then finally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bringing them together and making predictions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While executing, it is important to bring all the processes together for a seamless
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity, I have [**uploaded the code**](https://github.com/abhinavyesss/graphcast-predict)
    along with the docker image and container files, which can be used to create an
    environment to execute the prediction program.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the universe of weather prediction, we currently have contributors like
    Accuweather, IBM, multiple meteomatics models. Graphcast proves to be an interesting
    and in many cases, a more efficient addition to this collection. However it also
    has some attributes that are far from optimal. In a rare moment of thought, I
    came up with the following insights:'
  prefs: []
  type: TYPE_NORMAL
- en: Graphcast is far more efficient and faster compared to other weather prediction
    services, fetching predictions for the whole world in a matter of minutes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This makes making hundreds of calls for hundreds of geographies using APIs redundant.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However to do the above in minutes, one needs to have a very powerful machine,
    either a Google TPU v4 or better. That is something that isn’t readily available.
    Even if one chooses to make use of a VM from AWS or Google or Azure, the costs
    can rack up.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Currently, there are no provisions to use data for a small geography or a subset
    of coordinates and get predictions for the same. Data for all the coordinates
    is always required.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CDS provides data with a 5 day latency period, which means at ‘x’ date, CDS
    can provide data only till ‘x-5’ date. This makes future weather prediction a
    little complicated since one has to cover the latency period before predictions
    can be made for the future.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is important to note that Graphcast is a fairly new addition to the weather
    prediction scene, changes and additions will definitely be made to improve the
    ease of access and usability. Given the lead they have wrt efficiency and performance,
    they are sure to capitalize on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Graphcast demo code**](https://colab.research.google.com/drive/1X9WcRis_PC_DyuHYIiUwKWCAIr8T-4Pd#scrollTo=Sd99tPA3TBa4)**.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Model weights and stats files**](https://console.cloud.google.com/storage/browser/dm_graphcast).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**The paper**](https://storage.googleapis.com/deepmind-media/DeepMind.com/Blog/graphcast-ai-model-for-faster-and-more-accurate-global-weather-forecasting/Learning_skillful_medium-range_global_weather_forecasting.pdf).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**The article**](https://deepmind.google/discover/blog/graphcast-ai-model-for-faster-and-more-accurate-global-weather-forecasting/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**CDS**](https://cds.climate.copernicus.eu/#!/home).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best of luck on your journey in data science and thank you for reading :)
  prefs: []
  type: TYPE_NORMAL
