["```py\nimport polars as pl\ndf=pl.read_csv('listings.csv.gz')\n```", "```py\nimport polars as pl\n#I renamed the listings.csv.gz file to cityname_listings.csv.gz.\ndf=pl.read_csv('barcelona_listings.csv.gz')\ndf=df.filter((pl.col('property_type')==\"Entire rental unit\")&(pl.col('has_availability')==\"t\"))\n```", "```py\nhost_count=df['host_id'].value_counts().sort('count')\nbreaks = [1,2,5,10,100] \nlabels = ['1','2','+2','+5','+10','+100']\nhost_count = host_count.with_columns(\n    pl.col(\"count\").cut(breaks=breaks, labels=labels, left_closed=False).alias(\"binned_counts\")\n)\nhost_count\n```", "```py\ndf=df.join(host_count,on='host_id',how='left')\n\ngraph_data=df['binned_counts'].value_counts().sort('binned_counts')\ntotal_sum=graph_data['count'].sum()\ngraph_data=graph_data.with_columns(((pl.col('count')/total_sum)*100).round().cast(pl.Int32).alias('percentage'))\n```", "```py\nimport plotly.express as px\n\npalette=[\"#537c78\",\"#7ba591\",\"#cc222b\",\"#f15b4c\",\"#faa41b\",\"#ffd45b\"]\n\n# I wrote the text_annotation manually cause I like modifying the x position\ntext_annotation=['19%','7%','10%','10%','37%','17%']\ntext_annotation_xpos=[17,5,8,8,35,15]\ntext_annotation_ypos=[5,4,3,2,1,0]\nannotations_text=[\n    dict(x=x,y=y,text=text,showarrow=False,font=dict(color=\"white\",weight='bold',size=20))\n    for x,y,text in zip(text_annotation_xpos,text_annotation_ypos,text_annotation)\n\n]\n\nfig = px.bar(graph_data, x=\"percentage\",y='binned_counts',orientation='h',color='binned_counts',\n             color_discrete_sequence=palette,\n            category_orders={\"binned_counts\": [\"1\", \"2\", \"+2\",\"+5\",\"+10\",\"+100\"]}\n            )\nfig.update_layout(\n    height=700,\n    width=1100,\n    template='plotly_white',\n    annotations=annotations_text,\n    xaxis_title=\"% of listings\",\n    yaxis_title=\"Number of listings owned by the same host\",\n    title=dict(text=\"Prevalence of multi-property in Barcelona's airbnb listings<br><sup>% of airbnb listings in Barcelona owned by multiproperty hosts</sup>\",font=dict(size=30)),\n    font=dict(\n        family=\"Franklin Gothic\"),\n    legend=dict(\n        orientation='h',\n        x=0.5,\n        y=-0.125,\n        xanchor='center',\n        yanchor='bottom',\n        title=\"Number of properties per host\"\n    ))\n\nfig.update_yaxes(anchor='free',shift=-10,\n                tickfont=dict(size=18,weight='normal'))\n\nfig.show()\n```", "```py\nimport polars as pl\n\ndef airbnb_per_host(file,ptype,neighbourhood):\n    df=pl.read_csv(file)\n    if neighbourhood:\n        df=df.filter((pl.col('property_type')==ptype)&(pl.col('neighbourhood_group_cleansed')==neighbourhood)&\n                    (pl.col('has_availability')==\"t\"))\n    else:\n        df=df.filter((pl.col('property_type')==ptype)&(pl.col('has_availability')==\"t\"))\n\n    host_count=df['host_id'].value_counts().sort('count')\n    breaks=[1,2,5,10,100] \n    labels=['1','2','+2','+5','+10','+100']\n    host_count = host_count.with_columns(\n    pl.col(\"count\").cut(breaks=breaks, labels=labels, left_closed=False).alias(\"binned_counts\"))\n\n    df=df.join(host_count,on='host_id',how='left')\n\n    graph_data=df['binned_counts'].value_counts().sort('binned_counts')\n    total_sum=graph_data['count'].sum()\n    graph_data=graph_data.with_columns(((pl.col('count')/total_sum)*100).alias('percentage'))\n\n    return graph_data\n```", "```py\nimport os\nimport glob\n\n# please remember that I renamed my files to : cityname_listings.csv.gz\ndf_combined = pl.DataFrame({\n        \"binned_counts\": pl.Series(dtype=pl.Categorical),\n        \"count\": pl.Series(dtype=pl.UInt32),\n        \"percentage\": pl.Series(dtype=pl.Float64),\n        \"city\":pl.Series(dtype=pl.String)\n    })\n\ncity_files =glob.glob(\"*.csv.gz\")\n\nfor file in city_files:\n    file_name=os.path.basename(file)\n    city=file_name.split('_')[0]\n    print('Scanning started for --->',city)\n\n    data=airbnb_per_host(file,'Entire rental unit',None)\n\n    data=data.with_columns(pl.lit(city.capitalize()).alias(\"city\"))\n\n    df_combined = pl.concat([df_combined, data], how=\"vertical\")\n\nprint('Finished scanning of ' +str(len(city_files)) +' cities')\n```"]