- en: 'Navigating Slowly Changing Dimensions (SCD) and Data Restatement: A Comprehensive
    Guide'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航慢变维度（SCD）与数据重述：全面指南
- en: 原文：[https://towardsdatascience.com/navigating-slowly-changing-dimensions-scd-and-data-reinstatement-a-comprehensive-guide-f8b72ff90d98?source=collection_archive---------10-----------------------#2024-02-05](https://towardsdatascience.com/navigating-slowly-changing-dimensions-scd-and-data-reinstatement-a-comprehensive-guide-f8b72ff90d98?source=collection_archive---------10-----------------------#2024-02-05)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/navigating-slowly-changing-dimensions-scd-and-data-reinstatement-a-comprehensive-guide-f8b72ff90d98?source=collection_archive---------10-----------------------#2024-02-05](https://towardsdatascience.com/navigating-slowly-changing-dimensions-scd-and-data-reinstatement-a-comprehensive-guide-f8b72ff90d98?source=collection_archive---------10-----------------------#2024-02-05)
- en: Strategies for efficiently managing dimension changes and data restatement in
    enterprise data warehousing
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在企业数据仓库中高效管理维度变化和数据重述的策略
- en: '[](https://medium.com/@jiayipan999?source=post_page---byline--f8b72ff90d98--------------------------------)[![Kirsten
    Jiayi Pan](../Images/d4f661ae3cb34d5cee9df5f201c72eb9.png)](https://medium.com/@jiayipan999?source=post_page---byline--f8b72ff90d98--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f8b72ff90d98--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f8b72ff90d98--------------------------------)
    [Kirsten Jiayi Pan](https://medium.com/@jiayipan999?source=post_page---byline--f8b72ff90d98--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@jiayipan999?source=post_page---byline--f8b72ff90d98--------------------------------)[![Kirsten
    Jiayi Pan](../Images/d4f661ae3cb34d5cee9df5f201c72eb9.png)](https://medium.com/@jiayipan999?source=post_page---byline--f8b72ff90d98--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f8b72ff90d98--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f8b72ff90d98--------------------------------)
    [Kirsten Jiayi Pan](https://medium.com/@jiayipan999?source=post_page---byline--f8b72ff90d98--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f8b72ff90d98--------------------------------)
    ·6 min read·Feb 5, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f8b72ff90d98--------------------------------)
    ·6 分钟阅读·2024年2月5日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Imagine this, you are a data engineer working for a large retail company that
    utilizes the incremental load technique in data warehousing. This technique involves
    selectively updating or loading only the new or modified data since the last update.
    What could occur when the product R&D department decides to change the name or
    description of a current product? How would such updates impact your existing
    data pipeline and data warehouse? How do you plan to address challenges like these?
    This article provides a comprehensive guide with solutions, utilizing Slowly Changing
    Dimensions (SCD), to tackle potential issues during data restatement.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你是一名数据工程师，为一家大型零售公司工作，该公司在数据仓库中使用增量加载技术。该技术涉及选择性地仅更新或加载自上次更新以来新增或修改的数据。当产品研发部门决定更改当前产品的名称或描述时，可能会发生什么情况？这些更新将如何影响你现有的数据管道和数据仓库？你打算如何解决这些挑战？本文提供了一份全面指南，结合使用慢变维度（SCD），来解决数据重述过程中可能遇到的问题。
- en: '![](../Images/8cf9a201f783803ed166244371c6450e.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8cf9a201f783803ed166244371c6450e.png)'
- en: 'Image retrieved from: [https://unsplash.com/photos/macbook-pro-with-images-of-computer-language-codes-fPkvU7RDmCo](https://unsplash.com/photos/macbook-pro-with-images-of-computer-language-codes-fPkvU7RDmCo)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[https://unsplash.com/photos/macbook-pro-with-images-of-computer-language-codes-fPkvU7RDmCo](https://unsplash.com/photos/macbook-pro-with-images-of-computer-language-codes-fPkvU7RDmCo)
- en: '**What are Slowly Changing Dimensions (SCD)?**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是慢变维度（SCD）？**'
- en: Slowly changing dimensions refer to infrequent changes in dimension values,
    which occur sporadically and are not tied to a daily or regular time-based schedule,
    as dimensions typically change less frequently than transaction entries in a system.
    For example, a jewelry company that has its customers placing a new order on their
    website will become a new row in the order fact table. On the other hand, the
    jewelry company rarely changes their product name and their product description
    but that doesn’t mean it will never happen in the future.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 慢变维度指的是维度值的偶发性变化，这些变化并不依赖于每日或定期的时间表，因为维度变化的频率通常低于系统中事务条目的变化频率。例如，一家珠宝公司，其顾客在其网站上提交新的订单，将在订单事实表中生成一条新的记录。另一方面，珠宝公司很少更改其产品名称和描述，但这并不意味着未来不会发生这种情况。
- en: 'Managing changes in these dimensions requires employing Slowly Changing Dimension
    (SCD) management techniques, which are categorized into defined SCD types, ranging
    from Type 0 through Type 6, including some combination or hybrid types. We can
    employ one of the following methods:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 管理这些维度的变化需要采用慢变维度（SCD）管理技术，这些技术被分为定义的 SCD 类型，从类型 0 到类型 6，包括一些组合型或混合型类型。我们可以使用以下方法之一：
- en: '**SCD Type 0: Ignore**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**SCD 类型 0：忽略**'
- en: Changes to dimension values are completely disregarded, and the values of dimensions
    remain unchanged from the time they were initially created in the data warehouse.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 维度值的变化被完全忽视，维度的值从初次在数据仓库中创建时起保持不变。
- en: '**SCD Type 1: Overwrite/ Replace**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**SCD 类型 1：覆盖/替换**'
- en: This approach is applicable when the previous value of the dimension attribute
    is no longer relevant or important. However, historical tracking of changes is
    not necessary.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当维度属性的前一个值不再相关或不重要时，适用这种方法。然而，不需要进行变化的历史跟踪。
- en: '**SCD Type 2: Create a New Dimension Row**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**SCD 类型 2：创建新的维度行**'
- en: This approach is recommended as the primary technique for addressing changing
    dimension values, involving the creation of a second row for the dimension with
    a start date, end date, and potentially a “current/expired” flag. It is suitable
    for our scenarios like product description or address changes, ensuring a clear
    partitioning of history. The new dimension row is linked to newly inserted fact
    rows, with each dimension record linked to a subset of fact rows based on insertion
    times — those before the change linked to the old dimension row, and those after
    linked to the new dimension row.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法被推荐作为解决维度值变化的主要技术，涉及为维度创建第二行，包含开始日期、结束日期，并可能有一个“当前/过期”标志。它适用于我们像产品描述或地址变更等场景，确保历史数据的清晰划分。新的维度行会与新插入的事实行相关联，每个维度记录会根据插入时间与一部分事实行相关联——变更之前的行与旧的维度行相关联，变更之后的行与新的维度行相关联。
- en: '![](../Images/350d87da883d0c7ade45a6f0154d773b.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/350d87da883d0c7ade45a6f0154d773b.png)'
- en: 'Figure 1 (Image by the author): `PRODUCT_KEY` = “cd3004” is the restatement
    for PRODUCT_KEY = “cd3002”'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1（作者提供的图片）：`PRODUCT_KEY` = “cd3004” 是对 `PRODUCT_KEY` = “cd3002” 的重新表述。
- en: '**SCD Type 3: Create a “PREV” Column**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**SCD 类型 3：创建“PREV”列**'
- en: This method is suitable when both the old and new values are relevant, and users
    may want to conduct historical analysis using either value. However, it is not
    practical to apply this technique to all dimension attributes, as it would involve
    providing two columns for each attribute in dimension tables or more if multiple
    “PREV” values need preservation. It should be selectively used where appropriate.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当旧值和新值都相关时，此方法适用，用户可能希望使用任一值进行历史分析。然而，将这种技术应用于所有维度属性并不实际，因为这将涉及为每个维度属性提供两列，或者如果需要保留多个“PREV”值，则需要更多列。应在合适的地方选择性使用。
- en: '![](../Images/527709765e8ebf86e0eaf05a1e502ede.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/527709765e8ebf86e0eaf05a1e502ede.png)'
- en: 'Figure 2 (Image by the author): PRODUCT_KEY = “cd3002” is restated with new
    PRODUCT_NAME, the old PRODUCT_NAME is stored in NAME_PREV column'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2（作者提供的图片）：`PRODUCT_KEY` = “cd3002” 被重新表述为新的 `PRODUCT_NAME`，旧的 `PRODUCT_NAME`
    存储在 `NAME_PREV` 列中。
- en: '**SCD Type 4: Rapidly Changing Large Dimensions**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**SCD 类型 4：快速变化的大型维度**'
- en: What if in a scenario you need to capture every change to every dimension attribute
    for a very large dimension of retail, say a million plus customers of your huge
    jewelry company? Using type 2 above will very quickly explode the number of rows
    in the customer dimension table to tens or even hundreds of millions of rows and
    using type 3 is not viable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在某个场景中，你需要捕获零售大型维度中每个维度属性的每次变化，比如一个拥有百万以上客户的巨大珠宝公司，怎么办？如上所述使用类型 2 会非常迅速地将客户维度表的行数膨胀到几十亿甚至上百亿行，而使用类型
    3 是不可行的。
- en: A more effective solution for rapidly changing and large volume dimension tables
    is to categorize attributes (*e.g.,* *customer age category, gender, purchasing
    power, birthday, etc.*) and separate them into a secondary dimension, like a customer
    profile dimension. This table, acting as a “full coverage” dimension table all
    potential values for every category of dimension attributes preloaded into the
    table, which can better manage the granularity of changes while avoiding excessive
    row expansion in the main customer dimension.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于快速变化且数据量较大的维度表，一个更有效的解决方案是对属性进行分类（*例如*，*客户年龄类别、性别、购买力、生日等*），并将它们分离到二级维度中，如客户档案维度。这个表作为“全覆盖”维度表，将每个类别的维度属性的所有潜在值预加载到表中，这样可以更好地管理变更的粒度，同时避免主客户维度中行的过度扩展。
- en: For example, if we have 8 age categories, 3 different genders, 6 purchasing
    power categories, and 366 possible birthdays. Our “full coverage” dimension table
    for customer profiles that contains all the above combinations will be **8 x 3
    x 6 x 366 combinations or 52704 rows**.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们有 8 个年龄类别、3 种性别、6 个购买力类别和 366 种可能的生日。我们的“全覆盖”客户档案维度表包含上述所有组合，将是 **8 x
    3 x 6 x 366 组合，或 52704 行**。
- en: We’ll need to generate `surrogate_key` for this dimension table and establish
    a connection to a new foreign key in the fact table. When a modification occurs
    in one of these dimension categories, there’s no necessity to add another row
    to the customer dimension. Instead, we generate a new fact row and associate it
    with both the customer dimension and the new customer profile dimension.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为这个维度表生成 `surrogate_key`，并在事实表中建立与新外键的连接。当其中一个维度类别发生修改时，无需向客户维度中添加新行。相反，我们生成一行新的事实数据，并将其与客户维度和新的客户档案维度关联起来。
- en: '![](../Images/d7f8320657b119068b9947cea29eb0c6.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d7f8320657b119068b9947cea29eb0c6.png)'
- en: 'Figure 3 (Image by the author): Entity relationship diagram for a “Full Coverage
    Dimension” table'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3（作者提供的图片）：“全覆盖维度”表的实体关系图
- en: '**SCD Type 5: An Extension to Type 4**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**SCD 类型 5：类型 4 的扩展**'
- en: To enhance the Type 4 approach mentioned earlier, we can establish a connection
    between the customer dimension and the customer profile dimension. This linkage
    enables the tracking of the “current” customer profile for a specific customer.
    The key facilitates the connection of the customer with the latest customer profile,
    which allows seamless traversal from the customer dimension to the most recent
    customer profile dimension without the need to link through the fact table.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了增强前面提到的类型 4 方法，我们可以在客户维度和客户档案维度之间建立连接。这种连接能够追踪特定客户的“当前”客户档案。该关键连接将客户与最新的客户档案相连接，允许从客户维度无缝地跳转到最新的客户档案维度，而无需通过事实表进行链接。
- en: '![](../Images/33d30a8b6305cc405e25e7297253ff69.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/33d30a8b6305cc405e25e7297253ff69.png)'
- en: 'Figure 4 (Image by the author): Entity relationship diagram shows the linkage
    between the customer_dim to the cust_profile_dimension'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4（作者提供的图片）：实体关系图显示了客户维度到客户档案维度的链接
- en: '**SCD Type 6: A Hybrid Technique**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**SCD 类型 6：混合技术**'
- en: With this approach, you integrate both Type 2 (new row) and Type 3 (“PREV” column).
    This blended approach offers the advantages of both methodologies. You can retrieve
    facts using the “ PREV “ column, which provides historical values and presents
    facts associated with the product category at that specific time. Simultaneously,
    querying by the “new” column provides all facts for both the current and all preceding
    values of the product category.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方法，您可以将类型 2（新行）和类型 3（“PREV”列）结合在一起。这种混合方法融合了两种方法的优点。您可以通过“PREV”列来检索事实，它提供了历史值，并展示与特定时间点的产品类别相关的事实。同时，通过“new”列进行查询，可以获得当前和所有之前的产品类别的所有事实。
- en: '![](../Images/9bce833cad0b17e0b43c81a02e270751.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9bce833cad0b17e0b43c81a02e270751.png)'
- en: 'Figure 5 (Image by the author): PRODUCT_ID = “cd3004” is the restatement for
    PRODUCT_ID = “cd3002”, which PRODUCT_ID = “cd3001” is marked as “EXPIRED” in LAST_ACTION
    column'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5（作者提供的图片）：PRODUCT_ID = “cd3004” 是 PRODUCT_ID = “cd3002” 的重述，PRODUCT_ID =
    “cd3001” 在 LAST_ACTION 列中标记为“EXPIRED”
- en: '**Bonus and Conclusion**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**奖励与总结**'
- en: Normally, data extraction comes in STAR schema, which includes one fact table
    and multiple dimension tables in an enterprise. While the dimension tables store
    all the descriptive data and primary keys, the fact table contains numeric and
    additive data that references the primary keys of each dimension around it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，数据提取采用星型模式（STAR schema），其中包括一个事实表和多个维度表。在企业中，维度表存储所有描述性数据和主键，而事实表包含引用每个维度的主键的数字和加法数据。
- en: '![](../Images/25762be7003d77ef85342b9e98f48b7d.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25762be7003d77ef85342b9e98f48b7d.png)'
- en: 'Figure 6 (Image by the author): Illustration of Star Schema'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图6（作者提供的图片）：星型模式的示意图
- en: However, if your marketing sales data extract is provided as a single denormalized
    table without distinct dimension tables and lacks the primary key for its descriptive
    data, future updates to product names may pose challenges. Handling such scenarios
    in your existing pipeline can be more complicated.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您的营销销售数据提取是作为一个单一的去规范化表提供的，且没有独立的维度表，并且缺乏描述性数据的主键，那么将来更新产品名称可能会带来挑战。在现有的管道中处理这种情况会更为复杂。
- en: The absence of primary keys in the descriptive data can lead to issues during
    data restatement, especially when you are dealing with large datasets. For instance,
    if a product name is updated in the restatement extract without a unique `product_key`,
    the incremental load pipeline may treat it as a new product, impacting the historical
    data in your consumption layer. To address this, creating `surrogate_key` for
    the product dimension and a mapping table to link original and restated product
    names is necessary for maintaining data integrity.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 描述性数据中缺少主键可能会在数据重述时引发问题，尤其是在处理大规模数据集时。例如，如果在重述提取中更新了产品名称，但没有唯一的`product_key`，增量加载管道可能会将其视为新产品，从而影响消费层的历史数据。为了解决这个问题，需要为产品维度创建`surrogate_key`，并建立一个映射表，将原始产品名称和重述后的产品名称进行关联，从而维护数据完整性。
- en: In conclusion, every aspect of data warehouse design should be carefully considered,
    taking into account potential edge cases.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，数据仓库设计的每个方面都应仔细考虑，尤其是要考虑潜在的边缘情况。
