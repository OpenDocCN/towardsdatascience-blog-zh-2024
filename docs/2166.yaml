- en: How to Make an Advanced Spider Chart in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/how-to-make-an-advanced-spider-chart-in-python-adbdb6c24a66?source=collection_archive---------3-----------------------#2024-09-05](https://towardsdatascience.com/how-to-make-an-advanced-spider-chart-in-python-adbdb6c24a66?source=collection_archive---------3-----------------------#2024-09-05)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Step-by-step explanation with an easy to use function at the end
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@zvonimir.boban.mef?source=post_page---byline--adbdb6c24a66--------------------------------)[![Zvonimir
    Boban](../Images/cbad06b7e1f5d021ce9b2dc31b8a6a65.png)](https://medium.com/@zvonimir.boban.mef?source=post_page---byline--adbdb6c24a66--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--adbdb6c24a66--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--adbdb6c24a66--------------------------------)
    [Zvonimir Boban](https://medium.com/@zvonimir.boban.mef?source=post_page---byline--adbdb6c24a66--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--adbdb6c24a66--------------------------------)
    ¬∑8 min read¬∑Sep 5, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dbce2d785e6cd17f6370f715c8437a17.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Divyadarshi Acharya](https://unsplash.com/@lincon_street?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/selective-focus-photography-of-spider-on-web-Qbs6liSxjr8?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  prefs: []
  type: TYPE_NORMAL
- en: üí°The Motivation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are multiple Python libraries which can be used to make classic spider/radar
    charts. One thing all those libraries have in common is that they only offer spider
    charts with a single scaled axis, usually displaying a scale ranging from 0 to
    100.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, rescaling feature values to a common scale is necessary in order
    to be able to compare them, but it leaves out crucial information on the absolute
    range of values of each feature. Since this information cannot be obtained from
    the graph, we have to dig back into the data. In the best case, this is time consuming
    and tedious, and in the worst, we do not have access to the original data, which
    means we don‚Äôt have acces to crucial context needed to adequately understand the
    comparisons.
  prefs: []
  type: TYPE_NORMAL
- en: A logical step-up would be to make a spider chart with an axis displaying absolute
    values for each displayed feature ‚Äî a chart known as a **multiaxis spider chart**.
    You might expect that this chart would also be offered by many libraries, but
    searching for them left me empty handed. Motivated by this lack of results, I
    decided to make my own solution and offer my approach to you in this step-by-step
    guide with an easy to use function provided at the end.
  prefs: []
  type: TYPE_NORMAL
- en: üï∏Ô∏è The Chart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To demonstrate how to make a multiaxis spider chart, I will be using a small
    part of the well known `mtcars` dataset. The dataset is derived from the 1974
    Motor Trend magazine and was first published in a study Henderson and Velleman
    1981 [1]. Let‚Äôs load the data and the required libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, I will be using the `plotnine` library to create the chart.
    Inspired by `ggplot2`, the `plotnine` library is also based on the concept of
    grammar of graphics, allowing for creation of graphs by stacking multiple layers
    on top of one another. This powerful concept lets us create essentially any visualizationwe
    can think up.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/38276e502f62184d2de0ceb05a94f33f.png)'
  prefs: []
  type: TYPE_IMG
- en: The grammar of graphics approach to chart construction. Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: The layered approach calls for separate construction of different aspects of
    the graph. First we will create the chart outline. Since spider charts deal with
    polar coordinates, I made a function which calculates the coordinates of the polygon
    tips depending on the number of variables in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/49dd29a82fb73dd36d2b747086e0d49f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 1: Creating the background for the chart. Image by Author'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have to calculate the coordinates for the axes and add them to the
    chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4704a33e8e066a82bbc62bfe6929671d.png)'
  prefs: []
  type: TYPE_IMG
- en: Addition of axes for each of the variables in the dataset. Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Now we can overlay the rescaled data points.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/864cc565f13cd3e145eb42ce014ffe05.png)'
  prefs: []
  type: TYPE_IMG
- en: Overlaying the chart with the data points. Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: The only thing left to do is to add the textual labels and names of the axes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6311b6fb070dfa78ef0fc924fffd52de.png)'
  prefs: []
  type: TYPE_IMG
- en: Addition of axes names and labels. Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: And some final aesthetic touches‚Ä¶
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7ea387aa2024833e4e1a8367eb94b492.png)'
  prefs: []
  type: TYPE_IMG
- en: The final chart. Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs just take a moment more to comment on the numbers displayed. Even froma
    regular spidr chart, it would be obvious that the Volvo is the slowest car by
    far. However, here we can also see the exact absolute difference ‚Äî The Volvo took
    18.6 seconds to cover a quarter of a mile, while the Maserati, the fastest of
    the three, took four whole seconds less. Of course, expectedly, this also means
    that the Volvo is most economical in terms of fuel consumption covering 6 more
    miles per gallon than the Maserati Bora. Being sports cars, both Maserati Bora
    and Ferrari Dino also feature more cylinders and hirsepowers and weigh more than
    the Volvo.
  prefs: []
  type: TYPE_NORMAL
- en: Other examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is another example of a spider chart but using the Titanic dataset and
    a customized font.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c506c533342c409e4405ad4567fe9b64.png)'
  prefs: []
  type: TYPE_IMG
- en: Anotehr example using the Titanic dataset. Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: This chart clearly shows that the 1st class passengers were the oldest and the
    wealthiest of the three. The 3rd class passengers had the highest number of both
    male and female passengers and were the youngest group ‚Äî probably mostly young
    people and families in search for better life abroad. However, the 1st class passengers
    had the highest survival rate, and the 3rd the lowest. This is probably partly
    due to the 1st class quarters being closer to the boat deck and partly due to
    the higher proportion of women in that class (since woman and children were rescued
    first).
  prefs: []
  type: TYPE_NORMAL
- en: ‚ûïThe Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As promised, here is the function wrapping all the above code. The first argument
    is the data frame fromatted so that the first column contains the group ids, and
    the other columns are group features to be plotted. The two additional arguments
    determine the radius of the inner empty polygon and the offset of axis titles
    from the chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: üèÅ The Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article shows how to construct an advanced multiaxis spider chart from
    scratch in Python. Although no Python package I know of currently supports this
    kind of chart, utilizing the layered grammar of graphics approach from the `plotnine`
    package provided me with the tools to create one myself. Of course, there is still
    room for progress, as the final function can be customized further by adding more
    arguments and options to control various aspects of the chart such as the line
    and backgorund color, font size, ‚Ä¶, but I leave that to the reader for now üòâ.
  prefs: []
  type: TYPE_NORMAL
- en: That‚Äôs all folks. I hope you found the article useful and will use it to make
    many more neat spider charts in the future. Enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] Henderson, H. V., & Velleman, P. F. (1981). Building multiple regression
    models interactively. Biometrics, 37, 391‚Äì411.'
  prefs: []
  type: TYPE_NORMAL
