["```py\ndetection:\n    selection_image:\n        - Image|contains:\n              - '\\CVE-202'\n              - '\\CVE202'\n        - Image|endswith:\n              - '\\poc.exe'\n              - '\\artifact.exe'\n              - '\\artifact64.exe'\n              - '\\artifact_protected.exe'\n              - '\\artifact32.exe'\n              - '\\artifact32big.exe'\n              - 'obfuscated.exe'\n              - 'obfusc.exe'\n              - '\\meterpreter'\n    selection_commandline:\n        CommandLine|contains:\n            - 'inject.ps1'\n            - 'Invoke-CVE'\n            - 'pupy.ps1'\n            - 'payload.ps1'\n            - 'beacon.ps1'\n            - 'PowerView.ps1'\n            - 'bypass.ps1'\n            - 'obfuscated.ps1'\n```", "```py\nselect\nmap(\n   'Suspicious Program Names',\n   (\n     (\n            (\n                Imagepath LIKE '%\\\\cve-202%'\n                OR Imagepath LIKE '%\\\\cve202%'\n            )\n            OR (\n                Imagepath LIKE '%\\\\poc.exe'\n                OR Imagepath LIKE '%\\\\artifact.exe'\n                ...\n                OR Imagepath LIKE '%obfusc.exe'\n                OR Imagepath LIKE '%\\\\meterpreter'\n            )\n        )\n        OR (\n            CommandLine LIKE '%inject.ps1%'\n            OR CommandLine LIKE '%invoke-cve%'\n            OR CommandLine LIKE '%pupy.ps1%'\n            ...\n            OR CommandLine LIKE '%encode.ps1%'\n            OR CommandLine LIKE '%powercat.ps1%'\n        )\n    )\n) as sigma_rules_map\n```", "```py\n public boolean contains(final UTF8String substring) {\n    if (substring.numBytes == 0) {\n      return true;\n    }\n\n    byte first = substring.getByte(0);\n    for (int i = 0; i <= numBytes - substring.numBytes; i++) {\n      if (getByte(i) == first && matchAt(substring, i)) {\n        return true;\n      }\n    }\n    return false;\n  }\n```", "```py\n// create the trie\nval triBuilder = Trie.builder()\ntriBuilder.addKeyword(\"test1\")\ntriBuilder.addKeyword(\"test2\")\ntrie = triBuilder.build()\n\n// apply the trie to some text\naTextColumn = \"some text to scan for either test1 or test2\"\nfound = trie.containsMatch(aTextColumn)\n```", "```py\nboolean aho_corasick_in(string text, array<string> searches)\n```", "```py\nselect \nmap(\n'Suspicious Program Names',\n(\n    (\n        (\n            Imagepath LIKE '%\\\\cve-202%'\n            OR Imagepath LIKE '%\\\\cve202%'\n        )\n        OR (\n            Imagepath LIKE '%\\\\poc.exe'\n            OR Imagepath LIKE '%\\\\artifact.exe'\n            ...\n            OR Imagepath LIKE '%\\\\meterpreter'\n        )\n    )\n    OR (\n        aho_corasick_in(\n            CommandLine,\n            ARRAY(\n                'inject.ps1',\n                'invoke-cve',\n                ...\n                'hound.ps1',\n                'encode.ps1',\n                'powercat.ps1'\n            )\n        )\n    )\n)\n) as sigma_rules_map\n```", "```py\ncase class AhoCorasickIn(text: Expression, searches: Expression) \nextends BinaryExpression \nwith CodegenFallback \nwith ImplicitCastInputTypes \nwith NullIntolerant \nwith Predicate {\n\n  override def prettyName: String = \"aho_corasick_in\"\n  // Assign text to left field \n  override def left: Expression = text\n  // Assign searches to right field \n  override def right: Expression = searches\n\n  override def inputTypes: Seq[DataType] = Seq(StringType, ArrayType(StringType))\n\n  // Cache foldable searches expression when AhoCorasickIn is constructed\n  private lazy val cacheTrie: Trie = right match {\n    case p: Expression if p.foldable => {\n      val searches = p.eval().asInstanceOf[ArrayData]\n      createTrie(searches)\n    }\n    case _ => null\n  }\n\n  protected def createTrie(searches: ArrayData): Trie = {\n      val triBuilder = Trie.builder()\n      searches.foreach(StringType, (i, s) => triBuilder.addKeyword(s.toString()))\n      triBuilder.build()\n  }\n\n  protected def getTrie(searches: ArrayData) = if (cacheTrie == null) createTrie(searches) else cacheTrie\n\n  override protected def nullSafeEval(text: Any, searches: Any): Any = {\n    val trie = getTrie(searches.asInstanceOf[ArrayData])\n    trie.containsMatch(text.asInstanceOf[UTF8String].toString())\n  }\n\n  override protected def withNewChildrenInternal(\n      newLeft: Expression, newRight: Expression): AhoCorasickIn =\n    copy(text = newLeft, searches = newRight)\n}\n```", "```py\nselect\n  *\nfrom (\n  select\n      text like '%' || uuid() || '%' OR\n      text like '%' || uuid() || '%' OR\n      text like '%' || uuid() || '%' OR\n      ...\n      as result\n  from (\n      select\n          uuid()||uuid()||uuid()... as text\n      from\n          range(0, 1000000, 1, 32)\n  )\n)\nwhere\n    result = TRUE\n```", "```py\nselect\n  *\nfrom (\n  select\n      aho_corasick_in(text, array(uuid(), uuid(),...) as result\n  from (\n      select\n          uuid()||uuid()||uuid()... as text\n      from\n          range(0, 1000000, 1, 32)\n  )\n)\nwhere\n    result = TRUE\n```"]