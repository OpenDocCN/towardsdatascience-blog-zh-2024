["```py\ndf1 = pd.read_csv('file1.csv')\ndf2 = pd.read_csv('file2.csv')\ndf3 = pd.read_csv('file3.csv')\n\ndf1_2 = pd.merge(df1, df2, on='a', how='left')\ndf1_2_3 = pd.merge(df1_2, df3, on='b', how='inner')\n```", "```py\ndf1 = pd.read_csv('file1.csv')\ndf2 = pd.read_csv('file2.csv')\ndf3 = pd.read_csv('file3.csv')\ndf4 = pd.read_csv('file4.csv')\n\ndf1_2 = pd.merge(df1, df2, on='a', how='left')\ndf1_2_3 = pd.merge(df1_2, df3, on='b', how='inner')\ndf1_4 = pd.merge(df1, df4, on='a', how='left')\n```", "```py\nfiles = {1: 'file1.csv', 2: 'file2.csv', 3:'file3.csv', 4:'file4.csv'}\n\ndef get_df(x):\n    return pd.read_csv(files[x])\n\ndef get_df1_2():\n    df1 = get_df(1)\n    df2 = get_df(2)\n    return pd.merge(df1, df2, on='a', how='left')  \n\ndef get_df1_2_3():\n    df1_2 = get_df1_2()\n    df3 = get_df(3)\n    return pd.merge(df1_2, df3, on='b', how='inner')\n\ndef get_df1_4():\n    df1 = get_df(1)\n    df4 = get_df(4)\n    return pd.merge(df1, df4, on='a', how='left')\n```", "```py\nfiles = {1: 'file1.csv', 2: 'file2.csv', 3:'file3.csv', 4:'file4.csv'}\n\nclass Reports:\n\n    def __init__(self):\n        self.df1 = pd.read_csv(files[1])\n\n    def get_df1_2(self):\n        self.df2 = pd.read_csv(files[2])\n        self.df1_2 = pd.merge(self.df1, self.df2, on='a', how='left')\n        return self.df1_2\n\n    def get_df1_4(self):\n        self.df4 = pd.read_csv(files[4])\n        self.df1_4 = pd.merge(self.df1, self.df4, on='a', how='left')\n\n    def get_df1_2_3(self):\n        self.get_df1_2()  \n        self.df3 = pd.read_csv(files[3])\n        self.df1_2_3 = pd.merge(self.df1_2, self.df3, on='b', how='inner')\n```", "```py\nfiles = {'df1': 'file1.csv', 'df2': 'file2.csv',\n         'df3': 'file3.csv', 'df4': 'file4.csv'}\n\nclass Reports:\n\n    def __init__(self):\n        self._build_shortcuts()\n\n    def _read(self, k):\n        setattr(self, k, pd.read_csv(files[k]))  \n\n    def _build_shortcuts(self):\n        # Dict: Method -> list of attributes\n        dict0 = {'get_df1_2': ['df1_2'],\n                 'get_df1_4': ['df1_4'],\n                 'get_df1_2_3': ['df1_2_3']}\n\n        # Dict: Attribute -> method which creates the attribute\n        dict1 = {v:k for k, values in dict0.items() for v in values}\n        self._shortcuts = dict1\n\n    def __getattr__(self, attr):\n        if not attr in self.__dict__: # if the attr has not been created...\n            if attr in self._shortcuts: \n                func = self._shortcuts[attr] \n                # `func` is the method responsible for creating attr\n                self.__getattribute__(func)()\n                return self.__getattribute__(attr)\n            elif attr in files:\n                self._read(attr)\n                return self.__getattribute__(attr)\n            else:\n                raise AttributeError\n        else:\n            return self.__getattribute__(attr)\n\n    def get_df1_2(self):\n        self.df1_2 = pd.merge(self.df1, self.df2, on='a', how='left')\n        return self.df1_2\n\n    def get_df1_4(self):\n        self.df1_4 = pd.merge(self.df1, self.df4, on='a', how='left')\n        return self.df1_4\n\n    def get_df1_2_3(self):\n        self.df1_2_3 = pd.merge(self.df1_2, self.df3, on='b', how='inner')\n        return self.df1_2_3\n```", "```py\n ...\n\n    def _build_shortcuts(self):\n\n        # Added 'unique_items_in_a' to the first list.\n        dict0 = {'get_df1_2': ['df1_2', 'unique_values_in_a'],\n                 'get_df1_4': ['df1_4'],\n                 'get_df1_2_3': ['df1_2_3']}\n\n        dict1 = {v:k for k, values in dict0.items() for v in values}\n        self._shortcuts = dict1\n    ...\n\n    def get_df1_2(self):\n        self.df1_2 = pd.merge(self.df1, self.df2, on='a', how='left')\n        # Added the list of unique values of column 'a'\n        self.unique_values_in_a = self.df1_2['a'].unique().tolist()\n        return self.df1_2\n```"]