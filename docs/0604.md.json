["```py\nclass Agent:\n\n    def __init__(self, index, position, velocity, empathy=1, ... dVision=0, age=0, plotSize=10):\n\n        self.index = index\n        self.velocity = np.array(velocity)\n        self.empathy = empathy\n        ...\n        self.dVision = dVision\n        self.color = HSVToRGB([self.species,1,1])\n        self.plotSize=plotSize\n\n        self.pltObj = plt.Circle(self.position, self.plotSize, color=self.color)\n```", "```py\nclass World:\n\n    def __init__(self,population=1,spawnSize=400,worldSize=1200,worldInterval=300,arrows=False,agentSize=10):\n\n        self.agents = []\n        self.figure, self.ax = plt.subplots(figsize=(12,8))\n        self.ax.set_xlim(-worldSize/2, worldSize/2)\n        self.ax.set_ylim(-worldSize/2, worldSize/2)\n\n        self.worldInterval = worldInterval\n        self.worldSize = worldSize\n        self.arrows = arrows\n        self.agentSize = agentSize\n\n        for i in range(population):\n\n            print(i)\n\n            newAgent = Agent(index=i, position=[rand()*spawnSize - spawnSize/2, rand()*spawnSize - spawnSize/2],\n                                     velocity=[rand()*spawnSize/10 - spawnSize/20, rand()*spawnSize/10 - spawnSize/20], plotSize = self.agentSize)\n\n            self.agents.append(newAgent)\n            self.ax.add_patch(newAgent.pltObj)\n\n            print('Created agent at',newAgent.position,'with index',newAgent.index)\n\n        self.spawnSize = spawnSize\n```", "```py\ndef start(self):\n\n        ani = animation.FuncAnimation(self.figure, self.updateWorld, frames=100, interval=self.worldInterval, blit=True)\n\n        plt.show()\n```", "```py\ndef updateWorld(self,x=0):\n\n        pltObjects = []\n\n        for agent in self.agents:\n\n            agent.updatePosition(self.agents, self.worldSize)\n            agent.pltObj.center = agent.position\n            pltObjects.append(agent.pltObj)\n\n            if self.arrows is True:\n\n                velocityArrow = plt.Arrow(agent.position[0], agent.position[1], agent.velocity[0], agent.velocity[1], width=2, color=agent.color)\n\n                self.ax.add_patch(velocityArrow)\n\n                pltObjects.append(velocityArrow)\n\n        return pltObjects\n```", "```py\ndef updatePosition(self, agents, worldSize):\n\n        self.updateVelocity(agents)\n\n        self.position += self.velocity\n\n        ...\n\n    def updateVelocity(self, agents):\n\n        herd_velocity = self.herdVelocity(agents)\n\n        herd_magnitude = np.linalg.norm(herd_velocity)\n        self_magnitude = np.linalg.norm(self.velocity)\n\n        if herd_magnitude > 0.1:\n\n            herd_unit_velocity = herd_velocity/herd_magnitude\n\n            self.velocity += herd_unit_velocity \n```", "```py\nvelocityArrow = plt.Arrow(agent.position[0], agent.position[1], agent.velocity[0], agent.velocity[1], width=2, color=agent.color)\nself.ax.add_patch(velocityArrow)\npltObjects.append(velocityArrow)\n```", "```py\nself.species = rand()\nself.color = HSVToRGB([self.species,1,1])\nself.pltObj = plt.Circle(self.position, self.plotSize, color=self.color)\n```", "```py\nherd_velocity += neighbor.velocity * (0.5-np.sqrt(abs(self.species-neighbor.species)))\n```"]