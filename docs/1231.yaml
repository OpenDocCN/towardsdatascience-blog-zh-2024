- en: Understanding Dataform Terminologies And Authentication Flow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Dataform术语和身份验证流程
- en: 原文：[https://towardsdatascience.com/understanding-dataform-terminologies-and-authentication-flow-aa98c2fbcdfb?source=collection_archive---------11-----------------------#2024-05-15](https://towardsdatascience.com/understanding-dataform-terminologies-and-authentication-flow-aa98c2fbcdfb?source=collection_archive---------11-----------------------#2024-05-15)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/understanding-dataform-terminologies-and-authentication-flow-aa98c2fbcdfb?source=collection_archive---------11-----------------------#2024-05-15](https://towardsdatascience.com/understanding-dataform-terminologies-and-authentication-flow-aa98c2fbcdfb?source=collection_archive---------11-----------------------#2024-05-15)
- en: 'MLOps: Data Pipeline Orchestration'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MLOps：数据管道编排
- en: 'Part 1 of Dataform 101: Fundamentals of a single repo, multi-environment Dataform
    with least-privilege access control and infrastructure as code setup'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dataform 101系列第一部分：单仓库多环境Dataform的基础知识，带有最小权限访问控制和基础设施即代码设置
- en: '[](https://koakande.medium.com/?source=post_page---byline--aa98c2fbcdfb--------------------------------)[![Kabeer
    Akande](../Images/5e1f083e75741690ae27b00d1e5f1dd3.png)](https://koakande.medium.com/?source=post_page---byline--aa98c2fbcdfb--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--aa98c2fbcdfb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--aa98c2fbcdfb--------------------------------)
    [Kabeer Akande](https://koakande.medium.com/?source=post_page---byline--aa98c2fbcdfb--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://koakande.medium.com/?source=post_page---byline--aa98c2fbcdfb--------------------------------)[![Kabeer
    Akande](../Images/5e1f083e75741690ae27b00d1e5f1dd3.png)](https://koakande.medium.com/?source=post_page---byline--aa98c2fbcdfb--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--aa98c2fbcdfb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--aa98c2fbcdfb--------------------------------)
    [Kabeer Akande](https://koakande.medium.com/?source=post_page---byline--aa98c2fbcdfb--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--aa98c2fbcdfb--------------------------------)
    ·8 min read·May 15, 2024
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--aa98c2fbcdfb--------------------------------)
    ·阅读时长8分钟·2024年5月15日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/086397a760f9b97d80411a839a05f989.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/086397a760f9b97d80411a839a05f989.png)'
- en: A typical positioning of Dataform in a data pipeline *[Image by author]*
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Dataform在数据管道中的典型定位 *[图片来自作者]*
- en: '[Dataform](https://cloud.google.com/dataform?hl=en) is a new service integrated
    into the GCP suite of services which enables teams to develop and operationalise
    complex, SQL-based data pipelines. Dataform enables the application of software
    engineering best practices such as testing, environments, version control, dependencies
    management, orchestration and automated documentation to data pipelines. It is
    a serverless, SQL workflow orchestration workhorse within GCP. Typically, as shown
    in the image above, Dataform takes raw data, transform it with all the engineering
    best practices and output a properly structured data ready for consumption.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[Dataform](https://cloud.google.com/dataform?hl=en)是一个集成在GCP服务套件中的新服务，使团队能够开发和操作复杂的基于SQL的数据管道。Dataform使得软件工程的最佳实践得以应用，如测试、环境管理、版本控制、依赖管理、编排和自动化文档等，这些都可以用于数据管道。它是GCP中一个无服务器的SQL工作流编排引擎。通常，如上图所示，Dataform将原始数据进行转化，应用所有工程最佳实践，并输出一个结构良好的数据，准备好供后续使用。'
- en: The inspiration for this post came while I was [migrating](https://cloud.google.com/dataform/docs/migration)
    one of our projects’ legacy Dataform from the web UI to GCP BigQuery. During the
    migration, I found terms such as release configuration, workflow configuration,
    and development workspace really confusing and hard to wrap my head around. That
    serves as the motivation to write a post explaining some of the new terminologies
    used in the GCP Dataform. In addition, I would touch upon some basic flow underlining
    single repo multi-environment Dataform operations in GCP. There are multiple ways
    to set up Dataform so be sure to check out [best practices](https://cloud.google.com/dataform/docs/best-practices)
    from Google.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章的灵感来自于我在将我们一个项目的遗留Dataform从Web UI迁移到GCP BigQuery时的经历。在迁移过程中，我发现像发布配置、工作流配置和开发工作区等术语非常令人困惑，难以理解。这也促使我写这篇文章，解释GCP
    Dataform中使用的一些新术语。此外，我还会简要介绍在GCP中使用单仓库多环境Dataform操作的一些基本流程。设置Dataform有多种方式，务必查看Google提供的[最佳实践](https://cloud.google.com/dataform/docs/best-practices)。
- en: This is Part 1 of a two-part series dealing with Dataform fundamentals and setup.
    In Part 2, I would provide a walkthrough of the Terraform setup showing how to
    implement the least access control when provisioning Dataform. If you want to
    have a sneak peek into that, be sure to check out the [repo](https://github.com/kbakande/terraforming-dataform).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于 Dataform 基础知识和设置的两部分系列中的第一部分。在第二部分中，我将提供 Terraform 设置的演示，展示如何在配置 Dataform
    时实现最小权限控制。如果你想先睹为快，确保查看 [repo](https://github.com/kbakande/terraforming-dataform)。
- en: Terminologies
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 术语
- en: Implementation in Dataform is akin to GitHub workflow. I will contrast similarity
    between the two and create analogies to make it understandable. It is easy to
    imagine Dataform as a local GitHub repository. When Dataform is being set up,
    it will request that a remote repository is configured similar to how local GitHub
    is paired with remote origin. With this scenario setup in mind, lets quickly go
    through some Dataform terminologies.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Dataform 的实现类似于 GitHub 工作流。我将对两者之间的相似性进行对比，并创建类比以帮助理解。可以把 Dataform 想象成一个本地的
    GitHub 仓库。在设置 Dataform 时，它会请求配置一个远程仓库，类似于本地 GitHub 与远程 origin 配对。考虑到这种情境设置，我们快速浏览一些
    Dataform 的术语。
- en: Development Workspaces
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发工作空间
- en: This is analogous to local GitHub branch. Similar to how a branch is created
    from GitHub main, a new Dataform development workspace would checkout an editable
    copy of main Dataform repo code. Development workspaces are independent of each
    other similar to GitHub branches. Code development and experimentations would
    take place within the development workspace and when the code are committed and
    pushed, a remote branch with similar name to the development workspace is created.
    It is worth mentioning that the GitHub repo from which an editable code is checked
    into a development workspace is configurable. It may be from the main branch or
    any other branches in the remote repo.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于本地 GitHub 分支。类似于从 GitHub 主分支创建分支，新的 Dataform 开发工作空间会检出主 Dataform 仓库代码的可编辑副本。开发工作空间彼此独立，类似于
    GitHub 分支。代码的开发和实验会在开发工作空间中进行，当代码被提交并推送后，会创建一个与开发工作空间名称相似的远程分支。值得一提的是，用于检出可编辑代码到开发工作空间的
    GitHub 仓库是可配置的，可以是主分支或远程仓库中的任何其他分支。
- en: Release Configuration
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布配置
- en: Dataform uses a mix of `.sqlx` scripts with Javascript `.js` for data transformations
    and logic. As a result, it first generates a compilation of the codebase to get
    a standard and reproducible pipeline representation of the codebase and ensure
    that the scripts can be materialised into data. Release configuration is the automated
    process by which this compilation takes place. At the configured time, Dataform
    would check out the code in a remote main repo (this is configurable and can be
    modified to target any of the remote branches) and compile it into a JSON config
    file. The process of checking out the code and generating the compilation is what
    the release configuration covers.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Dataform 使用 `.sqlx` 脚本和 Javascript `.js` 混合进行数据转换和逻辑处理。因此，它首先会生成代码库的编译版本，以获得标准化和可重复的代码库管道表示，并确保脚本能够转化为数据。发布配置是这一编译过程的自动化流程。在配置的时间，Dataform
    会检出远程主仓库中的代码（这可以配置并修改为指向任何远程分支），并将其编译成 JSON 配置文件。检出代码和生成编译的过程正是发布配置所涵盖的内容。
- en: Workflow Configuration
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流配置
- en: So the output of the release configuration is a `.json` config file. Workflow
    configuration determines when to run the config file, what identity should run
    it and which environment would the config file output be manifested or written
    to.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，发布配置的输出是一个 `.json` 配置文件。工作流配置决定了何时运行该配置文件、由哪个身份运行以及该配置文件的输出将被写入哪个环境。
- en: Since workflow configuration would need the output of release configuration,
    it is reasonable to ensure that it runs latter than the release configuration.
    The reason being that release configuration will need to first authenticate to
    the remote repo (which sometimes fail), checkout the code and compile it. These
    steps happen in seconds but may take more time in case of network connection failure.
    Since the workflow configuration needs the `.json`compiled file generated by release
    configuration, it makes sense to schedule it later than the release configuration.
    If scheduled at the same time, the workflow configuration might use the previous
    compilation, meaning that the latest changes are not immediately reflected in
    the BQ tables until the next workflow configuration runs.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于工作流配置需要使用发布配置的输出，因此合理的做法是确保它在发布配置之后运行。原因是发布配置首先需要对远程仓库进行身份验证（这一过程有时会失败），然后检出代码并进行编译。虽然这些步骤在几秒钟内完成，但在网络连接失败的情况下可能需要更多时间。由于工作流配置需要发布配置生成的`.json`编译文件，因此将其安排在发布配置之后执行是有意义的。如果同时安排，工作流配置可能会使用之前的编译结果，意味着直到下一个工作流配置运行时，BQ表中的最新更改才会被反映出来。
- en: Environments
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境
- en: '![](../Images/0c7a26009baa8f1952328168bac79c50.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c7a26009baa8f1952328168bac79c50.png)'
- en: An architecture flow for a single repo, multi-environment Dataform
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 单一仓库、多环境Dataform的架构流程
- en: One of the features of Dataform is the functionality that enables manifesting
    code into different environments such as development, staging and production.
    Working with multiple environments brings the challenge of how Dataform should
    be set up. Should repositories be created in multiple environments or in just
    one environment? Google discussed some of these tradeoffs in the Dataform best
    [practices](https://cloud.google.com/dataform/docs/best-practices) section. This
    post demonstrates setting up Dataform for staging and production environments
    with both data materialised into both environments from a single repo.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Dataform的一个特点是它能够将代码部署到不同的环境中，例如开发、暂存和生产环境。使用多个环境带来了如何设置Dataform的挑战。是否应该在多个环境中创建仓库，还是只在一个环境中创建？谷歌在Dataform最佳[实践](https://cloud.google.com/dataform/docs/best-practices)部分讨论了这些折衷。本篇文章展示了如何为暂存和生产环境设置Dataform，并将数据从一个仓库部署到两个环境中。
- en: The environments are set up as GCP projects with a custom service account for
    each. Dataform is only created in the staging environment/project because we will
    be making lots of changes and it is better to experiment within the staging (or
    non production) environment. Also, staging environment is selected as the environment
    in which the development code is manifested. This means dataset and tables generated
    from development workspace are manifested within the staging environment.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些环境被设置为GCP项目，并为每个项目配置了自定义服务帐户。Dataform仅在暂存环境/项目中创建，因为我们会进行大量更改，最好在暂存（或非生产）环境中进行实验。此外，暂存环境被选为开发代码部署的环境。这意味着从开发工作空间生成的数据集和表会在暂存环境中进行部署。
- en: Once the development is done, the code is committed and pushed to the remote
    repository. From there, a PR can be raised and merged to the main repo after review.
    During scheduled workflow, both release and workflow configurations are executed.
    Dataform is configured to compile code from the main branch and execute it within
    production environment. As such, only reviewed code goes to production and any
    development code stays in the staging environment.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开发完成，代码就会被提交并推送到远程仓库。从那里，可以提出一个PR（Pull Request），并在审核后合并到主仓库。在预定的工作流中，发布和工作流配置都会执行。Dataform被配置为从主分支编译代码，并在生产环境中执行。因此，只有经过审核的代码会进入生产环境，任何开发中的代码会停留在暂存环境中。
- en: In summary, from the Dataform architecture flow above, code developed in the
    development workspaces are manifested in the staging environment or pushed to
    remote GitHub where it is peer reviewed and merged to the main branch. Release
    configuration compiles code from the main branch while workflow configuration
    takes the compiled code and manifest its data in the production environment. As
    such, only reviewed code in the GitHub main branch are manifested in the production
    environment.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，从上述Dataform架构流程来看，在开发工作空间中开发的代码会在暂存环境中进行部署，或者推送到远程GitHub，在那里经过同行评审并合并到主分支。发布配置从主分支编译代码，而工作流配置则取用编译后的代码并将其数据部署到生产环境。因此，只有GitHub主分支中经过审核的代码才会在生产环境中部署。
- en: Authentication
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证
- en: Authentication for Dataform could be complex and tricky especially when setting
    up for multiple environments. I will be using example of staging and production
    environments to explain how this is done. Let’s break down where authentication
    is needed and how that is done.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Dataform 的身份验证可能会很复杂，尤其是在为多个环境配置时。我将使用预发布和生产环境的示例来说明如何完成此过程。让我们逐步解析身份验证需要在哪里进行，以及如何完成身份验证。
- en: '![](../Images/e69235544bfe4ac5096098a5cd028f03.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e69235544bfe4ac5096098a5cd028f03.png)'
- en: Dataform flow for tracking authentication
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 用于追踪身份验证的 Dataform 流程
- en: The figure above shows a simple Dataform workflow that we can use to track where
    authentication is needed and for what resources. The flow chronicles what happens
    when Dataform runs in the development workspace and on schedule (release and workflow
    configurations).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 上图展示了一个简单的 Dataform 工作流，我们可以用它来追踪身份验证所需的地方以及对应的资源。该流程描述了当 Dataform 在开发工作区和计划（发布及工作流配置）中运行时发生的事情。
- en: '**Machine User**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**机器用户**'
- en: Lets talk about machine users. Dataform requires credentials to access GitHub
    when checking out the code stored on a remote repository. It is possible to use
    individual credentials but the best practice is to use a machine user in an organisation.
    This practice ensures that the Dataform pipeline orchestration is independent
    of individual identities and will not be impacted by their departure. Setting
    up machine user means using an identity not tied to an individual to set up GitHub
    account as detailed [here](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/managing-deploy-keys#machine-users).
    In the case of Dataform, a personal access token (PAT) is generated for the machine
    user account and store as secret on GCP secret manager. The machine user should
    also be added as outside collaborator to the Dataform remote repository with a
    read and write access. We will see how Dataform is configured to access the secret
    later in the Terraform code. If the user decides to use their identity instead
    of a machine user, a token should be generated as detailed [here](https://cloud.google.com/dataform/docs/connect-repository#:~:text=You%20can%20authenticate%20GitHub%20and,on%20behalf%20of%20the%20developers.).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来讨论一下机器用户。当 Dataform 在检出存储在远程仓库中的代码时，需要凭证来访问 GitHub。虽然可以使用个人凭证，但最佳做法是使用组织中的机器用户。这种做法确保
    Dataform 流水线编排不依赖于个人身份，且不会因其离职而受到影响。设置机器用户意味着使用与个人无关的身份来创建 GitHub 账户，具体设置请参见 [这里](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/managing-deploy-keys#machine-users)。对于
    Dataform，机器用户账户会生成一个个人访问令牌（PAT），并将其作为密钥存储在 GCP 秘密管理器中。机器用户还应作为外部协作者添加到 Dataform
    的远程仓库，并授予读取和写入权限。稍后我们将在 Terraform 代码中看到如何配置 Dataform 以访问这些秘密。如果用户决定使用自己的身份而不是机器用户，则应按照
    [这里](https://cloud.google.com/dataform/docs/connect-repository#:~:text=You%20can%20authenticate%20GitHub%20and,on%20behalf%20of%20the%20developers.)
    的说明生成令牌。
- en: '**GitHub Authentication Flow**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitHub 身份验证流程**'
- en: '![](../Images/60723122dd91404c3301ccf121abfaf4.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/60723122dd91404c3301ccf121abfaf4.png)'
- en: GitHub authentication flow with a Machine user
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用机器用户的 GitHub 身份验证流程
- en: Dataform uses its default service account for implementation so when a Dataform
    action is to be performed, it starts with the default service account. I assume
    you have set up a machine user, add the user as a collaborator to the remote repository,
    and add the user PAT as a secret to GCP secret manager. To authenticate to GitHub,
    default service account needs to extract secret from the secret manager. Default
    service account requires *secretAccessor* role to access the secret. Once the
    secret is accessed, default service account can now impersonate the machine user
    and since the machine user is added as a collaborator on the remote Git repo,
    default service account now has access to the remote GitHub repository as a collaborator.
    The flow is shown in the GitHub authentication workflow figure.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Dataform 使用其默认服务账户进行操作，因此在执行 Dataform 操作时，首先使用默认服务账户。我假设你已经设置好了机器用户，将该用户添加为远程仓库的协作者，并将用户的
    PAT 作为秘密添加到 GCP 秘密管理器中。为了进行 GitHub 身份验证，默认服务账户需要从秘密管理器中提取秘密。默认服务账户需要 *secretAccessor*
    角色来访问该秘密。一旦访问了秘密，默认服务账户便可以模拟机器用户，并且由于机器用户已作为协作者添加到远程 Git 仓库，默认服务账户现在可以作为协作者访问远程
    GitHub 仓库。该流程如 GitHub 身份验证流程图所示。
- en: '**Development Workspace Authentication**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发工作区身份验证**'
- en: When execution is triggered from the development workspace, the default service
    account assumes the staging environment custom service account to manifest the
    output within the staging environment. To be able to impersonate the staging environment
    custom service account, the default service account requires the *iam.serviceAccountTokenCreator*
    role on the staging service account. This allows the default service account to
    create a short lived token, similar to the PAT used to impersonate the machine
    user, for the staging custom service account and and as such impersonate it. Hence,
    the staging custom service account is granted all the required permissions to
    write to BQ tables and the default service account will inherit these permissions
    when impersonating it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当从开发工作空间触发执行时，默认服务账户会假设暂存环境自定义服务账户的身份，以便在暂存环境中展示输出结果。为了能够模拟暂存环境自定义服务账户，默认服务账户需要在暂存服务账户上拥有*iam.serviceAccountTokenCreator*角色。这样，默认服务账户就可以创建一个短期有效的令牌，类似于用于模拟机器用户的PAT（个人访问令牌），从而模拟暂存自定义服务账户。因此，暂存自定义服务账户被授予写入BQ表格所需的所有权限，且默认服务账户在模拟该账户时将继承这些权限。
- en: '**Workflow Configuration Authentication**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**工作流配置认证**'
- en: After checking out the repo, release configuration will generate a compiled
    config `.json`file from which workflow configurations will generate data. In order
    to write the data to production BQ tables, the default service account requires
    the *iam.serviceAccountTokenCreator* role on the production custom service account.
    Similar to what is done for the staging custom service account, the production
    service account is granted all required permissions to write to production environment
    BQ tables and the default service account will inherit all the permissions when
    it impersonate it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在检出代码库后，发布配置将生成一个已编译的配置`.json`文件，工作流配置将从中生成数据。为了将数据写入生产环境的BQ表格，默认服务账户需要在生产环境自定义服务账户上拥有*iam.serviceAccountTokenCreator*角色。与暂存自定义服务账户的操作类似，生产服务账户被授予写入生产环境BQ表格所需的所有权限，且默认服务账户在模拟该账户时将继承所有这些权限。
- en: '**Summary**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**总结**'
- en: In summary, the default service account is the main protagonist. It impersonates
    machine user to authenticate to GitHub as a collaborator using the machine user
    PAT. It also authenticate to the staging and production environments by impersonating
    their respective custom service accounts using a short lived token generated with
    the role *serviceAccountTokenCreator*. With this understanding, it is time to
    provision Dataform within GCP using Terraform. Look out for Part 2 of this post
    for that and or check out the [repo](https://github.com/kbakande/terraforming-dataform)
    for the code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，默认服务账户是主要的执行者。它通过模拟机器用户，使用机器用户的PAT来认证GitHub上的协作者身份。它还通过模拟各自的自定义服务账户来认证暂存和生产环境，使用的是通过*serviceAccountTokenCreator*角色生成的短期有效令牌。了解了这一点后，我们就可以开始使用Terraform在GCP中配置Dataform了。敬请期待本文的第二部分，或查看[代码库](https://github.com/kbakande/terraforming-dataform)以获取代码。
- en: '*Image credit*: All images in this post have been created by the Author'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片来源*: 本文中的所有图片均由作者制作'
- en: References
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[https://cloud.google.com/dataform?hl=en](https://cloud.google.com/dataform?hl=en)'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/dataform?hl=en](https://cloud.google.com/dataform?hl=en)'
- en: '[https://cloud.google.com/dataform/docs/migration](https://cloud.google.com/dataform/docs/migration)'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/dataform/docs/migration](https://cloud.google.com/dataform/docs/migration)'
- en: '[https://cloud.google.com/dataform/docs/best-practices](https://cloud.google.com/dataform/docs/best-practices)'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/dataform/docs/best-practices](https://cloud.google.com/dataform/docs/best-practices)'
