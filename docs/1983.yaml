- en: How to Easily Validate Your Data with Pandera
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-easily-validate-your-data-with-pandera-a9cd22c515a5?source=collection_archive---------7-----------------------#2024-08-14](https://towardsdatascience.com/how-to-easily-validate-your-data-with-pandera-a9cd22c515a5?source=collection_archive---------7-----------------------#2024-08-14)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn how to build a simple data model that validates your data through type
    hints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@conalhenderson?source=post_page---byline--a9cd22c515a5--------------------------------)[![Conal
    Henderson](../Images/e10624264efc3861a2384493fa5ee55a.png)](https://medium.com/@conalhenderson?source=post_page---byline--a9cd22c515a5--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a9cd22c515a5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a9cd22c515a5--------------------------------)
    [Conal Henderson](https://medium.com/@conalhenderson?source=post_page---byline--a9cd22c515a5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a9cd22c515a5--------------------------------)
    ·6 min read·Aug 14, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9cb51cb89dabc5e3cfd2ce6056273fff.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Christina Morillo](https://www.pexels.com/@divinetechygirl/) on [Pixels](https://www.pexels.com/photo/man-standing-infront-of-white-board-1181345/)
  prefs: []
  type: TYPE_NORMAL
- en: Many `pandas` tutorials online teach you the basics of manipulating and cleaning
    data, but rarely do they show how to validate whether data is correct. This is
    where data validation using `pandera` comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Why Data Validation?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like anyone, when I first look at data, I complete basic investigations such
    as looking at the data types, checking for null values, and visualising data distributions
    to figure out roughly how I should process data.
  prefs: []
  type: TYPE_NORMAL
- en: However, we need data validation to confirm our data follows business logic.
    For example, for data that contains product information, we need to validate that
    product price has no negative values, or when a user gives an email address, we
    need to assert the email address follows a recognised pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Neglecting data validation will have downstream impacts on analytics and modelling
    as poor data quality can lead to **increased bias, noise and inaccuracy.**
  prefs: []
  type: TYPE_NORMAL
- en: A recent example of poor data validation is [Zillow’s house pricing algorithm](https://insideainews.com/2021/12/13/the-500mm-debacle-at-zillow-offers-what-went-wrong-with-the-ai-models/)
    overvaluing 2/3 of the properties Zillow purchased, leading to a $500 million
    fall in Zillow property valuations in Q3 and Q4 of 2021 alone.
  prefs: []
  type: TYPE_NORMAL
- en: This shows that not only do you have to be conscious of whether your data meets
    validation criteria, but whether it reflects reality which in Zillow’s case it
    did not.
  prefs: []
  type: TYPE_NORMAL
- en: What is Pandera?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`[Pandera](https://pandera.readthedocs.io/en/stable/index.html)` is a Python
    package that provides a well-documented and flexible API that integrates with
    both `pandas` and `polars` — the two main Python data libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: We can use `pandera` to validate dataframe data types and properties using **business
    logic and domain expertise**.
  prefs: []
  type: TYPE_NORMAL
- en: Outline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This article will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: How to get started with `pandera`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to define a `pandera` data model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to validate data and handle errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Install Dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The data used for this article is fake football market data generated using
    Claude.ai.
  prefs: []
  type: TYPE_NORMAL
- en: Define the Validation Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The package allows you to define either a validation schema or a data validation
    model which closely resembles another great data validation package called `[Pydantic](https://docs.pydantic.dev/latest/)`.
  prefs: []
  type: TYPE_NORMAL
- en: For this exercise, we will focus on the validation model as it allows for **type
    hint integration** with our Python code, and I find it is a bit more readable
    than the validation schema. However, if you want to leverage the validation schema,
    the model has a method to transform it into a schema.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find information about both validation methods here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[DataFrameSchema](https://pandera.readthedocs.io/en/stable/dataframe_schemas.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DataFrameModel](https://pandera.readthedocs.io/en/stable/dataframe_models.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e3e1bc6302c113c4e0752e131a944a58.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Check the Data Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6e878c39c8dda42332ac60e5846fe134.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: We can use the data types to help define our data model.
  prefs: []
  type: TYPE_NORMAL
- en: Create Data Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Above, we define a schema by sub-classing `pa.DataFrameModel` which is done
    in the same way you sub-class `BaseModel` in `[Pydantic](https://docs.pydantic.dev/latest/)`.
    We then populated the schema with the corresponding **columns in our dataset**,
    providing the **data type expected** in each column, and **defining boundaries**
    using the `pa.Field` method.
  prefs: []
  type: TYPE_NORMAL
- en: '`Pandera` has great integration with `pandas` meaning you can use `pandas`
    data types (e.g. `pd.Timestamp`) as well as pandera data types (e.g. `pa.Int64`)
    to define each column.'
  prefs: []
  type: TYPE_NORMAL
- en: Reuse Fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To avoid repeating fields, we can reuse fields by using `partial` from the built-in
    Python library `functools.`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `partial` class creates a **new function that applies a specified subset
    of parameters** from the original function.
  prefs: []
  type: TYPE_NORMAL
- en: Above, we created two reusable fields for model variables that either contain
    null values or do not contain null values.
  prefs: []
  type: TYPE_NORMAL
- en: Our updated data model looks like this
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As partial creates a new function, we have to use brackets to call our new fields.
  prefs: []
  type: TYPE_NORMAL
- en: Validate Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the data model has been defined, we can use it to validate our data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: To validate the data, we use a **combination of type hints and decorators**.
    The `@pa.check_types` decorator denotes the data should be validated in line with
    the schema defined in the return type hint `DataFrame[PlayerSchema].`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Using a try-except block, we can **catch any errors** thrown when the data is
    loaded and validated. The result shows that the ‘height’ column **fails the less
    than or equal to test**, with one height labelled as 300cm which isn’t correct.
  prefs: []
  type: TYPE_NORMAL
- en: Clean data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many strategies to clean data, some of which I have detailed in my
    previous article.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@conalhenderson/master-pandas-to-build-modular-and-reusable-data-pipelines-1d12b003a423?source=post_page-----a9cd22c515a5--------------------------------)
    [## Master Pandas to Build Modular and Reusable Data Pipelines'
  prefs: []
  type: TYPE_NORMAL
- en: Build modular, reusable and efficient data pipelines by leveraging pandas to
    implement key data processing strategies.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@conalhenderson/master-pandas-to-build-modular-and-reusable-data-pipelines-1d12b003a423?source=post_page-----a9cd22c515a5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of simplicity, I will impute any values above 210cm with the median
    height for the population.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Another useful property of `pandera` is the schema can be used to **specify
    column names** you would like to analyse in pandas. For example, instead of explicitly
    labelling ‘height’ we can use `PlayerSchema.height`to **improve readability and
    encourage consistency** in our code.
  prefs: []
  type: TYPE_NORMAL
- en: Re-validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As our data has already been loaded in, we can adapt the previous function to
    take in a dataframe as an input, run the dataframe through the try-except block
    and evaluate using the decorator and type hint.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This time there are no errors meaning the dataframe is returned as the function
    output.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article has outlined why it is important to validate data to check it is
    c**onsistent with business logic and reflects the real world**, with the example
    of Zillow used to illustrate how poor data validation can have drastic consequences.
  prefs: []
  type: TYPE_NORMAL
- en: '`Pandera` was used to show how data validation can be easily integrated with
    `pandas` to quickly **validate a schema** that closely resembles `Pydantic` using
    **decorators** and **type hints**. It was also shown how `pa.Field` can be used
    to **set boundaries for your data** and when used with `partial`reusable fields
    can be created to increase code readability.'
  prefs: []
  type: TYPE_NORMAL
- en: I hope you found this article useful and thanks for reading. Reach out to me
    on [LinkedIn](https://www.linkedin.com/in/conal-henderson-4128631b6/) if you have
    any questions!
  prefs: []
  type: TYPE_NORMAL
