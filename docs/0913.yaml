- en: 'Overwriting in Python: Tricky. Dangerous. Powerful'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/overwriting-in-python-tricky-dangerous-powerful-04b12a9b1a7e?source=collection_archive---------3-----------------------#2024-04-10](https://towardsdatascience.com/overwriting-in-python-tricky-dangerous-powerful-04b12a9b1a7e?source=collection_archive---------3-----------------------#2024-04-10)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON PROGRAMMING
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although overwriting objects is a typical Python coding technique, it can lead
    to unexpected effects. You need to know how to use it to utilize its strengths.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nyggus?source=post_page---byline--04b12a9b1a7e--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page---byline--04b12a9b1a7e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--04b12a9b1a7e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--04b12a9b1a7e--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page---byline--04b12a9b1a7e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--04b12a9b1a7e--------------------------------)
    ·27 min read·Apr 10, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/24603710e2708d773ede8bac7ae78647.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Overwriting in Python can be dangerous: Don’t enter without reconsideration.
    Photo by [Raúl Nájera](https://unsplash.com/@reinf?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)'
  prefs: []
  type: TYPE_NORMAL
- en: I’ve overwritten plenty of various objects in Python. If you’ve spent your share
    of hours coding in Python, you have, too. This is because, at least in Python,
    overwriting objects lies at the core of the language.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve overwritten variables but also functions, classes, and class methods —
    even exceptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----04b12a9b1a7e--------------------------------)
    [## How to Overwrite AssertionError in Python and Use Custom Exceptions'
  prefs: []
  type: TYPE_NORMAL
- en: Python’s assert statement uses AssertionError. Know how to use a different exception
    instead
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: betterprogramming.pub](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----04b12a9b1a7e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: And indeed, we’ll differentiate between overwriting variables and callables.
    The difference between these two processes is actually quite significant, with
    the latter being more tricky. And even though our focus is on overwriting callables,
    as it’s a more advanced technique, we’ll also discuss overwriting variables, as
    it offers a good starting point for our discussion.
  prefs: []
  type: TYPE_NORMAL
