["```py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler, OrdinalEncoder, KBinsDiscretizer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom imblearn.pipeline import Pipeline\nfrom imblearn.over_sampling import SMOTE\n\n# Create dataset\ndataset_dict = {\n    'Outlook': ['sunny', 'sunny', 'overcast', 'rain', 'rain', 'rain', 'overcast', 'sunny', 'sunny', 'rain', 'sunny', 'overcast', 'overcast', 'rain', 'sunny', 'overcast', 'rain', 'sunny', 'sunny', 'rain', 'overcast', 'rain', 'sunny', 'overcast', 'sunny', 'overcast', 'rain', 'overcast'],\n    'Temperature': [85.0, 80.0, 83.0, 70.0, 68.0, 65.0, 64.0, 72.0, 69.0, 75.0, 75.0, 72.0, 81.0, 71.0, 81.0, 74.0, 76.0, 78.0, 82.0, 67.0, 85.0, 73.0, 88.0, 77.0, 79.0, 80.0, 66.0, 84.0],\n    'Humidity': [85.0, 90.0, 78.0, 96.0, 80.0, 70.0, 65.0, 95.0, 70.0, 80.0, 70.0, 90.0, 75.0, 80.0, 88.0, 92.0, 85.0, 75.0, 92.0, 90.0, 85.0, 88.0, 65.0, 70.0, 60.0, 95.0, 70.0, 78.0],\n    'Wind': [False, True, False, False, False, True, True, False, False, False, True, True, False, True, True, False, False, True, False, True, True, False, True, False, False, True, False, False],\n    'Play': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No', 'No', 'Yes', 'Yes', 'No', 'No', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No', 'Yes']\n}\ndf = pd.DataFrame(dataset_dict)\nX, y = df.drop('Play', axis=1), df['Play']\n\n# Preprocess AND apply SMOTE to ALL data first (causing leakage)\npreprocessor = ColumnTransformer(transformers=[\n    ('temp_transform', Pipeline([\n        ('imputer', SimpleImputer(strategy='mean')),\n        ('scaler', StandardScaler()),\n        ('discretizer', KBinsDiscretizer(n_bins=4, encode='ordinal'))\n    ]), ['Temperature']),\n    ('humid_transform', Pipeline([\n        ('imputer', SimpleImputer(strategy='mean')),\n        ('scaler', StandardScaler()),\n        ('discretizer', KBinsDiscretizer(n_bins=4, encode='ordinal'))\n    ]), ['Humidity']),\n    ('outlook_transform', OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1), \n     ['Outlook']),\n    ('wind_transform', Pipeline([\n        ('imputer', SimpleImputer(strategy='constant', fill_value=False)),\n        ('scaler', StandardScaler())\n    ]), ['Wind'])\n])\n\n# Transform all data and apply SMOTE before splitting (leakage!)\nX_transformed = preprocessor.fit_transform(X)\nsmote = SMOTE(random_state=42)\nX_resampled, y_resampled = smote.fit_resample(X_transformed, y)\n\n# Split the already transformed and resampled data\nX_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.5, shuffle=False)\n\n# Train a classifier\nclf = DecisionTreeClassifier(random_state=42)\nclf.fit(X_train, y_train)\n\nprint(f\"Testing Accuracy (with leakage): {accuracy_score(y_test, clf.predict(X_test)):.2%}\")\n```", "```py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.preprocessing import StandardScaler, OrdinalEncoder, KBinsDiscretizer\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom imblearn.pipeline import Pipeline\nfrom imblearn.over_sampling import SMOTE\n\n# Create dataset\ndataset_dict = {\n    'Outlook': ['sunny', 'sunny', 'overcast', 'rain', 'rain', 'rain', 'overcast', 'sunny', 'sunny', 'rain', 'sunny', 'overcast', 'overcast', 'rain', 'sunny', 'overcast', 'rain', 'sunny', 'sunny', 'rain', 'overcast', 'rain', 'sunny', 'overcast', 'sunny', 'overcast', 'rain', 'overcast'],\n    'Temperature': [85.0, 80.0, 83.0, 70.0, 68.0, 65.0, 64.0, 72.0, 69.0, 75.0, 75.0, 72.0, 81.0, 71.0, 81.0, 74.0, 76.0, 78.0, 82.0, 67.0, 85.0, 73.0, 88.0, 77.0, 79.0, 80.0, 66.0, 84.0],\n    'Humidity': [85.0, 90.0, 78.0, 96.0, 80.0, 70.0, 65.0, 95.0, 70.0, 80.0, 70.0, 90.0, 75.0, 80.0, 88.0, 92.0, 85.0, 75.0, 92.0, 90.0, 85.0, 88.0, 65.0, 70.0, 60.0, 95.0, 70.0, 78.0],\n    'Wind': [False, True, False, False, False, True, True, False, False, False, True, True, False, True, True, False, False, True, False, True, True, False, True, False, False, True, False, False],\n    'Play': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No', 'No', 'Yes', 'Yes', 'No', 'No', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No', 'Yes']\n}\ndf = pd.DataFrame(dataset_dict)\nX, y = df.drop('Play', axis=1), df['Play']\n\n# Split first (before any processing)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, shuffle=False)\n\n# Create pipeline with preprocessing, SMOTE, and classifier\npipeline = Pipeline([\n    ('preprocessor', ColumnTransformer(transformers=[\n        ('temp_transform', Pipeline([\n            ('imputer', SimpleImputer(strategy='mean')),\n            ('scaler', StandardScaler()),\n            ('discretizer', KBinsDiscretizer(n_bins=4, encode='ordinal'))\n        ]), ['Temperature']),\n        ('humid_transform', Pipeline([\n            ('imputer', SimpleImputer(strategy='mean')),\n            ('scaler', StandardScaler()),\n            ('discretizer', KBinsDiscretizer(n_bins=4, encode='ordinal'))\n        ]), ['Humidity']),\n        ('outlook_transform', OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1), \n         ['Outlook']),\n        ('wind_transform', Pipeline([\n            ('imputer', SimpleImputer(strategy='constant', fill_value=False)),\n            ('scaler', StandardScaler())\n        ]), ['Wind'])\n    ])),\n    ('smote', SMOTE(random_state=42)),\n    ('classifier', DecisionTreeClassifier(random_state=42))\n])\n\n# Fit pipeline on training data only\npipeline.fit(X_train, y_train)\n\nprint(f\"Training Accuracy: {accuracy_score(y_train, pipeline.predict(X_train)):.2%}\")\nprint(f\"Testing Accuracy: {accuracy_score(y_test, pipeline.predict(X_test)):.2%}\")\n```"]