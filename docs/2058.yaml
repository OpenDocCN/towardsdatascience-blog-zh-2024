- en: DBSCAN, Explained in 5 Minutes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/dbscan-explained-in-5-minutes-133f6a9766e4?source=collection_archive---------4-----------------------#2024-08-23](https://towardsdatascience.com/dbscan-explained-in-5-minutes-133f6a9766e4?source=collection_archive---------4-----------------------#2024-08-23)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Fastest implementation in pythonüêç
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@alexroz?source=post_page---byline--133f6a9766e4--------------------------------)[![Aleksei
    Rozanov](../Images/748b69bfaccf39c9aa568a9e6f41eec3.png)](https://medium.com/@alexroz?source=post_page---byline--133f6a9766e4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--133f6a9766e4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--133f6a9766e4--------------------------------)
    [Aleksei Rozanov](https://medium.com/@alexroz?source=post_page---byline--133f6a9766e4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--133f6a9766e4--------------------------------)
    ¬∑5 min read¬∑Aug 23, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e034fb66930bd44b034406ac41f56803.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: What‚Äôs **DBSCAN** [1]? How to build it in python? There are many articles covering
    this topic, but I think the algorithm itself is so simple and intuitive that it‚Äôs
    possible to explain its idea in just *5 minutes*, so let‚Äôs try to do that.
  prefs: []
  type: TYPE_NORMAL
- en: DBSCAN = Density-Based Spatial Clustering of Applications with Noise
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What does it mean?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The algorithm searches for clusters inside the data based on **the spatial distance
    between objects**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The algorithm can **identify outliers** (noise).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do you need DBSCAN at all???
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Extract a new feature.** If the dataset you‚Äôre dealing with is large, it
    might be helpful to find obvious clusters inside the data and work with each cluster
    separately (train different models for different clusters).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compress the data.** Often we have to deal with millions of rows, which is
    expensive computationally and time consuming. Clustering the data and then keeping
    only X% from each cluster *might save your wicked data science soul*. Therefore,
    you‚Äôll **keep the balance** inside the dataset, but **reduce its size**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Novelty detection.** It‚Äôs been mentioned before that DBSCAN detects noise,
    but the noise might be a previously unknown feature of the dataset, which you
    can preserve and use in modeling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then you may say: but there is the super-reliable and effective **k-means**
    algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/semantic-segmentation-of-remote-sensing-imagery-using-k-means-e4c165d9218e?source=post_page-----133f6a9766e4--------------------------------)
    [## Semantic Segmentation of Remote Sensing Imagery using k-Means'
  prefs: []
  type: TYPE_NORMAL
- en: From scratch in pythonüêç
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/semantic-segmentation-of-remote-sensing-imagery-using-k-means-e4c165d9218e?source=post_page-----133f6a9766e4--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Yes, but the sweetest part about DBSCAN is that it overcomes the drawbacks of
    k-means, and you don‚Äôt need to specify the number of clusters. **DBSCAN detects
    clusters for you!**
  prefs: []
  type: TYPE_NORMAL
- en: 'DBSCAN has two components defined by a user: vicinity, or radius (**ùúÄ**), and
    the number of neighbors (**N**).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a dataset consisting of some objects, the algorithm is based on the following
    ideas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core objets**. An object is called a core object if within distance **ùúÄ**
    it has *at least* **N** other objects.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An non-core object lying within **ùúÄ**-vicinity of a core-point is called a **border
    object**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A core object forms a **cluster** with all the core and border objects within
    **ùúÄ**-vicinity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If an object is neither core or border, it‚Äôs called **noise (outlier)**. It
    doesn‚Äôt belong to any cluster.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To implement DBSCAN it‚Äôs necessary to create a distance function. In this article
    we will be using the Euclidean distance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2fd5387f00392750e94306d81375c782.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: 'The pseudo-code for our algorithm looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/511de6d35f92eb58fad5b01d3ea2ee7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [2].
  prefs: []
  type: TYPE_NORMAL
- en: '**As always the code of this article you can find on my** [**GitHub**](https://github.com/alexxxroz/Medium/blob/main/DBSCAN.ipynb)**.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let‚Äôs begin with the distance function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let‚Äôs build the body of the algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Done!
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs check the correctness of our implementation and compare it with **sklearn**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs generate some synthetic data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f27953128084bd76852f0b2e754604f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs apply our implementation and visualize the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f10fec3abef911cd001c387b1dee55a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: 'For sklearn implementation we got the same clusters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/727430787a45f9542b63737f659ca610.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: That‚Äôs it, they are identical. 5 minutes and we‚Äôre done! When you try DBSCANning
    yourself, don‚Äôt forget to tune epsilon and the number of neighbors since they
    highlt influence the final results.
  prefs: []
  type: TYPE_NORMAL
- en: ===========================================
  prefs: []
  type: TYPE_NORMAL
- en: '**Reference:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[1] Ester, M., Kriegel, H. P., Sander, J., & Xu, X. (1996, August). Density-based
    spatial clustering of applications with noise. In *Int. Conf. knowledge discovery
    and data mining* (Vol. 240, ‚Ññ6).'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Yang, Yang, et al. ‚ÄúAn efficient DBSCAN optimized by arithmetic optimization
    algorithm with opposition-based learning.‚Äù *The journal of supercomputing* 78.18
    (2022): 19566‚Äì19604.'
  prefs: []
  type: TYPE_NORMAL
- en: ===========================================
  prefs: []
  type: TYPE_NORMAL
- en: '*All my publications on Medium are free and open-access, that‚Äôs why I‚Äôd really
    appreciate if you followed me here!*'
  prefs: []
  type: TYPE_NORMAL
- en: P.s. I‚Äôm extremely passionate about (Geo)Data Science, ML/AI and Climate Change.
    So if you want to work together on some project pls contact me in [LinkedIn](https://www.linkedin.com/in/alexxxroz/).
  prefs: []
  type: TYPE_NORMAL
- en: üõ∞Ô∏èFollow for moreüõ∞Ô∏è
  prefs: []
  type: TYPE_NORMAL
