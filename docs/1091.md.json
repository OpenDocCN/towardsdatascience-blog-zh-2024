["```py\nfrom sklearn.datasets import load_diabetes\nfrom pandas import DataFrame\nimport pandas as pd\n\ndiabetes = load_diabetes()\nX_raw, y_raw = diabetes.data, diabetes.target\nX = DataFrame(X_raw, columns=diabetes.feature_names)\ny = pd.Series(y_raw)\ny.name = \"progression\"\n\npdf = pd.concat([X,y], axis=1)\n\n# Rename columns\npdf = pdf.rename(columns= {\"bp\": \"blood_pressure\",\n                           \"s1\": \"total_cholestorol\", \n                           \"s2\": \"LDL\",\n                           \"s3\": \"HDL\",\n                           \"s4\": \"total_cholestorol/HDL\",\n                           \"s5\": \"triglycerides\",\n                           \"s6\": \"blood_sugar\"})\n```", "```py\n#Plot blood_sugar vs progression with a regression line\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.lmplot(x=\"blood_sugar\", y=\"progression\", data=pdf)\nplt.show()\n```", "```py\n# same for BMI\nsns.lmplot(x=\"bmi\", y=\"progression\", data=pdf)\n```", "```py\nfrom sklearn.model_selection import train_test_split\nX = pdf.drop(\"progression\", axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n\nimport lightgbm\nimport shap\n\ndef fit_lightgbm(x_train, y_train, x_test, y_test):\n    params = {\n        \"task\": \"train\",\n        \"boosting_type\": \"gbdt\",\n        \"objective\": \"rmse\",\n        \"metric\": [\"l2\", \"rmse\"],\n        \"learning_rate\": 0.005,\n        \"num_leaves\": 128,\n        \"max_bin\": 512,\n    } # basic parameters as a starting point\n\n    model = lightgbm.sklearn.LGBMRegressor(**params)\n    fitted_model = model.fit(x_train, y_train)\n    y_pred = pd.Series(fitted_model.predict(x_test))\n\n    return y_train, y_test, y_pred, fitted_model\n\ny_train, y_test, y_pred, fitted_model = fit_lightgbm(\n        X_train, y_train, X_test, y_test\n    )\n```", "```py\n# calculate feature importance of LightGBM fitted_model using plot_importance\nlightgbm.plot_importance(fitted_model, importance_type=\"gain\", \n                         figsize=(20, 10), grid=False, color=\"grey\", \n                         precision=2)\n```", "```py\n# plot shap values, include intercept in the shap values\nshap_values = shap.TreeExplainer(fitted_model).shap_values(X_train)\nshap.summary_plot(shap_values, X_train, plot_type=\"bar\", color=\"grey\")\n```", "```py\n# plot shap values for a specific data point / patient\nshap.initjs()\nshap.force_plot(\n    shap.TreeExplainer(fitted_model).expected_value,\n    shap_values[0],\n    X_train.iloc[0],\n    matplotlib=True,\n)\n```"]