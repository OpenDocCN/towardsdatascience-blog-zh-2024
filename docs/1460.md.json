["```py\nSELECT SUM(value) AS total FROM myTable\n```", "```py\nSELECT *, SUM(value) OVER() FROM myTable\n-- Note that the window function is defined at column-level\n-- in the query\n```", "```py\nSELECT depto, sum(value) FROM myTable GROUP BY depto\n```", "```py\nSELECT *, SUM(value) OVER(PARTITION BY depto) FROM myTable\n```", "```py\nSELECT \n  year, height, \n  LAG(height) OVER (ORDER BY year) AS height_last_year\nFROM myTable\n```", "```py\nSELECT \n    LAG(height,  2) OVER (ORDER BY year) as height_two_years_ago,\n    LAG(height,  3) OVER (ORDER BY year) as height_three_years_ago,\n    LEAD(height)    OVER (ORDER BY year) as height_next_year\nFROM ...\n```", "```py\nSELECT \n    100*height/(LAG(height) OVER (ORDER BY year)) \n    AS \"annual_growth_%\"\nFROM ...\n```", "```py\nSELECT 1-height/LAG(height) OVER (ORDER BY year PARTITION BY name) ...\n```", "```py\nSELECT row_number() OVER(ORDER BY score)\n```", "```py\nSELECT\n( n_cases + LAG(n_cases, 1) + LAG(n_cases, 2) )/3\nOVER (ORDER BY date_reference)\n```", "```py\nSELECT\nAVG(n_cases)\nOVER (\n\tORDER BY date_reference\n\tROWS BETWEEN 2 PRECEDING AND CURRENT ROW\t\n)\n```", "```py\nAVG(n_cases)\nOVER (\n\tORDER BY date_reference\n\tROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING\n)\n```", "```py\nROWS BETWEEN UNBOUDED PRECEDING AND CURRENT ROW\n-- ALL THE PREVIOUS ROWS + THE CURRENT ROW\n```", "```py\nSELECT * FROM\nWHERE SUM() OVER() > 10 -- This is not possible in postgres\n```", "```py\nSELECT *\n  FROM (\n   SELECT\n   ROW_NUMBER() OVER (PARTITION BY id) as row_number\n  )\nWHERE row_number = 1\n```", "```py\nSELECT\n    *\nFROM\n(\n  SELECT \n    name, \n    row_number() OVER (PARTITION BY id ORDER BY DATE DESC) AS row_number\n  FROM myTable\n) AS subquery\nWHERE row_number = 1\n```"]