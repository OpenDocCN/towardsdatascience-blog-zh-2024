- en: Practical Introduction to Polars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/practical-introduction-to-polars-8d9cdca350f1?source=collection_archive---------2-----------------------#2024-09-10](https://towardsdatascience.com/practical-introduction-to-polars-8d9cdca350f1?source=collection_archive---------2-----------------------#2024-09-10)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hands-on guide with side-by-side examples in Pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@npotapov?source=post_page---byline--8d9cdca350f1--------------------------------)[![Nikolai
    Potapov](../Images/d2ac4b8c12c0cf70df05b8908b875a19.png)](https://medium.com/@npotapov?source=post_page---byline--8d9cdca350f1--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--8d9cdca350f1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--8d9cdca350f1--------------------------------)
    [Nikolai Potapov](https://medium.com/@npotapov?source=post_page---byline--8d9cdca350f1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--8d9cdca350f1--------------------------------)
    ·14 min read·Sep 10, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/07f4634c04141034295192ff239a64fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Image created with AI by Dall-E
  prefs: []
  type: TYPE_NORMAL
- en: This article is not about comparing Polars with Pandas or highlighting their
    differences. It’s a story about how adding a new tool can be beneficial not only
    for data science professionals but also for others who work with data. I like
    Polars because it is multithreaded, providing strong performance out-of-the-box,
    and it supports Lazy evaluation with query optimization capabilities. This tool
    will undoubtedly enhance your data skills and open up new opportunities.
  prefs: []
  type: TYPE_NORMAL
- en: Although Polars and Pandas are different libraries, they share similarities
    in their APIs. Drawing parallels between them can make it easier for those familiar
    with the Pandas API to start using Polars. Even if you’re not familiar with Pandas
    and want to start learning Polars, it will still be incredibly useful and rewarding.
  prefs: []
  type: TYPE_NORMAL
- en: We will look at the most common actions that, in my experience, are most often
    used for data analysis. To illustrate the process of using Polars, I will consider
    an abstract task with reproducible data, so you can follow all the steps on your
    computer.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that we have data from three online stores, where we register user actions,
    such as viewing and purchasing. Let’s assume that at any given time, only one
    action of each type can occur for each online store, and in case of a transaction
    error, our data might be missing the product identifier or its quantity. Additionally,
    for our task, we’ll need a product catalog with prices for each item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s formulate the main task: to calculate a summary table with the total
    purchase for each online store.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I will break down this task into the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Data preparation and DataFrame creation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary statistics of the DataFrame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Retrieving the first five records.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Renaming columns.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changing column types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Filling missing values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Removing missing values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Removing duplicate records.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Filtering data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting the required columns.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Grouping data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Merging data with another DataFrame.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculating a new column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a Pivot table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Preparation and DataFrame Creation**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have the following data:'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnlineStore` — indicates the store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`product` — stores the product ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Action type` — the type of action (either a view or a purchase).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quantity` — the amount of the purchased or viewed product.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Action_time` — the timestamp for the action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Requirements:**'
  prefs: []
  type: TYPE_NORMAL
- en: '*polars==1.6.0'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: pandas==2.0.0*
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For product catalog, which in our case include only `product_id` and its price
    (`price`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The data is ready. Now let’s create DataFrames using these data with Pandas
    and Polars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Since we have `user_actions_df` and `corrupted_df`, let’s concatenate them into
    a single DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this way, we have easily created DataFrames for further work.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, each method has its own parameters, so it’s best to have the documentation
    handy to avoid confusion and use them appropriately.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summary Statistics of the DataFrame
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After loading or preparing data, it’s useful to quickly explore the resulting
    dataset. For summary statistics, the method name remains the same, but the results
    may differ:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As you can notice, Pandas calculates statistics differently for various data
    types and provides `unique` values for all columns. Polars, on the other hand,
    calculates the `null_count` value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, in the [Polars documentation](https://docs.pola.rs/api/python/dev/reference/dataframe/api/polars.DataFrame.describe.html#polars.DataFrame.describe),
    it is stated:'
  prefs: []
  type: TYPE_NORMAL
- en: We do not guarantee the output of `describe` to be stable. It will show statistics
    that we deem informative, and may be updated in the future. Using `describe` programmatically
    (versus interactive exploration) is not recommended for this reason.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Retrieving the First Five Records**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When encountering data for the first time, we always want to explore it. Beyond
    obtaining summary statistics, it’s also important to see the actual records it
    contains. To do this, we often look at the first five records as a sample.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Polars has a useful `glimpse()` function that provides a dense preview of the
    DataFrame. It not only returns the first 10 records (or any number you specify
    using the `max_items_per_column` parameter) but also shows data types and record
    counts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Renaming Columns**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After exploring the data, it is often necessary to edit it for further use.
    If the column names are not satisfactory or if your company has its own naming
    conventions, you can easily rename them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Changing Column Types**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working with data, optimizing their processing is often a priority, and
    data types are no exception. Choosing the right type not only unlocks available
    functions but also saves memory. In our example, I will change the column type
    of `quantity` from `float` to `int`. In Pandas, you would use the `astype()` method,
    while in Polars, you use the `cast()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Polars has a special method `estimated_size()` that returns an estimate of
    the total (heap) allocated size of the DataFrame. For example:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Although the method names for changing types differ, SQL enthusiasts will appreciate
    the ease of transition.
  prefs: []
  type: TYPE_NORMAL
- en: Filling **Missing Values**
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In real projects, data is rarely perfect, and we often discuss with managers,
    analysts, and other systems how to interpret data behavior. During data preparation,
    I specifically generated `corrupted_data` to introduce some chaos into the data.
    Handling missing values could easily be the subject of an entire book.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several strategies for filling in missing values, and the choice
    of method depends on the task: sometimes filling missing values with zeros is
    sufficient, while other times the mean value may be used. In Polars, the `fill_null()`
    method can be applied both to the DataFrame and to specific columns. To add a
    new column or replace values in an existing one, the `with_columns()` method is
    also used.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, I will fill missing values in the `quantity` column with 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In Polars, you can use various strategies for filling missing values in the
    data, such as: `{None, ''forward'', ''backward'', ''min'', ''max'', ''mean'',
    ''zero'', ''one''}`. The names of these strategies are self-explanatory, so we
    won’t delve into their details.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It’s also worth noting that for filling `NaN` values in floating-point columns,
    you should use the `fill_nan()` method, which does not involve strategies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Removing Missing Values**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Not all missing values can be filled, so those that cannot be correctly filled
    and used in further calculations are best removed. In our case, this applies to
    the `product_id` column, as we cannot compute the final result without this identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove rows with missing values in Pandas and Polars, use the following
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: It’s also worth noting that to remove `NaN` values in floating-point columns,
    you should use the `drop_nans()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '**Removing Duplicate Records**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The simplest case of duplicate records occurs when all values of one record
    are identical to another. In our case, duplicates might arise if the same action
    is recorded multiple times for the same action type in the same online store at
    a single point in time. I will keep only the most recent value in case duplicates
    are found.
  prefs: []
  type: TYPE_NORMAL
- en: To remove duplicate records in Pandas, use the `drop_duplicates()` method, and
    in Polars, the `unique()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '**Filtering Data**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the data cleaning phase, we need to filter the relevant data for future
    calculations. In Polars, this is done using the method with a quite descriptive
    name, `filter()`.
  prefs: []
  type: TYPE_NORMAL
- en: Rows where the filter does not evaluate to True are discarded, including nulls.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '**Selecting Required Columns**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After filtering the data, you may need to retain only the columns relevant for
    further analysis. In Polars, this is achieved using the `select()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '**Grouping Data**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After preparing the data, we can aggregate it to get the sum of `quantity` for
    each online store and product. I will also retain `action_type` for further steps.
    We use the `group_by()` method in Polars, which is similar to the `groupby()`
    method in Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '**Joining Data with Another DataFrame**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To calculate the total purchases, we need to join our data with the price catalog.
    In Pandas, we have two methods for this, `join()` and `merge()`, which differ
    in their specifics and functionality. In Polars, we use only the `join()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'In Polars, the `how` parameter supports the following values: `{''inner'',
    ''left'', ''right'', ''full'', ''semi'', ''anti'', ''cross''}` .'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Calculating a New Column**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To calculate a new column or modify an existing column, Polars uses the `with_columns()`
    method. To set an alias for a column, you can use `alias()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can calculate a new column directly within the `select()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '**Creating a Pivot Table**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our final step is to create a pivot table. We have already calculated the total
    sales for each product, and now we will easily calculate the total sales for each
    online store. In Pandas, we use the `pivot_table()` method, which allows for the
    application of aggregate functions. In Polars, we use the `pivot()` method to
    create the pivot table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'DeprecationWarning: The argument `columns` for pl.DataFrame.pivot` is deprecated.
    It has been renamed to `on`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here we are, concluding our little journey. As we can see, the results for both
    Pandas and Polars match. Everyone who made it to this point is great and incredibly
    hardworking — you will succeed!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, we explored Polars using practical examples and comparisons
    with Pandas. I demonstrated how to handle data preparation, descriptive statistics,
    missing values, duplicates, filtering, column selection, grouping, merging, and
    pivot tables. By showcasing these tasks with both Pandas and Polars, I highlighted
    the ease of using Polars and transitioning to it from Pandas. This guide serves
    as a practical introduction to leveraging Polars for efficient data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recommended read:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Improving Code Quality During Data Transformation with Polars](https://medium.com/towards-data-science/improving-code-quality-during-data-transformation-with-polars-92997e67c8a9)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thanks for Reading!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you enjoyed this article and want to support my work, the best way is to
    follow me on [Medium](https://medium.com/@npotapov). Let’s connect on [LinkedIn](https://www.linkedin.com/in/nikolai-potapov-67269524b/)
    if you’re also interested in working with data like I am. Your claps are greatly
    appreciated — they help me know how useful this post was for you.
  prefs: []
  type: TYPE_NORMAL
