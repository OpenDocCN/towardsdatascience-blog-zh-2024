- en: Create an Agent with OpenAI Function Calling Capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/create-an-agent-with-openai-function-calling-capabilities-ad52122c3d12?source=collection_archive---------3-----------------------#2024-03-31](https://towardsdatascience.com/create-an-agent-with-openai-function-calling-capabilities-ad52122c3d12?source=collection_archive---------3-----------------------#2024-03-31)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: OpenAI Function Calling in 2024
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@bianbianzhu123?source=post_page---byline--ad52122c3d12--------------------------------)[![Tianyi
    Li](../Images/40fce472f42c650daa1433641bf732df.png)](https://medium.com/@bianbianzhu123?source=post_page---byline--ad52122c3d12--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--ad52122c3d12--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--ad52122c3d12--------------------------------)
    [Tianyi Li](https://medium.com/@bianbianzhu123?source=post_page---byline--ad52122c3d12--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--ad52122c3d12--------------------------------)
    ·15 min read·Mar 31, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c3386f14f9203c4c638eb602716bc548.png)'
  prefs: []
  type: TYPE_IMG
- en: Image generated by [DALL·E 3](https://openai.com/dall-e-3)
  prefs: []
  type: TYPE_NORMAL
- en: '**Authors**: [Tianyi Li](https://medium.com/u/4092d7367010?source=post_page---user_mention--ad52122c3d12--------------------------------),
    [Selina Li](https://medium.com/u/7b9ea39b0d79?source=post_page---user_mention--ad52122c3d12--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: · [Introduction](#bd50)
  prefs: []
  type: TYPE_NORMAL
- en: · [What AI can do](#8727)
  prefs: []
  type: TYPE_NORMAL
- en: · [Current challenges](#77ee)
  prefs: []
  type: TYPE_NORMAL
- en: · [How it works](#d52b)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Four key concepts that may be confusing at first:](#cfee)
  prefs: []
  type: TYPE_NORMAL
- en: · [Step-by-Step Guide to Building an Agent](#98f6)
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Business Case: Development of a Farm Trip Assistant Agent](#4c18)'
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Application Architecture:](#6729)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Pre-requisites:](#6df5)
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Step 1: Prepare to call the model:](#b04f)'
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Step 2: Define the tools](#d998)'
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Step 3: Call the model with the messages and the tools](#0df9)'
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Step 4: Handling Model Responses](#5cd8)'
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Step 5: Execute the function and call the model again](#de43)'
  prefs: []
  type: TYPE_NORMAL
- en: '∘ [Step 6: Summarize the results back to the user](#0f4e)'
  prefs: []
  type: TYPE_NORMAL
- en: · [Conclusion](#dbba)
  prefs: []
  type: TYPE_NORMAL
- en: · [Enjoyed This Story?](#1c90)
  prefs: []
  type: TYPE_NORMAL
- en: As we navigate through 2024, the rush to develop AI-powered applications is
    unmistakable, thanks to their clear benefits.
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, creating an app involves writing separate functions or services
    for each feature, like user login or booking a ticket. This process often requires
    users to fill out forms, ticking boxes and entering data, which must then pass
    through various validation checks to ensure that the data is usable. This method,
    especially when involving multiple steps, significantly detracts from the user
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider planning a one-day farm trip for Easter. You’re undecided about the
    date but have specific requirements: the farm must be within a two-hour drive,
    offer certain activities, have cloudy weather (as your child is allergic to the
    sun), and you need to consult your partner before making a decision. The traditional
    approach would involve navigating through multiple pages, steps, and forms — a
    snapshot of the complexities in daily decision-making. This complexity is a key
    reason why, despite the prevalence of booking websites, many still prefer the
    personalized service of a travel agent for planning trips.'
  prefs: []
  type: TYPE_NORMAL
- en: What AI can do
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AI introduces significant improvements by:'
  prefs: []
  type: TYPE_NORMAL
- en: Providing a conversational experience, making interactions feel more natural
    and user-friendly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consolidating app features into a single entry point. Unlike traditional apps,
    where different pages and forms are needed for different functions, AI can interpret
    user inputs and seamlessly select and execute the necessary functions, even handling
    complex requests in a step-by-step manner.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'However, a major challenge remains: dealing with the unstructured text data
    returned by AI models.'
  prefs: []
  type: TYPE_NORMAL
- en: Traditionally, extracting structured data (like JSON) from model outputs required
    complex prompt engineering or regular expressions (RegEx), which can be error-prone
    and inconsistent due to the unpredictable nature of AI models and the variability
    of user inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To address this, OpenAI has rolled out two innovative features: `Json mode`
    and `Function calling`. This article will delve into the Function calling feature,
    illustrating how it streamlines the extraction of structured data from model outputs,
    complemented by TypeScript code examples.'
  prefs: []
  type: TYPE_NORMAL
- en: Discover all the code examples in this [Github repository](https://github.com/bianbianzhu/openai-function-calling)
    and consider giving it a star if you find it useful.
  prefs: []
  type: TYPE_NORMAL
- en: Current challenges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Structured Data Handling: Previously, developers relied on RegEx or intricate
    prompt engineering to parse text data, a process fraught with complexity and errors.
    Function Calling simplifies this by allowing models to process user-defined functions,
    generating structured outputs like JSON without the need for cumbersome techniques.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consistency and Predictability: Function Calling ensures consistent and predictable
    outcomes from AI models by enabling the definition of custom functions for precise
    information extraction. This guarantees structured and reliable outputs across
    varied inputs, essential for applications requiring dependable data extraction
    for text summarization, document analysis, and integrations with external APIs
    or databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to [OpenAI’s documentation](https://platform.openai.com/docs/guides/function-calling),
    the basic sequence of steps for function calling is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Call the model with the user query and a set of functions defined in the functions(tools)
    parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The model can choose to call one or more functions; if so, the content will
    be a stringified JSON object adhering to your custom schema (note: the model may
    hallucinate parameters).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Parse the string into JSON in your code, and call your function with the provided
    arguments if they exist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the model again by appending the function response as a new message, and
    let the model summarize the results back to the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/2f7e826c238feb17d00a04b394e00016.png)'
  prefs: []
  type: TYPE_IMG
- en: A sequence diagram of how OpenAI function calling works
  prefs: []
  type: TYPE_NORMAL
- en: 'Four key concepts that may be confusing at first:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Tools**: The term `Functions` is depreciated and replaced by `Tools`. Currently,
    `Tools` exclusively support what is essentially the function type. Essentially,
    this change is in name and syntax'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Tools Description**: When we say you’re passing “tools” to the model, think
    of it as providing a list or menu of what the model can do, not the actual functions.
    It’s like telling the model, “Here are the actions you can choose to perform,”
    without giving it the direct means to do so.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Function Call Returns**: When the model suggests a function call, it’s essentially
    saying, “I think we should use this tool and here’s what we need for it,” by naming
    the function and specifying any required information (`arguments`). However, at
    this point, it''s just a suggestion; the actual action is carried out in your
    application.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Using Responses to Inform the Next Steps**: Once a function is actually executed
    in your application and you have the results, you feed these results back to the
    model as part of a new prompt. This helps the model understand what happened and
    guides it in making the next move or response.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Step-by-Step Guide to Building an Agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Business Case: Development of a Farm Trip Assistant Agent'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We aim to develop a farm trip assistant agent designed to enhance the user
    experience in planning farm visits. This digital assistant will offer comprehensive
    support by:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying top farm destinations tailored to user location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing detailed information on available activities at each farm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facilitating the booking of selected activities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offering a straightforward process for filing complaints, if necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Application Architecture:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This flowchart shows the architecture of the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/41b3331d39fbdf6b9b01c9b61286959c.png)'
  prefs: []
  type: TYPE_IMG
- en: The flowchart of the agent
  prefs: []
  type: TYPE_NORMAL
- en: 'Pre-requisites:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**OpenAI API key**: You can obtain this from the OpenAI platform.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Prepare to call the model:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To initiate a conversation, begin with a system message and a user prompt for
    the task:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `messages` array to keep track of the conversation history.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include a system message in the `messages` array to to establish the assistant's
    role and context.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Welcome the users with a greeting message and prompt them to specify their task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the user prompt to the `messages` array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As my personal preference, all the prompts are stored in objects for easy access
    and modification. Please refer to the following code snippets for all the prompts
    used in the application. Feel free to adopt or modify this approach as suits you.
  prefs: []
  type: TYPE_NORMAL
- en: '**StaticPrompts**: Static messages that are used throughout the conversation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**UserPrompts**: User messages that are generated based on user input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**SystemPrompts**: System messages that are generated based on system context.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**FunctionPrompts**: Function messages that are basically the return values
    of the functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 2: Define the tools'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier, `tools` are essentially the descriptions of functions
    that the model can call. In this case, we define four tools to meet the requirements
    of the farm trip assistant agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_farms`: Retrieves a list of farm destinations based on user''s location.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`get_activities_per_farm`: Provides detailed information on activities available
    at a specific farm.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`book_activity`: Facilitates the booking of a selected activity.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`file_complaint`: Offers a straightforward process for filing complaints.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code snippet demonstrates how these tools are defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Understanding Function Descriptions**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Function descriptions require the following keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: Identifies the function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`description`: Provides a summary of what the function does.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parameters`: Defines the function''s parameters, including their `type`, `description`,
    and whether they are `required`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: Specifies the parameter type, typically an object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`properties`: Details each parameter, including its type and description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`required`: Lists the parameters that are essential for the function to operate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adding a New Function**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To introduce a new function, proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Extend DescribedFunctionName with a new enum, such as `DoNewThings`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a Props type for the parameters, e.g., `DoNewThingsProps`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert a new entry in the *FunctionDescriptions* object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the new function in the function directory, naming it after the enum
    value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Step 3: Call the model with the messages and the tools'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the messages and tools set up, we’re ready to call the model using them.
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that as of March 2024, function calling is supported
    only by the `gpt-3.5-turbo-0125` and `gpt-4-turbo-preview` models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`**tool_choice**` **Options**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The `tool_choice` option controls the model''s approach to function calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Specific Function`: To specify a particular function, set `tool_choice` to
    an object with `type: "function"` and include the function''s name and details.
    For instance, `tool_choice: { type: "function", function: { name: "get_farms"}}`
    tells the model to call the `get_farms` function regardless of the context. Even
    a simple user prompt like "Hi." will trigger this function call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`No Function`: To have the model generate a response without any function calls,
    use `tool_choice: "none"`. This option prompts the model to rely solely on the
    input messages for generating its response.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Automatic Selection`: The default setting, `tool_choice: "auto"`, lets the
    model autonomously decide if and which function to call, based on the conversation''s
    context. This flexibility is beneficial for dynamic decision-making regarding
    function calls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 4: Handling Model Responses'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The model’s responses fall into two primary categories, with a potential for
    errors that necessitate a fallback message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1d5be5b5218c97887adba782d1ee01a1.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Function Call Request**: The model indicates a desire to call function(s).
    This is the true potential of function calling. The model intelligently selects
    which function(s) to execute based on context and user queries. For instance,
    if the user asks for farm recommendations, the model may suggest calling the `get_farms`
    function.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: But it doesn’t just stop there, the model also analyzes the user input to determine
    if it contains the necessary information (`arguments`) for the function call.
    If not, the model would prompt the user for the missing details.
  prefs: []
  type: TYPE_NORMAL
- en: Once it has gathered all required information (`arguments`), the model returns
    a JSON object detailing the function name and arguments. This structured response
    can be effortlessly translated into a JavaScript object within our application,
    enabling us to invoke the specified function seamlessly, thereby ensuring a fluid
    user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the model can choose to call multiple functions, either simultaneously
    or in sequence, each requiring specific details. Managing this within the application
    is crucial for smooth operation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example of model’s response:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Plain Text Response**: The model provides a direct text response. This
    is the standard output we’re accustomed to from AI models, offering straightforward
    answers to user queries. Simply returning the text content suffices for these
    responses.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example of model’s response:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The key distinction is the presence of a `tool_calls` key for `function calls`.
    If `tool_calls` is present, the model is requesting to execute a function; otherwise,
    it delivers a straightforward text response.
  prefs: []
  type: TYPE_NORMAL
- en: 'To process these responses, consider the following approach based on the response
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `arguments` extracted from the function calls are then used to execute the
    actual functions in the application, while the text content helps to carry on
    the conversation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is an **if-else block** illustrating how this process unfolds:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 5: Execute the function and call the model again'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the model requests a function call, we execute that function in our application
    and then update the model with the new messages. This keeps the model informed
    about the function’s result, allowing it to give a pertinent reply to the user.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining the correct sequence of function executions is crucial, especially
    when the model chooses to execute multiple functions in a sequence to complete
    a task. Using a `for` loop instead of `Promise.all` preserves the execution order,
    essential for a successful workflow. However, if the functions are independent
    and can be executed in parallel, consider custom optimizations to enhance performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how to execute the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s how to update the messages array with the function response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Example of the functions that can be called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Example of the `tool` message with function response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 6: Summarize the results back to the user'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After running the functions and updating the message array, we re-engage the
    model with these updated messages to brief the user on the outcomes. This involves
    repeatedly invoking the ***startChat*** function via a loop.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid endless looping, it’s crucial to monitor for user inputs signaling
    the end of the conversation, like “Goodbye” or “End,” ensuring the loop terminates
    appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenAI’s function calling represents a major advancement in AI, allowing models
    to perform custom functions in response to user queries. This feature simplifies
    obtaining structured data from outputs, improving user interaction and enabling
    more complex exchanges.
  prefs: []
  type: TYPE_NORMAL
- en: Enjoyed This Story?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Selina Li** ([Selina Li](https://medium.com/u/7b9ea39b0d79), [LinkedIn](https://www.linkedin.com/in/selina-zhuohang-li-3b7355120/))
    is a Principal Data Engineer working at [Officeworks](https://www.officeworks.com.au/)
    in Melbourne Australia. Selina is passionate about AI/ML, data engineering and
    investment.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jason Li** ([Tianyi Li](https://medium.com/u/4092d7367010), [LinkedIn](https://www.linkedin.com/in/tianyi-li-jason/))
    is a Full-stack Developer working at [Mindset Health](https://www.mindsethealth.com/)
    in Melbourne Australia. Jason is passionate about AI, front-end development and
    space related technologies.'
  prefs: []
  type: TYPE_NORMAL
- en: Selina and Jason would love to explore technologies to help people achieve their
    goals.
  prefs: []
  type: TYPE_NORMAL
- en: '*Unless otherwise noted, all images are by the authors.*'
  prefs: []
  type: TYPE_NORMAL
