["```py\n#Qiskit (Python Basd)\n#Create a quantum circuit with two qubits\nqc = QuantumCircuit(2)\n\n#Apply a Hadamard gate on the first qubit\nqc.h(0)\n\n#Apply a CNOT gate with the first qubit as control and the second qubit as target\nqc.cx(0, 1)\n```", "```py\n//Q# (C#/F# based)\nnamespace BellState{\n  operation PrepareBellState() : Unit{\n    using (qubits = Qubit[2]) {\n      //Apply a Hadamard gate on the first Qubit\n      H(qubits[0]);\n      //Apply a CNOT gate with the first qubit as control and the second qbit as target\n      CNOT(qubits[0], qubits[1]);\n    }\n  }\n}\n```", "```py\n//QCL (C based)\ninit {\n  qubits q[2]\n  //Apply a Hadamard gate on the first qubit\n  H(q[0]);\n  //Apply a CNOT gate with the first qubit as control and the second as target\n  CNOT(q[0], q[1]);\n} \n```", "```py\nqc = QuantumCircuit(2, 2)  # initialize a quantum circuit with 2 qubits and 2 classical bits\n\nqc.h(0)  # apply Hadamrd gate to qubit 0, this is Bob's qubit\nqc.h(1)  # apply Hadamard gate to qubit 1, this is Alice's qubit\n\nqc.measure(0, 0) # measure Bob's qubit and map it to classical bit 0\nqc.measure(1, 1) # measure Alice's qubit and map it to classical bit 1\n\nprint(qc) # prints the quantum circuit accociated with this program\n```", "```py\nprint(qc) # prints the quantum circuit accociated with this program\n\nservice = QiskitRuntimeService(channel=\"ibm_quantum\", token=\"your_token\")\n\nbackend = service.least_busy(simulator=False, operational=True)\n\npm = generate_preset_pass_manager(backend=backend, optimization_level=1)\n\nisa_circuit = pm.run(qc)\n\nprint(isa_circuit)\n```"]