["```py\nfunction transform_docs(doc_list)\n    CountTransformer = @load CountTransformer pkg=MLJText\n    trans_machine = machine(CountTransformer(), doc_list)\n    fit!(trans_machine)\n    return(MLJ.transform(trans_machine, doc_list))\nend\n```", "```py\nMultinomialNBClassifier = @load MultinomialNBClassifier pkg=NaiveBayes\nnb_classifier = MultinomialNBClassifier()\nnb_machine = machine(nb_classifier, X, y)\nfit!(nb_machine, verbosity=0)\n```", "```py\nfunction count_words_base(X::AbstractMatrix{Int64},y)\n    ndocs = size(X,1)         # number of documents\n    nwords = size(X,2)        # number of words in dictionary\n    ncats = length(levels(y)) # number of categories in `y`\n    wcounts = ones(Int64, ncats, nwords) # matrix for storing the word counts by category\n    for col in 1:nwords\n        for doc in 1:ndocs\n            if y[doc] == “ham”\n                wcounts[1,col] += X[doc, col]\n            else\n                wcounts[2,col] += X[doc, col]\n            end\n        end\n    end\n    return(wcounts)\nend\n```", "```py\nwcounts[levelcode(y[doc]),col] += X[doc, col]\n```", "```py\n@threads for col in 1:nwords\n    for doc in 1:ndocs\n        wcounts[levelcode(y[doc]),col] += X[doc, col]\n    end\nend\n```", "```py\nX = [2 1 1 1 1 1 0 0 0;               y = [\"ham\", \"spam\", \"ham\"]\n     1 0 0 0 0 1 1 1 0;\n     1 1 1 0 0 0 0 0 1]\n```", "```py\nyb = [1 0;\n      0 1;\n      1 0]\n```", "```py\nfunction y_as_bitmatrix(y)\n    spam = y.refs .== 2\n    ham = y.refs .== 1\n    return([ham spam]) # Bit-Matrix (one column per category)\nend\n```", "```py\nfunction count_words_03(X::AbstractMatrix{Int64},y::BitMatrix)\n    nwords = size(X,2).   # number of words in dictionary\n    ncats = size(y,2)     # number of categories in `y`\n    wcounts = ones(Int64, ncats, nwords) # matrix for storing the word counts by category\n    for cat in 1:ncats\n        @threads for col in 1:nwords\n            wcounts[cat,col] = sum(X[y[:,cat],col])\n        end\n    end\n    return(wcounts)\nend\n```", "```py\nX = [2 1 1 1 1 1 0 0 0;               yb = [1 0;\n     1 0 0 0 0 1 1 1 0;                     0 1;\n     1 1 1 0 0 0 0 0 1]                     1 0]\n```", "```py\nfunction count_words_04(X::AbstractMatrix{Int64},y::BitMatrix)\n    nwords = size(X,2)    # number of words in dictionary\n    ncats = size(y,2)     # number of categories in `y`\n    wcounts = ones(Int64, ncats, nwords) # matrix for storing the word counts by category\n    for cat in 1:ncats\n        @threads for col in 1:nwords\n            wcounts[cat,col] = dot(X[:,col], y[:,cat])\n        end\n    end\n    return(wcounts)\nend\n```", "```py\nybt = [1 0 1;        X = [2 1 1 1 1 1 0 0 0;\n       0 1 0]             1 0 0 0 0 1 1 1 0;\n                          1 1 1 0 0 0 0 0 1] \n```", "```py\nfunction count_words_05(X::AbstractMatrix{Int64},y::BitMatrix)\n    transpose(Y) * X\nend\n```", "```py\nconst mtl_Xpart = mtl(Xpart)\nconst mtl_yb = mtl(yb)\n```", "```py\nfunction count_words_06(X::MtlMatrix,y::MtlMatrix)\n    transpose(y) * X\nend\n```"]