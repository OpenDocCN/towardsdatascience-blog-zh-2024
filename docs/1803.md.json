["```py\npubget run -q \"((rheumatoid arthritis) AND gene) AND cell\" \\\n pubget_data\n```", "```py\nimport boto3\nimport pprint\nimport os\nimport boto3\nimport json\nimport hashlib\nimport funcy\nimport glob\nfrom typing import Dict, Any, TypedDict, List\nfrom langchain.llms.bedrock import Bedrock\nfrom langchain.retrievers.bedrock import AmazonKnowledgeBasesRetriever\nfrom langchain_core.documents import Document\nfrom langchain_aws import ChatBedrock\nfrom langchain_community.embeddings import BedrockEmbeddings # to create embeddings for the documents.\nfrom langchain_experimental.text_splitter import SemanticChunker # to split documents into smaller chunks.\nfrom langchain_text_splitters import CharacterTextSplitter\nfrom langchain_postgres import PGVector\nfrom pydantic import BaseModel, Field\nfrom langchain_community.document_loaders import (\n    WebBaseLoader,\n    TextLoader,\n    PyPDFLoader,\n    CSVLoader,\n    Docx2txtLoader,\n    UnstructuredEPubLoader,\n    UnstructuredMarkdownLoader,\n    UnstructuredXMLLoader,\n    UnstructuredRSTLoader,\n    UnstructuredExcelLoader,\n    DataFrameLoader,\n)\nimport psycopg\nimport uuid\n```", "```py\nconnection = f\"postgresql+psycopg://{user}:{password}@{host}:{port}/{database}\" \n# Establish the connection to the database\nconn = psycopg.connect(\n    conninfo = f\"postgresql://{user}:{password}@{host}:{port}/{database}\"\n)\n# Create a cursor to run queries\ncur = conn.cursor()\n```", "```py\nos.environ['AWS_DEFAULT_REGION'] = 'us-east-1'\nbedrock_client              = boto3.client(\"bedrock-runtime\") \nbedrock_embeddings          = BedrockEmbeddings(model_id=\"amazon.titan-embed-text-v1\",client=bedrock_client)\nbedrock_embeddings_image    = BedrockEmbeddings(model_id=\"amazon.titan-embed-image-v1\",client=bedrock_client)\nllm                         = ChatBedrock(model_id=\"anthropic.claude-3-sonnet-20240229-v1:0\", client=bedrock_client)\n```", "```py\n# function to create vector store\n# make sure to update this if you change collections!\ndef create_vectorstore(embeddings,collection_name,conn):                       \n    vectorstore = PGVector(\n        embeddings=embeddings,\n        collection_name=collection_name,\n        connection=conn,\n        use_jsonb=True,\n    )\n    return vectorstore\n```", "```py\ndef load_and_split_pdf_semantic(file_path, embeddings):\n    loader = PyPDFLoader(file_path)\n    pages = loader.load_and_split()\n    return pages\n```", "```py\ndef load_xml(file_path, embeddings):\n    loader = UnstructuredXMLLoader(\n        file_path,\n    )\n    docs = loader.load_and_split()\n    return docs\n```", "```py\ndef insert_embeddings(files, bedrock_embeddings, vectorstore):\n    logging.info(f\"Inserting {len(files)}\")\n    x = 1\n    y = len(files)\n    for file_path in files:\n        logging.info(f\"Splitting {file_path} {x}/{y}\")\n        docs = []\n        if '.pdf' in file_path:\n            try:\n                with funcy.print_durations('process pdf'):                \n                    docs = load_and_split_pdf_semantic(file_path, bedrock_embeddings)\n            except Exception as e:\n                logging.warning(f\"Error loading docs\")\n        if '.xml' in file_path:\n            try:\n                with funcy.print_durations('process xml'):                \n                    docs = load_xml(file_path, bedrock_embeddings)\n            except Exception as e:\n                logging.warning(e)\n                logging.warning(f\"Error loading docs\")\n        filtered_docs = []\n        for d in docs:\n            if len(d.page_content):\n                filtered_docs.append(d)\n        # Add documents to the vectorstore\n        ids = []\n        for d in filtered_docs:\n            ids.append(\n                hashlib.sha256(d.page_content.encode()).hexdigest()\n            )\n\n        if len(filtered_docs):\n            texts = [ i.page_content for i in filtered_docs] \n            # metadata is a dictionary. You can add to it!\n            metadatas = [ i.metadata for i in filtered_docs]\n            #logging.info(f\"Adding N: {len(filtered_docs)}\")\n            try:\n                with funcy.print_durations('load psql'):\n                    vectorstore.add_texts(texts=texts, metadatas = metadatas, ids=ids)\n            except Exception as e:\n                logging.warning(e)\n                logging.warning(f\"Error {x - 1}/{y}\")\n            #logging.info(f\"Complete {x}/{y}\")\n        x = x + 1\n```", "```py\ncollection_name_text = \"MY_COLLECTION\" #pubmed, smiles, etc\nvectorstore = create_vectorstore(bedrock_embeddings,collection_name_text,connection)\n```", "```py\nfiles = glob.glob(\"/home/jovyan/data/pubget_ra/pubget_data/*/articles/*/*/article.xml\")\n```", "```py\n#I ran this previously\ninsert_embeddings(files[0:2], bedrock_embeddings, vectorstore)\n```", "```py\nfiles = glob.glob(\"/home/jovyan/data/pubget_ra/papers/*pdf\")\ninsert_embeddings(files[0:2], bedrock_embeddings, vectorstor\n```", "```py\nimport hashlib\nimport logging\nimport os\nfrom typing import Optional, List, Dict, Any\nimport glob\nimport boto3\nfrom toolz.itertoolz import partition_all\nimport json\nimport funcy\nimport psycopg\nfrom IPython.display import Markdown, display\nfrom langchain.chains import create_retrieval_chain\nfrom langchain.chains.combine_documents import create_stuff_documents_chain\nfrom langchain.prompts import PromptTemplate\nfrom langchain.retrievers.bedrock import (\n    AmazonKnowledgeBasesRetriever,\n    RetrievalConfig,\n    VectorSearchConfig,\n)\nfrom aws_bedrock_utilities.models.base import BedrockBase, RAGResults\nfrom aws_bedrock_utilities.models.pgvector_knowledgebase import BedrockPGWrapper\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport pandas as pd\nfrom pprint import pprint\nimport time\nimport logging\nfrom rich.logging import RichHandler\n```", "```py\n# Make sure to keep the collection name consistent!\nCOLLECTION_NAME   = \"MY_COLLECTION\"\nMAX_DOCS_RETURNED = 50\n```", "```py\np = BedrockPGWrapper(collection_name=COLLECTION_NAME)                              credentials.py:1147\n```", "```py\n#model = \"anthropic.claude-3-sonnet-20240229-v1:0\"\nmodel = \"anthropic.claude-3-haiku-20240307-v1:0\"\n```", "```py\nmodel = \"anthropic.claude-3-haiku-20240307-v1:0\"\nqueries = [\n    \"Tell me about T cellâ€“derived cytokines in relation to rheumatoid arthritis and provide citations and article titles\",\n    \"Tell me about single-cell research in rheumatoid arthritis.\",\n    \"Tell me about protein-protein associations in rheumatoid arthritis.\",\n    \"Tell me about the findings of GWAS studies in rheumatoid arthritis.\",\n\n]\nai_responses = []\nfor query in queries:\n    answer = p.run_kb_chat(query=query, collection_name= COLLECTION_NAME, model_id=model, search_kwargs={'k': MAX_DOCS_RETURNED, 'fetch_k': 50000 })\n    ai_responses.append(answer)\n    time.sleep(1)\n```", "```py\nfor answer in ai_responses:\n    t = Markdown(f\"\"\"\n### Query \n{answer['query']}### Response\n{answer['result']}\n\n    \"\"\")\n    display(t)\n```", "```py\nx = 0\ny = 10\nfor answer in ai_responses:\n    for s in answer['source_documents']:\n        if x <= y:\n            print(s.metadata)\n        else:\n            break\n        x = x + 1\n```", "```py\n{'page': 6, 'source': '/home/jovyan/data/pubget_ra/papers/fimmu-12-790122.pdf'}\n{'source': '/home/jovyan/data/pubget_ra/pubget_data/query_55c6003c0195b20fd4bdc411f67a8dcf/articles/d52/pmcid_11167034/article.xml'}\n{'page': 7, 'source': '/home/jovyan/data/pubget_ra/papers/fimmu-12-790122.pdf'}\n{'page': 17, 'source': '/home/jovyan/data/pubget_ra/papers/fimmu-12-790122.pdf'}\n{'source': '/home/jovyan/data/pubget_ra/pubget_data/query_55c6003c0195b20fd4bdc411f67a8dcf/articles/657/pmcid_11151399/article.xml'}\n{'page': 3, 'source': '/home/jovyan/data/pubget_ra/papers/41392_2023_Article_1331.pdf'}\n{'page': 4, 'source': '/home/jovyan/data/pubget_ra/papers/41392_2023_Article_1331.pdf'}\n{'page': 5, 'source': '/home/jovyan/data/pubget_ra/papers/fimmu-12-790122.pdf'}\n{'source': '/home/jovyan/data/pubget_ra/pubget_data/query_55c6003c0195b20fd4bdc411f67a8dcf/articles/e02/pmcid_11219584/article.xml'}\n{'page': 8, 'source': '/home/jovyan/data/pubget_ra/papers/fimmu-12-790122.pdf'}\n{'source': '/home/jovyan/data/pubget_ra/pubget_data/query_55c6003c0195b20fd4bdc411f67a8dcf/articles/6fb/pmcid_11203675/article.xml'}\n```"]