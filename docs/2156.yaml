- en: Batch And Streaming Demystified For Unification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/batch-and-streaming-demystified-for-unification-dee0b48f921d?source=collection_archive---------5-----------------------#2024-09-04](https://towardsdatascience.com/batch-and-streaming-demystified-for-unification-dee0b48f921d?source=collection_archive---------5-----------------------#2024-09-04)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Understand how batch can be considered a subset of streaming and why data engineering
    should simplify its usage significantly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@bernd.wessely?source=post_page---byline--dee0b48f921d--------------------------------)[![Bernd
    Wessely](../Images/e60e01c19412d8af8f8bddf78e561275.png)](https://medium.com/@bernd.wessely?source=post_page---byline--dee0b48f921d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--dee0b48f921d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--dee0b48f921d--------------------------------)
    [Bernd Wessely](https://medium.com/@bernd.wessely?source=post_page---byline--dee0b48f921d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--dee0b48f921d--------------------------------)
    ·23 min read·Sep 4, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/efd827fc606a3f130b8f11080a0ce0e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Felix Mittermeier](https://felix-mittermeier.de) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Table Of Contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: · [Principles](#67cb)
  prefs: []
  type: TYPE_NORMAL
- en: · [Blocking and stateful operators](#cbbb)
  prefs: []
  type: TYPE_NORMAL
- en: · [Streaming is batching and batching is streaming?](#31f1)
  prefs: []
  type: TYPE_NORMAL
- en: · [Data windows](#7544)
  prefs: []
  type: TYPE_NORMAL
- en: · [Event time and processing time](#8940)
  prefs: []
  type: TYPE_NORMAL
- en: · [Exactly-once semantics](#85a7)
  prefs: []
  type: TYPE_NORMAL
- en: · [Scaling to the enterprise level](#00ab)
  prefs: []
  type: TYPE_NORMAL
- en: Much of the discussion around batch **versus** stream processing centers on
    their high-level differences. However, the real distinction is more nuanced if
    we dig deeper. By closely examining the underlying principles of both data processing
    approaches, we can recognize their similarities. They actually have so much in
    common that it allows us to largely abstract away the technical differences.
  prefs: []
  type: TYPE_NORMAL
- en: This means that while application developers still need to choose whether their
    use case is better served by stream or batch processing style, they should not
    have to think much about the different technical implementation anymore. This
    would greatly simplify their primary focus on implementing business logic.
  prefs: []
  type: TYPE_NORMAL
