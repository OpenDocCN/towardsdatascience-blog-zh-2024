["```py\nconda install -y -c conda-forge geopy folium\n\npip install geopy folium\n\n# In case of errors, use these specific versions (used for this article)\n# folium              0.14.0\n# geopy               2.3.0\n# pandas              2.0.3\n```", "```py\nfrom typing import Tuple, List, Dict\n\nimport pandas as pd\nimport folium\n\npd.set_option('display.precision', 2)\n\ndf_sites = pd.DataFrame(\n    [['hotel',              48.8527, 2.3542],\n     ['Sacre Coeur',        48.8867, 2.3431],\n     ['Louvre',             48.8607, 2.3376],\n     ['Montmartre',         48.8872, 2.3388],\n     ['Port de Suffren',    48.8577, 2.2902],\n     ['Arc de Triomphe',    48.8739, 2.2950],\n     ['Av. Champs Élysées', 48.8710, 2.3036],\n     ['Notre Dame',         48.8531, 2.3498],\n     ['Tour Eiffel',        48.8585, 2.2945]],\n    columns=pd.Index(['site', 'latitude', 'longitude'], name='paris')\n)\n\ndf_sites\n```", "```py\navg_location = df_sites[['latitude', 'longitude']].mean()\nmap_paris = folium.Map(location=avg_location, zoom_start=13)\n```", "```py\nfor site in df_sites.itertuples():\n    marker = folium.Marker(location=(site.latitude, site.longitude),\n                           tooltip=site.site)\n    marker.add_to(map_paris)\n\nmap_paris\n```", "```py\ndf_route = df_sites.copy()\ndf_route.index.name = 'visit_order'\n\ndf_route\n```", "```py\ndf_route_segments = df_route.join(\n    df_route.shift(-1),  # map each stop to its next stop\n    rsuffix='_next'\n).dropna()  # last stop has no \"next one\", so drop it\n\ndf_route_segments\n```", "```py\nmap_paris = folium.Map(location=avg_location, zoom_start=13)\n\nfor stop in df_route_segments.itertuples():\n    # marker for current stop\n    marker = folium.Marker(location=(stop.latitude, stop.longitude),\n                           tooltip=stop.site)\n    # line for the route segment connecting current to next stop\n    line = folium.PolyLine(\n        locations=[(stop.latitude, stop.longitude), \n                   (stop.latitude_next, stop.longitude_next)],\n        tooltip=f\"{stop.site} to {stop.site_next}\",\n    )\n    # add elements to the map\n    marker.add_to(map_paris)\n    line.add_to(map_paris)\n\n# maker for last stop wasn't added in for loop, so adding it now \nfolium.Marker(location=(stop.latitude_next, stop.longitude_next),\n              tooltip=stop.site_next).add_to(map_paris);\n\nmap_paris\n```", "```py\nmap_paris = folium.Map(location=avg_location, zoom_start=13)\n\nfor stop in df_route_segments.itertuples():\n    initial_stop = stop.Index == 0\n    # icon for current stop\n    icon = folium.Icon(icon='home' if initial_stop else 'info-sign', \n                       color='cadetblue' if initial_stop else 'red')\n    # marker for current stop\n    marker = folium.Marker(location=(stop.latitude, stop.longitude),\n                           icon=icon, tooltip=stop.site)\n    # line for the route segment connecting current to next stop\n    line = folium.PolyLine(\n        locations=[(stop.latitude, stop.longitude), \n                   (stop.latitude_next, stop.longitude_next)],\n        tooltip=f\"{stop.site} to {stop.site_next}\",\n    )\n    # add elements to the map\n    marker.add_to(map_paris)\n    line.add_to(map_paris)\n\n# When for loop ends, the stop variable has the second-to-last \n# stop in the route, so the marker for the last stop is missing \n# We add it now using the \"next\" columns of the last row\nfolium.Marker(\n    location=(stop.latitude_next, stop.longitude_next),\n    tooltip=stop.site_next, \n    icon = folium.Icon(icon='info-sign', color='red')\n).add_to(map_paris);\n\nmap_paris  # show map\n```", "```py\nfrom geopy.distance import geodesic\n\n_Location = Tuple[float, float]\n\ndef ellipsoidal_distance(point1: _Location, point2: _Location) -> float:\n    \"\"\"Calculate ellipsoidal distance (in meters) between point1 and \n    point2 where each point is represented as a tuple (lat, lon)\"\"\"\n    return geodesic(point1, point2).meters\n```", "```py\ndf_route_segments['distance_seg'] = df_route_segments.apply(\n    lambda stop: ellipsoidal_distance(\n        (stop.latitude, stop.longitude), \n        (stop.latitude_next, stop.longitude_next)), \n    axis=1\n)\n\ndf_route_segments\n```", "```py\nmap_paris = folium.Map(location=avg_location, zoom_start=13)\n\nfor stop in df_route_segments.itertuples():\n    initial_stop = stop.Index == 0\n    # marker for current stop\n    icon = folium.Icon(icon='home' if initial_stop else 'info-sign', \n                       color='cadetblue' if initial_stop else 'red')\n    marker = folium.Marker(\n        location=(stop.latitude, stop.longitude),\n        icon=icon, \n        # display the name and stop number at each site's marker\n        tooltip=f\"<b>Name</b>: {stop.site} <br>\" \\\n              + f\"<b>Stop number</b>: {stop.Index} <br>\"\n    )\n    # line for the route segment connecting current to next stop\n    line = folium.PolyLine(\n        locations=[(stop.latitude, stop.longitude), \n                   (stop.latitude_next, stop.longitude_next)],\n        # display the start, end, and distance of each segment\n        tooltip=f\"<b>From</b>: {stop.site} <br>\" \\\n              + f\"<b>To</b>: {stop.site_next} <br>\" \\\n              + f\"<b>Distance</b>: {stop.distance_seg:.0f} m\",\n    )\n    # add elements to the map\n    marker.add_to(map_paris)\n    line.add_to(map_paris)\n\n# add route's last marker, as it wasn't included in for loop\nfolium.Marker(\n    location=(stop.latitude_next, stop.longitude_next),\n    tooltip=f\"<b>Name</b>: {stop.site_next} <br>\" \\\n          + f\"<b>Stop number</b>: {stop.Index + 1} <br>\", \n    icon = folium.Icon(icon='info-sign', color='red')\n).add_to(map_paris);\n\nmap_paris  # show map\n```", "```py\ndef _make_route_segments_df(df_route: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Given a dataframe whose rows are ordered stops in a route, \n    and where the index has integers representing the visit order of those\n    stops, return a dataframe having new columns with the information of \n    each stop's next site\"\"\"\n    df_route_segments = df_route.join(\n        df_route.shift(-1),  # map each stop to its next\n        rsuffix='_next').dropna()\n\n    df_route_segments['distance_seg'] = df_route_segments.apply(\n        lambda stop: ellipsoidal_distance(\n            (stop.latitude, stop.longitude), \n            (stop.latitude_next, stop.longitude_next)\n        ), axis=1\n    )\n    return df_route_segments\n\ndef plot_route_on_map(df_route: pd.DataFrame) -> folium.Map:\n    \"\"\"Takes a dataframe of a route and displays it on a map, adding \n    a marker for each stop and a line for each pair of consecutive \n    stops\"\"\"\n    df_route_segments = _make_route_segments_df(df_route)\n\n    # create empty map\n    avg_location = df_route[['latitude', 'longitude']].mean()\n    map_route = folium.Map(location=avg_location, zoom_start=13)\n\n    for stop in df_route_segments.itertuples():\n        initial_stop = stop.Index == 0\n        # marker for current stop\n        icon = folium.Icon(icon='home' if initial_stop else 'info-sign', \n                           color='cadetblue' if initial_stop else 'red')\n        marker = folium.Marker(\n            location=(stop.latitude, stop.longitude),\n            icon=icon, \n            tooltip=f\"<b>Name</b>: {stop.site} <br>\" \\\n                  + f\"<b>Stop number</b>: {stop.Index} <br>\"\n        )\n        # line for the route segment connecting current to next stop\n        line = folium.PolyLine(\n            locations=[(stop.latitude, stop.longitude), \n                       (stop.latitude_next, stop.longitude_next)],\n            # add to each line its start, end, and distance\n            tooltip=f\"<b>From</b>: {stop.site} <br>\" \\\n                  + f\"<b>To</b>: {stop.site_next} <br>\" \\\n                  + f\"<b>Distance</b>: {stop.distance_seg:.0f} m\",\n        )\n        # add elements to the map\n        marker.add_to(map_route)\n        line.add_to(map_route)\n\n    # When for loop ends, the stop variable has the second-to-last stop in \n    # the route, so the marker for the last stop is missing, and we add it \n    # now using the \"next\" columns of the last row\n    folium.Marker(\n        location=(stop.latitude_next, stop.longitude_next),\n        tooltip=f\"<b>Name</b>: {stop.site_next} <br>\" \\\n              + f\"<b>Stop number</b>: {stop.Index + 1} <br>\", \n        icon = folium.Icon(icon='info-sign', color='red')\n    ).add_to(map_route)\n\n    return map_route\n```", "```py\ndf_route_closed = pd.concat(\n   [df_route, df_route.head(1)], ignore_index=True\n)\ndf_route_closed.index.name = df_route.index.name\n\ndf_route_closed\n```", "```py\nplot_route_on_map(df_route_closed)\n```", "```py\n# NOTE: trimmed down function for reference only, do not copy-paste.\ndef plot_route_on_map(df_route: pd.DataFrame) -> folium.Map:\n    #----- map is created here -----\n    # ...\n    #----- markers are created here -----\n    for stop in df_route_segments.itertuples():\n        # ...\n        # ( ఠ ͟ʖ ఠ)\n        # ...\n        # for loop ends!\n\n    ### 𝗡𝗲𝘄 𝗰𝗼𝗻𝗱𝗶𝘁𝗶𝗼𝗻 𝗰𝗵𝗲𝗰𝗸𝗲𝗿 ###\n    # check if first site's name and location coincide with last's?\n    first_stop = df_route.iloc[0][['site', 'latitude', 'longitude']]\n    last_stop = df_route.iloc[-1][['site', 'latitude', 'longitude']]\n    is_closed_tour = (first_stop == last_stop).all()\n\n    # When for loop ends, the marker for the last stop is missing \n    # (**unless the route is closed**). if the route is not closed, \n    # we add it now using the \"next\" columns of the last row\n    if not is_closed_tour:\n        folium.Marker(\n            location=(stop.latitude_next, stop.longitude_next),\n            tooltip=f\"<b>Name</b>: {stop.site_next} <br>\" \\\n                  + f\"<b>Stop number</b>: {stop.Index + 1} <br>\", \n            icon = folium.Icon(icon='info-sign', color='red')\n        ).add_to(map_route)\n\n    return map_route\n```", "```py\nplot_route_on_map(df_route_closed)\n```", "```py\nTAG_ROUTE_NAME = \"Name\"\nTAG_NUMBER_STOPS = \"Num stops\"\nTAG_TOTAL_DISTANCE = \"Distance\"\n_SPACE_HTML = \"&nbsp\"  # needed to add empty spaces between KPIs\n\n# get summary info to display on map\nname = df_route_segments.columns.name.capitalize()\nn_stops = df_route_segments['site'].size\nroute_distance = df_route_segments['distance_seg'].sum().round(0)\n```", "```py\nfrom IPython.display import HTML, display\n# show a hello world message in blue and bold \ndisplay(HTML(\"<span style='color:steelblue'>Hello <b>world</b></span>\"))\n```", "```py\n_html_text_title = f\"<b>{TAG_ROUTE_NAME}</b>: {name}\"\n\ndisplay(HTML(_html_text_title))  # [Out]: 𝗡𝗮𝗺𝗲: Paris\n```", "```py\nSTYLE_TITLE = (\n    \"position:absolute;z-index:100000;left:5vw;color:black;\"\n    \"font-size:30px;text-shadow:-1px 0 white, 0 1px white, 0 1px white\"\n)\nhtml_title = f'<h3 style=\"{STYLE_TITLE}\">{_html_text_title}</h3>'\n\n# let's see how that title looks like on the map (run all in same cell):\nmap_with_title = plot_route_on_map(df_route)\n\nroot_map = map_with_title.get_root()\nroot_map.html.add_child(folium.Element(html_title))\n\nmap_with_title\n```", "```py\n_html_text_summary = f\"\"\"\n<b>{TAG_NUMBER_STOPS}</b> <b>{TAG_TOTAL_DISTANCE}</b>\n<br>\n{n_stops} {16 * _SPACE_HTML} {route_distance:.0f} m\n\"\"\"\n\ndisplay(HTML(_html_text_summary))\n# [Out]:\n# 𝐍𝐮𝐦 𝐬𝐭𝐨𝐩𝐬  𝐃𝐢𝐬𝐭𝐚𝐧𝐜𝐞\n# 8          25158 m\n```", "```py\nSTYLE_SUMMARY = (\n    \"position:absolute;z-index:100000;font-size:20px;\"\n    \"right:0;bottom:0;color:black;\"\n    \"text-shadow:-1px 0 white, 0 1px white, 0 1px white\"\n)\nhtml_summary = f'<h2 style=\"{STYLE_SUMMARY}\">{_html_text_summary}</h2>'\n\n# let's see how the KPIs look like (run all in same cell):\nmap_with_kpis = plot_route_on_map(df_route)\n\nroot_map = map_with_kpis.get_root()\nroot_map.html.add_child(folium.Element(html_summary))\n\nmap_with_kpis\n```", "```py\nmy_map = plot_route_on_map(df_route)\n\nroot_map = my_map.get_root()\nroot_map.html.add_child(folium.Element(html_title))  # add title\nroot_map.html.add_child(folium.Element(html_summary))  # add summary KPIs\nmy_map  # check it out\n```", "```py\ndef _get_text_for_title(df_route_segments):\n    \"\"\"Given a dataframe representing a route, where the column index has \n    the name of the route, returns an HTML string with a nice display of \n    this name\"\"\"\n    # 1) get the info to display\n    name = df_route_segments.columns.name\n    name = name.capitalize() if name else ''\n\n    # 2) parse the info as HTML for addition to map\n    _html_text_title = f\"<b>{TAG_ROUTE_NAME}</b>: {name}\"\n    html_title = f'<h3 style=\"{STYLE_TITLE}\">{_html_text_title}</h3>'\n    return html_title\n\ndef _get_kpis_to_display_on_map(df_route_segments):\n    \"\"\"Given a dataframe representing a route, and having columns 'site' \n    and 'distance_seg', returns an HTML string with a nice display of \n    the number of sites and the total distance of the route\"\"\"\n    # 1) get the info to display\n    n_stops = df_route_segments['site'].size\n    route_distance = df_route_segments['distance_seg'].sum().round(0)\n\n    # 2) parse the info as HTML for addition to map\n    _html_text_summary = f\"\"\"\n    <b>{TAG_NUMBER_STOPS}</b> <b>{TAG_TOTAL_DISTANCE}</b>\n    <br>\n    {n_stops} {16 * _SPACE_HTML} {route_distance:.0f} m\n    \"\"\"\n    html_summary = f'<h2 style=\"{STYLE_SUMMARY}\">{_html_text_summary}</h2>'\n    return html_summary\n```", "```py\ndef display_route_on_map(df_route, include_kpis=True) -> folium.Map:\n    \"\"\"Given a dataframe representing a route, creates a folium map \n    and adds markers for the stops and lines for the route segments, \n    with the option to also add an automatic title and 2 KPIs: \n     - number of stops in the route\n     - total distance of route\n\n    Parameters\n    ----------\n    df_route : pd.DataFrame\n      A dataframe representing a route, whereby each row contains\n      information on a different stop of the route, and rows are sorted \n      by stop visiting order.\n    include_kpis : bool (default=True)\n      Whether to include the title and the 2 KPIs in the map\n\n    Returns\n    -------\n    A folium map that can be displayed or re-used\"\"\"\n    # 1) create empty map\n    avg_location = df_route[['latitude', 'longitude']].mean()\n    map_route = folium.Map(location=avg_location, zoom_start=13)\n\n    # 2) create DF with segment information\n    df_route_segments = _make_route_segments_df(df_route)\n\n    # 3) add title and KPIs to the map\n    if include_kpis:\n        html_title = _get_text_for_title(df_route_segments)\n        html_summary = _get_kpis_to_display_on_map(df_route_segments)\n        root_map = map_route.get_root()\n        root_map.html.add_child(folium.Element(html_title))  # add title\n        root_map.html.add_child(folium.Element(html_summary))  # add KPIs\n\n    # 4) add route to the map\n    for stop in df_route_segments.itertuples():\n        initial_stop = stop.Index == 0\n        # marker for current stop\n        icon = folium.Icon(icon='home' if initial_stop else 'info-sign', \n                           color='cadetblue' if initial_stop else 'red')\n        marker = folium.Marker(\n            location=(stop.latitude, stop.longitude),\n            icon=icon, \n            tooltip=f\"<b>Name</b>: {stop.site} <br>\" \\\n                  + f\"<b>Stop number</b>: {stop.Index} <br>\"\n        )\n        # line for the route segment connecting current to next stop\n        line = folium.PolyLine(\n            locations=[(stop.latitude, stop.longitude), \n                       (stop.latitude_next, stop.longitude_next)],\n            # add to each line its start, end, and distance\n            tooltip=f\"<b>From</b>: {stop.site} <br>\" \\\n                  + f\"<b>To</b>: {stop.site_next} <br>\" \\\n                  + f\"<b>Distance</b>: {stop.distance_seg:.0f} m\",\n        )\n        # add elements to the map\n        marker.add_to(map_route)\n        line.add_to(map_route)\n\n    # does the first site's name and location coincide with the last's?\n    first_stop = df_route.iloc[0][['site', 'latitude', 'longitude']]\n    last_stop = df_route.iloc[-1][['site', 'latitude', 'longitude']]\n    is_closed_tour = (first_stop == last_stop).all()\n\n    # When for loop ends, the stop variable has the second-to-last \n    # stop in the route, so the marker for the last stop is missing \n    # (**unless the route is closed**). We add it now using \n    # the \"next\" columns of the last row, if the route is open\n    if not is_closed_tour:\n        folium.Marker(\n            location=(stop.latitude_next, stop.longitude_next),\n            tooltip=f\"<b>Name</b>: {stop.site_next} <br>\" \\\n                  + f\"<b>Stop number</b>: {stop.Index + 1} <br>\", \n            icon = folium.Icon(icon='info-sign', color='red')\n        ).add_to(map_route)\n\n    return map_route\n```", "```py\ndf_route_ny = pd.DataFrame(\n    [['hotel',                  40.710400, -74.006670],\n     ['One World Trade Center', 40.713658, -74.013285],\n     ['Federal Hall',           40.708051, -74.010223],\n     ['Tenement Museum',        40.718807, -73.990051],\n     ['Flatiron Building',      40.739665, -73.989976],\n     ['Chrysler Building',      40.750542, -73.975632],\n     ['New York City Library',  40.752471, -73.982162],\n     ['Empire State Building',  40.747814, -73.985289],\n     ['Madison Square Garden',  40.749924, -73.993853],\n     ['Chelsea Market',         40.742750, -74.006877]],\n    columns=pd.Index(['site', 'latitude', 'longitude'], name='new york')\n)\ndf_route_ny.index.name = 'visit_order'\n\ndf_route_ny\n```", "```py\ndisplay_route_on_map(df_route_ny)\n```"]