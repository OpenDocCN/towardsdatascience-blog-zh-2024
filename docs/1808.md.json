["```py\ndef add(a, b):\n\treturn a + b\n\nadd(4, 3)\n> 7\n\nadd(.3, 4)\n> 4.3\n\nadd('a', 'b')\n> 'ab'\n```", "```py\ndef add(a: int, b: int) -> int:\n\treturn a + b\n\nadd(4, 3)\n> 7\n\nadd(.3, 4)\n> 4.3\n\nadd('a', 'b')\n> 'ab'\n```", "```py\npip install pydantic\n```", "```py\npython version: 3.10.5\npydantic version: 2.5.3\n```", "```py\nimport pydantic\n\n@pydantic.validate_call\ndef add(a: int, b: int) -> int:\n return a + b\n\n# ----\n\nadd(4, 4)\n> 8\n\n# ----\n\nadd('a', 'a')\n> ValidationError: 2 validation errors for add\n0\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='a', input_type=str]\n    For further information visit <https://errors.pydantic.dev/2.5/v/int_parsing>\n1\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='a', input_type=str]\n    For further information visit <https://errors.pydantic.dev/2.5/v/int_parsing>\n\n# ----\n\nadd(.4, .3)\n> ValidationError: 2 validation errors for add\n0\n  Input should be a valid integer, got a number with a fractional part [type=int_from_float, input_value=0.4, input_type=float]\n    For further information visit <https://errors.pydantic.dev/2.5/v/int_from_float>\n1\n  Input should be a valid integer, got a number with a fractional part [type=int_from_float, input_value=0.3, input_type=float]\n    For further information visit <https://errors.pydantic.dev/2.5/v/int_from_float>\n\n# ----\n\nadd('3', 'a')\n> ValidationError: 1 validation error for add\n1\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='a', input_type=str]\n    For further information visit <https://errors.pydantic.dev/2.5/v/int_parsing>\n\n# ----\n\nadd('3', '3')\n> 6\n\n# ----\n\nadd('3', '3.3')\n> ValidationError: 1 validation error for add\n1\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='3.3', input_type=str]\n    For further information visit <https://errors.pydantic.dev/2.5/v/int_parsing>\n```", "```py\nfrom pydantic import validate_call\n\n@validate_call(validate_return=True)\ndef add(*args: int, a: int, b: int = 4) -> int:\n return str(sum(args) + a + b)\n\n# ----\nadd(4,3,4)\n> ValidationError: 1 validation error for add\na\n  Missing required keyword only argument [type=missing_keyword_only_argument, input_value=ArgsKwargs((4, 3, 4)), input_type=ArgsKwargs]\n    For further information visit <https://errors.pydantic.dev/2.5/v/missing_keyword_only_argument>\n\n# ----\n\nadd(4, 3, 4, a=3)\n> 18\n\n# ----\n\n@validate_call\ndef add(*args: int, a: int, b: int = 4) -> int:\n return str(sum(args) + a + b)\n\n# ---- \n\nadd(4, 3, 4, a=3)\n> '18'\n```", "```py\nfrom pydantic import validate_call, Field\nfrom typing import Annotated \n\ntype_age = Annotated[int, Field(lt=120)]\n\n@validate_call(validate_return=True)\ndef add(age_one: int, age_two: type_age) -> int:\n return age_one + age_two\n\nadd(3, 300)\n> ValidationError: 1 validation error for add\n1\n  Input should be less than 120 [type=less_than, input_value=200, input_type=int]\n    For further information visit <https://errors.pydantic.dev/2.5/v/less_than>\n```", "```py\nfrom pydantic import HttpUrl, PastDate\nfrom pydantic import Field\nfrom pydantic import validate_call\nfrom typing import Annotated\n\nName = Annotated[str, Field(min_length=2, max_length=15)]\n\n@validate_call(validate_return=True)\ndef process_payload(url: HttpUrl, name: Name, birth_date: PastDate) -> str:\n return f'{name=}, {birth_date=}'\n\n# ----\n\npayload = {\n 'url': 'httpss://example.com',\n 'name': 'J',\n 'birth_date': '2024-12-12'\n}\n\nprocess_payload(**payload)\n> ValidationError: 3 validation errors for process_payload\nurl\n  URL scheme should be 'http' or 'https' [type=url_scheme, input_value='httpss://example.com', input_type=str]\n    For further information visit <https://errors.pydantic.dev/2.5/v/url_scheme>\nname\n  String should have at least 2 characters [type=string_too_short, input_value='J', input_type=str]\n    For further information visit <https://errors.pydantic.dev/2.5/v/string_too_short>\nbirth_date\n  Date should be in the past [type=date_past, input_value='2024-12-12', input_type=str]\n    For further information visit <https://errors.pydantic.dev/2.5/v/date_past>\n\n# ----\n\npayload = {\n 'url': '<https://example.com>',\n 'name': 'Joe-1234567891011121314',\n 'birth_date': '2020-12-12'\n}\n\nprocess_payload(**payload)\n> ValidationError: 1 validation error for process_payload\nname\n  String should have at most 15 characters [type=string_too_long, input_value='Joe-1234567891011121314', input_type=str]\n    For further information visit <https://errors.pydantic.dev/2.5/v/string_too_long>\n```", "```py\nfrom pydantic import Field\nfrom pydantic import BaseModel\n\nclass Person(BaseModel):\n name: str = Field(min_length=2, max_length=15)\n age: int = Field(gt=0, lt=120)\n\n# ----\n\njohn = Person(name='john', age=20)\n> Person(name='john', age=20)\n\n# ----\n\nmike = Person(name='m', age=0)\n> ValidationError: 2 validation errors for Person\nname\n  String should have at least 2 characters [type=string_too_short, input_value='j', input_type=str]\n    For further information visit <https://errors.pydantic.dev/2.5/v/string_too_short>\nage\n  Input should be greater than 0 [type=greater_than, input_value=0, input_type=int]\n    For further information visit <https://errors.pydantic.dev/2.5/v/greater_than>\n```", "```py\nfrom pydantic import Field\nfrom pydantic import BaseModel\nfrom typing import Annotated \n\nName = Annotated[str, Field(min_length=2, max_length=15)]\nAge = Annotated[int, Field(default=1, ge=0, le=120)]\n\nclass Person(BaseModel):\n name: Name\n age: Age\n\n# ----\n\nmike = Person(name='mike')\n> Person(name='mike', age=1)\n```", "```py\nfrom pydantic import Field\nfrom pydantic import BaseModel\nfrom pydantic import ConfigDict\n\nfrom typing import Literal\nfrom typing import Annotated\nfrom enum import Enum\n\npayload = {\n \"req_id\": \"test\",\n \"text\": \"This is a sample text.\",\n \"instruction\": \"embed\",\n \"llm_provider\": \"openai\",\n \"llm_params\": {\n  \"llm_temperature\": 0,\n  \"llm_model_name\": \"gpt4o\"\n },\n \"misc\": \"what\"\n}\n\nReqID = Annotated[str, Field(min_length=2, max_length=15)]\n\nclass LLMProviders(str, Enum):\n OPENAI = 'openai'\n CLAUDE = 'claude'\n\nclass LLMParams(BaseModel):\n temperature: int = Field(validation_alias='llm_temperature', ge=0, le=1)\n llm_name: str = Field(validation_alias='llm_model_name', \n                       serialization_alias='model')\n\nclass Payload(BaseModel):\n req_id: str = Field(exclude=True)\n text: str = Field(min_length=5)\n instruction: Literal['embed', 'chat']\n llm_provider: LLMProviders\n llm_params: LLMParams\n\n # model_config = ConfigDict(use_enum_values=True)\n\n# ----\n\nvalidated_payload = Payload(**payload)\nvalidated_payload\n> Payload(req_id='test', \n         text='This is a sample text.', \n          instruction='embed', \n          llm_provider=<LLMProviders.OPENAI: 'openai'>, \n          llm_params=LLMParams(temperature=0, llm_name='gpt4o'))\n\n# ----          \n\nvalidated_payload.model_dump()\n> {'text': 'This is a sample text.',\n 'instruction': 'embed',\n 'llm_provider': <LLMProviders.OPENAI: 'openai'>,\n 'llm_params': {'temperature': 0, 'llm_name': 'gpt4o'}}\n\n# ----\n\nvalidated_payload.model_dump(by_alias=True)\n> {'text': 'This is a sample text.',\n 'instruction': 'embed',\n 'llm_provider': <LLMProviders.OPENAI: 'openai'>,\n 'llm_params': {'temperature': 0, 'model': 'gpt4o'}}\n\n# ----\n\n# After adding \n#     model_config = ConfigDict(use_enum_values=True)\n# in Payload model definition, you get\n\nvalidated_payload.model_dump(by_alias=True)\n> {'text': 'This is a sample text.',\n 'instruction': 'embed',\n 'llm_provider': 'openai',\n 'llm_params': {'temperature': 0, 'model': 'gpt4o'}}\n```", "```py\nname,age,bank_account\njohnny,0,20\nmatt,10,0\nabraham,100,100000\nmary,15,15\nlinda,130,100000\n```", "```py\nfrom pydantic import BaseModel\nfrom pydantic import Field \nfrom pydantic import field_validator\nfrom pydantic import ValidationInfo\nfrom typing import List\nimport csv\n\nFILE_NAME = 'test.csv'\n\nclass DataModel(BaseModel):\n name: str = Field(min_length=2, max_length=15)\n age: int = Field(ge=1, le=120)\n bank_account: float = Field(ge=0, default=0)\n\n @field_validator('name')\n @classmethod\n def validate_name(cls, v: str, info: ValidationInfo) -> str:\n  return str(v).capitalize()\n\nclass ValidatedModels(BaseModel):\n validated: List[DataModel]\n\nvalidated_rows = []\n\nwith open(FILE_NAME, 'r') as f:\n reader = csv.DictReader(f, delimiter=',')\n for row in reader:\n  try:\n   validated_rows.append(DataModel(**row))\n  except ValidationError as ve:\n   # print out error\n   # disregard the record\n   print(f'{ve=}')\n\nvalidated_rows\n> [DataModel(name='Matt', age=10, bank_account=0.0),\n DataModel(name='Abraham', age=100, bank_account=100000.0),\n DataModel(name='Mary', age=15, bank_account=15.0)]\n\nvalidated = ValidatedModels(validated=validated_rows)\nvalidated.model_dump()\n> {'validated': [{'name': 'Matt', 'age': 10, 'bank_account': 0.0},\n  {'name': 'Abraham', 'age': 100, 'bank_account': 100000.0},\n  {'name': 'Mary', 'age': 15, 'bank_account': 15.0}]}\n```", "```py\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel, HttpUrl\n\nclass Request(BaseModel):\n    request_id: str\n    url: HttpUrl\n\napp = FastAPI()\n\n@app.post(\"/search/by_url/\")\nasync def create_item(req: Request):\n    return item\n```"]