- en: 'Counts Outlier Detector: Interpretable Outlier Detection'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Counts异常值检测器：可解释的异常值检测
- en: 原文：[https://towardsdatascience.com/counts-outlier-detector-interpretable-outlier-detection-ead0d469557a?source=collection_archive---------2-----------------------#2024-06-19](https://towardsdatascience.com/counts-outlier-detector-interpretable-outlier-detection-ead0d469557a?source=collection_archive---------2-----------------------#2024-06-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/counts-outlier-detector-interpretable-outlier-detection-ead0d469557a?source=collection_archive---------2-----------------------#2024-06-19](https://towardsdatascience.com/counts-outlier-detector-interpretable-outlier-detection-ead0d469557a?source=collection_archive---------2-----------------------#2024-06-19)
- en: An interpretable outlier detector based on multi-dimensional histograms.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于多维直方图的可解释异常值检测器。
- en: '[](https://medium.com/@wkennedy934?source=post_page---byline--ead0d469557a--------------------------------)[![W
    Brett Kennedy](../Images/b3ce55ffd028167326c117d47c64c467.png)](https://medium.com/@wkennedy934?source=post_page---byline--ead0d469557a--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--ead0d469557a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--ead0d469557a--------------------------------)
    [W Brett Kennedy](https://medium.com/@wkennedy934?source=post_page---byline--ead0d469557a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@wkennedy934?source=post_page---byline--ead0d469557a--------------------------------)[![W·布雷特·肯尼迪](../Images/b3ce55ffd028167326c117d47c64c467.png)](https://medium.com/@wkennedy934?source=post_page---byline--ead0d469557a--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--ead0d469557a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--ead0d469557a--------------------------------)
    [W·布雷特·肯尼迪](https://medium.com/@wkennedy934?source=post_page---byline--ead0d469557a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--ead0d469557a--------------------------------)
    ·18 min read·Jun 19, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--ead0d469557a--------------------------------)
    ·18分钟阅读·2024年6月19日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: 'This article continues a series on interpretable outlier detection. The previous
    article ([Interpretable Outlier Detection: Frequent Patterns Outlier Factor (FPOF)](https://medium.com/towards-data-science/interpretable-outlier-detection-frequent-patterns-outlier-factor-fpof-0d9cbf51b17a)
    ) covered the FPOF algorithm, as well as some of the basics of outlier detection
    and interpretability. This builds on that, and presents Counts Outlier Detector,
    another interpretable outlier detection method.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本文继续介绍可解释的异常值检测系列。上一篇文章（[可解释的异常值检测：频繁模式异常值因子（FPOF）](https://medium.com/towards-data-science/interpretable-outlier-detection-frequent-patterns-outlier-factor-fpof-0d9cbf51b17a)）讲解了FPOF算法，以及异常值检测和可解释性的一些基础知识。本文在此基础上，介绍了Counts异常值检测器，这是另一种可解释的异常值检测方法。
- en: 'As covered in the FPOF article, knowing *why* records are outliers can be as
    important as knowing which records are outliers. In fact, there can often be limited
    value in performing outlier detection where we cannot determine why the records
    flagged as outliers were flagged. For example, if an outlier detection system
    identifies what may be a security threat, to investigate this efficiently and
    effectively it’s necessary to know what is unusual: why this was identified as
    anomalous. Similarly where the outlier detection system identifies possible fraud,
    machine failures, scientific discoveries, unusually effective (or ineffective)
    business practices, or other outliers.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 正如FPOF文章中所述，了解*为什么*记录是异常值与知道哪些记录是异常值一样重要。事实上，如果我们无法确定为什么被标记为异常值的记录会被标记为异常值，那么异常值检测的价值往往有限。例如，如果异常值检测系统识别出可能是安全威胁的内容，为了高效、有效地调查这一问题，必须知道是什么不寻常：为什么会被识别为异常。同样地，当异常值检测系统识别出可能的欺诈行为、机器故障、科学发现、异常有效（或无效）的商业实践，或其他异常值时，也同样需要了解这些异常的原因。
- en: Although the algorithms themselves employed by detectors are usually quite understandable,
    the individual predictions are generally not. For example, standard detectors
    such as Isolation Forest (IF), Local Outlier Factor (LOF), and kth Nearest Neighbors
    (kNN), have algorithms that are straightforward to understand, but produce scores
    that may be difficult to assess, particularly with high-dimensional data. It can
    be difficult to determine why records flagged as outliers are anomalous.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管探测器本身使用的算法通常很容易理解，但单个预测结果通常并非如此。例如，标准的探测器如隔离森林（Isolation Forest，IF）、局部离群因子（Local
    Outlier Factor，LOF）和k近邻（kNN）等，虽然它们的算法很容易理解，但生成的得分可能很难评估，尤其是在高维数据中。要确定为何某些记录被标记为离群值并且是异常的，往往非常困难。
- en: In principle, it’s quite manageable to explain outliers. With most outliers,
    there are only a small set of features that have anomalous values (very few outliers
    have anomalous values in every feature). Knowing which features are unusual, and
    how these features are unusual, is generally all that’s required to understand
    why outliers are outliers, but this is, unfortunately, usually unavailable.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，解释离群值是相当可管理的。对于大多数离群值来说，只有一小部分特征具有异常值（极少数离群值在每个特征上都有异常值）。知道哪些特征是不寻常的，以及这些特征是如何不寻常的，通常就是理解为什么离群值是离群值所需的全部内容，但不幸的是，这些信息通常是不可得的。
- en: Only a small number of outlier detectors provide an explanation for the scores
    they produce. These include [FPOF](https://medium.com/towards-data-science/interpretable-outlier-detection-frequent-patterns-outlier-factor-fpof-0d9cbf51b17a)
    and a related outlier detection method based on Association Rules (both covered
    in [Outlier Detection in Python](https://www.manning.com/books/outlier-detection-in-python)),
    to give two examples. But, there are far fewer interpretable models than would
    be wished. Motivated by this, I’ve developed two interpretable models, Counts
    Outlier Detector (COD), and Data Consistency Checker, which I’m still maintaining
    today.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 只有少数离群值探测器提供它们生成的得分的解释。这些包括[FPOF](https://medium.com/towards-data-science/interpretable-outlier-detection-frequent-patterns-outlier-factor-fpof-0d9cbf51b17a)和基于关联规则的相关离群值检测方法（这两者都在[《Python中的离群值检测》](https://www.manning.com/books/outlier-detection-in-python)中有介绍），仅举两个例子。但，可解释的模型远少于人们希望的那样。出于这个原因，我开发了两个可解释的模型，计数离群值探测器（COD）和数据一致性检查器，这两个模型我至今仍在维护。
- en: They work quite a bit differently from each other but are both useful tools.
    The former is covered in this article; Data Consistency Checker will be covered
    in an upcoming article. As well, both are covered in [Outlier Detection in Python](https://www.manning.com/books/outlier-detection-in-python);
    the remainder of this article is taken from the section on Counts Outlier Detector.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的工作原理差异很大，但都是有用的工具。前者将在本文中讨论；数据一致性检查器将在即将发布的文章中介绍。此外，两者均在[《Python中的离群值检测》](https://www.manning.com/books/outlier-detection-in-python)中有涉及；本文的其余部分来自于关于计数离群值探测器的章节。
- en: Counts Outlier Detector
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计数离群值探测器
- en: The main page for Counts Outlier Detector is [https://github.com/Brett-Kennedy/CountsOutlierDetector](https://github.com/Brett-Kennedy/CountsOutlierDetector).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 计数离群值探测器的主页是[https://github.com/Brett-Kennedy/CountsOutlierDetector](https://github.com/Brett-Kennedy/CountsOutlierDetector)。
- en: 'Counts Outlier Detector (COD) is an outlier detector for tabular data, designed
    to provide clear explanations of the rows flagged as outliers and of their specific
    scores. More specifically, COD is a multivariate histogram-based model: it divides
    the data into sets of bins and identifies outliers as the records in bins with
    unusually low counts.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 计数离群值探测器（Counts Outlier Detector，COD）是一种适用于表格数据的离群值探测器，旨在为被标记为离群值的行及其具体得分提供清晰的解释。更具体来说，COD是一个基于多变量直方图的模型：它将数据分为多个区间，并通过识别计数异常低的区间中的记录来识别离群值。
- en: This is an effective, efficient, and interpretable technique for outlier detection.
    There are some very real limitations of multi-dimensional histograms, which we
    cover here, but, as we’ll also cover, these are quite addressable. Testing and
    evaluating the method has found it to be a strong detector, very often as useful
    as more standard tools, with the substantial benefit of being interpretable.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种有效、高效且可解释的离群值检测技术。多维直方图确实存在一些非常现实的局限性，我们将在这里讨论这些问题，但正如我们接下来将讨论的，这些问题是可以解决的。对该方法的测试和评估表明，它是一种强大的探测器，常常与更标准的工具一样有用，并且具有显著的可解释性优势。
- en: Introduction to histogram-based outlier detection
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于直方图的离群值检测介绍
- en: Before explaining COD, I’ll explain another, simpler histogram-based algorithm
    for outlier detection that pre-dates COD, called HBOS (Histogram-Based Outlier
    Score). This is part of the popular [PyOD](https://github.com/yzhao062/pyod) (Python
    Outlier Detection) library and is often an effective tool itself. Other histogram-based
    outlier detection algorithms exist as well, and work similarly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释COD之前，我将解释另一个较简单的基于直方图的异常值检测算法，它先于COD被提出，叫做HBOS（基于直方图的异常值分数）。这是流行的[PyOD](https://github.com/yzhao062/pyod)（Python异常值检测）库的一部分，并且通常是一个有效的工具。也存在其他基于直方图的异常值检测算法，它们的工作原理类似。
- en: 'HBOS works based on a very straightforward idea: to determine how unusual a
    row in a table is, it simply assesses how unusual each individual value in the
    row is. To do this, the values are each compared to their columns. This is done
    by first creating a histogram to represent each feature (HBOS works strictly with
    numeric data) and comparing each value to the histogram.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: HBOS基于一个非常简单的思想工作：要确定表格中的某一行有多不寻常，它只是评估该行中每个单独值有多不寻常。为此，每个值都会与其所在列进行比较。这是通过首先创建一个直方图来表示每个特征（HBOS仅处理数值数据），并将每个值与直方图进行比较来实现的。
- en: There are other means to determine how unusual a numeric value is relative to
    a table column (or other sequence of numeric values). Kernel density estimates,
    cumulative distributions, and other methods can also work well. But histograms
    are one straightforward and effective means. The other methods are covered in
    [Outlier Detection in Python](https://www.manning.com/books/outlier-detection-in-python),
    but for simplicity, and since this is what COD uses, we’ll look just at histograms
    in this article.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他方法可以确定一个数值相对于表格列（或其他数值序列）的异常程度。核密度估计、累积分布和其他方法也能很好地工作。但直方图是一个简单有效的手段。其他方法已在[Python中的异常值检测](https://www.manning.com/books/outlier-detection-in-python)中介绍，但为了简化起见，且由于COD使用的是这种方法，我们将在本文中仅讨论直方图。
- en: 'HBOS divides each feature into a set of equal-width bins. Each feature may
    then be represented by a histogram such as:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: HBOS将每个特征划分为一组等宽的区间。每个特征可以通过直方图表示，例如：
- en: '![](../Images/9e5bb3a3f01dcfa7f35c3e335a839ceb.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9e5bb3a3f01dcfa7f35c3e335a839ceb.png)'
- en: In this case, the histogram uses 20 bins; with HBOS, we would normally use between
    about 5 and 50 bins per feature. If the table has, say, 30 features, there will
    be 30 histograms such as this.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，直方图使用了20个区间；对于HBOS，我们通常会为每个特征使用大约5到50个区间。如果表格有30个特征，那么就会有30个像这样的直方图。
- en: Any values that are in bins with a very low count would be considered unusual.
    In this histogram, a value around 6.0, for example, would be considered rare,
    as it’s bin has few examples from the training data; it would be given a relatively
    high outlier score. A value of 4.0, on the other hand, would be considered very
    normal, so given a low outlier score.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 任何位于区间中计数非常低的值都会被视为不寻常。在这个直方图中，例如，6.0左右的值会被认为是稀有的，因为它所在的区间在训练数据中有很少的示例；因此，它会被赋予相对较高的异常值评分。另一方面，4.0的值会被认为是非常正常的，因此会被赋予较低的异常值评分。
- en: So, to evaluate a row, HBOS determines how unusual each individual value in
    the row is (relative to the histogram for its feature), gives each value a score,
    and sums these scores together. In this way, the rows with the most rare values,
    and with the rarest rare values, will receive the highest overall outlier scores;
    a row may receive a high overall outlier score if it has a single value that’s
    extremely rare for its column, or if it has a number of values that are moderately
    rare for their columns.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了评估一行，HBOS确定该行中每个单独值的异常程度（相对于其特征的直方图），给每个值打分，并将这些分数相加。通过这种方式，具有最多稀有值的行，以及具有最稀有稀有值的行，将获得最高的总体异常值评分；如果一行具有一个对于其列非常稀有的值，或者具有多个对于其列适度稀有的值，它可能会获得较高的总体异常值评分。
- en: 'This does mean that HBOS is only able to find one specific type of outlier:
    rows that contain one or more unusual single values; it cannot identify rows that
    contain unusual combinations of values. This is a very major limitation, but HBOS
    is able to work extremely fast, and the outliers it identifies tend to truly be
    strong outliers, even if it also misses many outliers.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着HBOS只能找到一种特定类型的异常值：包含一个或多个不寻常单一值的行；它无法识别包含不寻常值组合的行。这是一个非常大的限制，但HBOS能够非常快速地工作，并且它识别出的异常值往往是真正的强异常值，即使它也会错过许多异常值。
- en: 'Still, it’s a major limitation that HBOS will miss unusual combinations of
    values. For example, in a table describing people, a record may have an age of
    130, or a height of 7''2", and HBOS would detect these. But, a record may also
    have an age of 2 and a height of 5''10". The age and the height may both be common,
    but the combination not: it’s an example of a rare combination of two features.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但HBOS的一个主要局限性是它会忽略不寻常的值组合。例如，在描述人的表格中，某条记录可能有130岁的年龄或7英尺2英寸的身高，HBOS会检测到这些异常。但也可能有一条记录的年龄是2岁，身高是5英尺10英寸。虽然年龄和身高都很常见，但它们的组合却不常见：这是两个特征的稀有组合的一个例子。
- en: It’s also possible to have rare combinations of three, four, or more features,
    and these may be as relevant as unusual single values.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 也有可能出现三、四个或更多特征的稀有组合，这些组合可能和不寻常的单一值一样重要。
- en: Overview of the Counts Outliers Detector
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计数异常值检测器概述
- en: COD extends the idea of histogram-based outlier detection and supports multi-dimensional
    histograms. This allows COD to identify outliers that are rare combinations of
    2, 3, or more values, as well as the rare single values that can be detected by
    standard (1d) histogram-based methods such as HBOS. It can catch unusual single
    values such as heights of 7'2", and can also catch where a person has an age of
    2 and a height of 5'10".
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: COD扩展了基于直方图的异常值检测方法，支持多维直方图。这使得COD能够识别稀有的2、3个或更多值的组合的异常值，以及可以通过标准的（1维）基于直方图的方法（如HBOS）检测到的稀有单一值。它能够识别出不寻常的单一值，例如7英尺2英寸的身高，也能检测到某人年龄为2岁，身高为5英尺10英寸的情况。
- en: We look at 2d histograms first, but COD can support histograms up to 6 dimensions
    (we describe below why it does not go beyond this, and in fact, using only 2 or
    3 or 4 dimensions will often work best).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先查看二维直方图，但COD支持最多6维的直方图（我们将在下面描述为什么它不支持更多维度，实际上，通常使用2维、3维或4维会效果最好）。
- en: A 2d histogram can be viewed similarly as a heatmap. In the image below we see
    a histogram in 2d space where the data in each dimension is divided into 13 bins,
    creating 169 (13 x 13) bins in the 2d space. We can also see one point (circled)
    that is an outlier in the 2d space. This point is in a bin with very few items
    (in this case, only one item) and so can be identified as an outlier when examining
    this 2d space.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 二维直方图可以类似于热图查看。在下面的图像中，我们可以看到一个二维空间的直方图，其中每个维度的数据被分为13个桶，形成169个（13 x 13）二维空间的桶。我们还可以看到一个点（被圈住）是二维空间中的异常值。这个点在一个桶中，只有很少的项目（在这种情况下只有一个项目），因此当检查这个二维空间时，可以将其识别为异常值。
- en: '![](../Images/d25505b68a750c02b179e4442c58354e.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d25505b68a750c02b179e4442c58354e.png)'
- en: This point is not an outlier in either 1d space; it is not unusual in the x
    dimension or the y dimension, so would be missed by HBOS and other tools that
    examine only single dimensions at a time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个点在1维空间中既不是异常值，也不在x维度或y维度中不寻常，因此会被HBOS和其他仅检查单一维度的工具忽略。
- en: 'As with HBOS, COD creates a 1d histogram for each single feature. But then,
    COD also creates a 2d histogram like this for each pair of features, so is able
    to detect any unusual pairs of values. The same idea can then be applied to any
    number of dimensions. It is more difficult to draw, but COD creates 3d histograms
    for each triple of features (each bin is a cube), and so on. Again, it calculates
    the counts (using the training data) in each bin and is able to identify outliers:
    values (or combinations of values) that appear in bins with unusually low counts.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与HBOS类似，COD会为每个单一特征创建一个1维直方图。但随后，COD还会为每一对特征创建一个这样的二维直方图，因此能够检测到任何不寻常的特征对值。相同的思路也可以应用于任何维度的组合。虽然绘制起来更困难，但COD会为每组三个特征（每个桶是一个立方体）创建三维直方图，依此类推。然后，它会计算每个桶中的计数（使用训练数据），并能够识别出异常值：出现在计数异常低的桶中的值（或值的组合）。
- en: The Curse of Dimensionality
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维度灾难
- en: Although it’s effective to create histograms based on each set of 2, 3, and
    often more features, it is usually infeasible to create a histogram using all
    features, at least if there are more than about 6 or 7 features in the data. Due
    to what’s called *the curse of dimensionality*, we may have far more bins than
    data records.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管基于每一组2、3个甚至更多特征创建直方图是有效的，但通常不可能使用所有特征来创建直方图，特别是当数据中有超过6或7个特征时。由于所谓的*维度灾难*，我们可能会有比数据记录更多的桶。
- en: For example, if there are 50 features, even using only 2 bins per feature, we
    would have 2 to the power of 50 bins in a 50d histogram, which is certainly many
    orders of magnitude greater than the number data records. Even with only 20 features
    (and using 2 bins per feature), we would have 2 to the power of 20, over one million,
    bins. Consequently, we can end up with most bins having no records, and those
    bins that do have any, containing only one or two items.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果有50个特征，即使每个特征只使用2个箱子，我们在一个50维的直方图中将会有2的50次方个箱子，这显然比数据记录的数量大得多。即使只有20个特征（并且每个特征使用2个箱子），我们也会有2的20次方，超过一百万个箱子。因此，最终我们可能会发现大多数箱子没有任何记录，而有记录的箱子也只包含一两个项目。
- en: Most data is relatively skewed and there are usually associations between the
    features, so the affect won’t be as strong as if the data were spread uniformly
    through the space, but there will still likely be far too many features to consider
    at once using a histogram-based method for outlier detection.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数数据都是相对偏斜的，特征之间通常存在关联，因此其影响不会像数据在空间中均匀分布时那样强烈，但使用基于直方图的异常检测方法一次性考虑过多特征仍然可能会导致问题。
- en: Fortunately though, this is actually not a problem. It’s not necessary to create
    high-dimensional histograms; low-dimensional histograms are quite sufficient to
    detect the most relevant (and most interpretable) outliers. Examining each 1d,
    2d and 3d space, for example, is sufficient to identify each unusual single value,
    pair of values, and triple of values. These are the most comprehensible outliers
    and, arguably, the most relevant (or at least typically among the most relevant).
    Where desired (and where there is sufficient data), examining 4d, 5d or 6d spaces
    is also possible with COD.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，幸运的是，这实际上并不是问题。并不需要创建高维直方图；低维直方图就足够检测最相关的（也是最易解释的）异常值。例如，检查每个1维、2维和3维空间就足以识别每个不寻常的单一值、值对和值三元组。这些是最容易理解的异常值，并且可以说是最相关的（或者至少通常是最相关的）。如果需要（且数据足够），也可以使用COD检查4维、5维或6维空间。
- en: The COD Algorithm
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: COD算法
- en: The approach taken by COD is to first examine the 1d spaces, then the 2d spaces,
    then 3d, and so on, up to at most 6d. If a table has 50 features, this will examine
    (50 choose 1) 1d spaces (finding the unusual single values), then (50 choose 2)
    2d spaces (finding the unusual pairs of values), then (50 choose 3) 3d spaces
    (finding the unusual triples of values), and so on. This covers a large number
    of spaces, but it means each record is inspected thoroughly and that anomalies
    (at least in lower dimensions) are not missed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: COD采用的方法是先检查1维空间，再检查2维空间，然后是3维空间，依此类推，直到最多6维。如果一个表格有50个特征，那么它将检查(50选择1)个1维空间（找到不寻常的单一值），然后是(50选择2)个2维空间（找到不寻常的值对），然后是(50选择3)个3维空间（找到不寻常的值三元组），依此类推。这覆盖了大量的空间，但也意味着每一条记录都会被彻底检查，而且异常值（至少在低维空间中）不会被遗漏。
- en: Using histograms also allows for relatively fast calculations, so this is generally
    quite tractable. It can break down with very large numbers of features, but in
    this situation virtually all outlier detectors will eventually break down. Where
    a table has many features (for example, in the dozens or hundreds), it may be
    necessary to limit COD to 1d spaces, finding only unusual single values — which
    may be sufficient in any case for this situation. But for most tables, COD is
    able to examine even up to 4 or 5 or 6d spaces quite well.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用直方图还允许相对快速的计算，因此这通常是相当可行的。在特征数量非常大的情况下，它可能会出现问题，但在这种情况下，几乎所有的异常值检测器最终都会出现问题。如果一个表格有许多特征（例如几十个或几百个），可能需要将COD限制为1维空间，仅找到不寻常的单一值——在这种情况下，这可能已经足够了。但对于大多数表格，COD能够相当好地检查最多到4维、5维或6维的空间。
- en: Using histograms also eliminates the distance metrics used by many outlier detector
    methods, including some of the most well-used. While very effective in lower dimensions
    methods, such as LOF, kNN, and several others use all features at once and can
    be highly susceptible to the curse of dimensionality in higher dimensions. For
    example, kNN identifies outliers as points that are relatively far from their
    k nearest neighbors. This is a sensible and generally affective approach, but
    with very high dimensionality, the distance calculations between points can become
    highly unreliable, making it impossible to identify outliers using kNN or similar
    algorithms.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用直方图也消除了许多离群值检测方法中使用的距离度量，包括一些最常用的方法。虽然在较低维度下非常有效的方法（如LOF、kNN和其他几种方法）会一次性使用所有特征，但它们在较高维度时非常容易受到维度灾难的影响。例如，kNN通过识别与其k个最近邻距离较远的点来标记离群值。这是一种合理且通常有效的方法，但在高维度下，点与点之间的距离计算可能变得极不可靠，这使得使用kNN或类似算法识别离群值变得不可能。
- en: By examining only small dimensionalities at a time, COD is able to handle far
    more features than many other outlier detection methods.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一次仅检查较低维度，COD能够处理比许多其他离群值检测方法更多的特征。
- en: Limiting evaluation to small dimensionalities
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制评估在较低维度
- en: To see why it’s sufficient to examine only up to about 3 to 6 dimensions, we
    look at the example of 4d outliers. By *4d outliers*, I’m referring to outliers
    that are rare combinations of some four features, but are not rare combinations
    of any 1, 2, or 3 features. That is, each single feature, each pair of features,
    and each triple of features is fairly common, but the combination of all four
    features is rare.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解为什么只检查大约3到6个维度就足够了，我们可以通过4维离群值的例子来说明。*4维离群值*是指那些是四个特征的稀有组合，但不是任何1、2或3个特征的稀有组合。也就是说，每个单一特征、每对特征以及每组三个特征都相当常见，但所有四个特征的组合是稀有的。
- en: This is possible, and does occur, but is actually fairly uncommon. For most
    records that have a rare combination of 4 features, at least some subset of two
    or three of those features will usually also be rare.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可能的，且确实会发生，但实际上相当少见。对于大多数具有稀有四个特征组合的记录，至少其中两个或三个特征的子集通常也会是稀有的。
- en: 'One of the interesting things I discovered while working on this and other
    tools is that most outliers can be described based on a relatively small set of
    features. For example, consider a table (with four features) representing house
    prices, we may have features for: square feet, number of rooms, number of floors,
    and price. Any single unusual value would likely be interesting. Similarly for
    any pair of features (e.g. low square footage with a large number of floors; or
    low square feet with high price), and likely any triple of features. But there’s
    a limit to how unusual a combination of all four features can be without there
    being any unusual single value, unusual pair, or unusual triple of features.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在我进行这项工作及其他工具开发时，我发现一个有趣的事情，那就是大多数离群值可以通过相对较小的特征集合来描述。例如，考虑一个表示房价的表格（有四个特征），我们可能会有以下特征：平方英尺、房间数量、楼层数量和价格。任何单一的异常值都可能会很有趣。同样，对于任何特征对（例如，较小的平方英尺与较多楼层的组合，或较小的平方英尺与高价格的组合），以及可能的任何特征三元组也如此。但是，所有四个特征的组合能有多么不寻常，却没有任何单一特征、特征对或特征三元组不寻常，实际上是有限制的。
- en: By checking only lower dimensions we cover most of the outliers. The more dimensions
    covered, the more outliers we find, but there are diminishing returns, both in
    the numbers of outliers, and in their relevance.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仅检查较低维度，我们可以覆盖大部分离群值。覆盖的维度越多，我们发现的离群值就越多，但收益递减，不论是在离群值的数量上，还是在其相关性上。
- en: Even where some legitimate outliers may exist that can only be described using,
    say, six or seven features, they are most likely difficult to interpret, and likely
    of lower importance than outliers that have a single rare value, or single pair,
    or triple of rare values. They also become difficult to quantify statistically,
    given the numbers of combinations of values can be extremely large when working
    with beyond a small number of features.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 即使存在一些合法的离群值，这些离群值只能通过例如六个或七个特征来描述，它们通常也很难解释，并且可能比那些只有单一稀有值、单一对特征或稀有值三元组的离群值重要性低。它们也变得难以在统计上量化，因为当涉及到多个特征时，特征值的组合数量可能会非常庞大。
- en: By working with small numbers of features, COD provides a nice middle ground
    between detectors that consider each feature independently (such as HBOS, z-score,
    inter-quartile range, entropy-based tests and so on) and outlier detectors that
    consider all features at once (such as Local Outlier Factor and KNN).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过处理少量特征，COD提供了一个很好的折衷方案，介于那些独立考虑每个特征的检测器（如HBOS、z-score、四分位数范围、基于熵的测试等）和那些同时考虑所有特征的离群值检测器（如局部离群因子和KNN）之间。
- en: How COD removes redundancy in explanations
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: COD如何去除解释中的冗余
- en: Counts Outlier Detector works by first examining each column individually and
    identifying all values that are unusual with respect to their columns (the *1d
    outliers)*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 计数离群值检测器通过首先检查每一列，识别出与其列相比异常的所有值（*一维离群值*）。
- en: It then examines each pair of columns, identifying the rows with pairs of unusual
    values within each pair of columns (the *2d outliers)*. The detector then considers
    sets of 3 columns (identifying *3d outliers*), sets of 4 columns (identifying
    *4d outliers*), and so on.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它检查每一对列，识别每对列中具有异常值的行（*二维离群值*）。检测器接着考虑三列的集合（识别*三维离群值*），四列的集合（识别*四维离群值*），以此类推。
- en: At each stage, the algorithm looks for instances that are unusual, excluding
    values or combinations already flagged in lower-dimensional spaces. For example,
    in the table of people described above, a height of 7'2" would be rare. Given
    that, any combination of age and height (or height and anything else), where the
    height is 7'2", will be rare, simply because 7'2" is rare. As such, there is no
    need to identify, for example, a height of 7'2" and age of 25 as a rare combination;
    it is rare only because 7'2" is rare and reporting this as a 2d outlier would
    be redundant. Reporting it strictly as a 1d outlier (based only on the height)
    provides the clearest, simplest explanation for any rows containing this height.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个阶段，算法都会寻找异常实例，排除在低维空间中已经标记的值或组合。例如，在上面描述的人物表格中，身高7英尺2英寸会是稀有的。鉴于这一点，任何年龄和身高（或身高和其他任何东西）的组合，只要身高是7英尺2英寸，都会是稀有的，因为7英尺2英寸本身就是稀有的。因此，没有必要识别例如7英尺2英寸和25岁作为一个稀有组合；它之所以稀有，仅仅因为7英尺2英寸稀有，将其作为二维离群值报告是多余的。严格按照身高报告为一维离群值（仅基于身高）能够提供最清晰、最简单的解释，适用于包含此身高的所有行。
- en: So, once we identify 7'2" as a 1d outlier, we do not include this value in checks
    for 2d outliers, 3d outliers, and so on. The majority of values (the more typical
    heights relative to the current dataset) are, however, kept, which allows us to
    further examine the data and identify unusual combinations.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一旦我们将7英尺2英寸识别为一维离群值，就不再将该值纳入二维离群值、三维离群值等的检查中。然而，大多数值（相对于当前数据集更典型的身高）仍然被保留，这使我们能够进一步检查数据并识别异常的组合。
- en: Similarly, any rare pairs of values in 2d spaces are excluded from consideration
    in 3d and higher-dimensional spaces; any rare triples of values in 3d space will
    be excluded from 4d and higher-dimensional spaces; and so on.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，任何在二维空间中的稀有值对都不会被考虑在三维及更高维度的空间中；任何在三维空间中的稀有值三元组将在四维及更高维度的空间中被排除；依此类推。
- en: So, each anomaly is reported using as few features as possible, which keeps
    the explanations of each anomaly as simple as possible.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每个异常值都尽可能使用最少的特征进行报告，这使得每个异常的解释尽可能简单。
- en: Any row, though, may be flagged numerous times. For example, a row may have
    an unusual value in Column F; an unusual pair of values in columns A and E; another
    unusual pair of values in D and F; as well as an unusual triple of values in columns
    B, C, D. The row’s total outlier score would be the sum of the scores derived
    from these.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，任何一行都可能被多次标记。例如，一行可能在F列有一个异常值；在A列和E列有一对异常值；在D列和F列有另一对异常值；以及在B列、C列和D列有一组三个异常值。该行的总离群分数将是这些分数的总和。
- en: Interpretability
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可解释性
- en: We can identify, for each outlier in the dataset, the specific set of features
    where it is anomalous. This, then, allows for quite clear explanations. And, given
    that a high fraction of outliers are outliers in 1d or 2d spaces, most explanations
    can be presented visually (examples are shown below).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为数据集中的每个离群值识别出其异常的特征集合。这样，就能够提供非常清晰的解释。而且，鉴于大多数离群值是在一维或二维空间中的，绝大多数解释可以通过视觉方式呈现（下面会展示一些示例）。
- en: Scoring
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评分
- en: Counts Outlier Detector takes its name from the fact it examines the exact count
    of each bin. In each space, the bins with unusually low counts (if any) are identified,
    and any records with values in these bins are identified as having an anomaly
    in this sense.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 计数异常值检测器（Counts Outlier Detector）得名于它检查每个 bin 的确切计数。在每个空间中，会识别出计数异常低的 bins（如果有的话），任何在这些
    bins 中的记录都会被识别为存在异常。
- en: The scoring system then used is quite simple, which further supports interpretability.
    Each rare value or combination is scored equivalently, regardless of the dimensionality
    or the counts within the bins. Each row is simply scored based on the number of
    anomalies found.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用的评分系统非常简单，这进一步支持了可解释性。每个稀有值或组合都会被等同评分，而不考虑维度或 bins 中的计数。每一行仅根据发现的异常数量进行评分。
- en: This can loose some fidelity (rare combinations are scored the same as very
    rare combinations), but allows for significantly faster execution times and more
    interpretable results. This also avoids any complication, and any arbitrariness,
    weighting outliers in different spaces. For example, it may not be clear how to
    compare outliers in a 4d space vs in a 2d space. COD eliminates this, treating
    each equally. So, this does trade-off some detail in the scores for interpretability,
    but the emphasis of the tool is interpretability, and the effect on accuracy is
    small (as well as being positive as often as negative — treating anomalies equivalently
    provides a regularizing effect).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会丧失一些精度（稀有的组合会与非常稀有的组合得分相同），但能够显著加快执行速度，并且结果更具可解释性。这还避免了任何复杂性，避免了在不同空间中对异常值进行加权的任意性。例如，可能不清楚如何比较
    4D 空间中的异常值与 2D 空间中的异常值。COD 消除了这一问题，平等对待每个空间。因此，尽管这样做会牺牲一些得分的细节，但工具的重点是可解释性，并且对准确度的影响很小（而且通常会产生积极效果——将异常值等同处理有一种正则化效果）。
- en: By default, only values or combinations that are strongly anomalous will be
    flagged. This process can be tuned by setting a threshold parameter.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，只有强烈异常的值或组合会被标记。此过程可以通过设置阈值参数进行调整。
- en: Example
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例
- en: Here, we provide a simple example using COD, working with the [iris](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_iris.html#sklearn.datasets.load_iris)
    dataset, a toy dataset provided by scikit-learn. To execute this, the CountsOutlierDetector
    class must first be imported. Here, we then simply create an instance of CountsOutlierDetector
    and call fit_predict().
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们提供一个使用 COD 的简单示例，使用 [鸢尾花](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_iris.html#sklearn.datasets.load_iris)
    数据集，这是一个由 scikit-learn 提供的玩具数据集。要执行此操作，首先必须导入 `CountsOutlierDetector` 类。然后，我们只需创建
    `CountsOutlierDetector` 的实例，并调用 `fit_predict()`。
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The results include a score for each row in the passed dataset, as well as information
    about why the rows where flagged, and summary statistics about the dataset’s outliers
    as a whole.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 结果包括传入数据集中每一行的评分，以及标记这些行的原因信息，还包括关于数据集中异常值的总结统计。
- en: A number of sample notebooks are provided on the github page to help get you
    started, as well as help tuning the hyperparameters (as with almost all outlier
    detectors, the hyperparameters can affect what is flagged). But, generally using
    COD can be as simple as this example.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 页面提供了多个示例笔记本，帮助你入门，并帮助调整超参数（与几乎所有的异常值检测器一样，超参数可能会影响哪些数据被标记为异常）。但是，通常使用
    COD 和这个示例一样简单。
- en: The notebooks provided on github also investigate its performance in more depth
    and cover some experiments to determine how many features typically need to be
    examined at once to find the relevant outliers in a dataset. As indicated, often
    limiting analysis to 2 or 3 dimensional histograms can be sufficient to identify
    the most relevant outliers in a dataset. Tests were performed using a large number
    of datasets from OpenML.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 提供在 GitHub 上的笔记本也深入探讨了其性能，并涵盖了一些实验，旨在确定通常需要一次性检查多少个特征，才能找到数据集中相关的异常值。如所示，通常将分析限制在
    2 或 3 维的直方图中，就足以识别数据集中的最相关异常值。测试是使用来自 OpenML 的大量数据集进行的。
- en: Visual Explanations
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化解释
- en: COD provides a number of methods to help understand the outliers found. The
    first is the explain_row() API, where users can get a breakdown of the rational
    behind the score given for the specified row.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: COD 提供了多种方法，帮助理解找到的异常值。第一个是 `explain_row()` API，用户可以获得针对指定行的评分依据的详细解释。
- en: As indicated, an outlier row many have any number of anomalies. For any one-dimension
    anomalies found, bar plots or histograms are presented putting the value in context
    of the other values in the column. For further context, other values flagged as
    anomalous are also shown.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如所示，异常值行可能包含任意数量的异常值。对于每个发现的一维异常值，都会展示条形图或直方图，将该值与该列中的其他值进行对比。为了提供更多上下文，其他被标记为异常的值也会显示出来。
- en: 'The following image shows an outlier from the Examples_Counts_Outlier_Detector
    notebook on the github page (which used simple, synthetic data). This in an outlier
    in Row 1, having an unusual value in Column A. The left pane shows the distribution
    of Column A, with green vertical lines indicating the bin edges and the red vertical
    lines the flagged outliers. This example uses 7 bins (so divides numeric features
    into: ‘Very Low’, ‘Low’, ‘Med-Low’, ‘Med’, ‘Med-High’, ‘High’, ‘Very High'').'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了来自 GitHub 页面上 Examples_Counts_Outlier_Detector 笔记本的一个异常值（该笔记本使用了简单的合成数据）。这是第
    1 行的一个异常值，在列 A 中有一个不寻常的值。左侧窗格展示了列 A 的分布，绿色垂直线表示区间边界，红色垂直线表示标记的异常值。这个例子使用了 7 个区间（将数值特征划分为：‘非常低’、‘低’、‘中低’、‘中’、‘中高’、‘高’、‘非常高’）。
- en: The right pane shows the histogram. As 5 bins are empty (all values in this
    column are either ‘Very Low’ or ‘Very High’), only 2 bins are shown here. The
    plot indicates the rarity of ‘Very High’ values in this feature, which are substantially
    less common that ‘Very Low’ values and consequently considered outliers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧窗格展示了直方图。由于有 5 个区间为空（该列中的所有值都是‘非常低’或‘非常高’），这里仅显示了 2 个区间。图示表明，‘非常高’值在此特征中非常稀有，明显少于‘非常低’值，因此被视为异常值。
- en: '![](../Images/35727e511689d65786367ae3f815918c.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/35727e511689d65786367ae3f815918c.png)'
- en: For any two-dimensional anomalies found, a scatter plot (in the case of two
    numeric columns), strip plot (in the case on one numeric and one categorical column),
    or heatmap (in the case of two categorical columns) will be presented. This shows
    clearly how the value compares to other values in the 2d space.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何发现的二维异常值，会展示散点图（如果是两个数值列）、条形图（如果是一个数值列和一个类别列），或热图（如果是两个类别列）。这能清楚地显示该值与二维空间中其他值的比较。
- en: 'Shown here is an example (from the demo_OpenML notebook on the github site)
    with two numeric features. As well as the scatterplot (left pane), a heatmap (right
    pane) is shown to display the counts of each bin:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了一个例子（来自 GitHub 网站上的 demo_OpenML 笔记本），包含两个数值特征。除了散点图（左侧窗格），还显示了一个热图（右侧窗格），用于展示每个区间的计数：
- en: '![](../Images/22f7144345eae402c08113f33a1b5ed0.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/22f7144345eae402c08113f33a1b5ed0.png)'
- en: This uses the abalone dataset from OpenML ([https://www.openml.org/search?type=data&sort=runs&id=183&status=active](https://www.openml.org/search?type=data&sort=runs&id=183&status=active),
    licenced under CC BY 4.0). The row being explained (Row 2407) is shown as a star
    in both plots. In this example, 3 bins per feature were used, so the 2d space
    has 9 bins. The row being explained is in a bin with only 36 records. The most
    populated bin, for comparison, has 2212.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的是 OpenML 的海螺数据集 ([https://www.openml.org/search?type=data&sort=runs&id=183&status=active](https://www.openml.org/search?type=data&sort=runs&id=183&status=active)，依据
    CC BY 4.0 许可发布)。被解释的行（行 2407）在两个图中都作为星形显示。在此示例中，每个特征使用了 3 个区间，因此二维空间有 9 个区间。被解释的行位于一个只有
    36 条记录的区间中。相比之下，记录最多的区间包含 2212 条数据。
- en: In the scatterplot (the left pane), other records in this bin are shown in red.
    Records in other bins with unusually low counts are shown in yellow.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在散点图中（左侧窗格），该区间中的其他记录以红色显示。计数异常低的其他区间记录以黄色显示。
- en: Understanding 1d and 2d outliers is straightforward as the visualizations possible
    are quite comprehensible. Working with 3d and higher dimensions is conceptually
    similar, though it is more difficult to visualize. It is still quite manageable
    where the number of dimensions is reasonably low, but is not as straightforward
    as 1 or 2 dimensions.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 理解一维和二维异常值是直观的，因为可用的可视化方式非常易于理解。处理三维及更高维度的异常值概念上类似，尽管可视化较为困难。只要维度数合理低，依然可以管理，但不如一维或二维直观。
- en: For outliers beyond 2d, bar plots are presented, giving the counts of each combination
    of values within the current space (combination of features), giving the count
    for the flagged combination of values / bins in context.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于超过二维的异常值，将展示条形图，显示当前空间（特征组合）内每种值组合的计数，并提供标记值组合/区间的计数及其上下文。
- en: The following is part of an explanation of an outlier row identified in the
    Abalone dataset, in this case containing a 3d outlier based on the Sex, Diameter,
    and Whole_weight features.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对Abalone数据集中识别出的一个离群行的部分解释，在这种情况下，基于性别、直径和整体重量特征，包含了一个三维离群值。
- en: '![](../Images/05652be88ec21556f97b9eadb40ef997.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05652be88ec21556f97b9eadb40ef997.png)'
- en: 'The explain_features() API may also be called to drill down further into any
    of these. In this case, it provides the counts of each combination and we can
    see the combination in the plot above (Sex=I, Diameter=Med; Whole_weight=Med)
    has a count of only 12:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以调用explain_features() API，以进一步深入了解任何这些内容。在这种情况下，它提供了每种组合的计数，我们可以在上面的图表中看到，组合（Sex=I，Diameter=Med；Whole_weight=Med）的计数仅为12：
- en: '![](../Images/4101f4b8dac573245c2e0f597868ac1b.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4101f4b8dac573245c2e0f597868ac1b.png)'
- en: For the highest level of interpretability, I’d recommend limiting max_dimensions
    to 2, which will examine the dataset only for 1d and 2d outliers, presenting the
    results as one-dimensional bar plots or histograms, or two-dimensional plots,
    which allow the the most complete understanding of the space presented. However,
    using 3 or more dimensions (as with the plot for Sex, Diameter, and Whole_weight
    above) is still reasonably interpretable.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得最高水平的可解释性，我建议将max_dimensions限制为2，这样将仅检查数据集中的1维和2维离群值，并以一维条形图或直方图，或者二维图的形式呈现结果，这样可以获得对呈现空间的最完整理解。然而，使用3维或更多维度（如上面性别、直径和整体重量的图表）仍然是合理可解释的。
- en: Accuracy Experiments
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精度实验
- en: Although the strength of COD is its interpretability, it’s still important that
    the algorithm identifies most meaningful outliers and does not erroneously flag
    more typical records.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管COD的优势在于其可解释性，但算法仍然需要能够识别大多数有意义的离群值，并且不应错误地标记更多典型的记录。
- en: 'Experiments (described on the github page) demonstrate that Counts Outlier
    Detector is competitive with Isolation Forest, at least as measured with respect
    to a form of testing called *doping*: where a small number of values within real
    datasets are modified (randomly, but so as to usually create anomalous records
    — records that do not have the normal associations between the features) and testing
    if outlier detectors are able to identify the modified rows.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 实验（在github页面中描述）表明，Counts Outlier Detector与Isolation Forest具有竞争力，至少在一种被称为*doping*的测试形式中有所表现：在这种测试中，真实数据集中的少数值会被修改（随机修改，但通常会创建异常记录——即在特征之间没有正常关联的记录），并测试离群值检测器是否能够识别这些修改的行。
- en: There are other valid ways to evaluate outlier detectors, and even using the
    doping process, it can vary how the data is modified, how many records are doped,
    and so on. In these tests, COD slightly outperformed Isolation Forest, but in
    other tests Isolation Forest may do better than COD, and other detectors may as
    well. Nevertheless, this does demonstrate that COD performs well and is competitive,
    in terms of accuracy, with standard outlier detectors.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 评估离群值检测器还有其他有效的方法，即使使用dopинг过程，数据的修改方式、修改的记录数量等也可能有所不同。在这些测试中，COD略微优于Isolation
    Forest，但在其他测试中，Isolation Forest可能会比COD表现更好，其他检测器也可能如此。然而，这确实证明了COD在精度上表现良好，并且与标准离群值检测器在竞争中不相上下。
- en: Installation
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: This tool uses a single class, CountsOutlierDetector, which needs to be included
    in any projects using this. This can be done simply by copying or downloading
    the single .py file that defines it, [counts_outlier_detector.py](https://github.com/Brett-Kennedy/CountsOutlierDetector/blob/main/counts_outlier_detector.py)
    and importing the class.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 该工具使用了一个单独的类——CountsOutlierDetector，该类需要包含在任何使用该工具的项目中。可以通过复制或下载定义该类的单个.py文件，[counts_outlier_detector.py](https://github.com/Brett-Kennedy/CountsOutlierDetector/blob/main/counts_outlier_detector.py)并导入该类来实现。
- en: Conclusions
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'This detector has the advantages of:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 该检测器的优点包括：
- en: It is able to provide explanations of each outlier as clearly as possible. To
    explain why a row is scored as it is, an explanation is given using only as many
    features as necessary to explain its score.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它能够尽可能清晰地提供每个离群值的解释。为了说明一行数据的得分为何如此，给出的解释只使用了必要的特征来解释其得分。
- en: It is able to provide full statistics about each space, which allows it to provide
    full context of the outlierness of each row.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它能够提供每个空间的完整统计数据，这使得它能够提供每一行离群性的完整背景。
- en: 'It’s generally agreed in outlier detection that each detector will identify
    certain types of outliers and that it’s usually beneficial to use multiple detectors
    to reliably catch most of the outliers in a dataset. COD may be useful simply
    for this purpose: it’s a straightforward, useful outlier detector that may detect
    outliers somewhat different from other detectors.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在异常值检测中普遍认为，每个检测器会识别某些类型的异常值，通常使用多个检测器来可靠地捕捉数据集中的大部分异常值是有益的。COD可能仅仅为了这个目的而有用：它是一个简单且有用的异常值检测器，可能会检测到与其他检测器有所不同的异常值。
- en: However, interpretability is often very important with outlier detection, and
    there are, unfortunately, few options available now for interpretable outlier
    detection. COD provides one of the few, and may be worth trying for this reason.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在异常值检测中，可解释性通常非常重要，但不幸的是，目前可用于可解释的异常值检测的选项非常少。COD提供了为数不多的选择之一，因此可能值得尝试。
- en: All images are created by the author.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 所有图像均由作者创作。
