["```py\ndef reward_function(params):\n    \"\"\"\n    Example of rewarding the agent to follow center line.\n    \"\"\"\n    # set an initial small but non-negative reward\n    reward = 1e-3\n\n    # Read input parameters\n    track_width = params[\"track_width\"]\n    distance_from_center = params[\"distance_from_center\"]\n\n    # Calculate 3 markers that are at varying distances away from the center line\n    marker_1 = 0.1 * track_width\n    marker_2 = 0.25 * track_width\n    marker_3 = 0.5 * track_width\n\n    # Give higher reward if the car is closer to center line and vice versa\n    if distance_from_center <= marker_1:\n        reward += 2.0  # large positive reward when closest to center\n    elif distance_from_center <= marker_2:\n        reward += 0.25\n    elif distance_from_center <= marker_3:\n        reward += 0.05  # very small positive reward when further from center\n    else:\n        reward = -20  # likely crashed/ close to off track\n\n    return float(reward)\n```", "```py\ndef reward_function(params):\n    '''\n    Example of penalizing the agent if all four wheels are off track.\n    '''\n    # large penalty for off track\n    OFFTRACK_PENALTY = -20\n\n    reward = 1e-3\n\n    # Penalize if the car goes off track\n    if not params['all_wheels_on_track']:\n        return float(OFFTRACK_PENALTY)\n\n    # positive reward if stays on track\n    reward += 1\n\n    return float(reward)\n```", "```py\ndef reward_function(params):\n    '''\n    Example of rewarding the agent to slow down for turns\n    '''\n    reward = 1e-3\n\n    # fast on straights and slow on curves\n    steering_angle = params['steering_angle']\n    speed = params['speed']\n\n    # set a steering threshold above which angles are considered large\n    # you can change this based on your action space\n    STEERING_THRESHOLD  = 15\n\n    if abs(steering_angle) > STEERING_THRESHOLD:\n        if speed < 1:\n            # slow speeds are awarded large positive rewards\n            reward += 2.0\n        elif speed < 2:\n            # faster speeds are awarded smaller positive rewards\n            reward += 0.5\n        # reduce zigzagging behavior by penalizing large steering angles\n        reward *= 0.85\n\n    return float(reward)\n```", "```py\ndef reward_function(params):\n    '''\n    Example reward function to train a slow and steady agent\n    '''\n    STEERING_THRESHOLD = 15\n    OFFTRACK_PENALTY = -20\n\n    # initialize small non-zero positive reward\n    reward = 1e-3\n\n    # Read input parameters\n    track_width = params['track_width']\n    distance_from_center = params['distance_from_center']\n\n    # Penalize if the car goes off track\n    if not params['all_wheels_on_track']:\n        return float(OFFTRACK_PENALTY)\n\n    # Calculate 3 markers that are at varying distances away from the center line\n    marker_1 = 0.1 * track_width\n    marker_2 = 0.25 * track_width\n    marker_3 = 0.5 * track_width\n\n    # Give higher reward if the car is closer to center line and vice versa\n    if distance_from_center <= marker_1:\n        reward += 2.0\n    elif distance_from_center <= marker_2:\n        reward += 0.25\n    elif distance_from_center <= marker_3:\n        reward += 0.05\n    else:\n        reward = OFFTRACK_PENALTY  # likely crashed/ close to off track\n\n    # fast on straights and slow on curves\n    steering_angle = params['steering_angle']\n    speed = params['speed']\n\n    if abs(steering_angle) > STEERING_THRESHOLD:\n        if speed < 1:\n            reward += 2.0\n        elif speed < 2:\n            reward += 0.5\n        # reduce zigzagging behavior\n        reward *= 0.85\n\n    return float(reward)\n```", "```py\ndef reward_function(params):\n    '''\n    Example reward function to train a fast and steady agent\n    '''\n    STEERING_THRESHOLD = 15\n    OFFTRACK_PENALTY = -20\n\n    # initialize small non-zero positive reward\n    reward = 1e-3\n\n    # Read input parameters\n    track_width = params['track_width']\n    distance_from_center = params['distance_from_center']\n\n    # Penalize if the car goes off track\n    if not params['all_wheels_on_track']:\n        return float(OFFTRACK_PENALTY)\n\n    # Calculate 3 markers that are at varying distances away from the center line\n    marker_1 = 0.1 * track_width\n    marker_2 = 0.25 * track_width\n    marker_3 = 0.5 * track_width\n\n    # Give higher reward if the car is closer to center line and vice versa\n    if distance_from_center <= marker_1:\n        reward += 2.0\n    elif distance_from_center <= marker_2:\n        reward += 0.25\n    elif distance_from_center <= marker_3:\n        reward += 0.05\n    else:\n        reward = OFFTRACK_PENALTY  # likely crashed/ close to off track\n\n    # fast on straights and slow on curves\n    steering_angle = params['steering_angle']\n    speed = params['speed']\n\n    if abs(steering_angle) > STEERING_THRESHOLD:\n        if speed < 1.5:\n            reward += 2.0\n        elif speed < 2:\n            reward += 0.5\n        # reduce zigzagging behavior\n        reward *= 0.85\n\n    return float(reward)\n```", "```py\ndef reward_function(params):\n    '''\n    Example of fast agent that leaves the track and also is crash prone.\n    But it is FAAAST\n    '''\n\n # Steering penality threshold\n    ABS_STEERING_THRESHOLD = 15\n\n    reward = 1e-3\n    # Read input parameters\n    track_width = params['track_width']\n    distance_from_center = params['distance_from_center']\n\n    # Penalize if the car goes off track\n    if not params['all_wheels_on_track']:\n        return float(1e-3)\n\n    # Calculate 3 markers that are at varying distances away from the center line\n    marker_1 = 0.1 * track_width\n    marker_2 = 0.25 * track_width\n    marker_3 = 0.5 * track_width\n\n    # Give higher reward if the car is closer to center line and vice versa\n    if distance_from_center <= marker_1:\n        reward += 1.0\n    elif distance_from_center <= marker_2:\n        reward += 0.5\n    elif distance_from_center <= marker_3:\n        reward += 0.1\n    else:\n        reward = 1e-3  # likely crashed/ close to off track\n\n    # fast on straights and slow on curves\n    steering_angle = params['steering_angle']\n    speed = params['speed']\n\n    # straights\n    if -5 < steering_angle < 5:\n        if speed > 2.5:\n            reward += 2.0\n        elif speed > 2:\n            reward += 1.0\n    elif steering_angle < -15  or steering_angle > 15:\n        if speed < 1.8:\n            reward += 1.0\n        elif speed < 2.2:\n            reward += 0.5\n\n # Penalize reward if the car is steering too much\n    if abs(steering_angle) > ABS_STEERING_THRESHOLD:\n        reward *= 0.75\n\n    # Reward lower steps\n    steps = params['steps']\n    progress = params['progress']\n    step_reward = (progress/steps) * 5 * speed * 2\n\n    reward += step_reward\n\n    return float(reward)\n```"]