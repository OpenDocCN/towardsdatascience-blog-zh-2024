["```py\ndef pp_mean_iid_asymptotic(Y_labeled, Yhat_labeled, Yhat_unlabeled, alpha):\n    n = Y_labeled.shape[0]\n    N = Yhat_unlabeled.shape[0]\n    tildethetaf = Yhat_unlabeled.mean()\n    rechat = (Yhat_labeled - Y_labeled).mean() # rectifier (delta hat)\n    thetahatPP = tildethetaf - rechat # Prediction-Powered Estimator\n    sigmaftilde = np.std(Yhat_unlabeled)  # imputed std dev\n    sigmarec = np.std(Yhat_labeled -  Y_labeled) # rectifier std dev\n    hw = norm.ppf(1-alpha/2)*np.sqrt((sigmaftilde**2/N) + (sigmarec**2/n)) # normal approximation\n\n    return [thetahatPP - hw, thetahatPP + hw] # confidence interval\n```", "```py\npip install ppi-python\n```", "```py\ndef simulate_nps_scores(n, mu=3, mu2=9, std_dev=1):\n\n    # simulate each aspect of bimodal distribution\n    X1 = np.random.normal(mu, std_dev, n // 3)\n    X2 = np.random.normal(mu2, std_dev, n // 3)\n\n    X = np.concatenate([X1, X2])\n    X3 = np.ones(n - X.shape[0])  # make 1-inflated\n    X = np.concatenate([X, X3])\n\n    X = np.clip(X, a_min=1, a_max=10)  # fix to 1-10 range for NPS\n\n    return X\n\ndef simulate_recommended(mean, n):\n    return np.array([1 if random.uniform(0,1) <= mean else 0 for _ in range(n)])\n```", "```py\nN = 20000\ndata = pd.DataFrame({\n    'Overall_Rating': simulate_nps_scores(N), \n    'Recommended': simulate_recommended(0.34, N)\n})\n```", "```py\nif target_response == 'NPS':\n    Y_total = data.Overall_Rating.to_numpy()\n    Yhat_total = np.array([random.normalvariate(x, error_std_dev) for x in Y_total])\n    Yhat_total = np.array([max(min(x, 10), 1) for x in Yhat_total])\n\nelif target_response == 'reccomended':\n    Y_total = data.Recommended.to_numpy()\n\n    Yhat_total = np.array([\n        x if random.uniform(0, 1) >= error_prob else int(not x)\n        for x in Y_total\n    ])\n\nelse:\n    raise Exception('Invalid target_response')\n```", "```py\nNPS_prompt_template = lambda review: f\"\"\"Given the following review please return the Net Promoter Score (NPS).\nReturn only the integer value from 1-10 and nothing else.\n\nReview: \n{review}\n\nNPS:\"\"\"\n\nrecommended_prompt_template = lambda review: f\"\"\"Given the following review please determine if the customer would recommend the business.\nReturn only 'True' or 'False'.\n\nReview: {review}\nRecommended:\"\"\"\n```", "```py\nfor i in tqdm(range(ns.shape[0])):\n    for j in range(num_trials):\n        # Prediction-Powered Inference\n        n = ns[i]\n        rand_idx = np.random.permutation(n_total)\n        _Yhat = Yhat_total[rand_idx[:n]]\n        _Y = Y_total[rand_idx[:n]]\n        _Yhat_unlabeled = Yhat_total[n:]\n\n        ppi_ci = ppi_mean_ci(_Y, _Yhat, _Yhat_unlabeled, alpha=alpha)\n\n        classical_ci = classical_mean_ci(_Y, alpha=alpha)\n```", "```py\ndef _to_invert_ppi(n):\n    n = int(n)\n    nulls_rejected = 0\n    # Data setup\n    for i in range(num_experiments):\n        rand_idx = list_rand_idx[i]\n        _Yhat = Yhat_total[rand_idx[:n]]\n        _Y = Y_total[rand_idx[:n]]\n        _Yhat_unlabeled = Yhat_total[rand_idx[n:]]\n\n        ppi_ci = ppi_mean_ci(_Y, _Yhat, _Yhat_unlabeled, alpha=alpha)\n        if target_response == 'NPS' and  ppi_ci[0] > null_hypothesis:\n            nulls_rejected += 1\n        elif target_response == 'recommended' and  ppi_ci[0] > null_hypothesis:\n            nulls_rejected += 1\n\n    return nulls_rejected / num_experiments - statistical_power\n\nn_ppi = int(brentq(_to_invert_ppi, 100, 1000, xtol=1))\n```", "```py\nThe PPI test requires n=334 labeled data points to reject the null.\nThe classical test requires n=987 labeled data points to reject the null.\n```", "```py\nThe PPI test requires n=461 labeled data points to reject the null.\nThe classical test requires n=1000 labeled data points to reject the null.\n```"]