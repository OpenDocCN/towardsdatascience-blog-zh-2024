["```py\nimport plotly.express as px\n\npx.line(\n  ts_df, \n  title = '<b>Sessions by platforms</b>',\n  labels = {'value': 'sessions', 'os': 'platform', 'month_date': 'month'},\n  color_discrete_map={\n      'Android': px.colors.qualitative.Vivid[1],\n      'Windows': px.colors.qualitative.Vivid[2],\n      'iOS': px.colors.qualitative.Vivid[4]\n  }\n)\n```", "```py\nfig = px.bar(\n    df, \n    title = '<b>Sessions</b>',\n    labels = {'value': 'sessions', 'os': 'platform', 'month_date': 'month'}, \n    text_auto = ',.6r' # specifying format for bar labels\n)\n\nfig.update_layout(xaxis_type='category') \n# to prevent converting string to dates\nfig.update_layout(showlegend = False) \n# hiding ledend since we don't need it\n```", "```py\nfig = px.bar(df,\n  text_auto = ',.6r', \n  title = '<b>Average annual GMV</b> (Gross Merchandise Value)',\n  labels = {'country': 'region', 'value': 'average GMV in GBP'}, \n  orientation = 'h'\n)\n\nfig.update_layout(showlegend = False)\nfig.update_xaxes(visible = False) # to hide x-axes\n```", "```py\nfig = px.imshow(\n  table_df.values, \n  x = table_df.columns, # labels for x-axis\n  y = table_df.index, # labels for y-axis \n  text_auto=',.6r', aspect=\"auto\",\n  labels=dict(x=\"age group\", y=\"region\", color=\"GMV in GBP\"), \n  color_continuous_scale='pubugn',\n  title = '<b>Average annual GMV</b> (Gross Merchandise Value) in GBP'\n)\n\nfig.show()\n```", "```py\nimport plotly.graph_objects as go\n\n# creating a figure\nfig = go.Figure() \n\n# adding dashed line trace for forecast\nfig.add_trace(\n    go.Scatter(\n        mode='lines',\n        x=df.index,\n        y=df.forecast,\n        line=dict(color='#696969', dash='dot', width = 3),\n        showlegend=True,\n        name = 'forecast'\n    )\n)\n\n# adding solid line trace for factual data\nfig.add_trace(\n    go.Scatter(\n        mode='lines',\n        x=df.index,\n        y=df.fact,\n        marker=dict(size=6, opacity=1, color = 'navy'),\n        showlegend=True,\n        name = 'fact'\n    )\n)\n\n# setting title and size of layout\nfig.update_layout(\n  width = 800, \n  height = 400, \n  title = '<b>Daily Active Users:</b> forecast vs fact'\n)\n\n# specifying axis labels\nfig.update_xaxes(title = 'day')\nfig.update_yaxes(title = 'number of users')\n```", "```py\npx.area(\n  df, \n  title = '<b>Customer age</b> in Switzerland',\n  labels = {'value': 'share of users, %', \n            'age_group': 'customer age', 'month': 'month'},  \n  color_discrete_sequence=px.colors.diverging.balance\n)\n```", "```py\nfrom matplotlib import pyplot\n\nhist_range = [0, 10000]\nhist_bins = 100\n\npyplot.hist(\n    distr_df[distr_df.region == 'United Kingdom'].value.values,\n    label = 'United Kingdom',\n    alpha = 0.5, range = hist_range, bins = hist_bins,\n    color = 'navy',\n    # calculating weights to get normalised histogram\n    weights = np.ones_like(distr_df[distr_df.region == 'United Kingdom'].index)*100/distr_df[distr_df.region == 'United Kingdom'].shape[0]\n)\n\npyplot.hist(\n    distr_df[distr_df.region == 'Switzerland'].value.values,\n    label = 'Switzerland',\n    color = 'red',\n    alpha = 0.5, range = hist_range, bins = hist_bins,\n    weights = np.ones_like(distr_df[distr_df.region == 'Switzerland'].index)*100/distr_df[distr_df.region == 'Switzerland'].shape[0]\n)\n\npyplot.legend(loc = 'upper right')\npyplot.title('Distribution of customers GMV')\npyplot.xlabel('annual GMV in GBP')\npyplot.ylabel('share of users, %')\npyplot.show()\n```", "```py\nfig = go.Figure()\n\nfig.add_trace(go.Box(\n    y=distr_df[distr_df.region == 'United Kingdom'].value,\n    name=\"United Kingdom\",\n    boxpoints=False, # no data points\n    marker_color=px.colors.qualitative.Prism[0],\n    line_color=px.colors.qualitative.Prism[0]\n))\n\nfig.add_trace(go.Box(\n    y=distr_df[distr_df.region == 'Germany'].value,\n    name=\"Germany\",\n    boxpoints=False, # no data points\n    marker_color=px.colors.qualitative.Prism[1],\n    line_color=px.colors.qualitative.Prism[1]\n))\n\nfig.add_trace(go.Box(\n    y=distr_df[distr_df.region == 'France'].value,\n    name=\"France\",\n    boxpoints=False, # no data points\n    marker_color=px.colors.qualitative.Prism[2],\n    line_color=px.colors.qualitative.Prism[2]\n))\n\nfig.add_trace(go.Box(\n    y=distr_df[distr_df.region == 'Switzerland'].value,\n    name=\"Switzerland\",\n    boxpoints=False, # no data points\n    marker_color=px.colors.qualitative.Prism[3],\n    line_color=px.colors.qualitative.Prism[3]\n))\nfig.update_layout(title = '<b>Time spent on site</b> per month')\nfig.update_yaxes(title = 'time spent in minutes')\nfig.update_xaxes(title = 'region')\nfig.show()\n```", "```py\nimport plotly.graph_objects as go\n\n# scatter plot\nfig = go.Figure()\nfig.add_trace(\n    go.Scatter(\n        mode='markers',\n        x=corr_df.x,\n        y=corr_df.y,\n        marker=dict(size=6, opacity=0.1, color = 'grey'),\n        showlegend=False\n    )\n)\n\n# regression line\nfig.add_trace(\n    go.Scatter(\n        mode='lines',\n        x=linear_corr_df.x,\n        y=linear_corr_df.linear_regression,\n        line=dict(color='navy', dash='dash', width = 3),\n        showlegend=False\n    )\n)\n\nfig.update_layout(width = 600, height = 400, \n    title = '<b>Correlation</b> between revenue and customer tenure')\nfig.update_xaxes(title = 'months since registration')\nfig.update_yaxes(title = 'monthly revenue, GBP')\n```", "```py\nimport seaborn as sns\n\nsns.set_theme(style=\"darkgrid\")\n\ng = sns.jointplot(\n  x=\"x\", y=\"y\", data=corr_df,\n  kind=\"reg\", truncate=False, \n  joint_kws = {'scatter_kws':dict(alpha=0.15), 'line_kws':{'color':'navy'}},\n  color=\"royalblue\", height=7)\n\ng.set_axis_labels('months since registration', 'monthly revenue, GBP')\n```"]