- en: 'Out-of-Office Emails Are Boring: Making Them Pop with Generative AI'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/making-out-of-office-emails-pop-with-generative-ai-876d4fb81342?source=collection_archive---------10-----------------------#2024-01-09](https://towardsdatascience.com/making-out-of-office-emails-pop-with-generative-ai-876d4fb81342?source=collection_archive---------10-----------------------#2024-01-09)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I just couldn’t get myself to write yet another out-of-office message, so I
    developed an AI-powered app to make my digital presence felt while I was off on
    a month-long holiday.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://osheikhomar.medium.com/?source=post_page---byline--876d4fb81342--------------------------------)[![Omar
    Ali Sheikh](../Images/e4fe8498d467204e79a562cd0491e581.png)](https://osheikhomar.medium.com/?source=post_page---byline--876d4fb81342--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--876d4fb81342--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--876d4fb81342--------------------------------)
    [Omar Ali Sheikh](https://osheikhomar.medium.com/?source=post_page---byline--876d4fb81342--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--876d4fb81342--------------------------------)
    ·18 min read·Jan 9, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '*TLDR; This article outlines the development of a web-app for crafting non-traditional
    out-of-office emails with Generative AI. Should you choose to peruse this article,
    dear reader, you will be rewarded with a large number of words strung together
    to describe how I designed and built a Python app that utilizes GPT-4 and DALL-E
    3 for generating auto-reply messages with accompanying pictures. If, on the other
    hand, you just want to try out the app yourself, I got your back; the source code
    is up for grabs on* [*GitHub*](https://github.com/sheikhomar/roll)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/85ff7ba640459bff178059f0d2b8124e.png)'
  prefs: []
  type: TYPE_IMG
- en: A screenshot of the app I built for constructing out-of-office emails with Generative
    AI. This UI allows users to manage the auto-reply creations and programmatically
    set up Outlook out-of-office settings. Although the shown text is in Danish, the
    generative model can produce texts in other languages with a slight change in
    the prompt for the model. A short screencast of the user interface can be found
    towards the end of this article. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Embracing Generative AI for Auto-Replies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Out-of-office emails are bland.
  prefs: []
  type: TYPE_NORMAL
- en: There, I’ve said it.
  prefs: []
  type: TYPE_NORMAL
- en: But do they have to be this way? Why not use Large Language Models to sprinkle
    some flair into these messages? And for that extra pizzazz, why not use Text-to-Image
    models to generate snazzy images that accompany these texts?
  prefs: []
  type: TYPE_NORMAL
- en: With generative models just a few API calls away, making auto-reply emails pop
    couldn’t be easier. In this article, I’ll show you how. We’ll take Python and
    Open AI’s API for a test drive. We’ll create whimsical yet professional out-of-office
    emails and integrate them into Outlook. And for those who prefer to dive straight
    into the code, it’s all there for you on [GitHub](https://github.com/sheikhomar/roll).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/sheikhomar/roll?source=post_page-----876d4fb81342--------------------------------)
    [## GitHub - sheikhomar/roll: A Gen AI-based app for adding flair to your auto-reply
    messages'
  prefs: []
  type: TYPE_NORMAL
- en: ROLL takes care of your Outlook inbox, dutifully informing others while you’re
    out of the office, whether on a holiday, in a day-long workshop, or just taking
    a long nap after a hearty lunch.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/sheikhomar/roll?source=post_page-----876d4fb81342--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: What is the Endgame here?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As any self-respecting software engineer knows, we can’t get into the technical
    wizardry before we know what we want to achieve.
  prefs: []
  type: TYPE_NORMAL
- en: '**Goal 1:** We want to get an LLM to whip up Danish texts that tickle the funny
    bone. Not only that, it would be neat to pair these messages with relevant images,
    because who would not appreciate cartoonish images in their inbox?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Goal 2:** Quality is vital. Especially since these auto-reply messages are
    sent from my work inbox. Outputs from current AI models are far from perfect.
    Even powerful LLMs like GPT-4 occasionally trip over the grammar rules in Danish.
    We need make sure that the generated content is both correct and appropriate.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Goal 3:** Anyone who wrestled with Outlook knows the absurd number of clicks
    it takes to manually change out-of-office settings. Automation is not just a buzzword
    here, but as necessary as a cup of Espresso on a Monday morning.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Goal 4:** Even if generative models cooked up the perfect auto-reply email,
    the magic will soon wear off, if the same text is served every time. So, we want
    the emails to change frequently. Either every time an auto-reply is sent or on
    a schedule, say, every 24 hours.'
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we’ll focus on goals 1 to 3\. We’ll save the scheduling part
    of the project for a future article because it can get quite complicated and deserves
    its own write-up.
  prefs: []
  type: TYPE_NORMAL
- en: How to Stack Code Blocks Without Toppling the Tower?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Requirements gathering: check. Time to code, right?'
  prefs: []
  type: TYPE_NORMAL
- en: Wrong!
  prefs: []
  type: TYPE_NORMAL
- en: We can’t just start typing away like caffeinated code monkeys. We need to think
    about how to structure our code. We are engineers, after all.
  prefs: []
  type: TYPE_NORMAL
- en: 'A quick drawing on a blank endpaper of the book *C# 4.0 The Complete Reference
    —* which, by the way, is an excellent book for adjusting the height of computer
    monitors — yields a structure with three ‘layers’:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8682194c03c0fabd7260f1037f1e5e1d.png)'
  prefs: []
  type: TYPE_IMG
- en: A drawing that maps out our strategy for organizing the code into independent
    units, [each with its own responsibility.](https://en.wikipedia.org/wiki/Single_responsibility_principle)
    Image created by yours truly.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom layer are the components that deal with external systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Generate AI API** is a unit of abstraction for the generative models. In
    this project, we’ll rely on OpenAI’s models. Specifically, GPT-4 for drafting
    the texts and DALL-E 3 for the visuals in our auto-replies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Repository** serves as our digital library to store our creations. We’ll
    keep things simple and store everything as files on disk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outlook Client** is our interface with Microsoft Outlook. It allows us to
    set the out-of-office settings programmatically, thereby automating what would
    otherwise be a click-fest worthy of a League of Legends tournament.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the middle layer, we have a service layer, which contains the components
    that perform all the heavy lifting:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Content Generator** churns out texts, but also generates images that accompany
    these texts. It relies on the Generative AI component to deliver its output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File Downloader** is necessary as DALL-E’s creations have a shelf-life of
    just 24 hours. This component downloads these fleeting masterpieces off the internet
    before they vanish into thin air.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image Optimizer** trims the excess bytes off of images generated by DALL-E.
    This can be done by resizing them and maybe applying a quantization algorithm.
    The idea is to make emails containing images faster to transmit over the wire.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML Creator** is responsible for formatting a given text message and an
    optimized image as HTML text ready to be sent as an auto-reply email.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capping it all off at the top layer is the **User Interface**, our command-and-control
    center, where we oversee everything. Here, we ensure that when the LLM decides
    to produce prose containing made-up words that almost seem to be, but not entirely,
    Danish, we can step in and save the day.
  prefs: []
  type: TYPE_NORMAL
- en: The UI also allows us to generate new images based on the text. And most importantly,
    this is where we can configure the out-of-office settings in Outlook with a click
    of a button — freeing up precious seconds for other rather enjoyable cognitive
    endeavors such as optimizing exact *k*-nearest-neighbor search algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have laid out the software design , it’s time for coding.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s roll!
  prefs: []
  type: TYPE_NORMAL
- en: How to Build the Tower Brick by Brick?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section details in broad strokes how to implement each component described
    in the previous section. The aim is not to explain each line of code in detail
    but to provide enough context to clarify the intention of what is happening in
    the code. The comments in the code and naming should cover the rest. If that is
    not the case, you are welcome to direct a comment my way.
  prefs: []
  type: TYPE_NORMAL
- en: Generative AI API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To implement the Generative AI component, we can go down the well-trodden path
    of utilizing libraries like [LangChain](https://github.com/langchain-ai/langchain)
    and [OpenAI’s official Python SDK](https://github.com/openai/openai-python). Instead,
    let’s veer off onto another, more well-structured trail and use [AIConfig](https://github.com/lastmile-ai/aiconfig).
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, AIConfig emphasizes on managing the Generative AI parts of a
    system through configuration files. This should strike a chord with senior software
    engineers. By decoupling the behavior of the AI from the application code, we
    get a more maintainable codebase, which is a cornerstone of high-quality software
    engineering. Plus, the config-driven approach structures our experiments and allows
    us to tweak the prompts faster without changing our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'If this piqued your curiosity, check out Sarmad’s insightful article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://blog.lastmileai.dev/open-sourcing-aiconfig-6fbab53a59f7?source=post_page-----876d4fb81342--------------------------------)
    [## Open-sourcing AIConfig'
  prefs: []
  type: TYPE_NORMAL
- en: A config-driven, source-control-friendly AI application development framework
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: blog.lastmileai.dev](https://blog.lastmileai.dev/open-sourcing-aiconfig-6fbab53a59f7?source=post_page-----876d4fb81342--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'With AIConfig, the code for interacting with the AI becomes refreshingly simple.
    We just need to instantiate an instance of `AIConfigRuntime` from a configuration
    file, and then issue calls to the appropriate model using named settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Banking on AIConfig in our project, the Generative AI component boils down to
    a few lines of code. For this reason, we are not going to write a custom wrapper
    code for this component, as we would have, if we were implementing it with LangChain.
    Less headache and no need to hurl choice words at LangChain for its convoluted
    design and shaky abstractions. Another delightful upside of using AIConfig is
    that we don’t have to roll out our own configuration logic e.g. with [Hydra](https://github.com/facebookresearch/hydra).
  prefs: []
  type: TYPE_NORMAL
- en: Data Repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Data Repository ensures that our content can be stored and retrieved reliably
    as files on disk. It uses a data class named `AutoReplyRecord` to organize the
    information and JSON as the serialization format. Our implementation `DataRepository`
    exposes CRU operations, i.e., the standard CRUD operations but without allowing
    for deletion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Outlook Client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Automating Outlook becomes child’s play, when you have a tool like [exchangelib](https://github.com/ecederstrand/exchangelib).
    It is a Python library that lets you interact with the Microsoft Exchange API
    like a champ. An excellent piece of software that we’ll use in this project.
  prefs: []
  type: TYPE_NORMAL
- en: For this particular app, we just want to play with Outlook’s out-of-office settings.
    Therefore, we’ll put together a wrapper class that provides two pieces of functionality;
    backing up the current out-of-office settings and applying new settings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Content Generator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, to the heart of our project: the Content Generator. We need generate two
    types of content. First, we craft an auto-reply text using GPT-4\. Then, we let
    DALL-E 3 generate an image incorporating elements from the generated text.'
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, DALL-E 3 has a [limit on its prompt](https://cookbook.openai.com/articles/what_is_new_with_dalle_3).
    To work around this, we use GPT-4 to craft a concise prompt for DALL-E 3 that
    incorporates aspects extracted from a given text.
  prefs: []
  type: TYPE_NORMAL
- en: 'This process requires three distinct calls to the AI models:'
  prefs: []
  type: TYPE_NORMAL
- en: '`generate-text` asks GPT-4 to concoct new text that can be used in an auto-reply
    email.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate-dall-e-prompt` calls GPT-4, prompting it to come up with a prompt
    designed specifically for DALL-E 3 based on our generated text from the first
    call. This is a bit meta, like writing code to generate code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate-image` asks DALL-E 3 to generate an image that should accompany the
    auto-reply message. Here, we use prompt generated by the `generate-dall-e-prompt`
    call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We’ll let AIConfig orchestrate the entire process. For that, it needs a configuration
    file that describes how to achieve our desired result. We create a configuration
    file that contains three named prompts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It is relatively straightforward to read the configuration file, once you understand
    the configuration schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[## AIConfig Specification | AIConfig'
  prefs: []
  type: TYPE_NORMAL
- en: aiconfig files are source-control friendly JSON documents that contain generative
    AI model settings, prompt inputs and outputs, and flexible multi-purpose metadata.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: aiconfig.lastmileai.dev](https://aiconfig.lastmileai.dev/docs/overview/ai-config-format?source=post_page-----876d4fb81342--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we construct a class that exposes two main methods: `generate_message`
    and `generate_image`. Inside these methods, we inject our configuration file into
    AIConfig and let it perform its magic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: File Downloader
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just like there are numerous programming language, there are a plethora of
    ways to download a file from the internet with Python. But as a wise engineer
    may say: “Choose the tool as you would choose your programming language, carefully
    and with regard to your project’s requirements”. We’ll roll with the asynchronous
    [aiohttp](https://github.com/aio-libs/aiohttp) library paired with [tqdm](https://github.com/tqdm/tqdm)
    for that satisfying visual feedback of download progress, because why the hell
    not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Image Optimizer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can reduce the file sizes of DALL-E 3 creations significantly by resizing
    and quantizing them. With [Pillow](https://github.com/python-pillow/Pillow), these
    two operations require few lines of code. We wrap these in a class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: HTML Creator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we generate some text and pair it with an image, we transform the content
    into a single email artifact. The alternative, using linked images, entails figuring
    out how to host images for our out-of-office emails. Is it worth it? Not for a
    project of this scale.
  prefs: []
  type: TYPE_NORMAL
- en: We can easily sidestep the hassle of image hosting. [MIME](https://en.wikipedia.org/wiki/MIME)
    is a standard that allows us to combine text and images by constructing an HTML-based
    email with the image embedded in the markup.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the email layout, we create an external file to use as an HTML template.
    No point in hard-coding it, as nobody wants that code smell lingering around.
    This template contains three customizable fields: one for the text and the other
    two fields for the image.'
  prefs: []
  type: TYPE_NORMAL
- en: We give the text a touch of HTML styling. Nothing too gaudy, just enough to
    make it have the proper spacing. To encode the image binary into text so it can
    be embedded in the markup, we apply Base64.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: User Interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last missing piece is the user interface. For this, we use [Streamlit](https://github.com/streamlit/streamlit)
    to create a basic web interface as our needs are simple:'
  prefs: []
  type: TYPE_NORMAL
- en: A neat list displaying previously crafted digital masterpieces.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons to cook up a pair of fresh text message and image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A place to tweak the text message to ironing out any creases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A button to set out-of-office setting in Outlook programmatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The UI makes use of all of our components to deliver the above functionality.
    In the code listing below, I’ve tried to spare you, dear reader, the nitty-gritty
    of the entire code. If you are interested, you are welcome to peruse the full
    implementation on [GitHub](https://github.com/sheikhomar/roll/blob/main/tools/streamlit_ui.py):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Below is a screencast of the user interface. The sidebar on the left is a gallery,
    which displays our past creations. Clicking the edit (✏️) button in the sidebar
    brings the content to the main stage on the right. Here, we can tweak the existing
    message or conjure up a new one, along with its visual counterpart. You can easily
    let the LLM produce texts in other languages, just tweak the prompt in the AIConfig
    file as discussed in the article. The `Set out-of-office` button takes the displayed
    content and sets it as our Outlook out-of-office message.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e622741baaabb1c6bf3a07fd21bec94d.png)'
  prefs: []
  type: TYPE_IMG
- en: A short screencast of the user interface, courtesy of yours truly.
  prefs: []
  type: TYPE_NORMAL
- en: Time to Wrap Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We went through the process of developing a Python program that creates atypical
    out-of-office emails using GPT-4 and DALL-E 3.
  prefs: []
  type: TYPE_NORMAL
- en: Sure, we could slap together a monstrous 1000-line script to achieve our goals
    quickly. But we didn’t. We followed our software engineering principles — ingrained
    into us by years of brainwashing, and eager to do the same for the new generation
    of wide-eyed software engineers.
  prefs: []
  type: TYPE_NORMAL
- en: Instinctively, we recalled that software engineering is more about thoughtful
    design than mere coding. Therefore, we started the undertaking by carefully considering
    how to structure the code.
  prefs: []
  type: TYPE_NORMAL
- en: We attempted to organize our code into classes, using descriptive names and
    type hints for clarity. Trying to write as little code as possible, we relied
    on other engineers’ work by using their Python libraries to solve our problems.
  prefs: []
  type: TYPE_NORMAL
- en: While we’ve set aside the scheduling aspect for a later, unspecified date, we’ve
    laid a solid foundation. Our app can generate whimsical yet professional auto-replies
    with relevant images. On top of that, it allows us to seamlessly integrate the
    emails into Outlook with a single click of a button.
  prefs: []
  type: TYPE_NORMAL
- en: So, next time you’re away — whether on a holiday, in a full-day workshop, or
    just taking a nap after a hearty lunch — why not let Generative AI generate your
    auto-relies, which may leave your colleagues smiling and, perhaps, wanting more.
  prefs: []
  type: TYPE_NORMAL
- en: '*Thank you for reading. If you fancy more articles like this in the future,
    follow me on Medium or connect on* [*LinkedIn*](https://www.linkedin.com/in/osheikhomar/)*.*'
  prefs: []
  type: TYPE_NORMAL
