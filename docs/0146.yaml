- en: 'Visualizing Routes on Interactive Maps with Python: Part 1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/visualizing-routes-on-interactive-maps-with-python-part-1-44f8d25d0761?source=collection_archive---------2-----------------------#2024-01-16](https://towardsdatascience.com/visualizing-routes-on-interactive-maps-with-python-part-1-44f8d25d0761?source=collection_archive---------2-----------------------#2024-01-16)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A pragmatic guide to interactive data visualization for transportation problems
    with Folium
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@carlosjuribe?source=post_page---byline--44f8d25d0761--------------------------------)[![Carlos
    Jimenez Uribe](../Images/902c5f4ac5d404dd99916f145be6756c.png)](https://medium.com/@carlosjuribe?source=post_page---byline--44f8d25d0761--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--44f8d25d0761--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--44f8d25d0761--------------------------------)
    [Carlos Jimenez Uribe](https://medium.com/@carlosjuribe?source=post_page---byline--44f8d25d0761--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--44f8d25d0761--------------------------------)
    ¬∑20 min read¬∑Jan 16, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3d98e632e08ebe44fd2fb3edfc7b2b72.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image generated by DALL¬∑E 3 with author‚Äôs prompt: ‚Äúa route in Paris on top
    of an interactive map‚Äù'
  prefs: []
  type: TYPE_NORMAL
- en: 'üëÅÔ∏è **This is article #6 of the series covering the project ‚Äú**[**An Intelligent
    Decision Support System for Tourism in Python**](https://medium.com/@carlosjuribe/list/an-intelligent-decision-support-system-for-tourism-in-python-b6ba165b4236)**‚Äù.**
    Please note **the present article is self-contained and independent of the previous
    ones in the series**, so you can read it and code along without needing to read
    the previous ones. Just ignore any references to previous articles when you encounter
    them.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This article is two things at once: **a tutorial on using** `**folium**` **to
    display routes**, and **a guide to *incremental* data visualization**, where the
    priorities are to (1) have something *working*, then (2) something *useful*, and
    only then (3) something *beautiful*. As such, this guide will be a valuable tool
    for people developing **general routing applications**, especially when the goal
    is **to have a prototype, fast**. One such routing application is [**trip plan
    optimization**](https://medium.com/@carlosjuribe/plan-an-optimal-trip-for-your-next-holidays-with-the-help-of-operations-research-and-python-481b1ea38fef),
    the unifying theme of this article series. I invite you to take a look at it if
    you want to learn about how to design and incrementally build a decision support
    system from scratch. If, however, you only want to **visualize routes in an interactive
    way for faster time-to-insights**, this article will demonstrate **a quick but
    powerful approach** to doing so‚Äîbecause I know you need to get it *done*, and
    then get it *good*. Part 2 will demonstrate a **slower but more robust approach**
    to doing the same.'
  prefs: []
  type: TYPE_NORMAL
- en: Table of contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1\. Previous sprint recap](#136d)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[2\. Data and dependencies set up](#fe23)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[3\. Showing routes on maps: a pragmatic approach](#aa07)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[3.1 Displaying **sites**](#85d2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.2 Displaying **routes**](#9910)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.3 Enriching the map with **interactive information**](#601f)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.4 Dealing with closed routes, a.k.a. **tours**](#97a1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3.5 **Bonus:** Adding **KPIs** to the map](#d73b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4\. Conclusion (or planning for next sprint)](#6468)'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1\. Previous sprint recap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the [previous article](/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9),
    we created an optimizer class *√† la* scikit-learn to solve the Traveling Salesman
    Problem (TSP) for an arbitrary set of locations in just one simple method call.
    Long story short, if you have a dataframe with site locations, **this optimizer
    can be ‚Äúfitted‚Äù to those locations to automatically provide the optimal (minimal
    distance) tour**. For more details see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9?source=post_page-----44f8d25d0761--------------------------------)
    [## A classy approach to solving Traveling Salesman Problems effectively with
    Python'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the TSP model in a scikit-learn-like fashion to ease the building
    and solving of routing optimization‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9?source=post_page-----44f8d25d0761--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of it, we concluded that, even though **solving the TSP in** [**a
    one-liner**](/a-classy-approach-to-solving-traveling-salesman-problems-effectively-dbb44e7d30b9#:~:text=this%20one%2Dliner%20has%20you%20covered%3A)
    **is super convenient**, the output of such optimizer was not enough for a finished
    prototype. We needed a way to visualize that output quickly, to intuitively verify
    it and share it with others. Hence, that need is what motivates the goal of this
    sprint, the sixth in the series: take the output of the optimizer, *i.e.*, a **route
    in the form of ordered locations, and show it graphically on a map**. Note that
    the optimizer‚Äôs output, a dataframe storing the optimal route, is now our input,
    and the output we need to make is the route displayed on a map. The input is general:
    just **an ordered sequence of locations** that could represent any kind of route:
    the stops a transit bus does on any given day, the set of addresses a postal service
    worker visits to deliver the mail, the path a rider of a food delivery company
    travels to service many residencies. What matters to us is **the visualization
    of *generic* routes**, and we‚Äôll develop the functionality to do that in this
    article.'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Data and dependencies set up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 2.1 Install dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We‚Äôll use the beautiful [Folium library](http://localhost:8888/files/TWDS/traveling_tourist_problem/link/to/pip?_xsrf=2%7C7eacd5cc%7Ca559055af22bb4f0efe1c6967f5f14f6%7C1704496168)
    to create maps, which uses the [Leaflet.js](http://localhost:8888/files/TWDS/traveling_tourist_problem/link/to/library?_xsrf=2%7C7eacd5cc%7Ca559055af22bb4f0efe1c6967f5f14f6%7C1704496168)
    library under the hood to allow Python programmers to easily create interactive
    maps. We‚Äôll also need [Geopy](https://geopy.readthedocs.io/en/stable/), a powerful
    geocoding library (which you already installed if you created the [virtual environment](https://medium.com/@carlosjuribe/plan-optimal-trips-automatically-with-python-and-operations-research-models-part-2-fc7ee8198b6c#:~:text=I%20recommend%20creating%20a%20separate%20virtual%20environment%20in%20which%20to%20install%20all%20the%20libraries%20needed%20to%20follow%20the%20articles%20in%20this%20series.%20Copy%20this%20text)
    at the beginning of the series). Both are standard packages installable through
    `pip` or `conda`. Choose one of these two commands for installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 2.2 Prepare input data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the introductory example, let‚Äôs take a set of famous sites in Paris.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f2d9238f1bc6fcf3ac1ae326dfc8493a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Note:** every image in this article is by the author, unless otherwise stated.'
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs see a ‚Äúquick‚Äù way to plot these sites on a map using `folium`.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Showing routes on maps: a pragmatic approach'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In case you are not following this article series, let me point out that we‚Äôre
    following an **agile approach** in the creation of a decision support system,
    so we build it incrementally in so-called ‚Äúsprints‚Äù. This entails we first want
    to arrive at **a working prototype that solves the** [***minimum valuable problem***](https://medium.com/@carlosjuribe/plan-an-optimal-trip-for-your-next-holidays-with-the-help-of-operations-research-and-python-481b1ea38fef#:~:text=a%20workable%20solution.-,2.2.%20Identifying%20the%20Minimum%20Valuable%20Problem,start%20designing%20a%20minimum%20viable%20product%20that%20will%20be%20also%20valuable.,-To%20plan%20the)
    for a trip planning system. This prototype can‚Äôt be considered complete until
    we have a minimalist visualization functionality, hence this article. **Once we
    have the prototype ready**, *i.e.*, once the first version of the system is usable
    in a way that adds marginal value, we can start **perfecting its implementation
    to make it easy to extend**, so we can *add to the system more realistic features*
    of the real, more general problem. Thus, we‚Äôre interested now in *a good enough
    way* ‚Äî not the *definitive* way ‚Äî to display a route on a map in some meaningful
    manner. The *more definite way* will come in part 2 and part 3, where we will
    refactor the code created here so it follows an [object-oriented design](https://en.wikipedia.org/wiki/Object-oriented_programming)
    (custom types and classes) that can better handle the growing complexity of the
    routes that emerge from the addition of more details and requirements to the trip
    planning problem. But for now, this article (part 1) attempts to demonstrate a
    pragmatic and quicker way of creating interactive routes with Python. Let‚Äôs see
    how.
  prefs: []
  type: TYPE_NORMAL
- en: 3.1 Displaying sites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We first need to create a map of Paris. We can center it at the average location
    of our group of sites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, to display the sites on top of it, we create one marker for each of the
    sites, and add it to the map. Markers only need a location, but to quickly recognize
    which site is at each marker, we pass the site name to the `tooltip` attribute,
    so we see a pop-up with the name of the site any time we hover over the markers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1677ba0c1b0696e0817d650c5184d455.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 6.1.** Site markers on top of the map'
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you can zoom in and out, and move around the map if you need to,
    with the `+ | -` buttons in the upper-left corner and by click-and-drag.
  prefs: []
  type: TYPE_NORMAL
- en: 3.2 Displaying routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The sites we just displayed aren‚Äôt really ordered, but let‚Äôs pretend they are.
    Let‚Äôs say the dataframe contains **a route in the city**, where the numbers in
    the index indicate the visit order of those sites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4b98ed2d3e943684bc81b0493cbd4858.png)'
  prefs: []
  type: TYPE_IMG
- en: Now the sites are ‚Äúconnected‚Äù in a specific order (the visit order), so we should
    also represent that fact in the map by **adding lines connecting consecutive stops
    in the route**. These lines, or more precisely, ‚Äúsegments‚Äù, are created with `folium.PolyLine`
    objects. To add them to the map in one go we create some more columns in `df_route`,
    holding the information of the "next stops", so each stop is mapped to its following
    stop, constituting a route segment. That way, **each row can store info about
    both the stops and the segments of the route**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/eed33700b4b1559bf081ba43f77ce8f8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For a fixed row, the first three columns hold information for the ‚Äúcurrent‚Äù
    site, and the next three columns hold information for the ‚Äúnext site‚Äù in the route.
    This allows us to create a marker *and* a segment in the same for-loop iteration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/70230ad30828b59b0859ed5cd8b56318.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 6.2.** Site markers connected through lines'
  prefs: []
  type: TYPE_NORMAL
- en: Now the order in which the stops are visited is clear, and when you hover over
    each line with the mouse you see which two stops the line is connecting. The same
    is true for markers, the names of the sites they reference are displayed when
    hovering over them.
  prefs: []
  type: TYPE_NORMAL
- en: 3.3 Enriching the map with interactive information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is all well and good to get a rough idea of what the route looks like,
    but we can make the map a bit more insightful with little extra effort by **adding
    more information that can be displayed interactively**. For starters, where does
    the route start? With the current view, it‚Äôs not straightforward which of the
    sites is the ‚Äúinitial one‚Äù. There are two markers that are connected to only one
    segment, so it must be one of these, but we‚Äôd have to look at the dataframe to
    distinguish the ‚Äústart‚Äù from the ‚Äúfinish‚Äù site. A better way is to **indicate
    the initial site with a special icon** so that we can recognize it at a glance.
    We do that by adding a `folium.Icon` object to each marker, making the initial
    site have a distinct icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/dfa8722beb98a4ee063af5e7c0f896d2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 6.3.** Route with stop markers colored by type'
  prefs: []
  type: TYPE_NORMAL
- en: At a glance, it‚Äôs clear now that the route starts at the marker with a ‚Äúhome‚Äù
    icon. Let‚Äôs exploit the interactivity a little further by showing some more information
    on the map that helps us understand the route even better. The basic info we‚Äôll
    add is the **distances between stops** and **the visit order number of each stop**.
    Since we have in each row of `df_route_segments` both the starting and ending
    points of segments, we can easily add a column with the distance between consecutive
    stops.
  prefs: []
  type: TYPE_NORMAL
- en: '***For readers interested in the current article only (*i.e.*, not in the past
    articles)****, I have declared the function* `*ellipsoidal_distance*` *below.
    If, on the contrary, you''ve followed along in the article series, you already
    know about* [*that function*](/compute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e#:~:text=Here%E2%80%99s%20a%20function%20that%20computes%20the%20ellipsoidal%20distance%20between%20point%201%20and%20point%202%2C%20in%20meters%3A)*,
    as we developed it (and made the case for it) in* [*the article on computing distance
    matrices*](/compute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e)*.
    Feel free to re-use that function here, to avoid duplicated code. To get the distance
    in meters between location* `*loc1*` *and location* `*loc2*`*, you just need to:*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`***from*** *geoutils* ***import*** *GeoAnalyzer*`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '`*distance* ***=*** *GeoAnalyzer.****ellipsoidal_distance****(loc1, loc2)*`'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The function `ellipsoidal_distance` accepts two locations (two tuples of coordinates)
    and returns the [geodesic distance](https://en.wikipedia.org/wiki/Geodesic) between
    them, in meters. For a more in-depth explanation and *justification* of the geodesic
    distance, I invite you to read the [article where we created it](/compute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e):'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/compute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e?source=post_page-----44f8d25d0761--------------------------------)
    [## Compute the Distance Matrix of a Set of Sites from Their Coordinates in Python'
  prefs: []
  type: TYPE_NORMAL
- en: Estimate the distance between any pair of sites from their geographical coordinates
    as a stepping stone to solving‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/compute-the-distance-matrix-of-a-set-of-sites-from-their-coordinates-in-python-d5fc92a0ba9e?source=post_page-----44f8d25d0761--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add the new column `''distance_seg''` because we have both endpoints
    of the segment in each row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5fdf24994639e120b905277d9b1395b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Having this new column, we can take their values and include them in the string
    we pass to `tooltip` when creating the lines of the map, thereby **making each
    segment‚Äôs distance available at the tip of the cursor**. While we''re at it, let''s
    add the "stop numbers" to the markers too, so that more context is given to each
    marker on the overall route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/87b5e9ccfc0b1c831442855f6e50e9e8.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 6.4.** Interactive information popping up when hovering over a marker'
  prefs: []
  type: TYPE_NORMAL
- en: Note how we‚Äôve used a bit of HTML to render the ‚Äúhover text‚Äù displayed on markers
    and lines more nicely.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/34dadd5309a7e1769f25ef83838b095d.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 6.5.** Interactive information popping up when hovering over a route
    segment'
  prefs: []
  type: TYPE_NORMAL
- en: 'The current behavior seems general enough to be encapsulated into some helper
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 3.4 Dealing with closed routes, a.k.a. tours
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What happens if we have a dataframe `df_route` representing a **closed tour**,
    *i.e.*, a route that starts and ends at the same site? How will the map reflect
    that? Let''s build such a dataframe and test it. We take the previous `df_route`,
    having an open route, and add a new row at the end with the same info as in the
    first row, thus making the route closed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bcca8409f3c17da3142f7e5454f8f0f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Thanks to setting `ignore_index=True`, the index number, which represents the
    visit order, has been incremented in one unit automatically. Now we just proceed
    as before, creating the map, but this time with our new helper function `plot_route_on_map`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b7a7a6f6de4a883ea751087295a450b3.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 6.6.** The blue marker indicating the initial site is buried by the
    red marker of the final site'
  prefs: []
  type: TYPE_NORMAL
- en: 'It works *almost fine,* becausethe new line representing the ‚Äúclosing‚Äù segment
    is created as it should, but there‚Äôs a problem with the markers: **a new red marker
    is added on top of the previously added blue marker for the initial site**, hiding
    it. This is simply how Folium works, adding elements on top of elements (notice
    how the marker‚Äôs shadow is darker for the ‚Äòhotel‚Äô than for the other markers,
    a subtle way of saying that there‚Äôs more than one marker in that location). To
    avoid losing that helpful blue ‚Äúhome‚Äù icon indicating the starting stop of the
    route, we need to skip adding the last marker (after the `for`-loop ends) *only
    when the last stop coincides with the starting site of the route*. We can do that
    by checking the condition directly, on `df_route`, and by only adding this last
    marker **if the route is not closed**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After editing `plot_route_on_map` as indicated above, the desired behavior
    is restored, *i.e.*, the ‚Äúhome‚Äù icon for the initial site is not overridden by
    the last stop in the tour:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0a7ea8abc0572b2ea3188d82e3a8df86.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 6.7.** Marker signaling the initial site is visible again'
  prefs: []
  type: TYPE_NORMAL
- en: With this final view, *we can easily know the distance between two consecutive
    stops* (and the sites it‚Äôs connecting) *with just one move of the cursor*. Besides,
    *we can check the chronological order in which sites are visited just by hovering
    over them*. **This interactivity can help us evaluate the quality of the routes
    we deal with, regardless of the routing problem at hand.**
  prefs: []
  type: TYPE_NORMAL
- en: '3.5 Bonus: Adding KPIs to the map'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To cap it all, let‚Äôs add a feature that can make the map even more insightful.
  prefs: []
  type: TYPE_NORMAL
- en: There‚Äôs always information that is not directly associated with any site or
    segment in a route, but with the route as a whole. This information is important
    to know about too, and tends to be global properties, like IDs or names, or relevant
    metrics associated with the routes. We can display them too on a folium map with
    a simple trick.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If we want to display information that isn‚Äôt linked to any single marker or
    line, but that pertains to the route as a whole, we can **add it as text blocks
    in folium maps**. This is useful for business dashboards, for example, where one
    usually wants to display things like **the name/ID of the route or various metrics
    that attempt to summarize it** in some relevant sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, I‚Äôll add at the top-left corner a **title for the map**, and
    at the bottom-right corner **two very basic KPIs for routes**: the *number of
    stops* and the *total distance* it traverses. We define the names of the different
    pieces of text we want to display (in the `TAG_` constants), and extract their
    respective values from `df_route_segments`, the dataframe having all the "segments
    data":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For each piece of text we want to add, we need to convert it to HTML and add
    it to the map in a special way. The string having the HTML code for the text needs
    to go inside a `folium.Element`. These are the steps: (1) Make a *basic* HTML
    string with the info to be displayed, (2) style it with more HTML, and (3) add
    it to the map‚Äôs root HTML element. I know, talking about maps gets me lost too,
    so let‚Äôs just do it.'
  prefs: []
  type: TYPE_NORMAL
- en: '**üí°Tip:** If you‚Äôre using Jupyter Notebook or Lab, I recommend you use the
    `IPython.display.HTML` class to gain quick feedback on your HTML code, like this:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Adding a title to the map
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, create the basic HTML string for the title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Second, style this basic HTML string as you wish. Here, I want the title to
    be black, located at the top-left of the map, and, **for improved readability,
    I want the text to have some background white shadow:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a80195cb4a8cdd736d9e79e6042ac78b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 6.8.** Title of the map, invariant to zoom level'
  prefs: []
  type: TYPE_NORMAL
- en: 'That looks nice. Now, the same thing for the KPIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding KPIs to the map**'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we did before, first, we create the basic HTML string for the KPIs. For
    this case, the display will be different, and of course, it depends on personal
    taste: I like my KPIs displayed horizontally at the bottom-right of the map. Feel
    free to change the style parameters to ones that suit your aesthetic preferences.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The style is very similar, the only change is a slightly smaller font size.
    We keep the white background shadow as it‚Äôs key for the clarity of the KPIs displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/113d40a7fb08134fb884cabf905fb1b0.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 6.9.** KPIs on top of the map, invariant to zoom level'
  prefs: []
  type: TYPE_NORMAL
- en: Alright, this is starting to look great! Let‚Äôs combine both the title and KPIs
    now!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b7446aa528e9fd1534d9d3f85362f53f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 6.10.** Summary information of the route, title at the top and KPIs
    at the bottom, invariant to zoom level'
  prefs: []
  type: TYPE_NORMAL
- en: 'Thanks to the text we‚Äôve added, the map now conveys more useful information
    on the route (and looks more professional, doesn‚Äôt it?). Without even moving the
    mouse, **we can see valuable information on the corners; and thanks to interactivity,
    with a very quick hovering around, we can see the names and visiting order of
    the different sites, as well as the distance between any pair of stops**. *Let‚Äôs
    make this functionality* ***reusable*** *by wrapping it up into helper functions*,
    and let‚Äôs create a new, more general function, `display_route_on_map`, that will
    create a map like `plot_route_on_map` did, with the added option of including
    the name and KPI information to the map. First, the functions to obtain the HTML
    strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can control the addition of the title and KPIs to the map with the attribute
    `include_kpis` of the new function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let‚Äôs do a final test of our `display_route_on_map` function with a tour on
    a different city: **New York**. The dataframe below has a set of iconic sites
    of the city (and a random hotel) in no particular order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/401caa233636364b644aaf54e86c5e26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With the dataframe of the route ready, a nice visualization is just a single
    function call away:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/712885bbfb26632d9d605e6015d2e28b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 6.11.** Interactive map for a random route in New York'
  prefs: []
  type: TYPE_NORMAL
- en: 'We get a simple, yet powerful visualization of the route on top of Manhattan.
    At a glance, we know how much distance the route covers, and we don‚Äôt even need
    to bother counting red markers: the ‚ÄúNum stops‚Äù KPI is telling us already. For
    more context, **all markers and route segments are interactive and will display
    some useful information in pop-ups** when we caringly pass our mouse over them.
    Mission accomplished!'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Conclusion (or planning for next sprint)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we‚Äôve developed a pragmatic approach to taking generic routes
    stored in dataframes and displaying them on top of maps using interactive markers
    and segments that help us gain more context and get more information. If that
    was all you were after, I hope I‚Äôve served you well and you‚Äôre able to expand
    on it for your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: If you‚Äôre a reader of the [‚Äú**An Intelligent Decision Support System for Tourism
    in Python**‚Äù article series](https://medium.com/@carlosjuribe/list/an-intelligent-decision-support-system-for-tourism-in-python-b6ba165b4236),
    and you want to keep learning **applied prescriptive analytics** through the building
    of a trip planning system, please keep on reading, as in the next sprint **we‚Äôre
    going to integrate this mapping functionality with the Traveling Salesman Optimizer**
    we created in the previous sprint, so we can easily evaluate the optimal tours
    we generate. Stay tuned to witness the *tour de force* we‚Äôre gonna build together!
  prefs: []
  type: TYPE_NORMAL
- en: '![Carlos Jimenez Uribe](../Images/5bbb2a597db31fdc3ff42b2ff8a4aa78.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Carlos Jimenez Uribe](https://medium.com/@carlosjuribe?source=post_page-----44f8d25d0761--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: An intelligent decision support system for tourism in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://medium.com/@carlosjuribe/list/an-intelligent-decision-support-system-for-tourism-in-python-b6ba165b4236?source=post_page-----44f8d25d0761--------------------------------)6
    stories![](../Images/4d41d313535ec5ba63dd9f3d2c823d70.png)![](../Images/f50edafda4058f43f32e514b3400fbbd.png)![](../Images/84bde15c0216d8a1a8bba8a299b5ba52.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading, and see you in the next one! üìàüòä
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to follow me, ask me questions, **give me feedback**, or contact me
    on [LinkedIn](https://www.linkedin.com/in/carlosjuribe/).
  prefs: []
  type: TYPE_NORMAL
