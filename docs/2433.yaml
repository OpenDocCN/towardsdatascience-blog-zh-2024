- en: Getting Started with Powerful Data Tables in Your Python Web Apps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在你的 Python Web 应用中入门强大的数据表格
- en: 原文：[https://towardsdatascience.com/getting-started-with-powerful-data-tables-in-your-python-web-apps-1e48dc44caf2?source=collection_archive---------1-----------------------#2024-10-06](https://towardsdatascience.com/getting-started-with-powerful-data-tables-in-your-python-web-apps-1e48dc44caf2?source=collection_archive---------1-----------------------#2024-10-06)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/getting-started-with-powerful-data-tables-in-your-python-web-apps-1e48dc44caf2?source=collection_archive---------1-----------------------#2024-10-06](https://towardsdatascience.com/getting-started-with-powerful-data-tables-in-your-python-web-apps-1e48dc44caf2?source=collection_archive---------1-----------------------#2024-10-06)
- en: Using AG Grid to build a Finance app in pure Python with Reflex
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 AG Grid 在纯 Python 中与 Reflex 构建金融应用
- en: '[](https://medium.com/@tgotsman12?source=post_page---byline--1e48dc44caf2--------------------------------)[![Tom
    Gotsman](../Images/c19e7853986a9b242c91b7479765fddf.png)](https://medium.com/@tgotsman12?source=post_page---byline--1e48dc44caf2--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--1e48dc44caf2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--1e48dc44caf2--------------------------------)
    [Tom Gotsman](https://medium.com/@tgotsman12?source=post_page---byline--1e48dc44caf2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@tgotsman12?source=post_page---byline--1e48dc44caf2--------------------------------)[![Tom
    Gotsman](../Images/c19e7853986a9b242c91b7479765fddf.png)](https://medium.com/@tgotsman12?source=post_page---byline--1e48dc44caf2--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--1e48dc44caf2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--1e48dc44caf2--------------------------------)
    [Tom Gotsman](https://medium.com/@tgotsman12?source=post_page---byline--1e48dc44caf2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--1e48dc44caf2--------------------------------)
    ·6 min read·Oct 6, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--1e48dc44caf2--------------------------------)
    ·6分钟阅读·2024年10月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a43f1c7b91e88cd20e85272af6acbe18.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a43f1c7b91e88cd20e85272af6acbe18.png)'
- en: 'These past few months, I’ve been exploring various data visualization and manipulation
    tools for web applications. As a Python developer, I often need to handle large
    datasets and display them in interactive, customizable tables. One question that
    consistently bothered me was: How can I build a powerful data grid UI that integrates
    seamlessly with my Python backend?'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几个月里，我一直在探索用于 Web 应用的各种数据可视化和操作工具。作为一名 Python 开发者，我经常需要处理大规模数据集并将其显示在交互式、可定制的表格中。一直困扰我的一个问题是：如何构建一个强大的数据网格
    UI，与我的 Python 后端无缝集成？
- en: There are countless options out there to build sophisticated data grids, but
    as a Python engineer, I have limited experience with JavaScript or any front-end
    framework. I was looking for a way to create a feature-rich data grid using only
    the language I’m most comfortable with — Python!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多选项可以构建复杂的数据网格，但作为一名 Python 工程师，我对 JavaScript 或任何前端框架的经验有限。我在寻找一种方法，利用我最熟悉的语言——Python，来创建一个功能丰富的数据网格！
- en: 'I decided to use Reflex, an open-source framework that lets me build web apps
    entirely in Python. What’s more, Reflex now offers integration with [AG Grid](https://www.ag-grid.com),
    a feature-rich data grid library designed for displaying and manipulating tabular
    data in web applications which offers a wide array of functionalities including:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定使用 Reflex，一个开源框架，允许我完全使用 Python 构建 Web 应用。更重要的是，Reflex 现在提供与 [AG Grid](https://www.ag-grid.com)
    的集成，AG Grid 是一个功能丰富的数据网格库，旨在 Web 应用中显示和操作表格数据，提供一系列功能，包括：
- en: '- In-place cell editing'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '- 原地单元格编辑'
- en: '- Real-time data updates'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '- 实时数据更新'
- en: '- Pagination and infinite scrolling'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '- 分页和无限滚动'
- en: '- Column filtering, reordering, resizing, and hiding'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '- 列过滤、重新排序、调整大小和隐藏'
- en: '- Row grouping and aggregation'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '- 行分组与聚合'
- en: '- Built-in theming'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '- 内建主题'
- en: '***Disclaimer:*** *I work as a Founding Engineer at Reflex where I contribute
    to the open-source framework.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '***免责声明：*** *我在 Reflex 担任创始工程师，负责贡献开源框架。*'
- en: In this tutorial we will cover how to build a full Finance app from scratch
    in pure Python to display stock data in an interactive grid and graph with advanced
    features like sorting, filtering, and pagination — Check out the full live [app](https://ag-grid-app.reflex.run)
    and [code](https://github.com/reflex-dev/reflex-examples/tree/main/ag_grid_finance).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将介绍如何从头开始构建一个完整的金融应用程序，使用纯 Python 显示股票数据，并通过交互式网格和图表提供排序、筛选和分页等高级功能——查看完整的实时
    [应用程序](https://ag-grid-app.reflex.run) 和 [代码](https://github.com/reflex-dev/reflex-examples/tree/main/ag_grid_finance)。
- en: '**Setup**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置**'
- en: First we import the necessary libraries, including yfinance for fetching the
    stock data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入必要的库，包括用于获取股票数据的 yfinance。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Fetching and transforming data**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**获取并转换数据**'
- en: Next, we define the State class, which contains the application’s state and
    logic. The `fetch_stock_data` function fetches stock data for the specified companies
    and transforms it into a format suitable for display in AG Grid. We call this
    function when clicking on a button, by linking the `on_click` trigger of the button
    to this state function.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义了 `State` 类，它包含应用程序的状态和逻辑。`fetch_stock_data` 函数获取指定公司的股票数据，并将其转换为适合在
    AG Grid 中显示的格式。我们通过将按钮的 `on_click` 触发器与该状态函数连接，来调用此函数。
- en: We define state variables, any fields in your app that may change over time
    (A State Var is directly rendered into the frontend of the app).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了状态变量，它们表示应用程序中可能随时间变化的字段（状态变量会直接渲染到应用程序的前端）。
- en: The `data` state variable stores the raw stock data fetched from Yahoo Finance.
    We transform this data to round the values and store it as a list of dictionaries,
    which is the format that AG Grid expects. The transformed data is sorted by date
    and ticker in descending order and stored in the `dict_data` state variable.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`data` 状态变量存储了从 Yahoo Finance 获取的原始股票数据。我们将这些数据转换为四舍五入的值，并将其存储为字典列表，这是 AG Grid
    所期望的格式。转换后的数据按日期和股票代码降序排列，并存储在 `dict_data` 状态变量中。'
- en: The `datetime_now` state variable stores the current datetime when the data
    was fetched.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime_now` 状态变量存储了数据获取时的当前日期和时间。'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Defining the AG Grid columns**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义 AG Grid 列**'
- en: '![](../Images/410489edcdb8b2cad6343e9d68d6e819.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/410489edcdb8b2cad6343e9d68d6e819.png)'
- en: Columns of AG Grid by Author
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 按作者显示的 AG Grid 列
- en: The `column_defs` list defines the columns to be displayed in the AG Grid. The
    `header_name` is used to set the header title for each column. The `field` key
    represents the id of each column. The `filter` key is used to insert the filter
    feature.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`column_defs` 列表定义了要在 AG Grid 中显示的列。`header_name` 用于设置每一列的标题。`field` 键表示每一列的
    id。`filter` 键用于插入筛选功能。'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Displaying AG Grid**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**显示 AG Grid**'
- en: '![](../Images/3e62e5927a59fff92bcf2004f089b96e.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3e62e5927a59fff92bcf2004f089b96e.png)'
- en: AG Grid by Author
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 按作者展示 AG Grid
- en: Now for the most important part of our app, AG Grid itself!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是我们应用程序中最重要的部分，AG Grid 本身！
- en: • `id` is required because it uniquely identifies the Ag-Grid instance on the
    page
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: • `id` 是必需的，因为它唯一标识页面上的 Ag-Grid 实例
- en: • `column_defs` is the list of column definitions we defined earlier
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: • `column_defs` 是我们之前定义的列定义列表
- en: • `row_data` is the data to be displayed in the grid, which is stored in the
    `dict_data` State var
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: • `row_data` 是要在网格中显示的数据，存储在 `dict_data` 状态变量中。
- en: • `pagination`, `pagination_page_size` and `pagination_page_size_selector` parameters
    enable pagination with specific variables in the grid
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: • `pagination`、`pagination_page_size` 和 `pagination_page_size_selector` 参数启用具有特定变量的分页功能
- en: • `theme` enables you to set the theme of the grid
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: • `theme` 允许你设置网格的主题
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Changing AG Grid Theming**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**更改 AG Grid 主题**'
- en: '![](../Images/7f28782cd14effe58aa9a24b70c22562.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7f28782cd14effe58aa9a24b70c22562.png)'
- en: Changing AG Grid Theme by Author
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 按作者更改 AG Grid 主题
- en: We set `theme` using the `grid_theme` State var in the `rx.select` component.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在 `rx.select` 组件中使用 `grid_theme` 状态变量来设置 `theme`。
- en: Every state var has a built-in function to set it’s value for convenience, called
    `set_VARNAME`, in this case `set_grid_theme`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 每个状态变量都有一个内置函数来设置它的值，方便使用，函数名称为 `set_VARNAME`，在此情况下是 `set_grid_theme`。
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Showing Company Data in a Graph**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**以图表显示公司数据**'
- en: '![](../Images/5acd3ed80718d6d637cb82546383d0ea.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5acd3ed80718d6d637cb82546383d0ea.png)'
- en: Showing 6 Months of Selected Company Data by Author
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 按作者显示所选公司过去6个月的数据
- en: The `on_selection_changed` event trigger, shown in the AG grid code above, is
    called when the user selects a row in the grid. This calls the function `handle_selection`
    method in the State class, which sets the `selected_rows` state var to the new
    selected row and calls the function `update_line_graph`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上面 AG Grid 代码中显示的 `on_selection_changed` 事件触发器，在用户选择网格中的一行时调用。这会调用 `State` 类中的
    `handle_selection` 方法，将 `selected_rows` 状态变量设置为新选择的行，并调用 `update_line_graph` 方法。
- en: The `update_line_graph` function gets the relevant ticker and uses it to set
    the `company` state var. The Date, Mid, and DateDifference data for that company
    for the past 6 months is then set to the state var `dff_ticker_hist`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`update_line_graph` 函数获取相关的股票代码，并使用它来设置 `company` 状态变量。然后，该公司的过去 6 个月的日期、平均值和
    DateDifference 数据被设置到状态变量 `dff_ticker_hist` 中。'
- en: Finally it is rendered in an `rx.recharts.line_chart`, using `rx.recharts.error_bar`
    to show the DateDifference data which are the highs and the lows for the day.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最终它呈现在一个 `rx.recharts.line_chart` 中，使用 `rx.recharts.error_bar` 显示 DateDifference
    数据，即当天的最高值和最低值。
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Conclusion
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Using AG Grid inside the Reflex ecosystem empowered me as a Python developer
    to create sophisticated, data-rich web applications with ease. Whether you’re
    building complex dashboards, data analysis tools, or an application that demands
    powerful data grid capabilities, Reflex AG Grid has you covered.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Reflex 生态系统中使用 AG Grid 让我作为一个 Python 开发者能够轻松创建复杂、数据丰富的 Web 应用程序。无论你是在构建复杂的仪表盘、数据分析工具，还是需要强大数据网格功能的应用程序，Reflex
    AG Grid 都能满足你的需求。
- en: I’m excited to see what you’ll build with Reflex AG Grid! Share your projects,
    ask questions, and join the discussion in our [community forums](https://forum.reflex.dev).
    Together, let’s push the boundaries of what’s possible with Python web development!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我很高兴看到你将使用 Reflex AG Grid 创建的项目！分享你的项目，提问，加入我们[社区论坛](https://forum.reflex.dev)的讨论。让我们一起推动
    Python Web 开发的边界！
- en: If you have questions, please comment them below or message me on Twitter at
    [@tgotsman12](https://twitter.com/tgotsman12) or on [LinkedIn](https://www.linkedin.com/in/tom-gotsman/).
    Share your app creations on social media and tag me, and I’ll be happy to provide
    feedback or help retweet!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有问题，请在下方评论或通过 Twitter 联系我[@tgotsman12](https://twitter.com/tgotsman12)或通过[LinkedIn](https://www.linkedin.com/in/tom-gotsman/)。在社交媒体上分享你的应用创作并标记我，我很乐意提供反馈或帮助转发！
