- en: Getting Started with Powerful Data Tables in Your Python Web Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/getting-started-with-powerful-data-tables-in-your-python-web-apps-1e48dc44caf2?source=collection_archive---------1-----------------------#2024-10-06](https://towardsdatascience.com/getting-started-with-powerful-data-tables-in-your-python-web-apps-1e48dc44caf2?source=collection_archive---------1-----------------------#2024-10-06)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using AG Grid to build a Finance app in pure Python with Reflex
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@tgotsman12?source=post_page---byline--1e48dc44caf2--------------------------------)[![Tom
    Gotsman](../Images/c19e7853986a9b242c91b7479765fddf.png)](https://medium.com/@tgotsman12?source=post_page---byline--1e48dc44caf2--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--1e48dc44caf2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--1e48dc44caf2--------------------------------)
    [Tom Gotsman](https://medium.com/@tgotsman12?source=post_page---byline--1e48dc44caf2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--1e48dc44caf2--------------------------------)
    ·6 min read·Oct 6, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a43f1c7b91e88cd20e85272af6acbe18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'These past few months, I’ve been exploring various data visualization and manipulation
    tools for web applications. As a Python developer, I often need to handle large
    datasets and display them in interactive, customizable tables. One question that
    consistently bothered me was: How can I build a powerful data grid UI that integrates
    seamlessly with my Python backend?'
  prefs: []
  type: TYPE_NORMAL
- en: There are countless options out there to build sophisticated data grids, but
    as a Python engineer, I have limited experience with JavaScript or any front-end
    framework. I was looking for a way to create a feature-rich data grid using only
    the language I’m most comfortable with — Python!
  prefs: []
  type: TYPE_NORMAL
- en: 'I decided to use Reflex, an open-source framework that lets me build web apps
    entirely in Python. What’s more, Reflex now offers integration with [AG Grid](https://www.ag-grid.com),
    a feature-rich data grid library designed for displaying and manipulating tabular
    data in web applications which offers a wide array of functionalities including:'
  prefs: []
  type: TYPE_NORMAL
- en: '- In-place cell editing'
  prefs: []
  type: TYPE_NORMAL
- en: '- Real-time data updates'
  prefs: []
  type: TYPE_NORMAL
- en: '- Pagination and infinite scrolling'
  prefs: []
  type: TYPE_NORMAL
- en: '- Column filtering, reordering, resizing, and hiding'
  prefs: []
  type: TYPE_NORMAL
- en: '- Row grouping and aggregation'
  prefs: []
  type: TYPE_NORMAL
- en: '- Built-in theming'
  prefs: []
  type: TYPE_NORMAL
- en: '***Disclaimer:*** *I work as a Founding Engineer at Reflex where I contribute
    to the open-source framework.*'
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial we will cover how to build a full Finance app from scratch
    in pure Python to display stock data in an interactive grid and graph with advanced
    features like sorting, filtering, and pagination — Check out the full live [app](https://ag-grid-app.reflex.run)
    and [code](https://github.com/reflex-dev/reflex-examples/tree/main/ag_grid_finance).
  prefs: []
  type: TYPE_NORMAL
- en: '**Setup**'
  prefs: []
  type: TYPE_NORMAL
- en: First we import the necessary libraries, including yfinance for fetching the
    stock data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Fetching and transforming data**'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we define the State class, which contains the application’s state and
    logic. The `fetch_stock_data` function fetches stock data for the specified companies
    and transforms it into a format suitable for display in AG Grid. We call this
    function when clicking on a button, by linking the `on_click` trigger of the button
    to this state function.
  prefs: []
  type: TYPE_NORMAL
- en: We define state variables, any fields in your app that may change over time
    (A State Var is directly rendered into the frontend of the app).
  prefs: []
  type: TYPE_NORMAL
- en: The `data` state variable stores the raw stock data fetched from Yahoo Finance.
    We transform this data to round the values and store it as a list of dictionaries,
    which is the format that AG Grid expects. The transformed data is sorted by date
    and ticker in descending order and stored in the `dict_data` state variable.
  prefs: []
  type: TYPE_NORMAL
- en: The `datetime_now` state variable stores the current datetime when the data
    was fetched.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Defining the AG Grid columns**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/410489edcdb8b2cad6343e9d68d6e819.png)'
  prefs: []
  type: TYPE_IMG
- en: Columns of AG Grid by Author
  prefs: []
  type: TYPE_NORMAL
- en: The `column_defs` list defines the columns to be displayed in the AG Grid. The
    `header_name` is used to set the header title for each column. The `field` key
    represents the id of each column. The `filter` key is used to insert the filter
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Displaying AG Grid**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3e62e5927a59fff92bcf2004f089b96e.png)'
  prefs: []
  type: TYPE_IMG
- en: AG Grid by Author
  prefs: []
  type: TYPE_NORMAL
- en: Now for the most important part of our app, AG Grid itself!
  prefs: []
  type: TYPE_NORMAL
- en: • `id` is required because it uniquely identifies the Ag-Grid instance on the
    page
  prefs: []
  type: TYPE_NORMAL
- en: • `column_defs` is the list of column definitions we defined earlier
  prefs: []
  type: TYPE_NORMAL
- en: • `row_data` is the data to be displayed in the grid, which is stored in the
    `dict_data` State var
  prefs: []
  type: TYPE_NORMAL
- en: • `pagination`, `pagination_page_size` and `pagination_page_size_selector` parameters
    enable pagination with specific variables in the grid
  prefs: []
  type: TYPE_NORMAL
- en: • `theme` enables you to set the theme of the grid
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Changing AG Grid Theming**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7f28782cd14effe58aa9a24b70c22562.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing AG Grid Theme by Author
  prefs: []
  type: TYPE_NORMAL
- en: We set `theme` using the `grid_theme` State var in the `rx.select` component.
  prefs: []
  type: TYPE_NORMAL
- en: Every state var has a built-in function to set it’s value for convenience, called
    `set_VARNAME`, in this case `set_grid_theme`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Showing Company Data in a Graph**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5acd3ed80718d6d637cb82546383d0ea.png)'
  prefs: []
  type: TYPE_IMG
- en: Showing 6 Months of Selected Company Data by Author
  prefs: []
  type: TYPE_NORMAL
- en: The `on_selection_changed` event trigger, shown in the AG grid code above, is
    called when the user selects a row in the grid. This calls the function `handle_selection`
    method in the State class, which sets the `selected_rows` state var to the new
    selected row and calls the function `update_line_graph`.
  prefs: []
  type: TYPE_NORMAL
- en: The `update_line_graph` function gets the relevant ticker and uses it to set
    the `company` state var. The Date, Mid, and DateDifference data for that company
    for the past 6 months is then set to the state var `dff_ticker_hist`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally it is rendered in an `rx.recharts.line_chart`, using `rx.recharts.error_bar`
    to show the DateDifference data which are the highs and the lows for the day.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using AG Grid inside the Reflex ecosystem empowered me as a Python developer
    to create sophisticated, data-rich web applications with ease. Whether you’re
    building complex dashboards, data analysis tools, or an application that demands
    powerful data grid capabilities, Reflex AG Grid has you covered.
  prefs: []
  type: TYPE_NORMAL
- en: I’m excited to see what you’ll build with Reflex AG Grid! Share your projects,
    ask questions, and join the discussion in our [community forums](https://forum.reflex.dev).
    Together, let’s push the boundaries of what’s possible with Python web development!
  prefs: []
  type: TYPE_NORMAL
- en: If you have questions, please comment them below or message me on Twitter at
    [@tgotsman12](https://twitter.com/tgotsman12) or on [LinkedIn](https://www.linkedin.com/in/tom-gotsman/).
    Share your app creations on social media and tag me, and I’ll be happy to provide
    feedback or help retweet!
  prefs: []
  type: TYPE_NORMAL
