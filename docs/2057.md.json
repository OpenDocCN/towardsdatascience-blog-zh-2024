["```py\nmodel = SentenceTransformer('clip-ViT-B-32')\n```", "```py\ndef generate_clip_embeddings(images_path, model):\n\n    image_paths = glob(os.path.join(images_path, '**/*.jpg'), recursive=True)\n\n    embeddings = []\n    for img_path in image_paths:\n        image = Image.open(img_path)\n        embedding = model.encode(image)\n        embeddings.append(embedding)\n\n    return embeddings, image_paths\n\nIMAGES_PATH = '/path/to/images/dataset'\n\nembeddings, image_paths = generate_clip_embeddings(IMAGES_PATH, model)\n```", "```py\ndef create_faiss_index(embeddings, image_paths, output_path):\n\n    dimension = len(embeddings[0])\n    index = faiss.IndexFlatIP(dimension)\n    index = faiss.IndexIDMap(index)\n\n    vectors = np.array(embeddings).astype(np.float32)\n\n    # Add vectors to the index with IDs\n    index.add_with_ids(vectors, np.array(range(len(embeddings))))\n\n    # Save the index\n    faiss.write_index(index, output_path)\n    print(f\"Index created and saved to {output_path}\")\n\n    # Save image paths\n    with open(output_path + '.paths', 'w') as f:\n        for img_path in image_paths:\n            f.write(img_path + '\\n')\n\n    return index\n\nOUTPUT_INDEX_PATH = \"/content/vector.index\"\nindex = create_faiss_index(embeddings, image_paths, OUTPUT_INDEX_PATH)\n```", "```py\ndef load_faiss_index(index_path):\n    index = faiss.read_index(index_path)\n    with open(index_path + '.paths', 'r') as f:\n        image_paths = [line.strip() for line in f]\n    print(f\"Index loaded from {index_path}\")\n    return index, image_paths\n\nindex, image_paths = load_faiss_index(OUTPUT_INDEX_PATH)\n```", "```py\ndef retrieve_similar_images(query, model, index, image_paths, top_k=3):\n\n    # query preprocess:\n    if query.endswith(('.png', '.jpg', '.jpeg', '.tiff', '.bmp', '.gif')):\n        query = Image.open(query)\n\n    query_features = model.encode(query)\n    query_features = query_features.astype(np.float32).reshape(1, -1)\n\n    distances, indices = index.search(query_features, top_k)\n\n    retrieved_images = [image_paths[int(idx)] for idx in indices[0]]\n\n    return query, retrieved_images\n```", "```py\nquery = 'ball'\nquery, retrieved_images = retrieve_similar_images(query, model, index, image_paths, top_k=3)\nvisualize_results(query, retrieved_images)\n```", "```py\nquery ='/content/drive/MyDrive/Colab Notebooks/my_medium_projects/Image_similarity_search/image_dataset/pexels-w-w-299285-889839.jpg'\nquery, retrieved_images = retrieve_similar_images(query, model, index, image_paths, top_k=3)\nvisualize_results(query, retrieved_images)\n```"]