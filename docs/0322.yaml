- en: Faster DataFrame Serialization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更快的 DataFrame 序列化
- en: 原文：[https://towardsdatascience.com/faster-dataframe-serialization-75205b6b7c69?source=collection_archive---------3-----------------------#2024-02-03](https://towardsdatascience.com/faster-dataframe-serialization-75205b6b7c69?source=collection_archive---------3-----------------------#2024-02-03)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/faster-dataframe-serialization-75205b6b7c69?source=collection_archive---------3-----------------------#2024-02-03](https://towardsdatascience.com/faster-dataframe-serialization-75205b6b7c69?source=collection_archive---------3-----------------------#2024-02-03)
- en: Read and write dataframes up to ten times faster than Parquet with StaticFrame
    NPZ
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 StaticFrame NPZ 格式读取和写入 DataFrame，速度比 Parquet 快多达十倍
- en: '[](https://medium.com/@flexatone?source=post_page---byline--75205b6b7c69--------------------------------)[![Christopher
    Ariza](../Images/35208ace15080724e4cd6690e43d6502.png)](https://medium.com/@flexatone?source=post_page---byline--75205b6b7c69--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--75205b6b7c69--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--75205b6b7c69--------------------------------)
    [Christopher Ariza](https://medium.com/@flexatone?source=post_page---byline--75205b6b7c69--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@flexatone?source=post_page---byline--75205b6b7c69--------------------------------)[![Christopher
    Ariza](../Images/35208ace15080724e4cd6690e43d6502.png)](https://medium.com/@flexatone?source=post_page---byline--75205b6b7c69--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--75205b6b7c69--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--75205b6b7c69--------------------------------)
    [Christopher Ariza](https://medium.com/@flexatone?source=post_page---byline--75205b6b7c69--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--75205b6b7c69--------------------------------)
    ·9 min read·Feb 3, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--75205b6b7c69--------------------------------)
    ·9分钟阅读·2024年2月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d871807aea2d8d30a15f56c423e23e87.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d871807aea2d8d30a15f56c423e23e87.png)'
- en: Photo by Author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的照片
- en: The Apache Parquet format provides an efficient binary representation of columnar
    table data, as seen with widespread use in Apache Hadoop and Spark, AWS Athena
    and Glue, and Pandas DataFrame serialization. While Parquet offers broad interoperability
    with performance superior to text formats (such as CSV or JSON), it is as much
    as ten times slower than NPZ, an alternative DataFrame serialization format introduced
    in [StaticFrame](https://github.com/static-frame/static-frame).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Parquet 格式提供了一种高效的列式数据表的二进制表示，如在 Apache Hadoop 和 Spark、AWS Athena 和 Glue
    以及 Pandas DataFrame 序列化中的广泛使用所见。尽管 Parquet 提供了广泛的互操作性，并且其性能优于文本格式（如 CSV 或 JSON），但它的速度比
    NPZ 慢多达十倍，后者是[StaticFrame](https://github.com/static-frame/static-frame)中引入的另一种
    DataFrame 序列化格式。
- en: StaticFrame (an open-source DataFrame library of which I am an author) builds
    upon NumPy NPY and NPZ formats to encode DataFrames. The NPY format (a binary
    encoding of array data) and the NPZ format (zipped bundles of NPY files) are defined
    in a [NumPy Enhancement Proposal](https://numpy.org/neps/nep-0001-npy-format.html)
    from 2007\. By extending the NPZ format with specialized JSON metadata, StaticFrame
    provides a complete DataFrame serialization format that supports all NumPy dtypes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: StaticFrame（我参与编写的开源 DataFrame 库）基于 NumPy NPY 和 NPZ 格式对 DataFrame 进行编码。NPY 格式（数组数据的二进制编码）和
    NPZ 格式（NPY 文件的压缩包）在 2007 年的[NumPy 增强提案](https://numpy.org/neps/nep-0001-npy-format.html)中有定义。通过扩展
    NPZ 格式并使用专门的 JSON 元数据，StaticFrame 提供了一个完整的 DataFrame 序列化格式，支持所有 NumPy 数据类型。
- en: This article extends work first presented at [PyCon USA 2022](https://youtu.be/HLH5AwF-jx4?si=9NSpPuf-jVoxotzg)
    with further performance optimizations and broader benchmarking.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文扩展了在[PyCon USA 2022](https://youtu.be/HLH5AwF-jx4?si=9NSpPuf-jVoxotzg)首次展示的工作，加入了更多的性能优化和更广泛的基准测试。
- en: The Challenge of Serializing DataFrames
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列化 DataFrame 的挑战
- en: DataFrames are not just collections of columnar data with string column labels,
    such as found in relational databases. In addition to columnar data, DataFrames
    have labelled rows and columns, and those row and column labels can be of any
    type or (with hierarchical labels) many types. Further, it is common to store
    metadata with a `name` attribute, either on the DataFrame or on the axis labels.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame 不仅仅是具有字符串列标签的列式数据集合，如关系型数据库中的数据那样。除了列式数据，DataFrame 还包含带标签的行和列，并且这些行和列标签可以是任何类型（或者具有层次标签时，可以是多种类型）。此外，常常会将元数据与
    `name` 属性一起存储，可能存储在 DataFrame 上或轴标签上。
- en: As Parquet was originally designed just to store collections of columnar data,
    the full range of DataFrame characteristics is not directly supported. Pandas
    supplies this additional information by adding JSON metadata into the Parquet
    file.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Parquet 最初是为了存储列式数据集而设计的，因此它不能直接支持完整的 DataFrame 特性。Pandas 通过在 Parquet 文件中添加
    JSON 元数据提供了这些附加信息。
- en: Further, Parquet supports a minimal selection of types; the full range of NumPy
    dtypes is not directly supported. For example, Parquet does not natively support
    unsigned integers or any date types.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Parquet 支持的类型选择非常有限；NumPy 数据类型的完整范围并不直接支持。例如，Parquet 原生不支持无符号整数或任何日期类型。
- en: While Python pickles are capable of efficiently serializing DataFrames and NumPy
    arrays, they are only suitable for short-term caches from trusted sources. While
    pickles are fast, they can become invalid due to code changes and are insecure
    to load from untrusted sources.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Python 的 pickle 能够高效地序列化 DataFrame 和 NumPy 数组，但它们仅适用于来自可信来源的短期缓存。尽管 pickle
    快速，但由于代码变更，它们可能会失效，而且从不可信来源加载时不安全。
- en: Another alternative to Parquet, originating in the Arrow project, is [Feather](https://arrow.apache.org/docs/python/feather.html).
    While Feather supports all Arrow types and succeeds in being faster than Parquet,
    it is still at least two times slower reading DataFrames than NPZ.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Parquet 的另一个替代品来源于 Arrow 项目，是[Feather](https://arrow.apache.org/docs/python/feather.html)。尽管
    Feather 支持所有 Arrow 类型，并且在读取 DataFrame 时比 Parquet 更快，但其速度仍然比 NPZ 慢至少两倍。
- en: Parquet and Feather support compression to reduce file size. Parquet defaults
    to using “snappy” compression, while Feather defaults to “lz4”. As the NPZ format
    prioritizes performance, it does not yet support compression. As will be shown
    below, NPZ outperforms both compressed and uncompressed Parquet files by significant
    factors.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Parquet 和 Feather 支持压缩以减小文件大小。Parquet 默认使用“snappy”压缩，而 Feather 默认使用“lz4”。由于
    NPZ 格式优先考虑性能，因此尚不支持压缩。如下面所示，NPZ 在性能上显著优于压缩和未压缩的 Parquet 文件。
- en: DataFrame Serialization Performance Comparisons
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DataFrame 序列化性能比较
- en: Numerous publications offer DataFrame benchmarks by testing just one or two
    datasets. [McKinney and Richardson](https://ursalabs.org/blog/2020-feather-v2)
    (2020) is an example, where two datasets, Fannie Mae Loan Performance and NYC
    Yellow Taxi Trip data, are used to generalize about performance. Such idiosyncratic
    datasets are insufficient, as both the shape of the DataFrame and the degree of
    columnar type heterogeneity can significantly differentiate performance.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 许多出版物通过仅测试一两个数据集来提供 DataFrame 基准测试。例如，[McKinney 和 Richardson](https://ursalabs.org/blog/2020-feather-v2)（2020）就以
    Fannie Mae 贷款表现数据和纽约市黄出租车出行数据为例，概括其性能。这些特有的数据集不足以充分代表性能，因为 DataFrame 的形状和列类型异质性的程度会显著影响性能。
- en: 'To avoid this deficiency, I compare performance with a panel of nine synthetic
    datasets. These datasets vary along two dimensions: shape (tall, square, and wide)
    and columnar heterogeneity (columnar, mixed, and uniform). Shape variations alter
    the distribution of elements between tall (e.g., 10,000 rows and 100 columns),
    square (e.g., 1,000 rows and columns), and wide (e.g., 100 rows and 10,000 columns)
    geometries. Columnar heterogeneity variations alter the diversity of types between
    columnar (no adjacent columns have the same type), mixed (some adjacent columns
    have the same type), and uniform (all columns have the same type).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种不足，我使用九个合成数据集进行性能比较。这些数据集在两个维度上有所变化：形状（高、方形和宽）和列异质性（列式、混合型和均匀型）。形状变化改变了元素在高（例如：10,000行和100列）、方形（例如：1,000行和列）和宽（例如：100行和10,000列）几何体之间的分布。列异质性变化改变了列之间类型的多样性，列式（没有相邻列具有相同类型）、混合型（部分相邻列具有相同类型）和均匀型（所有列具有相同类型）。
- en: The `[frame-fixtures](https://github.com/static-frame/frame-fixtures)` library
    defines a domain-specific language to create deterministic, randomly-generated
    DataFrames for testing; the nine datasets are generated with this tool.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`[frame-fixtures](https://github.com/static-frame/frame-fixtures)`库定义了一种领域特定语言，用于创建可预测的、随机生成的
    DataFrame 以供测试；这九个数据集是通过此工具生成的。'
- en: To demonstrate some of the StaticFrame and Pandas interfaces evaluated, the
    following IPython session performs basic performance tests using `%time`. As shown
    below, a square, uniformly-typed DataFrame can be written and read with NPZ many
    times faster than uncompressed Parquet.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示一些静态框架（StaticFrame）和 Pandas 接口的评估，以下 IPython 会话使用`%time`执行基本性能测试。如下面所示，方形、均匀类型的
    DataFrame 可以通过 NPZ 格式读写，速度是未压缩 Parquet 的许多倍。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Performance tests provided below extend this basic approach by using `frame-fixtures`
    for systematic variation of shape and type heterogeneity, and average results
    over ten iterations. While hardware configuration will affect performance, relative
    characteristics are retained across diverse machines and operating systems. For
    all interfaces the default parameters are used, except for disabling compression
    as needed. The code used to perform these tests is available at [GitHub](https://github.com/static-frame/static-frame/blob/master/doc/source/articles/serialize.py).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下提供的性能测试通过使用`frame-fixtures`对形状和类型异质性进行系统性变化，并对十次迭代结果进行平均，从而扩展了这一基本方法。虽然硬件配置会影响性能，但在不同机器和操作系统之间，相对特征保持一致。对于所有接口，使用默认参数，除非需要禁用压缩。用于执行这些测试的代码可在[GitHub](https://github.com/static-frame/static-frame/blob/master/doc/source/articles/serialize.py)上找到。
- en: Read Performance
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取性能
- en: As data is generally read more often then it is written, read performance is
    a priority. As shown for all nine DataFrames of one million (1e+06) elements,
    NPZ significantly outperforms Parquet and Feather with every fixture. NPZ read
    performance is over ten times faster than compressed Parquet. For example, with
    the Uniform Tall fixture, compressed Parquet reading is 21 ms compared to 1.5
    ms with NPZ.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据通常被读取的频率高于写入，因此读取性能是优先考虑的。如图所示，对于所有包含百万级（1e+06）元素的九个DataFrame，NPZ在每个测试条件下的表现均显著优于Parquet和Feather。NPZ的读取性能比压缩后的Parquet快十倍以上。例如，在Uniform
    Tall测试条件下，压缩Parquet的读取时间为21毫秒，而NPZ为1.5毫秒。
- en: The chart below shows processing time, where lower bars correspond to faster
    performance.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了处理时间，其中较低的柱状图表示较快的性能。
- en: '![](../Images/fa38e9a0015f38c3dbe5f57596bec09d.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fa38e9a0015f38c3dbe5f57596bec09d.png)'
- en: This impressive NPZ performance is retained with scale. Moving to 100 million
    (1e+08) elements, NPZ continues to perform at least twice as fast as Parquet and
    Feather, regardless of if compression is used.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这一令人印象深刻的NPZ性能在扩展时依然得以保持。当数据量增加到1亿（1e+08）元素时，NPZ的表现仍然至少是Parquet和Feather的两倍，无论是否使用压缩。
- en: '![](../Images/9ec4be64facd1cb484fc3d7d0720a932.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9ec4be64facd1cb484fc3d7d0720a932.png)'
- en: Write Performance
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 写入性能
- en: 'In writing DataFrames to disk, NPZ outperforms Parquet (both compressed and
    uncompressed) in all scenarios. For example, with the Uniform Square fixture,
    compressed Parquet writing is 200 ms compared to 18.3 ms with NPZ. NPZ write performance
    is generally comparable to uncompressed Feather: in some scenarios NPZ is faster,
    in others, Feather is faster.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在将DataFrame写入磁盘时，NPZ在所有场景下都优于Parquet（无论是否压缩）。例如，在Uniform Square测试条件下，压缩后的Parquet写入时间为200毫秒，而NPZ为18.3毫秒。NPZ的写入性能通常与未压缩的Feather相当：在某些场景下NPZ更快，而在其他场景下Feather更快。
- en: '![](../Images/2a1401f5d019627ec1b4737267552649.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2a1401f5d019627ec1b4737267552649.png)'
- en: As with read performance, NPZ write performance is retained with scale. Moving
    to 100 million (1e+08) elements, NPZ continues to be at least twice as fast as
    Parquet, regardless of if compression is used or not.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 与读取性能相似，NPZ写入性能在规模扩展时也得以保持。当数据量增加到1亿（1e+08）元素时，NPZ的性能仍然是Parquet的至少两倍，无论是否使用压缩。
- en: '![](../Images/e1a0f86520284c384a95f1f21eaade24.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e1a0f86520284c384a95f1f21eaade24.png)'
- en: Idiosyncratic Performance
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特殊性能
- en: As an additional reference, we will also benchmark the same NYC Yellow Taxi
    Trip data (from January 2010) used in [McKinney and Richardson](https://ursalabs.org/blog/2020-feather-v2)
    (2020). This dataset contains almost 300 million (3e+08) elements in a tall, heterogeneously
    typed DataFrame of 14,863,778 rows and 19 columns.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外参考，我们还将基准测试相同的NYC黄出租车行程数据（来自2010年1月），该数据集用于[McKinney和Richardson](https://ursalabs.org/blog/2020-feather-v2)（2020）。该数据集包含近3亿（3e+08）个元素，存储在一个包含14,863,778行和19列的高大异质类型DataFrame中。
- en: NPZ read performance is shown to be around four times faster than Parquet and
    Feather (with or without compression). While NPZ write performance is faster than
    Parquet, Feather writing here is fastest.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: NPZ读取性能比Parquet和Feather快约四倍（无论是否压缩）。尽管NPZ的写入性能比Parquet快，但Feather写入在这里是最快的。
- en: '![](../Images/38dddbd6981acf48b401d4b1a43a010a.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/38dddbd6981acf48b401d4b1a43a010a.png)'
- en: File Size
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件大小
- en: As shown below for one million (1e+06) element and 100 million (1e+08) element
    DataFrames, uncompressed NPZ is generally equal in size on disk to uncompressed
    Feather and always smaller than uncompressed Parquet (sometimes smaller than compressed
    Parquet too). As compression provides only modest file-size reductions for Parquet
    and Feather, the benefit of uncompressed NPZ in speed might easily outweigh the
    cost of greater size.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，对于100万（1e+06）元素和1亿（1e+08）元素的数据框架，未压缩的NPZ文件在磁盘上的大小通常与未压缩的Feather文件相等，并且始终小于未压缩的Parquet文件（有时也小于压缩的Parquet文件）。由于压缩对Parquet和Feather文件的大小减小效果有限，未压缩NPZ在速度上的优势可能会轻易超过其较大文件大小的成本。
- en: '![](../Images/8a39a64787084a7f31e46a1ce1428974.png)![](../Images/251704e219f51e212a421110d391ccdd.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8a39a64787084a7f31e46a1ce1428974.png)![](../Images/251704e219f51e212a421110d391ccdd.png)'
- en: Serializing DataFrames
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 序列化数据框架
- en: StaticFrame stores data as a collection of 1D and 2D NumPy arrays. Arrays represent
    columnar values, as well as variable-depth index and column labels. In addition
    to NumPy arrays, information about component types (i.e., the Python class used
    for the index and columns), as well as the component `name` attributes, are needed
    to fully reconstruct a `Frame`. Completely serializing a DataFrame requires writing
    and reading these components to a file.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: StaticFrame将数据存储为1D和2D NumPy数组的集合。数组表示列值，以及可变深度的索引和列标签。除了NumPy数组外，还需要关于组件类型（即用于索引和列的Python类）以及组件`name`属性的信息，以完整地重建一个`Frame`。完全序列化一个数据框架需要将这些组件写入并从文件中读取。
- en: DataFrame components can be represented by the following diagram, which isolates
    arrays, array types, component types, and component names. This diagram will be
    used to demonstrate how an NPZ encodes a DataFrame.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框架（DataFrame）的组件可以通过以下图示表示，该图示隔离了数组、数组类型、组件类型和组件名称。此图示将用于演示NPZ如何编码一个数据框架。
- en: '![](../Images/bed0ae57980fff32c000e1e2fd2c8e65.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bed0ae57980fff32c000e1e2fd2c8e65.png)'
- en: 'The components of that diagram map to components of a `Frame` string representation
    in Python. For example, given a `Frame` of integers and Booleans with hierarchical
    labels on both the index and columns (downloadable via GitHub with StaticFrame’s
    `WWW` interface), StaticFrame provides the following string representation:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该图示的组件映射到Python中`Frame`字符串表示的组件。例如，给定一个包含整数和布尔值的`Frame`，且索引和列上都有层次标签（可以通过StaticFrame的`WWW`接口从GitHub下载），StaticFrame提供以下字符串表示：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The components of the string representation can be mapped to the DataFrame
    diagram by color:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串表示的组件可以通过颜色映射到数据框架图示：
- en: '![](../Images/9ce32383fa2f790683cb5bd0eca310d8.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9ce32383fa2f790683cb5bd0eca310d8.png)'
- en: Encoding an Array in NPY
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编码一个NPY数组
- en: 'A NPY stores a NumPy array as a binary file with six components: (1) a “magic”
    prefix, (2) a version number, (3) a header length and (4) header (where the header
    is a string representation of a Python dictionary), and (5) padding followed by
    (6) raw array byte data. These components are shown below for a three-element
    binary array stored in a file named “__blocks_1__.npy”.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一个NPY文件将NumPy数组存储为二进制文件，包含六个组件：（1）一个“魔术”前缀，（2）一个版本号，（3）一个头部长度，（4）头部（头部是Python字典的字符串表示），以及（5）填充和（6）原始数组字节数据。以下显示的是存储在名为“__blocks_1__.npy”文件中的三元素二进制数组的这些组件。
- en: '![](../Images/11621b73ed36bf9de3057e479f0b6fec.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11621b73ed36bf9de3057e479f0b6fec.png)'
- en: 'Given a NPZ file named “frame.npz”, we can extract the binary data by reading
    the NPY file from the NPZ with the standard library’s `ZipFile`:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个名为“frame.npz”的NPZ文件，我们可以通过使用标准库的`ZipFile`从NPZ中读取NPY文件来提取二进制数据。
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As NPY is well supported in NumPy, the `np.load()` function can be used to convert
    this file to a NumPy array. This means that underlying array data in a StaticFrame
    NPZ is easily extractable by alternative readers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于NPY在NumPy中得到了很好的支持，可以使用`np.load()`函数将此文件转换为NumPy数组。这意味着，StaticFrame NPZ中的底层数组数据可以通过其他读取器轻松提取。
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As a NPY file can encode any array, large two-dimensional arrays can be loaded
    from contiguous byte data, providing excellent performance in StaticFrame when
    multiple contiguous columns are represented by a single array.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于NPY文件可以编码任何数组，因此可以从连续字节数据中加载大型二维数组，在StaticFrame中，当多个连续列由单个数组表示时，提供了卓越的性能。
- en: Building a NPZ File
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建NPZ文件
- en: A StaticFrame NPZ is a standard uncompressed ZIP file that contains array data
    in NPY files and metadata (containing component types and names) in a JSON file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: StaticFrame NPZ是一个标准的未压缩ZIP文件，其中包含NPY文件中的数组数据，以及包含组件类型和名称的JSON文件中的元数据。
- en: Given the NPZ file for the `Frame` above, we can list its contents with `ZipFile`.
    The archive contains six NPY files and one JSON file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 给定上面`Frame`的NPZ文件，我们可以使用`ZipFile`列出其内容。该压缩包包含六个NPY文件和一个JSON文件。
- en: '[PRE4]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The illustration below maps these files to components of the DataFrame diagram.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 下图将这些文件映射到DataFrame图的组件。
- en: '![](../Images/a0e167bf14a88dd3b534e7dfd476a4ea.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a0e167bf14a88dd3b534e7dfd476a4ea.png)'
- en: StaticFrame extends the NPZ format to include metadata in a JSON file. This
    file defines name attributes, component types, and depth counts.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: StaticFrame扩展了NPZ格式，包含一个JSON文件作为元数据。该文件定义了名称属性、组件类型和深度计数。
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the illustration below, components of the `__meta__.json` file are mapped
    to components of the DataFrame diagram.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，`__meta__.json`文件的组件被映射到DataFrame图的组件。
- en: '![](../Images/3cd9d8ba88640f490bd47f5e2c8f1854.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3cd9d8ba88640f490bd47f5e2c8f1854.png)'
- en: As a simple ZIP file, tools to extract the contents of a StaticFrame NPZ are
    ubiquitous. On the other hand, the ZIP format, given its history and broad features,
    incurs performance overhead. StaticFrame implements a custom ZIP reader optimized
    for NPZ usage, which contributes to the excellent read performance of NPZ.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个简单的ZIP文件，提取StaticFrame NPZ内容的工具非常普遍。另一方面，由于ZIP格式的历史和广泛特性，它会带来性能开销。StaticFrame实现了一个为NPZ使用优化的自定义ZIP读取器，这有助于NPZ的出色读取性能。
- en: Conclusion
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: The performance of DataFrame serialization is critical to many applications.
    While Parquet has widespread support, its generality compromises type specificity
    and performance. StaticFrame NPZ can read and write DataFrames up to ten-times
    faster than Parquet with or without compression, with similar (or only modestly
    larger) file sizes. While Feather is an attractive alternative, NPZ read performance
    is still generally twice as fast as Feather. If data I/O is a bottleneck (and
    it often is), StaticFrame NPZ offers a solution.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: DataFrame序列化的性能对许多应用至关重要。虽然Parquet得到了广泛支持，但它的通用性牺牲了类型特异性和性能。StaticFrame NPZ可以比Parquet快最多十倍地读取和写入DataFrame，无论是否压缩，文件大小相似（或仅略大）。虽然Feather是一个有吸引力的替代方案，但NPZ的读取性能通常是Feather的两倍。如果数据I/O成为瓶颈（而这通常是），StaticFrame
    NPZ提供了解决方案。
