- en: Navigating the New Types of LLM Agents and Architectures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索新的LLM代理和架构类型
- en: 原文：[https://towardsdatascience.com/navigating-the-new-types-of-llm-agents-and-architectures-309382ce9f88?source=collection_archive---------0-----------------------#2024-08-30](https://towardsdatascience.com/navigating-the-new-types-of-llm-agents-and-architectures-309382ce9f88?source=collection_archive---------0-----------------------#2024-08-30)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/navigating-the-new-types-of-llm-agents-and-architectures-309382ce9f88?source=collection_archive---------0-----------------------#2024-08-30](https://towardsdatascience.com/navigating-the-new-types-of-llm-agents-and-architectures-309382ce9f88?source=collection_archive---------0-----------------------#2024-08-30)
- en: '![](../Images/5939b58b0944ef661493ed70b68e1810.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5939b58b0944ef661493ed70b68e1810.png)'
- en: Image created by author using Dall-E
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图像由作者使用Dall-E创作
- en: The failure of ReAct agents gives way to a new generation of agents — and possibilities
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ReAct代理的失败为新一代代理及其可能性铺平了道路
- en: '[](https://aparnadhinak.medium.com/?source=post_page---byline--309382ce9f88--------------------------------)[![Aparna
    Dhinakaran](../Images/e431ee69563ecb27c86f3428ba53574c.png)](https://aparnadhinak.medium.com/?source=post_page---byline--309382ce9f88--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--309382ce9f88--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--309382ce9f88--------------------------------)
    [Aparna Dhinakaran](https://aparnadhinak.medium.com/?source=post_page---byline--309382ce9f88--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://aparnadhinak.medium.com/?source=post_page---byline--309382ce9f88--------------------------------)[![Aparna
    Dhinakaran](../Images/e431ee69563ecb27c86f3428ba53574c.png)](https://aparnadhinak.medium.com/?source=post_page---byline--309382ce9f88--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--309382ce9f88--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--309382ce9f88--------------------------------)
    [Aparna Dhinakaran](https://aparnadhinak.medium.com/?source=post_page---byline--309382ce9f88--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--309382ce9f88--------------------------------)
    ·10 min read·Aug 30, 2024
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--309382ce9f88--------------------------------)
    ·10分钟阅读·2024年8月30日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '*My thanks to John Gilhuly for his contributions to this piece*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢John Gilhuly为本篇文章的贡献*'
- en: If 2023 was the year of retrieval augmented generation, 2024 has been the year
    of agents. Companies all over the world are experimenting with chatbot agents,
    tools like MultiOn are growing by connecting agents to outside websites, and frameworks
    like LangGraph and LlamaIndex Workflows are helping developers around the world
    build structured agents.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果2023年是检索增强生成（Retrieval Augmented Generation, RAG）的一年，那么2024年就是代理的年份。全球各地的公司正在尝试聊天机器人代理，像MultiOn这样的工具通过将代理连接到外部网站而得到发展，像LangGraph和LlamaIndex
    Workflows这样的框架帮助世界各地的开发人员构建结构化代理。
- en: However, despite their popularity, agents have yet to make a strong splash outside
    of the AI ecosystem. Few agents are taking off among either consumer or enterprise
    users.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管代理受到了广泛关注，但它们仍未在人工智能生态系统之外取得显著的突破。无论是消费者还是企业用户中，只有少数代理得以推广。
- en: How can teams navigate the new frameworks and new agent directions? What tools
    are available, and which should you use to build your next application? As a leader
    at a company that recently built our own complex agent to act as a copilot within
    our product, we have some insights on this topic.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 团队如何在新的框架和代理方向中航行？有哪些工具可用，你应该使用哪些工具来构建下一个应用程序？作为一家最近在产品中构建了一个复杂代理作为副驾驶的公司的领导者，我们对此话题有一些见解。
- en: Defining Agents
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义代理
- en: First, it helps to define what we mean by an agent. LLM-based agents are software
    systems that string together multiple processing steps, including calls to LLMs,
    in order to achieve a desired end result. Agents typically have some amount of
    conditional logic or decision-making capabilities, as well as a working memory
    they can access between steps.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，定义我们所说的代理是非常重要的。基于LLM的代理是将多个处理步骤（包括对LLM的调用）串联起来的软件系统，以实现期望的最终结果。代理通常具有一定的条件逻辑或决策能力，并且拥有在各步骤之间可以访问的工作记忆。
- en: Let’s dive into how agents are built today, the current problems with modern
    agents, and some initial solutions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解今天代理的构建方式、现代代理存在的问题以及一些初步的解决方案。
- en: The Failure of ReAct Agents
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ReAct代理的失败
- en: Let’s be honest, the idea of an agent isn’t new. There were countless agents
    launched on AI Twitter over the last year claiming amazing feats of intelligence.
    This first generation were mainly [ReAct](https://arxiv.org/abs/2210.03629) (reason,
    act) agents. They were designed to abstract as much as possible, and promised
    a wide set of outcomes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们诚实一点，智能体的概念并不新鲜。在过去一年中，AI Twitter 上推出了无数智能体，宣称具有惊人的智能表现。这些第一代智能体主要是[ReAct](https://arxiv.org/abs/2210.03629)（推理，行动）智能体。它们的设计目标是尽可能地抽象化，并承诺能带来广泛的结果。
- en: Unfortunately, this first generation of agent architectures really struggled.
    Their heavy abstraction made them hard to use, and despite their lofty promises,
    they turned out to [not do much of anything](https://arxiv.org/html/2405.13966v1).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，第一代智能体架构确实面临了很多挑战。它们的高度抽象化使得使用起来困难，尽管它们做出了宏大的承诺，但最终它们[几乎什么都做不了](https://arxiv.org/html/2405.13966v1)。
- en: In reaction to this, many people began to rethink how agents should be structured.
    In the past year we’ve seen great advances, now leading us into the next generation
    of agents.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 针对此情况，许多人开始重新思考智能体的结构方式。在过去的一年里，我们见证了巨大的进展，这也将我们引入了下一代智能体。
- en: What is the Second Generation of Agents?
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是第二代智能体？
- en: This new generation of agents is built on the principle of defining the possible
    paths an agent can take in a much more rigid fashion, instead of the open-ended
    nature of ReAct. Whether agents use a framework or not, we have seen a trend towards
    smaller solution spaces — aka a reduction in the possible things each agent can
    do. A smaller solution space means an easier-to-define agent, which often leads
    to a more powerful agent.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这一代新的智能体建立在定义智能体可以走的路径的原则上，这些路径比ReAct的开放性方式更为严格。无论智能体是否使用框架，我们已经看到一种趋势，那就是智能体的解决方案空间变得更小——也就是说，每个智能体能做的事情减少了。更小的解决方案空间意味着智能体更容易定义，这通常也会导致更强大的智能体。
- en: This second generation covers many different types of agents, however it’s worth
    noting that *most of the agents or assistants we see today are written in code
    without frameworks, have an LLM router stage, and process data in iterative loops.*
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第二代智能体涵盖了许多不同类型的智能体，但值得注意的是，*我们今天看到的大多数智能体或助手都是通过无框架的代码编写的，具有LLM路由阶段，并且以迭代循环的方式处理数据。*
- en: What Makes Up An Agent?
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么构成了一个智能体？
- en: Many agents have a node or component called a **router,** that decides which
    step the agent should take next. The term router normally refers to an LLM or
    classifier making an intent decision of what path to take. An agent may return
    to this router continuously as they progress through their execution, each time
    bringing some updated information. The router will take that information, combine
    it with its existing knowledge of the possible next steps, and choose the next
    action to take.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 许多智能体都有一个叫做**路由器**的节点或组件，用来决定智能体应该执行哪个下一步。路由器通常是指由LLM或分类器做出的路径选择决策。智能体在执行过程中可能会不断返回这个路由器，每次都带上一些更新的信息。路由器会利用这些信息，结合它对可能的下一步的已有知识，选择接下来的行动。
- en: The router itself is sometimes powered by a call to an LLM. Most popular LLMs
    at this point support **function calling**, where they can choose a component
    to call from a JSON dictionary of function definitions. This ability makes the
    routing step easy to initially set up. As we’ll see later however, the router
    is often the step that needs the most improvement in an agent, so this ease of
    setup can belie the complexity under the surface.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器本身有时由对LLM的调用提供支持。目前大多数流行的LLM都支持**函数调用**，它们可以从函数定义的JSON字典中选择一个组件进行调用。这种能力使得路由步骤的初步设置变得容易。然而，正如我们稍后将看到的，路由器通常是智能体中需要最多改进的步骤，因此这种设置的简便性掩盖了其背后的复杂性。
- en: Each action an agent can take is typically represented by a **component**. Components
    are blocks of code that accomplish a specific small task. These could call an
    LLM, or make multiple LLM calls, make an internal API call, or just run some sort
    of application code. These go by different names in different frameworks. In LangGraph,
    these are nodes. In LlamaIndex Workflows, they’re known as steps. Once the component
    completes its work, it may return to the router, or move to other decision components.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 智能体可以执行的每一个动作通常由一个**组件**表示。组件是完成特定小任务的代码块。这些组件可以调用LLM，或进行多次LLM调用，发起内部API调用，或仅仅运行某种应用代码。在不同的框架中，它们有不同的名称。在LangGraph中，这些称为节点；在LlamaIndex
    Workflows中，它们被称为步骤。一旦组件完成任务，它可能会返回到路由器，或者转到其他决策组件。
- en: Depending on the complexity of your agent, it can be helpful to group components
    together as execution branches or **skills**. Say you have a customer service
    chatbot agent. One of the things this agent can do is check the shipping status
    of an order. To functionally do that, the agent needs to extract an order id from
    the user’s query, create an api call to a backend system, make that api, parse
    the results, and generate a response. Each of those steps may be a component,
    and they can be grouped into the “Check shipping status” skill.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 根据代理的复杂性，将组件作为执行分支或**技能**进行分组可能会有所帮助。假设你有一个客户服务聊天机器人代理。这个代理能够做的事情之一是检查订单的运输状态。为了实现这一功能，代理需要从用户的查询中提取订单
    ID，创建一个 API 调用到后端系统，执行该 API，解析结果，并生成回应。每一个步骤都可能是一个组件，它们可以被归类为“检查运输状态”技能。
- en: Finally, many agents will track a **shared state** or memory as they execute.
    This allows agents to more easily pass context between various components.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，许多代理在执行过程中会追踪**共享状态**或记忆。这使得代理更容易在各个组件之间传递上下文。
- en: Examples of Agent Architectures
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理架构的示例
- en: There are some common patterns we see across agent deployments today. We’ll
    walk through an overview of all of those architectures in the following pieces
    but the below examples are probably the most common.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们在代理部署中看到一些常见的模式。我们将在接下来的部分中概述所有这些架构，但下面的示例可能是最常见的。
- en: In its simplest form an agent or assistant might just be defined with a LLM
    router and a tool call. We call this first example a ***single router with functions***.
    We have a single router, that could be an LLM call, a classifier call, or just
    plain code, that directs and orchestrates which function to call. The idea is
    that the router can decide which tool or functional call to invoke based on input
    from the system. The single router comes from the fact that we are using only
    1 router in this architecture.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在其最简单的形式下，代理或助手可能仅由一个 LLM 路由器和一个工具调用来定义。我们将这个第一个示例称为***单路由器与函数***。我们有一个单一的路由器，可以是一个
    LLM 调用、一个分类器调用，或仅仅是简单的代码，来指引和协调要调用哪个函数。其理念是，路由器可以根据系统的输入来决定调用哪个工具或功能。单路由器来自于我们在这个架构中只使用了一个路由器这一事实。
- en: '![](../Images/11f1778aef2eec4c137a1a670bcc2dca.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11f1778aef2eec4c137a1a670bcc2dca.png)'
- en: Diagram by author
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图示由作者提供
- en: A slightly more complicated assistant we see is a ***single router with skills***.
    In this case, rather than calling a simple tooling or function call, the router
    can call a more complex workflow or skill set that might include many components
    and is an overall deeper set of chained actions. These components (LLM, API, tooling,
    RAG, and code calls) can be looped and chained to form a skill.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的一个稍微复杂一些的助手是***单路由器与技能***。在这种情况下，路由器不再仅仅调用一个简单的工具或函数，而是可以调用一个更复杂的工作流或技能集，这些技能集可能包括多个组件，是一系列更深的链式动作。这些组件（LLM、API、工具、RAG
    和代码调用）可以被循环和链式连接，以形成一个技能。
- en: This is probably the most common architecture from advanced LLM application
    teams in production today that we see.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是目前我们看到的最常见的生产环境中高级 LLM 应用团队使用的架构。
- en: '![](../Images/75fe8804f273eab573708fd0d9f133ca.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/75fe8804f273eab573708fd0d9f133ca.png)'
- en: Diagram by author
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图示由作者提供
- en: The general architecture gets more complicated by mixing branches of LLM calls
    with tools and state. In this next case, the router decides which of its skills
    (denoted in red) to call to answer the user’s question. It may update the shared
    state based on this question as well. Each skill may also access the shared state,
    and could involve one or more LLM calls of its own to retrieve a response to the
    user.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一般架构通过将 LLM 调用、工具和状态的分支混合在一起，变得更加复杂。在这个案例中，路由器决定调用其哪些技能（用红色标注）来回答用户的问题。它还可能根据这个问题更新共享状态。每个技能也可以访问共享状态，并可能涉及一个或多个
    LLM 调用，以获取对用户的回应。
- en: '![](../Images/eeaa1ebe2277c41c4e42f3e33f2e536c.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eeaa1ebe2277c41c4e42f3e33f2e536c.png)'
- en: Diagram by author
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图示由作者提供
- en: This is still generally straightforward, however, agents are usually far more
    complex. As agents become more complicated, you start to see frameworks built
    to try and reduce that complexity.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常仍然比较简单，然而，代理通常要复杂得多。随着代理变得更加复杂，你会开始看到一些框架被构建出来，以帮助降低这种复杂性。
- en: Agent Architecture Frameworks
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理架构框架
- en: LangGraph
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LangGraph
- en: LangGraph builds on the pre-existing concept of a Pregel graph, but translates
    it over to agents. In LangGraph, you define nodes and edges that your agent can
    travel along. While it is possible to define a router node in LangGraph, it is
    usually unnecessary unless you’re working with multi-agent applications. Instead,
    the same conditional logic that could live in the router now lives in the Nodes
    and Conditional Edges objects that LangGraph introduces.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: LangGraph 基于预先存在的 Pregel 图概念，但将其转化为代理。在 LangGraph 中，你定义代理可以沿着其移动的节点和边缘。虽然在 LangGraph
    中定义一个路由节点是可能的，但除非你正在处理多代理应用，否则通常是不必要的。相反，原本可以在路由器中存在的相同条件逻辑现在存在于 LangGraph 引入的节点和条件边缘对象中。
- en: 'Here’s an example of a LangGraph agent that can either respond to a user’s
    greeting, or perform some sort of RAG lookup of information:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 LangGraph 代理的示例，它可以回应用户的问候，或者执行某种 RAG 信息查找：
- en: '![](../Images/862a65a67f7fcea3ce139a3442f0dea2.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/862a65a67f7fcea3ce139a3442f0dea2.png)'
- en: Diagram by author
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图示由作者提供
- en: 'Here, the routing logic instead lives within nodes and conditional edges that
    choose to move the user between different nodes depending on a function response.
    In this case, ***is_greeting*** and ***check_rag_response*** are conditional edges.
    Defining one of these edges looks like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，路由逻辑实际上存在于节点和条件边缘中，这些边缘根据函数响应决定是否在不同节点之间移动用户。在这个例子中，***is_greeting*** 和
    ***check_rag_response*** 是条件边缘。定义其中一个边缘如下所示：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Instead of collecting all of the routing logic in one node, we instead spread
    it between the relevant edges. This can be helpful, especially when you need to
    impose a predefined structure on your agent, and want to keep individual pieces
    of logic separated.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是将所有的路由逻辑集中在一个节点中，而是将它分布在相关的边缘之间。这在你需要为代理强加一个预定义结构，并且希望将各个逻辑部分分开时特别有用。
- en: LlamaIndex Workflows
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LlamaIndex 工作流
- en: Other frameworks like [LlamaIndex Workflows](https://arize.com/blog/llamaindex-workflows-a-new-way-to-build-cyclical-agents/)
    take a different approach, instead using events and event listeners to move between
    nodes. Like LangGraph, Workflows don’t necessarily need a routing node to handle
    the conditional logic of an agent. Instead, Workflows rely on individual nodes,
    or steps as they call them, to handle incoming events, and broadcast outgoing
    events to be handled by other steps. This results in the majority of Workflows
    logic being handled within each step, as opposed to within both steps and nodes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 像 [LlamaIndex 工作流](https://arize.com/blog/llamaindex-workflows-a-new-way-to-build-cyclical-agents/)
    这样的其他框架采用不同的方法，使用事件和事件监听器在节点之间移动。与 LangGraph 类似，工作流不一定需要一个路由节点来处理代理的条件逻辑。相反，工作流依赖于各个节点，或者它们称之为“步骤”，来处理传入事件，并广播传出的事件，以便其他步骤处理。这导致大多数工作流逻辑都在每个步骤内部处理，而不是在步骤和节点之间处理。
- en: '![](../Images/51e53013177ba3f241d11757c1882504.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/51e53013177ba3f241d11757c1882504.png)'
- en: '*A reflective SQL generation agent as a LlamaIndex Workflow (diagram by author)*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*作为 LlamaIndex 工作流的反射型 SQL 生成代理（图示由作者提供）*'
- en: CrewAI, Autogen, Swarm, and Others
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CrewAI、Autogen、Swarm 等
- en: There are other frameworks that are intended to make agent development easier,
    including some that specialize in handling groups of agents working together.
    This space is rapidly evolving and it’s worth checking out these and other frameworks.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他框架旨在简化代理开发，其中包括一些专注于处理多个代理协同工作的框架。这个领域发展迅速，值得查看这些及其他框架。
- en: Key Questions When Considering An Agent
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 考虑代理时的关键问题
- en: Should You Use a Framework To Develop Your Agent?
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 是否应该使用框架来开发你的代理？
- en: Regardless of the framework you use, the additional structure provided by these
    tools can be helpful in building out agent applications. The question of whether
    using one of these frameworks is beneficial when creating larger, more complicated
    applications is a bit more challenging.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你使用什么框架，这些工具提供的额外结构都能帮助你构建代理应用。使用这些框架是否对创建更大、更复杂的应用有益是一个更具挑战性的问题。
- en: 'We have a fairly strong opinion in this area because we built an assistant
    ourselves. Our assistant uses a multi-layer router architecture with branches
    and steps that echo some of the abstractions of the current frameworks. We started
    building our assistant before LangGraph was stable. As a result, we constantly
    ask ourselves: if we were starting from scratch, would we use the current framework
    abstractions? Are they up to the task?'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这一领域有一个相当强烈的观点，因为我们自己也构建了一个助手。我们的助手使用多层路由架构，具有与当前框架的一些抽象概念相呼应的分支和步骤。在LangGraph稳定之前，我们就开始构建我们的助手。因此，我们不断自问：如果我们从零开始，我们会使用当前的框架抽象吗？它们能胜任这一任务吗？
- en: The current answer is not yet. There is just too much complexity in the overall
    system that doesn’t lend itself to a Pregel-based architecture. If you squint,
    you can map it to nodes and edges but the software abstraction would likely get
    in the way. As it stands, our team tends to prefer code over frameworks.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的回答是“尚不需要”。整体系统的复杂性太大，不适合基于Pregel的架构。如果你眯着眼睛看，可以将其映射为节点和边，但软件抽象可能会阻碍这一点。就目前而言，我们团队更倾向于使用代码而非框架。
- en: We do however, see the value in the agent framework approaches. Namely, it does
    force an architecture that has some best practices and good tooling. They are
    also getting better constantly, expanding where they are useful and what you can
    do with them. It is very likely that our answer may change in the near future
    as these frameworks improve.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们确实看到了代理框架方法的价值。也就是说，它确实强制执行了一种架构，这种架构具有一些最佳实践和良好的工具。它们也在不断进步，扩展它们的适用范围以及你可以用它们做什么。随着这些框架的改进，我们的回答很可能在不久的将来会发生变化。
- en: Do You Actually Need An Agent?
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你真的需要一个代理吗？
- en: 'This begs another important question: what types of applications even require
    an agent? After all, agents cover a broad range of systems — and there is so much
    hype about what is “agentic” these days.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这引出了另一个重要问题：究竟什么类型的应用程序需要代理？毕竟，代理涵盖了广泛的系统 —— 而且如今关于什么是“代理化”的话题也充满了炒作。
- en: 'Here are three criteria to determine whether you might need an agent:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有三个标准来判断你是否可能需要代理：
- en: Does your application follow an iterative flow based on incoming data?
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的应用程序是否基于输入数据遵循迭代流？
- en: Does your application need to adapt and follow different flows based on previously
    taken actions or feedback along the way?
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的应用程序是否需要根据先前采取的行动或途中反馈来调整并遵循不同的流程？
- en: Is there a state space of actions that can be taken? The state space can be
    traversed in a variety of ways, and is not just restricted to linear pathways.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否存在可以采取的行动的状态空间？该状态空间可以通过多种方式遍历，而不仅仅限于线性路径。
- en: What Are The Common Issues To Expect?
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需要预期的常见问题有哪些？
- en: Let’s say that you answer yes to one of these questions and need an agent. Here
    are several known issues to be aware of as you build.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你对其中一个问题回答是肯定的，并且需要一个代理。以下是你在构建时需要注意的几个已知问题。
- en: The first is **long-term planning**. While agents are powerful, they still struggle
    to decompose complex tasks into a logical plan. Worse, they can often get stuck
    in loops that block them from finding a solution. Agents also struggle with **malformed
    tooling calls.** This is typically due to the underlying LLMs powering an agent.
    In each case, human intervention is often needed to course correct.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是**长期规划**。虽然代理很强大，但它们在将复杂任务分解为逻辑计划方面仍然存在困难。更糟的是，它们常常会陷入循环，无法找到解决方案。代理还在**格式不正确的工具调用**方面存在困难。这通常是由于驱动代理的底层LLM所致。在每种情况下，通常需要人工干预来纠正方向。
- en: Another issue to be aware is inconsistent performance due to the **vastness
    of the solution space.** The sheer number of possible actions and paths an agent
    can take makes it difficult to achieve consistent results and tends to drive up
    costs. Perhaps this is why the market is tending toward constrained agents that
    can only choose from a set of possible actions, effectively limiting the solution
    space.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要注意的问题是由于**解决方案空间的广阔**而导致的性能不一致。代理可以采取的可能行动和路径的数量庞大，使得难以实现一致的结果，并且往往推高成本。也许正因为如此，市场正在趋向于受限代理，只能从一组可能的行动中进行选择，有效地限制了解决方案空间。
- en: What Are Some Tactics for Addressing These Challenges?
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应对这些挑战的一些策略是什么？
- en: As noted, one of the most effective strategies is to **map or narrow the solution
    space beforehand**. By thoroughly defining the range of possible actions and outcomes,
    you can reduce ambiguity. Incorporating **domain and business heuristics** into
    the agent’s guidance system is also an easy win, giving agents the context they
    need to make better decisions. **Being explicit about action intentions** (clearly
    defining what each action is intended to accomplish) and creating **repeatable
    processes** (standardizing the steps and methodologies that agents follow) can
    also enhance reliability and make it easier to identify and correct errors when
    they occur.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，最有效的策略之一是**事先映射或缩小解决方案空间**。通过彻底定义可能的行动和结果范围，你可以减少模糊性。将**领域和业务启发式**融入代理的指导系统也是一个简单且有效的方法，它为代理提供了做出更好决策所需的背景。**明确行动意图**（清晰定义每个行动的目的）并创建**可重复的过程**（标准化代理遵循的步骤和方法）也能增强可靠性，并在出现错误时更容易识别和纠正。
- en: Finally, **orchestrating with code and more reliable methods** rather than relying
    solely on LLM planning can dramatically improve agent performance. This involves
    swapping your LLM router for a code-based router where possible. By using code-based
    orchestration, you can implement more deterministic and controllable processes
    and reduce the unpredictability that often comes with LLM-based planning.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**通过代码和更可靠的方法进行协调**，而不是仅仅依赖于LLM规划，可以显著提高代理的性能。这涉及到在可能的情况下用基于代码的路由器替代LLM路由器。通过使用基于代码的协调，你可以实现更确定性和可控的过程，减少常伴LLM规划的不可预测性。
- en: Conclusion
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: With so much hype and the proliferation of new frameworks in a frenzied generative
    AI environment filled with FOMO, it can be easy to lose sight of fundamental questions.
    Taking the time to think about when and where a modern agent framework might —
    and might not — make sense for your use case before diving headlong into an MVP
    is always worthwhile.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在充满FOMO的新框架和狂热生成式AI环境中，过度炒作的情况下，很容易忽视基本问题。在全力投入MVP之前，花时间思考现代代理框架在何时何地可能适合——或不适合——你的使用场景，始终是值得的。
- en: '*Questions? Feel free to reach out here or* [*on Slack*](https://join.slack.com/t/arize-ai/shared_invite/zt-26zg4u3lw-OjUNoLvKQ2Yv53EfvxW6Kg)
    *or find me live in one of our bi-weekly* [*AI research papers*](https://arize.com/ai-research-papers/)
    *readings.*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*有问题吗？欢迎在此联系我或* [*在 Slack 上*](https://join.slack.com/t/arize-ai/shared_invite/zt-26zg4u3lw-OjUNoLvKQ2Yv53EfvxW6Kg)
    *，或者在我们每两周一次的* [*AI 研究论文*](https://arize.com/ai-research-papers/) *阅读会中找到我。*'
