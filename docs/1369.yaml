- en: Terraforming Dataform
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Terraform配置Dataform
- en: 原文：[https://towardsdatascience.com/terraforming-dataform-fa7a80990596?source=collection_archive---------7-----------------------#2024-05-31](https://towardsdatascience.com/terraforming-dataform-fa7a80990596?source=collection_archive---------7-----------------------#2024-05-31)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/terraforming-dataform-fa7a80990596?source=collection_archive---------7-----------------------#2024-05-31](https://towardsdatascience.com/terraforming-dataform-fa7a80990596?source=collection_archive---------7-----------------------#2024-05-31)
- en: 'MLOps: Datapipeline Orchestration'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MLOps：数据管道编排
- en: 'Dataform 101, Part 2: Provisioning with Least Privilege Access Control'
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dataform 101，第2部分：使用最小权限访问控制进行配置
- en: '[](https://koakande.medium.com/?source=post_page---byline--fa7a80990596--------------------------------)[![Kabeer
    Akande](../Images/5e1f083e75741690ae27b00d1e5f1dd3.png)](https://koakande.medium.com/?source=post_page---byline--fa7a80990596--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fa7a80990596--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fa7a80990596--------------------------------)
    [Kabeer Akande](https://koakande.medium.com/?source=post_page---byline--fa7a80990596--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://koakande.medium.com/?source=post_page---byline--fa7a80990596--------------------------------)[![Kabeer
    Akande](../Images/5e1f083e75741690ae27b00d1e5f1dd3.png)](https://koakande.medium.com/?source=post_page---byline--fa7a80990596--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fa7a80990596--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fa7a80990596--------------------------------)
    [Kabeer Akande](https://koakande.medium.com/?source=post_page---byline--fa7a80990596--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--fa7a80990596--------------------------------)
    ·7 min read·May 31, 2024
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--fa7a80990596--------------------------------)
    ·阅读时间：7分钟·2024年5月31日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b3afbfd5e7ff061d52a5ae68268fab7e.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3afbfd5e7ff061d52a5ae68268fab7e.png)'
- en: A typical positioning of Dataform in a data pipeline [Image by author]
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Dataform在数据管道中的典型定位 [作者提供的图片]
- en: This is the concluding part of Dataform 101 showing the fundamentals of setting
    up Dataform with a focus on its authentication flow. This second part focussed
    on terraform implementation of the flow explained in [part 1](https://medium.com/towards-data-science/understanding-dataform-terminologies-and-authentication-flow-aa98c2fbcdfb).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Dataform 101的结尾部分，展示了设置Dataform的基本原理，重点讲解其身份验证流程。第二部分重点讲解了在[第一部分](https://medium.com/towards-data-science/understanding-dataform-terminologies-and-authentication-flow-aa98c2fbcdfb)中解释的流程的Terraform实现。
- en: Dataform Provisioning
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Dataform配置
- en: Dataform can be set up via the GCP console, but Terraform provides an elegant
    approach to provisioning and managing infrastructure such as Dataform. The use
    of Terraform offers portability, reusability and infrastructure versioning along
    with many other benefits. As a result, Terraform knowledge is required to follow
    along in this section. If you are familiar with Terraform, head over to the [GitHub
    repo](https://github.com/kbakande/dataform-001) and download all the code. If
    not, Google cloud skills boost has good [resources](https://www.cloudskillsboost.google/course_templates/443)
    to get started.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过GCP控制台设置Dataform，但Terraform提供了一种优雅的方式来配置和管理诸如Dataform之类的基础设施。使用Terraform提供了可移植性、可重用性和基础设施版本控制等诸多好处。因此，在本节中，您需要具备Terraform知识。如果您熟悉Terraform，请前往[GitHub仓库](https://github.com/kbakande/dataform-001)并下载所有代码。如果不熟悉，可以参考Google
    Cloud Skills Boost提供的[资源](https://www.cloudskillsboost.google/course_templates/443)来入门。
- en: '![](../Images/a6e0ddfc9883b7c5ae7423967a91a66b.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6e0ddfc9883b7c5ae7423967a91a66b.png)'
- en: An architecture flow for a single repo, multi-environment Dataform
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 单一仓库、多环境的Dataform架构流程
- en: Environments setup
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境设置
- en: We start by setting up the two environments, `prod` and `staging` , as reflected
    in the architecture flow diagram above. It should be noted that the code development
    is done on macOS system, and as such, a window system user might need some adjustments
    to follow along.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先设置`prod`和`staging`两个环境，如上面的架构流程图所示。需要注意的是，代码开发是在macOS系统上进行的，因此，Windows系统的用户可能需要做一些调整才能跟随操作。
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Set up staging files**'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**设置临时文件**'
- en: All the initial codes are written within the `staging` directory. This is because
    the proposed architecture provisions Dataform within the staging environment and
    only few resources are provisioned in the production environment.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有初始代码都写在`staging`目录中。这是因为所提议的架构在临时环境中配置了Dataform，而在生产环境中仅配置了少量资源。
- en: 'Let’s start by provisioning a remote bucket to store the Terraform state in
    remote backend. This bit would be done manually and we wouldnt bring the bucket
    under terraform management. It is a bit of a chicken-and-egg case whether the
    bucket in which the Terraform state is stored should be managed by the same Terraform.
    What you call a catch-22\. So we manually create a bucket named *dataform-staging-terraform-state*
    within the staging environment by adding the following in the `staging` directory:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始配置一个远程存储桶，用于在远程后端存储Terraform状态。这一步将手动完成，我们不会将存储桶纳入Terraform管理。这有点像“先有鸡还是先有蛋”的问题，即存储Terraform状态的存储桶是否应由同一Terraform管理。可以称其为一种进退两难的局面。因此，我们将在暂存环境中手动创建一个名为*dataform-staging-terraform-state*的存储桶，并在`staging`目录中添加以下内容：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, add resource providers to the code base.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，向代码库中添加资源提供者。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We then create a variable file to define all the variables used for the infrastructure
    provisioning.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个变量文件，定义所有用于基础设施配置的变量。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `auto.tfvars` file is added to ensure the variables are auto-discoverable.
    Ensure to substitute appropriately for the variable placeholders in the file.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`auto.tfvars`文件被添加，以确保变量能够自动发现。确保适当替换文件中的变量占位符。'
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is followed by secret provisioning where the machine user token is stored.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是密钥配置阶段，其中存储了机器用户的令牌。
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After provisioning the secret, a `data` resource is added to the terraform codebase
    for dynamically reading the stored secret value so Dataform has access to the
    machine user GitHub credentials when provisioned. The `data` resource is conditioned
    on the secret resource to ensure that it only runs when the secret has already
    been provisioned.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 配置完密钥后，`data`资源将被添加到terraform代码库中，用于动态读取存储的密钥值，以便在配置完成后，Dataform能够访问机器用户的GitHub凭证。`data`资源依赖于密钥资源，确保只有在密钥已经配置好之后才会执行。
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We proceed to provision the required service account for the staging environment
    along with granting the required permissions for manifesting data to BigQuery.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续配置暂存环境所需的服务账户，并授予所需的权限以将数据展现到BigQuery。
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And the BQ permissions
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 还有BQ权限。
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It is crunch time, as we have all the required infrastructure to provision Dataform
    in the staging environment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是关键时刻，因为我们已经具备了在暂存环境中配置Dataform所需的所有基础设施。
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The *google_dataform_repository* resource provisions a dataform repository where
    the target remote repo is specified along with the token to access the repo. Then
    we provision the release configuration stating which remote repo branch to generate
    the compilation from and configuring the time with cron schedule.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*google_dataform_repository*资源配置一个Dataform仓库，指定目标远程仓库以及访问该仓库的令牌。接着我们配置发布设置，说明从哪个远程仓库分支生成编译，并配置定时任务的时间。'
- en: Finally, workflow configuration is provisioned with a schedule slightly staggered
    ahead of the release configuration to ensure that the latest compilation is available
    when workflow configuration runs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，工作流配置也将配置好，安排稍微滞后于发布配置，以确保在工作流配置运行时，最新的编译版本已经可用。
- en: Once the Dataform is provisioned, a default service account is created along
    with it in the format *service-{project_number}@gcp-sa-dataform.iam.gserviceaccount.com*.
    This default service account would need to impersonate both the staging and prod
    service accounts to materialise data in those environments.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Dataform配置完成，一个默认的服务账户将与其一同创建，格式为*service-{project_number}@gcp-sa-dataform.iam.gserviceaccount.com*。这个默认服务账户需要模拟暂存和生产环境中的服务账户，以便在这些环境中实现数据。
- en: We modify the `iam.tf` file in the staging environment to grant the required
    roles for Dataform default service account to impersonate the service account
    in the staging environment and access the provisioned secret.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在暂存环境中修改`iam.tf`文件，以授予Dataform默认服务账户所需的角色，使其能够模拟暂存环境中的服务账户并访问已配置的密钥。
- en: '[PRE10]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Based on the principle of **least privilege access control**, the IAM binding
    for targeted resource is used to grant fine-grained access to the default service
    account.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 基于**最小权限访问控制**原则，针对目标资源的IAM绑定用于授予默认服务账户精细化访问权限。
- en: In order not to prolong this post more than necessary, the terraform code for
    provisioning resources in prod environment is available in [GitHub repo](https://github.com/kbakande/dataform-001).
    We only need to provision remote backend bucket and the service account (along
    with fine grained permissions for default service account) in production environment.
    If the provisioning is successful, the dataform status in the staging environment
    should look similar to the image below.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了不让这篇文章过长，生产环境中资源配置的Terraform代码可以在[GitHub仓库](https://github.com/kbakande/dataform-001)中找到。我们只需要在生产环境中配置远程后端存储桶和服务账户（以及默认服务账户的细粒度权限）。如果配置成功，暂存环境中的Dataform状态应类似于下面的图片。
- en: '![](../Images/4ee94aeb09f5d4904218684464d849ec.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ee94aeb09f5d4904218684464d849ec.png)'
- en: Dataform status after successful provisioning in GCP
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: GCP中成功配置后的Dataform状态
- en: 'Some pros and cons of the proposed architecture are highlighted as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是所提架构的一些优缺点：
- en: Pros
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优点
- en: Follows the principle of version control. The proposed architecture has only
    one version but the code can be materialised in multiple environments.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循版本控制的原则。所提架构只有一个版本，但代码可以在多个环境中实现。
- en: Experimentation is confined within the staging environment which mitigate the
    chance of an unintended modification of production data.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实验仅限于暂存环境，这可以减少对生产数据的意外修改的可能性。
- en: Cons
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缺点
- en: Concern that default service account might make unintended change in the production
    environment but this is mitigated with the least privilege access control.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 担心默认服务账户可能会在生产环境中做出意外更改，但通过最小权限访问控制可以缓解这个问题。
- en: Multiple developers working concurrently within the staging environment might
    override data. Though not shown in this post, the scenario can be mitigated with
    [workspace compilation override](https://cloud.google.com/dataform/docs/workspace-compilation-overrides)
    and [schema suffix features](https://cloud.google.com/dataform/docs/workspace-compilation-overrides#:~:text=When%20you%20set%20%24%7BworkspaceName%7D%20as%20the%20schema%20suffix%2C%20Dataform,workspace%20in%20the%20dedicated%20schema.)
    of Dataform.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多个开发人员在暂存环境中并行工作时，可能会覆盖数据。尽管在本文中没有显示，但这个问题可以通过Dataform的[工作区编译覆盖](https://cloud.google.com/dataform/docs/workspace-compilation-overrides)和[模式后缀功能](https://cloud.google.com/dataform/docs/workspace-compilation-overrides#:~:text=When%20you%20set%20%24%7BworkspaceName%7D%20as%20the%20schema%20suffix%2C%20Dataform,workspace%20in%20the%20dedicated%20schema.)来缓解。
- en: As with any architecture, there are pros and cons. The ultimate decision should
    be based on circumstances within the organisation. Hopefully, this post contributes
    towards making that decision.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 像任何架构一样，都会有优缺点。最终的决策应基于组织内部的具体情况。希望这篇文章能够帮助做出这个决策。
- en: Summary
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In [part 1](https://medium.com/towards-data-science/understanding-dataform-terminologies-and-authentication-flow-aa98c2fbcdfb),
    We have gone over some terminologies used within GCP Dataform and a walkthrough
    of the authentication flow for a single repo, multi environment Dataform set up.
    Terraform code is then provided in this part 2 along with the approach to implement
    least privilege access control for the service accounts.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第1部分](https://medium.com/towards-data-science/understanding-dataform-terminologies-and-authentication-flow-aa98c2fbcdfb)中，我们介绍了在GCP
    Dataform中使用的一些术语，并演示了单个仓库、多环境Dataform设置的身份验证流程。本部分2提供了Terraform代码，并介绍了如何为服务账户实施最小权限访问控制的方法。
- en: I hope you find the post helpful in your understanding of Dataform. Lets connect
    on [Linkedln](https://www.linkedin.com/in/koakande/)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这篇文章能帮助你更好地理解Dataform。我们可以在[LinkedIn](https://www.linkedin.com/in/koakande/)上联系。
- en: '*Image credit*: All images in this post have been created by the Author'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片来源*：本文中的所有图片均由作者创建'
- en: '**References**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考文献**'
- en: '[https://medium.com/towards-data-science/understanding-dataform-terminologies-and-authentication-flow-aa98c2fbcdfb](https://medium.com/towards-data-science/understanding-dataform-terminologies-and-authentication-flow-aa98c2fbcdfb)'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://medium.com/towards-data-science/understanding-dataform-terminologies-and-authentication-flow-aa98c2fbcdfb](https://medium.com/towards-data-science/understanding-dataform-terminologies-and-authentication-flow-aa98c2fbcdfb)'
- en: '[https://github.com/kbakande/terraforming-dataform](https://github.com/kbakande/terraforming-dataform)'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://github.com/kbakande/terraforming-dataform](https://github.com/kbakande/terraforming-dataform)'
- en: '[https://www.cloudskillsboost.google/course_templates/443](https://www.cloudskillsboost.google/course_templates/443)'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://www.cloudskillsboost.google/course_templates/443](https://www.cloudskillsboost.google/course_templates/443)'
- en: '[https://cloud.google.com/dataform/docs/workspace-compilation-overrides](https://cloud.google.com/dataform/docs/workspace-compilation-overrides)'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://cloud.google.com/dataform/docs/workspace-compilation-overrides](https://cloud.google.com/dataform/docs/workspace-compilation-overrides)'
