- en: Resolving Circular Imports in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/resolving-circular-imports-in-python-957db3bfa596?source=collection_archive---------5-----------------------#2024-04-25](https://towardsdatascience.com/resolving-circular-imports-in-python-957db3bfa596?source=collection_archive---------5-----------------------#2024-04-25)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON PROGRAMMING
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Understand and resolve circular imports, a common error occurring when two modules
    import each other simultaneously.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nyggus?source=post_page---byline--957db3bfa596--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page---byline--957db3bfa596--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--957db3bfa596--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--957db3bfa596--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page---byline--957db3bfa596--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--957db3bfa596--------------------------------)
    ·7 min read·Apr 25, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/17cfc72a6324bc236ca2020fc41b2bd6.png)'
  prefs: []
  type: TYPE_IMG
- en: Circular imports lead to a never-ending loop. Photo by [Matt Seymour](https://unsplash.com/@mattseymour?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Circular imports occur quite often during the development of Python applications
    and packages. The error arises when two modules attempt to import each other simultaneously
    — this creates a loop where neither module can fully load. As a result, this leads
    to an `ImportError` that states, more or less, that you can’t import an object
    from a partially initialized module.
  prefs: []
  type: TYPE_NORMAL
- en: Oftentimes, resolving this error is straightforward. Sometimes, however, the
    code needs to be redesigned and refactored — occasionally quite extensively. This
    article aims to support you in this by explaining the methods for resolving the
    error.
  prefs: []
  type: TYPE_NORMAL
- en: Solutions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ll explore methods to resolve circular imports without refactoring the code
    to change its behavior. Sometimes, it’ll suffice to simply redefine the responsibilities
    of your classes so they don’t depend directly on each other. However, this approach
    often won’t be enough. Therefore, we’ll focus on strategies for addressing circular
    imports without changing the behavior of the objects defined in the modules causing
    them.
  prefs: []
  type: TYPE_NORMAL
