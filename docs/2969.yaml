- en: Data Quality Doesn’t Need to Be Complicated
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据质量不需要复杂
- en: 原文：[https://towardsdatascience.com/stop-overcomplicating-data-quality-4569fc6d35a4?source=collection_archive---------1-----------------------#2024-12-10](https://towardsdatascience.com/stop-overcomplicating-data-quality-4569fc6d35a4?source=collection_archive---------1-----------------------#2024-12-10)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/stop-overcomplicating-data-quality-4569fc6d35a4?source=collection_archive---------1-----------------------#2024-12-10](https://towardsdatascience.com/stop-overcomplicating-data-quality-4569fc6d35a4?source=collection_archive---------1-----------------------#2024-12-10)
- en: Three Zero-Cost Solutions That Take Hours, Not Months
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三种零成本解决方案，只需几个小时，而非几个月
- en: '[](https://medium.com/@caiparryjones96?source=post_page---byline--4569fc6d35a4--------------------------------)[![Cai
    Parry-Jones](../Images/60b83f5167651f9621a3e73b8d72ccae.png)](https://medium.com/@caiparryjones96?source=post_page---byline--4569fc6d35a4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--4569fc6d35a4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--4569fc6d35a4--------------------------------)
    [Cai Parry-Jones](https://medium.com/@caiparryjones96?source=post_page---byline--4569fc6d35a4--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@caiparryjones96?source=post_page---byline--4569fc6d35a4--------------------------------)[![Cai
    Parry-Jones](../Images/60b83f5167651f9621a3e73b8d72ccae.png)](https://medium.com/@caiparryjones96?source=post_page---byline--4569fc6d35a4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--4569fc6d35a4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--4569fc6d35a4--------------------------------)
    [Cai Parry-Jones](https://medium.com/@caiparryjones96?source=post_page---byline--4569fc6d35a4--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--4569fc6d35a4--------------------------------)
    ·8 min read·Dec 10, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--4569fc6d35a4--------------------------------)
    ·阅读时长 8 分钟 ·2024年12月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/4b570b710780faeea2899cb85facde86.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4b570b710780faeea2899cb85facde86.png)'
- en: 'A ‘data quality’ certified pipeline. Source: [unsplash.com](https://unsplash.com/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个“数据质量”认证的管道。来源：[unsplash.com](https://unsplash.com/)
- en: In my career, data quality initiatives have usually meant big changes. From
    governance processes to costly tools to dbt implementation — data quality projects
    never seem to want to be small.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的职业生涯中，数据质量相关的项目通常意味着重大变革。从治理流程到昂贵的工具，再到 dbt 实施——数据质量项目似乎从不想做得小而简单。
- en: What’s more, fixing the data quality issues this way often leads to new problems.
    More complexity, higher costs, slower data project releases…
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 更重要的是，使用这种方式修复数据质量问题通常会导致新问题。更复杂、更高的成本、更慢的数据项目发布……
- en: '![](../Images/3713bea14e131ad68e6fde839cda4e8f.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3713bea14e131ad68e6fde839cda4e8f.png)'
- en: created by the author using [Google Sheets](https://workspace.google.com/intl/en_uk/products/sheets/)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者使用 [Google Sheets](https://workspace.google.com/intl/en_uk/products/sheets/)
    创建
- en: But it doesn’t have to be this way.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但事实并非一定如此。
- en: While companies like Google and Meta require extensive data quality frameworks
    due to their massive scale and complexity, most organizations can achieve excellent
    data quality with much simpler approaches.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然像 Google 和 Meta 这样的大公司由于其庞大的规模和复杂性需要广泛的数据质量框架，但大多数组织可以通过更简单的方法实现优秀的数据质量。
- en: In this article, we’ll delve into three methods small to medium sized data projects
    can use to quickly improve their data quality, all while keeping
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将探讨三种小型到中型数据项目可以用来快速提高数据质量的方法，同时保持
- en: complexity to a minimum and new costs at zero. Let’s get to it!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将复杂性降到最低，新的成本为零。我们开始吧！
- en: TL;DR
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简短总结：
- en: Take advantage of old school database tricks, like ENUM data types, and column
    constraints.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用老派的数据库技巧，如 ENUM 数据类型和列约束。
- en: Create a custom dashboard for your specific data quality problem.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的特定数据质量问题创建一个自定义仪表板。
- en: Generate data lineage with one small Python script.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一个简单的 Python 脚本生成数据血统。
- en: Take advantage of old school database tricks
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用老派的数据库技巧
- en: In the last 10–15 years we’ve seen massive changes to the data industry, notably
    big data, parallel processing, cloud computing, data warehouses, and new tools
    (lots and lots of new tools).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去的 10 到 15 年里，我们见证了数据行业的巨大变化，尤其是大数据、并行处理、云计算、数据仓库和新工具（大量大量的新工具）。
- en: Consequently, we’ve had to say goodbye to some things to make room for all this
    new stuff. Some positives (Microsoft Access comes to mind), but some are questionable
    at best, such as traditional data design principles and data quality and validation
    at ingestion. The latter will be the subject of this section.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了腾出空间容纳所有这些新事物，我们不得不告别一些东西。有一些积极的方面（比如微软 Access），但也有一些最多只能说是值得怀疑的，比如传统的数据设计原则和数据质量及验证过程（数据摄入时）。后者将是本节的主题。
- en: Firstly, what do I mean by “data quality and validation at ingestion”? Simply,
    it means checking data before it enters a table. Think of a bouncer outside a
    nightclub.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，什么是“数据质量和验证在摄入时”？简单来说，这意味着在数据进入表格之前对其进行检查。可以把它想象成夜店外的保安。
- en: What it has been replaced with is build-then-test, which means putting new data
    in tables first, and then checking it later. Build-then-test is the chosen method
    for many modern data quality tools, including the most popular, [dbt](https://www.getdbt.com/product/what-is-dbt).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 替代方案是构建后再测试，这意味着先将新数据放入表格中，然后再检查它。构建后再测试是许多现代数据质量工具选择的方法，包括最流行的[dbt](https://www.getdbt.com/product/what-is-dbt)。
- en: Dbt runs the whole data transformation pipeline first, and only once all the
    new data is in place, it checks to see if the data is good. Of course, this can
    be the optimal solution in many cases. For example, if the business is happy to
    sacrifice quality for speed, or if there is a QA table before a production table
    (coined by Netflix as [Write-Audit-Publish](https://lakefs.io/blog/data-engineering-patterns-write-audit-publish/)).
    However, engineers who only use this method of data quality are potentially missing
    out on some big wins for their organization.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Dbt 会首先运行整个数据转换管道，只有在所有新数据就位后，才会检查数据是否合格。当然，在许多情况下，这可能是最佳解决方案。例如，如果业务愿意为速度而牺牲质量，或者如果在生产表之前有一个
    QA 表（Netflix 称之为[写入-审计-发布](https://lakefs.io/blog/data-engineering-patterns-write-audit-publish/)）的话。然而，仅使用这种数据质量方法的工程师可能错失了对其组织的巨大收益。
- en: '![](../Images/46fe0562178bfdf861d61c21943b513c.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/46fe0562178bfdf861d61c21943b513c.png)'
- en: Testing before vs after generating tables. Created by the author using [draw.io](https://app.diagrams.net/)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 生成表格前后进行测试。由作者使用[draw.io](https://app.diagrams.net/)创建。
- en: Test-then-build has two main benefits over build-then-test.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 测试后再构建比构建后再测试有两个主要优势。
- en: The first is that it ensures the data in downstream tables meets the data quality
    standards expected **at all times**. This gives the data a level of trustworthiness,
    so often lacking, for downstream users. It can also reduce anxiety for the data
    engineer/s responsible for the pipeline.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个优势是，它确保下游表格中的数据始终符合预期的数据质量标准。这为下游用户提供了一定程度的可信度，这种可信度通常是缺乏的。它还可以减轻负责数据管道的工程师的焦虑感。
- en: I remember when I owned a key financial pipeline for a company I used to work
    for. Unfortunately, this pipeline was very prone to data quality issues, and the
    solution in place was a build-then-test system, which ran each night. This meant
    I needed to rush to my station early in the morning each day to check the results
    of the run before any downstream users started looking at their data. If there
    were any issues I then needed to either quickly fix the issue or send a Slack
    message of shame announcing to the business the data sucks and to please be patient
    while I fix it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得当我曾经在一家公司负责一个关键财务管道时。遗憾的是，这个管道非常容易出现数据质量问题，而当时的解决方案是一个构建后再测试的系统，每晚运行一次。这意味着我每天早上必须赶早去检查运行结果，以免下游用户开始查看他们的数据。如果出现任何问题，我就需要迅速修复问题，或者发送一条羞耻的
    Slack 消息，通知业务部门数据有问题，请耐心等待我修复。
- en: Of course, test-then-build doesn’t totally fix this anxiety issue. The story
    would change from needing to rush to fix the issue to avoid bad data for downstream
    users to rushing to fix the issue to avoid stale data for downstream users. However,
    engineering is all about weighing the pros and cons of different solutions. And
    in this scenario I know old data would have been the best of two evils for both
    the business and my sanity.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，测试后再构建并不能完全解决这种焦虑问题。故事的转变从需要匆忙修复问题以避免下游用户看到不良数据，变成了匆忙修复问题以避免下游用户看到过时数据。然而，工程师的工作就是权衡不同解决方案的利弊。在这种情况下，我知道，对于业务和我的理智来说，旧数据是两种恶性选择中的最佳方案。
- en: 'The second benefit test-then-build has is that it can be much simpler to implement,
    especially compared to setting up a whole QA area, which is a bazooka-to-a-bunny
    solution for solving most data quality issues. All you need to do is include your
    data quality criteria when you create the table. Have a look at the below PostgreSQL
    query:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 测试-然后构建的第二个好处是，它通常比设置一个完整的QA区域更容易实现，尤其是与为解决大多数数据质量问题而准备的“火箭筒打兔子”解决方案相比。你需要做的就是在创建表时包含数据质量标准。看看下面的PostgreSQL查询：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These 14 lines of code will ensure the daily_revenue table enforces the following
    standards:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这14行代码将确保daily_revenue表强制执行以下标准：
- en: '`id`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`id`'
- en: Primary key constraint ensures uniqueness.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主键约束确保唯一性。
- en: '`date`'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`date`'
- en: Cannot be a future date (via CHECK constraint).
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不能是未来日期（通过CHECK约束）。
- en: Forms part of a unique constraint with revenue_source.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是与revenue_source的唯一约束的一部分。
- en: '`revenue_source`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`revenue_source`'
- en: Cannot be NULL.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不能为NULL。
- en: Forms part of a unique constraint with date.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是与date的唯一约束的一部分。
- en: Must be a valid value from revenue_source_type enum.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须是revenue_source_type枚举中的有效值。
- en: '`gross_amount`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`gross_amount`'
- en: Cannot be NULL.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不能为NULL。
- en: Must be >= 0.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须大于或等于0。
- en: Must be >= processing_fees + tax_amount.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须大于或等于processing_fees + tax_amount。
- en: Must be >= net_amount.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须大于或等于net_amount。
- en: Precise decimal handling.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精确的小数处理。
- en: '`net_amount`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`net_amount`'
- en: Cannot be NULL.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不能为NULL。
- en: Must be >= 0.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须大于或等于0。
- en: Must be <= gross_amount.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须小于或等于gross_amount。
- en: Precise decimal handling.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精确的小数处理。
- en: '`currency`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`currency`'
- en: Must be a valid value from currency_code_type enum.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须是currency_code_type枚举中的有效值。
- en: '`transaction_count`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`transaction_count`'
- en: Cannot be NULL.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不能为NULL。
- en: Must be >= 0.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须大于或等于0。
- en: It’s simple. Reliable. And would you believe all of this was available to us
    since the release of PostgreSQL 6.5… which came out in 1999!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，可靠。你能相信这些功能自PostgreSQL 6.5发布以来就已经可用吗……它发布于1999年！
- en: Of course there’s no such thing as a free lunch. Enforcing constraints this
    way does have its drawbacks. For example, it makes the table a lot less flexible,
    and it will reduce the performance when updating the table. As always, you need
    to think like an engineer before diving into any tool/technology/method.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，没有免费的午餐。通过这种方式强制执行约束确实有其缺点。例如，它使得表格的灵活性大大降低，并且在更新表格时会降低性能。像往常一样，在深入使用任何工具/技术/方法之前，你需要像工程师一样思考。
- en: Create a custom dashboard
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义仪表板
- en: I have a confession to make. I used to think good data engineers didn’t use
    dashboard tools to solve their problems. I thought a real engineer looks at logs,
    hard-to-read code, and whatever else made them look smart if someone ever glanced
    at their computer screen.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个忏悔要说。我曾经认为优秀的数据工程师不会使用仪表板工具来解决问题。我认为一个真正的工程师会查看日志、难以阅读的代码，以及其他任何让他们看起来聪明的东西，如果有人不小心瞥见他们的电脑屏幕的话。
- en: I was dumb.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我当时真傻。
- en: It turns out they can be really valuable if executed effectively for a clear
    purpose. Furthermore, most BI tools make creating dashboards super easy and quick,
    without (too) much time spent learning the tool.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，如果有效地执行并有明确的目的，它们可以非常有价值。此外，大多数BI工具使得创建仪表板变得非常简单和快速，而且不需要（太多）时间来学习该工具。
- en: Back to my personal pipeline experiences. I used to manage a daily aggregated
    table of all the business’ revenue sources. Each source came from a different
    revenue provider, and as such a different system. Some would be via API calls,
    others via email, and others via a shared S3 bucket. As any engineer would expect,
    some of these sources fell over from time-to-time, and because they came from
    third parties, I couldn’t fix the issue at source (only ask, which had very limited
    success).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我个人的管道经验。我曾经管理一个包含所有业务收入来源的每日汇总表。每个来源来自不同的收入提供者，因此来自不同的系统。有些是通过API调用，有些通过电子邮件，还有些通过共享的S3桶。正如任何工程师所预期的那样，这些来源有时会出现问题，而由于它们来自第三方，我无法在源头解决问题（只能请求，成功的机会非常有限）。
- en: Originally, I had only used failure logs to determine where things needed fixing.
    The problem was priority. Some failures needed quickly fixing, while others were
    not important enough to drop everything for (we had some revenue sources that
    literally reported pennies each day). As a result, there was a build up of small
    data quality issues, which became difficult to keep track of.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，我只使用故障日志来确定需要修复的地方。问题在于优先级。一些故障需要迅速修复，而另一些则不够重要，不能因此打乱所有工作（我们有些收入来源每天报告的收入只有几分钱）。因此，出现了一些小的数据质量问题的积累，变得难以追踪。
- en: Enter Tableau.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 引入Tableau。
- en: 'I created a very basic dashboard that highlighted metadata by revenue source
    and date for the last 14 days. Three metrics were all I needed:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个非常基础的仪表盘，展示了过去14天按收入来源和日期的元数据。三个指标就是我所需要的：
- en: A green or red mark indicating whether data was present or missing.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个绿色或红色的标记，表示数据是否存在或缺失。
- en: The row count of the data.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据的行数。
- en: The sum of revenue of the data.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据的收入总和。
- en: '![](../Images/c52b8496ecc6364ad902401ced5c886e.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c52b8496ecc6364ad902401ced5c886e.png)'
- en: A simple yet effective dashboard. Created by the author using [Tableau](https://www.tableau.com/en-gb)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单但有效的仪表盘。由作者使用[Tableau](https://www.tableau.com/en-gb)创建
- en: This made the pipeline’s data quality a whole lot easier to manage. Not only
    was it much quicker for me to glance at where the issues were, but it was user-friendly
    enough for other people to read from too, allowing for shared responsibility.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得管道的数据质量管理变得更加轻松。不仅我能更快速地查看问题所在，而且它足够用户友好，其他人也能轻松阅读，确保了责任的共享。
- en: After implementing the dashboard, bug tickets reported by the business related
    to the pipeline dropped to virtually zero, as did my risk of a stroke.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 实施仪表盘后，业务方关于管道的错误工单几乎降到零，我的中风风险也降低了。
- en: Map your data with a lineage chart
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用血缘图绘制您的数据
- en: Simple data observability solutions don’t just stop at dashboards.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的数据可观察性解决方案不仅限于仪表盘。
- en: Data lineage can be a dream for quickly spotting what tables have been affected
    by bad data upstream.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 数据血缘图可以帮助快速发现受坏数据影响的表格。
- en: However, it can also be a mammoth task to implement.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，实施起来也可能是一项庞大的任务。
- en: 'The number one culprit for this, in my opinion, is dbt. A key selling point
    of the open-source tool is its data lineage capabilities. But to achieve this
    you have to bow down to dbt’s framework. Including, but not limited to:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，造成这一问题的首要原因是dbt。这个开源工具的一个关键卖点就是它的数据血缘功能。但为了实现这一点，您必须屈服于dbt的框架。这包括但不限于：
- en: Implementing [Jinja3](https://jinja.palletsprojects.com/en/stable/) in all you
    SQL files.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有SQL文件中实现[Jinja3](https://jinja.palletsprojects.com/en/stable/)。
- en: Creating a YAML file for each data model.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个数据模型创建一个YAML文件。
- en: Add Source data configuration via YAML files.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过YAML文件添加源数据配置。
- en: Set up a development and testing process e.g. development environment, version
    control, CI/CD.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置开发和测试流程，例如开发环境、版本控制、CI/CD。
- en: Infrastructure set-up e.g. hosting your own server or purchasing a managed version
    ([dbtCloud](https://www.getdbt.com/pricing)).
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础设施设置，例如托管自己的服务器或购买托管版本([dbtCloud](https://www.getdbt.com/pricing))。
- en: Yeah, it’s a lot.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，确实很多。
- en: But it doesn’t have to be. Ultimately, all you need for dynamic data lineage
    is a machine that scans your SQL files, and something to output a user-friendly
    lineage map. Thanks to Python, this can be achieved using a script with as few
    as 100 lines of code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 但它不一定非得是这样。归根结底，实现动态数据血缘图所需的就是一台扫描您的SQL文件的机器，以及输出用户友好的血缘图的工具。得益于Python，这可以通过一个仅有100行代码的脚本来实现。
- en: If you know a bit of Python and LLM prompting you should be able to hack the
    code in an hour. Alternatively, there’s a lightweight open-source Python tool
    called [SQL-WatchPup](https://github.com/caitpj/SQL-WatchPup) that already has
    the code.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你了解一些Python和LLM提示，你应该能在一个小时内修改代码。或者，已经有一个轻量级的开源Python工具叫做[SQL-WatchPup](https://github.com/caitpj/SQL-WatchPup)，它已经包含了代码。
- en: 'Provided you have all your SQL files available, in 15 minutes of set up you
    should be able to generate dynamic data lineage maps like so:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 只要您拥有所有的SQL文件，在15分钟的设置之后，您就应该能够生成像这样的动态数据血缘图：
- en: '![](../Images/2ce584894fa4dbecf310e22749ba9487.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2ce584894fa4dbecf310e22749ba9487.png)'
- en: Example data lineage map output. Created by the author using [SQL-WatchPup](https://github.com/caitpj/SQL-WatchPup)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 示例数据血缘图输出。由作者使用[SQL-WatchPup](https://github.com/caitpj/SQL-WatchPup)创建
- en: That’s it. No server hosting costs. No extra computer languages to learn. No
    restructuring of your files. Just running one simple Python script locally.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。没有服务器托管费用。无需学习额外的编程语言。无需重构文件。只需在本地运行一个简单的Python脚本。
- en: Conclusion
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Let’s face it — we all love shiny new in-vogue tools, but sometimes the best
    solutions are old, uncool, and/or unpopular.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话——我们都喜欢那些闪亮的新工具，但有时最好的解决方案是那些老旧、不可酷、和/或不流行的工具。
- en: 'The next time you’re faced with data quality headaches, take a step back before
    diving into that massive infrastructure overhaul. Ask yourself: Could a simple
    database constraint, a basic dashboard, or a lightweight Python script do the
    trick?'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 下次当你面临数据质量问题时，先退后一步，再考虑是否需要进行那次大规模的基础设施改造。问问自己：一个简单的数据库约束、一个基础的仪表盘，或者一个轻量级的
    Python 脚本，能解决问题吗？
- en: Your sanity will thank you for it. Your company’s budget will too.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你的理智会感谢你这么做，你公司的预算也会感谢你。
