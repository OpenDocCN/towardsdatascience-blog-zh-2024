- en: Semantic Segmentation of Remote Sensing Imagery using k-Means
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用k-Means算法进行遥感影像的语义分割
- en: 原文：[https://towardsdatascience.com/semantic-segmentation-of-remote-sensing-imagery-using-k-means-e4c165d9218e?source=collection_archive---------2-----------------------#2024-03-14](https://towardsdatascience.com/semantic-segmentation-of-remote-sensing-imagery-using-k-means-e4c165d9218e?source=collection_archive---------2-----------------------#2024-03-14)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/semantic-segmentation-of-remote-sensing-imagery-using-k-means-e4c165d9218e?source=collection_archive---------2-----------------------#2024-03-14](https://towardsdatascience.com/semantic-segmentation-of-remote-sensing-imagery-using-k-means-e4c165d9218e?source=collection_archive---------2-----------------------#2024-03-14)
- en: From scratch in python🐍
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从零开始在Python中实现🐍
- en: '[](https://medium.com/@alexroz?source=post_page---byline--e4c165d9218e--------------------------------)[![Aleksei
    Rozanov](../Images/748b69bfaccf39c9aa568a9e6f41eec3.png)](https://medium.com/@alexroz?source=post_page---byline--e4c165d9218e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--e4c165d9218e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--e4c165d9218e--------------------------------)
    [Aleksei Rozanov](https://medium.com/@alexroz?source=post_page---byline--e4c165d9218e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@alexroz?source=post_page---byline--e4c165d9218e--------------------------------)[![Aleksei
    Rozanov](../Images/748b69bfaccf39c9aa568a9e6f41eec3.png)](https://medium.com/@alexroz?source=post_page---byline--e4c165d9218e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--e4c165d9218e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--e4c165d9218e--------------------------------)
    [Aleksei Rozanov](https://medium.com/@alexroz?source=post_page---byline--e4c165d9218e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--e4c165d9218e--------------------------------)
    ·9 min read·Mar 14, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--e4c165d9218e--------------------------------)
    ·9分钟阅读·2024年3月14日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/904dc8dee478d11729c5abcd698f3412.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/904dc8dee478d11729c5abcd698f3412.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [作者](https://medium.com/@alexroz) 提供。
- en: One of the most simple and genius ML models, in my opinion, is k-Means clustering.
    It relates to the group of unsupervised learning algorithms and is capable of
    finding patterns inside an unlabeled dataset. The most pleasant feature is that
    it lacks complicated math, and basically any high school student can successfully
    implement and use this method. So in this article I want to share how you can
    build k-Means algorithm from scratch in python using only *numpy* and *pandas*
    libraries and apply it to a real world problem — semantic segmentation of satellite
    imagery.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，最简单且最具天才的机器学习模型之一是k-Means聚类算法。它属于无监督学习算法的一类，能够在没有标签的数据集中发现模式。它最令人愉悦的特点是没有复杂的数学运算，基本上任何一位高中生都能成功实现并使用这个方法。所以在这篇文章中，我想分享如何仅使用*numpy*和*pandas*库在Python中从零开始构建k-Means算法，并将其应用于一个实际问题——卫星影像的语义分割。
- en: Firstly, let’s talk about the data we have.
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首先，让我们谈谈我们所拥有的数据。
- en: In one of my previous articles, I talked about the problem of the Aral Sea shrinkage.
    As a result, we managed to get remote sensing imagery from MODIS using Google
    Earth Engine, which strongly indicates that the sea is drying. So I wondered,
    how can we estimate the change of the water surface between 2000 and 2023 using
    ML semantic segmentation? The answer is k-Means!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我之前的一篇文章中，我谈到了咸海缩小的问题。结果，我们通过Google Earth Engine获得了来自MODIS的遥感影像，这强烈表明海水正在干涸。因此，我想知道，如何使用机器学习的语义分割来估算2000年到2023年间水面变化？答案就是k-Means！
- en: '[](https://medium.com/@alexroz/how-can-a-sea-disappear-case-study-of-the-aral-sea-using-python-and-modis-data-c59429cb73dd?source=post_page-----e4c165d9218e--------------------------------)
    [## How can a sea disappear? Case study of the Aral Sea using Python and MODIS
    data.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@alexroz/how-can-a-sea-disappear-case-study-of-the-aral-sea-using-python-and-modis-data-c59429cb73dd?source=post_page-----e4c165d9218e--------------------------------)
    [## 海洋如何消失？使用Python和MODIS数据对咸海的案例研究。'
- en: Let’s create a timelapse and check if it’s true!
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让我们创建一个时间推移视频，看看它是否真实！
- en: medium.com](https://medium.com/@alexroz/how-can-a-sea-disappear-case-study-of-the-aral-sea-using-python-and-modis-data-c59429cb73dd?source=post_page-----e4c165d9218e--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@alexroz/how-can-a-sea-disappear-case-study-of-the-aral-sea-using-python-and-modis-data-c59429cb73dd?source=post_page-----e4c165d9218e--------------------------------)
- en: Before diving into coding, let’s have a look at the data we are going to use
    in this tutorial. These are two RGB images of the same area with an interval of
    23 years, however it’s clear that the land surface properties and atmospheric
    conditions (clouds, aerosols etc.) are different. That’s why I decided to train
    two separate k-Means models, one for each image.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入编码之前，我们先来看一下在本教程中将使用的数据。这是同一地区的两张RGB图像，间隔23年，然而很明显，土地表面特性和大气条件（云、气溶胶等）是不同的。这就是为什么我决定为每张图像分别训练两个独立的k-均值模型。
- en: '![](../Images/2cfcc0332a5f81c03112fc9ecc408c78.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2cfcc0332a5f81c03112fc9ecc408c78.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[作者](https://medium.com/@alexroz)。
- en: To follow up the tutorial, you can download and run the notebook [**here**](https://github.com/alexxxroz/Medium/blob/main/Medium_k_Means.ipynb).
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要跟随这个教程，你可以下载并运行这个笔记本[**这里**](https://github.com/alexxxroz/Medium/blob/main/Medium_k_Means.ipynb)。
- en: 'First of all, let’s import the necessary libraries and upload the data to the
    notebook:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们导入必要的库并将数据上传到笔记本：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can see that the area covered by the images is quite large, so I suggest
    to zoom in a little:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到图像覆盖的区域相当大，所以我建议稍微放大一些：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/03b13a7e33bfb6dd16192ee0c087b008.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/03b13a7e33bfb6dd16192ee0c087b008.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[作者](https://medium.com/@alexroz)。
- en: And the last step before the ML phase, let’s convert our images to *pandas*
    dataframes (one column for each image channel). I do that for the sake of visibility
    of my explanations. If you want to get it optimized, it’s better to use *numpy*
    arrays instead.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习阶段之前的最后一步，我们将图像转换为*pandas*数据框（每个图像通道一列）。这样做是为了便于我解释。如果你想要优化，使用*numpy*数组会更好。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: k-Means
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: k-均值
- en: So what is the idea behind the algorithm?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 那么算法背后的思想是什么呢？
- en: 'Imagine that you judge about the taste of food using two criteria: sweetness
    and price. Keeping this in mind, I’ll give you a set of possible options to eat:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你用两个标准来判断食物的味道：甜度和价格。记住这一点，我会给你一组可能的食物选项：
- en: '![](../Images/3bd99b33a1a63713051e4885099ad0dc.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3bd99b33a1a63713051e4885099ad0dc.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[作者](https://medium.com/@alexroz)。
- en: 'I bet your brain has already split the options into three clusters: fruits,
    drinks and bakery. Basically, you unconsciously clustered the 2-dimensional data,
    which are defined by a pair of values — (sweetness; price).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢打赌你的大脑已经将选项分成了三个簇：水果、饮料和烘焙食品。基本上，你在无意识中将这2维数据进行了聚类，这些数据由一对值定义——（甜度；价格）。
- en: '![](../Images/1003f1dda8b9e40cced2c3a901d42e22.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1003f1dda8b9e40cced2c3a901d42e22.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[作者](https://medium.com/@alexroz)。
- en: In the case of **k-Means**, the goal of the algorithm is quite similar — to
    find a *pre-set* number of cluster, **k**, in n-dimensional space (e.g. besides
    sweetness and price you want to account for nutrition, health, presence of the
    food in your fridge, and in this case, n = 5).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在**k-均值**的情况下，算法的目标非常相似——在n维空间中找到一个*预设的*簇数量**k**（例如，除了甜度和价格，你还想考虑营养、健康、冰箱中食物的存在，在这种情况下，n
    = 5）。
- en: 'The algorithms includes the following stages:'
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 该算法包括以下几个阶段：
- en: I. Define the number of clusters.
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: I. 定义簇的数量。
- en: As I mentioned beforehand, **k** in k-Means is the number of clusters you want
    to get in the end, and you’re supposed to set this value **before** training the
    model.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，**k**在k-均值中是你最终希望得到的簇的数量，你应该在训练模型之前设置这个值。
- en: II. Randomly initialize centroids.
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: II. 随机初始化质心。
- en: Centroid is an integral part of k-Means. Basically, centroid is a circle with
    a center, which is defined a set of coordinates, and each centroid represents
    a cluster. For instance, in our previous example there are 3 centroids.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 质心是k-均值算法中的一个重要部分。基本上，质心是一个圆形，中心由一组坐标定义，每个质心代表一个簇。例如，在我们之前的例子中有三个质心。
- en: III. Calculate distances and assign clusters.
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: III. 计算距离并分配簇。
- en: Now we need to find how far each point is from each centroid. Based on this
    calculations, we assign each point to the least distant centroid (cluster).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要找出每个点距离每个质心的远近。根据这些计算，我们将每个点分配给最远的质心（簇）。
- en: IV. Calculate new centroids.
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IV. 计算新的质心。
- en: Now each of our clusters contains at least one points, so it’s time to re-calculate
    the centroids simply by taking mean coordinates across all cluster points.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的每个簇至少包含一个点，所以是时候重新计算质心了，方法是取所有簇内点的平均坐标。
- en: And that’s it! We repeat steps 2–4 until centroids are not changing.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们重复步骤2到4，直到质心不再发生变化。
- en: '![](../Images/e7c1dcf0ff1310e65cf999afb3f7c39c.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e7c1dcf0ff1310e65cf999afb3f7c39c.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: Time To Code.
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码时间。
- en: Now let’s wrap this really simple idea behind k-Means into python code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将这个非常简单的k-Means思想封装成Python代码。
- en: 'Reminder: in this task we have **3D** problem, i.e. our **X**, **Y** and **Z**
    are **Red**, **Green** and **Blue** image channels!'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提醒：在这个任务中，我们有**3D**问题，也就是说，我们的**X**、**Y**和**Z**分别是**红色**、**绿色**和**蓝色**图像通道！
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: On the first stage we create a list **L** to collect all the distances between
    clusters to visualize them afterwards and randomly sample K points from the dataset
    to make them our centroids (or alternatively, you can assign random values to
    the centroids).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一阶段，我们创建一个列表**L**，收集所有簇之间的距离，方便之后可视化，并从数据集中随机抽取K个点作为质心（或者，你也可以为质心分配随机值）。
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now we need to calculate the distances between centroids and data points. There
    are lots of different distance metrics in Data Science, but let’s focus on the
    following ones — Euclidean, Manhattan, Chebyshev.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要计算质心和数据点之间的距离。在数据科学中有很多不同的距离度量，但让我们聚焦于以下几种——欧几里得距离、曼哈顿距离、切比雪夫距离。
- en: 'For Euclidean distance:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于欧几里得距离：
- en: '![](../Images/3b94c0589edc3248b5a6e9327a831cce.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3b94c0589edc3248b5a6e9327a831cce.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: 'For Manhattan:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于曼哈顿距离：
- en: '![](../Images/ab3ef1f64e041902d895fe4f4217963f.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ab3ef1f64e041902d895fe4f4217963f.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: 'For Chebyshev:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于切比雪夫距离：
- en: '![](../Images/fcffdf977d6d12766b4d9f542421497f.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fcffdf977d6d12766b4d9f542421497f.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: 'To use this formulas, let’s write a versatile function for **any** number of
    dimensions:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用这些公式，让我们为**任何**维度数量编写一个通用函数：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So now we can simply calculate distances and assign a cluster to each data point.
    Thus, our new centroids became old, so we store them in another variable and recalculate
    the new ones. To do that we iterate over each cluster and take a mean across all
    the coordinates (in our case, across RGB channels). Therefore, the variable new_centroids
    has a shape of **(k,3)**.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以简单地计算距离，并将每个数据点分配到一个簇中。因此，我们的新质心变成了旧的，所以我们将它们存储在另一个变量中，并重新计算新的质心。为了做到这一点，我们遍历每个簇，并对所有坐标求均值（在我们的案例中，是对RGB通道求均值）。因此，变量new_centroids的形状是**(k,3)**。
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, we repeat all these steps until centroids’ coordinates don’t change
    anymore. I expressed this condition as this: the difference between average cluster
    coordinates should be less than 0.001\. But you can play around with other numbers
    here.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们重复所有这些步骤，直到质心坐标不再变化。我将这个条件表示为：簇的平均坐标差应小于0.001。但是你可以尝试其他的数值。
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And that’s it. The algorithm is ready to be trained! So let’s set k = 3 and
    store the results into dictionaries.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，算法准备好进行训练了！所以我们将k设置为3，并将结果存储到字典中。
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: I decided to compare all the distance metrics for this particular task as you
    can see, and it’s evident that here Manhattan distance was the fastest.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我决定比较所有的距离度量，并且很明显在这个任务中曼哈顿距离是最快的。
- en: '![](../Images/3bec8b58dce86ff8c83f8b20c27e9bd6.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3bec8b58dce86ff8c83f8b20c27e9bd6.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: 'Before visualizing the clusters, let’s convert the clusters names into int
    type:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在可视化簇之前，让我们将簇的名称转换为整数类型：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Time make the final plots!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候做出最终的图表了！
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/b00aff5116c9cbab942e585d4252f441.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b00aff5116c9cbab942e585d4252f441.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: '![](../Images/492f7beda408d7069bb741e67a3163b5.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/492f7beda408d7069bb741e67a3163b5.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: '![](../Images/dfe919b855acb1e371c3bbe9e8bb4ee5.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dfe919b855acb1e371c3bbe9e8bb4ee5.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: It’s not hard to see that Euclidean and Manhattan distance turned out be the
    most suitable for this particular task. But to make sure that it’s true, let’s
    evaluate the k-Means clustering results using the Silhouette Coefficient. This
    metric is perfect for training results assessment when there are no labeled true
    values for the clustered points.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 不难看出，欧几里得距离和曼哈顿距离是最适合这个任务的距离度量。但为了确保这一点，让我们通过轮廓系数评估k-Means聚类结果。当没有聚类点的标签真实值时，这个指标对于训练结果的评估非常完美。
- en: To calculate it we will use *sklearn* function [[1]](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算它，我们将使用*sklearn*函数[[1]](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score)。
- en: '![](../Images/ac04245c27d5fd1d3c6482d2a748d9a8.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ac04245c27d5fd1d3c6482d2a748d9a8.png)'
- en: Image by [sklearn](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[sklearn](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score)。
- en: '**a —** the mean distance between a sample and all other points in the same
    class.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**a —** 样本与同一类中所有其他点之间的平均距离。'
- en: '**b —** the mean distance between a sample and all other points in the *next
    nearest cluster*.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**b —** 样本与*下一个最近的簇*中所有其他点之间的平均距离。'
- en: The range of values of the Silhouette Coefficient is [-1,1]. And yep, it’s computationally
    expensive, as you need to calculate distances between thousands of point several
    times, so be ready to wait.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 轮廓系数的值范围是[-1,1]。没错，这个计算开销比较大，因为你需要多次计算成千上万的点之间的距离，所以要准备好等待。
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/11dad952095ba1c10b5e3f8be1e2cc4c.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11dad952095ba1c10b5e3f8be1e2cc4c.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: 'Now you can see that we proved it: Euclidean and Manhattan distances have similarly
    good performance, so let’s estimate the water surface area loss, using both of
    them.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到我们已经证明了这一点：欧几里得距离和曼哈顿距离的表现非常相似，所以让我们使用这两者来估计水面面积的损失。
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/3eb0a222f2765449872f20b68e294596.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3eb0a222f2765449872f20b68e294596.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: — — — —
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: — — — —
- en: 'Distance: euclidean'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 距离度量：欧几里得距离
- en: 'Water Area Before: 17125 km²'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 水域面积（前期）：17125 平方千米
- en: 'Water Area After: 1960 km²'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 水域面积（后期）：1960 平方千米
- en: 'Change: -89%'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 变化：-89%
- en: — — — — —
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: — — — — —
- en: 'Distance: manhattan'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 距离度量：曼哈顿距离
- en: 'Water Area Before: 16244 km²'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 水域面积（前期）：16244 平方千米
- en: 'Water Area After: 2003 km²'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 水域面积（后期）：2003 平方千米
- en: 'Change: -88%'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 变化：-88%
- en: As you can see, according to our clustering results, the change in water surface
    area is almost **90% (!!!) water loss** over last 23 years, which is real proof
    of the fact that the Aral Sea shrinkage is a planetary tragedy…
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，根据我们的聚类结果，水面面积的变化几乎是**90%（!!!）的水体损失**，这是亚尔尔海萎缩是一个全球性悲剧的真实证明……
- en: ===========================================
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ===========================================
- en: '**Reference:**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考文献：**'
- en: '[1] [https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] [https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score)'
- en: ===========================================
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: ===========================================
- en: '***All my publications on Medium are free and open-access, that’s why I’d really
    appreciate if you followed me here!***'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '***我在Medium上的所有出版物都是免费的开放访问，所以如果你关注我，我将非常感激！***'
- en: P.s. I’m extremely passionate about (Geo)Data Science, ML/AI and Climate Change.
    So if you want to work together on some project pls contact me in [LinkedIn](https://www.linkedin.com/in/alexxxroz/).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: P.s. 我对（地理）数据科学、机器学习/人工智能和气候变化充满热情。如果你想一起做一些项目，请通过[LinkedIn](https://www.linkedin.com/in/alexxxroz/)与我联系。
- en: 🛰️Follow for more🛰️
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 🛰️关注获取更多信息🛰️
