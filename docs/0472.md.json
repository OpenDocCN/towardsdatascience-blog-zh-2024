["```py\nimport numpy as np\n\nx = np.arange(0, 1000, 10)\ny = [3 + 2*i for i in x] \nnoise = np.random.normal(loc=0, scale=600, size=x.shape[0])\ntrue_y = noise + y\n```", "```py\nfrom sklearn.metrics import r2_score\n\n# get a subset of the data\nx_tr, x_ts, y_tr, y_ts = train_test_split(x, true_y, train_size=.5)\n# compute the mean of one of the subsets \nmodel = np.mean(y_tr)\n# evaluate on the subset of data that is plotted\nprint(r2_score(y_ts, [model]*y_ts.shape[0]))\n```"]