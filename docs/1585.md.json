["```py\ndef multiply_by_two(x):\n    return 2 * x\n\nprint(multiply_by_two(2))\n# 4\n```", "```py\nmultiply_by_two_lambda = lambda x: x * 2\n\nprint(multiply_by_two_lambda(2))\n# 4\n```", "```py\n# Lambda function abstraction\ndef L(f):\n    return f\n\n# Church numeral 0\nZERO = L(lambda f: L(lambda x: x))\n\n# Successor function: λn.λf.λx.f (n f x)\nSUCC = L(lambda n: L(lambda f: L(lambda x: f(n(f)(x)))))\n\n# Addition: λm.λn.λf.λx.m f (n f x)\nADD = L(lambda m: L(lambda n: L(lambda f: L(lambda x: m(f)(n(f)(x))))))\n\n# Multiplication: λm.λn.λf.m (n f)\nMUL = L(lambda m: L(lambda n: L(lambda f: m(n(f)))))\n\n# Convert integer to Church numeral\ndef to_church(n):\n    if n == 0:\n        return ZERO\n    else:\n        return SUCC(to_church(n - 1))\n\n# Helper function to compare Church numerals\ndef church_equal(church_number_1, church_number_2):\n    f = lambda x: x + 1\n    return church_number_1(f)(0) == church_number_2(f)(0)\n\nchurch_two = to_church(2)\nchurch_three = to_church(3)\nchurch_five = to_church(5)\nchurch_six = to_church(6)\n\n# Successor of 2 is 3\nassert church_equal(SUCC(church_two), church_three)\n\n# 2 + 3 = 5\nassert church_equal(ADD(church_two)(church_three), church_five)\n\n# 2 * 3 = 6\nassert church_equal(MUL(church_two)(church_three), church_six)\n\nprint(\"All tests passed.\")\n```"]