- en: Building a Fantasy Football Research Agent with LangGraph
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/building-a-fantasy-football-research-agent-with-langgraph-ad8deb0126f1?source=collection_archive---------7-----------------------#2024-12-05](https://towardsdatascience.com/building-a-fantasy-football-research-agent-with-langgraph-ad8deb0126f1?source=collection_archive---------7-----------------------#2024-12-05)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An end-to-end guide covering integration with the Sleeper API, creation of a
    Streamlit UI, and deployment via AWS CDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://evandiewald.medium.com/?source=post_page---byline--ad8deb0126f1--------------------------------)[![Evan
    Diewald](../Images/207d5c48363d21c0d9fb5ae3428f6363.png)](https://evandiewald.medium.com/?source=post_page---byline--ad8deb0126f1--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--ad8deb0126f1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--ad8deb0126f1--------------------------------)
    [Evan Diewald](https://evandiewald.medium.com/?source=post_page---byline--ad8deb0126f1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--ad8deb0126f1--------------------------------)
    ·9 min read·Dec 5, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6164ac579dfc394bf298bcb623544676.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Dmitriy Demidov](https://unsplash.com/@fotograw?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: It’s embarrassing how much time I spend thinking about my fantasy football team.
  prefs: []
  type: TYPE_NORMAL
- en: Managing a squad means processing a firehose of information — injury reports,
    expert projections, upcoming bye weeks, and favorable matchups. And it’s not just
    the volume of data, but the ephermerality— if your star RB tweaks a hamstring
    during Wednesday practice, you better not be basing lineup decisions off of Tuesday’s
    report.
  prefs: []
  type: TYPE_NORMAL
- en: This is why general-purpose chatbots like Anthropic’s Claude and OpenAI’s ChatGPT
    are essentially useless for fantasy football recommendations, as they are limited
    to a static training corpus that cuts off months, even years ago.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, if we ask Claude Sonnet 3.5 who the current best running back
    is, we see names like Christian McCaffrey, Breece Hall, and Travis Etienne, who
    have had injury-ridden or otherwise disappointing seasons thus far in 2024\. There
    is no mention of Saquon Barkley or Derrick Henry, the obvious frontrunners at
    this stage. (Though to Claude’s credit, it discloses its limitations.)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6700132629c292799231a2c0c0f1580b.png)'
  prefs: []
  type: TYPE_IMG
- en: Apps like [Perplexity](https://www.perplexity.ai/) are more accurate because
    they do access a search engine with up-to-date information. However, it of course
    has no knowledge of my entire roster situation, the state of our league’s playoff
    picture, or the nuances of our keeper rules.
  prefs: []
  type: TYPE_NORMAL
- en: There is an opportunity to tailor a fantasy football-focused **Agent** with
    tools and personalized context for each user.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s dig into the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture Overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The heart of the chatbot will be a [LangGraph](https://www.langchain.com/langgraph)
    Agent based on the [ReAct](https://arxiv.org/abs/2210.03629) framework. We’ll
    give it access to tools that integrate with the [Sleeper API](https://docs.sleeper.com/)
    for common operations like checking the league standings, rosters, player stats,
    expert analysis, and more.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the LangGraph API server, our backend will include a small Postgres
    database and Redis cache, which are used to manage state and route requests. We’ll
    use [Streamlit](https://streamlit.io/) for a simple, but effective UI.
  prefs: []
  type: TYPE_NORMAL
- en: For development, we can run all of these components locally via [Docker Compose](https://docs.docker.com/compose/),
    but I’ll also show the infrastructure-as-code (IaC) to deploy a scalable stack
    with [AWS CDK](https://docs.aws.amazon.com/cdk/api/v2/).
  prefs: []
  type: TYPE_NORMAL
- en: Sleeper API Integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Sleeper](https://sleeper.com) graciously exposes a public, read-only API that
    we can tap into for user & league details, including a full list of players, rosters,
    and draft information. Though it’s not documented explicitly, I also found some
    GraphQL endpoints that provide critical statistics, projections, and — perhaps
    most valuable of all — recent expert analysis by NFL reporters.'
  prefs: []
  type: TYPE_NORMAL
- en: I created a simple API client to access the various methods, which you can find
    [here](https://github.com/evandiewald/fantasy-football-agent/blob/main/fantasy_chatbot/sleeper.py).
    The one trick that I wanted to highlight is the `requests-cache` [library](https://requests-cache.readthedocs.io/en/stable/index.html).
    I don’t want to be a greedy client of Sleeper’s freely-available datasets, so
    I cache responses in a local Sqlite database with a basic TTL mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Not only does this lessen the amount redundant API traffic bombarding Sleeper’s
    servers (reducing the chance that they blacklist my IP address), but it significantly
    reduces latency for my clients, making for a better UX.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and using the cache is dead simple, as you can see in this snippet
    —
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: So running something like
  prefs: []
  type: TYPE_NORMAL
- en: '`self.session.get(url)`'
  prefs: []
  type: TYPE_NORMAL
- en: first checks the local Sqlite cache for an unexpired response that particular
    request. If it’s found, we can skip the API call and just read from the database.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I want to turn the Sleeper API client into a handful of key functions that the
    Agent can use to inform its responses. Because these functions will effectively
    be invoked by the LLM, I find it important to annotate them clearly and ask for
    simple, flexible arguments.
  prefs: []
  type: TYPE_NORMAL
- en: For example, Sleeper’s API’s generally ask for numeric player id’s, which makes
    sense for a programmatic interface. However, I want to abstract that concept away
    from the LLM and just have it input player names for these functions. To ensure
    some additional flexibility and allow for things like typos, I implemented a basic
    “[fuzzy search](https://github.com/rapidfuzz/RapidFuzz)” method to map player
    name searches to their associated player id.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is better than a simple map of name to player id because it allows for
    misspellings and other typos, e.g. `saquon` → `Saquon Barkley`
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/091f3735f1f8c100a869129af236093f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I created a number of useful tools based on these principles:'
  prefs: []
  type: TYPE_NORMAL
- en: Get League Status (standings, current week, no. playoff teams, etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get Roster for Team Owner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get Player News (up-to-date articles / analysis about the player)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get Player Stats (weekly points scored this season with matchups)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get Player Current Owner (critical for proposing trades)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get Best Available at Position (the waiver wire)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get Player Rankings (performance so far, broken down by position)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can probably think of a few more functions that would be useful to add,
    like details about recent transactions, league head-to-heads, and draft information.
  prefs: []
  type: TYPE_NORMAL
- en: LangGraph Agent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The impetus for this entire project was an opportunity to learn the LangGraph
    ecosystem, which may be becoming the de facto standard for constructing agentic
    workflows.
  prefs: []
  type: TYPE_NORMAL
- en: I’ve hacked together agents from scratch in the past, and I wish I had known
    about LangGraph at the time. It’s not just a thin wrapper around the various LLM
    providers, it provides immense utility for building, deploying, & monitoring complex
    workflows. I’d encourage you to check out the [Introduction to LangGraph](https://academy.langchain.com/courses/intro-to-langgraph)
    course by LangChain Academy if you’re interested in diving deeper.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, the graph itself is based on the ReAct framework, which
    is a popular and effective way to get LLM’s to interact with external tools like
    those defined above.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve also added a node to persist long-term memories about each user, so that
    information can be persisted across sessions. I want our agent to “remember” things
    like users’ concerns, preferences, and previously-recommended trades, as this
    is not a feature that is implemented particularly well in the chatbots I’ve seen.
    In graph form, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/436f6bbcdcdf128744ef4cb4a3d1ecaa.png)'
  prefs: []
  type: TYPE_IMG
- en: Pretty simple right? Again, you can checkout the full graph definition in the
    [code](https://github.com/evandiewald/fantasy-football-agent/blob/main/fantasy_chatbot/chatbot.py),
    but I’ll highlight the `write_memory` node, which is responsible for writing &
    updating a profile for each user. This allows us to track key interactions while
    being efficient about token use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: These memories are surfaced in the [system prompt](https://github.com/evandiewald/fantasy-football-agent/blob/main/fantasy_chatbot/prompts.py),
    where I also gave the LLM basic details about our league and how I want it to
    handle common user requests.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit UI and Demo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’m not a frontend developer, so the UI leans heavily on Streamlit’s components
    and familiar chatbot patterns. Users input their Sleeper username, which is used
    to lookup their available leagues and persist memories across threads.
  prefs: []
  type: TYPE_NORMAL
- en: I also added a couple of bells and whistles, like implementing token streaming
    so that users get instant feedback from the LLM. The other important piece is
    a “research pane”, which surfaces the results of the Agent’s tool calls so that
    user can inspect the raw data that informs each response.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a quick demo.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For development, I recommend deploying the components locally via the provided
    `docker-compose.yml` file. This will expose the API locally at `http://localhost:8123`
    , so you can rapidly test changes and connect to it from a local Streamlit app.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5afeba0c67645f244863f81be5d72e78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I have also included IaC for an AWS CDK-based deployment that I use to host
    the app on the internet. Most of the resources are defined [here](https://github.com/evandiewald/fantasy-football-agent/blob/main/deploy/lib/fantasy-football-agent-stack.ts).
    Notice the parallels between the `docker-compose.yml` and the CDK code related
    to the ECS setup:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Snippet from `docker-compose.yml` for the LangGraph API container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the analogous setup in the CDK stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Aside from some subtle differences, it’s effectively a 1:1 translation, which
    is always something I look for when comparing local environments to “prod” deployments.
    The `DockerImageAsset` is a particularly useful resource, as it handles building
    and deploying (to ECR) the Docker image during synthesis.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** Deploying the stack to your AWS account via `npm run cdk deploy`
    WILL incur charges. In this demo code I have not included any password protection
    on the Streamlit app, meaning anyone who has the URL can use the chatbot! I highly
    recommend adding some additional security if you plan to deploy it yourself.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Takeaways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**You want to keep your tools simple**. This app does a lot, but is still missing
    some key functionality, and it will start to break down if I simply add more tools.
    In the future, I want to break up the graph into task-specific sub-components,
    e.g. a “News Analyst” Agent and a “Statistician” Agent.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Traceability and debugging are more important with Agent-based apps than
    traditional software**. Despite significant advancements in models’ ability to
    produce structured outputs, LLM-based function calling is still inherently less
    reliable than conventional programs. I used LangSmith extensively for debugging.'
  prefs: []
  type: TYPE_NORMAL
- en: '**In an age of commoditized language models, there is no replacement for reliable
    reporters.** We’re at a point where you can put together a reasonable chatbot
    in a weekend, so how do products differentiate themselves and build moats? This
    app (or any other like it) would be useless without access to high-quality reporting
    from analysts and experts. In other words, the Ian Rapaport’s and Matthew Berry’s
    of the world are more valuable than ever.'
  prefs: []
  type: TYPE_NORMAL
- en: Repo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://github.com/evandiewald/fantasy-football-agent/tree/main?source=post_page-----ad8deb0126f1--------------------------------)
    [## GitHub - evandiewald/fantasy-football-agent'
  prefs: []
  type: TYPE_NORMAL
- en: Contribute to evandiewald/fantasy-football-agent development by creating an
    account on GitHub.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/evandiewald/fantasy-football-agent/tree/main?source=post_page-----ad8deb0126f1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '*All images, unless otherwise noted, are by the author.*'
  prefs: []
  type: TYPE_NORMAL
