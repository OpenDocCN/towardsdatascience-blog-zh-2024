["```py\nGenerate me a private corpus with some details mentioning the imagined Ukraine Boats Inc.\nA list of products, prices, responsible stuff, etc.\nI want to use it as my private corpus for the RAG use-case\nYou can generate really a lot of the text. The more the better.\n```", "```py\nYeah, proceed with partnerships, legal policies, competitions participated\nMaybe info about where we manufacture our boats (and add some custom ones)\n```", "```py\nadd client use studies\n```", "```py\n# Number of tokens using the `o200k_base` tokenizer (gpt-4o/gpt-4o-mini)\nnova-drive-motors.txt: 2757\naero-vance-aviation.txt: 1860\nukraine-boats.txt: 3793\ncity-solve.txt: 3826\ntotal_tokens=12236\n```", "```py\n## **Ukraine Boats Inc.**\n**Corporate Overview:**\nUkraine Boats Inc. is a premier manufacturer and supplier of high-quality boats and maritime solutions based in Odessa, Ukraine. The company prides itself on blending traditional craftsmanship with modern technology to serve clients worldwide. Founded in 2005, the company has grown to be a leader in the boating industry, specializing in recreational, commercial, and luxury vessels.\n - -\n### **Product Lineup**\n#### **Recreational Boats:**\n1\\. **WaveRunner X200**\n- **Description:** A sleek speedboat designed for water sports enthusiasts. Equipped with advanced navigation and safety features.\n- **Price:** $32,000\n- **Target Market:** Young adventurers and watersport lovers.\n- **Features:**\n- Top speed of 85 mph\n- Built-in GPS with autopilot mode\n- Seating capacity: 4\n- Lightweight carbon-fiber hull\n2\\. **AquaCruise 350**\n- **Description:** A versatile motorboat ideal for fishing, family trips, and casual cruising.\n- **Price:** $45,000\n- **Features:**\n- 12-person capacity\n- Dual 300HP engines\n- Modular interiors with customizable seating and storage\n- Optional fishing equipment upgrades\n3\\. **SolarGlide EcoBoat**\n- **Description:** A solar-powered boat for environmentally conscious customers.\n- **Price:** $55,000\n- **Features:**\n- Solar panel roof with 12-hour charge life\n- Zero emissions\n- Maximum speed: 50 mph\n- Silent motor technology\n - -\nâ€¦\n```", "```py\nbased on the whole corpus above, generate 10 questions and answers for them pass them into the python native data structure\n```", "```py\n[\n    {\n        \"question\": \"What is the primary focus of Ukraine Boats Inc.?\",\n        \"answer\": \"Ukraine Boats Inc. specializes in manufacturing high-quality recreational, luxury, and commercial boats, blending traditional craftsmanship with modern technology.\"\n    },\n    {\n        \"question\": \"What is the price range for recreational boats offered by Ukraine Boats Inc.?\",\n        \"answer\": \"Recreational boats range from $32,000 for the WaveRunner X200 to $55,000 for the SolarGlide EcoBoat.\"\n    },\n    {\n        \"question\": \"Which manufacturing facility focuses on bespoke yachts and customizations?\",\n        \"answer\": \"The Lviv Custom Craft Workshop specializes in bespoke yachts and high-end customizations, including handcrafted woodwork and premium materials.\"\n    },\n    {\n        \"question\": \"What is the warranty coverage offered for boats by Ukraine Boats Inc.?\",\n        \"answer\": \"All boats come with a 5-year warranty for manufacturing defects, while engines are covered under a separate 3-year engine performance guarantee.\"\n    },\n    {\n        \"question\": \"Which client used the Neptune Voyager catamaran, and what was the impact on their business?\",\n        \"answer\": \"Paradise Resorts International used the Neptune Voyager catamarans, resulting in a 45% increase in resort bookings and winning the 'Best Tourism Experience' award.\"\n    },\n    {\n        \"question\": \"What award did the SolarGlide EcoBoat win at the Global Marine Design Challenge?\",\n        \"answer\": \"The SolarGlide EcoBoat won the 'Best Eco-Friendly Design' award at the Global Marine Design Challenge in 2022.\"\n    },\n    {\n        \"question\": \"How has the Arctic Research Consortium benefited from the Poseidon Explorer?\",\n        \"answer\": \"The Poseidon Explorer enabled five successful Arctic research missions, increased data collection efficiency by 60%, and improved safety in extreme conditions.\"\n    },\n    {\n        \"question\": \"What is the price of the Odessa Opulence 5000 luxury yacht?\",\n        \"answer\": \"The Odessa Opulence 5000 luxury yacht starts at $1,500,000.\"\n    },\n    {\n        \"question\": \"Which features make the WaveRunner X200 suitable for watersports?\",\n        \"answer\": \"The WaveRunner X200 features a top speed of 85 mph, a lightweight carbon-fiber hull, built-in GPS, and autopilot mode, making it ideal for watersports.\"\n    },\n    {\n        \"question\": \"What sustainability initiative is Ukraine Boats Inc. pursuing?\",\n        \"answer\": \"Ukraine Boats Inc. is pursuing the Green Maritime Initiative (GMI) to reduce the carbon footprint by incorporating renewable energy solutions in 50% of their fleet by 2030.\"\n    }\n]\n```", "```py\n# initialize models\nembed_model = OpenAIEmbedding(\n  model=CFG['configuration']['models']['embedding_model'],\n  api_key=os.getenv('AZURE_OPENAI_API_KEY'),\n  dimensions=CFG['configuration']['embedding_dimension']\n)\n```", "```py\n# get documents paths\ndocument_paths = [Path(CFG['configuration']['data']['raw_data_path']) / document for document in CFG['configuration']['data']['source_docs']]\n\n# initialize a file reader\nreader = SimpleDirectoryReader(input_files=document_paths)\n\n# load documents into LlamaIndex Documents\ndocuments = reader.load_data()\n```", "```py\nneo4j_vector = Neo4jVectorStore(\n    username=CFG['configuration']['db']['username'],\n    password=CFG['configuration']['db']['password'],\n    url=CFG['configuration']['db']['url'],\n    embedding_dimension=CFG['configuration']['embedding_dimension'],\n    hybrid_search=CFG['configuration']['hybrid_search']\n)\n\n# setup context\nstorage_context = StorageContext.from_defaults(\n    vector_store=neo4j_vector\n)\n\n# populate DB with nodes\nindex = VectorStoreIndex(nodes, storage_context=storage_context, show_progress=True)\n```", "```py\n[configuration]\nsimilarity_top_k = 10\nvector_store_query_mode = \"default\"\nsimilarity_cutoff = 0.75\nresponse_mode = \"compact\"\ndistance_strategy = \"cosine\"\nembedding_dimension = 256\nchunk_size = 512\nchunk_overlap = 128\nseparator = \" \"\nmax_function_calls = 2\nhybrid_search = false\n\n[configuration.data]\nraw_data_path = \"../data/companies\"\ndataset_path = \"../data/companies/dataset.json\"\nsource_docs = [\"city-solve.txt\", \"aero-vance-aviation.txt\", \"nova-drive-motors.txt\", \"ukraine-boats.txt\"]\n\n[configuration.models]\nllm = \"gpt-4o-mini\"\nembedding_model = \"text-embedding-3-small\"\ntemperature = 0\nllm_hf = \"meta-llama/Llama-3.2-3B-Instruct\"\ncontext_window = 8192\nmax_new_tokens = 4096\nhf_token = \"hf_custom-token\"\nllm_evaluation = \"gpt-4o-mini\"\n\n[configuration.db]\nurl = \"neo4j+s://custom-url\"\nusername = \"neo4j\"\npassword = \"custom-password\"\ndatabase = \"neo4j\" \nindex_name = \"article\" # change if you want to load the new data that won't intersect with the previous uploads\ntext_node_property = \"text\"\n```", "```py\n# connect to the existing neo4j vector index\nvector_store = Neo4jVectorStore(\n  username=CFG['configuration']['db']['username'],\n  password=CFG['configuration']['db']['password'],\n  url=CFG['configuration']['db']['url'],\n  embedding_dimension=CFG['configuration']['embedding_dimension'],\n  distance_strategy=CFG['configuration']['distance_strategy'],\n  index_name=CFG['configuration']['db']['index_name'],\n  text_node_property=CFG['configuration']['db']['text_node_property']\n)\nindex = VectorStoreIndex.from_vector_store(vector_store)\n```", "```py\n# initialize models\nllm = OpenAI(\n  api_key=os.getenv('AZURE_OPENAI_API_KEY'),\n  model=CFG['configuration']['models']['llm'],\n  temperature=CFG['configuration']['models']['temperature']\n)\nembed_model = OpenAIEmbedding(\n  model=CFG['configuration']['models']['embedding_model'],\n  api_key=os.getenv('AZURE_OPENAI_API_KEY'),\n  dimensions=CFG['configuration']['embedding_dimension']\n)\n\nSettings.llm = llm\nSettings.embed_model = embed_model\n```", "```py\n# create query engine\nquery_engine = index.as_query_engine()\n```", "```py\n# custom question\nresponse = query_engine.query(\"What is the primary focus of Ukraine Boats Inc.?\")\n\n# get similarity scores\nfor node in response.source_nodes:\n  print(f'{node.node.id_}, {node.score}')\n\n# predicted answer\nprint(response.response)\n```", "```py\nukraine-boats-3, 0.8536546230316162\nukraine-boats-4, 0.8363556861877441\n\nThe primary focus of Ukraine Boats Inc. is designing, manufacturing, and selling luxury and eco-friendly boats, with a strong emphasis on customer satisfaction and environmental sustainability.\n```", "```py\n# custom retriever\nretriever = VectorIndexRetriever(\n  index=index,\n  similarity_top_k=CFG['configuration']['similarity_top_k'],\n  vector_store_query_mode=CFG['configuration']['vector_store_query_mode']\n)\n\n# similarity threshold\nsimilarity_postprocessor = SimilarityPostprocessor(similarity_cutoff=CFG['configuration']['similarity_cutoff'])\n\n# custom response synthesizer\nresponse_synthesizer = get_response_synthesizer(\n  response_mode=CFG['configuration']['response_mode']\n)\n\n# combine custom query engine\nquery_engine = RetrieverQueryEngine(\n  retriever=retriever,\n  node_postprocessors=[similarity_postprocessor],\n  response_synthesizer=response_synthesizer\n)\n```", "```py\nAGENT_SYSTEM_PROMPT = \"You are a helpful human assistant. You always call the retrieve_semantically_similar_data tool before answering any questions. If the answer to the questions couldn't be found using the tool, just respond with `Didn't find relevant information`.\"\nTOOL_NAME = \"retrieve_semantically_similar_data\"\nTOOL_DESCRIPTION = \"Provides additional information about the companies. Input: string\"\n\n# agent worker\nagent_worker = OpenAIAgentWorker.from_tools(\n    [\n        QueryEngineTool.from_defaults(\n            query_engine=query_engine,\n            name=TOOL_NAME,\n            description=TOOL_DESCRIPTION,\n            return_direct=False,\n        )\n    ],\n    system_prompt=AGENT_SYSTEM_PROMPT,\n    llm=llm,\n    verbose=True,\n    max_function_calls=CFG['configuration']['max_function_calls']\n)\n```", "```py\n# agent runner\nagent = AgentRunner(agent_worker=agent_worker)\n```", "```py\nwhile True:\n  # get user input\n  current_message = input('Insert your next message:')\n  print(f'{datetime.now().strftime(\"%H:%M:%S.%f\")[:-3]}|User: {current_message}')\n\n  response = agent.chat(current_message)\n  print(f'{datetime.now().strftime(\"%H:%M:%S.%f\")[:-3]}|Agent: {response.response}')\n```", "```py\nInsert your next message: Hi\n15:55:43.101|User: Hi\nAdded user message to memory: Hi\n15:55:43.873|Agent: Didn't find relevant information.\nInsert your next message: Do you know anything about the city solve?\n15:56:24.751|User: Do you know anything about the city solve?\nAdded user message to memory: Do you know anything about the city solve?\n=== Calling Function ===\nCalling function: retrieve_semantically_similar_data with args: {\"input\":\"city solve\"}\nGot output: Empty Response\n========================\n\n15:56:37.267|Agent: Didn't find relevant information.\nInsert your next message: What is the primary focus of Ukraine Boats Inc.?\n15:57:36.122|User: What is the primary focus of Ukraine Boats Inc.?\nAdded user message to memory: What is the primary focus of Ukraine Boats Inc.?\n=== Calling Function ===\nCalling function: retrieve_semantically_similar_data with args: {\"input\":\"Ukraine Boats Inc.\"}\nGot output: Ukraine Boats Inc. is a premier manufacturer and supplier of high-quality boats and maritime solutions based in Odessa, Ukraine. Founded in 2005, the company specializes in recreational, commercial, and luxury vessels, blending traditional craftsmanship with modern technology. It has established a strong market presence in Europe, North America, and Asia, supported by partnerships with distribution companies like Baltic Marine Distributors in Germany, OceanCraft LLC in the USA, and Yokohama SeaTech in Japan.\n\nThe company is organized into several departments, including Engineering, Sales and Marketing, Production, and Customer Service, each with specific responsibilities to ensure efficient operations and customer satisfaction. Ukraine Boats Inc. is committed to sustainability through initiatives like the Green Maritime Initiative, aiming to reduce its carbon footprint by incorporating renewable energy solutions in its fleet.\n\nThe product lineup includes recreational boats such as the WaveRunner X200 and AquaCruise 350, luxury yachts like the Odessa Opulence 5000, and commercial vessels such as the Maritime Hauler 7000\\. The company also offers customization options, maintenance plans, and a range of accessories to enhance the boating experience.\n\nWith a focus on innovation and quality, Ukraine Boats Inc. has received accolades in various marine design competitions and continues to expand its global footprint while maintaining a commitment to environmental compliance and customer service excellence.\n========================\n\n15:57:49.505|Agent: The primary focus of Ukraine Boats Inc. is the manufacturing and supplying of high-quality boats and maritime solutions. Based in Odessa, Ukraine, the company specializes in recreational, commercial, and luxury vessels, combining traditional craftsmanship with modern technology. They are committed to sustainability and have initiatives like the Green Maritime Initiative to reduce their carbon footprint. Their product lineup includes various types of boats, and they also offer customization options and maintenance plans.\nInsert your next message: Do you know anything about the government company city solve?\n15:59:02.830|User: Do you know anything about the government company city solve?\nAdded user message to memory: Do you know anything about the government company city solve?\n=== Calling Function ===\nCalling function: retrieve_semantically_similar_data with args: {\"input\":\"government company city solve\"}\nGot output: CitySolve Municipal Services is a government-owned and operated entity founded in 1988, headquartered in New Urbania, USA. Its mission is to ensure a livable, sustainable, and efficient city by providing prompt solutions to residents' everyday needs. The company focuses on various critical service areas, including waterworks and drainage, parks and greenery management, roads and sidewalks, waste management, public safety infrastructure, and urban utilities. CitySolve emphasizes core values such as responsiveness, reliability, accountability, and sustainability, and utilizes modern technologies to enhance its operations and community impact.\n========================\n\n15:59:12.693|Agent: CitySolve Municipal Services is a government-owned and operated entity founded in 1988, headquartered in New Urbania, USA. Its mission is to ensure a livable, sustainable, and efficient city by providing prompt solutions to residents' everyday needs. The company focuses on critical service areas such as waterworks and drainage, parks and greenery management, roads and sidewalks, waste management, public safety infrastructure, and urban utilities. CitySolve emphasizes core values like responsiveness, reliability, accountability, and sustainability, and it utilizes modern technologies to enhance its operations and community impact.\nInsert your next message: Thanks\n15:59:28.761|User: Thanks\nAdded user message to memory: Thanks\n15:59:30.327|Agent: Didn't find relevant information.\n```", "```py\n# Use your token here\nlogin(token=CFG['configuration']['models']['hf_token'])\n```", "```py\nSYSTEM_PROMPT = \"\"\"You are an AI assistant that answers questions in a friendly manner, based on the given source documents. Here are some rules you always follow:\n- Generate human readable output, avoid creating output with gibberish text.\n- Generate only the requested output, don't include any other language before or after the requested output.\n- Never say thank you, that you are happy to help, that you are an AI agent, etc. Just answer directly.\n- Generate professional language typically used in business documents in North America.\n- Never generate offensive or foul language.\n\"\"\"\n\nquery_wrapper_prompt = PromptTemplate(\n    \"<|start_header_id|>system<|end_header_id|>\\n\" + SYSTEM_PROMPT + \"<|eot_id|><|start_header_id|>user<|end_header_id|>{query_str}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\"\n)\n\nllm = HuggingFaceLLM(\n    context_window=CFG['configuration']['models']['context_window'],\n    max_new_tokens=CFG['configuration']['models']['max_new_tokens'],\n    generate_kwargs={\"temperature\": CFG['configuration']['models']['temperature'], \"do_sample\": False},\n    query_wrapper_prompt=query_wrapper_prompt,\n    tokenizer_name=CFG['configuration']['models']['llm_hf'],\n    model_name=CFG['configuration']['models']['llm_hf'],\n    device_map=\"cuda:0\",\n    model_kwargs={\"torch_dtype\": torch.bfloat16}\n)\n\nSettings.llm = llm\n```", "```py\nukraine-boats-3, 0.8536546230316162\nukraine-boats-4, 0.8363556861877441\n\nThe primary focus of Ukraine Boats Inc. is designing, manufacturing, and selling luxury and eco-friendly boats, with a strong emphasis on customer satisfaction and environmental sustainability.\n```", "```py\nagent_worker = ReActAgentWorker.from_tools(\n    [\n        QueryEngineTool.from_defaults(\n            query_engine=query_engine,\n            name=TOOL_NAME,\n            description=TOOL_DESCRIPTION,\n            return_direct=False,\n        )\n    ],\n    llm=llm,\n    verbose=True,\n    chat_history=[ChatMessage(content=AGENT_SYSTEM_PROMPT, role=\"system\")]\n)\n\n# agent runner\nagent = AgentRunner(agent_worker=agent_worker)\n```", "```py\nInsert your next message: Hi\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\n16:04:29.117|User: Hi\nThought: The current language of the user is: English. I need to use a tool to help me answer the question.\nAction: retrieve_semantically_similar_data\nAction Input: {'input': 'hello world', 'num_beams': 5}\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\nObservation: Empty Response\nThought: I still need more information to answer the question. The tool did not provide any useful output. I'll try to gather more context.\nAction: retrieve_semantically_similar_data\nAction Input: {'input': 'hello world', 'num_beams': 5}\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\nObservation: Empty Response\nThought: I still don't have enough information to answer the question. The tool did not provide any useful output. I'll try to gather more context.\nAction: retrieve_semantically_similar_data\nAction Input: {'input': 'hello world', 'num_beams': 5}\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\nObservation: Empty Response\nThought: I'm starting to think that the tool is not the best approach to answer this question. The user's input \"hello world\" is very general and the tool is not providing any useful output. I'll try to think of a different approach.\nAnswer: Hello, how can I assist you today?\n16:04:37.764|Agent: Hello, how can I assist you today?\nInsert your next message: Do you know anything about the city solve?\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\n16:05:08.756|User: Do you know anything about the city solve?\nThought: The current language of the user is: English. I need to use a tool to help me answer the question.\nAction: retrieve_semantically_similar_data\nAction Input: {'input': 'solve city'}\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\nObservation: \n\nCitySolve Municipal Services is the lifeline of New Urbania, addressing a wide range of city-level concerns and providing prompt solutions to residents' everyday needs.\nThought: I can answer without using any more tools. I'll use the user's language to answer\nAnswer: CitySolve Municipal Services is a city-level organization that provides solutions to residents' everyday needs in New Urbania.\n16:05:13.003|Agent: CitySolve Municipal Services is a city-level organization that provides solutions to residents' everyday needs in New Urbania.\nInsert your next message: What is the primary focus of Ukraine Boats Inc.?\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\n16:05:34.892|User: What is the primary focus of Ukraine Boats Inc.?\nThought: The current language of the user is: English. I need to use a tool to help me answer the question.\nAction: retrieve_semantically_similar_data\nAction Input: {'input': 'Ukraine Boats Inc.'}\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\nObservation: \n\nUkraine Boats Inc. is a premier manufacturer and supplier of high-quality boats and maritime solutions based in Odessa, Ukraine. The company prides itself on blending traditional craftsmanship with modern technology to serve clients worldwide. Founded in 2005, the company has grown to be a leader in the boating industry, specializing in recreational, commercial, and luxury vessels.\n\nThe company has successfully delivered a range of boats and solutions to various clients, including Blue Horizon Fisheries, Azure Seas Luxury Charters, Coastal Safety Patrol, EcoTrade Logistics, Team HydroBlitz Racing, and Paradise Resorts International. These clients have reported significant benefits from working with Ukraine Boats Inc., including increased efficiency, reduced costs, and enhanced customer satisfaction.\n\nUkraine Boats Inc. offers a range of products and services, including luxury yachts, commercial boats, and accessories. The company's products are designed to meet the specific needs of each client, and its team of experts works closely with clients to ensure that every boat is tailored to their requirements.\n\nSome of the company's notable products include the Odessa Opulence 5000, a state-of-the-art luxury yacht, and the Maritime Hauler 7000, a robust cargo ship. The company also offers boat customization packages, annual maintenance plans, and other services to support its clients' needs.\n\nOverall, Ukraine Boats Inc. is a trusted and reliable partner for clients seeking high-quality boats and maritime solutions.\nThought: I can answer without using any more tools. I'll use the user's language to answer\nAnswer: Ukraine Boats Inc. is a premier manufacturer and supplier of high-quality boats and maritime solutions based in Odessa, Ukraine, blending traditional craftsmanship with modern technology to serve clients worldwide.\n16:05:53.311|Agent: Ukraine Boats Inc. is a premier manufacturer and supplier of high-quality boats and maritime solutions based in Odessa, Ukraine, blending traditional craftsmanship with modern technology to serve clients worldwide.\nInsert your next message: Do you know anything about the government company city solve?\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\n16:06:09.949|User: Do you know anything about the government company city solve?\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\nThought: The current language of the user is English. I need to use a tool to help me answer the question.\nAction: retrieve_semantically_similar_data\nAction Input: {'input': AttributedDict([('title', 'CitySolve'), ('type', 'string')])}\nObservation: Error: 2 validation errors for QueryStartEvent\nquery.str\n  Input should be a valid string [type=string_type, input_value=AttributedDict([('title',...'), ('type', 'string')]), input_type=AttributedDict]\n    For further information visit https://errors.pydantic.dev/2.9/v/string_type\nquery.QueryBundle.query_str\n  Field required [type=missing, input_value=AttributedDict([('title',...'), ('type', 'string')]), input_type=AttributedDict]\n    For further information visit https://errors.pydantic.dev/2.9/v/missing\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\nObservation: Error: Could not parse output. Please follow the thought-action-input format. Try again.\nThought: I understand that the tool retrieve_semantically_similar_data requires a specific input format. I will make sure to follow the correct format.\nAction: retrieve_semantically_similar_data\nAction Input: {'title': 'CitySolve', 'type': 'string'}\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\nObservation: \n\nCitySolve Municipal Services is a government-owned and operated company that serves as the backbone of New Urbania's civic infrastructure, addressing a wide range of city-level concerns.\nThought: I can answer without using any more tools. I'll use the user's language to answer\nAnswer: CitySolve Municipal Services is a government-owned and operated company that serves as the backbone of New Urbania's civic infrastructure, addressing a wide range of city-level concerns.\n16:06:17.799|Agent: CitySolve Municipal Services is a government-owned and operated company that serves as the backbone of New Urbania's civic infrastructure, addressing a wide range of city-level concerns.\nInsert your next message: Thanks\nSetting `pad_token_id` to `eos_token_id`:None for open-end generation.\n16:06:34.232|User: Thanks\nThought: I can answer without using any more tools. I'll use the user's language to answer\nAnswer: CitySolve Municipal Services is a government-owned and operated company that serves as the backbone of New Urbania's civic infrastructure, addressing a wide range of city-level concerns.\n16:06:35.734|Agent: CitySolve Municipal Services is a government-owned and operated company that serves as the backbone of New Urbania's civic infrastructure, addressing a wide range of city-level concerns.\n```", "```py\nexperiment_name = \"llama-3.2-3B-custom-retriever\"\n\nprovider = OpenAIProvider(\n    model_engine=CFG['configuration']['models']['llm_evaluation']\n)\n```", "```py\ncontext_selection = TruLlama.select_source_nodes().node.text\n\n# context relevance (for each of the context chunks)\nf_context_relevance = (\n    Feedback(\n        provider.context_relevance, name=\"Context Relevance\"\n    )\n    .on_input()\n    .on(context_selection)\n)\n\n# groundedness\nf_groundedness_cot = (\n    Feedback(\n        provider.groundedness_measure_with_cot_reasons, name=\"Groundedness\"\n    )\n    .on(context_selection.collect())\n    .on_output()\n)\n\n# answer relevance between overall question and answer\nf_qa_relevance = (\n    Feedback(\n        provider.relevance_with_cot_reasons, name=\"Answer Relevance\"\n    )\n    .on_input_output()\n)\n```", "```py\n# Create TruLlama agent\ntru_agent = TruLlama(\n    agent,\n    app_name=experiment_name,\n    tags=\"agent testing\",\n    feedbacks=[f_qa_relevance, f_context_relevance, f_groundedness_cot],\n)\n```", "```py\nfor item in tqdm(dataset):\n    try:\n        agent.reset()\n\n        with tru_agent as recording:\n            agent.query(item.get('question'))\n        record_agent = recording.get()\n\n        # wait until all the feedback function are finished\n        for feedback, result in record_agent.wait_for_feedback_results().items():\n            logging.info(f'{feedback.name}: {result.result}')\n    except Exception as e:\n        logging.error(e)\n        traceback.format_exc()\n```"]