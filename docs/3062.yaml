- en: How to Tackle an Optimization Problem with Constraint Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用约束编程解决优化问题
- en: 原文：[https://towardsdatascience.com/how-to-tackle-an-optimization-problem-with-constraint-programming-9ae77b4d803d?source=collection_archive---------2-----------------------#2024-12-23](https://towardsdatascience.com/how-to-tackle-an-optimization-problem-with-constraint-programming-9ae77b4d803d?source=collection_archive---------2-----------------------#2024-12-23)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-tackle-an-optimization-problem-with-constraint-programming-9ae77b4d803d?source=collection_archive---------2-----------------------#2024-12-23](https://towardsdatascience.com/how-to-tackle-an-optimization-problem-with-constraint-programming-9ae77b4d803d?source=collection_archive---------2-----------------------#2024-12-23)
- en: 'Case study: the travelling salesman problem'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例研究：旅行推销员问题
- en: '[](https://medium.com/@yangeorget?source=post_page---byline--9ae77b4d803d--------------------------------)[![Yan
    Georget](../Images/4555bf99c8c71f6a3c905e828819c599.png)](https://medium.com/@yangeorget?source=post_page---byline--9ae77b4d803d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--9ae77b4d803d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--9ae77b4d803d--------------------------------)
    [Yan Georget](https://medium.com/@yangeorget?source=post_page---byline--9ae77b4d803d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@yangeorget?source=post_page---byline--9ae77b4d803d--------------------------------)[![Yan
    Georget](../Images/4555bf99c8c71f6a3c905e828819c599.png)](https://medium.com/@yangeorget?source=post_page---byline--9ae77b4d803d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--9ae77b4d803d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--9ae77b4d803d--------------------------------)
    [Yan Georget](https://medium.com/@yangeorget?source=post_page---byline--9ae77b4d803d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--9ae77b4d803d--------------------------------)
    ·8 min read·Dec 23, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--9ae77b4d803d--------------------------------)
    ·阅读时间8分钟·2024年12月23日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: TLDR
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TLDR
- en: Constraint Programming is a technique of choice for solving a Constraint Satisfaction
    Problem. In this article, we will see that it is also well suited to small to
    medium optimization problems. Using the well-known [travelling salesman problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem)
    (TSP) as an example, we will detail all the steps leading to an efficient model.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 约束编程是一种解决约束满足问题的首选技术。本文将展示它如何适用于小型到中型的优化问题。以广为人知的[旅行推销员问题](https://en.wikipedia.org/wiki/Travelling_salesman_problem)（TSP）为例，我们将详细说明所有步骤，带你走向一个高效的模型。
- en: For the sake of simplicity, we will consider the symmetric case of the TSP (the
    distance between two cities is the same in each opposite direction).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化起见，我们将考虑TSP的对称情况（两个城市之间的距离在任何反方向上是相同的）。
- en: All the code examples in this article use [NuCS](https://github.com/yangeorget/nucs),
    a fast constraint solver written 100% in Python that I am currently developing
    as a side project. NuCS is released under the [MIT license](https://github.com/yangeorget/nucs/blob/main/LICENSE.md).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中的所有代码示例使用了[NuCS](https://github.com/yangeorget/nucs)，这是我目前作为副项目正在开发的一个用100%
    Python编写的快速约束求解器。NuCS发布在[MIT许可证](https://github.com/yangeorget/nucs/blob/main/LICENSE.md)下。
- en: The symmetric travelling salesman problem
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对称旅行推销员问题
- en: 'Quoting Wikipedia :'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 引用自维基百科：
- en: Given a list of cities and the distances between each pair of cities, what is
    the shortest possible route that visits each city exactly once and returns to
    the origin city?
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 给定一个城市列表和每对城市之间的距离，如何找到一条最短的路线，访问每个城市一次并返回到起始城市？
- en: '![](../Images/bba1920404a4386283a19f8b2e1fd05f.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bba1920404a4386283a19f8b2e1fd05f.png)'
- en: '[Source: Wikipedia](https://fr.wikipedia.org/wiki/Probl%C3%A8me_du_voyageur_de_commerce#/media/Fichier:TSP_Deutschland_3.png)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[来源：维基百科](https://fr.wikipedia.org/wiki/Probl%C3%A8me_du_voyageur_de_commerce#/media/Fichier:TSP_Deutschland_3.png)'
- en: This is an NP-hard problem. From now on, let’s consider that there are *n* cities.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个NP难问题。从现在开始，假设有*n*个城市。
- en: The most naive formulation of this problem is to decide, for each possible edge
    between cities, whether it belongs to the optimal solution. The size of the search
    space is ***2ⁿ⁽ⁿ⁻¹⁾*ᐟ²** which is roughly *8.8e130* for *n=30* (much greater than
    the number of atoms in the universe).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题最简单的表述方式是，对于城市之间每条可能的边，决定它是否属于最优解。搜索空间的大小为***2ⁿ⁽ⁿ⁻¹⁾*ᐟ²**，对于*n=30*时大约为*8.8e130*（远大于宇宙中的原子数）。
- en: It is much better to find, for each city, its successor. The complexity becomes
    ***n!***which is roughly *2.6e32* for *n=30* (much smaller but still very large).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对每个城市找到其后继是更好的选择。复杂度变为 ***n!***，对于 *n=30*，大约是 *2.6e32*（虽然更小，但仍然非常大）。
- en: 'In the following, we will benchmark our models with the following small TSP
    instances: [GR17, GR21 and GR24](https://github.com/yangeorget/nucs/blob/main/nucs/examples/tsp/tsp_instances.py).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将使用以下小型 TSP 实例对我们的模型进行基准测试：[GR17, GR21 和 GR24](https://github.com/yangeorget/nucs/blob/main/nucs/examples/tsp/tsp_instances.py)。
- en: 'GR17 is a *17* nodes symmetrical TSP, its costs are defined by *17 x 17* symmetrical
    matrix of successor costs:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: GR17 是一个 *17* 个节点的对称 TSP，其费用由 *17 x 17* 的对称矩阵定义：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let''s have a look at the first row:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看看第一行：
- en: '*[0, 633, 257, 91, 412, 150, 80, 134, 259, 505, 353, 324, 70, 211, 268, 246,
    121]*'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '*[0, 633, 257, 91, 412, 150, 80, 134, 259, 505, 353, 324, 70, 211, 268, 246,
    121]*'
- en: These are the costs for the possible successors of node *0* in the circuit.
    If we except the first value *0* (we don't want the successor of node *0* to be
    node *0*) then the minimal value is *70* (when node *12* is the successor of node
    0) and the maximal is *633* (when node *1* is the successor of node *0*). This
    means that the cost associated to the successor of node *0* in the circuit ranges
    between *70* and *633*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是节点 *0* 在电路中可能的后继的费用。如果排除第一个值 *0*（我们不希望节点 *0* 的后继是节点 *0*），那么最小值是 *70*（当节点
    *12* 是节点 *0* 的后继时），最大值是 *633*（当节点 *1* 是节点 *0* 的后继时）。这意味着节点 *0* 在电路中的后继的费用范围在 *70*
    和 *633* 之间。
- en: Modeling the TSP
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 建模 TSP
- en: We are going to model our problem by reusing the [**CircuitProblem**](https://github.com/yangeorget/nucs/blob/main/nucs/problems/circuit_problem.py)
    provided off-the-shelf in NuCS. But let's first understand what happens behind
    the scene. The **CircuitProblem** is itself a subclass of the [**Permutation**](https://github.com/yangeorget/nucs/blob/main/nucs/problems/permutation_problem.py)
    problem, another off-the-shelf model offered by NuCS.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过重用 NuCS 中现成的 [**CircuitProblem**](https://github.com/yangeorget/nucs/blob/main/nucs/problems/circuit_problem.py)
    来建模我们的任务。但让我们首先了解一下幕后发生了什么。**CircuitProblem** 本身是 [**Permutation**](https://github.com/yangeorget/nucs/blob/main/nucs/problems/permutation_problem.py)
    问题的子类，后者是 NuCS 提供的另一个现成模型。
- en: The permutation problem
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 排列问题
- en: 'The permutation problem defines two redundant models: the successors and predecessors
    models.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 排列问题定义了两个冗余的模型：后继模型和前驱模型。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The successors model (the first n variables) defines, for each node, its successor
    in the circuit. The successors have to be different. The predecessors model (the
    last n variables) defines, for each node, its predecessor in the circuit. The
    predecessors have to be different.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 后继模型（前 n 个变量）为每个节点定义了其在电路中的后继。后继必须不同。前驱模型（后 n 个变量）为每个节点定义了其在电路中的前驱。前驱必须不同。
- en: 'Both models are connected with the rules (see the *ALG_PERMUTATION_AUX* constraints):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个模型通过规则相连接（请参见 *ALG_PERMUTATION_AUX* 约束）：
- en: if *succ[i] = j* then *pred[j] = i*
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *succ[i] = j* 那么 *pred[j] = i*
- en: if *pred[j] = i* then *succ[i] = j*
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *pred[j] = i* 那么 *succ[i] = j*
- en: if *pred[j] ≠ i* then *succ[i] ≠ j*
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *pred[j] ≠ i* 那么 *succ[i] ≠ j*
- en: if *succ[i] ≠ j* then *pred[j] ≠ i*
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 *succ[i] ≠ j* 那么 *pred[j] ≠ i*
- en: The circuit problem
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电路问题
- en: The circuit problem refines the domains of the successors and predecessors and
    adds additional constraints for forbidding sub-cycles (we won't go into them here
    for the sake of brevity).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 电路问题细化了后继和前驱节点的领域，并增加了额外的约束以禁止子环（为了简洁起见，我们在此不详细讨论）。
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The TSP model
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TSP 模型
- en: With the help of the circuit problem, modelling the TSP is an easy task.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在电路问题的帮助下，建模 TSP 是一项简单的任务。
- en: 'Let''s consider a node *i*, as seen before *costs[i]* is the list of possible
    costs for the successors of *i*. If j is the successor of *i* then the associated
    cost is *costs[i]ⱼ*. This is implemented by the following line where *succ_costs*
    if the starting index of the successors costs:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们考虑一个节点 *i*，如前所述，*costs[i]* 是节点 *i* 的后继可能费用的列表。如果 *j* 是 *i* 的后继，那么相关费用是 *costs[i]ⱼ*。这通过以下代码实现，其中
    *succ_costs* 是后继费用的起始索引：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Symmetrically, for the predecessors costs we get:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对称地，对于前驱的费用，我们得到：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, we can define the total cost by summing the intermediate costs and
    we get:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以通过将中间费用求和来定义总费用，得到：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note that it is not necessary to have both successors and predecessors models
    (one would suffice) but it is more efficient.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，并不一定需要同时拥有后继和前驱模型（其中一个就足够了），但同时拥有它们效率更高。
- en: Branching
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分支
- en: Let's use the default branching strategy of the **BacktrackSolver**, our decision
    variables will be the successors and predecessors.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 **BacktrackSolver** 的默认分支策略，我们的决策变量将是后继节点和前驱节点。
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The optimal solution is found in **248s** on a MacBook Pro M2 running Python
    3.12, Numpy 2.0.1, Numba 0.60.0 and NuCS 4.2.0\. The detailed statistics provided
    by NuCS are:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在一台运行 Python 3.12、Numpy 2.0.1、Numba 0.60.0 和 NuCS 4.2.0 的 MacBook Pro M2 上，最优解在
    **248s** 内找到。NuCS 提供的详细统计数据如下：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In particular, there are 8 070 393 backtracks. Let's try to improve on this.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，存在 8 070 393 次回溯。让我们尝试改善这一点。
- en: NuCS offers a heuristic based on regret (difference between best and second
    best costs) for selecting the variable. We will then choose the value that minimizes
    the cost.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: NuCS 提供了一种基于遗憾（最佳成本与次佳成本之差）的启发式方法来选择变量。我们将选择最小化成本的值。
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'With these new heuristics, the optimal solution is found in **38s** and the
    statistics are:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些新的启发式方法，最优解在 **38s** 内找到，统计数据如下：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In particular, there are 1 647 124 backtracks.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，存在 1 647 124 次回溯。
- en: We can keep improving by designing a [custom heuristic](https://github.com/yangeorget/nucs/blob/main/nucs/examples/tsp/tsp_var_heuristic.py)
    which combines max regret and smallest domain for variable selection.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续改进，通过设计一个[自定义启发式方法](https://github.com/yangeorget/nucs/blob/main/nucs/examples/tsp/tsp_var_heuristic.py)，该方法结合最大遗憾和最小领域来进行变量选择。
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The optimal solution is now found in **11s** and the statistics are:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最优解现在在 **11s** 内找到，统计数据如下：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In particular, there are 403 023 backtracks.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，存在 403 023 次回溯。
- en: How does minimization work BTW?
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 顺便问一下，最小化是如何工作的？
- en: Minimization (and more generally optimization) relies on a [branch-and-bound](https://en.wikipedia.org/wiki/Branch_and_bound)
    algorithm. The backtracking mechanism allows to explore the search space by making
    choices (**branching**). Parts of the search space are pruned by **bounding**
    the objective variable.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 最小化（更一般地说，优化）依赖于一个[分支限界](https://en.wikipedia.org/wiki/Branch_and_bound)算法。回溯机制允许通过做出选择（**分支**）来探索搜索空间。通过**限界**目标变量，部分搜索空间被修剪掉。
- en: When minimizing a variable *t*, one can add the additional constraint t < s
    whenever an intermediate solution s is found.
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在最小化变量 *t* 时，每当找到一个中间解 s，可以添加额外的约束 t < s。
- en: 'NuCS offer two optimization modes corresponding to two ways to leverage *t
    < s*:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: NuCS 提供两种优化模式，对应两种利用 *t < s* 的方式：
- en: the **RESET** mode restarts the search from scratch and updates the bounds of
    the target variable
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RESET** 模式会从头开始重新搜索，并更新目标变量的边界'
- en: the **PRUNE** mode modifies the choice points to take into account the new bounds
    of the target variable
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PRUNE** 模式会修改选择点，以考虑目标变量的新边界'
- en: 'Let''s now try the **PRUNE** mode:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试 **PRUNE** 模式：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The optimal solution is found in **5.4s** and the statistics are:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最优解在 **5.4s** 内找到，统计数据如下：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In particular, there are only 156 627 backtracks.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，只有 156 627 次回溯。
- en: Conclusion
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'The table below summarizes our experiments:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了我们的实验：
- en: '![](../Images/969261fc6190fbaebdcbfb1b1bcda6a6.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/969261fc6190fbaebdcbfb1b1bcda6a6.png)'
- en: TSP experiments with NuCS
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: NuCS 的 TSP 实验
- en: You can find all the corresponding code [here](https://github.com/yangeorget/nucs/tree/main/nucs/examples/tsp).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[这里](https://github.com/yangeorget/nucs/tree/main/nucs/examples/tsp)找到所有对应的代码。
- en: 'There are of course many other tracks that we could explore to improve these
    results:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们还可以探索许多其他路径，以改善这些结果：
- en: design a [redundant constraint](https://github.com/yangeorget/nucs/blob/main/nucs/examples/tsp/total_cost_propagator.py)
    for the total cost
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计一个[冗余约束](https://github.com/yangeorget/nucs/blob/main/nucs/examples/tsp/total_cost_propagator.py)来控制总成本
- en: improve the branching by exploring new heuristics
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过探索新的启发式方法来改善分支策略
- en: use a different consistency algorithm (NuCS comes with *shaving*)
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的一致性算法（NuCS 提供了 *shaving*）
- en: compute lower and upper bounds using other techniques
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用其他技术计算上下界
- en: The travelling salesman problem has been the subject of extensive study and
    an abundant literature. In this article, we hope to have convinced the reader
    that it is possible to find optimal solutions to medium-sized problems in a very
    short time, without having much knowledge of the travelling salesman problem.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 旅行商问题一直是广泛研究的主题，并且有大量的文献。在这篇文章中，我们希望能说服读者，事实上可以在非常短的时间内找到中等规模问题的最优解，而不需要深入了解旅行商问题。
- en: 'Some useful links to go further with NuCS:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一些有用的链接可以进一步了解 NuCS：
- en: 'the source code: [https://github.com/yangeorget/nucs](https://github.com/yangeorget/nucs)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 源代码： [https://github.com/yangeorget/nucs](https://github.com/yangeorget/nucs)
- en: 'the documentation: [https://nucs.readthedocs.io/en/latest/index.html](https://nucs.readthedocs.io/en/latest/index.html)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档： [https://nucs.readthedocs.io/en/latest/index.html](https://nucs.readthedocs.io/en/latest/index.html)
- en: 'the Pip package: [https://pypi.org/project/NUCS/](https://pypi.org/project/NUCS/)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pip 包： [https://pypi.org/project/NUCS/](https://pypi.org/project/NUCS/)
- en: If you enjoyed this article about NuCS, please clap **50** times !
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇关于 NuCS 的文章，请**鼓掌 50**次！
