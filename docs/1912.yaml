- en: Visualising Strava Race Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/visualising-strava-race-analysis-bdabe0b67c02?source=collection_archive---------6-----------------------#2024-08-06](https://towardsdatascience.com/visualising-strava-race-analysis-bdabe0b67c02?source=collection_archive---------6-----------------------#2024-08-06)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Two New Graphs That Compare Runners on the Same Event*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@juanhernanz?source=post_page---byline--bdabe0b67c02--------------------------------)[![Juan
    Hernanz](../Images/005f79506da011de2d13c8360bd9fd62.png)](https://medium.com/@juanhernanz?source=post_page---byline--bdabe0b67c02--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--bdabe0b67c02--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--bdabe0b67c02--------------------------------)
    [Juan Hernanz](https://medium.com/@juanhernanz?source=post_page---byline--bdabe0b67c02--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--bdabe0b67c02--------------------------------)
    ·15 min read·Aug 6, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0d0bbb903e8e9787b96827f334f29276.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph showing the comparative performance of runners. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '*Have you ever wondered how two runners stack up against each other in the
    same race?*'
  prefs: []
  type: TYPE_NORMAL
- en: In this article I present two new graphs that I have designed, as I felt they
    were missing from Strava. These graphs have been created in a way that they can
    tell the story of a race at a glance as they compare different athletes running
    the same event. One can easily see changes in positions, as well as the time difference
    across the laps and competitors.
  prefs: []
  type: TYPE_NORMAL
- en: My explanation will start with **how I spotted the opportunity.** Next, I’ll
    showcase the **graph designs** and **explain the algorithms** and data processing
    techniques that power them.
  prefs: []
  type: TYPE_NORMAL
- en: Strava doesn’t tell the full story
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Strava is a social fitness app were people can record and share their sport
    activities with a community of 100+ million users [1]. Widely used among cyclists
    and runners, it’s a great tool that not only records your activities, but also
    provides personalised analysis about your performance based on your fitness data.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a runner, I find this app incredibly beneficial for two main reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: It provides data analysis that help me understand my running performance better.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It pushes me to stay motivated as I can see what my friends and the community
    are sharing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Every time I complete a running event with my friends, we all log our fitness
    data from our watches into Strava to see analysis such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Total** **time, distance** and **average pace**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time** for every **split** or lap in the race.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Heart Rate** metricsevolution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Relative Effort** compared to previous activities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best part is when we talk about the race from everyone’s perspectives. Strava
    is able to recognise that you ran the same event with your friends (if you follow
    each other) and even other people, however it does not provide comparative data.
    So if you want to have the full story of the race with your friends, you need
    to dive into everyone’s activity and try to compare them.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why, after my last 10K with 3 friends this year, I decided to get the
    data from Strava and design two visuals to see a comparative analysis of our race
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: Presenting the visuals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The idea behind this project is simple: use GPX data from Strava (location,
    timestamp) recorded by my friends and me during a race and combine them to generate
    visuals comparing our races.'
  prefs: []
  type: TYPE_NORMAL
- en: The challenge was not only validating that my idea was doable, but also designing
    Strava-inspired graphs to proof how they could seamlessly integrate as new features
    in the current application. Let’s see the results.
  prefs: []
  type: TYPE_NORMAL
- en: Race GAP Analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Metrics:** the evolution of the gap (in seconds) between a runner that is
    the reference (grey line on 0) and their competitors. Lines above mean the runner
    is ahead on the race.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Insights:** this line chart is perfect to see the changes in positions and
    distances for a group of runners.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/460ad46fa47e712a322f36ce8d3f8954.png)'
  prefs: []
  type: TYPE_IMG
- en: Race GAP Analysis animation of the same race for 3 different runners. Image
    by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the right end of the lines, you can see the final results of
    the race for the 3 runners of our examples:'
  prefs: []
  type: TYPE_NORMAL
- en: The first runner (me) is represented by the reference in grey.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pedro (in purple) was the second runner reaching the finish line only 12 seconds
    after.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Jimena (in blue) finished the 10K 60 seconds after.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/95fd5e59eead930dac07697c172c7541.png)![](../Images/5168b2d354043221d54bdfd073f5c809.png)'
  prefs: []
  type: TYPE_IMG
- en: Proposal for ***Race Gap Analysis*** chart integration into Strava activities.
    Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'But, thanks to this chart, it’s possible to see how theses gaps where changing
    throughout the race. And these insights are really interesting to understand the
    race positions and distances:'
  prefs: []
  type: TYPE_NORMAL
- en: The 3 of us started the race together. Jimena, in blue, started to fall behind
    around 5 seconds in the first km while me (grey) and Pedro ( purple) where together.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I remember Pedro telling me it was too fast of a start, so he slightly reduced
    the pace until he found Jimena at km 2\. Their lines show they ran together until
    the 5th km, while I was increasing the gap with them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Km 6 is key, my gap with Pedro at that point was 20 seconds (the max I reached)
    and almost 30 seconds to Jimena, who reduced the pace compared to mine until the
    end of the race. However, Pedro started going faster and reduced our gap pushing
    faster in the 4 last kms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Of course, the lines will change depending on who is the reference. This way,
    every runner will see the story of the same race but personalised to their point
    of view and how the compare to the rest. **It’s the same story with different
    main characters.**
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f04c215a2f18db2af0436b54d04f2035.png)![](../Images/516bf750c42bd8f946f426e7202337ba.png)![](../Images/efc9800546d599221bb7316ec3d16453.png)'
  prefs: []
  type: TYPE_IMG
- en: Race Gap Analysis with different references. Reference is Juan (left). Reference
    is Pedro (middle). Reference is Jimena (right). Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: If I were Strava, I would include this chart in the activities marked as RACE
    by the user. The analysis could be done with all the followers of that user that
    registered the same activity. An example of integration is shown above.
  prefs: []
  type: TYPE_NORMAL
- en: Head-to-Head Lap Analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Metrics:** the line represent the evolution of the gap (in seconds) between
    two runners. The bars represent, for every lap, if a runner was faster (blue)
    or slower (red) compared to other.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Insights:** this combined chart is ideal for analysing the head-to-head performance
    across every lap of a race.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eda6b248da26e98664a20785606d3f45.png)![](../Images/f486aca17ca420420cdc800f9524ee3c.png)'
  prefs: []
  type: TYPE_IMG
- en: Proposal for **Head-to-Head Lap Analysis** of Pedro vs. Juan integration into
    Strava. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: This graph has been specifically designed to compare two runners performance
    across the splits (laps) of the race.
  prefs: []
  type: TYPE_NORMAL
- en: The example represent the time loss of Pedro compared to Juan.
  prefs: []
  type: TYPE_NORMAL
- en: '**The orange line** represent the loss in time as explained for the other graph:
    both started together, but Pedro started to lose time after the first km until
    the sixth. Then, he began to be faster to reduce that gap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The bars** bring new insights to our comparison representing the time loss
    (in red) or the gain (in blue) for every lap. At a glance, Pedro can see that
    the bigger loss in time was on the third km (8 seconds). And he only lost time
    on half of the splits. The pace of both was the same for kilometres 1 and 4, and
    Pedro was faster between on the kms 7, 8 and 9.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Thanks to this graph we can see that I was faster than Pedro on the first 6
    kms, gaining and advantage that Pedro could not reduce, despite being faster on
    the last part of the race. And this confirms the feeling that we have after the
    competitions: “Pedro has stronger finishes in races.”'
  prefs: []
  type: TYPE_NORMAL
- en: Data Processing and Algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to know how the graphs were created, keep reading this section about
    the implementation.
  prefs: []
  type: TYPE_NORMAL
- en: I don’t want to go too much into the coding bits behind this. As every software
    problem, you might achieve your goal through different solutions. That’s why I
    am more interested in explaining the problems that I faced and the logic behind
    my solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Loading Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: No data, no solution. In this case no Strava API is needed . If you log in your
    Strava account and go to an activity you can download the GPX file of the activity
    by clicking on *Export GPX* as shown on the screenshot. GPX files contain datapoints
    in XML format as seen below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/44846a62ae44815980e3f68bd2437b7b.png)![](../Images/d26c929437711195dc64b29237a91036.png)'
  prefs: []
  type: TYPE_IMG
- en: How to download GPX file from Strava (left). Example of GPX file (right). Image
    by Author.
  prefs: []
  type: TYPE_NORMAL
- en: To get my friends data for the same activities I just told them to follow the
    same steps and send the .gpx files to me.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this use case I was only interested in a few attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Location: *latitude, longitude* and *elevation*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Timestamp: *time*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First problem for me was to convert the .gpx files into pandas dataframes so
    I can play and process the data using python. I used ***gpxpy***library. Code
    below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After that, I had 667 datapoints stored on a dataframe. Every row represents
    **where** and **when** I was during the activity.
  prefs: []
  type: TYPE_NORMAL
- en: I learnt that not every row is captured with the same frequency (1 second between
    0 and 1, then 3 seconds, then 4 seconds, then 1 second…)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e68884938e5f0f12dd8a742d6fc5a4cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of .gpx data stored on a pandas dataframe. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Getting some metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Every row in the data represents a different moment and place, so my first
    idea was to calculate the difference in time, elevation, and distance between
    two consecutive rows: ***seconds_diff****,* ***elevation_diff***and ***distance_diff****.*'
  prefs: []
  type: TYPE_NORMAL
- en: Time and elevation were straightforward using *.diff()* method over each column
    of the pandas dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Unfortunately, as the Earth is not flat, we need to use a distance metric called
    **haversine distance** [2]**:** the shortest distance between two points on the
    surface of a sphere, given their latitude and longitude coordinates. I used the
    library *haversine.*See the code below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The cumulative distance was also added as a new column ***distance_cum*** using
    the method *cumsum()* as seen below
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point the dataframe with my track data includes 4 new columns with
    useful metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f44598fea204f0be62a99fd6fd7a8e1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataframe with new metrics for every row. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'I applied the same logic to other runners’ tracks: *jimena_df* and *pedro_df*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/50e2a0e6bd554af943b9e056fbe429d5.png)![](../Images/955862c10068818bdde7587af22c0166.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Dataframes for other runners: Pedro (left) and Jimena (right). Image by Author.'
  prefs: []
  type: TYPE_NORMAL
- en: We are ready now to play with the data to create the visualisations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Challenges:**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To obtain the data needed for the visuals my first intuition was: look at the
    cumulative distance column for every runner, identify when a lap distance was
    completed (1000, 2000, 3000, etc.) by each of them and do the differences of timestamps.'
  prefs: []
  type: TYPE_NORMAL
- en: 'That algorithm looks simple, and might work, but it had some limitations that
    I needed to address:'
  prefs: []
  type: TYPE_NORMAL
- en: Exact lap distances are often completed in between two data points registered.
    To be more accurate I had to do **interpolation** of both **position** and **time**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Due to **difference in the precision** **of devices**, there might be misalignments
    across runners. The most typical is when a runner’s lap notification beeps before
    another one even if they have been together the whole track. To minimise this
    I decided to **use the reference runner to set the position marks for every lap
    in the track**. The time difference will be calculated when other runners cross
    those marks (even though their cumulative distance is ahead or behind the lap).
    This is more close to the reality of the race: if someone crosses a point before,
    they are ahead (regardless the cumulative distance of their device)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the previous point comes another problem: the latitude and longitude of
    a reference mark might never be exactly registered on the other runners’ data.
    I used **Nearest Neighbours** to find the closest datapoint in terms of position.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, Nearest Neighbours might bring wrong datapoints if the track crosses
    the same positions at different moments in time. So the population where the Nearest
    Neighbours will look for the best match needs to be **reduced to a smaller group
    of candidates**. I defined a **window size of 20 datapoints** around the target
    distance (*distance_cum)*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Algorithm**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With all the previous limitations in mind, the algorithm should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Choose the reference and a lap distance (default= 1km)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '2\. Using the reference data, identify the position and the moment every lap
    was completed: the reference marks.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3\. Go to other runner’s data and identify the moments they crossed those position
    marks. Then calculate the difference in time of both runners crossing the marks.
    Finally the delta of this time difference to represent the evolution of the gap.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Code Example**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1\. Choose the reference and a lap distance (default= 1km)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Juan will be the reference (*juan_df)* on the examples.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other runners will be Pedro (*pedro_df* ) and Jimena (*jimena_df*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lap distance will be 1000 metres
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '2\. Create **interpolate_laps()**: function that finds or interpolates the
    exact point for each completed lap and return it in a new dataframe*.* The inferpolation
    is done with the function: **interpolate_value()** thatwas also created.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Applying the interpolate function to the reference dataframe will generate
    the following dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6489422f28f6ea842bcb5bfeb6256a1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataframe with the lap metrics as a result of interpolation. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Note as it was a 10k race, 10 laps of 1000m has been identified (see column
    *distance_cum*). The column *seconds_diff* has the time per lap. The rest of the
    columns (*latitude*, *longitude*, *elevation* and *date_time*)mark the position
    and time for each lap of the reference as the result of interpolation.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. To calculate the time gaps between the reference and the other runners I
    created the function **gap_to_reference()**
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Below the code to implement the logic and store results on the dataframe **matches_gap_to_reference:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The columns of the resulting dataframe contain the important information that
    will be displayed on the graphs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f2ece348885eb7e4fc99db1bd014b0c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Some columns from the dataframe returned by the function gap_to_reference().
    Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Race GAP Analysis Graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Requirements:**'
  prefs: []
  type: TYPE_NORMAL
- en: The visualisation needs to be tailored for a runner who will be the **reference.**
    Every runner will be represented by a line graph.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**X-axis represent distance.**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Y-axis the gap to reference** in seconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The reference will set the baseline. A constant grey line in y-axis = 0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lines for the other runners will be above the reference if they were ahead
    on the track and below if they were behind.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/fab024dd6ddd7f803ea74b8be5714aaf.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Race Gap Analysis* chart for 10 laps (1000m). Image by Author.'
  prefs: []
  type: TYPE_NORMAL
- en: To represent the graph I used *plotly* library and used the data from **matches_gap_to_reference:**
  prefs: []
  type: TYPE_NORMAL
- en: '**X-axis**: is the cumulative distance per lap. Column **distance_cum**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Y-axis:** represents the gap to reference in seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Grey line: reference’s gap to reference is always 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Purple line: Pedro’s gap to reference **(-) seconds_to_reference_pedro**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blue line: Jimena’s gap to reference **(-) seconds_to_reference_jimena**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Head to Head Lap Analysis Graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Requirements:**'
  prefs: []
  type: TYPE_NORMAL
- en: The visualisation needs to compare data for only 2 runners. A reference and
    a competitor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**X-axis represents distance**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Y-axis represents seconds**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two metrics will be plotted to compare the runners’ performance: a line graph
    will show the total gap for every point of the race. The bars will represent if
    that gap was increased (positive) or decreased (negative) on every lap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/3d35fdd833da8132fe85c33fa15f9b23.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Head-to-Head Lap Analysis* chart for 10 laps (1000m). Image by Author.'
  prefs: []
  type: TYPE_NORMAL
- en: Again, the data represented on the example is coming from **matches_gap_to_reference:**
  prefs: []
  type: TYPE_NORMAL
- en: '**X-axis**: is the cumulative distance per lap. Column **distance_cum**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Y-axis:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Orange line: Pedro’s gap to Juan **(+) seconds_to_reference_pedro**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bars: the delta of that gap per lap **lap_difference_formatted_pedro.** If
    Pedro losses time, the delta is positive and represented in red. Otherwise the
    bar is blue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I refined the style of both visuals to align more closely with Strava’s design
    aesthetics.
  prefs: []
  type: TYPE_NORMAL
- en: Kudos for this article?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I started this idea after my last race. I really liked the results of the visuals
    so I though they might be useful for the Strava community. That’s why I decided
    to share them with the community writing this article.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] S. Paul, [Strava’s next chapter: New CEO talks AI, inclusivity, and why
    ‘dark mode’ took so long.](https://techcrunch.com/2024/07/20/stravas-next-chapter-new-ceo-talks-ai-inclusivity-and-why-dark-mode-took-so-long/?guccounter=1&guce_referrer=aHR0cHM6Ly93d3cubGlua2VkaW4uY29tLw&guce_referrer_sig=AQAAALrriMjjcs0gk_LkHSHhEYNqeEB_G3h2ZqbXA0KyemE5fIqpbYVbEaq70qgL5eTHmyTNsAHLol_fEefFsj3PLGzxpyB7xfU_wcUPkvT4Iso2kOe8h_Gf5pLpXrIP4hstEUxnbZ1LUWjAq2pAC3LUf-ucvEfU4eNTXCRxVMwipGZm)
    (2024)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] D. Grabiele, [“Haversine Formula”, Baeldung on Computer Science.](https://www.baeldung.com/cs/haversine-formula)
    (2024)'
  prefs: []
  type: TYPE_NORMAL
