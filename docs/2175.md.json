["```py\nfrom sklearn.cluster import KMeans\nimport numpy as np\n\n#sample data\nX = np.array([[1, 2], [1, 4], [1, 0],\n              [10, 2], [10, 4], [10, 0]])\n\n#create k-means model\nkmeans = KMeans(n_clusters = 2, random_state = 0, n_init = \"auto\").fit(X)\n\n#print the results, use to predict, and print centers\nkmeans.labels_\nkmeans.predict([[0, 0], [12, 3]])\nkmeans.cluster_centers_\n```", "```py\nfrom sklearn.cluster import KMeans\nimport numpy as np\n\n#sample data\nX = np.array([[1, 2], [1, 4], [1, 0],\n              [10, 2], [10, 4], [10, 0]])\n\n#create k-means model\nkmeans = KMeans(n_clusters = 2, random_state = 0, n_init = \"k-means++\").fit(X)\n\n#print the results, use to predict, and print centers\nkmeans.labels_\nkmeans.predict([[0, 0], [12, 3]])\nkmeans.cluster_centers_\n```", "```py\nfrom sklearn.cluster import DBSCAN\nimport numpy as np\n\n#sample data\nX = np.array([[1, 2], [2, 2], [2, 3],\n              [8, 7], [8, 8], [25, 80]])\n\n#create model\nclustering = DBSCAN(eps=3, min_samples=2).fit(X)\n\n#print results\nclustering.labels_\n```", "```py\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nfrom sklearn.cluster import AgglomerativeClustering\nfrom scipy.cluster.hierarchy import fcluster\n\n#create distance matrix\nlinkage_data = linkage(data, method = 'ward', metric = 'euclidean', optimal_ordering = True)\n\n#view dendrogram\ndendrogram(linkage_data)\nplt.title('Hierarchical Clustering Dendrogram') \nplt.xlabel('Data point') \nplt.ylabel('Distance') \nplt.show()\n\n#assign depth and clusters\nclusters = fcluster(linkage_data, 2.5, criterion = 'inconsistent', depth = 5)\n```"]