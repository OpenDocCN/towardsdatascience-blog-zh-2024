- en: Image Segmentation With K-Means Clustering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/image-segmentation-with-k-means-clustering-1bc53601f033?source=collection_archive---------6-----------------------#2024-09-05](https://towardsdatascience.com/image-segmentation-with-k-means-clustering-1bc53601f033?source=collection_archive---------6-----------------------#2024-09-05)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An introduction with Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jdhwilkins?source=post_page---byline--1bc53601f033--------------------------------)[![James
    Wilkins](../Images/fcdad070781b6e1d2cc2c293194a6f1a.png)](https://medium.com/@jdhwilkins?source=post_page---byline--1bc53601f033--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--1bc53601f033--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--1bc53601f033--------------------------------)
    [James Wilkins](https://medium.com/@jdhwilkins?source=post_page---byline--1bc53601f033--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--1bc53601f033--------------------------------)
    ·11 min read·Sep 5, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: You can view the notebook for this project [here](https://github.com/jdhwilkins/Image-Segmentation-K-Means)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/06a3c0074647c18c31c798504f13f78a.png)![](../Images/ffa682f3b09fa9fed5f3e97c0a26246e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'LEFT: Original Photograph, RIGHT: Segmented image (5 colours/segments)'
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the images above, we see an example of an image posterization filter
    that gives images a cartoon-like appearance, but behind the scenes, this filter
    is actually using a machine learning algorithm known as ***clustering***.
  prefs: []
  type: TYPE_NORMAL
- en: Before exploring into how this process works and seeing how we can implement
    it in Python, let’s take a look at why we might want to do this in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: Image Segmentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a normal photograph, a pixel can take one of roughly 16.7 million different
    colours. In this processed image, however, there are only 5 different colours.
    We’ve split all of the pixels into 5 different groups, segmenting the image into
    these different colour-regions.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve also cut down on the amount of noise and variation within the image. So,
    if this were to be used in some other machine learning application, we’ve just
    massively reduced the amount of data that needs to be processed, especially if
    this were applied to a whole library of images.
  prefs: []
  type: TYPE_NORMAL
- en: Even though we’ve simplified this image, we’ve still retained most of the important
    structural data. We are still able to identify shapes and forms, shadows and…
  prefs: []
  type: TYPE_NORMAL
