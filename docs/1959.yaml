- en: Advanced Recursive and Follow-Up Retrieval Techniques For Better RAGs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/advanced-retrieval-techniques-for-better-rags-c53e1b03c183?source=collection_archive---------5-----------------------#2024-08-12](https://towardsdatascience.com/advanced-retrieval-techniques-for-better-rags-c53e1b03c183?source=collection_archive---------5-----------------------#2024-08-12)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Breaking the problem solves half of it. Chaining them makes it even better.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://thuwarakesh.medium.com/?source=post_page---byline--c53e1b03c183--------------------------------)[![Thuwarakesh
    Murallie](../Images/44f1a14a899426592bbd8c7f73ce169d.png)](https://thuwarakesh.medium.com/?source=post_page---byline--c53e1b03c183--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--c53e1b03c183--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--c53e1b03c183--------------------------------)
    [Thuwarakesh Murallie](https://thuwarakesh.medium.com/?source=post_page---byline--c53e1b03c183--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--c53e1b03c183--------------------------------)
    ·15 min read·Aug 12, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/707f137ddeb3c4c0e3e08a9e300045d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Mike Alonzo](https://unsplash.com/@mikezo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: There isn’t a better way than query modification to improve LLMs.
  prefs: []
  type: TYPE_NORMAL
- en: In one of my recent posts, I discussed five query translation techniques and
    how they improve the retrieval process in RAG apps. One technique was Query decomposition.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/5-proven-query-translation-techniques-to-boost-your-rag-performance-47db12efe971?source=post_page-----c53e1b03c183--------------------------------)
    [## 5 Proven Query Translation Techniques To Boost Your RAG Performance'
  prefs: []
  type: TYPE_NORMAL
- en: How to get near-perfect LLM performance even with ambiguous user inputs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/5-proven-query-translation-techniques-to-boost-your-rag-performance-47db12efe971?source=post_page-----c53e1b03c183--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: This fantastic technique creates sub-questions to construct a more detailed
    answer to our initial query. These sub-questions will then be used in the retrieval
    process. The final LLM takes each question and answer pair as context to generate
    a comprehensive answer to our initial query.
  prefs: []
  type: TYPE_NORMAL
- en: This post discusses two other promoting techniques we often combine with query
    decomposition for better results.
  prefs: []
  type: TYPE_NORMAL
- en: The first technique is **recursive answering,** which involves generating subquestions
    in bulk but answering them recursively. The second technique is **followup questioning**.
    As you might have guessed, we answer the question…
  prefs: []
  type: TYPE_NORMAL
