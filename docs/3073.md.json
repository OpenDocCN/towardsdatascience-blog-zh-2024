["```py\nimport mesop as me\n\n# local imports\ntry:\n    from .utils import ui_components\nexcept Exception:\n    from utils import ui_components\n\n@me.page(path=\"/\")\ndef page(security_policy=me.SecurityPolicy(dangerously_disable_trusted_types=True)):\n    with me.box(\n        style=me.Style(\n            background=\"#fff\",\n            min_height=\"calc(100% - 48px)\",\n            padding=me.Padding(bottom=16),\n        )\n    ):\n        with me.box(\n            style=me.Style(\n                width=\"min(800px, 100%)\",\n                margin=me.Margin.symmetric(horizontal=\"auto\"),\n                padding=me.Padding.symmetric(\n                    horizontal=16,\n                ),\n            )\n        ):\n            ui_components.header_text()\n            ui_components.example_row()\n            ui_components.chat_input()\n            ui_components.output()\n            ui_components.clear_output()\n    ui_components.footer()\n\n@me.page(path=\"/error\")\ndef error(security_policy=me.SecurityPolicy(dangerously_disable_trusted_types=True)):\n    with me.box(\n        style=me.Style(\n            background=\"#fff\",\n            min_height=\"calc(100% - 48px)\",\n            padding=me.Padding(bottom=16),\n        )\n    ):\n        with me.box(\n            style=me.Style(\n                width=\"min(720px, 100%)\",\n                margin=me.Margin.symmetric(horizontal=\"auto\"),\n                padding=me.Padding.symmetric(\n                    horizontal=16,\n                ),\n            )\n        ):\n            ui_components.header_text()\n            ui_components.render_error_page()\n    ui_components.footer()\n```", "```py\ndef navigate_home(event: me.ClickEvent):\n    me.navigate(\"/\")\n\ndef render_error_page():\n    is_mobile = me.viewport_size().width < 640\n    with me.box(\n        style=me.Style(\n            position=\"sticky\",\n            width=\"100%\",\n            display=\"block\",\n            height=\"100%\",\n            font_size=50,\n            text_align=\"center\",\n            flex_direction=\"column\" if is_mobile else \"row\",\n            gap=10,\n            margin=me.Margin(bottom=30),\n        )\n    ):\n        me.text(\n            \"AN ERROR HAS OCCURRED\",\n            style=me.Style(\n                text_align=\"center\",\n                font_size=30,\n                font_weight=700,\n                padding=me.Padding.all(8),\n                background=\"white\",\n                justify_content=\"center\",\n                display=\"flex\",\n                width=\"100%\",\n            ),\n        )\n        me.button(\n            \"Navigate to home page\", \n            type=\"flat\",\n            on_click=navigate_home\n        )\n```", "```py\nimport mesop as me\n\n@me.stateclass\nclass State:\n    input: str\n    output: str\n    in_progress: bool\n```", "```py\ndef clear_output():\n    with me.box(style=me.Style(margin=me.Margin.all(15))):\n        with me.box(style=me.Style(display=\"flex\", flex_direction=\"row\", gap=12)):\n            me.button(\"Clear output\", type=\"flat\", on_click=delete_state_helper)\n\ndef delete_state_helper(ClickEvent):\n    config.State.output = \"\"\n```", "```py\ndef example_row():\n    is_mobile = me.viewport_size().width < 640\n    with me.box(\n        style=me.Style(\n            display=\"flex\",\n            flex_direction=\"column\" if is_mobile else \"row\",\n            gap=10,\n            margin=me.Margin(bottom=40),\n        )\n    ):\n        for example in config.EXAMPLE_PROMPTS:\n            prompt_box(example, is_mobile)\n\ndef prompt_box(example: str, is_mobile: bool):\n    with me.box(\n        style=me.Style(\n            width=\"100%\" if is_mobile else 200,\n            height=250,\n            text_align=\"center\",\n            background=\"#F0F4F9\",\n            padding=me.Padding.all(16),\n            font_weight=500,\n            line_height=\"1.5\",\n            border_radius=16,\n            cursor=\"pointer\",\n        ),\n        key=example,\n        on_click=click_prompt_box,\n    ):\n        me.text(example)\n\ndef click_prompt_box(e: me.ClickEvent):\n    config.State.input = e.key\n```", "```py\ndef chat_input():\n    with me.box(\n        style=me.Style(\n            padding=me.Padding.all(8),\n            background=\"white\",\n            display=\"flex\",\n            width=\"100%\",\n            border=me.Border.all(me.BorderSide(width=0, style=\"solid\", color=\"black\")),\n            border_radius=12,\n            box_shadow=\"0 10px 20px #0000000a, 0 2px 6px #0000000a, 0 0 1px #0000000a\",\n        )\n    ):\n        with me.box(\n            style=me.Style(\n                flex_grow=1,\n            )\n        ):\n            me.native_textarea(\n                value=config.State.input,\n                autosize=True,\n                min_rows=4,\n                placeholder=\"Enter your prompt\",\n                style=me.Style(\n                    padding=me.Padding(top=16, left=16),\n                    background=\"white\",\n                    outline=\"none\",\n                    width=\"100%\",\n                    overflow_y=\"auto\",\n                    border=me.Border.all(\n                        me.BorderSide(style=\"none\"),\n                    ),\n                ),\n                on_blur=textarea_on_blur,\n            )\n        with me.content_button(type=\"icon\", on_click=click_send):\n            me.icon(\"send\")\n\ndef click_send(e: me.ClickEvent):\n    if not config.State.input:\n        return\n    config.State.in_progress = True\n    input = config.State.input\n    config.State.input = \"\"\n    yield\n\n    if result := api_utils.call_jira_agent(input):\n        config.State.output += result\n    else:\n        me.navigate(\"/error\")\n\n    config.State.in_progress = False\n    yield\n\ndef textarea_on_blur(e: me.InputBlurEvent):\n    config.State.input = e.value\n```", "```py\nimport requests\n\n# local imports\nfrom . import config\n\ndef call_jira_agent(request):\n    try:\n        data = {\"request\": request}\n        if (response := requests.post(f\"{config.DJANGO_URL}api/jira-agent/\", data=data)) and \\\n        (response.status_code == 200) and \\\n        (output := response.json().get(\"output\")):\n            return f\"Request: {request}<br>Output: {output}<br><br>\"\n    except Exception as e:\n        print(f\"ERROR call_jira_agent: {e}\")\n```", "```py\ndjango-admin startapp api\n```", "```py\nmodelRequest = models.ModelRequest(request=request, response=response)\nmodelRequest.save()\n```", "```py\nclass GetRecords(APIView):\n    def get(self, request):\n        \"\"\"Get request records endpoint\"\"\"\n        data = models.ModelRequest.objects.all().values()\n        return Response({'result': str(data)})\n```", "```py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        'NAME': 'vectordb', \n        'USER': 'testuser',\n        'PASSWORD': 'testpwd',\n        'HOST': 'db' if DOCKER_RUNNING else '127.0.0.1', \n        'PORT': '5432',\n    }\n}\n```", "```py\nfrom langchain.agents import AgentType, initialize_agent\nfrom langchain_community.agent_toolkits.jira.toolkit import JiraToolkit\nfrom langchain_community.utilities.jira import JiraAPIWrapper\nfrom langchain_openai import OpenAI\nfrom langchain.tools import tool\nfrom langchain_core.prompts import ChatPromptTemplate, FewShotChatMessagePromptTemplate\n\nllm = OpenAI(temperature=0)\n\n@tool\ndef triage(ticket_number:str) -> None:\n    \"\"\"triage a given ticket and link related tickets\"\"\"\n    ticket_number = str(ticket_number)\n    all_tickets = jira_utils.get_all_tickets()\n    primary_issue_key, primary_issue_data = jira_utils.get_ticket_data(ticket_number)\n    find_related_tickets(primary_issue_key, primary_issue_data, all_tickets)\n    user_stories_acceptance_criteria_priority(primary_issue_key, primary_issue_data)\n    return \"Task complete\"\n\njira = JiraAPIWrapper()\ntoolkit = JiraToolkit.from_jira_api_wrapper(jira)\nagent = initialize_agent(\n    toolkit.get_tools() + [triage], \n    llm, \n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, \n    verbose=True, \n    max_iterations=5,\n    return_intermediate_steps=True\n)\n```", "```py\nclass LLMTask:\n    def __init__(self, system_prompt, examples, llm):\n        self.system_prompt = system_prompt\n        self.examples = examples\n        self.llm = llm\n\n    def construct_prompt(self):\n        example_prompt = ChatPromptTemplate.from_messages(\n            [\n                (\"human\", \"{input}\"),\n                (\"ai\", \"{output}\"),\n            ]\n        )       \n        few_shot_prompt = FewShotChatMessagePromptTemplate(\n            example_prompt=example_prompt,\n            examples=self.examples,\n        )       \n        return ChatPromptTemplate.from_messages(\n            [\n                (\"system\", self.system_prompt),\n                few_shot_prompt,\n                (\"human\", \"{input}\"),\n            ]\n        )\n\n    def run_llm(self, input):\n        chain = self.construct_prompt() | self.llm \n        return chain.invoke({\"input\": input})\n\nproduct_model = LLMTask(system_prompts.get(\"system_prompt_product\"), example_prompts.get(\"examples_product\"), llm)\nlinking_model = LLMTask(system_prompts.get(\"system_prompt_linking\"), example_prompts.get(\"examples_linking\"), llm)\n```", "```py\n# CONTEXT #\nI want to triage newly created Jira tickets for our software company by comparing them to previous tickets.\nThe first ticket will be in <ticket1> tags and the second ticket will be in <ticket2> tags. \n\n# OBJECTIVE #\nDetermine if two tickets are related if the issue describes similar tasks and return True in <related> tags, also include your thinking in <thought> tags.\n\n# STYLE #\nKeep reasoning concise but logical.\n\n# TONE #\nCreate an informative tone.\n\n# AUDIENCE #\nThe audience will be business stake holders, product stakeholders and software engineers.\n\n# RESPONSE #\nReturn a boolean if you think the tickets are related in <related> tags and also return your thinking as to why you think the tickets are related in <thought> tags.\n```", "```py\n# CONTEXT #\nYou are a product owner working in a large software company, you triage new tickets from their descriptions in <description> tags as they are raised from users.\n\n# OBJECTIVE #\nFrom the description in <description> tags, you should write the following; user stories in <user_stories> tags, acceptance criteria in <acceptance_criteria> tags and priority in <priority>.\nPriority must be either LOW, MEDIUM OR HIGH depending on the what you deem is most appropriate for the given description.\nAlso include your thinking in <thought> tags for the priority.\n\n# STYLE #\nShould be in the style of a product owner or manager.\n\n# TONE #\nUse a professional and business oriented tone.\n\n# AUDIENCE #\nThe audience will be business stake holders, product stakeholders and software engineers.\n\n# RESPONSE #\nRespond with the following format.\nUser stories in <user_stories> tags.\nAcceptance criteria in <acceptance_criteria> tags.\nPriority in <priority> tags.\n```", "```py\n \"examples_linking\": [\n        {\n            \"input\": \"<issue1>Add Jira integration ticket creation Add a Jira creation widget to the front end of the website<issue1><issue2>Add a widget to the front end to create a Jira Add an integration to the front end to allow users to generated Jira tickets manually<issue2>\",\n            \"output\": \"<related>True<related><thought>Both tickets relate to a Jira creation widget, they must be duplicate tickets.<thought>\"\n        },\n        {\n            \"input\": \"<issue1>Front end spelling error There is a spelling error for the home page which should read 'Welcome to the homepage' rather than 'Wellcome to the homepage'<issue1><issue2>Latency issue there is a latency issue and the calls to the Open AI should be made asynchronous<issue2>\",\n            \"output\": \"<related>False<related><thought>The first ticket is in relation to a spelling error and the second is a latency, therefore they are not related.<thought>\"\n        },\n        {\n            \"input\": \"<issue1>Schema update We need to add a column for model requests and responses<issue1><issue2>Update schema to include both model requests and model responses Add to two new additional fields to the schema<issue2>\",\n            \"output\": \"<related>True<related><thought>Both tickets reference a schema update with two new fields for model requests and model responses, therefore they must be related.<thought>\"\n        }\n    ]\n```", "```py\n \"examples_product\": [\n        {\n            \"input\": \"<description>Add Jira integration ticket creation Add a Jira creation widget to the front end of the website<description>\",\n            \"output\": \"<user_stories>As a user, I want to be able to create a Jira ticket directly from the website.\\nAs a product owner, I want to streamline the process of creating Jira tickets for our team.<user_stories>\\n<acceptance_criteria>The Jira creation widget should be easily accessible on the front end of the website.\\nThe widget should allow users to input all necessary information for a Jira ticket, such as title, description, and assignee.\\nOnce submitted, the widget should create a new Jira ticket in the designated project.\\nThe widget should have proper error handling in case of any issues with creating the ticket.<acceptance_criteria>\\n<priority>MEDIUM<priority>\\n<thought>By adding a Jira integration and creation widget to the website, we can improve the efficiency and accuracy of creating Jira tickets for our team. This will ultimately save time and resources for both the business and the development team. Though there is no immediate need for this to be completed. Therefore, I believe this ticket should be prioritized as MEDIUM.<thought>\"\n        },\n        {\n            \"input\": \"<description>Urgent schema update We need to add a column for model requests and responses for compliance<description>\",\n            \"output\": \"<user_stories>As a developer, I want to be able to view and track model requests and responses for compliance purposes.\\nAs a product owner, I want to ensure our system is compliant with regulations and standards.<user_stories>\\n<acceptance_criteria>A new column should be added to the schema for model requests and responses.\\nThe column should accurately track and store all relevant information for compliance purposes.\\nThe column should be easily accessible and viewable for authorized users.\\nThe update should not disrupt any existing functionality of the system.<acceptance_criteria>\\n<priority>HIGH<priority>\\n<thought>This ticket is marked as urgent, indicating that it is a high priority for the business. Compliance is a critical aspect of our business and it is important that we address this issue as soon as possible. By adding a new column for model requests and responses, we can ensure that our system is compliant and avoid any potential legal or regulatory issues. Therefore, I believe this ticket should be prioritized as HIGH.<thought>\"\n        },\n        {\n            \"input\": \"<description>Homepage CSS error There is a CSS error for the homepage which is affecting a call to action button and negatively impacting conversion<description>\",\n            \"output\": \"<user_stories>As a user, I want the CSS error on the homepage to be fixed so that I can easily access the call to action button.\\nAs a product owner, I want to improve the conversion rate of our website by fixing any CSS errors.<user_stories>\\n<acceptance_criteria>The CSS error should be identified and fixed on the homepage.\\nThe call to action button should be easily visible and accessible for users.\\nThe fix should not affect any other functionality of the website.<acceptance_criteria>\\n<priority>HIGH<priority>\\n<thought>This CSS error is directly impacting the conversion rate of our website, which is a key metric for our business. It is important that we address this issue as soon as possible to improve the user experience and ultimately increase conversions. Therefore, I believe this ticket should be prioritized as HIGH.<thought>\"\n        }\n    ],\n```", "```py\ndef check_issue_and_link_helper(args):\n    key, data, primary_issue_key, primary_issue_data = args\n    if key != primary_issue_key and \\\n    llm_check_ticket_match(primary_issue_data, data):\n        jira_utils.link_jira_issue(primary_issue_key, key) \n\ndef find_related_tickets(primary_issue_key, primary_issue_data, issues):\n    args = [(key, data, primary_issue_key, primary_issue_data) for key, data in issues.items()]\n    with concurrent.futures.ThreadPoolExecutor(os.cpu_count()) as executor:\n        executor.map(check_issue_and_link_helper, args)\n\ndef llm_check_ticket_match(ticket1, ticket2):\n    llm_result = linking_model.run_llm(f\"<ticket1>{ticket1}<ticket1><ticket2>{ticket2}<ticket2>\")\n    if ((result := jira_utils.extract_tag_helper(llm_result))) \\\n    and (result == 'True'):\n        return True \n```"]