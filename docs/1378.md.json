["```py\n# Create node lookup for channels\nnode_lookup = {0: 'Demand',\n               1: 'TV spend',\n               2: 'Social spend', \n               3: 'Organic clicks',                   \n               4: 'Social clicks',\n               5: 'Revenue'                                                                             \n }\n\ntotal_nodes = len(node_lookup)\n\n# Create adjacency matrix - this is the base for our graph\ngraph_actual = np.zeros((total_nodes, total_nodes))\n\n# Create graph using expert domain knowledge\ngraph_actual[0, 3] = 1.0 # Demand -> Organic clicks\ngraph_actual[0, 4] = 1.0 # Demand -> Social clicks\ngraph_actual[1, 3] = 1.0 # Brand spend -> Organic clicks\ngraph_actual[2, 3] = 1.0 # Social spend -> Organic clicks\ngraph_actual[1, 4] = 1.0 # Brand spend -> Social clicks\ngraph_actual[2, 4] = 1.0 # Social spend -> Social clicks\ngraph_actual[3, 5] = 1.0 # Organic clicks -> Revenue\ngraph_actual[4, 5] = 1.0 # Social clicks -> Revenue\n```", "```py\n# Create dataframe with 1 column per code\ndf = pd.DataFrame(columns=node_lookup.values())\n\n# Setup data generating process\ndf[node_lookup[0]] = np.random.normal(100000, 25000, size=(20000)) # Demand\ndf[node_lookup[1]] = np.random.normal(100000, 20000, size=(20000)) # Brand spend\ndf[node_lookup[2]] = np.random.normal(100000, 25000, size=(20000)) # Social spend\ndf[node_lookup[3]] = 0.75 * df[node_lookup[0]] + 0.50 * df[node_lookup[1]] + 0.25 * df[node_lookup[2]] + np.random.normal(loc=0, scale=2000, size=20000) # Organic clicks\ndf[node_lookup[4]] = 0.30 * df[node_lookup[0]] + 0.50 * df[node_lookup[1]] + 0.70 * df[node_lookup[2]] + np.random.normal(100000, 25000, size=(20000)) # Social clicks\ndf[node_lookup[5]] = df[node_lookup[3]] + df[node_lookup[4]] + np.random.normal(loc=0, scale=2000, size=20000) # Revenue\n```", "```py\n# Setup graph\ngraph = nx.from_numpy_array(graph_actual, create_using=nx.DiGraph)\ngraph = nx.relabel_nodes(graph, node_lookup)\n\n# Create SCM\ncausal_model = gcm.InvertibleStructuralCausalModel(graph)\n\ncausal_model.set_causal_mechanism('Demand', gcm.EmpiricalDistribution()) # Deamnd\ncausal_model.set_causal_mechanism('TV spend', gcm.EmpiricalDistribution()) # Brand spend\ncausal_model.set_causal_mechanism('Social spend', gcm.EmpiricalDistribution()) # Social spend\n\ncausal_model.set_causal_mechanism('Organic clicks', gcm.AdditiveNoiseModel(gcm.ml.create_ridge_regressor())) # Organic clicks\ncausal_model.set_causal_mechanism('Social clicks', gcm.AdditiveNoiseModel(gcm.ml.create_ridge_regressor())) # Social clicks\ncausal_model.set_causal_mechanism('Revenue', gcm.AdditiveNoiseModel(gcm.ml.create_ridge_regressor())) # Revenue\n\ngcm.fit(causal_model, df)\n```", "```py\n# calculate intrinsic causal influence\nici = gcm.intrinsic_causal_influence(causal_model, target_node='Revenue')\n\ndef convert_to_percentage(value_dictionary):\n    total_absolute_sum = np.sum([abs(v) for v in value_dictionary.values()])\n    return {k: round(abs(v) / total_absolute_sum * 100, 1) for k, v in value_dictionary.items()}\n\nconvert_to_percentage(ici)\n```", "```py\n# Convert dictionary to DataFrame\ndf = pd.DataFrame(list(ici.items()), columns=['Node', 'Intrinsic Causal Influence'])\n\n# Create a bar plot\nplt.figure(figsize=(10, 6))\nsns.barplot(x='Node', y='Intrinsic Causal Influence', data=df)\n\n# Rotate x labels for better readability\nplt.xticks(rotation=45)\nplt.title('Bar Plot from Dictionary Data')\nplt.show()\n```"]