- en: How to Read and Analyze GDAT Files Using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/how-to-read-and-analyze-gdat-files-using-python-5c8dece157d4?source=collection_archive---------10-----------------------#2024-04-18](https://towardsdatascience.com/how-to-read-and-analyze-gdat-files-using-python-5c8dece157d4?source=collection_archive---------10-----------------------#2024-04-18)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A quick tutorial on how to work with these computer-modelled binary files.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://madison13.medium.com/?source=post_page---byline--5c8dece157d4--------------------------------)[![Madison
    Hunter](../Images/fa84176a13175e75944b49e110b92e14.png)](https://madison13.medium.com/?source=post_page---byline--5c8dece157d4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--5c8dece157d4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--5c8dece157d4--------------------------------)
    [Madison Hunter](https://madison13.medium.com/?source=post_page---byline--5c8dece157d4--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--5c8dece157d4--------------------------------)
    ¬∑9 min read¬∑Apr 18, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/58606c4133be520f96406ac6d15f979c.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Werclive üëπ](https://unsplash.com/@werclive?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Data comes in all shapes and sizes.
  prefs: []
  type: TYPE_NORMAL
- en: While many of us spend most of our data education and careers working with data
    in relatively ‚Äúfriendly‚Äù formats, such as spreadsheets and CSV files, there may
    come a time when you‚Äôre confronted with data that isn‚Äôt so friendly. You might
    not even be able to visualize it straight out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: This happened to me recently, when a computer model I was running was outputting
    data in a gridded binary format. The tricky thing about binary files is figuring
    out how to read them to access and analyze their contained data. After scouring
    the edges of the internet for a solution, I cobbled together a simple Python function
    that allows you to read gridded binary data so that it can later be analyzed using
    your favorite Python libraries, such as matplotlib, or NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: 'This niche solution will allow you to read gridded binary data files with GDAT
    file endings produced from computer models, particularly those modeling natural
    processes, such as environmental or meteorological phenomena. As such, the code
    below makes these assumptions:'
  prefs: []
  type: TYPE_NORMAL
- en: Your GDAT file follows [GrADS](http://cola.gmu.edu/grads/) conventions (though
    this will likely work for various other binary files).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your GDAT file represents a gridded study area over a specified study period.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the GDAT file, there is a grid of data values for each day in the specified
    study period.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each cell in the grid of data values contains a tuple of values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The grid of data values has a set number of rows and columns that can be used
    to index cells.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/1d2bd1f4334c609319a16f93f7d4f316.png)'
  prefs: []
  type: TYPE_IMG
- en: Visual representation of the gridded binary data, with each grid of values representing
    a study area organized into days (for each day of the study period). The cells
    in each grid can be indexed using row and column indices. Figure by the author
    using [Canva](https://www.canva.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Reading the binary GDAT file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The above code reads a binary GDAT file and structures its data to resemble
    the grid of your study area for easier interpretation and analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '**import struct**: [struct](https://docs.python.org/3/library/struct.html)
    is a Python module that allows you to work with binary data. This module contains
    functions that allow you to convert binary data into Python objects and vice versa.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**def read_gdat_file(file_path, format_string, number_rows, number_columns,
    number_days):** This line begins the function that will allow us to read a binary
    file. For it to work, we will need to pass in arguments that detail the path to
    the correct GDAT file, the format type of the GDAT file, the number of rows and
    columns representing the study area, and finally the number of days the GDAT data
    covers. Knowing the number of days represented in the GDAT file allows the function
    to correctly partition the binary data into the rows and columns necessary to
    represent the study area for each day. This facilitates accurate analysis of the
    data later on. You should be able to find the number of days, as well as the number
    of rows and columns needed to represent the study area within whatever computer
    model parameters you‚Äôre using to generate the GDAT data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**data = []**: This line initializes an empty Python list that will be used
    to contain the GDAT data in its final grid format.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**with open(file_path, ‚Äòrb‚Äô) as f:** This line opens the binary file in read
    mode (designated by the **‚Äòrb‚Äô** argument), allowing the function to access its
    data. Opening the binary file using the **‚Äòwith‚Äô** statement ensures that the
    file is closed after you have accessed the data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**for _ in range(number_days):** This for loop iterates through the binary
    data and reads the data for each specified day. I‚Äôve opted to use an underscore
    in this for loop (as well as the following for loops) because the variable doesn‚Äôt
    need to have a name as I will not be using it later. You can use typical iteration
    counter variables, such as **i**, or **j** if it better suits your programming
    style.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**day_data = []**: This line initializes an empty Python list that will be
    used to contain the binary data for each day. It will contain all of the rows
    of binary data relating to that specific day.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**for _ in range(number_rows):** This for loop iterates through the specified
    number of rows within the specified day.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**row_data = []**: This line initializes an empty Python list that will be
    used to contain the binary data for the current row within the specified day.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**for _ in range(number_columns):** This for loop iterates through the data
    found in the specified number of columns within the specified row.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**value = struct.unpack(format_string, f.read(4))[0]**: This line initializes
    a variable called **value** and, using the **unpack** function from the **struct**
    module, reads however many bytes of binary data from the GDAT file at a time and
    interprets it according to the **format_string** specified (read section [‚ÄúFormat
    Characters‚Äù](https://docs.python.org/3/library/struct.html) to understand which
    format string you need to specify). The **unpack** function returns a tuple. In
    the code line, **[0]** is placed at the end to indicate that the function should
    only return the first (and in some instances, the only) value of the tuple. If
    each cell in your modeled study area contains a tuple with multiple values, it
    is unnecessary to include **[0]** at the end of the line unless you‚Äôre only interested
    in one of the cell values. For example, a scenario where you may have cells containing
    tuples with multiple values arises when the value measured in the cell has x and
    y components (i.e., wind).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**row_data.append(value):** This line appends the unpacked float value to **row_data,**
    which represents the current row.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**day_data.append(row_data):** This line appends the current row to **day_data**,
    which represents the current day.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**data.append(day_data):** This line appends the data for the current day to
    **data**, which represents the overall dataset.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**return data**: This function will continue iterating through the binary data
    file until it has read the grid data for each day into the overall dataset, designated
    as **data**. This line returns the overall dataset, converted from the binary
    file into a Python list. **data** returns gridded data separated into each day
    of the study period. This dataset can now be analyzed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Returning the data for a particular cell in the study area grid for the entire
    study period
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While your computer model likely produces data for a large study area, you may
    only be interested in analyzing the data for a particular cell within the grid
    across the entire study period.
  prefs: []
  type: TYPE_NORMAL
- en: Say, for example, you want to see how closely the computer model produced wind
    speed values compared to observed wind speed values. There exists a meteorological
    station with wind speed observations in a particular cell. We will extract the
    data for the cell containing the meteorological station for the entire study period,
    after which you will be able to plot the observed versus the modeled data to determine
    how accurate the model is.
  prefs: []
  type: TYPE_NORMAL
- en: The Python function below uses the Python list data returned from the previous
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The above code extracts the specified cell data for the entire study period.
  prefs: []
  type: TYPE_NORMAL
- en: '**def read_cell_data_for_study_period(data, row_index, column_index)**: This
    line begins the function that will extract the cell data for a specified cell
    using a row index and a column index to specify the cell‚Äôs location. The **data**
    argument takes the variable containing the list holding the GDAT data in its final
    grid format (this was created using the previous function). The **row_index**
    and **column_index** arguments take the integers specifying the row and column
    where the cell of interest is located.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**cell_data = []**: This line initializes an empty Python list that will contain
    the cell data for the entire study period.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**for day_data in data:** This for loop iterates through the gridded data for
    each day of the study period.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**reversed_day_data = day_data[::-1]**: This optional line of code is used
    if, upon printing out the cell data for the specified study period, you find that
    the gridded data is not being read from the correct starting point. In most scenarios,
    gridded data will be read from the upper left corner and will therefore be ‚Äú0
    indexed‚Äù. However, in some scenarios, the gridded data is read from the lower
    left corner. This phenomenon causes the grid indexing to be wrong, resulting in
    the wrong cell being read using your specified **row_index** and **column_index**.
    Therefore, this optional line of code flips the gridded data vertically so it
    is read beginning from the upper left corner. **Note: This line should only be
    used if it is determined that the grid of data is being read from the lower left
    corner. Omit this line if your data grid is being read correctly to avoid erroneous
    data readings.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**cell_value = reversed_day_data[row_index][column_index]**: This line initializes
    a variable called **cell_value** which will contain the cell data at the specified
    row and column index for each day of the study period. As you can see, your specified
    **row_index** and **column_index** arguments are used to access the correct cell
    in the gridded data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**cell_data.append(cell_value)**: This line appends the cell data for the current
    day to **cell_data**, which represents the overall list containing all of the
    cell values for the entire study period.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**return cell_data**: This function will continue iterating through each day
    of data and appending the value at a specific cell to the list designated as **cell_data**.
    This line returns the list, after which you will be able to print out and analyze
    the cell values for each day of the study period.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Example of how you can analyze cell data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read your computer model documentation to understand how its output is formatted.
    This will help you determine which values you want to extract from the tuple of
    data representing each cell, as well as what format the cell values are in (i.e.,
    floating point, etc.).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If possible, create TIF files from your GDAT files and open them in a GIS program.
    This will allow you to visualize your gridded data, as well as to check that your
    gridded data is being read from the upper left corner by the function used to
    read cell data for each day of your study period.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Subscribe to get my stories sent directly to your inbox: [Story Subscription](https://madison13.medium.com/subscribe)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Please become a member to get unlimited access to Medium using my referral
    link (I will receive a small commission at no extra cost to you): [Medium Membership](https://madison13.medium.com/membership)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Subscribe to my newsletter to get more exclusive data-driven content with an
    environmentalist spin: [DataDrivenEnvironmentalist](https://datadrivenenvironmentalist.substack.com/?r=1kyrup&utm_campaign=pub-share-checklist)'
  prefs: []
  type: TYPE_NORMAL
