["```py\n#Download GROMACS\nwget http://ftp.gromacs.org/pub/gromacs/gromacs-2021.2.tar.gz\ntar xfz gromacs-2021.2.tar.gz\ncd gromacs-2021.2\n\n#Install and source GROMACS\nmkdir build\ncd build\ncmake .. -DGMX_BUILD_OWN_FFTW=ON -DREGRESSIONTEST_DOWNLOAD=ON\nmake\nsudo make install\nsource /usr/local/gromacs/bin/GMXRC\n\n#Download PLUMED\nwget https://github.com/plumed/plumed2/releases/download/v2.7.1/plumed-2.7.1.tgz\ntar xfz plumed-2.7.1.tgz\ncd plumed-2.7.1\n\n#install PLUMED\n./configure --prefix=/usr/local/plumed\nmake\nsudo make install\n\n#Patch GROMACS\ncd gromacs-2021.2\nplumed patch -p\n\n#rebuilld GROMACS\ncd build\ncmake .. -DGMX_BUILD_OWN_FFTW=ON -DREGRESSIONTEST_DOWNLOAD=ON -DGMX_PLUMED=on\nmake\nsudo make install\n\n#Check installation\ngmx mdrun -plumed \n```", "```py\n# Define collective variables\n# Distance between atoms 1 and 10\nDISTANCE ATOMS=1,10 LABEL=d1\n\n# Dihedral angle involving atoms 4, 6, 8, and 10\nTORSION ATOMS=4,6,8,10 LABEL=t1\n\n# Print collective variables to a file\nPRINT ARG=d1,t1 FILE=COLVAR STRIDE=100\n\n# Apply metadynamics bias\nMETAD ...\n  ARG=d1,t1         # The collective variables to bias\n  PACE=500          # Add a Gaussian hill every 500 steps\n  HEIGHT=0.3        # Height of the Gaussian hill\n  SIGMA=0.1,0.1     # Width of the Gaussian hill for each CV\n  FILE=HILLS        # File to store the hills\n  BIASFACTOR=10     # Bias factor for well-tempered metadynamics\n  TEMP=300          # Temperature in Kelvin\n... METAD\n\n# Print the bias potential to a file\nPRINT ARG=d1,t1,bias FILE=BIAS STRIDE=500\n```", "```py\ngmx mdrun -s topol.tpr -plumed plumed.dat\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport plumed\nfrom matplotlib import cm, ticker\n\n# Configure font\nplt.rc('font', weight='normal', size=14)\n\n# Read data from PLUMED output\ndata = plumed.read_as_pandas(\"/path/to/COLVAR\")\n\n# Extract and reshape data for contour plot\n# Adjust the reshape parameters as needed, They should multiply to the\n# number of bins and be as close to each other as possible\nd1 = data[\"d1\"].values.reshape(-1, 100)\nt1 = data[\"t1\"].values.reshape(-1, 100)  \nbias = data[\"bias\"].values.reshape(-1, 100)\n\n# Plot contour lines\nplt.contour(d1, t1, bias, levels=np.arange(np.min(bias), np.max(bias), 10), linewidths=0.3, colors='k')\n\n# Plot filled contour\ncntr = plt.contourf(d1, t1, bias, levels=np.arange(0, 100), cmap=cm.jet)\n\n# Add colorbar\nplt.colorbar(cntr, label=\"\\u0394G [kJ/mol]\")\n\n# Set plot limits and labels\nplt.xlim(np.min(d1), np.max(d1))\nplt.ylim(np.min(t1), np.max(t1))\nplt.xlabel(\"Distance between atoms 1 and 10 (d1) [nm]\")\nplt.ylabel(\"Dihedral angle involving atoms 4, 6, 8, and 10 (t1) [degrees]\")\n\n# Show plot\nplt.show()\n```"]