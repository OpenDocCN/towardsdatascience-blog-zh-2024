- en: Pooling Layers For Convolutional Neural Networks (CNN)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/pooling-layers-for-convolutional-neural-networks-cnn-6cf2480668e2?source=collection_archive---------9-----------------------#2024-01-20](https://towardsdatascience.com/pooling-layers-for-convolutional-neural-networks-cnn-6cf2480668e2?source=collection_archive---------9-----------------------#2024-01-20)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What are pooling layers and their different types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@egorhowell?source=post_page---byline--6cf2480668e2--------------------------------)[![Egor
    Howell](../Images/1f796e828f1625440467d01dcc3e40cd.png)](https://medium.com/@egorhowell?source=post_page---byline--6cf2480668e2--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--6cf2480668e2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--6cf2480668e2--------------------------------)
    [Egor Howell](https://medium.com/@egorhowell?source=post_page---byline--6cf2480668e2--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--6cf2480668e2--------------------------------)
    ·7 min read·Jan 20, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd78494fae9787a8c8cda01a4e1006aa.png)'
  prefs: []
  type: TYPE_IMG
- en: ”[https://www.flaticon.com/free-icons/neural-network](https://www.flaticon.com/free-icons/neural-network)"
    title=”neural network icons”>Neural network icons created by Freepik — Flaticon.
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my previous article, we introduced the key building block behind convolutional
    neural networks (CNNs), the convolutional layer.
  prefs: []
  type: TYPE_NORMAL
- en: Convolutional layers allow the neural network to learn the best kernels to decipher
    or classify our input image.
  prefs: []
  type: TYPE_NORMAL
- en: If you are unfamiliar, a kernel is a small matrix that slides over the input
    image, and at each step, we apply the convolution operation. Depending on the
    kernel’s structure, it will have a different effect on the input image. It can
    blur, sharpen, or even detect edges ([***Sobel operator***](https://medium.com/towards-data-science/sobel-operator-in-image-processing-1d7cdda8cadb)).
  prefs: []
  type: TYPE_NORMAL
- en: In CNNs the output from a convolution operation is referred to as a feature
    map.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Below is an example diagram of a convolution where we blur the resultant image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab2eb9f458f2ed5e17b27b1411c48567.png)'
  prefs: []
  type: TYPE_IMG
- en: Example convolution for applying a blurring effect on a grayscale image. Diagram
    created by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want a full breakdown of how convolution works, check out my previous
    post on it here:'
  prefs: []
  type: TYPE_NORMAL
