- en: Function Interfaces in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/function-interfaces-in-python-4846ede71cd9?source=collection_archive---------4-----------------------#2024-03-19](https://towardsdatascience.com/function-interfaces-in-python-4846ede71cd9?source=collection_archive---------4-----------------------#2024-03-19)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PYTHON PROGRAMMING
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Function interfaces in Python can be implemented using type hints and protocols.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@nyggus?source=post_page---byline--4846ede71cd9--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page---byline--4846ede71cd9--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--4846ede71cd9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--4846ede71cd9--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page---byline--4846ede71cd9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--4846ede71cd9--------------------------------)
    ·18 min read·Mar 19, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ad64319b4ec547bf3013a6c0a4185166.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Rubaitul Azad](https://unsplash.com/@rubaitulazad?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: While Python doesn’t offer interfaces in the sense commonly known from other
    programming languages, it does offer similar functionalities. Traditional ones
    are [abstract base classes](https://docs.python.org/3/library/abc.html) (ABCs),
    available via the `abc` module. Later on, [type hints](https://docs.python.org/3/library/typing.html)
    and [typing protocols](https://docs.python.org/3/library/typing.html#typing.Protocol)
    (`typing.Protocol`) were added.
  prefs: []
  type: TYPE_NORMAL
- en: Abstract base classes (ABCs) and typing protocols serve as Python’s mechanisms
    for defining expected structures and behaviors of classes, similar to interfaces
    in other programming languages. Although Python itself doesn’t formally use the
    term “interface” to describe this functionality, the concept is closely in line
    of what Python “protocols” offer. In fact, the term “protocol” had been used in
    Python to describe interfaces well before `typing.Protocol` was added to the typing
    module. Therefore, Python’s dynamic nature allows for the creation of dynamic
    interfaces, while type hints and typing protocols facilitate the specification
    of interfaces from a static-checking perspective. We will discuss this in this
    article.
  prefs: []
  type: TYPE_NORMAL
- en: 'Abstract base classes and typing protocols are typically considered in the
    context of creating custom classes: you can create an abstract base class or a…'
  prefs: []
  type: TYPE_NORMAL
