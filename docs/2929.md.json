["```py\nimport numpy as np\n\n# Matrices to be multiplied\nA = [\n    [ 1, 0, 2],\n    [-2, 1, 1]\n]\n\nB = [\n    [ 0, 3],\n    [-3, 1],\n    [-2, 2]\n]\n\n# Convert to numpy array\nA = np.array(A)\nB = np.array(B)\n\n# Multiply A by B (if possible)\ntry:\n    C = A @ B\n    print(f'A B = \\n{C}\\n')\nexcept:\n    print(\"\"\"ValueError:\nThe number of rows in matrix A does not match \nthe number of columns in matrix B\n\"\"\")\n\n#  and in the reverse order, B by A (if possible)\ntry:\n    D = B @ A\n    print(f'B A =\\n{D}')\nexcept:\n    print(\"\"\"ValueError:\nThe number of rows in matrix B does not match \nthe number of columns in matrix A\n\"\"\")\n```", "```py\nA B = \n[[-4  7]\n [-5 -3]]\n\nB A =\n[[-6  3  3]\n [-5  1 -5]\n [-6  2 -2]]\n```", "```py\nimport numpy as np\n\n# Transformation matrix\nA = np.array([\n    [1, -1],\n    [1,  1]\n])\n\n# Points (vectors) to be transformed using matrix A\npoints = [\n    np.array([1, 1/2]),\n    np.array([-1/4, 5/4])\n]\n\n# Print out the transformed points (vectors)\nfor i, x in enumerate(points):\n    y = A @ x\n    print(f'y_{i} = {y}')\n```", "```py\ny_0 = [0.5 1.5]\ny_1 = [-1.5  1\\. ]\n```", "```py\nimport numpy as np\n\nA = np.array([\n    [1, -1],\n    [1 , 1]\n    ])\n\nprint(f'A transposed:\\n{A.T}')\n```", "```py\nA transposed:\n[[ 1  1]\n [-1  1]]\n```", "```py\nimport numpy as np\n\nA = np.array([\n    [1, -1],\n    [1 , 1]\n    ])\n\nprint(f'Inverse of A:\\n{np.linalg.inv(A)}')\n```", "```py\nInverse of A:\n[[ 0.5  0.5]\n [-0.5  0.5]]\n```", "```py\nimport numpy as np\n\nA = np.array([\n    [-1/2, 1/4],\n    [2, 1/2]\n    ])\n\nprint(f'det(A) = {np.linalg.det(A)}')\n```", "```py\ndet(A) = -0.75\n```", "```py\nimport numpy as np\n\n# Tall matrix\nB = [\n    [2, -3],\n    [1 , 0],\n    [3, -3]\n]\n\n# Convert to numpy array\nB = np.array(B)\n\n# A column vector from a lower-dimensional space\nx = np.array([-3,1]).reshape(2,-1)\n\n# Calculate its corresponding vector in a higher-dimensional space\ny = B @ x\n\nreconstructed_x = np.linalg.inv(B.T @ B) @ B.T @ y\n\nprint(reconstructed_x)\n```", "```py\n[[-3.]\n [ 1.]]\n```"]