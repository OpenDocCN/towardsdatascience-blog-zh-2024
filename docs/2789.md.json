["```py\n$ pip install networkx\n```", "```py\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\n# Create a simple graph\nG = nx.Graph()\n\n# Add nodes with attributes (e.g., 'label' and 'age')\nG.add_node(1, label=\"A\", age=25)\nG.add_node(2, label=\"B\", age=30)\nG.add_node(3, label=\"C\", age=22)\nG.add_node(4, label=\"D\", age=28)\n\n# Add weighted edges (node1, node2, weight)\nG.add_edge(1, 2, weight=4)\nG.add_edge(1, 3, weight=3)\nG.add_edge(2, 4, weight=5)\n\n# Retrieve and print node attributes\nnode_attributes = nx.get_node_attributes(G, 'age')  # Get 'age' attribute for all nodes\nprint(\"Node Attributes (Age):\", node_attributes)\n\n# Retrieve and print edge attributes\nedge_weights = nx.get_edge_attributes(G, 'weight')  # Get 'weight' attribute for all edges\nprint(\"Edge Attributes (Weight):\", edge_weights)\n\n# Draw the graph with node and edge attributes\npos = nx.spring_layout(G)  # Layout for node positions\nnode_labels = nx.get_node_attributes(G, 'label')  # Get node labels for visualization\nedge_labels = nx.get_edge_attributes(G, 'weight')  # Get edge weights for visualization\n\nplt.figure(figsize=(6, 6))\nnx.draw(G, pos, with_labels=True, node_color='skyblue', font_size=15, font_weight='bold', node_size=500)\n\n# Draw the edge weights and node labels\nnx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)\n\nplt.title(\"NetworkX Graph with Node and Edge Attributes\")\nplt.show()\n```", "```py\n# Load the  Karate Club\nG = nx.karate_club_graph()\n\n# Draw the graph\nplt.figure(figsize=(8, 8))\npos = nx.spring_layout(G)  # Layout for nodes -> treats nodes as repelling objects\nnx.draw(G, pos, with_labels=True, node_color='skyblue', font_size=12, font_weight='bold', node_size=500)\nplt.title(\"Zachary's Karate Club Network\")\nplt.show()\n```", "```py\n# looping over nodes\nfor node in G.nodes():\n    print(f\"Node: {node}, Node Attributes: {G.nodes[node]}\")\n```", "```py\nNode: 0, Node Attributes: {'club': 'Mr. Hi'}\nNode: 1, Node Attributes: {'club': 'Mr. Hi'}\nNode: 2, Node Attributes: {'club': 'Mr. Hi'}\nNode: 3, Node Attributes: {'club': 'Mr. Hi'}\nNode: 4, Node Attributes: {'club': 'Mr. Hi'}\nNode: 5, Node Attributes: {'club': 'Mr. Hi'}\nNode: 6, Node Attributes: {'club': 'Mr. Hi'}\nNode: 7, Node Attributes: {'club': 'Mr. Hi'}\nNode: 8, Node Attributes: {'club': 'Mr. Hi'}\nNode: 9, Node Attributes: {'club': 'Officer'}\nNode: 10, Node Attributes: {'club': 'Mr. Hi'}\nNode: 11, Node Attributes: {'club': 'Mr. Hi'}\nNode: 12, Node Attributes: {'club': 'Mr. Hi'}\nNode: 13, Node Attributes: {'club': 'Mr. Hi'}\nNode: 14, Node Attributes: {'club': 'Officer'}\nNode: 15, Node Attributes: {'club': 'Officer'}\nNode: 16, Node Attributes: {'club': 'Mr. Hi'}\nNode: 17, Node Attributes: {'club': 'Mr. Hi'}\nNode: 18, Node Attributes: {'club': 'Officer'}\nNode: 19, Node Attributes: {'club': 'Mr. Hi'}\nNode: 20, Node Attributes: {'club': 'Officer'}\nNode: 21, Node Attributes: {'club': 'Mr. Hi'}\nNode: 22, Node Attributes: {'club': 'Officer'}\nNode: 23, Node Attributes: {'club': 'Officer'}\nNode: 24, Node Attributes: {'club': 'Officer'}\nNode: 25, Node Attributes: {'club': 'Officer'}\nNode: 26, Node Attributes: {'club': 'Officer'}\nNode: 27, Node Attributes: {'club': 'Officer'}\nNode: 28, Node Attributes: {'club': 'Officer'}\nNode: 29, Node Attributes: {'club': 'Officer'}\nNode: 30, Node Attributes: {'club': 'Officer'}\nNode: 31, Node Attributes: {'club': 'Officer'}\nNode: 32, Node Attributes: {'club': 'Officer'}\nNode: 33, Node Attributes: {'club': 'Officer'}\n```", "```py\n# Load the Karate Club \nG: nx.Graph = nx.karate_club_graph()\n\n# Get the node labels\nlabels = nx.get_node_attributes(G, 'club')\n\n# Map community labels to colors\ncolor_map = []\nfor node in G.nodes():\n    if labels[node] == 'Mr. Hi':\n        # Assign blue color for 'Mr. Hi'\n        color_map.append('blue')  \n    else:\n        # Assign red color for 'Officer'\n        color_map.append('red')  \n\n# Visualize the graph\nplt.figure(figsize=(8, 8))\npos = nx.spring_layout(G)  \n\nnx.draw(G, pos, with_labels=True, node_color=color_map, font_size=12, font_weight='bold', node_size=500, cmap=plt.cm.rainbow)\nplt.title(\"Zachary's Karate Club Network with Ground Truth Communities\")\nplt.show()\n```", "```py\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\n# Load the Karate Club \nG = nx.karate_club_graph()\n\n# Compute centrality measures\ndegree_centrality = nx.degree_centrality(G)\nbetweenness_centrality = nx.betweenness_centrality(G)\ncloseness_centrality = nx.closeness_centrality(G)\n\n# top 5 nodes by centrality for each measure\ntop_degree_nodes = sorted(degree_centrality, key=degree_centrality.get, reverse=True)[:5]\ntop_betweenness_nodes = sorted(betweenness_centrality, key=betweenness_centrality.get, reverse=True)[:5]\ntop_closeness_nodes = sorted(closeness_centrality, key=closeness_centrality.get, reverse=True)[:5]\n\n# top 5 nodes for each centrality measure\nprint(\"Top 5 nodes by Degree Centrality:\", top_degree_nodes)\nprint(\"Top 5 nodes by Betweenness Centrality:\", top_betweenness_nodes)\nprint(\"Top 5 nodes by Closeness Centrality:\", top_closeness_nodes)\n\n# top 5 nodes for Degree Centrality\nplt.figure(figsize=(8, 8))\npos = nx.spring_layout(G)  # Positioning of nodes\nnode_color = ['red' if node in top_degree_nodes else 'skyblue' for node in G.nodes()]\n\n# draw top 5 nodes by degree centrality\nnx.draw(G, pos, with_labels=True, node_color=node_color, font_size=15, font_weight='bold', node_size=500)\nplt.title(\"Karate Club Network with Top 5 Degree Central Nodes\")\nplt.show()\n```", "```py\nTop 5 nodes by Degree Centrality: [33, 0, 32, 2, 1]\nTop 5 nodes by Betweenness Centrality: [0, 33, 32, 2, 31]\nTop 5 nodes by Closeness Centrality: [0, 2, 33, 31, 8]\n```", "```py\nfrom networkx.algorithms.community import girvan_newman\n\n# Load the Karate Club graph\nG = nx.karate_club_graph()\n\n# Apply Girvan-Newman community detection\ncomp = girvan_newman(G)\nfirst_level_communities = next(comp)\n\n# Visualize the first level of communities\npos = nx.spring_layout(G)\nplt.figure(figsize=(8, 8))\n\n# Color nodes by their community\nnode_colors = ['skyblue' if node in first_level_communities[0] else 'orange' for node in G.nodes()]\nnx.draw(G, pos, with_labels=True, node_color=node_colors, font_size=12, node_size=500)\n\nplt.title(\"Karate Club Network with Girvan-Newman Communities\")\nplt.show()\n\nprint(\"Detected Communities:\", first_level_communities)\n```", "```py\n print(\"Detected Communities:\", first_level_communities)\n# Print the actual communities (ground truth)\nprint(\"\\nActual Communities (Ground Truth):\")\nmr_hi_nodes = [node for node, label in labels.items() if label == 'Mr. Hi']\nofficer_nodes = [node for node, label in labels.items() if label == 'Officer']\n\nprint(f\"Mr. Hi's Community: {mr_hi_nodes}\")\nprint(f\"Officer's Community: {officer_nodes}\")\n```", "```py\nDetected Communities: (\n{0, 1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 17, 19, 21}, \n{2, 8, 9, 14, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33}\n)\n\nActual Communities (Ground Truth):\nMr. Hi's Community: [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 19, 21]\nOfficer's Community: [9, 14, 15, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]\n```", "```py\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\n# Load the Karate Club graph\nG = nx.karate_club_graph()\n\n# Find all cliques in the Karate Club network\ncliques = list(nx.find_cliques(G))\n\n# Find the largest clique (the one with the most nodes)\nlargest_clique = max(cliques, key=len)\n\n# Print the largest clique\nprint(\"Largest Clique:\", largest_clique)\n\n# Visualize the graph with the largest clique highlighted\nplt.figure(figsize=(8, 8))\npos = nx.spring_layout(G)  # Layout for node positions\nnx.draw(G, pos, with_labels=True, node_color='skyblue', font_size=12, node_size=500)\n\n# Highlight the nodes in the largest clique\nnx.draw_networkx_nodes(G, pos, nodelist=largest_clique, node_color='orange', node_size=500)\n\nplt.title(\"Karate Club Network with Largest Clique Highlighted\")\nplt.show()\n```", "```py\nimport pandas as pd\nimport networkx as nx\nimport matplotlib.pyplot as plt\n\n# Simulate loading a CSV file (real example would load an actual CSV file)\n# Define a more extensive set of stations and travel times between them\ndata = {\n    'station_id': ['A', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'E', 'E', 'F', 'F', 'G', 'G', 'H'],\n    'connected_station': ['B', 'C', 'A', 'C', 'A', 'D', 'C', 'E', 'B', 'F', 'D', 'G', 'E', 'H', 'F'],\n    'time': [10, 20, 10, 15, 20, 10, 5, 15, 10, 25, 10, 5, 15, 10, 30]  # Travel times in minutes\n}\n\n# Create a DataFrame\ndf = pd.DataFrame(data)\n\n# Create a graph from the DataFrame\nG = nx.Graph()\n\n# Add edges to the graph (station connections with weights as travel times)\nfor index, row in df.iterrows():\n    G.add_edge(row['station_id'], row['connected_station'], weight=row['time'])\n\n# Draw the graph\nplt.figure(figsize=(8, 8))\npos = nx.spring_layout(G)  # Layout for node positions\nnx.draw(G, pos, with_labels=True, node_size=500, node_color='skyblue', font_size=12, font_weight='bold')\n\n# Draw edge weights (travel times)\nedge_labels = nx.get_edge_attributes(G, 'weight')\nnx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)\n\nplt.title(\"Expanded Transportation Network with Travel Times\")\nplt.show()\n```", "```py\n# Compute the shortest path using Dijkstra's algorithm (considering the travel time as weight)\nsource = 'A'\ntarget = 'H'\n\nshortest_path = nx.shortest_path(G, source=source, target=target, weight='weight')\npath_length = nx.shortest_path_length(G, source=source, target=target, weight='weight')\n\n# Print the shortest path and its length\nprint(f\"Shortest path from {source} to {target}: {shortest_path}\")\nprint(f\"Total travel time from {source} to {target}: {path_length} minutes\")\n\n# Visualize the shortest path on the graph\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, with_labels=True, node_size=500, node_color='skyblue', font_size=12, font_weight='bold')\n\n# Highlight the shortest path in red\nedges_in_path = [(shortest_path[i], shortest_path[i + 1]) for i in range(len(shortest_path) - 1)]\nnx.draw_networkx_edges(G, pos, edgelist=edges_in_path, edge_color='red', width=2)\n\n# Draw edge weights (travel times)\nnx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)\n\nplt.title(f\"Shortest Path from {source} to {target} with Travel Time {path_length} minutes\")\nplt.show()\n```", "```py\nShortest path from A to H: ['A', 'B', 'E', 'G', 'H']\nTotal travel time from A to H: 45 minutes\n```"]