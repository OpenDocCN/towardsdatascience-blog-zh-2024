- en: Denoising Radar Satellite Images with Python Has Never Been So Easy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/denoising-radar-satellite-images-with-python-has-never-been-so-easy-f445241002a5?source=collection_archive---------5-----------------------#2024-04-23](https://towardsdatascience.com/denoising-radar-satellite-images-with-python-has-never-been-so-easy-f445241002a5?source=collection_archive---------5-----------------------#2024-04-23)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Presentation of the latest release of deepdespeckling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@brash6?source=post_page---byline--f445241002a5--------------------------------)[![Hadrien
    Mariaccia](../Images/7417df68fbdaaeb0846feea7dbee1966.png)](https://medium.com/@brash6?source=post_page---byline--f445241002a5--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f445241002a5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f445241002a5--------------------------------)
    [Hadrien Mariaccia](https://medium.com/@brash6?source=post_page---byline--f445241002a5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f445241002a5--------------------------------)
    ·8 min read·Apr 23, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/74c66f5f0dd45fc2b38e514fc9da75f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Optical and radar image of an agricultural area near Nîmes, France
  prefs: []
  type: TYPE_NORMAL
- en: Synthetic aperture radar (SAR) images are widely use in a large variety of sectors
    (aerospace, military, meteorology, etc.). The problem is this kind of images **suffer
    from noise** in their raw format. While these images are also usually heavy files,
    the task of denoising it efficiently appears to be both challenging from a scientific
    perspective and very useful in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: In this [Towards Data Science article](/denoising-radar-satellite-images-using-deep-learning-in-python-946daad31022),
    we presented [**deepdespeckling**](https://github.com/hi-paris/deepdespeckling),
    an open-source python package enabling to despeckle synthetic aperture radar (SAR)
    images using a **novel deep learning based method**.
  prefs: []
  type: TYPE_NORMAL
- en: We are happy to announce that we have released a **new version of** **deepdespeckling,**
    enabling to use both [MERLIN](https://arxiv.org/pdf/2110.13148.pdf) and [SAR2SAR](https://arxiv.org/pdf/2006.15037.pdf)
    methods for despeckling radar satellite images.
  prefs: []
  type: TYPE_NORMAL
- en: A quick reminder on satellite images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are **two** big categories of satellite images :'
  prefs: []
  type: TYPE_NORMAL
- en: '**Optical images :** the ones we are used to see when we watch a weather forecast
    for example. These images are taken by optical sensors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While these images generally provide a high level of detail, they encounter
    at least **two significant challenges** in capturing Earth’s intricacies: the
    limitations posed by **nighttime conditions** and **adverse weather**.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Radar images :** while optical systems rely on the sunlight (the sensor is
    passive), radars send an electromagnetic wave and measure the component backscattered
    by the objects on the ground (the sensor is active). radar sensors can acquire
    data at any time of the day and with any meteorological conditions, as the wavelength
    of the transmitted wave allows it to penetrate clouds. They however encounter
    an intrinsic issue : **speckle noise**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is speckle noise ?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Speckle** is a granular interference due to bouncing properties of emitted
    radio waves that degrades the quality of images and therefore their interpretability
    with a human eye.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/641150276bb02312e2e20f126a4158c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of an image respectively without and with speckle noise
  prefs: []
  type: TYPE_NORMAL
- en: How to get rid of it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Several methods exist, but deep learning has brought significant improvements
    for this task. [**Emanuele Dalsasso**](https://emanueledalsasso.github.io/)**,
    Loïc Denis and Florence Tupin** developed two deep learning based methods for
    despeckling SAR images :'
  prefs: []
  type: TYPE_NORMAL
- en: '[MERLIN](https://arxiv.org/pdf/2110.13148.pdf) (coMplex sElf-supeRvised despeckLINg)
    : a self-supervised strategy based on the separation of the real and imaginary
    parts of single-look complex SAR images that we presented in the previous [Towards
    Data Science article](/denoising-radar-satellite-images-using-deep-learning-in-python-946daad31022)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SAR2SAR](https://arxiv.org/pdf/2006.15037.pdf) : Multi-temporal time series
    are leveraged in order to train neural network to restore SAR images by only looking
    at noisy acquisitions. **This method is part of the new features of the latest
    release of** [**deepdespeckling**](https://github.com/hi-paris/deepdespeckling)**.
    Hence, we will focus on this method in this article**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SAR2SAR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as MERLIN, SAR2SAR also draws inspiration from the noise2noise algorithm,
    which showed that it is possible to train a model to denoise without looking at
    noise-free examples. This feature is of particular importance in SAR despeckling,
    as speckle-free acquisition does not exist.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/789609d9fa99f86557d1a37a7c1fe09d.png)'
  prefs: []
  type: TYPE_IMG
- en: SAR2SAR builds on the assumption that two images acquired over the same area
    at different times are corrupted by **two uncorrelated speckle realizations**,
    matching with the hypothesis allowing the application of the noise2noise principle.
    This allows to develop a model to remove speckle from Ground Range Detected (GRD)
    SAR images, which are only available in amplitude (the phase is suppressed during
    the detection step) and thus MERLIN cannot be used on such data. Temporal acquisitions
    are leveraged to generate a dataset containing independent speckle realisations
    of the same scene (a change compensations strategy relying on a pre-trained model
    is used to ensure that the temporal acquisitions only differ for the speckle component).
  prefs: []
  type: TYPE_NORMAL
- en: Once the model is trained, during inference SAR2SAR requires a single GRD image
    and can be effectively deployed to suppress speckle from Sentinel-1 GRD SAR images.
  prefs: []
  type: TYPE_NORMAL
- en: SAR images acquisition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Different acquisition modes exist depending on the compromise between the illuminated
    scene (the swath) and and the image resolution. Each acquisition mode thus produces
    images having a different resolution, thus the appearance of objects is specific
    to each acquisition mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this reason, a model specific for each modality must be developed. Given
    the simplicity of application of MERLIN, which requires single SAR images, datasets
    for each specific modality can be seamlessly collected. We have trained MERLIN
    on the following images:'
  prefs: []
  type: TYPE_NORMAL
- en: TerraSAR-X images acquired in Stripmap mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TerraSAR-X images acquired in HighResolution SpotLight mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sentinel-1 images acquired in TOPS mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deepdespeckling package usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Package installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before installing deepdespeckling, make sure to install gdal dependancies,
    it can be done using conda with the following command :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can install the package this way :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Despeckle one image with MERLIN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To despeckle SAR images using MERLIN, images need to be in .cos or .npy format.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Two parameters have to be set:'
  prefs: []
  type: TYPE_NORMAL
- en: '`model_name` *:* `"spotlight"` for SAR images retrieved with spotlight mode,
    `"stripmap"` for SAR images retrieved with stripmap mode or `"Sentinel-TOPS"`
    for images retrieved with TOPS mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`symetrise`*: d*uring the preprocessing steps of the noisy image for MERLIN,
    the real and the imaginary parts are “**symetrised**” (to match the theoretical
    assumptions of MERLIN). To skip this step, the `symetrise` parameter can be set
    to `False`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This snippet of code will store the despeckled image in a **numpy array** in
    the `denoised_image`variable.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7aed8495ae99a2995eacd13a728ca195.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of a full size noisy SAR image
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/df6544db6a81595f6124872d8094f2e1.png)'
  prefs: []
  type: TYPE_IMG
- en: The same image denoised using MERLIN
  prefs: []
  type: TYPE_NORMAL
- en: Despeckle one image with SAR2SAR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To despeckle SAR images using SAR2SAR, images need to be in .tiff or .npy format.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8d34d7f9f6e2bd548031a2f6a4be6fbc.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of result using SAR2SAR (displayed after a conversion to png)
  prefs: []
  type: TYPE_NORMAL
- en: Despeckle a set of images using MERLIN or SAR2SAR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For both MERLIN and SAR2SAR, you can choose between **3 different functions**
    to despeckle a set of SAR images contained in a folder :'
  prefs: []
  type: TYPE_NORMAL
- en: '`despeckle` to despeckle full size images'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`despeckle_from_coordinates` to despeckle a sub-part of the images defined
    by some coordinates'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`despeckle_from_crop` to despeckle a sub-part of the images defined using a
    crop tool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Despeckle fullsize images**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `despeckle` function will create several folders in the `destination_directory`
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '`processed_images:` the *npy* files (numpy array conversion) of the raw images
    stored in the folder defined in `image_path.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`noisy:`the preprocessed noisy images in both *.npy* and *.png* formats'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`denoised:` the denoised images in both *.npy* and *.png* formats'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Despeckle parts of images using custom coordinates**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The`despeckle_from_coordinates` function will create the same folders as the`despeckle`
    function, with images croped with the specified coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eb9ded1de8eb64f4fd9ad9ea3ec3b8bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of image denoised using custom coordinates (displayed after a conversion
    to png)
  prefs: []
  type: TYPE_NORMAL
- en: '**Despeckle parts of images using a crop tool**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The`despeckle_from_crop` function will first launch the crop tool : just select
    an area and press “q” when you are satisfied with the crop'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/d4a013a93efe6ded94edd91bb94c65ee.png)'
  prefs: []
  type: TYPE_IMG
- en: the cropping tool in action
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b0d7d2f8f8c3def0ae533fe741767c40.png)'
  prefs: []
  type: TYPE_IMG
- en: Results of the denoising using the crop tool
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, the `despeckle_from_crop` function will create :'
  prefs: []
  type: TYPE_NORMAL
- en: The same folders as the`despeckle` function, with images cropped using the crop
    tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cropping_coordinates.txt` file containing the coordinates of the selected
    crop'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Going further
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now you know to use deepdespeckling, to understand further more how it works,
    you can check [the github repository](https://github.com/hi-paris/deepdespeckling).
    We also provide a sphinx documentation [available here](https://hi-paris.github.io/deepdespeckling/).
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to contact me for any questions and feedback !
  prefs: []
  type: TYPE_NORMAL
- en: Authors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Hadrien Mariaccia](https://www.linkedin.com/in/hadrien-mar/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Emanuele Dalsasso](https://emanueledalsasso.github.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unless otherwise noted, all images are by the authors
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Contact**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Don’t hesitate to contact me if you have any questions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To know more about Hi! PARIS and its Engineering Team:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Hi! PARIS](https://www.hi-paris.fr/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Hi! PARIS Engineering Team](https://engineeringteam.hi-paris.fr/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
