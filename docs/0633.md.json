["```py\nimport pandas as pd\nimport numpy as np\n\n# generate example data\nnum_countries = 3\nyears = range(2000, 2005)\nnum_years = len(years)\n\ndata = {\n    'country_id': [c for c in range(1, num_countries + 1) for _ in years],\n    'year': [year for _ in range(num_countries) for year in years],\n    'y': np.random.normal(0, 1, num_countries * num_years),\n    'x1': np.random.normal(0, 1, num_countries * num_years),\n    'x2': np.random.normal(0, 1, num_countries * num_years)\n}\n\npanel_data = pd.DataFrame(data)\n\n# display the generated panel data\ndisplay(panel_data)\n```", "```py\n!pip install panelsplit\nfrom panelsplit import PanelSplit\n\npanel_split = PanelSplit(periods = panel_data.year, n_splits = 3, gap = 0, test_size=1, plot=True)\n```", "```py\nsplits = panel_split.split()\n```", "```py\nfrom sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = {'alpha':[.1, .5]} # define the hyper-parameter grid space\n\n# define the gridsearch and call fit, specifying panel_split for the cv argument\ngridsearch = GridSearchCV(estimator = Ridge(), param_grid=param_grid, cv=panel_split)\ngridsearch.fit(X = panel_data[['x1','x2']], y = panel_data['y'])\n\nprint(gridsearch.best_params_)\n```", "```py\npredictions, models = panel_split.cross_val_fit_predict(estimator = Ridge(gridsearch.best_params_), \n                                                   X = panel_data[['x1','x2']], \n                                                   y = panel_data['y'])\n```", "```py\npredictions_df = panel_split.gen_test_labels(panel_data[['country_id','year']])\npredictions_df['y_pred'] = y_pred\ndisplay(predictions_df)\n```"]