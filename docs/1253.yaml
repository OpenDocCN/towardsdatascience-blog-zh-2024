- en: 'Keras 3.0 Tutorial: End-to-End Deep Learning Project Guide'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/keras-3-0-tutorial-end-to-end-deep-learning-project-guide-3552187e3ff5?source=collection_archive---------1-----------------------#2024-05-18](https://towardsdatascience.com/keras-3-0-tutorial-end-to-end-deep-learning-project-guide-3552187e3ff5?source=collection_archive---------1-----------------------#2024-05-18)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Implement an encoder-decoder recurrent network from scratch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://qtalen.medium.com/?source=post_page---byline--3552187e3ff5--------------------------------)[![Peng
    Qian](../Images/9ce9aeb381ec6b017c1ee5d4714937e2.png)](https://qtalen.medium.com/?source=post_page---byline--3552187e3ff5--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--3552187e3ff5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--3552187e3ff5--------------------------------)
    [Peng Qian](https://qtalen.medium.com/?source=post_page---byline--3552187e3ff5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--3552187e3ff5--------------------------------)
    ·12 min read·May 18, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fe4279573dca9dad3407a1ca9b80136c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Keras 3.0 Tutorial: End-to-End Deep Learning Project Guide. Image by Author'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Even though I started using Pytorch a while ago, I still miss the concise code
    style of Keras and the good old days when you could implement a neural network
    model in just a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: So, I was thrilled when Keras announced last November that in addition to TensorFlow,
    it now also supports Pytorch and Jax as backends!
  prefs: []
  type: TYPE_NORMAL
- en: 'However, things weren’t perfect: since Keras 3.0 was released not long ago,
    the related tutorials and documentation hadn’t caught up, and I encountered some
    troubles during the code migration.'
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, after some effort, I can now smoothly use version 3.0 for various end-to-end
    model developments.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I’ll share some practical experiences with Keras 3.0 to help
    you avoid some detours. I’ll use a typical encoder-decoder recurrent neural network
    as an example to explain how to complete an end-to-end project from scratch using
    the subclassing API of Keras 3.0, and discuss details to consider when using Pytorch
    as the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Framework Installation and Environment Setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
