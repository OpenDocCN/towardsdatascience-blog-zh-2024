["```py\nfrom dataclasses import dataclass\nfrom datetime import datetime, timedelta\nfrom random import choice, gauss, randrange, seed\nfrom typing import Any, Dict\n\nimport polars as pl\n\nseed(42)\n```", "```py\nbase_time= datetime(2024, 8, 9, 0, 0, 0, 0)\n\nuser_actions_data = [\n    {\n        \"user_id\": randrange(10),\n        \"product_id\": choice([\"0001\", \"0002\", \"0003\"]),\n        \"action_type\": (\"purchase\" if gauss() > 0.6 else \"view\"),\n        \"action_dt\": base_time - timedelta(minutes=randrange(100_000)),\n    }\n    for x in range(100_000)\n]\n\nuser_actions_df = pl.DataFrame(user_actions_data)\n```", "```py\nproduct_catalog_data = {\"product_id\": [\"0001\", \"0002\", \"0003\"], \"price\": [10, 30, 70]}\nproduct_catalog_df = pl.DataFrame(product_catalog_data)\n```", "```py\nyesterday = base_time - timedelta(days=1)\nresult = (\n    user_actions_df.filter(pl.col(\"action_dt\").dt.date() == yesterday.date())\n    .join(product_catalog_df, on=\"product_id\")\n    .group_by(pl.col(\"user_id\"))\n    .agg(\n        [\n            (\n                pl.col(\"price\")\n                .filter(pl.col(\"action_type\") == \"purchase\")\n                .sum()\n            ).alias(\"total_purchase_amount\"),\n            (\n                pl.col(\"product_id\").filter(pl.col(\"action_type\") == \"purchase\").len()\n                / pl.col(\"product_id\").filter(pl.col(\"action_type\") == \"view\").len()\n            ).alias(\"purchase_to_view_ratio\"),\n        ]\n    )\n    .sort(\"user_id\")\n)\n```", "```py\n@dataclass\nclass DailyUserPurchaseReport:\n```", "```py\n@dataclass\nclass DailyUserPurchaseReport:\n\n    sources: Dict[str, pl.LazyFrame]\n    params: Dict[str, Any]\n```", "```py\n@dataclass\nclass DailyUserPurchaseReport:\n\n    sources: Dict[str, pl.LazyFrame]\n    params: Dict[str, Any]\n\n    def execute(self) -> pl.DataFrame:\n        pass\n```", "```py\n@dataclass\nclass DailyUserPurchaseReport:\n\n    sources: Dict[str, pl.LazyFrame]\n    params: Dict[str, Any]\n\n    def _filter_actions_by_date(self, frame: pl.LazyFrame) -> pl.LazyFrame:\n        pass\n\n    def _enrich_user_actions_from_product_catalog(self, frame: pl.LazyFrame) -> pl.LazyFrame:\n        pass\n\n    def _calculate_key_metrics(self, frame: pl.LazyFrame) -> pl.LazyFrame:\n        pass\n\n    def execute(self) -> pl.DataFrame:\n        pass\n```", "```py\n def execute(self) -> pl.DataFrame:\n        result: pl.DataFrame = (\n            self.sources[\"user_actions\"]\n            .pipe(self._filter_actions_by_date)\n            .pipe(self._enrich_user_actions_from_product_catalog)\n            .pipe(self._calculate_key_metrics)\n            .collect()\n        )\n        return result\n```", "```py\n@dataclass\nclass DailyUserPurchaseReport:\n    \"\"\"\n    Generates a report containing the total purchase amount and the ratio of purchased items\n    to viewed items from the previous day for each user.\n\n    Attributes:\n        sources (Dict[str, pl.LazyFrame]): A dictionary containing the data sources, including:\n            - 'user_actions': A LazyFrame containing user actions data.\n            - 'product_catalog': A LazyFrame containing product catalog data.\n        params (Dict[str, Any]): A dictionary containing parameters, including:\n            - 'report_date': The date for which the report should be generated (previous day).\n    \"\"\"\n\n    sources: Dict[str, pl.LazyFrame]\n    params: Dict[str, Any]\n\n    def _filter_actions_by_date(self, frame: pl.LazyFrame) -> pl.LazyFrame:\n        \"\"\"\n         Filters user actions data to include only records from the specified date.\n\n        Args:\n            frame (pl.LazyFrame): A LazyFrame containing user actions data.\n\n        Returns:\n            pl.LazyFrame: A LazyFrame containing user actions data filtered by the specified date.\n        \"\"\"\n        return frame.filter(pl.col(\"action_dt\").dt.date() == self.params[\"report_date\"])\n\n    def _enrich_user_actions_from_product_catalog(\n        self, frame: pl.LazyFrame\n    ) -> pl.LazyFrame:\n        \"\"\"\n        Joins the user actions data with the product catalog to include product prices.\n\n        Args:\n            frame (pl.LazyFrame): A LazyFrame containing user actions data.\n\n        Returns:\n            pl.LazyFrame: A LazyFrame containing user actions data enriched with product prices.\n        \"\"\"\n        return frame.join(self.sources[\"product_catalog\"], on=\"product_id\")\n\n    def _calculate_key_metrics(self, frame: pl.LazyFrame) -> pl.LazyFrame:\n        \"\"\"\n        Calculates the total purchase amount and the ratio of purchased items to viewed items.\n\n        Args:\n            frame (pl.LazyFrame): A LazyFrame containing enriched user actions data.\n\n        Returns:\n            pl.LazyFrame: A LazyFrame containing the total purchase amount and purchase-to-view ratio for each user.\n\n        \"\"\"\n        return (\n            frame.group_by(pl.col(\"user_id\"))\n            .agg(\n                [\n                    (\n                        pl.col(\"price\")\n                        .filter(pl.col(\"action_type\") == \"purchase\")\n                        .sum()\n                    ).alias(\"total_purchase_amount\"),\n                    (\n                        pl.col(\"product_id\")\n                        .filter(pl.col(\"action_type\") == \"purchase\")\n                        .len()\n                        / pl.col(\"product_id\").filter(pl.col(\"action_type\") == \"view\").len()\n                    ).alias(\"purchase_to_view_ratio\"),\n                ]\n            )\n            .sort(\"user_id\")\n        )\n\n    def execute(self) -> pl.DataFrame:\n        \"\"\"\n        Executes the report generation process.\n\n        This method performs the following steps:\n            1\\. Filters user actions data to include only records from the previous day.\n            2\\. Joins the filtered user actions data with the product catalog.\n            3\\. Calculates the total purchase amount and purchase-to-view ratio for each user.\n            4\\. Returns the final report as a DataFrame.\n\n        Returns:\n            pl.DataFrame: A DataFrame containing the total purchase amount and purchase-to-view ratio for each user.\n        \"\"\"\n        result: pl.DataFrame = (\n            self.sources[\"user_actions\"]\n            .pipe(self._filter_actions_by_date)\n            .pipe(self._enrich_user_actions_from_product_catalog)\n            .pipe(self._calculate_key_metrics)\n            .collect()\n        )\n        return result\n```", "```py\n# prepare sources\nuser_actions: pl.LazyFrame = user_actions_df.lazy()\nproduct_catalog: pl.LazyFrame = product_catalog_df.lazy()\n\n# get report date\nyesterday: datetime = base_time - timedelta(days=1)\n\n# report calculation\ndf: pl.DataFrame = DailyUserPurchaseReport(\n    sources={\"user_actions\": user_actions, \"product_catalog\": product_catalog},\n    params={\"report_date\": yesterday},\n).execute()\n```", "```py\n┌─────────┬───────────────────────┬────────────────────────┐\n│ user_id ┆ total_purchase_amount ┆ purchase_to_view_ratio │\n│ ---     ┆ ---                   ┆ ---                    │\n│ i64     ┆ i64                   ┆ f64                    │\n╞═════════╪═══════════════════════╪════════════════════════╡\n│ 0       ┆ 1880                  ┆ 0.422018               │\n│ 1       ┆ 1040                  ┆ 0.299065               │\n│ 2       ┆ 2220                  ┆ 0.541667               │\n│ 3       ┆ 1480                  ┆ 0.436782               │\n│ 4       ┆ 1240                  ┆ 0.264463               │\n│ 5       ┆ 930                   ┆ 0.254717               │\n│ 6       ┆ 1080                  ┆ 0.306122               │\n│ 7       ┆ 1510                  ┆ 0.345133               │\n│ 8       ┆ 2050                  ┆ 0.536842               │\n│ 9       ┆ 1320                  ┆ 0.414414               │\n└─────────┴───────────────────────┴────────────────────────┘\n```"]