- en: Setting A Dockerized Python Environment — The Elegant Way
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Docker 化的 Python 环境 — 优雅的方式
- en: 原文：[https://towardsdatascience.com/setting-a-dockerized-python-environment-the-elegant-way-f716ef85571d?source=collection_archive---------1-----------------------#2024-04-02](https://towardsdatascience.com/setting-a-dockerized-python-environment-the-elegant-way-f716ef85571d?source=collection_archive---------1-----------------------#2024-04-02)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/setting-a-dockerized-python-environment-the-elegant-way-f716ef85571d?source=collection_archive---------1-----------------------#2024-04-02](https://towardsdatascience.com/setting-a-dockerized-python-environment-the-elegant-way-f716ef85571d?source=collection_archive---------1-----------------------#2024-04-02)
- en: This post provides a step-by-step guide for setting up a Python dockerized development
    environment with VScode and the Dev Containers extension.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本文提供了一个逐步指南，介绍如何使用 VScode 和 Dev Containers 扩展设置一个 Python Docker 化开发环境。
- en: '[](https://medium.com/@rami.krispin?source=post_page---byline--f716ef85571d--------------------------------)[![Rami
    Krispin](../Images/8af28c282d42a2a27c28aa8af4c8d482.png)](https://medium.com/@rami.krispin?source=post_page---byline--f716ef85571d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f716ef85571d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f716ef85571d--------------------------------)
    [Rami Krispin](https://medium.com/@rami.krispin?source=post_page---byline--f716ef85571d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@rami.krispin?source=post_page---byline--f716ef85571d--------------------------------)[![Rami
    Krispin](../Images/8af28c282d42a2a27c28aa8af4c8d482.png)](https://medium.com/@rami.krispin?source=post_page---byline--f716ef85571d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f716ef85571d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f716ef85571d--------------------------------)
    [Rami Krispin](https://medium.com/@rami.krispin?source=post_page---byline--f716ef85571d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f716ef85571d--------------------------------)
    ·9 min read·Apr 2, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f716ef85571d--------------------------------)
    ·阅读时间 9 分钟·2024 年 4 月 2 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: In the previous post on this topic, [Setting A Dockerized Python Environment—The
    Hard Way](https://medium.com/towards-data-science/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0),
    we saw how to set up a dockerized Python development environment via the command
    line interface (CLI). In this post, we will review a more elegant and robust approach
    for setting up a dockerized Python development environment using VScode and the
    [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)
    extension.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一篇关于此主题的文章中，[设置 Docker 化的 Python 环境 — 较为困难的方式](https://medium.com/towards-data-science/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0)，我们讲解了如何通过命令行界面（CLI）设置
    Docker 化的 Python 开发环境。在这篇文章中，我们将回顾一种更优雅且更稳健的方法，通过使用 VScode 和 [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)
    扩展来设置 Docker 化的 Python 开发环境。
- en: 'Related articles:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 相关文章：
- en: '[](/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0?source=post_page-----f716ef85571d--------------------------------)
    [## Setting A Dockerized Python Environment — The Hard Way'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0?source=post_page-----f716ef85571d--------------------------------)
    [## 设置 Docker 化的 Python 环境 — 较为困难的方式'
- en: This post will review different methods to run a dockerized Python environment
    from the command line (CLI). Am I…
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本文将回顾通过命令行（CLI）运行 Docker 化的 Python 环境的不同方法。我是否……
- en: towardsdatascience.com](/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0?source=post_page-----f716ef85571d--------------------------------)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0?source=post_page-----f716ef85571d--------------------------------)
- en: By the end of this tutorial, you will be able to set up a simple Python development
    environment with VScode and the Dev Containers extension.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本教程结束时，你将能够使用 VScode 和 Dev Containers 扩展设置一个简单的 Python 开发环境。
- en: '![](../Images/8cbb25bfdc0e8741de15e6c984e79491.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8cbb25bfdc0e8741de15e6c984e79491.png)'
- en: VScode illustration ( created by the author with Midjourney)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: VScode 插图（由作者使用 Midjourney 创建）
- en: Prerequisites
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'To follow along with this tutorial, you will need the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本教程，你需要准备以下内容：
- en: Docker Desktop (or equivalent) if you are using a macOS or Windows OS machine,
    or Docker installed if you are using a Linux OS
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你使用的是 macOS 或 Windows 操作系统，请安装 Docker Desktop（或等效工具）；如果你使用的是 Linux 操作系统，请安装
    Docker。
- en: Docker Hub account to pull the image from
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker Hub 账户，用于拉取镜像
- en: '[VScode IDE](https://code.visualstudio.com/) and the [Dev Containers](https://code.visualstudio.com/docs/devcontainers/containers)
    extension installed'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装了 [VScode IDE](https://code.visualstudio.com/) 和 [Dev Containers](https://code.visualstudio.com/docs/devcontainers/containers)
    扩展
- en: Throughout this tutorial, we will use the official Python image — `python:3.10`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用官方 Python 镜像 — `python:3.10`。
- en: 'All the code examples in this post are available here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中的所有代码示例可以在这里找到：
- en: '[](https://github.com/RamiKrispin/vscode-python-medium?source=post_page-----f716ef85571d--------------------------------)
    [## GitHub - RamiKrispin/vscode-python-medium: Supporting code for Medium Article'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/RamiKrispin/vscode-python-medium?source=post_page-----f716ef85571d--------------------------------)
    [## GitHub - RamiKrispin/vscode-python-medium: 支持 Medium 文章的代码'
- en: Supporting code for Medium Article. Contribute to RamiKrispin/vscode-python-medium
    development by creating an account…
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持 Medium 文章的代码。通过创建账户来贡献 RamiKrispin/vscode-python-medium 的开发…
- en: github.com](https://github.com/RamiKrispin/vscode-python-medium?source=post_page-----f716ef85571d--------------------------------)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/RamiKrispin/vscode-python-medium?source=post_page-----f716ef85571d--------------------------------)
- en: The Dev Containers Extension
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Dev Containers 扩展
- en: Before getting started, let’s explain what the Dev Containers extension is and
    when you should consider using it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，让我们解释一下什么是 Dev Containers 扩展，以及何时应该考虑使用它。
- en: 'In a nutshell, the VScode Dev Containers extension enables you to open an isolated
    VScode session inside a docker container seamlessly. The level of isolation includes
    the following three layers:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，VScode Dev Containers 扩展使您能够在 Docker 容器内无缝地打开一个隔离的 VScode 会话。隔离的层级包括以下三层：
- en: Environment
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境
- en: VScode settings
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VScode 设置
- en: VScode extensions
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VScode 扩展
- en: The `devcontainer.json` file defines the session settings, enabling us to set
    and define the above three layers.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`devcontainer.json` 文件定义了会话设置，使我们能够设置和定义上述三层。'
- en: 'To set and launch your project folder inside a container with the Dev Containers
    extension, you will need the following two components:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要在容器内设置并启动项目文件夹，使用 Dev Containers 扩展，您需要以下两个组件：
- en: Install the [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)
    extension
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)
    扩展
- en: On your project folder, create a folder named `.devcontainer` and set a `devcontainer.json`
    file
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您的项目文件夹中创建一个名为 `.devcontainer` 的文件夹，并设置一个 `devcontainer.json` 文件
- en: 'The below diagram describes the Dev Containers general architecture:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示描述了 Dev Containers 的总体架构：
- en: '![](../Images/fd24fddd18b426e7269fa83217b55ce0.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd24fddd18b426e7269fa83217b55ce0.png)'
- en: The Dev Containers extension architecture (credit Rami Krispin)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Dev Containers 扩展架构（致谢 Rami Krispin）
- en: Upon launch, the Dev Containers extension spins a new VScode session inside
    a container. By default, it mounts the local folder to the container, which enables
    us to keep the code persistent and sync with our local folder. You can mount additional
    folders, but this is outside the scope of this tutorial.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 启动时，Dev Containers 扩展会在容器内启动一个新的 VScode 会话。默认情况下，它会将本地文件夹挂载到容器中，这样可以保持代码的持久性，并与本地文件夹同步。您可以挂载其他文件夹，但这超出了本教程的范围。
- en: In the next section, we will see how to set up a Python environment with the
    `devcontainer.json` file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将看到如何使用 `devcontainer.json` 文件设置 Python 环境。
- en: Setting a Dockerized Python Environment
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置一个 Docker 化的 Python 环境
- en: 'Before getting started with the `devcontainer.json` settings, let’s first define
    the scope of the development environment. It should include the following features:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用 `devcontainer.json` 设置之前，让我们首先定义开发环境的范围。它应包括以下功能：
- en: Python 3.10
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.10
- en: Support Jupyter notebooks
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 Jupyter 笔记本
- en: Install required libraries — Pandas and VScode Jupyter supporting libraries
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装所需的库 — Pandas 和 VScode Jupyter 支持库
- en: Install supporting extensions — Python and Jupyter
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装支持的扩展 — Python 和 Jupyter
- en: In the following sections, we will dive into the core functionality of the `devcontainer.json`
    file. We will start with a minimalist Python environment and demonstrate how to
    customize it by adding different customization layers.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将深入探讨 `devcontainer.json` 文件的核心功能。我们将从一个最简化的 Python 环境开始，展示如何通过添加不同的自定义层来进行定制。
- en: Build vs. Image
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建与镜像
- en: 'The main requirement for launching a containerized session with the Dev Containers
    extension is to define the image settings. There are two approaches for setting
    the image:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 启动一个容器化会话的主要要求是定义镜像设置。设置镜像有两种方法：
- en: Build the image and run it during the launch time of the container with the
    `build` argument. This argument enables you to define a Dockerfile for the build
    and pass arguments to the `docker build` function. Once the build process is done,
    it will launch the session inside the container
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器启动时使用 `build` 参数构建镜像并运行。此参数使你能够为构建定义一个 Dockerfile，并将参数传递给 `docker build`
    函数。构建过程完成后，它将启动容器内部的会话
- en: Launch the session with an existing image using the `image` argument
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `image` 参数启动现有镜像的会话
- en: Depending on the use cases, each method has its own pros and cons. You should
    consider using the `image` argument when you have an image that fully meets the
    environment requirements. Likewise, a good use case for the `build` argument is
    when you have a base image but need to add minor customization settings.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 根据不同的使用场景，每种方法都有其优缺点。你应该在镜像完全满足环境需求时考虑使用 `image` 参数。同样，当你有一个基础镜像，但需要添加一些小的自定义设置时，`build`
    参数是一个很好的选择。
- en: In the next section, we will start with a simple example of launching a Python
    environment using the `image` argument to import the official Python image (`python:3.10`).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将通过一个简单的例子开始，使用 `image` 参数导入官方 Python 镜像（`python:3.10`）来启动 Python
    环境。
- en: Basic Dockerized Python Environment
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本的 Docker 化 Python 环境
- en: 'The below `devcontainer.json` file provides a simple example for setting up
    a Python environment. It uses the `image` argument to define the `python:3.10`
    image as the session environment:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 `devcontainer.json` 文件提供了一个简单的示例，用于设置 Python 环境。它使用 `image` 参数将 `python:3.10`
    镜像定义为会话环境：
- en: '`devcontainer.json`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`devcontainer.json`'
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `name` argument defines the environment name. In this case, we set it as
    **Python Development Environment**.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`name` 参数定义了环境名称。在此示例中，我们将其设置为 **Python 开发环境**。'
- en: 'Before launching the environment, please make sure:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动环境之前，请确保：
- en: Your Docker Desktop (or equivalent) is open
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的 Docker Desktop（或同等软件）已打开
- en: You are logged in to Docker Hub (or pull in advance the Python image)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已登录到 Docker Hub（或提前拉取 Python 镜像）
- en: 'The `devcontainer.json` file is set in the project folder under the `.devcontainer`
    folder:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`devcontainer.json` 文件位于项目文件夹中的 `.devcontainer` 文件夹下：'
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The code for this example is available [here](https://github.com/RamiKrispin/vscode-python-medium/tree/main/01_basic_example).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的代码可在 [此处](https://github.com/RamiKrispin/vscode-python-medium/tree/main/01_basic_example)
    获取。
- en: 'To launch a session, click the Dev Container `><` symbol on the bottom left
    and select the `Reopen in Container` option as demonstrated in the screenshot
    below:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动会话，请点击左下角的 Dev Container `><` 图标，并选择下方截图所示的 `Reopen in Container` 选项：
- en: '![](../Images/9f199cefb98a0b705fb23d9eadfcc058.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9f199cefb98a0b705fb23d9eadfcc058.png)'
- en: Launching the session inside a container with the Dev Containers extension (screenshot
    by the author)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Dev Containers 扩展启动容器内部的会话（作者截图）
- en: Note that during the first launch time of the session, the Dev Containers extension
    will look for the image that was defined by the `image` argument (in this case
    — `python:3.10`). If the image is not available locally, it will pull it from
    Docker Hub, and it might take a few minutes. Afterward, it should take a few seconds
    to launch the session.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在首次启动会话时，Dev Containers 扩展将查找由 `image` 参数定义的镜像（在此例中是 `python:3.10`）。如果镜像在本地不可用，它将从
    Docker Hub 拉取，可能需要几分钟时间。之后，启动会话通常只需几秒钟。
- en: '![](../Images/b4479a50c69ef05d66d4b3fb41943214.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b4479a50c69ef05d66d4b3fb41943214.png)'
- en: The VScode session inside a container (screenshot by the author)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 容器内的 VScode 会话（作者截图）
- en: In the above screenshot, you can see the mapping between the `devcontainer.json`
    arguments and the session settings. The session name is now available on the bottom
    right (marked in purple) and aligned with the value of the `name` argument. Likewise,
    the session is now running inside the `python:3.10` container, and you can launch
    Python from the terminal.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，你可以看到 `devcontainer.json` 参数与会话设置之间的映射。会话名称现在显示在右下角（紫色标记），并与 `name`
    参数的值对齐。同样，会话现在运行在 `python:3.10` 容器内，你可以从终端启动 Python。
- en: The Python container comes with the default Python libraries. In the following
    section, we will see how we can add more layers on top of the Python base image
    with the `build` argument.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Python 容器带有默认的 Python 库。在接下来的部分，我们将展示如何通过 `build` 参数在 Python 基础镜像上添加更多层。
- en: Customize the Python Environment with a Dockerfile
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Dockerfile 自定义 Python 环境
- en: 'Let’s now customize the above environment by modifying the `devcontainer.json`.
    We will replace the `image` argument with the`build` argument. The `build` argument
    enables us to build the image during the session launch time with a Dockerfile
    and pass arguments to the `docker build` function. We will follow the same approach
    as demonstrated in this [post](https://medium.com/towards-data-science/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0)
    to set the Python environment:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过修改 `devcontainer.json` 来定制上述环境。我们将把 `image` 参数替换为 `build` 参数。`build`
    参数使我们能够在会话启动时通过 Dockerfile 构建镜像，并向 `docker build` 函数传递参数。我们将遵循这篇[文章](https://medium.com/towards-data-science/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0)中展示的方法来设置
    Python 环境：
- en: Import the `python:3.10` as the base image
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入 `python:3.10` 作为基础镜像
- en: Set a virtual environment
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置虚拟环境
- en: Install the required libraries
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装所需的库
- en: 'We will use the following Dockerfile to set the Python environment:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用以下 Dockerfile 来设置 Python 环境：
- en: '`Dockerfile`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dockerfile`'
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We use the `FROM` argument to import the Python image, and the `ARG` and `ENV`arguments
    to set the virtual environment as an argument and environment variable. In addition,
    we use the following two helper files to set a virtual environment and install
    the required libraries:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `FROM` 参数来导入 Python 镜像，并使用 `ARG` 和 `ENV` 参数来设置虚拟环境作为参数和环境变量。此外，我们还使用以下两个辅助文件来设置虚拟环境并安装所需的库：
- en: '`requirements.txt` — a setting file with a list of required libraries. For
    this demonstration, we will install the Pandas library, version 2.0.3., and the
    Jupyter supporting libraries (ipykernel, ipywidgets, jupyter). The wheels library
    is a supporting library that handles C dependencies'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requirements.txt` — 一个设置文件，其中列出了所需的库。在本演示中，我们将安装 Pandas 库（版本 2.0.3）和 Jupyter
    支持库（ipykernel、ipywidgets、jupyter）。wheels 库是一个支持库，用于处理 C 依赖关系。'
- en: '`set_python_env.sh` — a helper bash script that sets a virtual environment
    and installs the required libraries using the `requirements.txt` file'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`set_python_env.sh` — 一个辅助的 Bash 脚本，用于设置虚拟环境并通过 `requirements.txt` 文件安装所需的库'
- en: '`requirements.txt`'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`requirements.txt`'
- en: '[PRE3]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`set_python_env.sh`'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`set_python_env.sh`'
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Last but not least, we will use the following test file to evaluate if the
    Pandas library was installed properly and print **Hello World!** message:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将使用以下测试文件来评估 Pandas 库是否正确安装并打印 **Hello World!** 消息：
- en: '`test1.py`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`test1.py`'
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s make the changes in the `devcontainer.json` file, and replace the `image`
    argument with the `build` argument:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `devcontainer.json` 文件中进行修改，将 `image` 参数替换为 `build` 参数：
- en: '`devcontainer.json`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`devcontainer.json`'
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The files for this example are available [here](https://github.com/RamiKrispin/vscode-python-medium/tree/main/02_build_example).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例的文件可以在[这里](https://github.com/RamiKrispin/vscode-python-medium/tree/main/02_build_example)找到。
- en: 'The `build` sub-arguments enable us to customize the image build by passing
    arguments to the `docker build` function. We use the following arguments to build
    the image:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`build` 子参数使我们能够通过向 `docker build` 函数传递参数来自定义镜像构建。我们使用以下参数来构建镜像：'
- en: '`dockerfile` — the path and name of the Dockerfile'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dockerfile` — Dockerfile 的路径和名称'
- en: '`context` — set the path of the local file system to enable access for files
    with the `COPY` argument during the build time. In this case, we use the current
    folder of the `devcontainer.json` file (e.g., the `.devcontainer` folder).'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context` — 设置本地文件系统的路径，以便在构建时通过 `COPY` 参数访问文件。在这种情况下，我们使用 `devcontainer.json`
    文件的当前文件夹（例如 `.devcontainer` 文件夹）。'
- en: '`args` — set and pass arguments to the container during the build process.
    We use the `PYTHON_ENV` argument to set the virtual environment and name it as
    `my_python_dev`'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args` — 在构建过程中设置并传递参数给容器。我们使用 `PYTHON_ENV` 参数来设置虚拟环境并命名为 `my_python_dev`'
- en: 'You should have the three files — `Dockerfile`, `requirements.txt`, and `set_python_env.sh`
    stored under the `.devcontainer` folder, along with the `devcontainer.json` file:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该将这三个文件 — `Dockerfile`、`requirements.txt` 和 `set_python_env.sh` 存储在 `.devcontainer`
    文件夹下，并与 `devcontainer.json` 文件一起使用：
- en: '[PRE7]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s now launch the session using the new settings and test it with the `test1.py`
    file:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用新设置启动会话，并使用 `test1.py` 文件进行测试：
- en: '![](../Images/839afb5683f5adfe2c5732bd9a28f5bd.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/839afb5683f5adfe2c5732bd9a28f5bd.png)'
- en: Running a Python script to test the environment (screenshot by the author)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 运行一个 Python 脚本以测试环境（截图来自作者）
- en: As you can notice in the above screenshot, we were able to successfully run
    the test script from the terminal (marked in purple), and it printed the **Hello
    World!** message as expected (marked in green). In addition, the virtual environment
    we set in the image (`my_python_dev`) is loaded by default (marked in yellow).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如上图所示，我们成功地从终端（标记为紫色）运行了测试脚本，并且它按预期打印出了**Hello World!**消息（标记为绿色）。此外，我们在镜像中设置的虚拟环境（`my_python_dev`）默认已加载（标记为黄色）。
- en: In the next section, we will see how to customize the VScode settings of the
    Dev Containers session.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分中，我们将看到如何自定义Dev Containers会话的VScode设置。
- en: Customize VScode Settings
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义VScode设置
- en: One of the great features of the Dev Containers extension is that it isolates
    the session setting from the main VScode settings. This means you can fully customize
    your VScode settings at the project level. It extends the development environment's
    reproducibility beyond the Python or OS settings. Last but not least, it makes
    collaboration with others or working on multiple machines seamless and efficient.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Dev Containers扩展的一个重要特点是，它将会话设置与主要的VScode设置隔离开来。这意味着你可以在项目级别完全自定义VScode设置。它扩展了开发环境的可复现性，不仅限于Python或操作系统设置。最后但同样重要的是，它使得与他人协作或在多台机器上工作变得无缝且高效。
- en: 'We will conclude this tutorial with the next example, where we see how to customize
    the VScode settings with the `customizations` argument. We will add the argument
    to the previous example and use the `vscode` sub-argument to set the environment
    default Python interpreter and the required extensions:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的示例中结束本教程，看看如何使用`customizations`参数自定义VScode设置。我们将向前面的示例添加该参数，并使用`vscode`子参数设置环境默认的Python解释器和所需的扩展：
- en: '`devcontainer.json`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`devcontainer.json`'
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The files for this example are available [here](https://github.com/RamiKrispin/vscode-python-medium/tree/main/03_final_example).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例的文件可以在[这里](https://github.com/RamiKrispin/vscode-python-medium/tree/main/03_final_example)找到。
- en: We use the `settings` argument to define the Python virtual environment as defined
    in the image. In addition, we use the `extensions` argument for installing the
    [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
    and [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter)
    supporting extensions.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`settings`参数来定义镜像中定义的Python虚拟环境。此外，我们使用`extensions`参数安装[Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python)和[Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter)支持扩展。
- en: '**Note:** The path of the the virtual environment defined by the type of applicationas
    that was used to set the environment. As we use `venv` and named it as `my_python_dev`,
    the path is `opt/my_python_dev/bin/python3`.'
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 虚拟环境的路径由用于设置环境的应用程序类型定义。当我们使用`venv`并将其命名为`my_python_dev`时，路径为`opt/my_python_dev/bin/python3`。'
- en: 'After we add the Python extension, we can launch Python scripts using the extension
    plug-in, as demonstrated in the screenshot below. In addition, we can execute
    the Python code leveraging the Juptyer extension, in an interactive mode:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加Python扩展后，我们可以使用扩展插件启动Python脚本，如下图所示。此外，我们还可以利用Jupyter扩展以交互模式执行Python代码：
- en: '![](../Images/4c8bda14019b0f7f505bb1532d14321c.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4c8bda14019b0f7f505bb1532d14321c.png)'
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'In this tutorial, we reviewed how to set a dockerized Python environment with
    VScode and the Dev Containers extension. The Dev Containers extension makes the
    integration of containers with the development workflow seamless and efficient.
    We saw how, with a few simple steps, we can set and customize a dockerized Python
    environment using the `devcontainer.json` file. We reviewed the two approaches
    for setting the session image with the `image` and `build` arguments and setting
    extensions with the `customizations` argument. There are additional customization
    options that were not covered in this tutorial, and I recommend checking them:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们回顾了如何使用VScode和Dev Containers扩展设置一个Docker化的Python环境。Dev Containers扩展使得容器与开发工作流的集成变得无缝且高效。我们了解了如何通过几个简单的步骤，使用`devcontainer.json`文件来设置和自定义Docker化的Python环境。我们回顾了两种设置会话镜像的方法：通过`image`和`build`参数，以及通过`customizations`参数来设置扩展。还有其他自定义选项未在本教程中涉及，我建议查看这些选项：
- en: Define environment variables
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义环境变量
- en: Mount additional volumes
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挂载额外的卷
- en: Set arguments to the `docker run` command
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置`docker run`命令的参数
- en: Run post-launch command
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动后运行命令
- en: 'If you are interested in diving into more details, I recommend checking this
    tutorial:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣深入了解更多细节，我推荐查看这个教程：
- en: '[](https://github.com/RamiKrispin/vscode-python?source=post_page-----f716ef85571d--------------------------------)
    [## GitHub - RamiKrispin/vscode-python: A Tutorial for Setting Python Development
    Environment with…'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/RamiKrispin/vscode-python?source=post_page-----f716ef85571d--------------------------------)
    [## GitHub - RamiKrispin/vscode-python: 使用 VScode 和 Docker 设置 Python 开发环境的教程…'
- en: A Tutorial for Setting Python Development Environment with VScode and Docker
    - RamiKrispin/vscode-python
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 VScode 和 Docker 设置 Python 开发环境的教程 - RamiKrispin/vscode-python
- en: github.com](https://github.com/RamiKrispin/vscode-python?source=post_page-----f716ef85571d--------------------------------)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/RamiKrispin/vscode-python?source=post_page-----f716ef85571d--------------------------------)
- en: Resources
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: Code examples — [https://github.com/RamiKrispin/vscode-python-medium](https://github.com/RamiKrispin/vscode-python-medium)
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码示例 — [https://github.com/RamiKrispin/vscode-python-medium](https://github.com/RamiKrispin/vscode-python-medium)
- en: VScode — [https://code.visualstudio.com/](https://code.visualstudio.com/)
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VScode — [https://code.visualstudio.com/](https://code.visualstudio.com/)
- en: Dev Containers — [https://code.visualstudio.com/docs/devcontainers/containers](https://code.visualstudio.com/docs/devcontainers/containers)
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发容器 — [https://code.visualstudio.com/docs/devcontainers/containers](https://code.visualstudio.com/docs/devcontainers/containers)
- en: Setting a dockerized Python development environment with GitHub template — [https://medium.com/@rami.krispin/setting-a-dockerized-python-development-environment-template-de2400c4812b](https://medium.com/@rami.krispin/setting-a-dockerized-python-development-environment-template-de2400c4812b)
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置一个 Docker 化的 Python 开发环境，使用 GitHub 模板 — [https://medium.com/@rami.krispin/setting-a-dockerized-python-development-environment-template-de2400c4812b](https://medium.com/@rami.krispin/setting-a-dockerized-python-development-environment-template-de2400c4812b)
