- en: Setting A Dockerized Python Environment — The Elegant Way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/setting-a-dockerized-python-environment-the-elegant-way-f716ef85571d?source=collection_archive---------1-----------------------#2024-04-02](https://towardsdatascience.com/setting-a-dockerized-python-environment-the-elegant-way-f716ef85571d?source=collection_archive---------1-----------------------#2024-04-02)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This post provides a step-by-step guide for setting up a Python dockerized development
    environment with VScode and the Dev Containers extension.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@rami.krispin?source=post_page---byline--f716ef85571d--------------------------------)[![Rami
    Krispin](../Images/8af28c282d42a2a27c28aa8af4c8d482.png)](https://medium.com/@rami.krispin?source=post_page---byline--f716ef85571d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f716ef85571d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f716ef85571d--------------------------------)
    [Rami Krispin](https://medium.com/@rami.krispin?source=post_page---byline--f716ef85571d--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f716ef85571d--------------------------------)
    ·9 min read·Apr 2, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: In the previous post on this topic, [Setting A Dockerized Python Environment—The
    Hard Way](https://medium.com/towards-data-science/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0),
    we saw how to set up a dockerized Python development environment via the command
    line interface (CLI). In this post, we will review a more elegant and robust approach
    for setting up a dockerized Python development environment using VScode and the
    [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)
    extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Related articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0?source=post_page-----f716ef85571d--------------------------------)
    [## Setting A Dockerized Python Environment — The Hard Way'
  prefs: []
  type: TYPE_NORMAL
- en: This post will review different methods to run a dockerized Python environment
    from the command line (CLI). Am I…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0?source=post_page-----f716ef85571d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this tutorial, you will be able to set up a simple Python development
    environment with VScode and the Dev Containers extension.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8cbb25bfdc0e8741de15e6c984e79491.png)'
  prefs: []
  type: TYPE_IMG
- en: VScode illustration ( created by the author with Midjourney)
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with this tutorial, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Desktop (or equivalent) if you are using a macOS or Windows OS machine,
    or Docker installed if you are using a Linux OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Hub account to pull the image from
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[VScode IDE](https://code.visualstudio.com/) and the [Dev Containers](https://code.visualstudio.com/docs/devcontainers/containers)
    extension installed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throughout this tutorial, we will use the official Python image — `python:3.10`.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the code examples in this post are available here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/RamiKrispin/vscode-python-medium?source=post_page-----f716ef85571d--------------------------------)
    [## GitHub - RamiKrispin/vscode-python-medium: Supporting code for Medium Article'
  prefs: []
  type: TYPE_NORMAL
- en: Supporting code for Medium Article. Contribute to RamiKrispin/vscode-python-medium
    development by creating an account…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/RamiKrispin/vscode-python-medium?source=post_page-----f716ef85571d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: The Dev Containers Extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before getting started, let’s explain what the Dev Containers extension is and
    when you should consider using it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a nutshell, the VScode Dev Containers extension enables you to open an isolated
    VScode session inside a docker container seamlessly. The level of isolation includes
    the following three layers:'
  prefs: []
  type: TYPE_NORMAL
- en: Environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VScode settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VScode extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `devcontainer.json` file defines the session settings, enabling us to set
    and define the above three layers.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set and launch your project folder inside a container with the Dev Containers
    extension, you will need the following two components:'
  prefs: []
  type: TYPE_NORMAL
- en: Install the [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers)
    extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On your project folder, create a folder named `.devcontainer` and set a `devcontainer.json`
    file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The below diagram describes the Dev Containers general architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd24fddd18b426e7269fa83217b55ce0.png)'
  prefs: []
  type: TYPE_IMG
- en: The Dev Containers extension architecture (credit Rami Krispin)
  prefs: []
  type: TYPE_NORMAL
- en: Upon launch, the Dev Containers extension spins a new VScode session inside
    a container. By default, it mounts the local folder to the container, which enables
    us to keep the code persistent and sync with our local folder. You can mount additional
    folders, but this is outside the scope of this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to set up a Python environment with the
    `devcontainer.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: Setting a Dockerized Python Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before getting started with the `devcontainer.json` settings, let’s first define
    the scope of the development environment. It should include the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support Jupyter notebooks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install required libraries — Pandas and VScode Jupyter supporting libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install supporting extensions — Python and Jupyter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following sections, we will dive into the core functionality of the `devcontainer.json`
    file. We will start with a minimalist Python environment and demonstrate how to
    customize it by adding different customization layers.
  prefs: []
  type: TYPE_NORMAL
- en: Build vs. Image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main requirement for launching a containerized session with the Dev Containers
    extension is to define the image settings. There are two approaches for setting
    the image:'
  prefs: []
  type: TYPE_NORMAL
- en: Build the image and run it during the launch time of the container with the
    `build` argument. This argument enables you to define a Dockerfile for the build
    and pass arguments to the `docker build` function. Once the build process is done,
    it will launch the session inside the container
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launch the session with an existing image using the `image` argument
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the use cases, each method has its own pros and cons. You should
    consider using the `image` argument when you have an image that fully meets the
    environment requirements. Likewise, a good use case for the `build` argument is
    when you have a base image but need to add minor customization settings.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will start with a simple example of launching a Python
    environment using the `image` argument to import the official Python image (`python:3.10`).
  prefs: []
  type: TYPE_NORMAL
- en: Basic Dockerized Python Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The below `devcontainer.json` file provides a simple example for setting up
    a Python environment. It uses the `image` argument to define the `python:3.10`
    image as the session environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '`devcontainer.json`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `name` argument defines the environment name. In this case, we set it as
    **Python Development Environment**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before launching the environment, please make sure:'
  prefs: []
  type: TYPE_NORMAL
- en: Your Docker Desktop (or equivalent) is open
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are logged in to Docker Hub (or pull in advance the Python image)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `devcontainer.json` file is set in the project folder under the `.devcontainer`
    folder:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The code for this example is available [here](https://github.com/RamiKrispin/vscode-python-medium/tree/main/01_basic_example).
  prefs: []
  type: TYPE_NORMAL
- en: 'To launch a session, click the Dev Container `><` symbol on the bottom left
    and select the `Reopen in Container` option as demonstrated in the screenshot
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9f199cefb98a0b705fb23d9eadfcc058.png)'
  prefs: []
  type: TYPE_IMG
- en: Launching the session inside a container with the Dev Containers extension (screenshot
    by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Note that during the first launch time of the session, the Dev Containers extension
    will look for the image that was defined by the `image` argument (in this case
    — `python:3.10`). If the image is not available locally, it will pull it from
    Docker Hub, and it might take a few minutes. Afterward, it should take a few seconds
    to launch the session.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b4479a50c69ef05d66d4b3fb41943214.png)'
  prefs: []
  type: TYPE_IMG
- en: The VScode session inside a container (screenshot by the author)
  prefs: []
  type: TYPE_NORMAL
- en: In the above screenshot, you can see the mapping between the `devcontainer.json`
    arguments and the session settings. The session name is now available on the bottom
    right (marked in purple) and aligned with the value of the `name` argument. Likewise,
    the session is now running inside the `python:3.10` container, and you can launch
    Python from the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: The Python container comes with the default Python libraries. In the following
    section, we will see how we can add more layers on top of the Python base image
    with the `build` argument.
  prefs: []
  type: TYPE_NORMAL
- en: Customize the Python Environment with a Dockerfile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s now customize the above environment by modifying the `devcontainer.json`.
    We will replace the `image` argument with the`build` argument. The `build` argument
    enables us to build the image during the session launch time with a Dockerfile
    and pass arguments to the `docker build` function. We will follow the same approach
    as demonstrated in this [post](https://medium.com/towards-data-science/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0)
    to set the Python environment:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `python:3.10` as the base image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set a virtual environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install the required libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will use the following Dockerfile to set the Python environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Dockerfile`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We use the `FROM` argument to import the Python image, and the `ARG` and `ENV`arguments
    to set the virtual environment as an argument and environment variable. In addition,
    we use the following two helper files to set a virtual environment and install
    the required libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '`requirements.txt` — a setting file with a list of required libraries. For
    this demonstration, we will install the Pandas library, version 2.0.3., and the
    Jupyter supporting libraries (ipykernel, ipywidgets, jupyter). The wheels library
    is a supporting library that handles C dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`set_python_env.sh` — a helper bash script that sets a virtual environment
    and installs the required libraries using the `requirements.txt` file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requirements.txt`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`set_python_env.sh`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Last but not least, we will use the following test file to evaluate if the
    Pandas library was installed properly and print **Hello World!** message:'
  prefs: []
  type: TYPE_NORMAL
- en: '`test1.py`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s make the changes in the `devcontainer.json` file, and replace the `image`
    argument with the `build` argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '`devcontainer.json`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The files for this example are available [here](https://github.com/RamiKrispin/vscode-python-medium/tree/main/02_build_example).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `build` sub-arguments enable us to customize the image build by passing
    arguments to the `docker build` function. We use the following arguments to build
    the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dockerfile` — the path and name of the Dockerfile'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` — set the path of the local file system to enable access for files
    with the `COPY` argument during the build time. In this case, we use the current
    folder of the `devcontainer.json` file (e.g., the `.devcontainer` folder).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`args` — set and pass arguments to the container during the build process.
    We use the `PYTHON_ENV` argument to set the virtual environment and name it as
    `my_python_dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You should have the three files — `Dockerfile`, `requirements.txt`, and `set_python_env.sh`
    stored under the `.devcontainer` folder, along with the `devcontainer.json` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now launch the session using the new settings and test it with the `test1.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/839afb5683f5adfe2c5732bd9a28f5bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Running a Python script to test the environment (screenshot by the author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can notice in the above screenshot, we were able to successfully run
    the test script from the terminal (marked in purple), and it printed the **Hello
    World!** message as expected (marked in green). In addition, the virtual environment
    we set in the image (`my_python_dev`) is loaded by default (marked in yellow).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to customize the VScode settings of the
    Dev Containers session.
  prefs: []
  type: TYPE_NORMAL
- en: Customize VScode Settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the great features of the Dev Containers extension is that it isolates
    the session setting from the main VScode settings. This means you can fully customize
    your VScode settings at the project level. It extends the development environment's
    reproducibility beyond the Python or OS settings. Last but not least, it makes
    collaboration with others or working on multiple machines seamless and efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will conclude this tutorial with the next example, where we see how to customize
    the VScode settings with the `customizations` argument. We will add the argument
    to the previous example and use the `vscode` sub-argument to set the environment
    default Python interpreter and the required extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`devcontainer.json`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The files for this example are available [here](https://github.com/RamiKrispin/vscode-python-medium/tree/main/03_final_example).
  prefs: []
  type: TYPE_NORMAL
- en: We use the `settings` argument to define the Python virtual environment as defined
    in the image. In addition, we use the `extensions` argument for installing the
    [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
    and [Jupyter](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter)
    supporting extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** The path of the the virtual environment defined by the type of applicationas
    that was used to set the environment. As we use `venv` and named it as `my_python_dev`,
    the path is `opt/my_python_dev/bin/python3`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'After we add the Python extension, we can launch Python scripts using the extension
    plug-in, as demonstrated in the screenshot below. In addition, we can execute
    the Python code leveraging the Juptyer extension, in an interactive mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4c8bda14019b0f7f505bb1532d14321c.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this tutorial, we reviewed how to set a dockerized Python environment with
    VScode and the Dev Containers extension. The Dev Containers extension makes the
    integration of containers with the development workflow seamless and efficient.
    We saw how, with a few simple steps, we can set and customize a dockerized Python
    environment using the `devcontainer.json` file. We reviewed the two approaches
    for setting the session image with the `image` and `build` arguments and setting
    extensions with the `customizations` argument. There are additional customization
    options that were not covered in this tutorial, and I recommend checking them:'
  prefs: []
  type: TYPE_NORMAL
- en: Define environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mount additional volumes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set arguments to the `docker run` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run post-launch command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are interested in diving into more details, I recommend checking this
    tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/RamiKrispin/vscode-python?source=post_page-----f716ef85571d--------------------------------)
    [## GitHub - RamiKrispin/vscode-python: A Tutorial for Setting Python Development
    Environment with…'
  prefs: []
  type: TYPE_NORMAL
- en: A Tutorial for Setting Python Development Environment with VScode and Docker
    - RamiKrispin/vscode-python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/RamiKrispin/vscode-python?source=post_page-----f716ef85571d--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code examples — [https://github.com/RamiKrispin/vscode-python-medium](https://github.com/RamiKrispin/vscode-python-medium)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VScode — [https://code.visualstudio.com/](https://code.visualstudio.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dev Containers — [https://code.visualstudio.com/docs/devcontainers/containers](https://code.visualstudio.com/docs/devcontainers/containers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a dockerized Python development environment with GitHub template — [https://medium.com/@rami.krispin/setting-a-dockerized-python-development-environment-template-de2400c4812b](https://medium.com/@rami.krispin/setting-a-dockerized-python-development-environment-template-de2400c4812b)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
