- en: About Calculating Sales depending on Another Value in DAX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/about-calculating-sales-depending-on-another-value-in-dax-914deb450d23?source=collection_archive---------9-----------------------#2024-01-18](https://towardsdatascience.com/about-calculating-sales-depending-on-another-value-in-dax-914deb450d23?source=collection_archive---------9-----------------------#2024-01-18)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Our usual Measures aggregate the Values from columns in one Fact table. But
    what is needed to calculate a result that depends on Data in another Fact table?
    Let’s look at a possible solution.*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari?source=post_page---byline--914deb450d23--------------------------------)[![Salvatore
    Cagliari](../Images/a24b0cefab6e707cfee06cde9e857559.png)](https://medium.com/@salvatorecagliari?source=post_page---byline--914deb450d23--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--914deb450d23--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--914deb450d23--------------------------------)
    [Salvatore Cagliari](https://medium.com/@salvatorecagliari?source=post_page---byline--914deb450d23--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--914deb450d23--------------------------------)
    ·8 min read·Jan 18, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/45ea30c39f5de4fab1569c22c2102c56.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Isaac Smith](https://unsplash.com/@isaacmsmith?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is needed to calculate a result based on a specific value in DAX?
  prefs: []
  type: TYPE_NORMAL
- en: 'Simple: A filter.'
  prefs: []
  type: TYPE_NORMAL
- en: But what if the filter has to be a table?
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, I already know how to work with tables in DAX Measures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/on-using-intermediary-results-in-dax-measures-9971efa72ae?source=post_page-----914deb450d23--------------------------------)
    [## On using intermediary results in DAX Measures'
  prefs: []
  type: TYPE_NORMAL
- en: We use table variables in DAX all the time. What if we must calculate intermediary
    results and reuse them in a DAX…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/on-using-intermediary-results-in-dax-measures-9971efa72ae?source=post_page-----914deb450d23--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'And now, my client gave me a challenge to put my knowledge to the test:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following Report:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/16bf481118051d54e12d94515a99c9d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1 — Online vs Retail Sales and sold products (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the number of products sold differs between Online and Retail
    Sales.
  prefs: []
  type: TYPE_NORMAL
- en: 'My client asked the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the Online Sales Amount for the Products sold in Retail Stores as well?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And which Products are sold only Online?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trying to solve it in Power BI with Filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Can I answer the first question in Power BI by applying a Filter on the left
    table like this?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2049a3eec6ee685b06bdaa88035954df.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2 — Applying a Filter in Power BI filtering by the Retail Sales Measure
    (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, this doesn’t work.
  prefs: []
  type: TYPE_NORMAL
- en: The reason is that no Relationship connects these two tables, and the Filter
    direction to Dimension tables works only in one direction.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, I could change it to bidirectional filtering. But this can introduce issues
    as it will not work in any situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way is to add multiple Measures and add a Filter to the Visual:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/acf08f12a75a2596a631b7e0a7324d79.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3 — Applying a filter to Power BI with multiple Measures (Figure by the
    Author)
  prefs: []
  type: TYPE_NORMAL
- en: This delivers the needed result.
  prefs: []
  type: TYPE_NORMAL
- en: I can even change the filter to “Sum Retail Sales *is blank*” to get the count
    of products sold only online together with the Sales.
  prefs: []
  type: TYPE_NORMAL
- en: But the resulting visual contains the Sum Retail Sales Measure, which I don’t
    want to see. And, when I want to get the number of products sold only online,
    I will get empty columns for this measure, which is not what I want to see either.
  prefs: []
  type: TYPE_NORMAL
- en: So, I must create an explicit DAX Measure to solve the questions above.
  prefs: []
  type: TYPE_NORMAL
- en: Get the result from the source database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: But first, I must get a reference result.
  prefs: []
  type: TYPE_NORMAL
- en: I can use this reference result to validate the results when I build the solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'I write the following SQL query to get this reference result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d016e912a8539eba2492eb3391832c6a.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4 — Result of the SQL Query to get only the products sold Online and
    in Stores (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the count of products sold only Online, I use this SQL Query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The result for this query is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/208abc208c96c901f1458d80815b0b7c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5 — Result of the SQL Query to get only the products sold Online (Figure
    by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: In both cases, first, I get the list of all sold products for each month for
    the Retail Sales.
  prefs: []
  type: TYPE_NORMAL
- en: Then, I join the result to the Online Sales table and count the monthly products
    sold.
  prefs: []
  type: TYPE_NORMAL
- en: I exclude all products in the Retail Sales Data in the second query.
  prefs: []
  type: TYPE_NORMAL
- en: In both cases, I get the needed reference result, and I can go ahead and write
    the DAX code in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: Querying the Data model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of trying to build Measures in Power BI, I use [DAX Studio](https://www.sqlbi.com/tools/dax-studio/)
    to write DAX Queries to construct the solution step by step.
  prefs: []
  type: TYPE_NORMAL
- en: First, I want to get all products sold in Retail stores.
  prefs: []
  type: TYPE_NORMAL
- en: 'As my SQL query group the result per month, I restrict the first query to one
    month only. This simplifies the needed code as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3fa909d205cd46aa1e52821480a29fec.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6 — Result of DAX Query with the list of Products sold in Retail Stores
    (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: So, I got 2504 products sold during November 2023.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to inject this result as a filter into a query to count the
    products sold Online:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now I have 2498 products:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2bdfafdc20ad8973b801114873ec65a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7 — Result of DAX Query counting Products sold Online and in Retail Stores
    (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, I store the list of products sold in Retail stores in the Variable
    RetailProductList.
  prefs: []
  type: TYPE_NORMAL
- en: Then, I use [CALCULATETABLE()](https://dax.guide/calculatetable/) to filter
    the ProductKey in the Online Sales table with this variable.
  prefs: []
  type: TYPE_NORMAL
- en: To restrict the result to one month only, I must add line 17.
  prefs: []
  type: TYPE_NORMAL
- en: To get only the count of the products, I use [COUNTROWS()](https://dax.guide/countrows/)
    enclosed in curly brackets to generate the output table.
  prefs: []
  type: TYPE_NORMAL
- en: I must add the curly brackets, as COUNTROWS() returns a number, and [EVALUATE](https://dax.guide/st/evaluate/)
    expects a table expression. The curly brackets take the result of COUNTROWS()
    and create a table with one column and one row.
  prefs: []
  type: TYPE_NORMAL
- en: When I compare the count of 2498 to the result of the first SQL query above,
    for November 2023, I have the same result.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the logic works as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Measure(s)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, I can take the query and put it into a Measure.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the Measure must work even when I want to get a list of months and calculate
    the result for each month, I must remove the hardcoded month and evaluate the
    month for each row in the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The Measure is everything between the DEFINE MEASURE and EVALUATE.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the result, which is the same as from the SQL query above:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2b15846d21995f24f8d9352f27ec6894.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8 — Result of DAX Query using the Measure derived from Query (Figure
    by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the products sold only Online, I must change one line in the Measure
    to exclude the products sold in Retail stores from the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is the same as from the second SQL Query above:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d16e149debb8aeb4005423d4bab8b77b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9 — Result of DAX Query using the Measure for Products sold only Online
    (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This task is similar to the logic described in my article about using intermediary
    results in DAX (You can find the link to that article in the Reference section
    below).
  prefs: []
  type: TYPE_NORMAL
- en: But this time, I didn’t need the extra [FILTER()](https://dax.guide/filter/)
    when using the table variable.
  prefs: []
  type: TYPE_NORMAL
- en: I’m unsure why I needed it when I wrote that piece, but I will examine it.
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, I used DAX queries this time to develop the solution step-by-step.
  prefs: []
  type: TYPE_NORMAL
- en: I found it useful to do it this way, as I worked with an intermediary table,
    which I can examine during development.
  prefs: []
  type: TYPE_NORMAL
- en: For such scenarios, it is easier working with Queries than trying to build such
    a solution straight in Power BI Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, it’s interesting for those who come from working with relational
    databases and who started working with DAX: I needed to explicitly add the month
    to the SQL query to be able to group the results by month. I don’t need this in
    DAX, as the grouping is done automatically when adding the month to the query.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ade78146acb63e47f1347db6543c4dc8.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Firmbee.com](https://unsplash.com/@firmbee?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I wrote an article about working with intermediary tables in DAX Measures a
    few months ago. You can find it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/on-using-intermediary-results-in-dax-measures-9971efa72ae?source=post_page-----914deb450d23--------------------------------)
    [## On using intermediary results in DAX Measures'
  prefs: []
  type: TYPE_NORMAL
- en: We use table variables in DAX all the time. What if we must calculate intermediary
    results and reuse them in a DAX…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/on-using-intermediary-results-in-dax-measures-9971efa72ae?source=post_page-----914deb450d23--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I use the Contoso sample dataset, like in my previous articles. You can download
    the ContosoRetailDW Dataset for free from Microsoft [here](https://www.microsoft.com/en-us/download/details.aspx?id=18279).
  prefs: []
  type: TYPE_NORMAL
- en: I translated my client’s request to the data in the ContosoRetailDW dataset.
  prefs: []
  type: TYPE_NORMAL
- en: The Contoso Data can be freely used under the MIT License, as described [here](https://github.com/microsoft/Power-BI-Embedded-Contoso-Sales-Demo).
  prefs: []
  type: TYPE_NORMAL
- en: I enlarged the dataset to make the DAX engine work harder.
  prefs: []
  type: TYPE_NORMAL
- en: The Online Sales table contains 71 million rows (instead of 12.6 million rows),
    and the Retail Sales table contains 18.5 million rows (instead of 3.4 million
    rows).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari/subscribe?source=post_page-----914deb450d23--------------------------------)
    [## Get an email whenever Salvatore Cagliari publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Salvatore Cagliari publishes. By signing up, you will
    create a Medium account if you don't…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@salvatorecagliari/subscribe?source=post_page-----914deb450d23--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I make my articles accessible to everyone, even though Medium has a paywall.
    This allows me to earn a little for each reader, but I turn it off so you can
    read my pieces without cost.
  prefs: []
  type: TYPE_NORMAL
- en: You can support my work, which I do during my free time, through
  prefs: []
  type: TYPE_NORMAL
- en: '[https://buymeacoffee.com/salvatorecagliari](https://buymeacoffee.com/salvatorecagliari)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Or scan this QR Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e7ac062070dcd7a00dcf995ad7e95434.png)'
  prefs: []
  type: TYPE_IMG
- en: Any support is greatly appreciated and helps me find more time to create more
    content for you.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you a lot.
  prefs: []
  type: TYPE_NORMAL
