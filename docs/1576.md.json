["```py\nimport sys\n\nclass SomeObject:\n    def __del__(self):\n        print(f\"(Deleting {self=})\")\n\nobj = SomeObject()\n\nprint(sys.getrefcount(obj))  # 2\n\nobj2 = obj\nprint(sys.getrefcount(obj))  # 3\n\nobj = None\nobj2 = None\n\n# (Deleting self=<__main__.SomeObject object at 0x7d303fee7e80>)\n```", "```py\nimport weakref\n\nobj = SomeObject()\n\nreference = weakref.ref(obj)\n\nprint(reference)  # <weakref at 0x734b0a514590; to 'SomeObject' at 0x734b0a4e7700>\nprint(reference())  # <__main__.SomeObject object at 0x707038c0b700>\nprint(obj.__weakref__)  # <weakref at 0x734b0a514590; to 'SomeObject' at 0x734b0a4e7700>\n\nprint(sys.getrefcount(obj))  # 2\n\nobj = None\n\n# (Deleting self=<__main__.SomeObject object at 0x70744d42b700>)\n\nprint(reference)  # <weakref at 0x7988e2d70590; dead>\nprint(reference())  # None\n```", "```py\nobj = SomeObject()\n\nreference = weakref.proxy(obj)\n\nprint(reference)  # <__main__.SomeObject object at 0x78a420e6b700>\n\nobj.attr = 1\nprint(reference.attr)  # 1\n```", "```py\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self._parent = None\n        self.children = []\n\n    def __repr__(self):\n        return \"Node({!r:})\".format(self.value)\n\n    @property\n    def parent(self):\n        return self._parent if self._parent is None else self._parent()\n\n    @parent.setter\n    def parent(self, node):\n        self._parent = weakref.ref(node)\n\n    def add_child(self, child):\n        self.children.append(child)\n        child.parent = self\n\nroot = Node(\"parent\")\nn = Node(\"child\")\nroot.add_child(n)\nprint(n.parent)  # Node('parent')\n\ndel root\nprint(n.parent)  # None\n```", "```py\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self._children = weakref.WeakValueDictionary()\n\n    @property\n    def children(self):\n        return list(self._children.items())\n\n    def add_child(self, key, child):\n        self._children[key] = child\n\nroot = Node(\"parent\")\nn1 = Node(\"child one\")\nn2 = Node(\"child two\")\nroot.add_child(\"n1\", n1)\nroot.add_child(\"n2\", n2)\nprint(root.children)  # [('n1', Node('child one')), ('n2', Node('child two'))]\n\ndel n1\nprint(root.children)  # [('n2', Node('child two'))]\n```", "```py\nclass Observable:\n    def __init__(self):\n        self._observers = weakref.WeakSet()\n\n    def register_observer(self, obs):\n        self._observers.add(obs)\n\n    def notify_observers(self, *args, **kwargs):\n        for obs in self._observers:\n            obs.notify(self, *args, **kwargs)\n\nclass Observer:\n    def __init__(self, observable):\n        observable.register_observer(self)\n\n    def notify(self, observable, *args, **kwargs):\n        print(\"Got\", args, kwargs, \"From\", observable)\n\nsubject = Observable()\nobserver = Observer(subject)\nsubject.notify_observers(\"test\", kw=\"python\")\n# Got ('test',) {'kw': 'python'} From <__main__.Observable object at 0x757957b892d0>\n```", "```py\nimport tempfile, shutil\nfrom pathlib import Path\n\nclass TempDir:\n    def __init__(self):\n        self.name = tempfile.mkdtemp()\n        self._finalizer = weakref.finalize(self, shutil.rmtree, self.name)\n\n    def __repr__(self):\n        return \"TempDir({!r:})\".format(self.name)\n\n    def remove(self):\n        self._finalizer()\n\n    @property\n    def removed(self):\n        return not self._finalizer.alive\n\ntmp = TempDir()\nprint(tmp)  # TempDir('/tmp/tmp8o0aecl3')\nprint(tmp.removed)  # False\nprint(Path(tmp.name).is_dir()) # True\n```", "```py\nimport logging\na = logging.getLogger(\"first\")\nb = logging.getLogger(\"second\")\nprint(a is b)  # False\n\nc = logging.getLogger(\"first\")\nprint(a is c)  # True\n```", "```py\nclass Logger:\n    def __init__(self, name):\n        self.name = name\n\n_logger_cache = weakref.WeakValueDictionary()\n\ndef get_logger(name):\n    if name not in _logger_cache:\n        l = Logger(name)\n        _logger_cache[name] = l\n    else:\n        l = _logger_cache[name]\n    return l\n\na = get_logger(\"first\")\nb = get_logger(\"second\")\nprint(a is b)  # False\n\nc = get_logger(\"first\")\nprint(a is c)  # True\n```", "```py\nfrom _weakref import proxy as _proxy\n\nclass OrderedDict(dict):\n\n    def __new__(cls, /, *args, **kwds):\n        self = dict.__new__(cls)\n        self.__hardroot = _Link()\n        self.__root = root = _proxy(self.__hardroot)\n        root.prev = root.next = root\n        self.__map = {}\n        return self\n```"]