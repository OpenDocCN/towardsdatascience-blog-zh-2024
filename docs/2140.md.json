["```py\nimport pandas as pd\nimport os\n\n# Define the file paths\nfiles = {\n1\\. \"All Interacted Tickets.xlsx\",\n2\\. \"Copy of Ticket Dump - Received from Ops.xlsx\",\n3\\. \"Verifying_accurate_list_of_ops_people_supporting_my_space.xlsx\"\n}\n\ndef snake_case(s):\n    return s.lower().replace(\" \", \"_\")\n\ndef read_excel_sheets(file_path, ignore_pivot=True):\n    xl = pd.ExcelFile(file_path)\n    sheet_names = xl.sheet_names\n    ….<code clipped>\n```", "```py\nSELECT ticket_number, ticket_description, ticket_creation_date, blah blah \nFROM ticket_table \nWHERE ticket_owners include \"johndoe@company.com, janedang@company.com\" ...\n```", "```py\n\"16220417\": {\n        \"description\": \"Hi Team, \\nThe FACT_XYZ_TABLE has not refreshed in time. Typically the data is available at 10am PST, but when I see the job, it has been completing several hours late consistently for the last few weeks. Also, it is 11am, and I see that it is still in running state!\\n\\n It is critical that this table is completed in time, so we have enough time to prepare an important sales executive report by 8am every morning. Please treat this with urgency.\",\n        \"opened_priority\": \"P2 - Urgent\",\n        \"origin\": \"Helpdesk ticket portal\",\n        \"closedDate\": \"2024-02-26T07:04:54.000Z\",\n        \"createdDate\": \"2024-02-01T09:03:43.000Z\",\n        \"ownerName\": \"Tom Cruise (Support Engineer)\",\n        \"ownerEmail\": \"tcruise@shoddy.com\",\n        \"contactName\": \"Shoddy Joe (Stakeholder)\",\n        \"contactEmail\": \"sjoe@shoddy.com\",\n        \"createdByName\": \"Shoddy Joe (Stakeholder)\",\n        \"createdByEmail\": \"sjoe@shoddy.com\",\n        \"ticket_status\": \"closed\"\n    },\n```", "```py\n('Peter gave his book to Heidi which later gave it to Nicole. \nPeter lives in London and Nicole lives in Tashkent.')\n```", "```py\n'<PERSON_1> gave his book to <PERSON_2> which later gave it to <PERSON_0>. \n<PERSON_1> lives in <LOCATION_1> and <PERSON_0> lives in <LOCATION_0>.`\n```", "```py\n{ 'LOCATION': {'London': '<LOCATION_1>', 'Tashkent': '<LOCATION_0>'},\n 'PERSON': { 'Heidi': '<PERSON_2>',\n 'Nicole': '<PERSON_0>',\n 'Peter': '<PERSON_1>'}\n}\n```", "```py\n('Peter gave his book to Heidi which later gave it to Nicole. \nPeter lives in London and Nicole lives in Tashkent.')\n```", "```py\n*Total tickets chunked: 3012*\n\n*The full ticket data has been chunked into 309 chunks:*\n*Chunk 0: Number of words = 674*\n*Chunk 0: Number of tickets = 12*\n*Chunk 1: Number of words = 661*\n*Chunk 1: Number of tickets = 12*\n*Chunk 2: Number of words = 652*\n*Chunk 2: Number of tickets = 12*\n*Chunk 3: Number of words = 638*\n*Chunk 3: Number of tickets = 7*\n*Chunk 4: Number of words = 654*\n*….*\n```"]