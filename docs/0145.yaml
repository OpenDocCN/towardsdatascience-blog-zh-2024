- en: 'Graph & Geometric ML in 2024: Where We Are and What‚Äôs Next (Part I ‚Äî Theory
    & Architectures)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/graph-geometric-ml-in-2024-where-we-are-and-whats-next-part-i-theory-architectures-3af5d38376e1?source=collection_archive---------1-----------------------#2024-01-16](https://towardsdatascience.com/graph-geometric-ml-in-2024-where-we-are-and-whats-next-part-i-theory-architectures-3af5d38376e1?source=collection_archive---------1-----------------------#2024-01-16)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: State-of-the-Art Digest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following the tradition from previous years, we interviewed a cohort of distinguished
    and prolific academic and industrial experts in an attempt to summarise the highlights
    of the past year and predict what is in store for 2024\. Past 2023 was so ripe
    with results that we had to break this post into two parts. This is Part I focusing
    on theory & new architectures, see also [Part II](https://medium.com/towards-data-science/graph-geometric-ml-in-2024-where-we-are-and-whats-next-part-ii-applications-1ed786f7bf63)
    on applications.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mgalkin.medium.com/?source=post_page---byline--3af5d38376e1--------------------------------)[![Michael
    Galkin](../Images/c5eb13334712ca0462d8a5df4a268ad0.png)](https://mgalkin.medium.com/?source=post_page---byline--3af5d38376e1--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--3af5d38376e1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--3af5d38376e1--------------------------------)
    [Michael Galkin](https://mgalkin.medium.com/?source=post_page---byline--3af5d38376e1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--3af5d38376e1--------------------------------)
    ¬∑30 min read¬∑Jan 16, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f888e845d4bdb9f34131d8b0544d71fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Authors with some help from DALL-E 3.
  prefs: []
  type: TYPE_NORMAL
- en: '*The post is written and edited by* [*Michael Galkin*](https://twitter.com/michael_galkin)
    *and* [*Michael Bronstein*](https://twitter.com/mmbronstein) *with significant
    contributions from* [*Johannes Brandstetter*](https://twitter.com/jo_brandstetter)*,*
    [*ƒ∞smail ƒ∞lkan Ceylan*](https://twitter.com/ismaililkanc/)*,* [*Francesco Di Giovanni*](https://twitter.com/Francesco_dgv)*,*
    [*Ben Finkelshtein*](https://twitter.com/benfinkelshtein)*,* [*Kexin Huang*](https://twitter.com/KexinHuang5)*,*
    [*Chaitanya Joshi*](https://twitter.com/chaitjo)*,* [*Chen Lin*](https://twitter.com/WillLin1028)*,*
    [*Christopher Morris*](https://twitter.com/chrsmrrs)*,* [*Mathilde Papillon*](https://twitter.com/mathildepapillo)*,*
    [*Liudmila Prokhorenkova*](https://twitter.com/LProkhorenkova)*,* [*Bastian Rieck*](https://twitter.com/Pseudomanifold)*,*
    [*David Ruhe*](https://twitter.com/djjruhe)*,* [*Hannes St√§rk*](https://twitter.com/HannesStaerk)*,
    and* [*Petar Veliƒçkoviƒá*](https://twitter.com/PetarV_93)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Theory of Graph Neural Networks](#79aa)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 1\. [Message passing neural networks and Graph Transformers](#5903)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2\. [Graph components, biconnectivity & planarity](#a6d7)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3\. [Aggregation functions & uniform expressivity](#27e6)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 4\. [Convergence & zero-one laws of GNNs](#645f)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 5. [Descriptive complexity of GNNs](#c8ac)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 6\. [Fine-grained expressivity of GNNs](#9b59)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 7\. [Expressivity results for Subgraph GNNs](#06c2)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 8\. [Expressivity for Link Prediction and Knowledge Graphs](#ab19)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 9\. [Over-squashing & Expressivity](#c284)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 10\. [Generalization and Extrapolation capabilities of GNNs](#4a32)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 11\. [Predictions time!](#4f30)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[New and Exotic Message Passing](#b09f)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Beyond Graphs](#9a3b)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 1\. [Topology](#efa6)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2\. [Geometric Algebras](#a368)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3\. [PDEs](#5b67)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[Robustness & Explainability](#8171)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Graph Transformers](#e7b4)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[New Datasets & Benchmarks](#cf16)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Conferences, Courses & Community](#926c)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Memes of 2023](#f1d3)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The legend we will be using throughout the text:'
  prefs: []
  type: TYPE_NORMAL
- en: üí° - year‚Äôs highlight
  prefs: []
  type: TYPE_NORMAL
- en: üèãÔ∏è - challenges
  prefs: []
  type: TYPE_NORMAL
- en: ‚û°Ô∏è - current/next developments
  prefs: []
  type: TYPE_NORMAL
- en: üîÆ- predictions/speculations
  prefs: []
  type: TYPE_NORMAL
- en: Theory of Graph Neural Networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Michael Bronstein (Oxford), Francesco Di Giovanni (Oxford), ƒ∞smail ƒ∞lkan Ceylan
    (Oxford), Chris Morris (RWTH Aachen)*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Message Passing Neural Networks & Graph Transformers**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Graph Transformers are a relatively recent trend in graph ML, trying to extend
    the successes of Transformers from sequences to graphs. As far as traditional
    expressivity results go, these architectures do not offer any particular advantages.
    In fact, it is arguable that most of their benefits in terms of expressivity (see
    e.g. [Kreuzer et al.](https://arxiv.org/abs/2106.03893)) come from powerful structural
    encodings rather than the architecture itself and such encodings can in principle
    be used with MPNNs.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a recent paper, [Cai et al.](https://arxiv.org/abs/2301.11956) investigate
    the connection between MPNNs and (graph) Transformers showing that an MPNN with
    a virtual node ‚Äî an auxiliary node that is connected to all other nodes in a specific
    way ‚Äî can simulate a (graph) Transformer. This architecture is *non-uniform*,
    i.e., the size and structure of the neural networks may depend on the size of
    the input graphs. Interestingly, once we restrict our attention to linear Transformers
    (e.g., Performer) then there is a *uniform* result: there exists a single MPNN
    using a virtual node that can approximate a linear transformer such as Performer
    on any input of any size.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/58777f0195680c0818525a67e58b2031.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure from [Cai et al.](https://arxiv.org/abs/2301.11956): (a) MPNN with a
    virtual node, (b) a Transformer.'
  prefs: []
  type: TYPE_NORMAL
- en: This is related to the discussions on whether graph transformer architectures
    present advantages for capturing long-range dependencies when compared to MPNNs.
    Graph transformers are compared to MPNNs that include a global computation component
    through the use of virtual nodes, which is a common practice. [Cai et al.](https://arxiv.org/abs/2301.11956)
    empirically show that MPNNs with virtual nodes can surpass the performance of
    graph transformers on the Long-Range Graph Benchmark (LRGB, [Dwivedi et al.](https://arxiv.org/abs/2206.08164))
    Moreover, [T√∂nshoff et al.](https://arxiv.org/abs/2309.00367) re-evaluate MPNN
    baselines on the LRGB benchmark to find out that the earlier reported performance
    gap in favor of graph transformers was overestimated due to suboptimal hyperparameter
    choices, essentially closing the gap between MPNNs and graph Transformers.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e9fc784a08cfc83613d260e0224f4499.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure from [Lim et al.](https://arxiv.org/abs/2202.13013): SignNet pipeline.'
  prefs: []
  type: TYPE_NORMAL
- en: It is also well-known that common Laplacian positional encodings (e.g., LapPE),
    are not invariant to the changes of signs and basis of eigenvectors. The lack
    of invariance makes it easier to obtain (non-uniform) universality results, but
    these models do not compute graph invariants as a consequence. This has motivated
    a body of work this year, including the study of sign and basis invariant networks
    ([Lim et al., 2023a](https://arxiv.org/abs/2202.13013)) and sign equivariant networks
    ([Lim et al., 2023b](https://arxiv.org/abs/2312.02339)). These findings suggest
    that more research is necessary to theoretically ground the claims commonly found
    in the literature regarding the comparisons of MPNNs and graph transformers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Graph components, biconnectivity, and planarity**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/f38beda635e6b001c4b4b95828e6afbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure originally by Zyqqh at [Wikipedia](https://commons.wikimedia.org/w/index.php?curid=19053091).
  prefs: []
  type: TYPE_NORMAL
- en: '[Zhang et al. (2023a)](https://arxiv.org/abs/2301.09505) brings the study of
    graph biconnectivity to the attention of graph ML community. There are many results
    presented by [Zhang et al. (2023a)](https://arxiv.org/abs/2301.09505) relative
    to different biconnectivity metrics. It has been shown that standard MPNNs cannot
    detect graph biconnectivity unlike many existing higher-order models (i.e., those
    that can match the power of 2-FWL). On the other hand, Graphormers with certain
    distance encodings and subgraph GNNs such as ESAN can detect graph biconnectivity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/73874a490cdd02918773c2f31c4c5701.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure from [Dimitrov et al. (2023)](https://arxiv.org/abs/2307.01180): LHS
    shows the graph decompositions (A-C) and RHS shows the associated encoders (D-F)
    and the update equation (G).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Dimitrov et al. (2023)](https://arxiv.org/abs/2307.01180) rely on graph decompositions
    to develop dedicated architectures for learning with planar graphs. The idea is
    to align with a variation of the classical [Hopcroft & Tarjan](https://www.sciencedirect.com/science/article/pii/0020019071900196)
    algorithm for planar isomorphism testing. [Dimitrov et al. (2023)](https://arxiv.org/abs/2307.01180)
    first decompose the graph into its biconnected and triconnected components, and
    afterwards learn representations for nodes, cut nodes, biconnected components,
    and triconnected components. This is achieved using the classical structures of
    Block-Cut Trees and SPQR Trees which can be computed in linear time. The resulting
    framework is called [PlanE](https://arxiv.org/abs/2307.01180) and contains architectures
    such as [BasePlanE](https://arxiv.org/abs/2307.01180). BasePlanE computes *isomorphism-complete
    graph invariants* and hence it can distinguish any pair of planar graphs. The
    key contribution of this work is to design architectures for efficiently learning
    complete invariants of planar graphs while remaining practically scalable. It
    is worth noting that 3-FWL is known to be complete on planar graphs ([Kiefer et
    al., 2019](https://dl.acm.org/doi/10.1145/3333003)), but this algorithm is not
    scalable.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Aggregation functions: A uniform expressiveness study**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It was broadly argued that different aggregation functions have their place,
    but this had not been rigorously proven. In fact, in the non-uniform setup, sum
    aggregation with MLPs yields an injective mapping and as a result subsumes other
    aggregation functions ([Xu et al., 2020](https://arxiv.org/abs/1810.00826)), which
    builds on earlier results ([Zaheer et al., 2017](https://arxiv.org/abs/1703.06114)).
    The situation is different in the uniform setup, where one fixed model is required
    to work on *all* graphs. [Rosenbluth et al. (2023)](https://arxiv.org/abs/2302.11603)
    show that sum aggregation does not always subsume other aggregations in the uniform
    setup. If, for example, we consider an unbounded feature domain, sum aggregation
    networks cannot even approximate mean aggregation networks. Interestingly, even
    for the positive results, where sum aggregation is shown to approximate other
    aggregations, the presented constructions generally require a large number of
    layers (growing with the inverse of the approximation error).
  prefs: []
  type: TYPE_NORMAL
- en: '**Convergence and zero-one laws of GNNs on random graphs**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GNNs can in principle be applied to graphs of any size following training. This
    makes an asymptotic analysis in the size of the input graphs very appealing. Previous
    studies of the asymptotic behaviour of GNNs have focused on convergence to theoretical
    limit networks ([Keriven et al., 2020](https://arxiv.org/abs/2006.01868)) and
    their stability under the perturbation of large graphs ([Levie et al., 2021](https://arxiv.org/abs/1907.12972)).
  prefs: []
  type: TYPE_NORMAL
- en: 'In a recent study, [Adam-Day et al. (2023](https://arxiv.org/abs/2301.13060))
    proved a *zero-one law* for binary GNN classifiers. The question being tackled
    is the following: How do binary GNN classifiers behave as we draw Erdos-R√©nyi
    graphs of increasing size with random node features? The main finding is that
    the probability that such graphs are mapped to a particular output by a class
    of GNN classifiers tends to either zero or to one. That is, the model eventually
    maps either *all* graphs to zero or *all* graphs to one. This result applies to
    GCNs as well as to GNNs with sum and mean aggregation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The principal import of this result is that it establishes a novel *uniform*
    upper bound on the expressive power of GNNs: any property of graphs which can
    be uniformly expressed by these GNN architectures must obey a zero-one law. An
    example of a simple property which does not asymptotically tend to zero or one
    is that of having an even number of nodes.'
  prefs: []
  type: TYPE_NORMAL
- en: '**The descriptive complexity of GNNs**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Grohe (2023)](https://arxiv.org/abs/2303.04613) recently analysed the descriptive
    complexity of GNNs in terms of Boolean circuit complexity. The specific circuit
    complexity class of interest is TC0\. This class contains all languages which
    are decided by Boolean circuits with constant depth and polynomial size, using
    only AND, OR, NOT, and threshold [](https://en.wikipedia.org/wiki/Majority_gate)
    (or, majority) gates. [Grohe (2023)](https://arxiv.org/abs/2303.04613) proves
    that the graph functions that can be computed by a class of polynomial-size bounded-depth
    family of GNNs lie in the circuit complexity class TC0\. Furthermore, if the class
    of GNNs are allowed to use random node initialization and global readout as in
    [Abboud el al. (2020)](https://arxiv.org/abs/2010.01179) then there is a matching
    lower bound in that they can compute exactly the same functions that can be expressed
    in TC0\. This establishes an upper bound on the power of GNNs with random node
    features, by requiring the class of models to be of bounded depth (fixed #layers)
    and of size polynomial. While this result is still non-uniform, it improves the
    result of [Abboud el al. (2020)](https://arxiv.org/abs/2010.01179) where the construction
    can be worst-case exponential.'
  prefs: []
  type: TYPE_NORMAL
- en: '**A fine-grained expressivity study of GNNs**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Numerous recent works have analyzed the expressive power of MPNNs, primarily
    utilizing combinatorial techniques such as the 1-WL for the graph isomorphism
    problem. However, the graph isomorphism objective is inherently binary, not giving
    insights into the degree of similarity between two given graphs. [B√∂ker et al.
    (2023)](https://arxiv.org/abs/2306.03698) resolve this issue by deriving continuous
    extensions of both 1-WL and MPNNs to graphons. Concretely, they show that the
    continuous variant of 1-WL delivers an accurate topological characterization of
    the expressive power of MPNNs on graphons, revealing which graphs these networks
    can distinguish and the difficulty level in separating them. They provide a theoretical
    framework for graph and graphon similarity, combining various topological variants
    of classical characterizations of the 1-WL. In particular, they characterize the
    expressive power of MPNNs in terms of the tree distance, which is a graph distance
    based on the concept of fractional isomorphisms, and substructure counts via tree
    homomorphisms, showing that these concepts have the same expressive power as the
    1-WL and MPNNs on graphons. Interestingly, they also validated their theoretical
    findings by showing that randomly initialized MPNNs, without training, show competitive
    performance compared to their trained counterparts.
  prefs: []
  type: TYPE_NORMAL
- en: '**Expressiveness results for Subgraph GNNs**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Subgraph-based GNNs were already a big trend in 2022 ([Bevilacqua et al., 2022](https://arxiv.org/abs/2110.02910),
    [Qian et al., 2022](https://arxiv.org/abs/2206.11168)). This year, [Zhang et al.
    (2023b)](https://arxiv.org/abs/2302.07090) established more fine-grained expressivity
    results for such architectures. The paper investigates subgraph GNNs via the so-called
    Subgraph Weisfeiler-Leman Tests (SWL). Through this, they show a complete hierarchy
    of SWL with strictly growing expressivity. Concretely, they define equivalence
    classes for SWL-type algorithms and show that almost all existing subgraph GNNs
    fall in one of them. Moreover, the so-called SSWL achieves the maximal expressive
    power. Interestingly, they also relate SWL to several existing expressive GNNs
    architectures. For example, they show that SWL has the same expressivity as the
    local versions of 2-WL ([Morris et al., 2020](https://arxiv.org/abs/1904.01543)).
    In addition to theory, they also show that SWL-type architectures achieve good
    empirical results.
  prefs: []
  type: TYPE_NORMAL
- en: '**Expressive power of architectures for link prediction on KGs**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The expressive power of architectures such as RGCN and CompGCN for link prediction
    on knowledge graphs has been studied by [Barcel√≥ et al. (2022)](https://arxiv.org/abs/2211.17113).
    This year, [Huang et al. (2023)](https://arxiv.org/abs/2302.02209) generalized
    these results to characterize the expressive power of various other model architectures.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa233644e0a91a5ad4811e59bfe32f92.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure from [Huang et al. (2023)](https://arxiv.org/abs/2302.02209): The figure
    compares the respective mode of operations in R-MPNNs and C-MPNNs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Huang et al. (2023)](https://arxiv.org/abs/2302.02209) introduced the framework
    of conditional message passing networks ([C-MPNNs](https://arxiv.org/abs/2302.02209))
    which includes architectures such as [NBFNets](https://arxiv.org/abs/2106.06935).
    Classical relational message passing networks (R-MPNNs) are unary encoders (i.e.,
    encoding graph nodes) and rely on a binary decoder for the task of link prediction
    ([Zhang, 2021](https://arxiv.org/abs/2010.16103)). On the other hand, C-MPNNs
    serve as binary encoders (i.e., encoding pairs of graph nodes) and as a result,
    are more suitable for the binary task of link prediction. C-MPNNs are shown to
    align with a relational Weisfeiler-Leman algorithm that can be seen as a local
    approximation of 2WL. These findings explain the superior performance of NBFNets
    and alike over, e.g., RGCNs. [Huang et al. (2023)](https://arxiv.org/abs/2302.02209)
    also present uniform expressiveness results in terms of precise logical characterizations
    for the class of binary functions captured by C-MPNNs.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Over-squashing and expressivity**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Over-squashing is a phenomenon originally described by [Alon & Yahav](https://arxiv.org/abs/2006.05205)
    in 2021 as the compression of exponentially-growing receptive fields into fixed-size
    vectors. Subsequent research ([Topping et al., 2022](https://arxiv.org/abs/2111.14522),
    [Di Giovanni et al., 2023](https://arxiv.org/abs/2302.02941), [Black et al., 2023](https://arxiv.org/abs/2302.06835),
    [Nguyen et al., 2023](https://arxiv.org/abs/2211.15779)) has characterised over-squashing
    through sensitivity analysis, proving that the dependence of the output features
    on hidden representations from earlier layers, is impaired by topological properties
    such as negative curvature or large commute time. Since the graph topology plays
    a crucial role in the formation of bottlenecks, *graph rewiring*, a paradigm shift
    elevating the graph connectivity to design factor in GNNs, has been proposed as
    a key strategy for alleviating over-squashing (if you are interested, see the
    Section on **Exotic Message Passing**below).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d769b18fc6f274c8abfbebf54baa83f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For the given graph, the MPNN learns stronger mixing (tight springs) for nodes
    (v, u) and (u, w) since their commute time is small, while nodes (u, q) and (u,
    z), with high commute-time, have weak mixing (loose springs). Source: [Di Giovanni
    et al., 2023](https://arxiv.org/abs/2306.03589)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Over-squashing is an obstruction to the expressive power, for it causes GNNs
    to falter in tasks with long-range interactions. To formally study this, [Di Giovanni
    et al., 2023](https://arxiv.org/abs/2306.03589) introduce a new metric of expressivity,
    referred to as ‚Äúmixing‚Äù, which encodes the joint and nonlinear dependence of a
    graph function on pairs of nodes‚Äô features: for a GNN to approximate a function
    with large mixing, a necessary condition is allowing ‚Äústrong‚Äù message exchange
    between the relevant nodes. Hence, they postulate to measure over-squashing through
    the mixing of a GNN prediction, and prove that the depth required by a GNN to
    induce enough mixing, *as required by the task*, grows with the commute time ‚Äî
    typically much worse than the shortest-path distance. The results show how over-squashing
    hinders the expressivity of GNNs with ‚Äúpractical‚Äù size, and validate that it arises
    from the misalignment between the task (requiring strong mixing between nodes
    i and j) and the topology (inducing large commute time between i and j).'
  prefs: []
  type: TYPE_NORMAL
- en: The ‚Äúmixing‚Äù of a function pertains to the exchange of information between nodes,
    whatever this information is, and not to its capacity to separate node representations.
    In fact, these results [](https://arxiv.org/abs/2306.03589) also hold for GNNs
    more powerful than the 1-WL test. The analysis in [Di Giovanni et al., (2023)](https://arxiv.org/abs/2306.03589)
    offers an alternative approach for studying the expressivity of GNNs, which easily
    extends to equivariant GNNs in 3D space and their ability to model interactions
    between nodes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Generalization and extrapolation capabilities of GNNs**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The expressive power of MPNNs has achieved a lot of attention in recent years
    through its connection to the WL test. While this connection has led to significant
    advances in understanding and enhancing MPNNs‚Äô expressive power ([Morris et al,
    2023a](https://arxiv.org/abs/2301.11039)), it does not provide insights into their
    generalization performance, i.e., their ability to make meaningful predictions
    beyond the training set. Surprisingly, only a few notable contributions study
    MPNNs‚Äô generalization behaviors, e.g., [Garg et al. (2020](https://arxiv.org/abs/2002.06157)),
    [Kriege et al. (2018)](https://www.ijcai.org/proceedings/2018/0325.pdf), [Liao
    et al. (2021)](https://arxiv.org/abs/2012.07690), [Maskey et al. (2022)](https://arxiv.org/abs/2202.00645),
    [Scarselli et al. (2018)](https://pubmed.ncbi.nlm.nih.gov/30219742/). However,
    these approaches express MPNNs‚Äô generalization ability using only classical graph
    parameters, e.g., maximum degree, number of vertices, or edges, which cannot fully
    capture the complex structure of real-world graphs. Further, most approaches study
    generalization in the non-uniform regime, i.e., assuming that the MPNNs operate
    on graphs of a pre-specified order.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b5b9c2a9751ff78b44277f541166bbf8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure from [Morris et al. (2023b)](https://arxiv.org/abs/2301.11039): Overview
    of the generalization capabilities of MPNNs and their link to the 1-WL.'
  prefs: []
  type: TYPE_NORMAL
- en: Hence, [Morris et al. (2023b)](https://arxiv.org/abs/2301.11039) showed a tight
    connection between the expressive power of the 1-WL and generalization performance.
    They investigate the influence of graph structure and the parameters‚Äô encoding
    lengths on MPNNs‚Äô generalization by tightly connecting 1-WL‚Äôs expressivity and
    MPNNs‚Äô Vapnik‚ÄìChervonenkis (VC) dimension. To that, they show several results.
  prefs: []
  type: TYPE_NORMAL
- en: 1Ô∏è‚É£ First, in the non-uniform regime, they show that MPNNs‚Äô VC dimension depends
    tightly on the number of equivalence classes computed by the 1-WL over a set of
    graphs. In addition, their results easily extend to the k-WL and many recent expressive
    MPNN extensions.
  prefs: []
  type: TYPE_NORMAL
- en: 2Ô∏è‚É£ In the uniform regime, i.e., when graphs can have arbitrary order, they
    show that MPNNs‚Äô VC dimension is lower and upper bounded by the largest bitlength
    of its weights. In both the uniform and non-uniform regimes, MPNNs‚Äô VC dimension
    depends logarithmically on the number of colors computed by the 1-WL and polynomially
    on the number of parameters. Moreover, they also empirically show that their theoretical
    findings hold in practice to some extent.
  prefs: []
  type: TYPE_NORMAL
- en: üîÆ Predictions time!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '***Christopher Morris (RWTH Aachen)***'
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúI believe that there is a pressing need for a better and more practical theory
    of generalization of GNNs. ‚Äù ‚Äî **Christopher Morris** (RWTH Aachen)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚û°Ô∏è For example, we need to understand how graph structure and various architectural
    parameters influence generalization. Moreover, the dynamics of SGD for training
    GNNs are currently understudied and not well understood, and more works will study
    this.
  prefs: []
  type: TYPE_NORMAL
- en: '***ƒ∞smail ƒ∞lkan Ceylan (Oxford)***'
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúI hope to see more expressivity results in the uniform setting, where we fix
    the parameters of a neural network and examine its capabilities.‚Äù ‚Äî **ƒ∞smail ƒ∞lkan
    Ceylan** (Oxford)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚û°Ô∏è In this case, we can identify a better connection to generalization, because
    if a property cannot be expressed uniformly then the model cannot generalise to
    larger graph sizes.
  prefs: []
  type: TYPE_NORMAL
- en: ‚û°Ô∏è This year, we may also see expressiveness studies that target graph regression
    or graph generation, which remain under-explored. There are good reasons to hope
    for learning algorithms which are isomorphism-complete on larger graph classes,
    strictly generalizing the results for planar graphs.
  prefs: []
  type: TYPE_NORMAL
- en: ‚û°Ô∏è It is also time to develop a theory for learning with fully relational data
    (i.e., knowledge hypergraphs), which will unlock applications in relational databases!
  prefs: []
  type: TYPE_NORMAL
- en: '***Francesco Di Giovanni (Oxford)***'
  prefs: []
  type: TYPE_NORMAL
- en: In terms of future theoretical developments of GNNs, I can see two directions
    that deserve attention.
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúThere is very little understanding of the dynamics of the weights of a GNN
    under gradient flow (or SGD); assessing the impact of the graph topology on the
    evolution of the weights is key to addressing questions about generalisation and
    hardness of a task.‚Äù ‚Äî Francesco Di Giovanni (Oxford)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚û°Ô∏è Second, I believe it would be valuable to develop alternative paradigms of
    expressivity, which more directly focus on approximation power (of graph functions
    and their derivatives) and identify precisely the tasks which are hard to learn.
    The latter direction could also be particularly meaningful for characterising
    the power of equivariant GNNs in 3D space, where measurements of expressivity
    might need to be decoupled from the 2D case in order to be better aligned with
    tasks coming from the scientific domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end: a fun fact about where WL went in 2023'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c96ff616c959c6a3f3e2be22a280b3af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Portraits: Ihor Gorsky'
  prefs: []
  type: TYPE_NORMAL
- en: '**Predictions from the 2023 post**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: (1) More efforts on creating time- and memory-efficient subgraph GNNs.
  prefs: []
  type: TYPE_NORMAL
- en: ‚ùå not really
  prefs: []
  type: TYPE_NORMAL
- en: (2) Better understanding of generalization of GNNs
  prefs: []
  type: TYPE_NORMAL
- en: ‚úÖ yes, see the subsections on oversquashing and generalization
  prefs: []
  type: TYPE_NORMAL
- en: (3) Weisfeiler and Leman visit 10 new places!
  prefs: []
  type: TYPE_NORMAL
- en: ‚ùå (4 so far) [Grammatical](https://openreview.net/forum?id=eZneJ55mRO), [indifferent](https://arxiv.org/abs/2311.01205),
    [measurement modeling](https://arxiv.org/abs/2307.05775), [paths](https://arxiv.org/abs/2308.06838)
  prefs: []
  type: TYPE_NORMAL
- en: New and exotic message passing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Ben Finkelshtein (Oxford), Francesco Di Giovanni (Oxford), Petar Veliƒçkoviƒá
    (Google DeepMind)*'
  prefs: []
  type: TYPE_NORMAL
- en: '***Petar Veliƒçkoviƒá (Google DeepMind)***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Over the years, it has become part of common folklore that the development
    of message passing operators has saturated. What I find particularly exciting
    about the progress made in 2023 is that, from several independent research groups
    (including our own), a unified novel direction has emerged: let‚Äôs start considering
    the impact of ***time*** in the GNN ‚è≥.'
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúI forecast that, in 2024, time will assume a central role in the development
    of novel GNN architectures.‚Äù ‚Äî Petar Veliƒçkoviƒá (Google DeepMind)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: üí° Time has already been leveraged in GNN design when it is explicitly provided
    in the input (in spatiotemporal or fully dynamic graphs). This year, it has started
    to feature in research of GNN operators on *static* graph inputs. Several works
    are dropping the assumption of a unified, synchronised clock ‚è±Ô∏è which forces all
    messages in a layer to be sent and received at once.
  prefs: []
  type: TYPE_NORMAL
- en: 1Ô∏è‚É£ The first such work, [GwAC](https://openreview.net/forum?id=zffXH0sEJP)
    ü•ë, only played with rudimentary randomised message scheduling, but provided **proofs**
    for why such processing might yield significant improvements in expressive power.
    [Co-GNNs](https://arxiv.org/abs/2310.01267) ü§ù carry the torch further, demonstrating
    a more elaborate and fine-tuned message scheduling mechanism which is node-centric,
    allowing each node to choose when to send üì® or receive üì¨ messages. Co-GNNs also
    provide a practical method for training such schedulers by gradient descent. While
    the development of such asynchronous GNN models is highly desirable, we must also
    acknowledge the associated scalability issues ‚Äî our present frontier hardware
    is not designed to efficiently scale such sequential systems.
  prefs: []
  type: TYPE_NORMAL
- en: 2Ô∏è‚É£ In our own work on [asynchronous algorithmic alignment](https://openreview.net/forum?id=ba4bbZ4KoF),
    we instead opt to design a *synchronous* GNN, but **constrain** its message, aggregation,
    and update functions such that the GNN would yield identical embeddings even if
    parts of its dataflow were made asynchronous. This led us to an exciting journey
    through monoids, 1-cocycles, and category theory, resulting in a scalable GNN
    model that achieves superior performance on many CLRS-30 tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/95b2b7c260ab4af9b85e305ef66c3ca4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A possible execution trace of an asynchronous GNN. While traditional GNNs send
    and receive all messages synchronously, under our framework, at any step the GNN
    may choose to execute any number of possible operations (depicted here with a
    collection on the right side of the graph). Source: [Dudzik et al.](https://openreview.net/forum?id=ba4bbZ4KoF)'
  prefs: []
  type: TYPE_NORMAL
- en: ‚û°Ô∏è Lastly, it is worth noting that for certain special choices of message scheduling,
    we do not need to make modifications to synchronous GNNs‚Äô architecture ‚Äî and may
    instead resort to dynamic graph rewiring. [DREW](https://arxiv.org/abs/2305.08018)
    and [Half-Hop](https://openreview.net/forum?id=lXczFIwQkv) are two concurrently
    published papers at ICML‚Äô23 which embody the principle of using graph rewiring
    to *slow down* message passing üêå. In DREW, a message from each node is actually
    sent to every other node, but it takes *k* layers before a message will reach
    a neighbour that is *k* hops away! Half-Hop, on the other hand, takes a more lenient
    approach, and just randomly decides whether or not to introduce a ‚Äúslow node‚Äù
    which extends the path between any two nodes connected by an edge. Both approaches
    naturally alleviate the oversmoothing problem, as messages travelling longer distances
    will oversmooth less.
  prefs: []
  type: TYPE_NORMAL
- en: Whether it is used for message passing design, GNN dataflow or graph rewiring,
    in 2023 we have just started to grasp the importance of *time* ‚Äî even when time
    variation is not explicitly present in our dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '***Ben Finkelshtein (Oxford)***'
  prefs: []
  type: TYPE_NORMAL
- en: The time-dependent message passing paradigm presented in [Co-GNNs](https://arxiv.org/abs/2310.01267)
    is a learnable generalisation of message passing, which allows each node to decide
    how to propagate information from or to its neighbours, thus enabling a more flexible
    flow of information. The nodes are regarded as players that can either broadcast
    to neighbors that listen *and* listen to neighbors that broadcast (like in classical
    message-passing), Broadcast to neighbors that listen, or Isolate (neither listen
    nor broadcast).
  prefs: []
  type: TYPE_NORMAL
- en: The interplay between these actions and the ability to change them locally and
    dynamically allows CoGNNs to determine a **task-specific** computational graph
    (which can be considered as a form of **dynamic** and **directed rewiring**, learn
    different action distribution for two nodes with different node features (both
    **feature-** and **structure-based)**.CoGNNs allow **asynchronous** updates across
    nodes and also yield unique node identifiers with high probability, which allows
    them to distinguish any pair of graphs (**more expressive than 1-WL**, at the
    expense of equivariance holding only in expectation).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/832de2447364cc0ce241d969ef16d4ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left to right: classical MPNNs (all nodes broadcast & listen), DeepSets (all
    nodes isolate), and generic CoGNNs. Figure from [blog post](/co-operative-graph-neural-networks-34c59bf6805e?gi=98ca39c38e41).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the Medium post for more details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/co-operative-graph-neural-networks-34c59bf6805e?source=post_page-----3af5d38376e1--------------------------------)
    [## Co-operative Graph Neural Networks'
  prefs: []
  type: TYPE_NORMAL
- en: A new message-passing paradigm where every node can choose to either ‚Äòlisten‚Äô,
    ‚Äòbroadcast‚Äô, ‚Äòlisten & broadcast‚Äô or‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/co-operative-graph-neural-networks-34c59bf6805e?source=post_page-----3af5d38376e1--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '***Francesco Di Giovanni (Oxford)***'
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúThe understanding of over-squashing, arising when the task depends on the interaction
    between nodes with large commute time, acted as a catalyst for the emergence of
    graph rewiring as a valid approach for designing new GNNs.‚Äù ‚Äî **Francesco Di Giovanni**
    (Oxford)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ô∏èüí° *Graph rewiring* broadly entails altering the connectivity of the input graph
    to facilitate the solution of the downstream task. Recently, this has often targeted
    bottlenecks in the graph, thereby adding (and removing) edges to improve the flow
    of information. While the emphasis has been on **where** messages are exchanged,
    recent works (discussed above) have shed light on the relevance of **when** messages
    should be exchanged as well. One rationale behind these approaches, albeit often
    implicit, is that the hidden representations built by the layers of a GNN, provide
    the graph with an (artificially) *dynamic* component, even though the graph and
    input features are static. This perspective can be leveraged in several ways.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5e8ada337159c1aa6df710ba9f895619.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the classicical MPNN setting, at every layer information only travels from
    a node to its immediate neighbours. In DRew, the graph changes based on the layer,
    with newly added edges connecting nodes at distance r from layer r ‚àí 1 onward.
    Finally, in ŒΩDRew, we also introduce a delay mechanism equivalent to skip-connections
    between different nodes based on their mutual distance. Source: [Gutteridge et
    al.](https://arxiv.org/abs/2305.08018)'
  prefs: []
  type: TYPE_NORMAL
- en: '‚û°Ô∏è One framework that has particularly embraced such an angle is [**DRew**](https://arxiv.org/abs/2305.08018),
    which extends any message-passing model in two ways: (i) it connects nodes at
    distance *r* directly, but only from layer *r* onwards; (ii) when nodes are connected,
    a delay is applied to their message exchange, based on their mutual distance.
    As the figure above illustrates, (i) allows the network to better retain the inductive
    bias, as nodes that are closer, interact *earlier;* (ii) instead acts as *distance-aware*
    *skip connections,* thereby facilitating the propagation of gradients for the
    loss. Most likely, it is for this reason, and not prevention of over-smoothing
    (which hardly has an impact for graph-level tasks), that the framework significantly
    enhances the performance of standard GNNs at larger depths (more details can be
    found in this [blog post](/dynamically-rewired-delayed-message-passing-gnns-2d5ff18687c2)).'
  prefs: []
  type: TYPE_NORMAL
- en: '**üîÆ Predictions:** I believe that the deep implications of extending message-passing
    over the ‚Äútime‚Äù component would start to emerge in the coming year. Works like
    DRew have only scratched the surface of why rewiring over time (beyond space)
    might benefit the training of GNNs, drastically affecting their accuracy response
    across different depth regimes.'
  prefs: []
  type: TYPE_NORMAL
- en: ‚û°Ô∏è More broadly, I hope that theoretical and practical developments of graph
    rewiring could be translated into scientific domains, where equivariant GNNs are
    often applied to 3D problems which either do not have a natural graph structure
    (making the question of ‚Äúwhere‚Äù messages should be exchanged ever more relevant)
    or (and) exhibit natural temporal (multi-scale) properties (making the question
    of ‚Äúwhen‚Äù messages should be exchanged likely to be key for reducing memory constraints
    and retaining the right inductive bias).
  prefs: []
  type: TYPE_NORMAL
- en: Geometry, Topology, Geometric Algebras & PDEs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Johannes Brandstetter (JKU Linz), Michael Galkin (Intel), Mathilde Papillon
    (UC Santa Barbara), Bastian Rieck (Helmholtz & TUM), and David Ruhe (U Amsterdam)*'
  prefs: []
  type: TYPE_NORMAL
- en: '2023 brought the most comprehensive introduction to (and a survey of) Geometric
    GNNs covering the most basic and necessary concepts with a handful of examples:
    **A Hitchhiker‚Äôs Guide to Geometric GNNs for 3D Atomic Systems** ([Duval, Mathis,
    Joshi, Schmidt, et al.](https://arxiv.org/abs/2312.07511)). If you ever wanted
    to learn from scratch the core architectures powering recent breakthroughs of
    graph ML in protein design, material discovery, molecular simulations, and more
    ‚Äî this is what you need!'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/93b169f6f151d0760b6c3005dcaf3a49.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Timeline of key Geometric GNNs for 3D atomic systems, characterised by the
    type of intermediate representations within layers. Source: [Duval, Mathis, Joshi,
    Schmidt, et al.](https://arxiv.org/abs/2312.07511)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Topology**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'üí° Working with topological structures in 2023 has become much easier for both
    researchers and practitioners thanks to the amazing efforts of the [PyT team](https://github.com/pyt-team)
    and their suite of resources: **TopoNetX**, **TopoModelX**, and **TopoEmbedX**.
    [TopoNetX](https://github.com/pyt-team/TopoNetX) is pretty much the networkx for
    topological data. TopoNetX supports standard structures like cellular complexes,
    simplicial complexes, and combinatorial complexes. [TopoModelX](https://github.com/pyt-team/TopoModelX)
    is a PyG-like library for deep learning on topological data and implements famous
    models like [MPSN](https://arxiv.org/abs/2103.03212) and [CIN](https://arxiv.org/abs/2106.12575)
    with a neat unified interface (the original PyG implementations are quite tangled).
    [TopoEmbedX](https://github.com/pyt-team/TopoEmbedX) helps to train embedding
    models on topological data and supports core algorithms like [Cell2Vec](https://arxiv.org/abs/2010.00743).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/39ecb150b3d75cdea28e11b8d544628d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Domains: Nodes in blue, (hyper)edges in pink, and faces in dark red. Source:
    [TopoNetX](https://github.com/pyt-team/TopoNetX), [Papillon et al](https://arxiv.org/abs/2304.10031)'
  prefs: []
  type: TYPE_NORMAL
- en: üí° A great headstart to the field and basic building blocks of those topological
    networks are the papers by [Hajij et al](https://arxiv.org/abs/2206.00606) and
    by [Papillon et al](https://arxiv.org/abs/2304.10031). A notable chunk of models
    was implemented by the members of the [Topology, Algebra, and Geometry in Data
    Science](https://www.tagds.com/home) (TAG) community that regularly organizes
    topological workshops at ML conferences.
  prefs: []
  type: TYPE_NORMAL
- en: '***Mathilde Papillon (UCSB)***'
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúUntil 2023, the field of topological deep learning featured a fractured landscape
    of enriched representations for relational data.‚Äù ‚Äî Mathilde Papillon (UC Santa
    Barbara)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚û°Ô∏è Message-passing models were only built upon and benchmarked against other
    models of the same domain, e.g., the simplicial complex community remained insular
    to the hypergraph community. To make matters worse, most models adopted a unique
    mathematical notation. Deciding which model would be best suited to a given application
    seemed like a monumental task. A unification theory proposed by [Hajij et al](https://arxiv.org/abs/2206.00606)
    offered a general scheme under which all models could be systematically described
    and classified. We applied this theory to the literature to produce a comprehensive
    yet concise [survey of message passing in topological deep learning](https://arxiv.org/abs/2304.10031)
    that also serves as an accessible introduction to the field. We additionally provide
    a [dictionary listing all the model architectures](https://github.com/awesome-tnns/awesome-tnns)
    in one unifying notation.
  prefs: []
  type: TYPE_NORMAL
- en: ‚û°Ô∏è To further unify the field, we organized the first [Topological Deep Learning
    Challenge](https://pyt-team.github.io/topomodelx/challenge/index.html), hosted
    at the [2023 ICML TAG workshop](https://www.tagds.com/events/conference-workshops/tag-ml23)
    and recorded via this white paper by [Papillon et al](https://proceedings.mlr.press/v221/papillon23a.html).
    The goal was to foster reproducible research by crowdsourcing the open-source
    implementation of neural networks on topological domains. As part of the challenge,
    participants from around the world contributed implementations of pre-existing
    topological deep learning models in [TopoModelX](https://github.com/pyt-team/TopoModelX).
    Each submission was rigorously unit-tested and included benchmark training on
    datasets loaded from [TopoNetX](https://github.com/pyt-team/TopoNetX). It is our
    hope that this one-stop-shop suite of consistently implemented models will help
    practitioners test-drive topological methods for new applications and developments
    in 2024.
  prefs: []
  type: TYPE_NORMAL
- en: '***Bastian Rieck (Helmholtz & TUM)***'
  prefs: []
  type: TYPE_NORMAL
- en: 2023 was an exciting year for topology-driven machine learning methods. On the
    one hand, we saw more integrations with geometrical concepts like curvature, thus
    demonstrating the versatility of hybrid geometrical-topological models. For instance,
    in [‚ÄòCurvature Filtrations for Graph Generative Model Evaluation,‚Äô](https://arxiv.org/abs/2301.12906)
    we showed how to employ curvature as a way to select suitable graph generative
    models. Here, curvature serves as a ‚Äòlens‚Äô that we use to extract graph structure
    information, while we employ persistent homology, a topological method, to compare
    this information in a consistent fashion.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/17bc4a07a06a2f13e04b43502677d736.png)'
  prefs: []
  type: TYPE_IMG
- en: 'An overview of the pipeline for evaluating graph generative models using discrete
    curvature. The ordering on edges gives rise to a curvature filtration, followed
    by a corresponding persistence diagram and landscape. For graph generative models,
    we select a curvature, apply this framework element-wise, and evaluate the similarity
    of the generated and reference distributions by comparing their average landscapes.
    Source: [Southern, Wayland, Bronstein, and Rieck.](https://arxiv.org/abs/2301.12906)'
  prefs: []
  type: TYPE_NORMAL
- en: ‚û°Ô∏è Another direction that serves to underscore that topology-driven methods
    are becoming a staple in graph learning research uses topology to assess the expressivity
    of graph neural network models. Sometimes, as in a very fascinating work from
    NeurIPS 2023 by [Immonen et al.](https://openreview.net/pdf?id=27TdrEvqLD) this
    even leads to novel models that leverage both geometrical and topological aspects
    of graphs in tandem! My own research also aims to contribute to this facet by
    specifically analyzing the [expressivity of persistent homology in graph learning](https://arxiv.org/abs/2302.09826).
  prefs: []
  type: TYPE_NORMAL
- en: ‚Äú2023 also was the cusp of moving away ‚Äî or beyond ‚Äî persistent homology. Despite
    being rightfully seen as the paradigmatic algorithm for topology-driven machine
    learning, algebraic topology and differential topology offer an even richer fabric
    that can be used to analyse data.‚Äù ‚Äî Bastian Rieck (Helmholtz & TUM)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚û°Ô∏è With my great collaborators, we started looking at some alternatives very
    recently and came up with the concept of [neural differential forms](https://arxiv.org/abs/2312.08515).
    Differential forms permit us to elegantly build a bridge between geometry and
    topology by means of the [de Rham cohomology](https://en.wikipedia.org/wiki/De_Rham_cohomology)
    ‚Äî a way to link the integration of certain objects (differential forms), i.e.
    a fundamentally *geometric* operation, to topological characteristics of input
    data. With some additional constructions, the de Rham cohomology permits us to
    learn geometric descriptions of graphs (or higher-order combinatorial complexes)
    and solve learning tasks without having to rely on message passing. The upshot
    are models with fewer parameters that are potentially more effective at solving
    such tasks. There‚Äôs more to come here, since we have just started scratching the
    surface!
  prefs: []
  type: TYPE_NORMAL
- en: 'üîÆMy hopeful predictions for 2024 are that we will:'
  prefs: []
  type: TYPE_NORMAL
- en: 1Ô∏è‚É£ see many more diverse tools from algebraic and differential topology applied
    to graphs and combinatorial complexes,
  prefs: []
  type: TYPE_NORMAL
- en: 2Ô∏è‚É£ better understand message passing on higher-order input data, and
  prefs: []
  type: TYPE_NORMAL
- en: 3Ô∏è‚É£ finally obtain better parallel algorithms for persistent homology to truly
    unleash its power in a deep learning setting. A [recent paper on spectral sequences](https://link.springer.com/article/10.1007/s00454-023-00549-2)
    by Torras-Casas reports some very exciting results that show the great prospects
    of this technique.
  prefs: []
  type: TYPE_NORMAL
- en: '**Geometric Algebras**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Johannes Brandstetter (JKU Linz) and David Ruhe (U Amsterdam)*'
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúIn 2023, we saw the subfield of deep learning on geometric algebras (also known
    as **Clifford algebras**) take off. Previously, neural network layers formulated
    as operations on Clifford algebra *multivectors* were introduced by [Brandstetter
    et al.](https://arxiv.org/abs/2209.04934) This year, the ‚Äògeometric‚Äô in ‚Äògeometric
    algebra‚Äô was clearly put into action.‚Äù ‚Äî Johannes Brandstetter (JKU Linz) and
    David Ruhe (U Amsterdam)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ‚û°Ô∏è First, [Ruhe et al.](https://arxiv.org/abs/2302.06594) applied the quintessence
    of modern (plane-based) geometric algebra by introducing **Geometric Clifford
    Algebra Networks (GCAN)**, neural network templates that model symmetry transformations
    described by various geometric algebras. We saw an intriguing application thereof
    by [Pepe et al.](https://openaccess.thecvf.com/content/WACV2024/papers/Pepe_CGAPoseNetGCAN_A_Geometric_Clifford_Algebra_Network_for_Geometry-Aware_Camera_Pose_WACV_2024_paper.pdf)
    in **CGAPoseNet**, building a geometry-aware pipeline for camera pose regression.
    Next, [Ruhe et al.](https://arxiv.org/abs/2305.11141) introduced **Clifford Group
    Equivariant Neural Networks (CGENN)**, building steerable O(n)- and E(n)-equivariant
    (graph) neural networks of any dimension via the Clifford group. [Pepe et al.](https://openreview.net/forum?id=JNfpsiGS5E)
    apply CGENNs to a Protein Structure Prediction (PSP) pipeline, increasing prediction
    accuracies by up to 2.1%.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7a7c1ca9882edc21bb8fa7dec09ecdd4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'CGENNs (represented with œï) are able to operate on multivectors (elements of
    the Clifford algebra) in an O(n)- or E(n)-equivariant way. Specifically, when
    an action œÅ(w) of the Clifford group, representing an orthogonal transformation
    such as a rotation, is applied to the data, the model‚Äôs representations corotate.
    Multivectors can be decomposed into scalar, vector, bivector, trivector, and even
    higher-order components. These elements can represent geometric quantities such
    as (oriented) areas or volumes. The action œÅ(w) is designed to respect these structures
    when acting on them. Source: [Ruhe et al.](https://arxiv.org/abs/2305.11141)'
  prefs: []
  type: TYPE_NORMAL
- en: ‚û°Ô∏è Coincidently, [Brehmer et al.](https://arxiv.org/abs/2305.18415) formulated
    **Geometric Algebra Transformer(GATr)**, a scalable Transformer architecture that
    harnesses the benefits of representations provided by the projective geometric
    algebra and the scalability of Transformers to build E(3)-equivariant architectures.
    The GATr architecture was extended to other algebras by [Haan et al.](https://arxiv.org/abs/2311.04744)
    who also examine which flavor of geometric algebra is best suited for your E(3)-equivariant
    machine learning problem.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4c74ddc1a3b15b01636ed352b0b3b5b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Overview of the GATr architecture. Boxes with solid lines are learnable components,
    those with dashed lines are fixed. Source: [Brehmer et al.](https://arxiv.org/abs/2305.18415)'
  prefs: []
  type: TYPE_NORMAL
- en: üîÆ In 2024, we can expect exciting new applications from these advancements.
    Some examples include the following.
  prefs: []
  type: TYPE_NORMAL
- en: 1Ô∏è‚É£ We can expect explorations of their applicability to molecular data, drug
    design, neural physics emulations, crystals, etc. Other geometry-aware applications
    include 3D rendering, pose estimations, and planning for, e.g., robot arms.
  prefs: []
  type: TYPE_NORMAL
- en: 2Ô∏è‚É£ We can expect the extension of geometric algebra-based networks to other
    neural network architectures, such as convolutional neural networks.
  prefs: []
  type: TYPE_NORMAL
- en: 3Ô∏è‚É£ Next, the generality of the CGENN allows for explorations in other dimensions,
    e.g., 2D, but also in settings where data of various dimensionalities should be
    processed together. Further, they enable non-Euclidean geometries, which have
    several use cases in relativistic physics.
  prefs: []
  type: TYPE_NORMAL
- en: 4Ô∏è‚É£ Finally, GATr and CGENN can be extended and applied to projective, conformal,
    hyperbolic, or elliptic geometries.
  prefs: []
  type: TYPE_NORMAL
- en: '**PDEs**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Johannes Brandstetter (JKU Linz)*'
  prefs: []
  type: TYPE_NORMAL
- en: Concerning the landscape of neural PDE modelling, what topics have surfaced
    or gathered momentum through 2023?
  prefs: []
  type: TYPE_NORMAL
- en: 1Ô∏è‚É£ To begin, there is a noticeable trend towards modelling PDEs on and within
    intricate geometries, necessitating a mesh-based discretization of space. This
    aligns with the overarching goal to address increasingly realistic real world
    problems. For example, [Li et al](https://arxiv.org/abs/2309.00583). have introduced
    **Geometry-Informed Neural Operator (GINO)** for large-scale 3D PDEs.
  prefs: []
  type: TYPE_NORMAL
- en: 2Ô∏è‚É£ Secondly, the development of neural network surrogates for Lagrangian-based
    simulations is becoming increasingly intriguing. The Lagrangian discretization
    of space uses finite material points which are tracked as fluid parcels through
    space and time. The most prominent Lagrangian discretization scheme is called
    smoothed particle hydrodynamics (SPH), which is the numerical baseline in the
    **LagrangeBench** benchmark dataset provided by [Toshev et al.](https://arxiv.org/abs/2309.16342)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4c431332c56925e208b2421a66e4fadc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Time snapshots of our datasets, at the initial time (top), 40% (middle), and
    95% (bottom) of the trajectory. Color temperature represents velocity magnitude.
    (a) Taylor Green vortex (2D and 3D), (b) Reverse Poiseuille flow (2D and 3D),
    ¬© Lid-driven cavity (2D and 3D), (d) Dam break (2D). Source: LagrangeBench by
    [Toshev et al.](https://arxiv.org/abs/2309.16342)'
  prefs: []
  type: TYPE_NORMAL
- en: 3Ô∏è‚É£ Thirdly, diffusion-based modelling is also not stopping for PDEs. We roughly
    see two directions. The first direction recasts the iterative nature of the diffusion
    process into a refinement of a candidate state initialised from noise and conditioned
    on previous timesteps. This iterative refinement was introduced in **PDE-Refiner**
    ([Lippe et al.](https://arxiv.org/abs/2308.05732)) and a variant thereof was already
    applied in **GenCast** ([Price et al.](https://arxiv.org/abs/2312.15796)). The
    second direction exerts the probabilistic nature of diffusion models to model
    chaotic phenomena such as 3D turbulence. Examples of this can be found in **Turbulent
    Flow Simulation** ([Kohl et al.](https://arxiv.org/abs/2309.01745)) and in **From
    Zero To Turbulence** ([Lienen et al.](https://arxiv.org/abs/2306.01776)). Especially
    for 3D turbulence, there are a lot of interesting things that will happen in the
    near future.
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúWeather modelling has become a great success story over the last months. There
    is potentially much more exciting stuff to come, especially regarding weather
    forecasting directly from observational data or when building weather foundation
    models.‚Äù ‚Äî Johannes Brandstetter (JKU Linz)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'üîÆ **What to expect in 2024**:'
  prefs: []
  type: TYPE_NORMAL
- en: 1Ô∏è‚É£ More work regarding 3D turbulence modelling.
  prefs: []
  type: TYPE_NORMAL
- en: 2Ô∏è‚É£ Multi-modality aspects of PDEs might emerge. This could include combining
    different PDEs, different resolutions, or different discretization schemes. We
    are already seeing a glimpse thereof in e.g. [Multiple Physics Pretraining for
    Physical Surrogate Models](https://arxiv.org/abs/2310.02994) by McCabe et al.
  prefs: []
  type: TYPE_NORMAL
- en: '**Predictions from the 2023 post**'
  prefs: []
  type: TYPE_NORMAL
- en: (1) Neural PDEs and their applications are likely to expand to more physics-related
    AI4Science subfields; computational fluid dynamics (CFD) will potentially be influenced
    by GNN.
  prefs: []
  type: TYPE_NORMAL
- en: ‚úÖ We are seeing 3D turbulence modelling, geometry-aware neural operators, particle-based
    neural surrogates, and a huge impact in e.g. weather forecasting.
  prefs: []
  type: TYPE_NORMAL
- en: (2) GNN based surrogates might augment/replace traditional well-tried techniques.
  prefs: []
  type: TYPE_NORMAL
- en: ‚úÖ Weather forecasting has become a great success story. Neural network based
    weather forecasts overtake traditional forecasts (medium range+local forecasts),
    e.g., [GraphCast](https://www.science.org/doi/full/10.1126/science.adi2336) by
    Lam et al. and [MetNet-3](https://arxiv.org/abs/2306.06079) by Andrychowicz et
    al.
  prefs: []
  type: TYPE_NORMAL
- en: Robustness and Explainability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Kexin Huang (Stanford)*'
  prefs: []
  type: TYPE_NORMAL
- en: ‚ÄúAs GNNs are getting deployed in various domains, their reliability and robustness
    have become increasingly important, especially in safety-critical applications
    (e.g. scientific discovery) where the cost of errors is significant.‚Äù ‚Äî Kexin
    Huang (Stanford)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1Ô∏è‚É£ When discussing the reliability of GNNs, a key criterion is **uncertainty
    quantification** ‚Äî quantifying how much the model knows about the prediction.
    There are numerous works on estimating and calibrating uncertainty, also designed
    specifically for GNNs (e.g. [GATS](https://proceedings.neurips.cc/paper_files/paper/2022/hash/5975754c7650dfee0682e06e1fec0522-Abstract-Conference.html)).
    However, they fall short of achieving pre-defined target coverage (i.e. % of points
    falling into the prediction set) both theoretically and empirically. I want to
    emphasize that this notion of having a coverage guarantee is **critical** especially
    in ML deployment for scientific discovery since practitioners often trust a model
    with statistical guarantees.
  prefs: []
  type: TYPE_NORMAL
- en: '**2Ô∏è‚É£ Conformal prediction** is an exciting direction in statistics where it
    has finite sample coverage guarantees and has been applied in many domains such
    as [vision and NLP](https://arxiv.org/abs/2107.07511). But it is unclear if it
    can be used in graphs theoretically since it is not obvious if the exchangeability
    assumption holds for graph settings. In 2023, we see conformal prediction has
    been extended to graphs. Notably, [CF-GNN](https://arxiv.org/abs/2305.14535) and
    [DAPS](https://proceedings.mlr.press/v202/h-zargarbashi23a/h-zargarbashi23a.pdf)
    have derived theoretical conditions for conformal validity in transductive node-level
    prediction setting and also developed methods to reduce the prediction set size
    for efficient downstream usage. More recently, we have also seen conformal prediction
    extensions to [link prediction](https://arxiv.org/pdf/2306.14693v1.pdf), [non-uniform
    split](https://arxiv.org/abs/2306.07252), [edge exchangeability](https://openreview.net/forum?id=homn1jOKI5),
    and also adaptations for settings where exchangeability does not hold (such as
    [inductive setting](https://arxiv.org/abs/2211.14555)).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9c51e4ae0619793413247af551445751.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Conformal prediction for graph-structured data. (1) A base GNN model (GNN)
    that produces prediction scores ¬µ for node i. (2) Conformal correction. Since
    the training step is not aware of the conformal calibration step, the size/length
    of prediction sets/intervals (i.e. efficiency) are not optimized. We use a topology-aware
    correction model that takes ¬µ as the input node feature and aggregates information
    from its local subgraph to produce an updated prediction ¬µÀú. (3) Conformal prediction.
    We prove that in a transductive random split setting, graph exchangeability holds
    given permutation invariance. Thus, standard CP can be used to produce a prediction
    set/interval based on ¬µÀú that includes true label with pre-specified coverage
    rate 1-Œ±. Source: [Huang et al.](https://arxiv.org/abs/2305.14535)'
  prefs: []
  type: TYPE_NORMAL
- en: üîÆ Looking ahead, we expect more extensions to cover a wide range of GNN deployment
    use cases. Overall, I think having statistical guarantees for GNNs is very nice
    because it enables the trust of practitioners to use GNN predictions.
  prefs: []
  type: TYPE_NORMAL
- en: Graph Transformers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Chen Lin (Oxford)*'
  prefs: []
  type: TYPE_NORMAL
- en: üí° In 2023, we have seen the continuation of the rise of Graph Transformers.
    It has become the **common GNN design**, e.g., in [GATr](https://arxiv.org/abs/2305.18415),
    the authors attribute its popularity to its *‚Äúfavorable scaling properties, expressiveness,
    trainability, and versatility‚Äù*.
  prefs: []
  type: TYPE_NORMAL
- en: 1Ô∏è‚É£ **Expressiveness of GTs.** As mentioned in the GNN Theory section, recent
    work from [Cai et al. (2023)](https://arxiv.org/abs/2301.11956) shows the equivalence
    between MPNNs with a Virtural Node and GTs under a *non-uniform setting.* This
    poses a question on how powerful are GTs and what is the source of their representation
    ability. [Zhang et al. (2023)](https://arxiv.org/abs/2301.09505) successfully
    combine a new powerful positional embedding (PE) to improve the expressiveness
    of their GTs, achieving expressivity over the biconnectivity problem. This gives
    evidence of the importance of PEs to the expressiveness of GTs. A recent submission
    [GPNN](https://openreview.net/pdf?id=JfjduOxrTY) provides a clearer view on the
    central role of the positional encoding. It has been shown that one can generalize
    the proof in [Zhang et al. (2023)](https://arxiv.org/abs/2301.09505) to show how
    GTs‚Äô expressiveness is decided by various positional encodings.
  prefs: []
  type: TYPE_NORMAL
- en: '**2Ô∏è‚É£** **Positional (Structural) Encoding.** Given the importance of PE/SE
    to GTs, now we turn to the design of those expressive features usually derived
    from existing graph invariants. In 2022, [GraphGPS](https://arxiv.org/abs/2205.12454)
    observed a huge empirical success by combining GTs with various (or even multiple)
    PE/SEs. In 2023, more powerful PE/SE is available.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Relative Random Walk PE (RRWP)** proposed by [Ma et al](https://arxiv.org/abs/2305.17589)
    generalizes the random walk structural encoding with the relational part. Together
    with a new variant of attention mechanism, **GRIT** achieves a strong empirical
    performance compared with existing PE/SEs on property prediction benchmarks (SOTA
    on ZINC). Theoretically, RRWP can approximate the Shortest path distance, personalized
    PageRank, and heat kernel with a specific choice of parameters. With RRWP, GRIT
    is more expressive than SPD-WL.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/47e07c8f85dacc7c111f2918d3975ecc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'RRWP visualization for the fluorescein molecule, up to the 4th power. Thicker
    and darker edges indicate higher edge weight. Probabilities for longer random
    walks reveal higher-order structures (e.g., the cliques evident in 3-RW and the
    star patterns in 4-RW). Source: [Ma et al](https://arxiv.org/abs/2305.17589).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Puny et al](https://arxiv.org/abs/2302.11556) proposed a new theoretical framework
    for expressivity based on **Equivariant Polynomials** where the expressivity of
    common GNNs can be improved by having the polynomial features, computed with tensor
    contractions based on the equivariant basis, as positional encodings. The empirical
    results are surprising: GatedGCNs is improved from a test MAE of 0.265 to 0.106
    with the d-expressive polynomials. It will be very interesting to see if someone
    combines this with GTs in the future.'
  prefs: []
  type: TYPE_NORMAL
- en: '**3Ô∏è‚É£ Efficient GTs.** It remains challenging for GTs to be applied to large
    graphs due to the O(N¬≤) complexity. In 2023, we saw more works trying to eliminate
    such difficulty by lowering the computation complexity of GTs. [Deac et al](https://arxiv.org/abs/2210.02997)
    used [expander graphs](https://en.wikipedia.org/wiki/Expander_graph) for the propagation,
    which is regularly connected with few edges.[Exphormer](https://arxiv.org/abs/2303.06147)
    extended this idea to GT by combining expander graphs with the local neighborhood
    aggregation and virtual node. Exphormer allows graph transformers to scale to
    larger graphs (as large as *ogbn-arxiv* with 169K nodes). It also achieved strong
    empirical results and ranked top on several [Long-Range Graph Benchmark](https://github.com/vijaydwivedi75/lrgb)
    tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: üîÆ **Moving forward to 2024:**
  prefs: []
  type: TYPE_NORMAL
- en: A better understanding of self-attention‚Äôs benefits on abstract beyond expressiveness.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Big open-source pre-trained equivariant GT in 2024!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: More powerful positional encodings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: New Datasets & Benchmarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Structural biology:** Pinder from VantAI, [PoseBusters](https://arxiv.org/abs/2308.05777)
    from Oxford, [PoseCheck](https://arxiv.org/abs/2308.07413) from The Other Place,
    [DockGen](https://openreview.net/forum?id=UfBIxpTK10), and LargeMix and UltraLarge
    datasets [from Valence Labs](https://arxiv.org/abs/2310.04292)'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Temporal Graph Benchmark**](http://tgb.mila.quebec/) (TGB): Until now, progress
    in temporal graph learning has been held back by the lack of large high-quality
    datasets, as well as the lack of proper evaluation thus leading to over-optimistic
    performance. TGB addresses this by introducing a collection of seven realistic,
    large-scale and diverse benchmarks for learning on temporal graphs, including
    both node-wise and link-wise tasks. Inspired by the success of OGB, TGB automates
    dataset downloading and processing as well as evaluation protocols, and allows
    users to compare model performance using a [leaderboard](https://tgb-website.pages.dev/docs/leader_linkprop/).
    Check out the [associated blog post](/temporal-graph-benchmark-bb5cc26fcf11) for
    more details.'
  prefs: []
  type: TYPE_NORMAL
- en: '[**TpuGraphs**](https://github.com/google-research-datasets/tpu_graphs) from
    Google Research: the graph property prediction dataset of TPU computational graphs.
    The dataset provides 25x more graphs than the largest graph property prediction
    dataset (with comparable graph sizes), and 770x larger graphs on average compared
    to existing performance prediction datasets on machine learning programs. Google
    ran [Kaggle competition](https://www.kaggle.com/competitions/predict-ai-model-runtime)
    based off TpuGraphs!'
  prefs: []
  type: TYPE_NORMAL
- en: '[**LagrangeBench**](https://github.com/tumaer/lagrangebench): A Lagrangian
    Fluid Mechanics Benchmarking Suite ‚Äî where you can evaluate your favorite GNN-based
    simulator in a JAX-based environment (for JAX aficionados).'
  prefs: []
  type: TYPE_NORMAL
- en: '[**RelBench**](https://relbench.stanford.edu/): Relational Deep Learning Benchmark
    from Stanford and Kumo.AI: make time-based predictions over relational databases
    (which you can model as graphs or hypergraphs).'
  prefs: []
  type: TYPE_NORMAL
- en: '[**The GNoMe dataset**](https://github.com/google-deepmind/materials_discovery?tab=readme-ov-file#dataset)
    from Google DeepMind: 381k more novel stable materials for your materials discovery
    and ML potentials models!'
  prefs: []
  type: TYPE_NORMAL
- en: Conferences, Courses & Community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main events in the graph and geometric learning world (apart from big ML
    conferences) grow larger and more mature: [The Learning on Graphs Conference (LoG)](https://logconference.org/),
    [Molecular ML](https://www.moml.mit.edu/) (MoML), and the [Stanford Graph Learning
    Workshop](https://snap.stanford.edu/graphlearning-workshop-2023/). The LoG conference
    features a cool format with the remote-first conference and dozens of local meetups
    organized by community members spanning the whole globe from China to UK & Europe
    to the US West Coast üåèüåçüåé .'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d717711a2b7d239dc03499441d93f3bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The LoG meetups in Amsterdam, Paris, Troms√∏, and Shanghai. Source: Slack of
    the LoG community'
  prefs: []
  type: TYPE_NORMAL
- en: Courses, books, and educational resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Geometric GNN Dojo](https://github.com/chaitjo/geometric-gnn-dojo) ‚Äî a pedagogical
    resource for beginners and experts to explore the design space of GNNs for geometric
    graphs (pairs best with the recent Hitchhiker‚Äôs Guide to Geometric GNNs).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TorchCFM](https://github.com/atong01/conditional-flow-matching) ‚Äî the main
    entrypoint to the world of flow matching.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [PyT team](https://github.com/pyt-team) maintains TopoNetX, TopoModelX,
    and TopoEmbedX ‚Äî the most hands-on libraries to jump into topological deep learning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The book on [Equivariant and Coordinate Independent Convolutional Networks:
    A Gauge Field Theory of Neural Networks](https://maurice-weiler.gitlab.io/#cnn_book)
    by Maurice Weiler, Patrick Forr√©, Erik Verlinde, and Max Welling ‚Äî brings together
    the findings on the representation theory and differential geometry of equivariant
    CNNs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Surveys
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**ML for Science in Quantum, Atomistic, and Continuum systems** by well over
    60 authors from 23 institutions ([Zhang, Wang, Helwig, Luo, Fu, Xie et al.](https://arxiv.org/abs/2307.08423))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scientific discovery in the age of artificial intelligence** by [Wang et
    al](https://www.nature.com/articles/s41586-023-06221-2) published in Nature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prominent seminar series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Learning on Graphs & Geometry](https://portal.valencelabs.com/logg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Molecular Modeling and Drug Discovery (M2D2)](https://portal.valencelabs.com/m2d2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[VantAI reading group](https://www.youtube.com/@Vant_AI)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Oxford LoG2 seminar series](https://log-2.github.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slack communities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[LoGaG](https://join.slack.com/t/logag/shared_invite/zt-22y7n3k7a-FHwX31gc85yZCa0uF8BU7w)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[LOG conference](https://join.slack.com/t/logconference/shared_invite/zt-27nv8ba1y-pXspnAzgLOMdDzfKgpOafg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyG](https://data.pyg.org/slack.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memes of 2023
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/51dd958953c300da8926b7e2758c3032.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Commemorating the successes of flow matching in 2023 in the meme and unique
    t-shirts brought to NeurIPS‚Äô23\. Right: Hannes St√§rk and Michael Galkin are making
    a statement at NeurIPS‚Äô23\. Images by Michael Galkin'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fdee1c1983f3c90e78d5b1711742cdee.png)'
  prefs: []
  type: TYPE_IMG
- en: GNN aggregation functions are actually portals to category theory (Created by
    Petar Veliƒçkoviƒá)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7255c70c42c2ce3763a19bff623a6e22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Michael Bronstein continues to harass Google by demanding his [DeepMind chair](https://www.cs.ox.ac.uk/news/1996-full.html)
    at every ML conference, but so far, he has only been offered stools (photo credits:
    Jelani Nelson and Thomas Kipf).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6d7fe205e735aeb0f578f2c421c23b3f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The authors of this blog post congratulate you upon completing the long read.
    Michael Galkin and Michael Bronstein with the Meme of 2022 at ICML 2023 in Hawaii
    (Photo credit: Ben Finkelshtein)'
  prefs: []
  type: TYPE_NORMAL
- en: '*For additional articles about geometric and graph deep learning, see* [*Michael
    Galkin*](https://medium.com/@mgalkin)*‚Äôs and* [*Michael Bronstein*](https://medium.com/@michael-bronstein)*‚Äôs
    Medium posts and follow the two Michaels (*[*Galkin*](https://twitter.com/michael_galkin)
    *and* [*Bronstein*](https://twitter.com/mmbronstein)*) on Twitter.*'
  prefs: []
  type: TYPE_NORMAL
