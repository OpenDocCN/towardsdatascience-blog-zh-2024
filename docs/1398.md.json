["```py\nlibrary(lubridate)\nlibrary(dplyr)\nlibrary(xts)\nlibrary(bsts)\nlibrary(forecast)\nlibrary(tseries)\n\ndemand_data <- read.csv(\"taxi_trip_data.csv\")\ncolnames(demand_data) <- c('trip_cnt','trip_datetime') \ndemand_data$trip_datetime <- mdy_hms(demand_data$trip_datetime)\ndemand_data$rounded_day <- floor_date(demand_data$trip_datetime, unit = \"day\")\ndemand_data$rounded_month <- floor_date(demand_data$trip_datetime, unit = \"month\")\n\nmonthly_agg <- demand_data %>%\n    group_by(rounded_month) %>%\n    summarise(\n        trip_cnt = sum(trip_cnt, na.rm = TRUE)\n)\n\ndaily_agg <- demand_data %>%\n    group_by(rounded_day) %>%\n    summarise(\n        trip_cnt = sum(trip_cnt, na.rm = TRUE)\n)\n```", "```py\nzoo_data <- zoo(daily_agg$trip_cnt, order.by = daily_agg$rounded_day)\nstart_time <- as.numeric(format(index(zoo_data)[1], \"%Y\"))\nts_data <- ts(coredata(zoo_data), start = start_time, frequency = 365)\nstl_decomposition <- stl(ts_data, s.window = \"periodic\")\nplot(stl_decomposition)\n```", "```py\nadf.test(zoo_data)\nkpss.test(zoo_data)\n```", "```py\nacf(zoo_data)\n```", "```py\ntrain <- window(zoo_data, start = as.Date(\"2020-07-01\"), end = as.Date(\"2023-06-30\"))\ntest <- window(zoo_data, start = as.Date(\"2023-07-01\"), end = as.Date(\"2023-12-31\"))\n```", "```py\ntrain_log <- log(train + 1) \ntrain_diff <- diff(train, differences = 1)\n```", "```py\nss <- AddSemilocalLinearTrend(list(), train_log) \nss <- AddSeasonal(ss, train_log, nseasons = 7)\nss <- AddSeasonal(ss, train_log, nseasons = 365)\nss <- AddMonthlyAnnualCycle(ss, train_log)\nss <- AddRegressionHoliday(ss, train_log, holiday_list)\nmodel_log_opti <- bsts(train_log, state.specification = ss, niter = 5000, verbose = TRUE, seed=1014)\nsummary(model_log_opti)\n```", "```py\nchristmas <- NamedHoliday(\"Christmas\")\nnew_year <- NamedHoliday(\"NewYear\")\nthanksgiving <- NamedHoliday(\"Thanksgiving\")\nindependence_day <- NamedHoliday(\"IndependenceDay\")\nlabor_day <- NamedHoliday(\"LaborDay\")\nmemorial_day <- NamedHoliday(\"MemorialDay\")\n```", "```py\nauto.show <- DateRangeHoliday(\"Auto_show\", start = as.Date(c(\"2013-02-09\", \"2014-02-08\", \"2015-02-14\", \"2016-02-13\", \"2017-02-11\"\n                                                             , \"2018-02-10\", \"2019-02-09\", \"2020-02-08\", \"2021-07-15\", \"2022-02-12\"\n                                                             , \"2023-02-11\")), \n                              end = as.Date(c(\"2013-02-18\", \"2014-02-17\", \"2015-02-22\", \"2016-02-21\", \"2017-02-20\"\n                                                , \"2018-02-19\", \"2019-02-18\", \"2020-02-17\"\n                                                , \"2021-07-19\", \"2022-02-21\", \"2023-02-20\")))\nst.patrick <- DateRangeHoliday(\"stPatrick\", start = as.Date(c(\"2013/3/16\", \"2014/3/15\", \"2015/3/14\", \"2016/3/12\"\n                                                              , \"2017/3/11\", \"2018/3/17\", \"2019/3/16\", \"2020/3/14\"\n                                                              , \"2021/3/13\", \"2022/3/12\", \"2023/3/11\")), \n                              end = as.Date(c(\"2013/3/16\", \"2014/3/15\", \"2015/3/14\", \"2016/3/12\"\n                                                              , \"2017/3/11\", \"2018/3/17\", \"2019/3/16\", \"2020/3/14\"\n                                                              , \"2021/3/13\", \"2022/3/12\", \"2023/3/11\")))\nair.show <- DateRangeHoliday(\"air_show\", start = as.Date(c(\"2013/8/17\", \"2014/8/16\", \"2015/8/15\", \"2016/8/20\"\n                                                           , \"2017/8/19\", \"2018/8/18\", \"2019/8/17\"\n                                                           , \"2021/8/21\", \"2022/8/20\", \"2023/8/19\")), \n                              end = as.Date(c(\"2013/8/18\", \"2014/8/17\", \"2015/8/16\", \"2016/8/21\", \"2017/8/20\"\n                                              , \"2018/8/19\", \"2019/8/18\", \"2021/8/22\", \"2022/8/21\", \"2023/8/20\")))\nlolla <- DateRangeHoliday(\"lolla\", start = as.Date(c(\"2013/8/2\", \"2014/8/1\", \"2015/7/31\", \"2016/7/28\", \"2017/8/3\"\n                                                     , \"2018/8/2\", \"2019/8/1\", \"2021/7/29\", \"2022/7/28\", \"2023/8/3\")), \n                              end = as.Date(c(\"2013/8/4\", \"2014/8/3\", \"2015/8/2\", \"2016/7/31\", \"2017/8/6\", \"2018/8/5\"\n                                              , \"2019/8/4\", \"2021/8/1\", \"2022/7/31\", \"2023/8/6\")))\nmarathon <- DateRangeHoliday(\"marathon\", start = as.Date(c(\"2013/10/13\", \"2014/10/12\", \"2015/10/11\", \"2016/10/9\", \"2017/10/8\"\n                                                        , \"2018/10/7\", \"2019/10/13\", \"2021/10/10\", \"2022/10/9\", \"2023/10/8\")), \n                              end = as.Date(c(\"2013/10/13\", \"2014/10/12\", \"2015/10/11\", \"2016/10/9\", \"2017/10/8\"\n                                                        , \"2018/10/7\", \"2019/10/13\", \"2021/10/10\", \"2022/10/9\", \"2023/10/8\")))\n```", "```py\nholiday_list <- list(auto.show, st.patrick, air.show, lolla, marathon\n              , christmas, new_year, thanksgiving, independence_day\n              , labor_day, memorial_day)\n```", "```py\nfitted_values <- as.numeric(residuals.bsts(model_log_opti, mean.only=TRUE)) + as.numeric(train_log)\ntrain_hat <- exp(fitted_values) - 1\nplot(as.numeric(train), type = \"l\", col = \"blue\", ylim=c(500, 30000), main=\"Fitted result\")\nlines(train_hat, col = \"red\")\nlegend(\"topleft\", legend = c(\"Actual value\", \"Fitted value\"), col = c(\"blue\", \"red\"), lty = c(1, 1), lwd = c(1, 1))\n```", "```py\nhorizon <- length(test)\npred_log_opti <- predict(model_log_opti, horizon = horizon, burn = SuggestBurn(.1, ss))\nforecast_values_log_opti <- exp(pred_log_opti$mean) - 1\n```", "```py\nplot(as.numeric(test), type = \"l\", col = \"blue\", ylim=c(500, 30000), main=\"Forecast result\", xlab=\"Time\", ylab=\"Trip count\")\nlines(forecast_values_log_opti, col = \"red\")\nlegend(\"topleft\", legend = c(\"Actual value\", \"Forecast value\"), col = c(\"blue\", \"red\"), lty = c(1, 1), lwd = c(1, 1))\n```", "```py\nPlotHoliday(thanksgiving, model_log_opti)\nPlotHoliday(marathon, model_log_opti)\n```"]