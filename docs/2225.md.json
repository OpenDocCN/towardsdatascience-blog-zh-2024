["```py\nt1 = [a,a,a,a,a,b] # repr. as {a,b} in FIM\nt2 = [a,b] # repr. as {a,b} in FIM\n```", "```py\n# multiset representation\nt1_ms = {(a,5),(b,1)}\nt2_ms = {(a,1),(b,1)}\n```", "```py\ndata['item_id'] = pd.factorize(data.Itemname)[0].astype(str) # map item names to id\ndata[\"Value_Int\"] = data[\"Value\"].astype(int).astype(str)\ndata = data.loc[data.Value_Int != '0'] # exclude items w/o utility\n\ntransaction_db = data.groupby('BillNo').agg(\n    items=('item_id', lambda x: ' '.join(list(x))),\n    total_value=('Value', lambda x: int(x.sum())),\n    values=('Value_Int', lambda x: ' '.join(list(x))),\n)\n\n# filter out long transactions, only use subset of transactions\ntransaction_db = transaction_db.loc[transaction_db.num_items < 10].iloc[:1000]\n```", "```py\nimport PAMI.highUtilityPattern.basic.EFIM as efim \n\nobj = efim.EFIM('tdb.csv', minUtil=1000, sep=' ') \nobj.startMine()                       #start the mining process \nobj.save('out.txt')               #store the patterns in file \nresults = obj.getPatternsAsDataFrame()     #Get the patterns discovered into a dataframe \nobj.printResults() \n```"]