["```py\nSELECT\n id,\n    date,\n    region,\n    revenue,\n    SUM(revenue) OVER () as total_revenue\nFROM\n    sales\n```", "```py\nSUM([some_column]) OVER (PARTITION BY [some_columns] ORDER BY [some_columns])\n```", "```py\nSELECT\n    id,\n    date,\n    region,\n    revenue,\n    SUM(revenue) OVER (PARTITION BY region) as region_total,\n    SUM(revenue) OVER () as total_revenue\nFROM sales\n```", "```py\nSELECT\n    id,\n    date,\n    region,\n    revenue,\n    SUM(revenue) OVER (PARTITION BY \n          region, \n          date_trunc('quarter', date)\n    ) AS region_quarterly_revenue\nFROM sales\n```", "```py\nSELECT\n    id,\n    date,\n    region,\n    revenue,\n    SUM(revenue) OVER (ORDER BY id) as running_total\nFROM sales\n```", "```py\nSELECT\n    id,\n    date,\n    region,\n    revenue,\n    SUM(revenue) OVER (PARTITION BY region ORDER BY date) as running_total\nFROM sales\n```", "```py\nSELECT\n    id,\n    date,\n    region,\n    revenue,\n    SUM(revenue) OVER (ORDER BY id ROWS BETWEEN 1 PRECEDING AND 2 FOLLOWING) \n    AS useless_sum\nFROM\n    sales\n```", "```py\nSELECT\n    *,\n    RANK() OVER (PARTITION BY region ORDER BY revenue DESC) as rank,\n    RANK() OVER (ORDER BY revenue DESC) as overall_rank\nFROM\n    sales\nORDER BY region, revenue DESC\n```", "```py\nSELECT\n    *,\n    COUNT() OVER (ORDER BY timestamp) as normal_count,\n    COUNT(temperature) OVER (ORDER BY timestamp) as group_count\nfrom sensor\n```", "```py\nSELECT\n    *,\n    FIRST_VALUE(temperature) OVER (PARTITION BY group_count) as filled_v1,\n    MAX(temperature) OVER (PARTITION BY group_count) as filled_v2\nFROM (\n    SELECT\n        *,\n        COUNT(temperature) OVER (ORDER BY timestamp) as group_count\n    from sensor\n) as grouped\nORDER BY timestamp ASC\n```"]