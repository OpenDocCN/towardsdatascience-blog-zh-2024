- en: Everything You Need to Know About Graph Databases & Neo4j
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/everything-you-need-to-know-about-graph-databases-neo4j-b9154f57dad0?source=collection_archive---------3-----------------------#2024-07-26](https://towardsdatascience.com/everything-you-need-to-know-about-graph-databases-neo4j-b9154f57dad0?source=collection_archive---------3-----------------------#2024-07-26)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Understanding graph databases: key concepts and benefits'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@martin-jurran?source=post_page---byline--b9154f57dad0--------------------------------)[![Martin
    Jurran](../Images/f34f11741f9a7b8c0ccb42ef0509a04a.png)](https://medium.com/@martin-jurran?source=post_page---byline--b9154f57dad0--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b9154f57dad0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b9154f57dad0--------------------------------)
    [Martin Jurran](https://medium.com/@martin-jurran?source=post_page---byline--b9154f57dad0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b9154f57dad0--------------------------------)
    ¬∑13 min read¬∑Jul 26, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/76c848deb3e7080a6e3b77e8a0318e7b.png)'
  prefs: []
  type: TYPE_IMG
- en: (Photo by the author, illustrations by [Takashi Mifune under free use](https://www.irasutoya.com/p/terms.html))
  prefs: []
  type: TYPE_NORMAL
- en: Storing and processing data is an elementary task of software engineering. In
    the early days of large-scale professional development, relational databases such
    as Oracle, IBM DB2 and SQL were dominant. Data manipulation systems cannot easily
    work with structural or relational data, but only with flat data representations.
    [1] Graph databases try to bridge the gap between relational and flat data representations,
    while making it easier to access information. [2] The most popular representative
    of this type of database is Neo4j. [[3](https://db-engines.com/en/ranking/graph+dbms)]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Transactions of all types in today‚Äôs world are becoming increasingly digitally
    dependent. That is, because there is a significant rise in the usage of cards
    and e-payment methods in most countries (e.g., Germany). [4] As transactions become
    more digital, indicators such as IC3 complaint statistics hint that digital criminal
    activities are increasing as well. [10] TransUnion for example, a vendor for payment
    processing software, reported a global 149% increase in digital fraud attempts.
    [5]
  prefs: []
  type: TYPE_NORMAL
- en: Without using graph databases, the transactions and relationships of people
    involved in such activities need to be modeled in a relational way. But, it is
    substantially easier to model and access relationship data if it is modeled in
    a more suitable type of database ‚Äî a graph database.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs dive into some example to see where graph databases come in handy.
  prefs: []
  type: TYPE_NORMAL
- en: Example 1 ‚Äî Uncovering the Panama Papers ‚öñÔ∏è
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/c1fd9c45abd4fa33e4f581ee42c6db8e.png)'
  prefs: []
  type: TYPE_IMG
- en: The Panama Papers Neo4j database data model. [13] (Photo by the author)
  prefs: []
  type: TYPE_NORMAL
- en: In the year 2016, gigantic quantities of documents were leaked to German journalist
    Bastian Obermayer from the newspaper [S√ºddeutsche Zeitung](https://panamapapers.sueddeutsche.de/).
    [6]
  prefs: []
  type: TYPE_NORMAL
- en: The documents leaked contain clues for tax evasion and money laundry on a scale
    never seen before. The leak is made up of 2.6 terabytes of data, consisting of
    11.5 million individual documents. [7]
  prefs: []
  type: TYPE_NORMAL
- en: In order to process and investigate data that is mainly made of relational data
    between business actors, a graph-based approach is obvious. Mentioned people and
    companies can serve as *1) nodes* while the type and properties of the relationships
    serve as *2) edges.* In the feature image of this section, you see how the Panama
    Papers were modeled in Neo4j.
  prefs: []
  type: TYPE_NORMAL
- en: Example 2 ‚Äî Property Management Ô∏èüõ´Ô∏è
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/fe75850499e56996d8e71a00ae058a1e.png)'
  prefs: []
  type: TYPE_IMG
- en: Example on how to model a property management use case in Neo4j (Photo by the
    author, illustrations by [Takashi Mifune under Takashi Mifune under free use](https://www.irasutoya.com/p/terms.html))
  prefs: []
  type: TYPE_NORMAL
- en: As someone who has spent too much time in an airport can attest, there are countless
    objects with relationships to each other present at an airport.
  prefs: []
  type: TYPE_NORMAL
- en: From planes to terminals to gates and restaurants, each element of the airport
    is interconnected and relies on a multitude of relationships to function smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: That‚Äôs what the graph database can support. By mapping out the airport, terminals,
    planes, restaurants, and more as nodes on a graph, and their relationships as
    edges, property managers can gain a deeper understanding of the airport‚Äôs operations.
  prefs: []
  type: TYPE_NORMAL
- en: Example 3 ‚Äî Train Operations at JR East üöÜ
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/1740580807574c8c4a3ecc3e5480d9a1.png)'
  prefs: []
  type: TYPE_IMG
- en: The result of our Cypher query against the example of Tokyo public transport.
    [[14](https://github.com/ggszk/neo4j-train-route-sample)] (Photo by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Public Transport involves many different objects, like stations and platforms,
    that have connections with each other.
  prefs: []
  type: TYPE_NORMAL
- en: These connections can have extra details, like the time it takes to travel from
    one point to another in a public transport network.
  prefs: []
  type: TYPE_NORMAL
- en: An example of this kind of network is the train lines and stations in Tokyo.
    When we load them into Neo4j, we can run queries in its query language, called
    Cypher to gather information about these objects and their connections. [14]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The feature picture in this section shows the outcome of our query. To check
    if our results are correct, I used Google Maps to calculate the route, and to
    my surprise, the outcome was the same as the one retrieved with Cypher. It must
    be easy to implement route optimization algorithms with Neo4j.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9c4e04f5791876321ee691c3f034de0a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Viewing Cypher query results in Google Maps: Our output makes sense and Neo4j
    helped calculating the shortest route. (Photo by the author)'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to give it a try yourself, I have forked the original repository
    and included the Cypher file with my request. For the best experience with this
    example, it is recommended that you have some basic knowledge of Japanese. Enjoy!
    ü§ó
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/martinjurran/neo4j-train-route-sample?source=post_page-----b9154f57dad0--------------------------------)
    [## GitHub - martinjurran/neo4j-train-route-sample: A Sample database for shortest
    path queries or trip‚Ä¶'
  prefs: []
  type: TYPE_NORMAL
- en: A Sample database for shortest path queries or trip planning queries using Neo4j(in
    Japanese). ‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/martinjurran/neo4j-train-route-sample?source=post_page-----b9154f57dad0--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Alternatives to Graph Databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are lots of scenarios that can be displayed with graphs. These data could
    also be stored in relational databases ‚Äî tables per object type with foreign keys
    modeling their relations to other objects. The data processing could then be implemented
    with Joins in *SQL*-Queries. With the trend towards using *NoSQL*-solutions [[8](https://neo4j.com/blog/hello-world-neo4j-inc/)],
    it became more acceptable to use database variants besides *SQL* depending on
    the specific use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you‚Äôre wondering if a graph database is the right choice for you, take a
    look at this overview:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f7d80ac6c19881e153780f518a475125.png)'
  prefs: []
  type: TYPE_IMG
- en: Important database types with their typical usage and most popular represenatives
    (Photo by the author)
  prefs: []
  type: TYPE_NORMAL
- en: The Graph Database Neo4j
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first and probably the most famous representative of graph databases is
    Neo4j. The name was intended to be NeoDB, but NeoDB.com was already taken at launch
    time, so the team decided to name the application Neo4j.
  prefs: []
  type: TYPE_NORMAL
- en: The word Neo is the Latin word for new, which is inspired by the character Neo
    in the movie Matrix. [[19](https://twitter.com/emileifrem/status/712327903032188928)]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4j means *‚Äúfor Java‚Äù*. [[8](https://neo4j.com/blog/hello-world-neo4j-inc/),
    [9](https://www.youtube.com/watch?v=YB723cp9jgM)]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Today, Neo4j is not a Java embedded application anymore, but a piece of history
    remains in its name.
  prefs: []
  type: TYPE_NORMAL
- en: History of Neo4j
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/1fdb03997b6a1c139560251dcaff8819.png)'
  prefs: []
  type: TYPE_IMG
- en: Self-created timeline of important events in Neo4j‚Äôs history (Photo by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '**2000: Conceptualization.** The founders were bothered by a Content Management
    System (*CMS*), which was based on a relational database (*RDMBS*) called Informix.
    [[15](https://neo4j.com/blog/db-engines-informix-neo4j/?ref=blog)]. Implementing
    their use cases within the *CMS* resulted in writing a lot of complicated SQL
    queries, which became increasingly hard to maintain.'
  prefs: []
  type: TYPE_NORMAL
- en: The founders thought of their data as being connected to each other, one of
    paths between our related items of content, metadata, tags, and metatags for that
    content [[12](https://neo4j.com/blog/evolution-neo4j-native-graph-database/)],
    which finally led to the development of the property graph model.
  prefs: []
  type: TYPE_NORMAL
- en: '**2000‚Äì2002: Graph layer over RDMBS.** The first step was to write a graph
    layer on top of a relational database [[12](https://neo4j.com/blog/evolution-neo4j-native-graph-database/)]
    called Informix. [[15](https://neo4j.com/blog/db-engines-informix-neo4j/?ref=blog)]'
  prefs: []
  type: TYPE_NORMAL
- en: '**2002: First Version of Neo4j.** The graph layer on top of Informix presented
    some challenges. The issue was, that Informix wasn‚Äôt optimized to handle all the
    relationships between their graph-alike data. [[15](https://neo4j.com/blog/db-engines-informix-neo4j/?ref=blog)]'
  prefs: []
  type: TYPE_NORMAL
- en: Faced with the challenge of using an RDBMS for connected data, the developers
    decided to create a new kind of database optimized for connected data. [[15](https://neo4j.com/blog/db-engines-informix-neo4j/?ref=blog)]
  prefs: []
  type: TYPE_NORMAL
- en: '**2007: Invention of the word graph database.** The word graph database was
    invented by Emil Eifrem and is being based upon one of Facebook marketing statements
    that ‚Äúwe are a utility for the socialgraph‚Äù. He combined the words graph and database,
    and that‚Äôs how the word *graph database* was born. [[16](https://neo4j.com/news/birth-graph-databases-neo4j-built-product-category/)]
    [[17](https://www.forbes.com/sites/alastairdryburgh/2017/03/22/growth-stories-the-magical-power-of-a-name/#49b4ebe56db9)]'
  prefs: []
  type: TYPE_NORMAL
- en: '**2007: Founding of Neo4j Technologies.** The company was founded, but was
    primarily involved in consulting, as there was no own product to sell yet. [[17](https://www.forbes.com/sites/alastairdryburgh/2017/03/22/growth-stories-the-magical-power-of-a-name/#49b4ebe56db9)]'
  prefs: []
  type: TYPE_NORMAL
- en: '**2007: Graph database became fully native.** The prototype became a fully
    native graph database. [[18](https://neo4j.com/open-source-project/)] It started
    out as an embedded Java database. [[8](https://neo4j.com/blog/hello-world-neo4j-inc/)]'
  prefs: []
  type: TYPE_NORMAL
- en: '**2010: Release of Neo4j 1.0\.** [[18](https://neo4j.com/open-source-project/)]'
  prefs: []
  type: TYPE_NORMAL
- en: '**2011: Development of Cypher.** The first ever declarative query language
    for property graphs has been created. [[18](https://neo4j.com/open-source-project/)]
    It is inspired by MS Visio‚Äôs placing objects and relationships on an UI and it
    is therefor a very human querying model. [[8](https://neo4j.com/blog/hello-world-neo4j-inc/)]'
  prefs: []
  type: TYPE_NORMAL
- en: Over the time, Neo4j has evolved from a prototype drafted on a plane ride [[21](https://www.youtube.com/watch?v=Nhi4XwmCh9A)],
    into a standalone database application, satisfying its customers needs. These
    needs also reflect in the architecture of the solution, which is covered subsequently.
  prefs: []
  type: TYPE_NORMAL
- en: Stakeholders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To discover the architecture of *Neo4j*, it is important to understand the Stakeholders
    which might influence architectural decisions, as outlined by *Rozanski and Woods*.
    [20]
  prefs: []
  type: TYPE_NORMAL
- en: The following Power Interest Grid lists the application‚Äôs stakeholders and puts
    them into perspective to visualize their likelihood of influence on architectural
    decisions.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cdd79a2e981acf8278ad4e70c8e48d14.png)'
  prefs: []
  type: TYPE_IMG
- en: Power/Interest Grid of Neo4j (Photo by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Those stakeholders with high levels of both power and interest, such as Neo4j
    investors [[22](https://www.crunchbase.com/organization/neo-technology)], Neo4j
    Inc. themselves, and their partners [[23](https://neo4j.com/partners/directory/)],
    have significant influence over software architecture decisions. They need to
    be closely managed. [[24](https://www.projectmanagement.com/wikis/368897/stakeholder-analysis--using-the-power-interest-grid)]
  prefs: []
  type: TYPE_NORMAL
- en: While the needs and demands of enterprise customers are taken into account,
    their influence is relatively limited as they do not have the same level of investment
    in the software as other stakeholders. They need to stay satisfied. [[24](https://www.projectmanagement.com/wikis/368897/stakeholder-analysis--using-the-power-interest-grid)]
  prefs: []
  type: TYPE_NORMAL
- en: Competitors may influence Neo4j‚Äôs direction indirectly by challenging their
    market position. Developers usually have the stack set for their product and are
    not having enough power to influence Neo4j‚Äôs architecture individually. They shall
    be monitored. [[24](https://www.projectmanagement.com/wikis/368897/stakeholder-analysis--using-the-power-interest-grid)]
  prefs: []
  type: TYPE_NORMAL
- en: The *open-source community* and *individual contributors,* play an important
    role in shaping the conversation around the software architecture and discovering
    bugs. Still, they have limited influence. The right choice is to keep them informed.
    [[24](https://www.projectmanagement.com/wikis/368897/stakeholder-analysis--using-the-power-interest-grid)]
  prefs: []
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To better understand the architecture that Neo4j is based on, it is important
    to know its current dependencies and how they are shaping Neo4j into the solution
    it is now.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d6eb89fbb5fd323668111b7c8510da6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Dependency context of Neo4j (Photo by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Architectural Goals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The table below presents the primary architectural goals of Neo4j, where the
    order depicts their importance. Now, let‚Äôs explore the various techniques used
    by the software to accomplish these goals.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f07db01393b3f195e9440e59931b0a6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Hitting all the architectural targets (Photo by the author, illustrations by
    [Takashi Mifune under Takashi Mifune under free use](https://www.irasutoya.com/p/terms.html))
  prefs: []
  type: TYPE_NORMAL
- en: '**1\.** üü¢ **Ease of use.** It‚Äôs a standalone platform with graph-native data
    modeling, a user-friendly querying language called Cypher, and thorough developer
    documentation that‚Äôs easy to understand. That‚Äôs what‚Äôs making it easy to work
    with Neo4j and all the involved stakeholders are having a good experience. (*Developer
    Perspective*)'
  prefs: []
  type: TYPE_NORMAL
- en: '**2\.** üü† **Performance.** Neo4j is graph-native database that‚Äôs equipped with
    a variety of optimizations to ensure fast query response times for complex graph
    data. The platform also boasts high concurrency and consistency features. Additionally,
    graph algorithms are running very efficiently.'
  prefs: []
  type: TYPE_NORMAL
- en: '**3\.** üîµ **Reliability.** It‚Äôs important for any database platform to be reliable.
    Neo4j is achieving that through ACID transactions, monitoring, event logging,
    TLS wire encryption, and permission systems.'
  prefs: []
  type: TYPE_NORMAL
- en: '**4\.** üü£ **Security.** When data is involved, security is especially important.
    Neo4j‚Äôs achieves security through event logging, TLS wire encryption, fine-grained
    permission systems, and data-at-rest encryption.'
  prefs: []
  type: TYPE_NORMAL
- en: '**5\.** üü° **Interoperability.** Able to operate on all relevant target systems.
    Easily integrable into existing environments. A huge variety of clients for data
    access are supported.'
  prefs: []
  type: TYPE_NORMAL
- en: '**6\.** üî¥**Availability.** Able to operate in clusters, which is increasing
    availability to meet enterprise demands.'
  prefs: []
  type: TYPE_NORMAL
- en: '**7\.** üü§ **Scalability.** Scalable both horizontally and vertically to handle
    increasing amounts of data and query volume.'
  prefs: []
  type: TYPE_NORMAL
- en: '**8\.** ‚ö™ **Extensibility.** Both Neo4j development team and external community
    developers can easily extend the solution. That‚Äôs valid for both modifying existing
    components and adding new functionalities. Neo4j is open for new technological
    and methodical trends.'
  prefs: []
  type: TYPE_NORMAL
- en: üü¢ **Ease of use**
  prefs: []
  type: TYPE_NORMAL
- en: Most developers have at least a basic understanding of how relational databases
    work, but graph-based solutions are new to most. For Neo4j‚Äôs success, it is crucial
    that developers can adapt the solution quickly and build working products without
    any unnecessary barriers.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5627e39dd1704c8a932f0dad501128e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Conceptional and implemented data model for public transport (Photo by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Supporting developers in their adaption is, that graph databases usually equal
    their concept data model. They are schema-free, like most NoSQL solutions. Data
    is being represented as nodes and edges.
  prefs: []
  type: TYPE_NORMAL
- en: Non-developers can explore data through the interactive Neo4j browser. This
    includes everything from initial ideas on a whiteboard to developing queries in
    the Cypher language, which is equivalent to SQL.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8c8765504ebfb8761d242c01f1d9ee75.png)'
  prefs: []
  type: TYPE_IMG
- en: Exploring data in the Neo4j Browser, based on the result of a Cypher query (Photo
    by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Neo4j‚Äôs ability to efficiently execute complicated queries with connections
    over many *nodes* and *edges* is mainly due to its dedicated graph data model.
    Relationships are directly materialized as a data structure in the database, allowing
    ‚Äúpointers‚Äù to be traversed without many sub-queries and joins. Neo4j is not based
    on an existing database but is a highly specialized implementation.
  prefs: []
  type: TYPE_NORMAL
- en: üü† **Performance**
  prefs: []
  type: TYPE_NORMAL
- en: Neo4j is a highly optimized, graph-native database, which is optimized to handle
    large scale graph operations. Graph queries are executed much faster and more
    efficiently, since all the related data is stored in one place and reflected as
    graphs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, Neo4j implements several performance optimizations speficially implemented
    for graphs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**B-trees**](https://en.wikipedia.org/wiki/B-tree) **for fast retrieval of
    nodes and edges** in a graph dataset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I**ndexing tailor-made for graph data** with the option to define multiple indexed
    on one property
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‚ö™ **Extensibility**
  prefs: []
  type: TYPE_NORMAL
- en: Neo4j offers official Bolt drivers for .NET, Java, JavaScript, Go, and Python.
    Community implementations are also available for C/C++ and PHP. Plus, it‚Äôs possible
    to access Neo4j‚Äôs database via its HTTP API regardless of the programming language
    you are using.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes developers need to extend the capabilities of the Neo4j database by
    creating their own procedures or functions. Neo4j has plugins and unmanaged server
    extensions for HTTP endpoints that allow for this. Documentation is available
    for implementation in JVM languages.
  prefs: []
  type: TYPE_NORMAL
- en: Neo4j provides many ways to extend its functionality and stay up-to-date with
    trends. Developers can use Bolt and HTTP access protocols through Cypher or create
    their own plugins to improve the Neo4j software.
  prefs: []
  type: TYPE_NORMAL
- en: Recent updates to Neo4j include GraphQL integration and connectors for popular
    streaming solutions like Kafka and Spark. Additionally, Neo4j offers a [Graph
    Data Science library](https://neo4j.com/docs/graph-data-science/current/) that
    provides various algorithms and machine learning modeling options to cover use
    cases related to data analytics and machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: '**The Big Picture (**üü¢/üü†/üîµ/üü£/üü°/üî¥/üü§/‚ö™)'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we‚Äôve explored some individual architectural goals and how Neo4j addresses
    them, let‚Äôs take a step back and visualize the big picture.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine a graph of interconnected architectural goals, where each node represents
    a specific goal, such as data consistency or availability, and each relationship
    represents how those goals are related or dependent on each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c09162dc76a8d14b5a770417f8c7146b.png)'
  prefs: []
  type: TYPE_IMG
- en: Enterprise architectural target diagram of Neo4j (Photo by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Architectural Structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand how Neo4j implements its architectural goals in general, we should
    look at the solution from a more technical perspective.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6b1d7c35406237aaef2debe9e4c16f91.png)'
  prefs: []
  type: TYPE_IMG
- en: Rough overview about a typical Neo4j setup [22] (Photo by the author)
  prefs: []
  type: TYPE_NORMAL
- en: '**Advantages of Neo4j for software architects**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you have received all that information on graph databases and Neo4j. But,
    how can that help you? Utilizing a graph database can have immediate positive
    effects for you and your work:'
  prefs: []
  type: TYPE_NORMAL
- en: High performance for complex queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greater flexibility in data modeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ability to handle unstructured data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improved scalability and availability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easier integration with other technologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Greater business agility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Neo4j has gained recognition in modern software architecture due to its capabilities
    for handling graphs. But today, it is way more than the all-purpose-answer for
    handling graph data.
  prefs: []
  type: TYPE_NORMAL
- en: For today‚Äôs software architects, it is important to choose specialised databases
    for certain use cases, instead of building whole solutions based around one data
    backend. That is especially valid as microservice architecture still continues
    to be on the rise.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven‚Äôt already, I personally encourage you to explore some test use
    cases to discover the power of graph databases and how they can benefit you. Whether
    it‚Äôs logistics, finance, healthcare, social media, or e-commerce, graph databases
    can provide insights that traditional databases cannot.
  prefs: []
  type: TYPE_NORMAL
- en: Sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1, 2] Silvescu, Adrian & Caragea, Doina & Atramentov, Anna. (2002). Graph
    Databases.'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] DB-Engines Ranking of Graph DBMS 2024 [https://db-engines.com/en/ranking/graph+dbms)](https://db-engines.com/en/ranking/graph+dbms))'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] Deutsche Bundesbank (2022, Juli 7). Payment behaviour in Germany in 2021\.
    [https://www.bundesbank.de/en/press/press-releases/payment-behaviour-in-germany-in-2021-894120](https://www.bundesbank.de/en/press/press-releases/payment-behaviour-in-germany-in-2021-894120)'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] Leonhardt, M. (2021, June 3). Online fraud attempts are up 25% in the US
    ‚Äî here‚Äôs why. *CNBC*. [https://www.cnbc.com/2021/06/03/why-online-fraud-attempts-are-up-25percent-in-the-us.html](https://www.cnbc.com/2021/06/03/why-online-fraud-attempts-are-up-25percent-in-the-us.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[6] Clark, Nicola (April 5, 2016). [‚ÄúHow a Cryptic Message, ‚ÄòInterested in
    Data?,‚Äô Led to the Panama Papers‚Äù](https://www.nytimes.com/2016/04/06/business/media/how-a-cryptic-message-interested-in-data-led-to-the-panama-papers.html).
    *The New York Times*. [ISSN](https://en.wikipedia.org/wiki/ISSN_(identifier))
    [0362‚Äì4331](https://www.worldcat.org/issn/0362-4331). [Archived](https://web.archive.org/web/20160815215759/http://www.nytimes.com/2016/04/06/business/media/how-a-cryptic-message-interested-in-data-led-to-the-panama-papers.html)
    from the original on August 15, 2016.'
  prefs: []
  type: TYPE_NORMAL
- en: '[7] [‚ÄúAbout the Panama Papers Investigations‚Äù](https://www.icij.org/investigations/panama-papers/pages/panama-papers-about-the-investigation/).
    *International Consortium of Investigative Journalists*. January 31, 2018\. [Archived](https://web.archive.org/web/20200724235914/https://www.icij.org/investigations/panama-papers/pages/panama-papers-about-the-investigation/)
    from the original on July 24, 2020.'
  prefs: []
  type: TYPE_NORMAL
- en: '[8] Emil Eifrem (2017 Jul 27), Hello, World: Neo4j, Inc. [https://neo4j.com/blog/hello-world-neo4j-inc/](https://neo4j.com/blog/hello-world-neo4j-inc/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[9] Dr. Jim Webber (2022, June 8). [A Personal History of Neo4j](https://www.youtube.com/watch?v=YB723cp9jgM&t=201s).
    *Neo4j Inc.* [https://www.youtube.com/watch?v=YB723cp9jgM](https://www.youtube.com/watch?v=YB723cp9jgM)'
  prefs: []
  type: TYPE_NORMAL
- en: '[10] Federal Bureu of Investigation (2023). Internet Crime Report. [https://www.ic3.gov/Media/PDF/AnnualReport/2023_IC3Report.pdf](https://www.ic3.gov/Media/PDF/AnnualReport/2023_IC3Report.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[11] Gopala Kr (2017). Neo4j Architecture. [https://github.com/gopala-kr/10-weeks/blob/master/Projects-Blogs/07-bigdata-databases/neo4j-architecture.md](https://github.com/gopala-kr/10-weeks/blob/master/Projects-Blogs/07-bigdata-databases/neo4j-architecture.md)'
  prefs: []
  type: TYPE_NORMAL
- en: '[12] Dr. Jim Webber (2017, May 2), The Engineering Evolution of Neo4j into
    a Native Graph Database. [https://neo4j.com/blog/evolution-neo4j-native-graph-database/](https://neo4j.com/blog/evolution-neo4j-native-graph-database/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[13] William Lyon (2018, December 3), Graph Visualization of Panama Papers
    Data in Neo4j, [https://medium.com/neo4j/graph-visualization-of-panama-papers-data-in-neo4j-9c08ca17039c](https://medium.com/neo4j/graph-visualization-of-panama-papers-data-in-neo4j-9c08ca17039c)'
  prefs: []
  type: TYPE_NORMAL
- en: '[14] ggszk (2020), Neo4j sample database: Tokyo railway routes (in Japanese),
    [https://github.com/ggszk/neo4j-train-route-sample](https://github.com/ggszk/neo4j-train-route-sample)'
  prefs: []
  type: TYPE_NORMAL
- en: '[15] Emil Eifrem (2016, Mar 29), DB-Engines, Informix and Neo4j: An Origins
    Story, [https://neo4j.com/blog/db-engines-informix-neo4j/?ref=blog](https://neo4j.com/blog/db-engines-informix-neo4j/?ref=blog)'
  prefs: []
  type: TYPE_NORMAL
- en: '[16] Emil Eifrem (Unknown), The birth of graph databases: How Neo4j built its
    product and category, [https://neo4j.com/news/birth-graph-databases-neo4j-built-product-category/](https://neo4j.com/news/birth-graph-databases-neo4j-built-product-category/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[17] Alastair Dryburgh (2007, Mar 22), Growth Stories: The magical power of
    a name, [https://www.forbes.com/sites/alastairdryburgh/2017/03/22/growth-stories-the-magical-power-of-a-name/#49b4ebe56db9](https://www.forbes.com/sites/alastairdryburgh/2017/03/22/growth-stories-the-magical-power-of-a-name/#49b4ebe56db9)'
  prefs: []
  type: TYPE_NORMAL
- en: '[18] Neo4j Inc, The History of Neo4j ‚Äî Open Source, Big Community, [https://neo4j.com/open-source-project/](https://neo4j.com/open-source-project/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[19] Emil Eifrem (2016, Mar 22), Twitter Post, [https://twitter.com/emileifrem/status/712327903032188928](https://twitter.com/emileifrem/status/712327903032188928)'
  prefs: []
  type: TYPE_NORMAL
- en: '[20] Rozanski, Nick, and E√≥in Woods. Software systems architecture: working
    with stakeholders using viewpoints and perspectives. Addison-Wesley, 2012.'
  prefs: []
  type: TYPE_NORMAL
- en: '[21] Emil Eifrem, (2022, August 8), The first code of this database was written
    in IIT Bombay, [https://www.youtube.com/watch?v=Nhi4XwmCh9A](https://www.youtube.com/watch?v=Nhi4XwmCh9A)'
  prefs: []
  type: TYPE_NORMAL
- en: '[22] Crunchbase, Neo4j Profile, [https://www.crunchbase.com/organization/neo-technology](https://www.crunchbase.com/organization/neo-technology)'
  prefs: []
  type: TYPE_NORMAL
- en: '[23] Neo4j Inc, Partner Directory, [https://neo4j.com/partners/directory/](https://neo4j.com/partners/directory/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[24] Latha Thamma Reddi (2023, Apr 14), Stakeholder Analysis using the Power
    Interest Grid, [https://www.projectmanagement.com/wikis/368897/stakeholder-analysis--using-the-power-interest-grid](https://www.projectmanagement.com/wikis/368897/stakeholder-analysis--using-the-power-interest-grid)'
  prefs: []
  type: TYPE_NORMAL
- en: Pictograms by [„Åã„Çè„ÅÑ„ÅÑ„Éï„É™„ÉºÁ¥†ÊùêÈõÜ „ÅÑ„Çâ„Åô„Å®„ÇÑ (irasutoya.com)](https://www.irasutoya.com/),
    ¬© Takashi Mifune
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cda231b38af31aa11c49c38bee9c0acc.png)'
  prefs: []
  type: TYPE_IMG
- en: (Photo by the author, Illustrations by [Takashi Mifune under free use](https://www.irasutoya.com/p/terms.html))
  prefs: []
  type: TYPE_NORMAL
