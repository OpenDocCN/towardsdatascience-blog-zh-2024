- en: Models, MLFlow, and Microsoft Fabric
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型、MLFlow 和 Microsoft Fabric
- en: 原文：[https://towardsdatascience.com/models-mlflow-and-microsoft-fabric-8faacaa90814?source=collection_archive---------7-----------------------#2024-04-29](https://towardsdatascience.com/models-mlflow-and-microsoft-fabric-8faacaa90814?source=collection_archive---------7-----------------------#2024-04-29)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/models-mlflow-and-microsoft-fabric-8faacaa90814?source=collection_archive---------7-----------------------#2024-04-29](https://towardsdatascience.com/models-mlflow-and-microsoft-fabric-8faacaa90814?source=collection_archive---------7-----------------------#2024-04-29)
- en: Fabric Madness part 5
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fabric 疯狂系列 第 5 部分
- en: '[](https://medium.com/@roger_noble?source=post_page---byline--8faacaa90814--------------------------------)[![Roger
    Noble](../Images/869b5b0f237f24b119ca6c41c2e31162.png)](https://medium.com/@roger_noble?source=post_page---byline--8faacaa90814--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--8faacaa90814--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--8faacaa90814--------------------------------)
    [Roger Noble](https://medium.com/@roger_noble?source=post_page---byline--8faacaa90814--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@roger_noble?source=post_page---byline--8faacaa90814--------------------------------)[![Roger
    Noble](../Images/869b5b0f237f24b119ca6c41c2e31162.png)](https://medium.com/@roger_noble?source=post_page---byline--8faacaa90814--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--8faacaa90814--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--8faacaa90814--------------------------------)
    [Roger Noble](https://medium.com/@roger_noble?source=post_page---byline--8faacaa90814--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--8faacaa90814--------------------------------)
    ·6 min read·Apr 29, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--8faacaa90814--------------------------------)
    ·6分钟阅读·2024年4月29日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/bd8a2c9a78a66c843fc0e9dcee09acce.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bd8a2c9a78a66c843fc0e9dcee09acce.png)'
- en: Image by author and ChatGPT. “Design an illustration, with imagery representing
    multiple machine learning models, focusing on basketball data” prompt. ChatGPT,
    4, OpenAI, 25th April. 2024\. [https://chat.openai.com.](https://chat.openai.com./)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者与 ChatGPT 提供的插图。 “设计一幅插图，展示多个机器学习模型，聚焦于篮球数据”提示。ChatGPT，4，OpenAI，2024年4月25日。[https://chat.openai.com.](https://chat.openai.com./)
- en: '*A Huge thanks to* [*Martim Chaves*](https://medium.com/@mgrc99) *who co-authored
    this post and developed the example scripts.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*非常感谢* [*Martim Chaves*](https://medium.com/@mgrc99) *他与我共同编写了这篇文章并开发了示例脚本。*'
- en: So far in this series, we’ve looked at how to use Fabric for collecting data,
    feature engineering, and training models.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本系列中，我们已经探讨了如何使用 Fabric 来收集数据、进行特征工程和训练模型。
- en: But now that we have our shiny new models, what do we do with them? How do we
    keep track of them, and how do we use them to make predictions? This is where
    MLFlow’s Model Registry comes in, or what Fabric calls an **ML Model**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在我们已经有了这些崭新的模型，我们该怎么做呢？如何追踪它们，如何利用它们进行预测呢？这就是 MLFlow 的模型注册表发挥作用的地方，或者说是 Fabric
    所称的**ML 模型**。
- en: A model registry allows us to keep track of different versions of a model and
    their respective performances. This is especially useful in production scenarios,
    where we need to deploy a specific version of a model for inference.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 模型注册表允许我们追踪模型的不同版本及其相应的表现。在生产环境中尤其有用，我们需要部署特定版本的模型来进行推理。
- en: A Model Registry can be seen as source control for ML Models. Fundamentally,
    each version represents a distinct set of model files. These files contain the
    model’s architecture, its trained weights, as well as any other files necessary
    to load the model and use it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 模型注册表可以看作是机器学习模型的源代码管理。基本上，每个版本代表一组独特的模型文件。这些文件包含了模型的架构、训练好的权重，以及任何其他必要的文件，用于加载和使用该模型。
- en: In this post, we’ll discuss how to log models and how to use the model registry
    to keep track of different versions of a model. We’ll also discuss how to load
    a model from the registry and use it to make predictions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将讨论如何记录模型，并且如何使用模型注册表来追踪模型的不同版本。我们还将讨论如何从注册表中加载模型并用其进行预测。
- en: Registering a Model
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册模型
- en: 'There are two ways to register a model in Fabric: via code or via the UI. Let’s
    look at both.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Fabric 中注册模型有两种方式：通过代码或通过 UI。让我们来看看这两种方式。
- en: Registering a Model using code
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用代码注册模型
- en: In the [previous post](https://medium.com/towards-data-science/experimenting-with-mlflow-and-microsoft-fabric-68f43043ff34)
    we looked at creating experiments and logging runs with different configurations.
    Logging or registering a model can be done using code within a run. To do that,
    we just have to add a couple of lines of code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在[上一篇文章](https://medium.com/towards-data-science/experimenting-with-mlflow-and-microsoft-fabric-68f43043ff34)中，我们讨论了如何创建实验并记录具有不同配置的运行。记录或注册模型可以通过在运行中使用代码来完成。为此，我们只需添加几行代码。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this code snippet, we first calculate the predictions for the training set.
    Then create a signature, which is essentially the input and output shape of the
    model. This is necessary to ensure that the model can be loaded later on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个代码片段中，我们首先计算训练集的预测结果。然后创建一个签名，这本质上是模型的输入和输出形状。这是为了确保模型以后可以加载。
- en: MLFlow has functions to log models made with different commonly used packages,
    such as [TensorFlow](https://www.tensorflow.org/), [PyTorch](https://pytorch.org/),
    and [scikit-learn](https://scikit-learn.org/). When `mlflow.tensorflow.log_model`
    is used, a folder is saved, as an artifact, attached to the run, containing the
    files needed to load and run the model. In these files, the architecture along
    with with trained weights of the model and any other configuration necessary for
    reconstruction are found. This makes it possible to load the model later, either
    to do inference, fine-tune it, or any other regular model operations without having
    to re-run the original code that created it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: MLFlow 具有用于记录不同常用包（如[TensorFlow](https://www.tensorflow.org/)、[PyTorch](https://pytorch.org/)
    和 [scikit-learn](https://scikit-learn.org/)）制作的模型的功能。当使用 `mlflow.tensorflow.log_model`
    时，一个文件夹作为工件保存，并附加到运行中，其中包含加载和运行模型所需的文件。在这些文件中，包含了模型的架构、训练好的权重以及重建所需的任何其他配置。这使得以后可以加载模型进行推理、微调或任何其他常规模型操作，而无需重新运行最初创建它的代码。
- en: The model’s URI is used as a “path” to the model file, and is made up of the
    run ID and the name of the file used for the model. Once we have the model’s URI,
    we can register a ML Model, using the model’s URI.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 模型的 URI 用作指向模型文件的“路径”，由运行 ID 和用于模型的文件名组成。一旦我们获得了模型的 URI，就可以使用该 URI 注册一个 ML 模型。
- en: What’s neat about this is that if a model with the same name already exists,
    a new version is added. That way we can keep track of different versions of the
    same model, and see how they perform without having overly complex code to manage
    this.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，如果已经存在同名的模型，将会添加一个新版本。这样，我们可以跟踪同一模型的不同版本，并查看它们的表现，而无需编写过于复杂的代码来管理这些版本。
- en: In our [previous post](https://medium.com/towards-data-science/experimenting-with-mlflow-and-microsoft-fabric-68f43043ff34),
    we ran three experiments, one for each model architecture being tested with three
    different learning rates. For each model architecture, an ML Model was created,
    and for each learning rate, a version was saved. In total we now have 9 versions
    to choose from, each with a different architecture and learning rate.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的[上一篇文章](https://medium.com/towards-data-science/experimenting-with-mlflow-and-microsoft-fabric-68f43043ff34)中，我们进行了三个实验，每个实验测试一种模型架构，并使用三种不同的学习率。对于每种模型架构，都会创建一个
    ML 模型，对于每种学习率，也会保存一个版本。总共有 9 个版本可供选择，每个版本具有不同的架构和学习率。
- en: Registering a Model using the UI
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 UI 注册模型
- en: An **ML Model** can also be registered via Fabric’s UI. Model versions can be
    imported from the experiments that have been created.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**ML 模型**也可以通过 Fabric 的 UI 进行注册。可以从已创建的实验中导入模型版本。'
- en: '![](../Images/d47fd08d8ffde05970072caa90913ab2.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d47fd08d8ffde05970072caa90913ab2.png)'
- en: Fig. 1 — Creating a ML Model using the UI. Image by author.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1 — 使用 UI 创建 ML 模型。图片来自作者。
- en: After creating an ML Model, we can import a model from an existing experiment.
    To do that, in a run, we have to select `Save` in the `Save run as an ML Model`
    section.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 ML 模型后，我们可以从现有实验中导入模型。为此，在一次运行中，我们需要在 `Save run as an ML Model` 部分选择 `Save`。
- en: '![](../Images/21455e93691763f2cd58ffa22dd3fecd.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/21455e93691763f2cd58ffa22dd3fecd.png)'
- en: Fig. 2 — Creating a new version of the created ML Model from a run. Image by
    author.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2 — 从一次运行中创建已创建的 ML 模型的新版本。图片来自作者。
- en: Selecting Best Model
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择最佳模型
- en: Now that we have registered all of the models, we can select the best one. This
    can be done either via the UI or code. This can be done by opening each experiment,
    selecting the `list view`, and selecting all of the available runs. After finding
    the best run, we would have to check which model and version that would be.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经注册了所有模型，可以选择最佳的一个。可以通过UI界面或代码实现。具体方法是打开每个实验，选择`列表视图`，然后选择所有可用的运行记录。找到最佳运行记录后，我们需要确认是哪一个模型和版本。
- en: '![](../Images/2cb6393da3ecff62cba4ab6a74ce2394.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2cb6393da3ecff62cba4ab6a74ce2394.png)'
- en: Fig. 3 — Inspecting Experiment. Image by author.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图3 — 检查实验。图像由作者提供。
- en: Alternatively, it can also be done via code, by getting all of the versions
    of all of the ML Models performance, and selecting the version with the best score.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，这也可以通过代码实现，获取所有机器学习模型的所有版本的性能，并选择表现最佳的版本。
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this code snippet, we get a list of all of the available ML Models. Then,
    we iterate over this list and get all of the available versions of each ML Model.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们获取所有可用的机器学习模型列表。然后，我们遍历这个列表，获取每个机器学习模型的所有可用版本。
- en: 'Getting a list of the versions of an ML Model can be done using the following
    line:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 获取机器学习模型的版本列表可以使用以下代码行：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, for each version, we simply have to get its metric history. That can
    be done with the following line:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，对于每个版本，我们只需要获取其指标历史记录。这可以通过以下代码行实现：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: After that, we simply have to keep track of the best performing version. At
    the end of this, we had found the best performing model overall, regardless of
    architecture and hyperparameters.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们只需要追踪表现最好的版本。最终，我们找到了表现最佳的模型，不论其架构和超参数如何。
- en: Loading the Best Model
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载最佳模型
- en: 'After finding the best model, using it to get the final predictions can be
    done using the following code snippet:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在找到最佳模型后，使用该模型进行最终预测可以通过以下代码片段实现：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Loading the model can be done using `mlflow.pyfunc.load_model()`, and the only
    argument that is needed is the model's path. The path of the model is made up
    of its name and version, in a `models:/[model name]/[version]` format. After that,
    we just have to make sure that the input is the same shape and the features are
    in the same order as when it was trained - and that's it!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 加载模型可以使用`mlflow.pyfunc.load_model()`，唯一需要的参数是模型的路径。模型的路径由模型名称和版本组成，格式为`models:/[model
    name]/[version]`。之后，我们只需确保输入的形状与训练时相同，并且特征的顺序也一致——就这样！
- en: Using the test set, we calculated the final Brier Score, **0.20**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用测试集，我们计算了最终的Brier分数，**0.20**。
- en: Conclusion
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this post we discussed the ideas behind a model registry, and why it’s beneficial
    to use one. We showed how Fabric’s model registry can be used, through the ML
    Model tool, either via the UI or code. Finally, we looked at loading a model from
    the registry, to do inference.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们讨论了模型注册表背后的理念，以及为什么使用模型注册表是有益的。我们展示了如何通过机器学习模型工具使用Fabric的模型注册表，既可以通过UI界面，也可以通过代码实现。最后，我们介绍了如何从注册表加载模型并进行推理。
- en: This concludes our Fabric series. We hope you enjoyed it and that you learned
    something new. If you have any questions or comments, feel free to reach out to
    us. We’d love to hear from you! 👋
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 本系列教程到此为止。我们希望你喜欢这篇文章，并且学到了新知识。如果你有任何问题或评论，欢迎与我们联系。我们期待你的反馈！👋
- en: '*Originally published at* [*https://nobledynamic.com*](https://nobledynamic.com/posts/fabric-madness-5/)
    *on April 29, 2024.*'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*原文发布于* [*https://nobledynamic.com*](https://nobledynamic.com/posts/fabric-madness-5/)
    *2024年4月29日。*'
