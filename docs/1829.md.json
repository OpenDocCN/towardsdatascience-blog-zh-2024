["```py\nmkdir GenSlide\n```", "```py\nGenSlide\n├── frontend\n│   ├── llm_call.py\n│   ├── slide_deck.py\n│   ├── slide_gen.py\n│   └── ui.py\n├── llm-service\n│   ├── consts.py\n│   └── gpt.py\n└── requirements.txt\n```", "```py\npillow==10.3.0\nlxml==5.2.2\nXlsxWriter==3.2.0\npython-pptx==0.6.23\ngpt4all==2.7.0\nFlask==2.2.5\nFlask-Cors==4.0.0\nstreamlit==1.34.0\n```", "```py\npython -m venv ./venv\nsource ./venv/bin/activate\npip install -r requirements.txt\n```", "```py\nmkdir llm-service\n```", "```py\nLLM_MODEL_NAME = \"Meta-Llama-3-8B-Instruct.Q4_0.gguf\"\n```", "```py\nPROMPT = \"\"\"\nSummarize the input text and arrange it in an array of JSON objects to to be suitable for a powerpoint presentation. \n                    Determine the needed number of json objects (slides) based on the length of the text. \n                    Each key point in a slide should be limited to up to 10 words. \n                    Consider maximum of 5 bullet points per slide. \n                    Return the response as an array of json objects. \n                    The first item in the list must be a json object for the title slide. \n                    This is a sample of such json object:\n{\n\"id\": 1,\n\"title_text\": \"My Presentation Title\",\n\"subtitle_text\": \"My presentation subtitle\",\n\"is_title_slide\": \"yes\"\n}\n And here is the sample of json data for slides:\n{\"id\": 2, title_text\": \"Slide 1 Title\", \"text\": [\"Bullet 1\", \"Bullet 2\"]},\n{\"id\": 3, title_text\": \"Slide 2 Title\", \"text\": [\"Bullet 1\", \"Bullet 2\", \"Bullet 3\"]}\n\nPlease make sure the json object is correct and valid. \nDon't output explanation. I just need the JSON array as your output.\n\"\"\"\n```", "```py\nfrom flask import Flask, request\nfrom flask_cors import CORS\nimport traceback\nimport logging\nimport os\nfrom consts import LLM_MODEL_NAME, PROMPT\n\nfrom gpt4all import GPT4All\n```", "```py\nlogger = logging.getLogger()\n\nHOST = '0.0.0.0'\nPORT = 8081\n\napp = Flask(__name__)\nCORS(app)\n```", "```py\ntry:\n    base_folder = os.path.dirname(__file__)\n    base_folder = os.path.dirname(base_folder)\n    gpt_models_folder = os.path.join(base_folder, \"gpt_models/gpt4all/\")\n    if not os.path.exists(gpt_models_folder):\n        os.makedirs(gpt_models_folder, exist_ok=True)\n    model_folder = os.environ.get(\"MODEL_PATH\", gpt_models_folder)\n    llm_model = GPT4All(model_name=LLM_MODEL_NAME, model_path=model_folder)\nexcept Exception:\n    raise ValueError(\"Error loading LLM model.\")\n```", "```py\ndef generate_text(content):\n    prompt = PROMPT + f\"\\n{content}\"\n\n    with llm_model.chat_session():\n        output = llm_model.generate(prompt, temp=0.7, max_tokens=1024)\n        output = output.strip()\n\n        return output\n```", "```py\n@app.route('/api/completion', methods=['POST'])\ndef completion():\n    try:\n        req = request.get_json()\n        words = req.get('content')\n        if not words:\n            raise ValueError(\"No input word.\")\n        output = generate_text(words)\n        return output, 200\n    except Exception:\n        logger.error(traceback.format_exc())\n        return \"Error\", 500\n```", "```py\nif __name__ == '__main__':\n    # run web server\n    app.run(host=HOST,\n            debug=True,  # automatic reloading enabled\n            port=PORT)\n```", "```py\nmkdir frontend\n```", "```py\nimport requests\n\nURL = \"http://127.0.0.1:8081\"\n\nCHAT_API_ENDPOINT = f\"{URL}/api/completion\"\n\ndef chat_completion_request(content):\n    headers = {'Content-type': 'application/json'}\n    data = {'content': content}\n\n    req = requests.post(url=CHAT_API_ENDPOINT, headers=headers, json=data)\n    json_extracted = req.text\n    return json_extracted\n```", "```py\nimport os\n\nfrom pptx import Presentation\nfrom pptx.util import Inches\n\nclass SlideDeck:\n\n    def __init__(self, output_folder=\"generated\"):\n        self.prs = Presentation()\n        self.output_folder = output_folder\n\n    def add_slide(self, slide_data):\n        prs = self.prs\n        bullet_slide_layout = prs.slide_layouts[1]\n        slide = prs.slides.add_slide(bullet_slide_layout)\n        shapes = slide.shapes\n\n        # Title\n        title_shape = shapes.title\n        title_shape.text = slide_data.get(\"title_text\", \"\")\n\n        # Body\n        if \"text\" in slide_data:\n            body_shape = shapes.placeholders[1]\n            tf = body_shape.text_frame\n            for bullet in slide_data.get(\"text\", []):\n                p = tf.add_paragraph()\n                p.text = bullet\n                p.level = 0\n\n                if \"p1\" in slide_data:\n                    p = tf.add_paragraph()\n                    p.text = slide_data.get(\"p1\")\n                    p.level = 1\n\n        if \"img_path\" in slide_data:\n            cur_left = 6\n            for img_path in slide_data.get(\"img_path\", []):\n                top = Inches(2)\n                left = Inches(cur_left)\n                height = Inches(4)\n                pic = slide.shapes.add_picture(img_path, left, top, height=height)\n                cur_left += 1\n\n    def add_title_slide(self, title_page_data):\n        # title slide\n        prs = self.prs\n        title_slide_layout = prs.slide_layouts[0]\n        slide = prs.slides.add_slide(title_slide_layout)\n        title = slide.shapes.title\n        subtitle = slide.placeholders[1]\n        if \"title_text\" in title_page_data:\n            title.text = title_page_data.get(\"title_text\")\n        if \"subtitle_text\" in title_page_data:\n            subtitle.text = title_page_data.get(\"subtitle_text\")\n\n    def create_presentation(self, title_slide_info, slide_pages_data=[]):\n        try:\n            file_name = title_slide_info.get(\"title_text\").\\\n                lower().replace(\",\", \"\").replace(\" \", \"-\")\n            file_name += \".pptx\"\n            file_name = os.path.join(self.output_folder, file_name)\n            self.add_title_slide(title_slide_info)\n            for slide_data in slide_pages_data:\n                self.add_slide(slide_data)\n\n            self.prs.save(file_name)\n            return file_name\n        except Exception as e:\n            raise e\n```", "```py\nimport json\nimport os\n\nfrom slide_deck import SlideDeck\nfrom llm_call import chat_completion_request\n\nFOLDER = \"generated\"\n\nif not os.path.exists(FOLDER):\n    os.makedirs(FOLDER)\n```", "```py\ndef generate_json_list_of_slides(content):\n    try:\n        resp = chat_completion_request(content)\n        obj = json.loads(resp)\n        return obj\n    except Exception as e:\n        raise e\n\ndef generate_presentation(content):\n    deck = SlideDeck()\n    slides_data = generate_json_list_of_slides(content)\n    title_slide_data = slides_data[0]\n    slides_data = slides_data[1:]\n    return deck.create_presentation(title_slide_data, slides_data)\n```", "```py\nimport traceback\nimport streamlit as st\n\nfrom slide_gen import generate_presentation\n\ndef create_ui():\n    st.write(\"\"\"\n# Gen Slides\n### Generating powerpoint slides for your text\n\"\"\")\n\n    content = st.text_area(label=\"Enter your text:\", height=400)\n    try:\n        if content:\n            filename = generate_presentation(content)\n            st.write(f\"file {filename} is generated.\")\n    except Exception:\n        st.write(\"Error in generating slides.\")\n        st.write(traceback.format_exc())\n\nif __name__ == \"__main__\":\n    create_ui()\n```", "```py\ncd llm-service\npython gpt.py\n```", "```py\ncd ..\ncd frontend\nstreamlit run ui.py\n```", "```py\nArtificial Intelligence is an idea that has been captivating society since the mid-20th century.\nIt began with science fiction familiarizing the world with the concept but the idea wasn't fully seen in the scientific manner until Alan Turing, a polymath, was curious about the feasibility of the concept.\nTuring's groundbreaking 1950 paper, \"Computing Machinery and Intelligence,\" posed fundamental questions about machine reasoning similar to human intelligence, significantly contributing to the conceptual groundwork of AI.\nThe development of AI was not very rapid at first because of the high costs and the fact that computers were not able to store commands.\nThis changed during the 1956 Dartmouth Summer Research Project on AI where there was an inspiring call for AI research, setting the precedent for two decades of rapid advancements in the field.\n```"]