- en: Measuring the Cost of Production Issues on Development Teams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/measuring-the-cost-of-production-issues-on-development-teams-5efcd13bc9c7?source=collection_archive---------8-----------------------#2024-12-11](https://towardsdatascience.com/measuring-the-cost-of-production-issues-on-development-teams-5efcd13bc9c7?source=collection_archive---------8-----------------------#2024-12-11)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Deprioritizing quality sacrifices both software stability and velocity, leading
    to costly issues. Investing in quality boosts speed and outcomes.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@davettran13?source=post_page---byline--5efcd13bc9c7--------------------------------)[![David
    Tran](../Images/d9efbf43b3059ca6b855d417d41b243d.png)](https://medium.com/@davettran13?source=post_page---byline--5efcd13bc9c7--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--5efcd13bc9c7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--5efcd13bc9c7--------------------------------)
    [David Tran](https://medium.com/@davettran13?source=post_page---byline--5efcd13bc9c7--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--5efcd13bc9c7--------------------------------)
    ·8 min read·Dec 11, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5b74a24780110b6aa90f8e6b380af5ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author. (AI generated Midjourney)
  prefs: []
  type: TYPE_NORMAL
- en: Investing in software quality is often easier said than done. Although many
    engineering managers express a commitment to high-quality software, they are often
    cautious about allocating substantial resources toward quality-focused initiatives.
    Pressed by tight deadlines and competing priorities, leaders frequently face tough
    choices in how they allocate their team’s time and effort. As a result, investments
    in quality are often the first to be cut.
  prefs: []
  type: TYPE_NORMAL
- en: The tension between investing in quality and prioritizing velocity is pivotal
    in any engineering organization and especially with more cutting-edge data science
    and machine learning projects where delivering results is at the forefront. Unlike
    traditional software development, ML systems often require continuous updates
    to maintain model performance, adapt to changing data distributions, and integrate
    new features. Production issues in ML pipelines — such as data quality problems,
    model drift, or deployment failures — can disrupt these workflows and have cascading
    effects on business outcomes. Balancing the speed of experimentation and deployment
    with rigorous quality assurance is crucial for ML teams to deliver reliable, high-performing
    models. By applying a structured, scientific approach to quantify the cost of
    production issues, as outlined in this blog post, ML teams can make informed decisions
    about where to invest in quality improvements and optimize their development velocity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Quality often faces a formidable rival: velocity. As pressure to meet business
    goals and deliver critical features intensifies, it becomes challenging to justify
    any approach that doesn’t directly'
  prefs: []
  type: TYPE_NORMAL
- en: drive output. Many teams reduce non-coding activities to the bare minimum, focusing
    on unit tests while deprioritizing integration tests, delaying technical improvements,
    and relying on observability tools to catch production issues — hoping to address
    them only if they arise.
  prefs: []
  type: TYPE_NORMAL
- en: Balancing velocity and quality is rarely a straightforward choice, and this
    post doesn’t aim to simplify it. However, what leaders often overlook is that
    velocity and quality are deeply connected. By deprioritizing initiatives that
    improve software quality, teams may end up with releases that are both bug-ridden
    and slow. Any gains from pushing more features out quickly
  prefs: []
  type: TYPE_NORMAL
- en: can quickly erode, as maintenance problems and a steady influx of issues ultimately
    undermine the team’s velocity.
  prefs: []
  type: TYPE_NORMAL
- en: Only by understanding the full impact of quality on velocity and the expected
    ROI of quality initiatives can leaders make informed decisions about balancing
    their team’s backlog.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this post, we will attempt to provide a model to measure the ROI of investment
    in two aspects of improving release quality: reducing the number of production
    issues, and reducing the time spent by the teams on these issues when they occur.'
  prefs: []
  type: TYPE_NORMAL
- en: Escape defects, the bugs that make their way to production
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Preventing regressions is probably the most direct, top-of-the-funnel measure
    to reduce the overhead of production issues on the team. Issues that never occurred
    will not weigh the team down, cause interruptions, or threaten business continuity.
  prefs: []
  type: TYPE_NORMAL
- en: As appealing as the benefits might be, there is an inflection point after which
    defending the code from issues can slow releases to a grinding halt. Theoretically,
    the team could triple the number of required code reviews, triple investment in
    tests, and build a rigorous load testing apparatus. It will find itself preventing
    more issues but also extremely slow to release any new content.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, in order to justify investing in any type of effort to prevent regressions,
    we need to understand the ROI better. We can try to approximate the cost saving
    of each 1% decrease in regressions on the overall team performance to start establishing
    a framework we can use to balance quality investment.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/118bef0e741f2de408ed4b4313770477.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: The direct gain of preventing issues is first of all with the time the team
    spends handling these issues. Studies show teams currently spend anywhere between
    20–40% of their time working on production issues — a substantial drain on productivity.
  prefs: []
  type: TYPE_NORMAL
- en: 'What would be the benefit of investing in preventing issues? Using simple math
    we can start estimating the improvement in productivity for each issue that can
    be prevented in earlier stages of the development process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/da0f8a918487dbdfad1c8fef0248b316.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Where:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tsaved**​ is the time saved through issue prevention.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tissues** is the current time spent on production issues.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**P** is the percentage of production issues that could be prevented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This framework aids in assessing the cost vs. value of engineering investments.
    For example, a manager assigns two developers a week to analyze performance issues
    using observability data. Their efforts reduce production issues by 10%.
  prefs: []
  type: TYPE_NORMAL
- en: In a 100-developer team where 40% of time is spent on issue resolution, this
    translates to a 4% capacity gain, plus an additional 1.6% from reduced context
    switching. With 5.6% capacity reclaimed, the investment in two developers proves
    worthwhile, showing how this approach can guide practical decision-making.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s straightforward to see the direct impact of preventing every single 1%
    of production regressions on the team’s velocity. This represents work on production
    regressions that the team would not need to perform. The below table can give
    some context by plugging in a few values:'
  prefs: []
  type: TYPE_NORMAL
- en: Given this data, as an example, the **direct** gain in team resources for each
    **1%** improvement for a team that spends **25%** of its time dealing with production
    issues would be **0.25%.** If the team were able to prevent 20% of production
    issues, it would then mean **5**%back to the engineering team. While this might
    not sound like a sizeable enough chunk, there are other costs related to issues
    we can try to optimize as well for an even bigger impact.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mean Time to Resolution (MTTR): Reducing Time Lost to Issue Resolution'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous example, we looked at the productivity gain achieved by preventing
    issues. But what about those issues that can’t be avoided? While some bugs are
    inevitable, we can still minimize their impact on the team’s productivity by reducing
    the time it takes to resolve them — known as the Mean Time to Resolution (MTTR).
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, resolving a bug involves several stages:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Triage/Assessment:** The team gathers relevant subject matter experts to
    determine the severity and urgency of the issue.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Investigation/Root Cause Analysis (RCA):** Developers dig into the problem
    to identify the underlying cause, often the most time-consuming phase.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Repair/Resolution:** The team implements the fix.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/1b7f382517de07c70a93bcfd2cb88ebf.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Among these stages, the investigation phase often represents the greatest opportunity
    for time savings. By adopting more efficient tools for tracing, debugging, and
    defect analysis, teams can streamline their RCA efforts, significantly reducing
    MTTR and, in turn, boosting productivity.
  prefs: []
  type: TYPE_NORMAL
- en: During triage, the team may involve subject matter experts to assess if an issue
    belongs in the backlog and determine its urgency. Investigation and root cause
    analysis (RCA) follows, where developers dig into the problem. Finally, the repair
    phase involves writing code to fix the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, the first two phases, especially investigation and RCA, often
    consume 30–50% of the total resolution time. This stage holds the greatest potential
    for optimization, as the key is improving how existing information is analyzed.
  prefs: []
  type: TYPE_NORMAL
- en: To measure the effect of improving the investigation time on the team velocity
    we can take the the percentage of time the team spends on an issue and reduce
    the proportional cost of the investigation stage. This can usually be accomplished
    by adopting better tooling for tracing, debugging, and defect analysis. We apply
    similar logic to the issue prevention assessment in order to get an idea of how
    much productivity the team could gain with each percentage of reduction in investigation
    time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2dbea2d7d91f676553fb4737bbbd73a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '`Tsaved` : Percentage of team time saved'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`R`: Reduction in investigation time'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`T_investigation` : Time per issue spent on investigation efforts'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`T_issues` : Percentage of time spent on production issues'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can test out what would be the performance gain relative to the `T_investigation`and
    `T_issues`variables. We will calculate the marginal gain for each percent of investigation
    time reduction `R` .
  prefs: []
  type: TYPE_NORMAL
- en: As these numbers begin to add up the team can achieve a significant gain. If
    we are able to improve investigation time by 40%, for example, in a team that
    spends 25% of its time dealing with production issues, we would be reclaiming
    another 4% of that team’s productivity.
  prefs: []
  type: TYPE_NORMAL
- en: Combining the two benefits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With these two areas of optimization under consideration, we can create a unified
    formula to measure the combined effect of optimizing both issue prevention and
    the time the team spends on issues it is not able to prevent.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/edd6a3b2f4534c8660b9c992a2115c30.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Going back to our example organization that spends 25% of the time on prod issues
    and 40% of the resolution time per issue on investigation, a reduction of 40%
    in investigation time and prevention of 20% of the issues would result in an 8.1%
    improvement to the team productivity. However, we are far from done.
  prefs: []
  type: TYPE_NORMAL
- en: Accounting for the hidden cost of context-switching
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each of the above naive calculations does not take into account a major penalty
    incurred by work being interrupted due to unplanned production issues — context
    switching (CS). There are numerous studies that repeatedly show that context switching
    is expensive. How expensive? A penalty of anywhere between 20% to 70% extra work
    because of interruptions and switching between several tasks. In reducing interrupted
    work time we can also reduce the context switching penalty.
  prefs: []
  type: TYPE_NORMAL
- en: Our original formula did not account for that important variable. A simple though
    naive way of doing that would be to assume that any unplanned work handling production
    issues incur an equivalent context-switching penalty on the backlog items already
    assigned to the team. If we are able to save 8% of the team velocity, that should
    result in an equivalent reduction of context switching working on the original
    planned tasks. In reducing 8% of unplanned work we have also therefore reduced
    the CS penalty of the equivalent 8% of planned work the team needs to complete
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add that to our equation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b8c1ea554c303538191baaf50f9caa77.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Continuing our example, our hypothetical organization would find that the actual
    impact of their improvements is now a little over 11%. For a dev team of 80 engineers,
    that would be more than 8 developers free to do something else to contribute to
    the backlog.
  prefs: []
  type: TYPE_NORMAL
- en: Use the ROI calculator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make things easier, I’ve uploaded all of the above formulas as a simple
    HTML calculator that you can access here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[***ROI Calculator***](http://calculatior.s3-website-eu-west-1.amazonaws.com/)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Measuring ROI is key
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Production issues are costly, but a clear ROI framework helps quantify the impact
    of quality improvements. Reducing Mean Time to Resolution (MTTR) through optimized
    triage and investigation can boost team productivity. For example, a 40% reduction
    in investigation time
  prefs: []
  type: TYPE_NORMAL
- en: recovers 4% of capacity and lowers the hidden cost of context-switching.
  prefs: []
  type: TYPE_NORMAL
- en: Use the ROI Calculator to evaluate quality investments and make data-driven
    decisions. Access it [here](http://calculatior.s3-website-eu-west-1.amazonaws.com/)
    to see how targeted improvements enhance efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: '**References:**'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. [How Much Time Do Developers Spend Actually Writing Code?](https://thenewstack.io/how-much-time-do-developers-spend-actually-writing-code/)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. [How to write good software faster (we spend 90% of our time debugging)](https://www.makingdatamistakes.com/how-to-write-good-software-faster-we-spend-90-of-our-time-debugging/)
  prefs: []
  type: TYPE_NORMAL
- en: '3\. [Survey: Fixing Bugs Stealing Time from Development](https://devops.com/survey-fixing-bugs-stealing-time-from-development/)'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. [The Real Costs of Context-Switching](https://theagilecouch.com/2021/05/25/the-real-costs-of-context-switching/)
  prefs: []
  type: TYPE_NORMAL
