["```py\nimport spacy, re\nfrom skweak import heuristics, gazetteers, generative, utils\n\n### LF 1: heuristic to detect occurrences of MONEY entities\ndef money_detector(doc):\n   for tok in doc[1:]:\n      if tok.text[0].isdigit() and tok.nbor(-1).is_currency:\n          yield tok.i-1, tok.i+1, \"MONEY\"\n\nlf1 = heuristics.FunctionAnnotator(\"money\", money_detector)\n\n### LF 2: detection of years with a regex\nlf2= heuristics.TokenConstraintAnnotator(\"years\", lambda tok: re.match(\"(19|20)\\d{2}$\", \n                                                  tok.text), \"DATE\")\n\n### LF 3: a gazetteer with a few names\nNAMES = [(\"Barack\", \"Obama\"), (\"Donald\", \"Trump\"), (\"Joe\", \"Biden\")]\ntrie = gazetteers.Trie(NAMES)\nlf3 = gazetteers.GazetteerAnnotator(\"presidents\", {\"PERSON\":trie})\n```", "```py\n# We create a corpus (here with a single text)\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = nlp(\"Donald Trump paid $750 in federal income taxes in 2016\")\n\n# apply the labelling functions\ndoc = lf3(lf2(lf1(doc)))\n```", "```py\n# create and fit the HMM aggregation model\nhmm = generative.HMM(\"hmm\", [\"PERSON\", \"DATE\", \"MONEY\"])\nhmm.fit([doc]*10)\n\n# once fitted, we simply apply the model to aggregate all functions\ndoc = hmm(doc)\n\n# we can then visualise the final result (in Jupyter)\nutils.display_entities(doc, \"hmm\")\n```"]