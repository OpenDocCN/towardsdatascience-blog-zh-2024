["```py\n[[0.6, 0.4], \n [0.3, 0.7], \n [0.1, 0.9],\n  â€¦\n]\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom threshold_tuner import ClassificationThresholdTuner\n\nNUM_ROWS = 100_000\n\ndef generate_data():\n    num_rows_per_class = NUM_ROWS // 2\n    np.random.seed(0)\n    d = pd.DataFrame(\n      {\"Y\": ['A']*num_rows_per_class + ['B']*num_rows_per_class,\n       \"Pred_Proba\": \n          np.random.normal(0.7, 0.3, num_rows_per_class).tolist() + \\\n          np.random.normal(1.4, 0.3, num_rows_per_class).tolist()\n      })\n    return d, ['A', 'B']\n\nd, target_classes = generate_data()\n```", "```py\nd['Pred'] = np.where(d[\"Pred_Proba\"] > 0.50, \"B\", \"A\")\n```", "```py\ntuner = ClassificationThresholdTuner()\n\ntuner.print_stats_labels(\n    y_true=d[\"Y\"], \n    target_classes=target_classes,\n    y_pred=d[\"Pred\"])\n```", "```py\ntuner.print_stats_proba(\n    y_true=d[\"Y\"], \n    target_classes=target_classes, \n    y_pred_proba=d[\"Pred_Proba\"])\n```", "```py\ntuner.plot_by_threshold(\n    y_true=d['Y'], \n    target_classes=target_classes,\n    y_pred_proba=d[\"Pred_Proba\"])\n```", "```py\ntuner.plot_by_threshold(\n    y_true=d['Y'], \n    target_classes=target_classes,\n    y_pred_proba=d[\"Pred_Proba\"], \n    start=0.50, end=0.55, num_steps=6)\n```", "```py\ntuner.describe_slices(    \n    y_true=d['Y'], \n    target_classes=target_classes,\n    y_pred_proba=d[\"Pred_Proba\"], \n    start=0.3, end=0.7, num_slices=5)\n```", "```py\ntuner.describe_slices(    \n    y_true=d['Y'], \n    target_classes=target_classes,\n    y_pred_proba=d[\"Pred_Proba\"], \n    start=0.4, end=0.6, num_slices=10)\n```", "```py\nfrom sklearn.metrics import f1_score\n\nbest_threshold = tuner.tune_threshold(\n    y_true=d['Y'], \n    target_classes=target_classes,\n    y_pred_proba=d[\"Pred_Proba\"],\n    metric=f1_score,\n    average='macro',\n    higher_is_better=True,\n    max_iterations=5\n)\nbest_threshold\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom threshold_tuner import ClassificationThresholdTuner\n\nNUM_ROWS = 10_000\n\ndef generate_data():\n    num_rows_for_default = int(NUM_ROWS * 0.9) \n    num_rows_per_class = (NUM_ROWS - num_rows_for_default) // 2\n    np.random.seed(0)\n    d = pd.DataFrame({\n      \"Y\": ['No Attack']*num_rows_for_default + ['Attack A']*num_rows_per_class + ['Attack B']*num_rows_per_class,\n      \"Pred_Proba No Attack\": \n          np.random.normal(0.7, 0.3, num_rows_for_default).tolist() + \\\n          np.random.normal(0.5, 0.3, num_rows_per_class * 2).tolist(),\n      \"Pred_Proba Attack A\": \n          np.random.normal(0.1, 0.3, num_rows_for_default).tolist() + \\\n          np.random.normal(0.9, 0.3, num_rows_per_class).tolist() + \\\n          np.random.normal(0.1, 0.3, num_rows_per_class).tolist(),\n      \"Pred_Proba Attack B\": \n          np.random.normal(0.1, 0.3, num_rows_for_default).tolist() + \\\n          np.random.normal(0.1, 0.3, num_rows_per_class).tolist() + \\\n          np.random.normal(0.9, 0.3, num_rows_per_class).tolist()                    \n    })\n    d['Y'] = d['Y'].astype(str)\n    return d, ['No Attack', 'Attack A', 'Attack B']\n\nd, target_classes = generate_data()\n```", "```py\ndef set_class_prediction(d):    \n    max_cols = d[proba_cols].idxmax(axis=1)\n    max_cols = [x[len(\"Pred_Proba_\"):] for x in max_cols]\n    return max_cols   \n\nd['Pred'] = set_class_prediction(d)\n```", "```py\ntuner.print_stats_labels(\n    y_true=d[\"Y\"], \n    target_classes=target_classes,\n    y_pred=d[\"Pred\"])\n```", "```py\ntuner.print_stats_proba(\n    y_true=d[\"Y\"], \n    target_classes=target_classes, \n    y_pred_proba=d[proba_cols].values,\n    default_class='No Attack',\n    thresholds=[0.0, 0.4, 0.4]\n)\n```", "```py\ntuner.plot_by_threshold(\n    y_true=d['Y'], \n    target_classes=target_classes,\n    y_pred_proba=d[proba_cols].values,\n    default_class='No Attack'\n)\n```", "```py\nfrom sklearn.metrics import f1_score\n\nbest_thresholds = tuner.tune_threshold(\n    y_true=d['Y'], \n    target_classes=target_classes,\n    y_pred_proba=d[proba_cols].values,\n    metric=f1_score,\n    average='macro',\n    higher_is_better=True,\n    default_class='No Attack',\n    max_iterations=5\n)\nbest_thresholds\n```", "```py\ntuner.print_stats_proba(\n    y_true=d[\"Y\"], \n    target_classes=target_classes, \n    y_pred_proba=d[proba_cols].values,\n    default_class='No Attack',\n    thresholds=best_thresholds\n)\n```", "```py\ntuned_pred = tuner.get_predictions(\n    target_classes=target_classes,\n    d[\"Pred_Proba\"], \n    None, \n    best_threshold)\n```", "```py\nfrom threshold_tuner import ClassificationThesholdTuner\n\ntuner = ClassificationThesholdTuner()\n```"]