["```py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\n# Create dataset\ndataset_dict = {\n    'Outlook': ['sunny', 'sunny', 'overcast', 'rain', 'rain', 'rain', 'overcast', 'sunny', 'sunny', 'rain', 'sunny', 'overcast', 'overcast', 'rain', 'sunny', 'overcast', 'rain', 'sunny', 'sunny', 'rain', 'overcast', 'rain', 'sunny', 'overcast', 'sunny', 'overcast', 'rain', 'overcast'],\n    'Temp.': [85.0, 80.0, 83.0, 70.0, 68.0, 65.0, 64.0, 72.0, 69.0, 75.0, 75.0, 72.0, 81.0, 71.0, 81.0, 74.0, 76.0, 78.0, 82.0, 67.0, 85.0, 73.0, 88.0, 77.0, 79.0, 80.0, 66.0, 84.0],\n    'Humid.': [85.0, 90.0, 78.0, 96.0, 80.0, 70.0, 65.0, 95.0, 70.0, 80.0, 70.0, 90.0, 75.0, 80.0, 88.0, 92.0, 85.0, 75.0, 92.0, 90.0, 85.0, 88.0, 65.0, 70.0, 60.0, 95.0, 70.0, 78.0],\n    'Wind': [False, True, False, False, False, True, True, False, False, False, True, True, False, True, True, False, False, True, False, True, True, False, True, False, False, True, False, False],\n    'Num_Players': [52, 39, 43, 37, 28, 19, 43, 47, 56, 33, 49, 23, 42, 13, 33, 29, 25, 51, 41, 14, 34, 29, 49, 36, 57, 21, 23, 41]\n}\n\ndf = pd.DataFrame(dataset_dict)\n\n# One-hot encode 'Outlook' column\ndf = pd.get_dummies(df, columns=['Outlook'],prefix='',prefix_sep='')\n\n# Convert 'Wind' column to binary\ndf['Wind'] = df['Wind'].astype(int)\n\n# Split data into features and target, then into training and test sets\nX, y = df.drop(columns='Num_Players'), df['Num_Players']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.5, shuffle=False)\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\n\n# Create dataset\ndata = {\n    'Outlook': ['sunny', 'sunny', 'overcast', 'rain', 'rain', 'rain', 'overcast', 'sunny', 'sunny', \n                'rain', 'sunny', 'overcast', 'overcast', 'rain', 'sunny', 'overcast', 'rain', 'sunny', \n                'sunny', 'rain', 'overcast', 'rain', 'sunny', 'overcast', 'sunny', 'overcast', 'rain', 'overcast'],\n    'Temperature': [85, 80, 83, 70, 68, 65, 64, 72, 69, 75, 75, 72, 81, 71, 81, 74, 76, 78, 82, \n                   67, 85, 73, 88, 77, 79, 80, 66, 84],\n    'Humidity': [85, 90, 78, 96, 80, 70, 65, 95, 70, 80, 70, 90, 75, 80, 88, 92, 85, 75, 92, \n                 90, 85, 88, 65, 70, 60, 95, 70, 78],\n    'Wind': [False, True, False, False, False, True, True, False, False, False, True, True, False, \n             True, True, False, False, True, False, True, True, False, True, False, False, True, False, False],\n    'Num_Players': [52, 39, 43, 37, 28, 19, 43, 47, 56, 33, 49, 23, 42, 13, 33, 29, 25, 51, 41, \n                    14, 34, 29, 49, 36, 57, 21, 23, 41]\n}\n\n# Process data\ndf = pd.get_dummies(pd.DataFrame(data), columns=['Outlook'])\ndf['Wind'] = df['Wind'].astype(int)\n\n# Split data\nX, y = df.drop(columns='Num_Players'), df['Num_Players']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.5, shuffle=False)\n\n# Scale numerical features\nnumerical_cols = ['Temperature', 'Humidity']\nct = ColumnTransformer([('scaler', StandardScaler(), numerical_cols)], remainder='passthrough')\n\n# Transform data\nX_train_scaled = pd.DataFrame(\n    ct.fit_transform(X_train),\n    columns=numerical_cols + [col for col in X_train.columns if col not in numerical_cols],\n    index=X_train.index\n)\n\nX_test_scaled = pd.DataFrame(\n    ct.transform(X_test),\n    columns=X_train_scaled.columns,\n    index=X_test.index\n)\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import root_mean_squared_error\nfrom sklearn.linear_model import Ridge\n\n# Create dataset\ndata = {\n    'Outlook': ['sunny', 'sunny', 'overcast', 'rain', 'rain', 'rain', 'overcast', 'sunny', 'sunny', \n                'rain', 'sunny', 'overcast', 'overcast', 'rain', 'sunny', 'overcast', 'rain', 'sunny', \n                'sunny', 'rain', 'overcast', 'rain', 'sunny', 'overcast', 'sunny', 'overcast', 'rain', 'overcast'],\n    'Temperature': [85, 80, 83, 70, 68, 65, 64, 72, 69, 75, 75, 72, 81, 71, 81, 74, 76, 78, 82, \n                   67, 85, 73, 88, 77, 79, 80, 66, 84],\n    'Humidity': [85, 90, 78, 96, 80, 70, 65, 95, 70, 80, 70, 90, 75, 80, 88, 92, 85, 75, 92, \n                 90, 85, 88, 65, 70, 60, 95, 70, 78],\n    'Wind': [False, True, False, False, False, True, True, False, False, False, True, True, False, \n             True, True, False, False, True, False, True, True, False, True, False, False, True, False, False],\n    'Num_Players': [52, 39, 43, 37, 28, 19, 43, 47, 56, 33, 49, 23, 42, 13, 33, 29, 25, 51, 41, \n                    14, 34, 29, 49, 36, 57, 21, 23, 41]\n}\n\n# Process data\ndf = pd.get_dummies(pd.DataFrame(data), columns=['Outlook'], prefix='', prefix_sep='', dtype=int)\ndf['Wind'] = df['Wind'].astype(int)\ndf = df[['sunny','overcast','rain','Temperature','Humidity','Wind','Num_Players']]\n\n# Split data\nX, y = df.drop(columns='Num_Players'), df['Num_Players']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.5, shuffle=False)\n\n# Scale numerical features\nnumerical_cols = ['Temperature', 'Humidity']\nct = ColumnTransformer([('scaler', StandardScaler(), numerical_cols)], remainder='passthrough')\n\n# Transform data\nX_train_scaled = pd.DataFrame(\n    ct.fit_transform(X_train),\n    columns=numerical_cols + [col for col in X_train.columns if col not in numerical_cols],\n    index=X_train.index\n)\n\nX_test_scaled = pd.DataFrame(\n    ct.transform(X_test),\n    columns=X_train_scaled.columns,\n    index=X_test.index\n)\n\n# Initialize and train the model\n#model = LinearRegression() # Option 1: OLS Regression\nmodel = Ridge(alpha=0.1)  # Option 2: Ridge Regression (alpha is the regularization strength, equivalent to Î»)\n\n# Fit the model\nmodel.fit(X_train_scaled, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test_scaled)\n\n# Calculate and print RMSE\nrmse = root_mean_squared_error(y_test, y_pred)\nprint(f\"RMSE: {rmse:.4f}\")\n\n# Additional information about the model\nprint(\"\\nModel Coefficients:\")\nprint(f\"Intercept    : {model.intercept_:.2f}\")\nfor feature, coef in zip(X_train_scaled.columns, model.coef_):\n    print(f\"{feature:13}: {coef:.2f}\")\n```"]