["```py\nmake_cv --job-ad-company \"epic resolution index\" \\\n        --job-ad-title \"luxury retail lighting specialist\" \\\n        --cv-template two_columns_abt_0 \\\n        --person-name \"gregor samsa\" \\\n        --output-file ../generated_output/cv_nice_two_columns.html \\\n        --n-words-employment 50 --n-skills 8 --n-words-about-me 40\n```", "```py\nYour task is to analyze a job ad and from it extract, \non the one hand, the qualities and attributes that the \ncompany is looking for in a candidate, and on the other \nhand, the qualities and aspirations the company \ncommunicates about itself.\n\nAny boilerplate text or contact information should be \nignored. And where possible, reduce the overall amount \nof text. We are looking for the essence of the job ad.\n```", "```py\n # Step 0: Get Anthropic client\n    anthropic_client = get_anthropic_client(api_key_env)\n\n    # Step 1: Extract key qualities and attributes from job ad\n    ad_qualities = JobAdQualityExtractor(\n        client=anthropic_client,\n    ).extract_qualities(\n        text=JobAdsDAO().get(job_ad_company, job_ad_title),\n    )\n```", "```py\n{\n  \"name\": \"add\",\n  \"input\": {  \n    \"a\": \"2\",\n    \"b\": \"2\"\n  }\n}\n```", "```py\n for response_message in response.content:\n            assert isinstance(response_message, ToolUseBlock)\n\n            tool_name = response_message.name\n            func_kwargs = response_message.input\n            tool_id = response_message.id\n\n            tool = registry_tool_name_2_func.get(tool_name)\n            try:\n                tool_return = tool(**func_kwargs)\n            except Exception:\n                ...\n```", "```py\nclass EducationCVDataExtractor(CVDataExtractor):\n    cv_data = Educations\n    def __init__(self):\n#      <truncated>\n\nclass EmploymentCVDataExtractor(CVDataExtractor):\n    cv_data = Employments\n    def __init__(self):\n#      <truncated>\n\nclass SkillsCVDataExtractor(CVDataExtractor):\n    cv_data = Skills\n    def __init__(self):\n#      <truncated>\n```", "```py\n_map_extractor_daos: Dict[str, Tuple[Type[DAO]]] = {\n    f'{EducationCVDataExtractor.cv_data.__name__}': (PersonsEducationDAO,),\n    f'{EmploymentCVDataExtractor.cv_data.__name__}': (PersonsEmploymentDAO,),\n    f'{BiographyCVDataExtractor.cv_data.__name__}': (PersonsEducationDAO, PersonsEmploymentDAO, PersonsMusingsDAO),\n    f'{SkillsCVDataExtractor.cv_data.__name__}': (PersonsEducationDAO, PersonsEmploymentDAO, PersonsSkillsDAO),\n}\n\"\"\"Map CV data types to DAOs that provide raw data for the CV data extractor agents\n\nThis allows for a pre-filtering of raw data that are passed to the extractors. For example,\nif the extractor is tailored to extract education data, then only the education DAO is used.\nThis is strictly not needed since the Extractor LLM should be able to do the filtering itself,\nthough at a higher token cost.\n\n\"\"\"\n```", "```py\n # Step 2: Ascertain the data sections required by the CV template and collect the data\n    cv_data_orchestrator = CVDataExtractionOrchestrator(\n        client=anthropic_client,\n        relevant_qualities=ad_qualities,\n        n_words_employment=n_words_employment,\n        n_words_education=n_words_education,\n        n_skills=n_skills,\n        n_words_about_me=n_words_about_me,\n    )\n    template_required_cv_data = FormTemplatesToCDAO().get(cv_template, 'required_cv_data_types')\n    cv_data = {}\n    for required_cv_data in template_required_cv_data:\n        cv_data.update(cv_data_orchestrator.run(\n            cv_data_type=required_cv_data,\n            data_key=person_name\n        ))\n```", "```py\n <div class=\"contact-info\">\n        {{ biography.email }}\n        {% if biography.linkedin_url %} &mdash; <a href=\"{{ biography.linkedin_url }}\">LinkedIn</a>{% endif %}\n        {% if biography.phone %} &mdash; {{ biography.phone }}{% endif %}\n        {% if biography.github_url %} &mdash; <a href=\"{{ biography.github_url }}\">GitHub</a>{% endif %}\n        {% if biography.blog_url %} &mdash; <a href=\"{{ biography.blog_url }}\">Blog</a>{% endif %}\n    </div>\n```", "```py\ntemplate = env.get_template('test_template.html')\ntemplate.render(biography=biography)\n```", "```py\n<body>\n    <h1>{{ biography.name }}</h1>\n    <div class=\"contact-info\">\n      {{ biography.email }}\n    </div>\n</body>\n```", "```py\n<body>\n    <h1>My N. Ame</h1>\n    <div class=\"contact-info\">\n      my.n.ame@compuserve.com\n    </div>\n</body>\n```", "```py\n # Step 3: Render the CV with data and template and save output\n    html = populate_html(\n        template_name=cv_template,\n        cv_data=list(cv_data.values()),\n    )\n    with open(output_file, 'w') as f:\n        f.write(html)\n```", "```py\n <h2>Employment History</h2>\n            {% for employment in employments.employment_entries %}\n            <div class=\"entry\">\n                <div class=\"entry-title\">\n                    {{ employment.title }} at {{ employment.company }} ({{ employment.start_year }}{% if employment.end_year %} - {{ employment.end_year }}{% endif %}):\n                </div>\n                {% if employment.description %}\n                <div class=\"entry-description\">\n                    {{ employment.description }}\n                </div>\n                {% endif %}\n            </div>\n            {% endfor %}\n```", "```py\nmake_cv --job-ad-company \"epic resolution index\" \\\n        --job-ad-title \"luxury retail lighting specialist\" \\\n        --cv-template single_column_0 \\\n        --person-name \"gregor samsa\" \\\n        --output-file ../generated_output/cv_single_column_0.html \\\n        --n-words-employment 50 --n-skills 8\n```"]