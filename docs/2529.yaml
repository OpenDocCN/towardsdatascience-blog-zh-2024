- en: Exploring DRESS Kit V2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/exploring-dress-kit-v2-75fa4cf74582?source=collection_archive---------7-----------------------#2024-10-16](https://towardsdatascience.com/exploring-dress-kit-v2-75fa4cf74582?source=collection_archive---------7-----------------------#2024-10-16)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Exploring new features and notable changes in the latest version of the DRESS
    Kit**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@waihongchung?source=post_page---byline--75fa4cf74582--------------------------------)[![Waihong
    Chung](../Images/7e9f2bbb026abcf36e4430e920e61ee1.png)](https://medium.com/@waihongchung?source=post_page---byline--75fa4cf74582--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--75fa4cf74582--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--75fa4cf74582--------------------------------)
    [Waihong Chung](https://medium.com/@waihongchung?source=post_page---byline--75fa4cf74582--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--75fa4cf74582--------------------------------)
    ·12 min read·Oct 16, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c1c41836cf3a157090eb66b46f452e14.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Google DeepMind](https://unsplash.com/@googledeepmind?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**Overview**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since the original [DRESS Kit](https://github.com/waihongchung/dress) was first
    released in 2021, it has been successfully implemented in a handful of biomedical
    research projects. If you have never heard of the DRESS Kit, then you may be interested
    to know that it is a fully open-sourced, dependency-free, plain ES6 JavaScript
    library specifically designed for performing advanced statistical analysis and
    machine learning tasks. The DRESS Kit was aimed to serve biomedical researchers
    who are not trained biostatisticians and have no access to dedicated statistics
    software.
  prefs: []
  type: TYPE_NORMAL
- en: Not only was the DRESS Kit proven to be a practical and effective tool for analyzing
    complex datasets and building machine-learning models, but these real-world experiences
    have also provided us with valuable opportunities to identify potential areas
    of improvement to the DRESS Kit. To support certain new features and to achieve
    a substantial performance improvement, however, much of the original codebase
    has to be rewritten from scratch. After many sleepless nights and countless cups
    of coffee, we are finally ready to share with you — DRESS Kit ***V2***.
  prefs: []
  type: TYPE_NORMAL
- en: Although the new version of the DRESS Kit is no longer backward compatible with
    the previous one, we have tried our best to preserve the method signatures (i.e.
    the name of the methods and the expected parameters) as much as possible. This
    means that research projects that were implemented using DRESS Kit V1 can be migrated
    to V2 with only a few modifications. This also means, however, that many of the
    feature enhancements may not be immediately obvious just by scanning through the
    source code. We will, therefore, spend some time in this article exploring the
    new features and notable changes in the latest version of the DRESS Kit.
  prefs: []
  type: TYPE_NORMAL
- en: '**New Features**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Incremental Training**'
  prefs: []
  type: TYPE_NORMAL
- en: One of the most exciting new features in DRESS Kit V2 is the ability to perform
    incremental training on any regression or classification machine-learning algorithms.
    In the previous version of the DRESS Kit, this capability was only supported by
    the kNN algorithm and the multilayer perceptron algorithm. This feature allows
    models to be trained using larger datasets, but in a resource-efficient manner,
    or to adapt to evolving data sources in real time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/18a62a106f7946e89cea663324a415c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Alessia Cocconi](https://unsplash.com/@alessia_cocconi?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Here is the pseudocode to implement incremental training using the random forest
    algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Incremental training is implemented differently on different machine-learning
    algorithms. With the kNN algorithm, new samples are added to existing training
    samples, as a result, the model will increase in size over time. With the logistic
    regression or linear regression algorithm, existing regression coefficients are
    updated using the new training samples. With the random forest or gradient boosting
    algorithm, existing decision trees or branches of a decision tree can be pruned
    and new trees or new branches can be added based on the new training samples.
    With the multilayer perceptron algorithm, the weights and the biases of the neural
    network are updated as new training samples are added.
  prefs: []
  type: TYPE_NORMAL
- en: '**Model Tuning**'
  prefs: []
  type: TYPE_NORMAL
- en: Another exciting new feature in DRESS Kit V2 is the addition of the `dress-modeling.js`
    module, which contains methods to facilitate the tedious process of fine-tuning
    machine-learning models. These methods are designed to work with any regression
    or classification model created using the `dress-regression.js` module, the `dress-tree.js`
    module, and the `dress-neural.js` module. Because all of these tasks are rather
    computationally intensive, these methods are designed to work asynchronously by
    default.
  prefs: []
  type: TYPE_NORMAL
- en: '**Permutation Feature Importance**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first method in this module is `DRESS.importances`, which computes permutation
    feature importance. It allows one to estimate the relative contribution of each
    feature to a trained model by randomly permuting the values of one of the features,
    thus breaking the correlation between said feature and the outcome.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Cross Validation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second method in this module is `DRESS.crossValidate`, which performs k-fold
    cross-validation. It automatically divides a dataset into k (default is 5) equally
    sized folds, and applies each fold as a validation set while training a machine-learning
    model on the remaining k-1 folds. It helps assess model performance more robustly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Hyperparameter Optimization**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third, and perhaps the most powerful, method in this module is `DRESS.hyperparameters`,
    which performs automatic hyperparameter optimization, on any numerical hyperparameters,
    using a grid search approach with early stopping. It uses the `DRESS.crossValidate`
    method internally to assess model performance. There are several steps to the
    process. First, one must specify the initial values of the hyperparameters. Any
    hyperparameter that is not explicitly defined will be set to its default value
    by the machine-learning algorithm. Second, one must specify the end value of the
    search space for each hyperparameter that is being optimized. The order in which
    these hyperparameters are specified also determines the search order, therefore,
    it is advisable to specify the most pertinent hyperparameter first. Third, one
    must select a performance metric (e.g. `f1` for classification and `r2` for regression)
    for assessing model performance. Here is the pseudocode to perform automatic hyperparameter
    optimization on a multilayer perceptron algorithm.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Model Import & Export** One of the primary motivations for creating the DRESS
    Kit using plain JavaScript, instead of another high performance language, is to
    ensure cross-platform compatibility and ease of integration with other technologies.
    DRESS Kit V2 now includes methods to facilitate the distribution of trained models.
    The internal representations of the models have also been optimized to maximize
    portability.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Dataset Inspection**'
  prefs: []
  type: TYPE_NORMAL
- en: One of the most often requested features for DRESS Kit V2 is a method that is
    comparable to `pandas.DataFrame.info` in Python. We have, therefore, released
    a new method `DRESS.summary` in the `dress-descriptive.js` module for generating
    a concise summary from a dataset. Simply pass an array of objects as the parameter
    and the method will automatically identify the enumerable features, the data type
    (numeric vs categoric), and the number of `null` values found in these objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Toy Dataset**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a9f7c1ab6f18fec05e873c4fd910ed56.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Rick Mason](https://unsplash.com/@egnaro?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, DRESS Kit V2 comes with a brand new toy dataset for testing
    and learning the various statistical methods and machine-learning algorithms.
    This toy dataset contains 6000 synthetic subjects modeled after a cohort of patients
    with various chronic liver diseases. Each subject includes 23 features, which
    consist of a combination of numerical and categorical features with varying cardinalities.
    Here is the structure of each subject:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This intentionally crafted toy dataset supports both classification and regression
    tasks. Its data structure closely resembles that of real patient data, making
    it suitable for debugging real-world scenario workflows. Here is a concise summary
    of the toy dataset generated using the aforementioned `DRESS.summary` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Feature Enhancements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Propensity and Proximity Matching**'
  prefs: []
  type: TYPE_NORMAL
- en: The `DRESS.propensity` method, which performs propensity score matching, now
    supports both numerical and categorical features as confounders. Internally, the
    method uses `DRESS.logistic` to estimate the propensity score if only numerical
    features are specified; otherwise, it uses `DRESS.gradientBoosting`. We have also
    introduced a new method called `DRESS.proximity` that uses `DRESS.kNN` to perform
    K-nearest neighbor matching.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Categorize and Numericize**'
  prefs: []
  type: TYPE_NORMAL
- en: The `DRESS.categorize` method in the `dress-transform.js` module has been completely
    rewritten and behaves very differently, but more intuitively, now. The new `DRESS.categorize`
    method accepts an array of numerical values as boundaries and converts a numerical
    feature into a categorical feature based on the specified boundaries. The old
    `DRESS.categorize` method has been renamed as `DRESS.numericize`, which converts
    a categorical feature into a numerical feature by matching the feature value against
    an ordered array of categories.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Linear, Logistic, and Polytomous Regression**'
  prefs: []
  type: TYPE_NORMAL
- en: In DRESS Kit V1, the `DRESS.logistic` regression algorithm was implemented using
    Newton’s method, while the `DRESS.linear` regression algorithm utilized the matrix
    approach. In DRESS Kit V2, both regression algorithms were implemented using the
    same optimized gradient descent regression method, which also supports hyperparameters
    such as learning rate and ridge (L2) regularization. We have also introduced a
    new method called `DRESS.polytomous`, which uses `DRESS.logistic` internally to
    perform multiclass classification using the one-vs-rest approach.
  prefs: []
  type: TYPE_NORMAL
- en: '**Precision-Recall Curve**'
  prefs: []
  type: TYPE_NORMAL
- en: The `dress-roc.js` module now contains a method, `DRESS.pr`, to generate [precision-recall
    curves](https://en.wikipedia.org/wiki/Precision_and_recall) based on one or more
    numerical classifiers. This method has a method signature identical to that of
    `DRESS.roc` and can be used as a direct replacement for the latter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Breaking Changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**JavaScript Promise**'
  prefs: []
  type: TYPE_NORMAL
- en: DRESS Kit V2 uses [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises)
    exclusively to handle all asynchronous operations. Callback functions are no longer
    supported. Most notably, the coding pattern of passing a custom callback function
    named `processJSON` to `DRESS.local` or `DRESS.remote` (as shown in the examples
    from DRESS Kit V1) is no longer valid. Instead, the following coding pattern is
    preferred.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**kNN Model**'
  prefs: []
  type: TYPE_NORMAL
- en: Several breaking changes have been made to the `DRESS.kNN` method. First, the
    outcome of the model must be specified during the training phase, instead of during
    the prediction phase, similar to how other machine learning models in the DRESS
    Kit, such as `DRESS.gradientBoosting`, `DRESS.multilayerPerceptron` are created.
  prefs: []
  type: TYPE_NORMAL
- en: The kNN imputation functionality has been moved from the model object returned
    by the `DRESS.kNN` method to a separate method named `DRESS.nearestNeighbor` in
    the `dress-imputation.js` module in order to better differentiate the machine-learning
    algorithm from its application.
  prefs: []
  type: TYPE_NORMAL
- en: The `importances` parameter has been removed and relative feature importances
    should be specified as a hyperparameter instead.
  prefs: []
  type: TYPE_NORMAL
- en: '**Model Performance**'
  prefs: []
  type: TYPE_NORMAL
- en: The method for evaluating/validating a machine learning model’s performance
    has been renamed from `model.performance` to `model.validate` in order to improve
    linguistic coherence (i.e. all method names are verbs).
  prefs: []
  type: TYPE_NORMAL
- en: '**Module Organization**'
  prefs: []
  type: TYPE_NORMAL
- en: The module containing the core statistical methods has been renamed from `dress-core.js`
    to `dress.js`, which must be included at all times when using DRESS Kit V2 in
    a modular fashion.
  prefs: []
  type: TYPE_NORMAL
- en: The module containing the decision-tree-based machine learning algorithms, including
    random forest and gradient boosting, has been renamed from `dress-ensemble.js`
    to `dress-tree.js` in order to better describe the underlying learning algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: The methods for loading and saving data files as well as printing text output
    onto an HTML document have been moved from `dress-utility.js` to `dress-io.js`.
    Meanwhile, the `DRESS.async` method has been moved to its own module `DRESS-async.js`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Default Boolean Parameters**'
  prefs: []
  type: TYPE_NORMAL
- en: All optional boolean (true/false) parameters are assigned a default value of
    `false`, in order to maintain a coherent syntax. The default behavoirs of the
    methods are carefully designed to be suitable for most common use-cases. For instance,
    the default behavior of the kNN machine learning model is to use the weighted
    kNN algorithm; the boolean parameter to select between the weighted vs unweighted
    kNN algorithm has, therefore, been renamed as `unweighted` and is set to a default
    value of `false`.
  prefs: []
  type: TYPE_NORMAL
- en: As a result of this change, however, the default behavior of all machine learning
    algorithms is set to produce a regression model, instead of a classification model.
  prefs: []
  type: TYPE_NORMAL
- en: '**Removed Methods**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following methods have been removed entirely because they were deemed ill-constructed
    or redundant:'
  prefs: []
  type: TYPE_NORMAL
- en: '- `DRESS.effectMeasures` from the `dress-association.js` module.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `DRESS.polynomial` from the `dress-regression.js` module.'
  prefs: []
  type: TYPE_NORMAL
- en: '- `DRESS.uuid` from the `dress-transform.js` module.'
  prefs: []
  type: TYPE_NORMAL
- en: Final Note
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from the major new features mentioned earlier, numerous enhancements have
    been made to nearly every method included in the DRESS Kit. Most operations are
    noticeably faster than before yet the minified codebase remains nearly the same
    size. If you have previously utilized DRESS Kit V1, upgrading to V2 is highly
    recommended. For those who haven’t yet incorporated the DRESS Kit into their research
    projects, now is an opportune moment to explore its capabilities. We genuinely
    value your interest in and your ongoing support for the DRESS Kit. Please do not
    hesitate to share your feedback and comments so that we can continue to improve
    this library.
  prefs: []
  type: TYPE_NORMAL
- en: Please do not hesitate to grab the latest version of the DRESS Kit from its
    [GitHub repository](https://github.com/waihongchung/dress) and start building.
  prefs: []
  type: TYPE_NORMAL
