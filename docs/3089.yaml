- en: Understanding the Optimization Process Pipeline in Linear Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解线性规划中的优化过程管道
- en: 原文：[https://towardsdatascience.com/understanding-the-optimization-process-pipeline-in-linear-programming-15569d92ba94?source=collection_archive---------4-----------------------#2024-12-27](https://towardsdatascience.com/understanding-the-optimization-process-pipeline-in-linear-programming-15569d92ba94?source=collection_archive---------4-----------------------#2024-12-27)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/understanding-the-optimization-process-pipeline-in-linear-programming-15569d92ba94?source=collection_archive---------4-----------------------#2024-12-27](https://towardsdatascience.com/understanding-the-optimization-process-pipeline-in-linear-programming-15569d92ba94?source=collection_archive---------4-----------------------#2024-12-27)
- en: The post describes the backend and frontend processes in linear programming
    including the mathematical programming system (mps) files, problem matrix, optimization
    processes, results extraction, and solution files using an open-source solver
    called HiGHS with its Python wrapper called highspy.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本文描述了线性规划中的后端和前端过程，包括数学编程系统（mps）文件、问题矩阵、优化过程、结果提取和解决方案文件，使用的是一个名为HiGHS的开源求解器以及其Python包装器highspy。
- en: '[](https://medium.com/@himalaya.birshrestha?source=post_page---byline--15569d92ba94--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page---byline--15569d92ba94--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--15569d92ba94--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--15569d92ba94--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page---byline--15569d92ba94--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@himalaya.birshrestha?source=post_page---byline--15569d92ba94--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page---byline--15569d92ba94--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--15569d92ba94--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--15569d92ba94--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page---byline--15569d92ba94--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--15569d92ba94--------------------------------)
    ·7 min read·Dec 27, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--15569d92ba94--------------------------------)
    ·7分钟阅读·2024年12月27日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: In this 2021 [post](https://medium.com/towards-data-science/linear-programming-with-python-and-julia-be9e045a5d17),
    I demonstrated how linear optimization problems could be solved using the Pyomo
    package in Python and the JuMP package in Julia. I also introduced different types
    of commercial and non-commercial solvers available for solving linear, mixed integer,
    or non-linear optimization problems.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在2021年[文章](https://medium.com/towards-data-science/linear-programming-with-python-and-julia-be9e045a5d17)中，我展示了如何使用Python中的Pyomo包和Julia中的JuMP包解决线性优化问题。我还介绍了不同类型的商业和非商业求解器，用于解决线性、混合整数或非线性优化问题。
- en: In this post, I will introduce mathematical programming system (mps) files used
    to represent optimization problems, the optimization process of a solver, and
    the solution file formats. For this purpose, I will use the same problem as in
    the previous post but with additional bounds. I am going to use an open-source
    solver called [HiGHS](https://highs.dev/) for this purpose. HiGHS has been touted
    as one of the most powerful solvers among the open-source ones to solve linear
    optimization problems. In Python, I get access to this solver simply by installing
    the `highpy` [package](https://ergo-code.github.io/HiGHS/dev/interfaces/python/)
    with `pip install highspy`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将介绍用于表示优化问题的数学编程系统（mps）文件、求解器的优化过程以及解决方案文件格式。为此，我将使用与上一篇文章相同的问题，但加入了额外的边界条件。为了实现这一目标，我将使用一个开源求解器[HiGHS](https://highs.dev/)。HiGHS被誉为在开源求解器中最强大的线性优化问题求解工具之一。在Python中，我只需通过`pip
    install highspy`安装`highpy` [包](https://ergo-code.github.io/HiGHS/dev/interfaces/python/)即可访问该求解器。
- en: Without further ado, let’s get started.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不再赘述，让我们开始吧。
- en: '![](../Images/bc13eb6eeae2ae8d5ca037f2172c3e3f.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bc13eb6eeae2ae8d5ca037f2172c3e3f.png)'
- en: Photo by [Unseen Studio](https://unsplash.com/@uns__nstudio?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[Unseen Studio](https://unsplash.com/@uns__nstudio?utm_source=medium&utm_medium=referral)在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Problem Statement
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 问题陈述
- en: The problem statement is given below. `x` and `y` are the two decision variables.
    The objective is to maximize profit subject to three constraints. Both x and y
    have lower and upper bounds respectively.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 问题陈述如下。`x`和`y`是两个决策变量。目标是最大化利润，且需满足三个约束条件。x和y各自都有下界和上界。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Optimization using highspy
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用highspy进行优化
- en: In the code below, I initiate the model as `h`. Then, I introduce my decision
    variables `x` and `y` along with their lower bounds and upper bounds respectively,
    and also assign the names. Next, I add the three constraint inequalities which
    I have referred to as c0, c1 and c2 respectively. Each constraint has coefficient
    for x and y, and a RHS value. Then, I maximized the value of 90x+75y, which is
    the objective function. The model is run in this line.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我将模型初始化为`h`。然后，我引入了决策变量`x`和`y`及其下界和上界，并为它们赋予了名字。接下来，我添加了三个约束不等式，分别命名为c0、c1和c2。每个约束都有x和y的系数以及一个RHS值。然后，我最大化了目标函数90x+75y的值。模型在这一行运行。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What happens in the backend during the optimization process?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化过程中后台发生了什么？
- en: 'When the model runs, one can see the following progress happening in the terminal
    window. But what exactly is going on here? I describe it below:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当模型运行时，可以在终端窗口看到以下进展。那么，究竟发生了什么？我将在下文描述：
- en: '![](../Images/cf6bb0a465fd15ca4313ce515293e6f2.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cf6bb0a465fd15ca4313ce515293e6f2.png)'
- en: '**Problem size:**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题规模：**'
- en: 'The constraints in the linear problem can be represented in the matrix form
    as Ax≤b, wherein, A is the matrix of constraint coefficients, x is the vector
    containing decision variables, and b is the matrix of RHS values. For the given
    problem, the constraints are represented in the matrix format as shown below:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 线性问题中的约束可以以矩阵形式表示为Ax≤b，其中，A是约束系数矩阵，x是包含决策变量的向量，b是RHS值矩阵。对于给定的问题，约束可以如下所示表示为矩阵形式：
- en: '![](../Images/3016e6b7873348fafadeaf26fdbec02c.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3016e6b7873348fafadeaf26fdbec02c.png)'
- en: Representing constraints in the form of matrix. Illustration by Author.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以矩阵形式表示约束。插图由作者提供。
- en: The problem matrix size is characterized by rows, columns and non-zero elements.
    Row refers to the number of constraints (here 3), column refers to the number
    of decision variables (here 2), and elements/non-zeros refer to the coefficients,
    which don’t have zero values. In all three constraints, there are no coefficient
    with zero value. Hence the total number of non-zero elements is six.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 问题矩阵的大小由行数、列数和非零元素的数量来描述。行数表示约束的数量（此处为3），列数表示决策变量的数量（此处为2），元素/非零元素表示系数，这些系数不为零。在所有三个约束中，都没有系数为零的情况。因此，总的非零元素数量是六个。
- en: This is an example of a very simple problem. In reality, there can be problems
    where the number of rows, columns and non-zero elements can be in the order of
    thousands and millions. An increase in the problem size increases the complexity
    of the model, and the time taken to solve it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单问题的例子。实际上，可能会有一些问题，其行数、列数和非零元素的数量可以达到成千上万或百万级别。问题规模的增加会导致模型的复杂度增加，从而延长求解所需的时间。
- en: '**Coefficient ranges**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**系数范围**'
- en: The coefficients of x and y in the problem range from 2 to 10\. Hence, the matrix
    coefficient range is displayed as [2e+00, 1e+01].
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 问题中x和y的系数范围从2到10。因此，矩阵的系数范围显示为[2e+00, 1e+01]。
- en: Cost refers to the objective function here. Its coefficient is 90 for x and
    75 for y. As a result, Cost has a coefficient range of [8e+01, 9e+01].
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 成本在此处指的是目标函数。x的系数是90，y的系数是75。因此，成本的系数范围是[8e+01, 9e+01]。
- en: Bounds for x and y range between 2 and 40\. Hence, Bound has a coefficient range
    of [2e+00, 4e+01]
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: x和y的下界和上界范围为2到40。因此，Bound的系数范围是[2e+00, 4e+01]。
- en: Coefficients of RHS range between 66 and 200\. Hence, RHS has a coefficient
    range of [7e+01, 2e+02].
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 右边约束（RHS）的系数范围在66到200之间。因此，RHS的系数范围是[7e+01, 2e+02]。
- en: '**Presolving** [Presolve](https://lpsolve.sourceforge.net/5.5/Presolve.htm#:~:text=Presolve%20is%20a%20preprocess%20of,model%20and%20likely%20solves%20faster)
    is the initial process when a solver tries to solve an optimization problem, it
    tries to simplify the model at first. For example, it might treat a coefficient
    beyond a certain value as infinity. The purpose of the [presolve](https://support.gurobi.com/hc/en-us/articles/360024738352-How-does-presolve-work)
    is to create a smaller version of the problem matrix, with identical objective
    function and with a feasible space that can be mapped to the feasible space of
    the original problem. The reduced problem matrix would be simpler, easier, and
    faster to solve than the original one.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**预处理** [Presolve](https://lpsolve.sourceforge.net/5.5/Presolve.htm#:~:text=Presolve%20is%20a%20preprocess%20of,model%20and%20likely%20solves%20faster)是求解器尝试解决优化问题时的初始过程，它首先会尝试简化模型。例如，它可能将超出某个值的系数视为无穷大。[预处理](https://support.gurobi.com/hc/en-us/articles/360024738352-How-does-presolve-work)的目的是创建一个更小版本的问题矩阵，具有相同的目标函数，并且可映射到原始问题的可行空间。简化后的问题矩阵会比原始矩阵更简单、更容易解决，并且解决速度更快。'
- en: In this case, the presolve step was completed in just two iterations resulting
    in an empty matrix. This also means that the solution was obtained and no further
    optimization was required. The objective value it returned was 2100, and the run
    time of the HiGHS solver was just 0.01 seconds. After the solution is obtained
    from the optimization, the solver can use the postsolve/unpresolve step wherein,
    the solution is mapped to the feasible space of the original problem.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，预处理步骤仅用了两次迭代就完成，结果是一个空矩阵。这也意味着已经获得了解决方案，且无需进一步优化。返回的目标值为2100，HiGHS求解器的运行时间仅为0.01秒。在从优化中获得解决方案后，求解器可以使用后处理/取消预处理步骤，将解决方案映射到原始问题的可行空间。
- en: Mathematical Programming System (MPS) format
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数学规划系统（MPS）格式
- en: Mathematical Programming System (MPS) is a [file format](https://en.wikipedia.org/wiki/MPS_(format))
    for representing linear and mixed integer linear programming problems. It is a
    relatively old format but accepted by all commercial linear program solvers. Linear
    problems can also be written in other formats such as LP, AMPL, and GAMS.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 数学规划系统（MPS）是一种用于表示线性和混合整数线性规划问题的[文件格式](https://en.wikipedia.org/wiki/MPS_(format))。它是一种相对较老的格式，但所有商业线性程序求解器都接受这种格式。线性问题也可以用其他格式表示，如LP、AMPL和GAMS。
- en: One can use `highspy` to write mps file by simply using `h.writeModel("foo.mps")`.
    And reading the mps file is as simple as `h.readModel("foo.mps")`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`highspy`通过简单地使用`h.writeModel("foo.mps")`来写入MPS文件。而读取MPS文件也很简单，只需使用`h.readModel("foo.mps")`。
- en: '![](../Images/5035e99707bba76399dca7eda3b78193.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5035e99707bba76399dca7eda3b78193.png)'
- en: MPS format of the given LP problem. Illustration by Author.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 给定线性规划问题的MPS格式。作者插图。
- en: The structure of the MPS file of the given optimization problem is shown above.
    It starts with the NAME of the LP problem. OBJSENSE indicates whether the problem
    is a minimization (MIN) or maximization (MAX), here the latter. The ROWS section
    indicates the objective, names of all constraints, and their types in terms of
    equality/inequality. E stands for equality, G stands for greater than or equal
    rows, L stands for less than or equal rows, and N stands for no restriction rows.
    Here, the three constraints are given as __c0, __c1, and __c2 while Obj is the
    abbreviation for the objective.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 给定优化问题的MPS文件结构如上所示。它以线性规划问题的名称（NAME）开始。OBJSENSE表示问题是最小化（MIN）还是最大化（MAX），这里是后者。ROWS部分表示目标、所有约束的名称以及它们的等式/不等式类型。E代表等式，G代表大于或等于约束，L代表小于或等于约束，N代表无约束行。这里，三个约束被给出为__c0、__c1和__c2，而Obj是目标的缩写。
- en: In the COLUMNS section, the names of the decision variables (here x and y) are
    assigned on the left, and their coefficients which belong to objective or constraints
    inequalities are provided on the right. The RHS section contains the right-hand
    side vectors of the model constraints. The lower and upper bounds of the decision
    variables are defined in the BOUNDS section. The MPS file closes with ENDATA.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在COLUMNS部分，决策变量的名称（这里是x和y）列在左侧，属于目标函数或约束不等式的系数列在右侧。RHS部分包含模型约束的右侧向量。决策变量的上下界在BOUNDS部分定义。MPS文件以ENDATA结尾。
- en: Optimization Process and Getting Results
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优化过程与结果获取
- en: HiGHS uses [algorithms](https://ergo-code.github.io/HiGHS/dev/options/definitions/#option-solver)
    such as simplex or interior point method for the optimization process. To explain
    these algorithms deserve a separate post of their own. I hope to touch upon them
    in the future.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: HiGHS 使用如 [单纯形法](https://ergo-code.github.io/HiGHS/dev/options/definitions/#option-solver)
    或内点法等[算法](https://ergo-code.github.io/HiGHS/dev/options/definitions/#option-solver)进行优化过程。解释这些算法值得单独写一篇文章，我希望将来能涉及到它们。
- en: The code used to extract the results is given below. The model status is optimum.
    I extract the objective function value and the solution values of the decision
    variables. Furthermore, I print the number of iterations, the status of primal
    and dual solutions, and basis validity.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 提取结果的代码如下所示。模型状态为最优。我提取了目标函数值和决策变量的解值。此外，我还打印了迭代次数、原始解和对偶解的状态，以及基准有效性。
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/7f69ec7b81599082ddbdb184c9ac2de9.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7f69ec7b81599082ddbdb184c9ac2de9.png)'
- en: Printing results of the code above. Illustration by Author.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 打印上面代码的结果。插图由作者提供。
- en: Solution Files
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解文件
- en: After the optimization process, HiGHS allows writing the solution into a solution
    file with a `.sol` extension. Further, the solution can be written in different
    formats as given [here](https://ergo-code.github.io/HiGHS/dev/options/definitions/#write_solution_style).
    1 stands for HiGHS pretty format, and 3 stands for Glpsol pretty format respectively.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在优化过程之后，HiGHS 允许将解决方案写入一个 `.sol` 扩展名的解文件中。此外，解决方案可以按照[这里](https://ergo-code.github.io/HiGHS/dev/options/definitions/#write_solution_style)给出的不同格式写入。1
    表示 HiGHS 精美格式，3 表示 Glpsol 精美格式。
- en: '![](../Images/04c4e9bb7f3902eafe29504488db543e.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/04c4e9bb7f3902eafe29504488db543e.png)'
- en: Solution file styles available with HiGHS. Illustration based on [HiGHS documentation](https://ergo-code.github.io/HiGHS/dev/options/definitions/#write_solution_style).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: HiGHS 可用的解决方案文件样式。插图来源于[HiGHS 文档](https://ergo-code.github.io/HiGHS/dev/options/definitions/#write_solution_style)。
- en: To get the solution in style 3, I used `h.writeSolution("mysolution.sol", 3)`.
    The problem statistics are provided at the top. The optimal solution values are
    provided in the Activity column. The St column specifies the status of the solution.
    For example, B stands for Basic- the variable or constraint is part of the basis
    solution (optimal). NU refers that the solution is non-basic and is the same as
    the upper bound. The value in the Marginal column (often referred to as the shadow
    price or dual value) [refers to](https://or.stackexchange.com/questions/3070/glpk-meaning-of-the-marginal-column-in-the-solution-output)
    how much the objective function would vary with the unit change in the non-basic
    variable. For more information on the GLPK solution file information, one can
    refer to [here](https://en.wikibooks.org/wiki/GLPK/Solution_information).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以风格 3 获取解决方案，我使用了 `h.writeSolution("mysolution.sol", 3)`。问题统计信息在顶部提供。最优解值在活动列中提供。St
    列指定了解的状态。例如，B 表示基本——变量或约束是基础解的一部分（最优）。NU 表示该解是非基础的，并且与上界相同。边际列中的值（通常称为影子价格或对偶值）[指的是](https://or.stackexchange.com/questions/3070/glpk-meaning-of-the-marginal-column-in-the-solution-output)当非基础变量单位变化时，目标函数的变化量。有关
    GLPK 解文件信息的更多信息，可以参考[这里](https://en.wikibooks.org/wiki/GLPK/Solution_information)。
- en: '![](../Images/8f70b5d2ff64dc95a4efeca4af1fc8da.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8f70b5d2ff64dc95a4efeca4af1fc8da.png)'
- en: Structure of the solution file in Glpsol pretty style. Illustration by Author.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Glpsol 精美风格下解决方案文件的结构。插图由作者提供。
- en: Conclusion
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In this post, I presented an example of solving a simple linear optimization
    problem using an open-source solver called HiGHS with the `highspy` package in
    Python. Next, I explained how the optimization problem size can be inferred using
    the coefficient matrix, decision variable vector and RHS vector. I introduced
    and explained different components of mathematical programming system (mps) files
    for representing optimization problem. Finally, I demonstrated the optimization
    process of a solver, steps for extracting results and analyzing the solution file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我展示了如何使用名为 HiGHS 的开源求解器和 Python 中的 `highspy` 包解决一个简单的线性优化问题。接下来，我解释了如何通过系数矩阵、决策变量向量和右侧向量来推断优化问题的大小。我介绍并解释了用于表示优化问题的数学规划系统（mps）文件的不同组成部分。最后，我演示了求解器的优化过程，提取结果的步骤以及分析解文件的过程。
- en: The notebook and relevant files for this post is available in this GitHub [repository](https://github.com/hbshrestha/Optimization).
    Thank you for reading!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的笔记本和相关文件可以在这个 GitHub [仓库](https://github.com/hbshrestha/Optimization)中找到。感谢您的阅读！
