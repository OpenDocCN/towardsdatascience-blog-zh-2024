["```py\n# Import libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import root_mean_squared_error\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\n\n# Create dataset\ndataset_dict = {\n    'Outlook': ['sunny', 'sunny', 'overcast', 'rain', 'rain', 'rain', 'overcast', 'sunny', 'sunny', 'rain', 'sunny', 'overcast', 'overcast', 'rain', 'sunny', 'overcast', 'rain', 'sunny', 'sunny', 'rain', 'overcast', 'rain', 'sunny', 'overcast', 'sunny', 'overcast', 'rain', 'overcast'],\n    'Temperature': [85.0, 80.0, 83.0, 70.0, 68.0, 65.0, 64.0, 72.0, 69.0, 75.0, 75.0, 72.0, 81.0, 71.0, 81.0, 74.0, 76.0, 78.0, 82.0, 67.0, 85.0, 73.0, 88.0, 77.0, 79.0, 80.0, 66.0, 84.0],\n    'Humidity': [85.0, 90.0, 78.0, 96.0, 80.0, 70.0, 65.0, 95.0, 70.0, 80.0, 70.0, 90.0, 75.0, 80.0, 88.0, 92.0, 85.0, 75.0, 92.0, 90.0, 85.0, 88.0, 65.0, 70.0, 60.0, 95.0, 70.0, 78.0],\n    'Wind': [False, True, False, False, False, True, True, False, False, False, True, True, False, True, True, False, False, True, False, True, True, False, True, False, False, True, False, False],\n    'Num_Players': [52, 39, 43, 37, 28, 19, 43, 47, 56, 33, 49, 23, 42, 13, 33, 29, 25, 51, 41, 14, 34, 29, 49, 36, 57, 21, 23, 41]\n}\n\ndf = pd.DataFrame(dataset_dict)\n\n# One-hot encode 'Outlook' column\ndf = pd.get_dummies(df, columns=['Outlook'])\n\n# Convert 'Wind' column to binary\ndf['Wind'] = df['Wind'].astype(int)\n\n# Split data into features and target, then into training and test sets\nX, y = df.drop(columns='Num_Players'), df['Num_Players']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.5, shuffle=False)\n\n# Identify numerical columns\nnumerical_columns = ['Temperature', 'Humidity']\n\n# Create a ColumnTransformer to scale only numerical columns\nct = ColumnTransformer([\n    ('scaler', StandardScaler(), numerical_columns)\n], remainder='passthrough')\n\n# Fit the ColumnTransformer on the training data and transform both training and test data\nX_train_transformed = ct.fit_transform(X_train)\nX_test_transformed = ct.transform(X_test)\n\n# Convert the transformed data back to DataFrames\nfeature_names = numerical_columns + [col for col in X_train.columns if col not in numerical_columns]\nX_train_scaled = pd.DataFrame(X_train_transformed, columns=feature_names, index=X_train.index)\nX_test_scaled = pd.DataFrame(X_test_transformed, columns=feature_names, index=X_test.index)\n```", "```py\n# Import libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import root_mean_squared_error\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\n\n# Create dataset\ndataset_dict = {\n    'Outlook': ['sunny', 'sunny', 'overcast', 'rain', 'rain', 'rain', 'overcast', 'sunny', 'sunny', 'rain', 'sunny', 'overcast', 'overcast', 'rain', 'sunny', 'overcast', 'rain', 'sunny', 'sunny', 'rain', 'overcast', 'rain', 'sunny', 'overcast', 'sunny', 'overcast', 'rain', 'overcast'],\n    'Temperature': [85.0, 80.0, 83.0, 70.0, 68.0, 65.0, 64.0, 72.0, 69.0, 75.0, 75.0, 72.0, 81.0, 71.0, 81.0, 74.0, 76.0, 78.0, 82.0, 67.0, 85.0, 73.0, 88.0, 77.0, 79.0, 80.0, 66.0, 84.0],\n    'Humidity': [85.0, 90.0, 78.0, 96.0, 80.0, 70.0, 65.0, 95.0, 70.0, 80.0, 70.0, 90.0, 75.0, 80.0, 88.0, 92.0, 85.0, 75.0, 92.0, 90.0, 85.0, 88.0, 65.0, 70.0, 60.0, 95.0, 70.0, 78.0],\n    'Wind': [False, True, False, False, False, True, True, False, False, False, True, True, False, True, True, False, False, True, False, True, True, False, True, False, False, True, False, False],\n    'Num_Players': [52, 39, 43, 37, 28, 19, 43, 47, 56, 33, 49, 23, 42, 13, 33, 29, 25, 51, 41, 14, 34, 29, 49, 36, 57, 21, 23, 41]\n}\n\ndf = pd.DataFrame(dataset_dict)\n\n# One-hot encode 'Outlook' column\ndf = pd.get_dummies(df, columns=['Outlook'])\n\n# Convert 'Wind' column to binary\ndf['Wind'] = df['Wind'].astype(int)\n\n# Split data into features and target, then into training and test sets\nX, y = df.drop(columns='Num_Players'), df['Num_Players']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.5, shuffle=False)\n\n# Identify numerical columns\nnumerical_columns = ['Temperature', 'Humidity']\n\n# Create a ColumnTransformer to scale only numerical columns\nct = ColumnTransformer([\n    ('scaler', StandardScaler(), numerical_columns)\n], remainder='passthrough')\n\n# Fit the ColumnTransformer on the training data and transform both training and test data\nX_train_transformed = ct.fit_transform(X_train)\nX_test_transformed = ct.transform(X_test)\n\n# Convert the transformed data back to DataFrames\nfeature_names = numerical_columns + [col for col in X_train.columns if col not in numerical_columns]\nX_train_scaled = pd.DataFrame(X_train_transformed, columns=feature_names, index=X_train.index)\nX_test_scaled = pd.DataFrame(X_test_transformed, columns=feature_names, index=X_test.index)\n\n# Initialize and train KNN Regressor\nknn = KNeighborsRegressor(n_neighbors=5, \n                          algorithm='kd_tree', #'ball_tree', 'brute'\n                          leaf_size=5) #default is 30\nknn.fit(X_train_scaled, y_train)\n\n# Make predictions\ny_pred = knn.predict(X_test_scaled)\n\n# Calculate and print RMSE\nrmse = root_mean_squared_error(y_test, y_pred)\nprint(f\"RMSE: {rmse:.4f}\")\n```"]