- en: Improving Code Quality During Data Transformation with Polars
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Polars提高数据转换过程中的代码质量
- en: 原文：[https://towardsdatascience.com/improving-code-quality-during-data-transformation-with-polars-92997e67c8a9?source=collection_archive---------10-----------------------#2024-08-09](https://towardsdatascience.com/improving-code-quality-during-data-transformation-with-polars-92997e67c8a9?source=collection_archive---------10-----------------------#2024-08-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/improving-code-quality-during-data-transformation-with-polars-92997e67c8a9?source=collection_archive---------10-----------------------#2024-08-09](https://towardsdatascience.com/improving-code-quality-during-data-transformation-with-polars-92997e67c8a9?source=collection_archive---------10-----------------------#2024-08-09)
- en: '[](https://medium.com/@npotapov?source=post_page---byline--92997e67c8a9--------------------------------)[![Nikolai
    Potapov](../Images/d2ac4b8c12c0cf70df05b8908b875a19.png)](https://medium.com/@npotapov?source=post_page---byline--92997e67c8a9--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--92997e67c8a9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--92997e67c8a9--------------------------------)
    [Nikolai Potapov](https://medium.com/@npotapov?source=post_page---byline--92997e67c8a9--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@npotapov?source=post_page---byline--92997e67c8a9--------------------------------)[![Nikolai
    Potapov](../Images/d2ac4b8c12c0cf70df05b8908b875a19.png)](https://medium.com/@npotapov?source=post_page---byline--92997e67c8a9--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--92997e67c8a9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--92997e67c8a9--------------------------------)
    [Nikolai Potapov](https://medium.com/@npotapov?source=post_page---byline--92997e67c8a9--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--92997e67c8a9--------------------------------)
    ·6 min read·Aug 9, 2024
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--92997e67c8a9--------------------------------)
    ·阅读时长6分钟·2024年8月9日
- en: --
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/32683c335dbe8f17d37fc6ceaac04d46.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/32683c335dbe8f17d37fc6ceaac04d46.png)'
- en: Image created with AI by Dall-E
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 由Dall-E AI生成的图片
- en: In our daily lives as Data/Analytic Engineers, writing ETL/ELT workflows and
    pipelines (or perhaps your company uses a different term) is a routine and integral
    part of our work. However, in this article, I will focus only on the Transformation
    stage. Why? Because at this stage, data from various sources and of different
    types acquires business significance for the company. This stage is very important
    and also incredibly delicate, as an error can instantly mislead the user, causing
    them to lose trust in your data.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们作为数据/分析工程师的日常工作中，编写ETL/ELT工作流和管道（或者你所在的公司使用其他术语）是我们工作中常规且重要的一部分。然而，在这篇文章中，我将只关注转换阶段。为什么？因为在这一阶段，来自不同来源和不同类型的数据获得了对公司有意义的商业价值。这个阶段非常重要，而且极其微妙，因为一个错误可能会瞬间误导用户，导致他们失去对数据的信任。
- en: To illustrate the process of improving code quality, let’s consider a hypothetical
    example. Imagine a website where we log user actions, such as what they viewed
    and purchased. We’ll have `user_id` for the user ID, `product_id` for the product,
    `action_type` for the type of action (either a view or purchase), and `action_dt`
    for the action timestamp.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明提高代码质量的过程，让我们考虑一个假设的例子。假设有一个网站，我们记录用户的行为，例如他们查看了什么和购买了什么。我们将使用`user_id`表示用户ID，`product_id`表示产品，`action_type`表示行为类型（可以是查看或购买），`action_dt`表示行为的时间戳。
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Additionally, for our task, we’ll need a product catalog, which in our case
    will include only `product_id` and its price (`price`). Our data is now ready
    for the example.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于我们的任务，我们还需要一个产品目录，在我们的例子中，它只包含`product_id`和价格（`price`）。我们的数据现在已经准备好用于示例。
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let’s tackle our first task: creating a report that will contain the total
    purchase amount and the ratio of the number of purchased items to viewed items
    from the previous day for each user. This task isn’t particularly complex and
    can be quickly implemented. Here’s how it might look using Polars:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们处理第一个任务：创建一个报告，其中包含每个用户在前一天的总购买金额以及购买商品数量与查看商品数量的比例。这个任务并不复杂，可以快速实现。以下是使用Polars的实现方式：
- en: '[PRE3]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is a working solution that could be deployed to production, some might
    say, but not us since you’ve opened this article. At the beginning, I emphasized
    that I would focus specifically on the transformation step.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种可以部署到生产环境的工作解决方案，有人可能会这么说，但我们不同，因为你已经打开了这篇文章。一开始，我强调过，我将特别关注转换步骤。
- en: If we think about the long-term maintenance of this code, testing, and remember
    that there will be hundreds of such reports, we must recognize that each subsequent
    developer will understand this code less than the previous one, thereby increasing
    the chances of errors with every change.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们考虑到这段代码的长期维护、测试，并且记住将会有数百个这样的报告，我们必须认识到，每一个后续开发人员对这段代码的理解都将低于前一个开发人员，从而增加每次修改时出现错误的几率。
- en: 'I would like to reduce this risk, and that’s why I’ve come to the following
    approach:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我想减少这个风险，因此我采用了以下方法：
- en: '**Step 1**: Let’s separate all the business logic into a distinct class, such
    as `DailyUserPurchaseReport`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1**：让我们将所有的业务逻辑拆分到一个独立的类中，例如`DailyUserPurchaseReport`。'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Step 2**: Let’s define the arguments this class should accept: `sources`
    - various sources we need for our work, and `params` - variable parameters that
    may change, in our case, this could be the report date.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2**：让我们定义这个类应该接受的参数：`sources` - 我们工作所需的各种来源，和`params` - 可能会变化的可变参数，在我们的例子中，这可能是报告日期。'
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Step 3**: Define a method that will perform the transformation, for example,
    `execute`.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 3**：定义一个方法来执行转换，例如，`execute`。'
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Step 4**: Break down the entire process into separate functions that accept
    a `pl.LazyFrame` and also return a `pl.LazyFrame`.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 4**：将整个过程拆分成独立的函数，每个函数都接受一个`pl.LazyFrame`并返回一个`pl.LazyFrame`。'
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Step 5**: Now, use the magic function `pipe` to connect our entire pipeline
    together. This is precisely why we use `pl.LazyFrame` everywhere:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 5**：现在，使用魔法函数`pipe`将我们的整个管道连接在一起。这正是我们在各处使用`pl.LazyFrame`的原因：'
- en: '[PRE8]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*It is recommended to use LazyFrame when piping operations, in order to fully
    take advantage of query optimization and parallelization.*'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*建议在管道操作时使用LazyFrame，以充分利用查询优化和并行化。*'
- en: 'Final code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 最终代码：
- en: '[PRE9]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Let’s check the execution:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下执行情况：
- en: '[PRE10]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Result:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 结果：
- en: '[PRE11]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Bonus
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 奖励
- en: For those using Test-Driven Development (TDD), this approach is especially beneficial.
    TDD emphasizes writing tests before the actual implementation. By having clearly
    defined, small functions, you can write precise tests for each part of the transformation
    process, ensuring that each function behaves as expected. This not only makes
    the process smoother but also ensures that your transformations are thoroughly
    validated at each step.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用测试驱动开发（TDD）的人来说，这种方法尤为有益。TDD强调在实际实现之前编写测试。通过定义清晰的小函数，你可以为每个转换过程编写精确的测试，确保每个函数按预期行为运行。这不仅使过程更加顺畅，还确保了你的转换在每个步骤都经过充分验证。
- en: Conclusion
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, I have outlined a structured approach to improving code quality
    in your data workflows using Polars. By isolating the transformation step and
    breaking down the process into distinct, manageable parts, we ensure that our
    code is both robust and maintainable. Through the use of `pl.LazyFrame` and the
    `pipe` function, we take full advantage of Polars capabilities for query optimization
    and parallelization. This method not only enhances the efficiency of our data
    transformations but also ensures the integrity and business relevance of the data
    we work with. By following these steps, you can create more reliable and scalable
    data workflows, ultimately leading to better data-driven decision-making.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我概述了一种使用Polars改善数据工作流代码质量的结构化方法。通过将转换步骤隔离并将过程拆分为独立的、可管理的部分，我们确保了我们的代码既稳健又易于维护。通过使用`pl.LazyFrame`和`pipe`函数，我们充分利用了Polars在查询优化和并行化方面的能力。这种方法不仅提高了数据转换的效率，还确保了我们处理的数据的完整性和业务相关性。通过遵循这些步骤，你可以创建更可靠、可扩展的数据工作流，最终推动更好的数据驱动决策。
- en: Share Your Experience
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享您的经验
- en: If you have experience or useful tips, share your opinion in the comments. It’s
    always interesting to learn the experiences of other developers.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有经验或有用的技巧，欢迎在评论中分享你的意见。了解其他开发者的经验总是很有趣的。
