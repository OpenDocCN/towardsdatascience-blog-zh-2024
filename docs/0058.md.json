["```py\ndocker build -t pyspark-whylogs .\n```", "```py\ndocker run -p 8888:8888 pyspark-whylogs\n```", "```py\n# Import libraries\nfrom typing import Any\nimport pyspark\nfrom pyspark.sql import SparkSession\nimport pyspark.sql.functions as F\nfrom whylogs.api.pyspark.experimental import collect_column_profile_views\nfrom whylogs.api.pyspark.experimental import collect_dataset_profile_view\nfrom whylogs.core.metrics.condition_count_metric import Condition\nfrom whylogs.core.relations import Predicate\nfrom whylogs.core.schema import DeclarativeSchema\nfrom whylogs.core.resolvers import STANDARD_RESOLVER\nfrom whylogs.core.specialized_resolvers import ConditionCountMetricSpec\nfrom whylogs.core.constraints.factories import condition_meets\nfrom whylogs.core.constraints import ConstraintsBuilder\nfrom whylogs.core.constraints.factories import no_missing_values\nfrom whylogs.core.constraints.factories import greater_than_number\nfrom whylogs.viz import NotebookProfileVisualizer\nimport pandas as pd\nimport datetime\n```", "```py\n# Initialize a SparkSession\nspark = SparkSession.builder.appName('whylogs').getOrCreate()\nspark.conf.set(\"spark.sql.execution.arrow.pyspark.enabled\",\"true\")\n```", "```py\n# Create a dataframe from CSV file\ndf = spark.read.option(\"header\",True).option(\"inferSchema\",True).csv(\"/home/patient_data.csv\")\ndf.printSchema()\n```", "```py\n# First row from dataframe\ndf.show(n=1, vertical=True)\n```", "```py\n# Profile the data with whylogs\ndf_profile = collect_column_profile_views(df)\nprint(df_profile)\n```", "```py\ndf_profile[\"height\"].get_metric(\"distribution\").mean.value\n```", "```py\n# Compare with mean from dataframe\ndf.select(F.mean(F.col(\"height\"))).show()\n```", "```py\n# Putting everything together\ndf_profile_view = collect_dataset_profile_view(input_df=df)\ndf_profile_view.to_pandas().head()\n```", "```py\n# Persist profile as a file\ndf_profile_view.to_pandas().reset_index().to_csv(\"/home/jovyan/patint_profile.csv\",header = True,index = False)\n```", "```py\ndef check_date_format(date_value: Any) -> bool:\n    date_format = '%Y-%m-%d'\n    try:\n        datetime.datetime.strptime(date_value, date_format)\n        return True\n    except ValueError:\n        return False\n\nvisit_date_condition = {\"is_date_format\": Condition(Predicate().is_(check_date_format))}\n```", "```py\n# Create condition count metric\nschema = DeclarativeSchema(STANDARD_RESOLVER)\nschema.add_resolver_spec(column_name=\"visit_date\", metrics=[ConditionCountMetricSpec(visit_date_condition)])\n```", "```py\n# Use the schema to pass to logger with collect_dataset_profile_view\n# This creates profile with standard metrics as well as condition count metrics\ndf_profile_view_v2 = collect_dataset_profile_view(input_df=df, schema=schema)\n```", "```py\nbuilder = ConstraintsBuilder(dataset_profile_view=df_profile_view_v2)\nbuilder.add_constraint(no_missing_values(column_name=\"patient_id\"))\nbuilder.add_constraint(condition_meets(column_name=\"visit_date\", condition_name=\"is_date_format\"))\nbuilder.add_constraint(greater_than_number(column_name=\"weight\",number=0))\n\nconstraints = builder.build()\nconstraints.generate_constraints_report()\n```", "```py\n# Visualize constraints report using Notebook Profile Visualizer\nvisualization = NotebookProfileVisualizer()\nvisualization.constraints_report(constraints, cell_height=300)\n```", "```py\n# Validate visit_date column\ndf \\\n.withColumn(\"check_visit_date\",F.to_date(F.col(\"visit_date\"),\"yyyy-MM-dd\")) \\\n.withColumn(\"null_check\",F.when(F.col(\"check_visit_date\").isNull(),\"null\").otherwise(\"not_null\")) \\\n.groupBy(\"null_check\") \\\n.count() \\\n.show(truncate = False)\n\n+----------+-----+\n|null_check|count|\n+----------+-----+\n|not_null  |98977|\n|null      |1023 |\n+----------+-----+\n```", "```py\n# Validate weight column\ndf \\\n.select(\"weight\") \\\n.groupBy(\"weight\") \\\n.count() \\\n.orderBy(F.col(\"weight\")) \\\n.limit(1) \\\n.show(truncate = False)\n\n+------+-----+\n|weight|count|\n+------+-----+\n|0     |2039 |\n+------+-----+\n```"]