- en: Dune — A Hidden Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/dune-a-hidden-network-5ed9dea5c52f?source=collection_archive---------2-----------------------#2024-03-19](https://towardsdatascience.com/dune-a-hidden-network-5ed9dea5c52f?source=collection_archive---------2-----------------------#2024-03-19)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/15da4170bfe982fa87481d66e4312b6e.png)[](https://medium.com/@janosovm?source=post_page---byline--5ed9dea5c52f--------------------------------)[![Milan
    Janosov](../Images/b7ede67b165cdd368d96f13f46c68ccb.png)](https://medium.com/@janosovm?source=post_page---byline--5ed9dea5c52f--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--5ed9dea5c52f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--5ed9dea5c52f--------------------------------)
    [Milan Janosov](https://medium.com/@janosovm?source=post_page---byline--5ed9dea5c52f--------------------------------)'
  prefs: []
  type: TYPE_IMG
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--5ed9dea5c52f--------------------------------)
    ·9 min read·Mar 19, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: In this article, with [Patrik Szigeti](https://medium.com/u/6f5de121c728?source=post_page---user_mention--5ed9dea5c52f--------------------------------),
    we designed a data and network methodology supported by graph visuals to outline
    the complex social network behind the original Dune trilogy.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Following the success of Dune both at the box office and with the critics in
    2021, Dune: Part Two was one of the most anticipated movies of 2024, and it didn’t
    disappoint. On track to earn more, and holding higher ratings both on Rotten Tomatoes
    and iMDB than its prequel at the time of writing this article, with its ever changing
    political landscape, Dune is the perfect franchise to dive into through network
    science. In this short piece, we aimed to explore the connections between the
    different Houses and people of the Impremium based on the first three books of
    Frank Herbert — Dune (1965), Dune Messiah (1969) and Children of Dune (1976).'
  prefs: []
  type: TYPE_NORMAL
- en: In the first part of this article, we present a Python-based approach to collecting
    character profile data from the [Dune Wiki](https://dune.fandom.com/wiki/Dune_Wiki)
    and turn those profiles into a catchy network graph. Then, in the second — rather
    spoiler-heavy — section, we dive into the depth of the network and extract all
    the stories it has to say about the first trilogy of the Dune.
  prefs: []
  type: TYPE_NORMAL
- en: '*All images were created by the authors.*'
  prefs: []
  type: TYPE_NORMAL
- en: 1 Building the Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, we use Python to collect the full list of Dune characters. Then, we download
    their biography profiles from each character’s fan wiki site and count the number
    of times each character’s story mentions any other character’s story, assuming
    these mentions encode various interactions between any two pairs of characters.
    Then, we will use network science to turn these relationships into a complex graph.
  prefs: []
  type: TYPE_NORMAL
- en: '**1.1 Collecting the list of characters**'
  prefs: []
  type: TYPE_NORMAL
- en: 'First off, we collected the list of all relevant characters from the Dune fan
    wiki site. Namely, we by used urllib and bs4 to extracted the names and fan wiki
    id-s of each character mentioned and has its own wiki page encpoded by their id.
    We did this for the first three books: Dune, Dune Messiah and Childen of Dune.
    These three books cover the rise of the house of Atreides.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://dune.fandom.com/wiki/Dune_(novel)](https://dune.fandom.com/wiki/Dune_(novel))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://dune.fandom.com/wiki/Dune_Messiah](https://dune.fandom.com/wiki/Dune_Messiah)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://dune.fandom.com/wiki/Children_of_Dune_(novel)](https://dune.fandom.com/wiki/Children_of_Dune_(novel))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'First, download the character listing site’s html:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A little manual help to fine-tune the character name and id:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we extracted all the potentially relevant names and the corresponding
    profile urls. Here, we manually checked from which tag blocks the names start
    (e.g. as opposed to the outline of the character listing site). Additionally,
    we decided to drop the characters marked by ‘XD’ and ‘DE’ corresponding to the
    extended series, as well as characters that were “Mentioned only” in a certain
    book:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This code block then outputs the list of characters, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7e6b5e9b0d8ed11ae35d2bd9eb9cd2ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Example on extracted names.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we check the number of characters we collected and save their profile
    URLs and identifiers for the next subchapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The outputs of this cell, showing 119 characters with profile URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7e61799e86e6600f8898effb400031cc.png)'
  prefs: []
  type: TYPE_IMG
- en: '**1.2 Downloading character profiles**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our goal is to map out the social network of the Dune characters — which means
    that we need to figure out who interacted with whom. In the previous sub chapter,
    we got the list of all the ‘whom,’ and now we will get the info about their personal
    stories. We will get those stories by again using simple web scraping techniques,
    and then save the source of each characters personal site in a separate file locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The result of running this code will be a folder in our local directory with
    all the fan wiki site profiles belonging to every single selected character.
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 Building the network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To build the network between characters, we count the number of times each character’s
    wiki site source references any other character’s wiki identifier using the following
    logic. Here, we build up the edge list — the list of connections which contain
    both the source and the target node (character) of the connections as well as
    the weight (co-reference frequency) between the two characters’ pages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once we run this block of code, we will get the result of 307 as the number
    of edges connecting the 119 Dune characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we use the NetworkX graph analytics library to turn the edge list into
    a graph object and output the number of nodes and edges the graph has:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The result of this code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa07ed552c575246b9ba952c33094bbc.png)'
  prefs: []
  type: TYPE_IMG
- en: The number of nodes is only 72, meaning 47 characters were not linked to any
    central member in their — probably rather brief — wiki profiles. Additionally,
    we see a decrease of four in the number of edges because a few self-loops were
    removed as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a brief view of the network using the built-in Matplotlib plotter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9e39fce207d89c086a0d9021a20011bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Initial network visualization of the Dune characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'While this visual already shows some network structure, we exported the graph
    into a Gephi file using the following line of code, and designed the network attached
    on the figure below (the how-to of such network visuals will be the topic of an
    upcoming tutorial article):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The full Dune network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ecc0ef482242cf4d3dda675e0ed11865.png)'
  prefs: []
  type: TYPE_IMG
- en: The entire network of Dune characters. Networks correspond to network communities
    (densely interconnected subgraphs) with a few minor manual tweaks, while nodes
    are sized based on the number of connections they have.
  prefs: []
  type: TYPE_NORMAL
- en: 2 Reading the Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Warning: the following paragraphs contain spoilers from the first three books
    of the Dune franchise. The two movies (Dune and Dune: Part Two) are based on the
    first book.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It’s no surprise that we would find Paul Atreides (also known as Lisan al-Gaib,
    Muad’Dib, Usul, Kwisatz Haderach, and many others) in the middle of our network.
    He’s the protagonist of the first book (and the movies), and he’s a central figure
    who, in the end, takes his place as the emperor of the Imperium. During the second
    book, Dune Messiah, we meet a different Paul, a leader who, after years of fighting
    and being cursed by the gift of foresight, walks into the desert as a blind Fremen,
    offering himself up to Shai–Hulud. He then appears in Children of Dune as The
    Preacher, a mysterious figure operating and preaching from the desert, and eventually
    meeting his end. During this journey he crosses paths with many other characters.
    This is perfectly illustrated by the fact that his so-called ego network — the
    subgraph of all his connections and the connections between those — contains about
    half of all the nodes and 64% of all the links. Also, the figure is shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9ab29b6bb8fda8e979e04b9846d23b69.png)'
  prefs: []
  type: TYPE_IMG
- en: The ego network of Paul.
  prefs: []
  type: TYPE_NORMAL
- en: As we keep reading the network, we can see House Atreides in the middle of it,
    and of course, centered around Paul is his family. His parents, Lady Jessica,
    the concubine of Leto Atreides I, and Reverend Mother of the Bene Gesserit. Jessica
    is the daughter of Vladimir Harkonnen of House Harkonnen, giving us the first
    connection between the yellow and light blue node groups. We can see a strong
    connection between Paul and his Fremen concubine, Chani, further connecting to
    their children, Leto II and Ghanima. Paul is also closely connected to his mentors
    and good friends, Duncan Idaho and Gurney Halleck, as well as Reverend Mother
    Gaius Helen Mohiam, who keeps popping up across the books to strengthen the Bene
    Gesserit’s cause.
  prefs: []
  type: TYPE_NORMAL
- en: Even though the network is clearly centered on Paul, and we can see the distinct
    groups of House Corrino (brown), House Harkonnen (light blue), and the Fremens
    (blue), what’s really interesting is how much this simple network created based
    on Wikipedia articles tells us about the plot unfolding during these three books.
  prefs: []
  type: TYPE_NORMAL
- en: We see Liet Kynes, the de facto leader of the Fremen and platenologist, whose
    dream was to see the barren planet of Arrakis become rich in green pastures and
    water supplies. His daughter, Chani, connects to Stilgar, a prominent figure in
    Paul’s life, a religious follower, and through him to all of the Fremen. But edged
    between them is Scytale, who plotted to destroy the royal family after Muad’Dib’s
    Jihad through Hayt, the ghola (an artificially created human replicated from a
    dead individual) of Duncan Idaho. To those who only saw the movies, it may come
    as a surprise that Duncan is such a central figure in our network, but after serving
    as the swordmaster of House Atreides, and falling in the Desert War on Arrakis,
    he came back as the aforementioned ghola, and played an important part — marrying
    Alia Atreides, daughter of Lady Jessica, sister of Paul.
  prefs: []
  type: TYPE_NORMAL
- en: Movie-seers might also be surprised by the coloring of Thufir Hawat as part
    of House Harkonnen. He was a Mentat responsible for the security of House Atreides,
    but after the Harkonnens replaced the Atreides as rulers of Arrakis, he was forced
    into their service, and plotted against them, even though his true goal was always
    to revenge the death of his beloved Duke, thinking Lady Jessica was behind the
    attack. He later gained redemption by refusing to kill Paul and committing suicide
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: The most fascinating part about this network, however, is no matter how small
    a character’s node appears, that doesn’t mean they didn’t play an important role
    in the plot. They might have said the right thing to the wrong audience (Bronso
    of Ix claiming Paul lost something essential to his humanity before becoming Muad’Dib),
    became the lover of Alia Atreides (Javid), or plotted to kill the Atreides twins,
    Leto and Ghanima (Tyekanik). We could go on and on, these are just a few examples
    of the intriguing interconnected political landscape of Frank Herbert’s Dune.
  prefs: []
  type: TYPE_NORMAL
- en: 3 Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this article, we aimed to create a bridge between data science fans and
    Dune fans — and potentially entertain the already existing overlapping communities
    between these two. First, we presented a relatively generic framework in Python
    that allows us to map out the social network of any fan wiki site that we come
    across. Second, we also gave detailed interpretations of how these network visuals
    show entire stories unfolding — a picture worth a thousand words, or even more
    — a trilogy.
  prefs: []
  type: TYPE_NORMAL
