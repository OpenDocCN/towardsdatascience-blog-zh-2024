["```py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler\nfrom plotnine import *\n\nmtcars_values = {\n    'mpg': [19.7, 15, 21.4],\n    'cyl': [6, 8, 4],\n    'disp': [145, 301, 121],\n    'hp': [175, 335, 109],\n    'drat': [3.62, 3.54, 4.11],\n    'wt': [2.77, 3.57, 2.78],\n    'qsec': [15.5, 14.6, 18.6],\n    'vs': [0, 0, 1],py\n    'am': [1, 1, 1],\n    'gear': [5, 5, 4],\n    'carb': [6, 8, 2],\n    'wtdip': [401.65, 1074.57, 336.38]\n}\n\nmtcars = pd.DataFrame(mtcars_values, \nindex=[\"Ferrari Dino\", \"Maserati Bora\", \"Volvo 142E\"])\n\n# Select and rename columns\np_data = mtcars.reset_index().rename(columns={'index': 'group'})[['group', 'mpg', 'cyl', 'hp', 'wt', 'qsec']]\np_data.columns = ['group', 'Miles per Gallon', 'Cylinders', \n'Horsepower', 'Weight', 'Quarter mile\\ntime']\n```", "```py\n# Calculate the coordinates of polygon tips\ndef circle_coords(r, n_axis=len(p_data.columns) - 1):\n    fi = np.linspace(0, 2*np.pi, n_axis+1) + np.pi/2\n    x = r * np.cos(fi)\n    y = r * np.sin(fi)\n    return pd.DataFrame({'x': x, 'y': y, 'r': r})\n\ncentral_distance = 0.2\naxis_name_offset = 0.2\n\ncircle_df = pd.concat([circle_coords(r) for r in np.arange(0, 1.25, 0.25) + central_distance])\n\nstep_1 = (ggplot(circle_df, aes('x', 'y')) +\n  geom_polygon(data=circle_coords(1 + central_distance, p_data.shape[1] - 1), alpha=1, fill='beige') +\n  geom_path(aes(group='r'), linetype='dashed', alpha=0.5) +\n  theme_void() +\n  theme(legend_title=element_blank(),\n        legend_direction='horizontal',\n        legend_position='bottom',\n        legend_box_spacing=0))\n```", "```py\n# Calculate the coordinates for the axis lines\ndef axis_coords(n_axis):\n    fi = np.linspace(0, 2*np.pi*(1-1/n_axis), n_axis) + np.pi/2\n    x1 = central_distance * np.cos(fi)\n    y1 = central_distance * np.sin(fi)\n    x2 = (1 + central_distance) * np.cos(fi)\n    y2 = (1 + central_distance) * np.sin(fi)\n    return pd.DataFrame({'x': np.concatenate([x1, x2]), \n                         'y': np.concatenate([y1, y2]), \n                         'id': np.tile(np.arange(1, n_axis + 1), 2)})\n\nstep_2 = (step_1 + geom_line(data=axis_coords(p_data.shape[1] - 1), mapping=aes(x='x', y='y', group='id'), alpha=0.3))\n```", "```py\n# Calculate the rescaled coordinates for each point\n\nn_axis = len(p_data.columns) - 1  # Subtract 1 to exclude the group column\n\nscaler = MinMaxScaler()\n\nrescaled_data = p_data.copy()\nrescaled_data.iloc[:, 1:] = scaler.fit_transform(rescaled_data.iloc[:, 1:])\nrescaled_data['copy'] = rescaled_data.iloc[:, 1]\n\nmelted_data = rescaled_data.melt(id_vars=['group'], var_name='parameter', value_name='value', ignore_index=False)\n\nmelted_data['parameter'] = pd.Categorical(melted_data['parameter'], categories=np.array(rescaled_data.columns[1:]), ordered=True)\nmelted_data = melted_data.sort_values(by = ['group', 'parameter'])\nmelted_data['fi'] = np.tile(np.linspace(0, 2 * np.pi, num=n_axis+1) + np.pi / 2, p_data.shape[0])\nmelted_data['x'] = (melted_data['value'] + central_distance)*np.cos(melted_data['fi'])\nmelted_data['y'] = (melted_data['value'] + central_distance)*np.sin(melted_data['fi'])\n\nrescaled_coords_data = melted_data\n\nstep_3 = (step_2 +\ngeom_point(data=rescaled_coords_data, mapping=aes(x='x', y='y', group='group', color='group'), size=3) +\n        geom_path(data=rescaled_coords_data, mapping=aes(x='x', y='y', group='group', color='group'), size=1) +\n        geom_polygon(data=rescaled_coords_data, mapping=aes('x', 'y', group = 'group', color = 'group', fill = 'group'), size = 1, alpha = 0.05, show_legend = False))\n```", "```py\n# Radius and corresponding feature value for each feature\ntext_data = pd.DataFrame({col: np.linspace(p_data[col].min(), p_data[col].max(), 5) \n                          for col in p_data.columns if col != 'group'})\ntext_data['r'] = np.arange(0, 1.25, 0.25)\ntext_data = text_data.melt(id_vars=['r'], var_name='parameter', value_name='value')\ntext_data['parameter'] = pd.Categorical(text_data['parameter'], categories=np.array(p_data.columns[1:]), ordered=True)\ntext_data = text_data.sort_values(by = ['r', 'parameter'])\n\ndef text_coords(r, n_axis=len(p_data.columns) - 1):\n    fi = np.linspace(0, 2*np.pi*(1-1/n_axis), n_axis) + np.pi/2 + 0.01*2*np.pi/r\n    x = r * np.cos(fi)\n    y = r * np.sin(fi)\n    return pd.DataFrame({'x': x, 'y': y, 'r': r - central_distance})\n\n# Coordinates for the axis labels\nlabels_data = pd.concat([text_coords(r) for r in np.arange(0, 1.25, 0.25) + central_distance])\n\n# Combine with text_data\nlabels_data = pd.concat([labels_data.reset_index(drop=True), \n                         text_data.drop('r', axis=1).reset_index(drop=True)], \n                        axis=1)\n\nlabels_data['value']=labels_data['value'].round(2) \n\nstep_4 = (step_3 +\n        geom_text(data=labels_data, mapping=aes(x='x', y='y', label='value'), alpha=0.65, size=8, \n         color='#303030') +\n        geom_text(data=text_coords(1 + central_distance + axis_name_offset, p_data.shape[1] - 1),\n         mapping=aes(x='x', y='y'), \n         label=[param for param in p_data.columns[1:]],\n         size=9) +\n        labs(color='', title = 'Comparison of car properties'))\n```", "```py\n#Final aesthetic touches\nstep_5 = (step_4 +\n          labs(color='', title='Comparison of car properties') +\n             theme(legend_position='bottom',\n                   legend_text=element_text(size=7, face='bold'),\n                   legend_box_margin=0,\n                   legend_margin=-20,\n                   plot_title=element_text(size=10, margin={'b': -30}, face='bold')) +\n             lims(x=(-1.75, 1.75), y=(-1.5, 1.8)))\n```", "```py\n# Wrapping the above code into an easy-to-use function\ndef multiaxis_radar(p_data, central_distance=0.2, axis_name_offset=0.2):\n    def circle_coords(r, n_axis=len(p_data.columns) - 1):\n        fi = np.linspace(0, 2*np.pi, n_axis+1) + np.pi/2\n        x = r * np.cos(fi)\n        y = r * np.sin(fi)\n        return pd.DataFrame({'x': x, 'y': y, 'r': r})\n\n    circle_df = pd.concat([circle_coords(r) for r in np.arange(0, 1.25, 0.25) + central_distance])\n\n    def axis_coords(n_axis):\n        fi = np.linspace(0, 2*np.pi*(1-1/n_axis), n_axis) + np.pi/2\n        x1 = central_distance * np.cos(fi)\n        y1 = central_distance * np.sin(fi)\n        x2 = (1 + central_distance) * np.cos(fi)\n        y2 = (1 + central_distance) * np.sin(fi)\n        return pd.DataFrame({'x': np.concatenate([x1, x2]), \n                             'y': np.concatenate([y1, y2]), \n                             'id': np.tile(np.arange(1, n_axis + 1), 2)})\n\n    n_axis = len(p_data.columns) - 1\n\n    scaler = MinMaxScaler()\n    rescaled_data = p_data.copy()\n    rescaled_data.iloc[:, 1:] = scaler.fit_transform(rescaled_data.iloc[:, 1:])\n    rescaled_data['copy'] = rescaled_data.iloc[:, 1]\n\n    melted_data = rescaled_data.melt(id_vars=['group'], var_name='parameter', value_name='value', ignore_index=False)\n    melted_data['parameter'] = pd.Categorical(melted_data['parameter'], categories=np.array(rescaled_data.columns[1:]), ordered=True)\n    melted_data = melted_data.sort_values(by=['group', 'parameter'])\n    melted_data['fi'] = np.tile(np.linspace(0, 2 * np.pi, num=n_axis+1) + np.pi / 2, p_data.shape[0])\n    melted_data['x'] = (melted_data['value'] + central_distance)*np.cos(melted_data['fi'])\n    melted_data['y'] = (melted_data['value'] + central_distance)*np.sin(melted_data['fi'])\n\n    rescaled_coords_data = melted_data\n\n    text_data = pd.DataFrame({col: np.linspace(p_data[col].min(), p_data[col].max(), 5) \n                              for col in p_data.columns if col != 'group'})\n    text_data['r'] = np.arange(0, 1.25, 0.25)\n    text_data = text_data.melt(id_vars=['r'], var_name='parameter', value_name='value')\n    text_data['parameter'] = pd.Categorical(text_data['parameter'], categories=np.array(p_data.columns[1:]), ordered=True)\n    text_data = text_data.sort_values(by=['r', 'parameter'])\n\n    def text_coords(r, n_axis=len(p_data.columns) - 1):\n        fi = np.linspace(0, 2*np.pi*(1-1/n_axis), n_axis) + np.pi/2 + 0.01*2*np.pi/r\n        x = r * np.cos(fi)\n        y = r * np.sin(fi)\n        return pd.DataFrame({'x': x, 'y': y, 'r': r - central_distance})\n\n    labels_data = pd.concat([text_coords(r) for r in np.arange(0, 1.25, 0.25) + central_distance])\n    labels_data = pd.concat([labels_data.reset_index(drop=True), \n                             text_data.drop('r', axis=1).reset_index(drop=True)], \n                            axis=1)\n    labels_data['value'] = labels_data['value'].round(2)\n\n    plot = (ggplot(circle_df, aes('x', 'y')) +\n            geom_polygon(data=circle_coords(1 + central_distance, p_data.shape[1] - 1), alpha=1, fill='beige') +\n            geom_path(aes(group='r'), linetype='dashed', alpha=0.5) +\n            theme_void() +\n            theme(legend_title=element_blank(),\n            legend_direction='horizontal',\n            legend_position='bottom',\n            legend_box_spacing=0) +\n            geom_line(data=axis_coords(p_data.shape[1] - 1), mapping=aes(x='x', y='y', group='id'), alpha=0.3) +\n            geom_point(data=rescaled_coords_data, mapping=aes(x='x', y='y', group='group', color='group'), size=3) +\n            geom_path(data=rescaled_coords_data, mapping=aes(x='x', y='y', group='group', color='group'), size=1) +\n            geom_polygon(data=rescaled_coords_data, mapping=aes('x', 'y', group='group', color='group', fill='group'), size=1, alpha=0.05, show_legend=False) +\n            geom_text(data=labels_data, mapping=aes(x='x', y='y', label='value'), alpha=0.65, size=8, \n             color='#303030') +\n            geom_text(data=text_coords(1 + central_distance + axis_name_offset, p_data.shape[1] - 1),\n             mapping=aes(x='x', y='y'), \n             label=[param for param in p_data.columns[1:]],\n             size=9) +\n             labs(color='', title='Comparison of car properties') +\n             theme(legend_position='bottom',\n                   legend_text=element_text(size=7, face='bold'),\n                   legend_box_margin=0,\n                   legend_margin=-20,\n                   plot_title=element_text(size=10, margin={'b': -30}, face='bold')) +\n             lims(x=(-1.75, 1.75), y=(-1.5, 1.8)))\n\n    return plot\n\n# Use the function to recreate the above plot\nmultiaxis_radar(p_data, central_distance=0.2, axis_name_offset=0.25)\n```"]