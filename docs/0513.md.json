["```py\nfrom detectron2.config import get_cfg\ncfg = get_cfg()\ncfg.MODEL.DEVICE = \"cpu\" #or \"cuda\"\n```", "```py\npython manage.py runserver\n```", "```py\ncelery -A <DJANGO_APP_NAME_HERE> worker\n```", "```py\ngunicorn <DJANGO_APP_NAME_HERE>.wsgi:application --workers=2 --bind=0.0.0.0:$PORT\n```", "```py\ngunicorn <DJANGO_APP_NAME_HERE>.wsgi:application --threads=2 --worker-class=gthread --bind=0.0.0.0:$PORT\n```", "```py\ndjango-admin startproject mltutorial\n```", "```py\nmltutorial/\n    manage.py\n    mltutorial/\n        __init__.py\n        settings.py\n        urls.py\n        asgi.py\n        wsgi.py\n```", "```py\npython manage.py startapp docreader\n```", "```py\ndef mltask(file_path):\n  return print(file_path)\n```", "```py\nfrom django.db import models\nfrom django.dispatch import receiver\nfrom .mltask import mltask\nfrom django.db.models.signals import(\n    post_save\n)\n\nclass Document(models.Model):\n    title = models.CharField(max_length=200)\n    file = models.FileField(blank=False, null=False)\n\n@receiver(post_save, sender=Document)\ndef user_created_handler(sender, instance, *args, **kwargs):\n    mltask(str(instance.file.file))\n```", "```py\npython manage.py makemigrations\npython manage.py migrate\n```", "```py\nfrom rest_framework import serializers\nfrom .models import Document\n\nclass DocumentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Document\n        fields = [\n            'title',\n            'file'\n        ]\n```", "```py\nfrom django.shortcuts import render\nfrom rest_framework import generics\nfrom .models import Document\nfrom .serializers import DocumentSerializer\n\nclass DocumentListCreateAPIView(\n    generics.ListCreateAPIView):\n\n    queryset = Document.objects.all()\n    serializer_class = DocumentSerializer\n```", "```py\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path('api/', include('docreader.urls')),\n]\n```", "```py\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('create/', views.DocumentListCreateAPIView.as_view(), name='document-list'),\n]\n```", "```py\nfrom django.contrib import admin\nfrom .models import Document\n\nadmin.site.register(Document)\n```", "```py\npython manage.py createsuperuser\n```", "```py\nAWS_ACCESS_KEY_ID = <Add your Access Key Here>\nAWS_SECRET_ACCESS_KEY = <Add your Secret Key Here>\nAWS_STORAGE_BUCKET_NAME = 'djangomltest'\n\nMODEL_PATH = './docreader/model_final.pth'\n```", "```py\nimport os\nfrom dotenv import load_dotenv, find_dotenv\nload_dotenv(find_dotenv())\n\n# AWS\nAWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']\nAWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']\nAWS_STORAGE_BUCKET_NAME = os.environ['AWS_STORAGE_BUCKET_NAME']\n\n#AWS Config\nAWS_DEFAULT_ACL = 'public-read'\nAWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'\nAWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}\n\n#Boto3\nSTATICFILES_STORAGE = 'mltutorial.storage_backends.StaticStorage'\nDEFAULT_FILE_STORAGE = 'mltutorial.storage_backends.PublicMediaStorage'\n\n#AWS URLs\nSTATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'\nMEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'\n```", "```py\npython manage.py collectstatic\n```", "```py\nfrom .celery import app as celery_app\n__all__ = ('celery_app',)\n```", "```py\nimport os\n\nfrom celery import Celery\n\n# Set the default Django settings module for the 'celery' program.\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mltutorial.settings')\n\n# We will specify Broker_URL on Heroku\napp = Celery('mltutorial', broker=os.environ['CLOUDAMQP_URL'])\n\n# Using a string here means the worker doesn't have to serialize\n# the configuration object to child processes.\n# - namespace='CELERY' means all celery-related configuration keys\n#   should have a `CELERY_` prefix.\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\n# Load task modules from all registered Django apps.\napp.autodiscover_tasks()\n\n@app.task(bind=True, ignore_result=True)\ndef debug_task(self):\n    print(f'Request: {self.request!r}')\n```", "```py\nfrom celery import shared_task\nfrom .mltask import mltask\n\n@shared_task\ndef ml_celery_task(file_path):\n    mltask(file_path)\n    return \"DONE\"\n```", "```py\n@receiver(post_save, sender=Document)\ndef user_created_handler(sender, instance, *args, **kwargs):\n    ml_celery_task.delay(str(instance.file.file))\n```", "```py\n$ heroku login\n$ git init\n$ heroku git:remote -a mlapp\n$ git add .\n$ git commit -m \"initial heroku commit\"\n$ heroku stack:set container\n$ git push heroku master\n```", "```py\n$ heroku logs --tail\n```"]