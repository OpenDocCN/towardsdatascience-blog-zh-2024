["```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n```", "```py\nclass PCA:\n    def __init__(self, n_components):\n        self.n_components = n_components\n        self.components = None\n        self.mean = None\n        self.explained_variance = None\n\n    def fit(self, X):\n        # Step 1: Standardize the data (subtract the mean)\n        self.mean = np.mean(X, axis=0)\n        X_centered = X - self.mean\n\n        # Step 2: Compute the covariance matrix\n        cov_matrix = np.cov(X_centered, rowvar=False)\n\n        # Step 3: Compute the eigenvalues and eigenvectors\n        eigenvalues, eigenvectors = np.linalg.eig(cov_matrix)\n\n        # Step 4: Sort the eigenvalues and corresponding eigenvectors\n        sorted_indices = np.argsort(eigenvalues)[::-1]\n        eigenvalues = eigenvalues[sorted_indices]\n        eigenvectors = eigenvectors[:, sorted_indices]\n\n        # Step 5: Select the top n_components\n        self.components = eigenvectors[:, :self.n_components]\n\n        # Calculate explained variance\n        total_variance = np.sum(eigenvalues)\n        self.explained_variance = eigenvalues[:self.n_components] / total_variance\n\n    def transform(self, X):\n        # Step 6: Project the data onto the selected components\n        X_centered = X - self.mean\n        return np.dot(X_centered, self.components)\n\n    def plot_explained_variance(self):\n        # Create labels for each principal component\n        labels = [f'PCA{i+1}' for i in range(self.n_components)]\n\n        # Create a bar plot for explained variance\n        plt.figure(figsize=(8, 6))\n        plt.bar(range(1, self.n_components + 1), self.explained_variance, alpha=0.7, align='center', color='blue', tick_label=labels)\n        plt.xlabel('Principal Component')\n        plt.ylabel('Explained Variance Ratio')\n        plt.title('Explained Variance by Principal Components')\n        plt.show()\n```", "```py\n# create simulated data for analysis\nnp.random.seed(42)\n# Generate a low-dimensional signal\nlow_dim_data = np.random.randn(100, 4)\n\n# Create a random projection matrix to project into higher dimensions\nprojection_matrix = np.random.randn(4, 10)\n\n# Project the low-dimensional data to higher dimensions\nhigh_dim_data = np.dot(low_dim_data, projection_matrix)\n\n# Add some noise to the high-dimensional data\nnoise = np.random.normal(loc=0, scale=0.5, size=(100, 10))\ndata_with_noise = high_dim_data + noise\n\nX = data_with_noise\n```", "```py\n# Apply PCA\npca = PCA(n_components=10)\npca.fit(X)\nX_transformed = pca.transform(X)\n\nprint(\"Explained Variance:\\n\", pca.explained_variance)\n\n>> Explained Variance (%):\n [55.406, 25.223, 11.137, 5.298, 0.641, 0.626, 0.511, 0.441, 0.401, 0.317]\n```"]