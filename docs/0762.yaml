- en: 'Step by Step Basics: Code Autodocumentation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/step-by-step-basics-code-autodocumentation-fa0d9ae4ac71?source=collection_archive---------2-----------------------#2024-03-22](https://towardsdatascience.com/step-by-step-basics-code-autodocumentation-fa0d9ae4ac71?source=collection_archive---------2-----------------------#2024-03-22)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Generate flawless documentation of Python code using Sphinx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lucydickinson?source=post_page---byline--fa0d9ae4ac71--------------------------------)[![Lucy
    Dickinson](../Images/5a075bb38f9133678d55a26b2683729f.png)](https://medium.com/@lucydickinson?source=post_page---byline--fa0d9ae4ac71--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fa0d9ae4ac71--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fa0d9ae4ac71--------------------------------)
    [Lucy Dickinson](https://medium.com/@lucydickinson?source=post_page---byline--fa0d9ae4ac71--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--fa0d9ae4ac71--------------------------------)
    ·9 min read·Mar 22, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0aa56838fa603355f02b854e8a8f9352.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Dustin Humes](https://unsplash.com/@dustinhumes_photography?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: You can build beautiful, standardised and stylised documentation using just
    the docstrings in a few simple steps.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Data Scientist holds many responsibilities when working on a project, and
    one that is usually left until the last minute is documentation. Perhaps you’re
    diligent with writing docstrings for classes and functions (well done!) — but
    should that be the resting place of your documentation?
  prefs: []
  type: TYPE_NORMAL
- en: In my opinion, documentation should sit independently from your code. Your team
    (or you in a few months time) shouldn’t have to trawl through hundreds of lines
    of code in your python modules to understand what’s going on. You can build beautiful,
    standardised and stylised documentation using just the docstrings in a few simple
    steps and make your project speak for itself.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I’ll focus on using the [Sphinx framework](https://www.sphinx-doc.org/en/master/index.html)
    for autodocumenting python modules. I’ll also be using the [Cookiecutter Data
    Science](https://drivendata.github.io/cookiecutter-data-science/) project template
    in Visual Studio Code (VS Code) due to its seamless integration with Sphinx and
    standardised directory structure. Whilst the [official sphinx tutorial documentation](https://sphinx-rtd-tutorial.readthedocs.io/en/latest/index.html)
    is a great resource for those wanting to take a deep dive into this topic, my
    aim for this article is to be a helpful ‘quick start’ guide to take you through
    the key steps. Enjoy :)
  prefs: []
  type: TYPE_NORMAL
- en: A note on docstrings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The key to good documentation is docstrings. These are the comment blocks that
    sit within each class, class method and function that describe the nature of the
    code, along with the inputs, outputs and raised errors. There are three core docstring
    formats. These are Google, reStructuredText (reST) and NumPy. They all contain
    the same information, the only difference is that they are formatted differently.
    You can see examples of each docstring format [here](https://realpython.com/documenting-python-code/#docstring-formats).
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ll be using the Google docstring format as it is easy to read and takes up
    less space than the others. The below code block is a typical example of a Google
    docstring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*Top tip. download the ‘autoDocstring — Python Docstring Generator’ in VS Code
    to automatically generate a docstring when you type three double quotation marks
    (i.e. the start of a docstring). Be sure to finish writing the function before
    generating the docstring so that all inputs/outputs/errors get included in the
    docstring template that gets generated for you!*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move on to making the documentation!
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of this demo, I have created a python module `demo.py` which
    contains a class and three basic functions (all annotated with docstrings with
    the exception of one function). It is this module that I’ll be building documentation
    for in this article. The contents of this demo.py module is below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ea51927a8000f6c5b5725d577acb8c78.png)'
  prefs: []
  type: TYPE_IMG
- en: Contents of demo.py module to be documented. Snapshot taken using CodeSnap extension
    in VS Code.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First thing is to get everything setup. You’ll need to install VS Code and setup
    a new project along with Sphinx. There are a few options here. You can either
    a) set up a new project using Cookiecutter (where the relevant Sphinx setup will
    be generated along with standardised directories) or b) create your own project
    structure and install sphinx separately.
  prefs: []
  type: TYPE_NORMAL
- en: '**option A — install Cookiecutter**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the terminal, pip install Cookiecutter and then create a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, answer the questions that appear in the terminal window and your new project
    will be created. The Sphinx framework will be stored in the /docs directory of
    your project.
  prefs: []
  type: TYPE_NORMAL
- en: '**option B — Sphinx quickstart**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If the Cookiecutter template doesn’t take your fancy, you can create your own
    project structure from scratch and install sphinx. It is a good idea to make a
    documentation directory and install sphinx there. In the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Understanding Sphinx folder structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After you’ve installed Sphinx using one of the options above, there will be
    some files that appear in the documentation directory in your project. The `conf.py`
    file is the key configuration file which you’ll edit to make your documentation
    bespoke — more detail on this in the next section. The `index.rst` file acts as
    a contents for your documentation. You can find more information on the `index.rst`
    file [here](https://sphinx-rtd-tutorial.readthedocs.io/en/latest/build-the-docs.html).
    The `getting-started.rst` and `commands.rst` files are suggested templates for
    your documentation. You can remove these if necessary. The make files (`make.bat`
    and `Makefile`) are used to actually make the documentation. You don’t need to
    edit these but will call them in the terminal window when you’re ready to make
    the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/34322e8b906de18a36631968b18687fb.png)'
  prefs: []
  type: TYPE_IMG
- en: Default Sphinx files installed
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Conf.py file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The configuration file is where the magic happens. This file is used during
    the build process and so it is crucial that you have this set up correctly. Below
    are some steps to modifying the `conf.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Uncomment the sys.path line** (line 20 in my setup):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Change the pathway of the os.path.abspath** to the relative location of the
    code you want documenting (relative to the `conf.py` file). For example, the python
    modules that I want documenting sits within the src/ directory of my project.
    Hence I will change the os.path.abspath to the look in /src directory which is
    located in the parent folder of the `conf.py` file. You can specify the relative
    location using the . and / syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/24776be77700370824f484404b8be450.png)'
  prefs: []
  type: TYPE_IMG
- en: The relative location of the directory containing the python modules to the
    documentation folder. In this example, ‘demo.py’ is the module to be documented,
    located in the src/data/ directory.
  prefs: []
  type: TYPE_NORMAL
- en: '**Add in the relevant extensions**. You’ll need to add in some extensions to
    the `conf.py` file to gain extra functionality when creating your documentation.
    These are all optional and you can have some fun exploring the different extensions
    available [here](https://www.sphinx-doc.org/en/master/usage/extensions/index.html).
    Here are the 5 extensions that I recommend at minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**sphinx.ext.autodoc**](https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html)—
    use documentation from docstrings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**autodocsumm**](https://pypi.org/project/autodocsumm/)— generate a tabular
    summary of all docstrings at the top of the html page by listing out the docstring
    summaries only. Useful when you have a lot of docstrings. *Note. you will need
    to pip install autodocsumm in the terminal.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**sphinx.ext.napoleon**](https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html)
    — enables Sphinx to parse google docstrings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**sphinx.ext.viewcode**](https://www.sphinx-doc.org/en/master/usage/extensions/viewcode.html)
    — adds a link to a html page containing the source code for each module'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**sphinx.ext.coverage**](https://www.sphinx-doc.org/en/master/usage/extensions/coverage.html)
    — provides a summary of how many classes/functions etc have docstrings. Good coverage
    signifies that a codebase is well explained.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s how to include these extensions in the `conf.py` file (line 29 in my
    setup):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Change the theme**. The default theme of the documentation is quite clean,
    although you may prefer to play around with different options by changing the
    ‘html_theme’ variable (line 94 in my setup) from ‘default’ to one of the standard
    [theme options](https://www.sphinx-doc.org/en/master/usage/theming.html) or some
    [third party options](https://sphinx-themes.org/). In this demo, I’ll show the
    default and Read the Docs themes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '*Note. you will need to pip install any non-standard (third party) themes.*'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Make the html pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that your `conf.py` file is set up and you have glorious docstrings in your
    code, we’re ready to do some scraping and build some html pages.
  prefs: []
  type: TYPE_NORMAL
- en: '**Generate .rst files of your python packages**'
  prefs: []
  type: TYPE_NORMAL
- en: 'These files are the precursor to the html pages and are the native format for
    Sphinx. These need to be generated before making the html files. You’ll use the
    [sphinx.apidoc](https://www.sphinx-doc.org/en/master/man/sphinx-apidoc.html) command,
    which uses the autodoc extension to locate all python modules (e.g. any .py files)
    within the sys.path location that you specified in the `conf.py` file. There are
    some optional parameters to include when using the apidoc command which you can
    find in the [documentation](https://www.sphinx-doc.org/en/master/man/sphinx-apidoc.html),
    but I used the following template:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Note. in the terminal, change directory to the root of the project to run
    the following code.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**-f** (force overwriting any existing generated files).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**-o output_dir** (directory to place the output files. If it does not exist,
    it is created). Note. replace ‘output_dir’ with a directory name of your choice.
    I set mine to the /docs directory.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**module_dir** (location of python packages to document)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: After running this command, there should be newly generated .rst files in the
    docs folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/84b4615becbbe6f7809c3c9c02672edf.png)'
  prefs: []
  type: TYPE_IMG
- en: Contents of documentation folder after running sphinx-apidoc command to generate
    .rst files
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that two new .rst files have been generated: `data.rst` and `modules.rst`.
    In addition to `modules.rst`, a .rst file will be generated for each directory
    that contains at least one python module. In my example, `data.rst` is generated
    as I have saved my demo.py file in the src/datadirectory. If you have multiple
    directories of python modules within the location you specified in sys.path in
    the `conf.py` file, then multiple .rst files will be generated. *Note. These files
    do not contain the scraped documentation just yet, they just contain the information
    required for autodoc to make the html files in the next step.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Edit index.rst file**'
  prefs: []
  type: TYPE_NORMAL
- en: Remember, `index.rst` acts as a contents page so we must edit this file to include
    all python modules we want documenting. Luckily, the `modules.rst` references
    the source location of all python modules identified in the sys.path, so you can
    simply add this file to `index.rst`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, open the `index.rst` file and add ‘modules’ underneath the toctree
    (table of contents tree) section. Make sure there is a line in between the :maxdepth:
    parameter and the names of the the .rst files.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Note. ‘getting-started’ and ‘commands’ will already be in the index.rst file.
    You can delete them from this file if you do not want to generate html pages (although
    a ‘getting-started’ page is probably a good idea!*)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8e03e40dede70fa331d9dc1a90c7fef3.png)'
  prefs: []
  type: TYPE_IMG
- en: Contents of the index.rst file. I have added in ‘modules’ so that the modules.rst
    file is used in the html generation process.
  prefs: []
  type: TYPE_NORMAL
- en: '**Make html files**'
  prefs: []
  type: TYPE_NORMAL
- en: Now we can use the make files in your documentation directory to build the html
    files. These files will appear in the **_build/html/** directory within your documentation
    folder. You can preview these in VS code if you download the ‘HTML Preview’ extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change directory to where the make.bat file is located and run the following
    command in cmd terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '*Note*. *if you are using windows powershell terminal (rather than cmd), use
    the following syntax:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '***Top tip****. if a warning arises when using the make html command that states
    ‘autodoc: failed to import module’, this is most likely due to autodoc not being
    able to find your modules as the sys.path has not been configured correctly in
    conf.py. Make sure this points to the directory where your python modules are
    located.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Editing html files**'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to edit your docstrings and update your html files with the changes,
    then you can do so using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Let’s take a look at our documentation!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As I mentioned above, I have created some documentation of my python module
    `demo.py` in two different themes seen in the images below; ‘default’ (left image)
    and ‘Read the Docs’ (right image). The content is identical but the look and feel
    are different. Let’s take note of the core features:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigation bar on left hand side
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A summary of all classes or functions belonging to the module in tables at the
    top of the page (thanks to the ‘autodocsumm’ extension)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detailed list of docstring components for all functions and classes below the
    summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/c7e255289a5c54caa52b9ecefa753d20.png)![](../Images/e7850408e20f8add5d9dbac68615fe35.png)'
  prefs: []
  type: TYPE_IMG
- en: Examples of documentation html pages for a sample python module using default
    theme (left image) and the read the docs theme (right image), generated using
    Sphinx.
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve created the html pages, you’ll notice a variety of hierarchical
    html pages will be generated. These will include a home page and pages for each
    package and module. Have a look around the pages to familiarise yourself with
    their structure and read the official documentation to see how you can customise
    them further.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you wanted to be able to see the raw code of each function in
    the documentation, add the extension ‘sphinx.ext.viewcode’ to the `conf.py` file.
    This will add a hyperlink next to each function or class method which will reveal
    the raw code to allow for easy interrogation without having to delve into the
    codebase.
  prefs: []
  type: TYPE_NORMAL
- en: Closing thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: And there we have it. Simple and beautiful documentation of your Python modules
    made in a few easy steps using Sphinx! I hope you have enjoyed learning about
    autodocumentation and find it to be a useful tool to implement in your projects.
    If you have any useful tips then feel free to add a comment :)
  prefs: []
  type: TYPE_NORMAL
