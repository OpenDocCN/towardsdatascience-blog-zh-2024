- en: Visualize a Business Process Through Data Serialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/visualize-a-business-process-through-data-serialization-772cd9510c31?source=collection_archive---------4-----------------------#2024-03-15](https://towardsdatascience.com/visualize-a-business-process-through-data-serialization-772cd9510c31?source=collection_archive---------4-----------------------#2024-03-15)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Sometimes, we want to visualize a business process in Power BI. This is challenging,
    depending on the visualization needed and when we model our data in the usual
    way. Let’s see how we can make it happen by changing the modeling.*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari?source=post_page---byline--772cd9510c31--------------------------------)[![Salvatore
    Cagliari](../Images/a24b0cefab6e707cfee06cde9e857559.png)](https://medium.com/@salvatorecagliari?source=post_page---byline--772cd9510c31--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--772cd9510c31--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--772cd9510c31--------------------------------)
    [Salvatore Cagliari](https://medium.com/@salvatorecagliari?source=post_page---byline--772cd9510c31--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--772cd9510c31--------------------------------)
    ·11 min read·Mar 15, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/22db2a16d53f8700de706c762587112a.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Lukas Blazek](https://unsplash.com/@goumbik?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our Business is made up of processes. Some are obvious, like a production process,
    and others are more virtual.
  prefs: []
  type: TYPE_NORMAL
- en: For example, when I want to calculate the Margin, there is a “process” to do
    it.
  prefs: []
  type: TYPE_NORMAL
- en: In a very simplistic way, when I take my income and subtract my expenses, what’s
    remaining is my margin.
  prefs: []
  type: TYPE_NORMAL
- en: My current target is to visualize this process in a chart.
  prefs: []
  type: TYPE_NORMAL
- en: The chart should display the composition of the Margin as a Process. For this,
    I like to show the values from the Sales Amount to the Margin as a Waterfall.
  prefs: []
  type: TYPE_NORMAL
- en: 'Something like this Mockup, which I created in Excel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5aa82746a44574f63a1beb6b8595cb1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1 — Target Visualization of the composition of my Margin (Figure by the
    Author)
  prefs: []
  type: TYPE_NORMAL
- en: I start with the Sales Amount, and all expenses will be deducted until I get
    the Margin.
  prefs: []
  type: TYPE_NORMAL
- en: There are some challenges to realizing this in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: First, I must change my data model. Then, I can write a few Measures. Finally,
    I can create the visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, I will collect information about the data model and its performance
    to assess the quality of my approach.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s go through these steps.
  prefs: []
  type: TYPE_NORMAL
- en: Data Challenge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firstly, the Standard Waterfall chart doesn’t allow for the addition of multiple
    measures to build this chart.
  prefs: []
  type: TYPE_NORMAL
- en: At least one custom visual can do this, but it’s a paid visual, and I want to
    go with the standard waterfall visual. The majority of my clients are reluctant
    to buy custom visuals.
  prefs: []
  type: TYPE_NORMAL
- en: So, I need to change how the data is stored to complete the job.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, we store our data with one Value per column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/57fd4a92340a2c92cabb0101c1ebcf3b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2 — Standard way of modeling facts (Transactions) (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: I create different DAX measures to aggregate the columns to get the result.
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, I can calculate the Margin by deducing the expenditures from the
    Sales Amount to calculate the Margin.
  prefs: []
  type: TYPE_NORMAL
- en: However, this approach doesn’t solve my problem. Therefore I need to use a different
    data modeling approach for the waterfall chart.
  prefs: []
  type: TYPE_NORMAL
- en: I can add only one Measure to the visual. For the segments in the Waterfall
    chart, I must add a column for the categorization/segmentation of the data.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, I must Unpivot the data to store the single Measure values
    vertically in one Value column. The Measure Name is stored in a separate column
    to contain the categorization information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/373edf1d6fe7a7c7e39cb45c9ccd8cec.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3 — Unpivoted (Serialized) data (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: This modeling technique is called “Serialization”, as the data is serialized
    vertically instead of horizontally.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is still one catch: All the values are positive. However, I must turn
    some of them into negative values when displaying them in the waterfall chart
    to deduce them from the sales amount.'
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the order of the Measures must be in the correct order to make sure
    they are not displayed in alphabetical order.
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, I create a table with my Measures like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/60b983f71c8eac1f07c1b29b00ad4ee2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4 — Measure-List table (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: If your source is a relational database, I recommend creating this table and
    transforming your data there.
  prefs: []
  type: TYPE_NORMAL
- en: As the exact way of doing it in a database can vary from one platform to another
    and from the type of data modeling to another, I will not show this here. Contact
    your database developer for this.
  prefs: []
  type: TYPE_NORMAL
- en: I will show you how to do it in Power Query and DAX in this piece.
  prefs: []
  type: TYPE_NORMAL
- en: Data re-modeling in Power Query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first steps are straightforward in Power Query:'
  prefs: []
  type: TYPE_NORMAL
- en: I use the Unpivot transformation to switch from column- to row-oriented and
    get the result, as shown in my example above.
  prefs: []
  type: TYPE_NORMAL
- en: 'I select all columns with values (Measure-columns) and click the Unpivot button.
    There, I choose “Unpivot only selected columns”:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/20e5bbb179fb569f21ee5fd3ca82ab76.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5 — Unpivot all Measure-columns (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'After some time (Depending on the amount of data and the source), the Measure
    columns are replaced by two new columns: Attribute and Value.'
  prefs: []
  type: TYPE_NORMAL
- en: 'I change the M-Code to rename the “Attribute” column to “Measure”:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d2fbbab919a66ac0134f55c4f3fb99d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6 — Change the name of the Attribute columns (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the formula bar in Power Query, you must enable the following option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/db9f265141cd40547006cbd8e10ad46b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7 — Enable the formula bar in Power Query (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: As my model with the Contoso demo data contains two fact tables (Online and
    Retail Sales), I repeat these steps with the other table.
  prefs: []
  type: TYPE_NORMAL
- en: Next, I create the table with the list of all Measures.
  prefs: []
  type: TYPE_NORMAL
- en: I right-click on the Online Sales table and click on “Reference”. I create a
    reference, as it reuses the data already read from the source. “Duplicate” would
    re-read the complete table from the source, which is unnecessary.
  prefs: []
  type: TYPE_NORMAL
- en: A new table is added to Power Query.
  prefs: []
  type: TYPE_NORMAL
- en: I rename this table to “MeasureList”.
  prefs: []
  type: TYPE_NORMAL
- en: 'I need only the Measure column. Therefore, I right-click on the Measure column
    and click on “Remove other columns”:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d6eca80e4a3fd6a073c36880a0ba7a61.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8 — Remove all columns from the referenced table (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: I repeat the same steps for the Retail Sales table. But this time, I rename
    the table to “Retail Measures”.
  prefs: []
  type: TYPE_NORMAL
- en: 'This table will be appended to the MeasureList table. So, I turn off the Load
    of this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ca5651a25d3e8260e630d2efae94feab.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9 — Disable the load into Power BI for the second referenced table (Figure
    by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now I append the second referenced table to the table “MeasureList”:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9960dd5ec93cb9cfe140382f6bd1fb06.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10 — Append the second table to the “MeasureList” table (Figure by the
    Author)
  prefs: []
  type: TYPE_NORMAL
- en: I select the second table, “Retail Measures”, in the following dialog box.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step here is to remove the Duplicates from the resulting table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d22cedb4e0653cf63e2e57f66e629585.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11 — Remove the duplicates from the “MeasureList” table (Figure by the
    Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is the combined list of all Measures from both tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ad7f0ddba2cec1724bb02f395b1480b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12 — Resulting “MeasureList” table (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I must add a conditional column to add the MeasureSort column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6462d5afd47cd09cd9c387bee35cfe4d.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13 — Add a Conditional column to create the MeasureOrder (Figure by the
    Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'The order for all Measures is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '“SalesAmount”: 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“SalesQuantity”: 2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“ReturnAmount”: 3'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“ReturnQuantity”: 4'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“UnitPrice”: 5'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“TotalCost”: 6'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“UnitCost”: 7'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“DiscountAmount”: 8'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“DiscountQuantity”: 9'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In my case, Power Query needs a lot of time to get all the data.
  prefs: []
  type: TYPE_NORMAL
- en: The reason is that I get two huge tables from the operations done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s do some math:'
  prefs: []
  type: TYPE_NORMAL
- en: The Online Sales table has 12 million rows multiplied by nine Measure columns,
    and I get over 108 million rows.
  prefs: []
  type: TYPE_NORMAL
- en: The Retail Sales table has almost 3.5 million rows. Multiplied by nine, I get
    31.5 million rows.
  prefs: []
  type: TYPE_NORMAL
- en: I will return to these numbers later when we look at this model’s statistics
    and performance.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, I calculate the column Factor in DAX to save time.
  prefs: []
  type: TYPE_NORMAL
- en: I would have added a further Conditional column with the logic to set the correct
    values in Power Query, but I did not do it to save time.
  prefs: []
  type: TYPE_NORMAL
- en: Add the calculated column in DAX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I add the Factor column to the new MeasaureList table as a calculated column
    in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: 'As I have only two possible values, I use [IF()](https://dax.guide/if/) to
    calculate the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After hiding the MeasureOrder column, the MeasureList table looks like this
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c570ea3275ca1f52ab18ce0d9404bf59.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14 — Completed “MeasureList” table (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I must set the “Sort by Column” for the Measure column to the MeasureOrder
    column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0708876c223a9f73bd51f0eab31bbe42.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15 — Set the Order by the MeasureOrder column (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Next, I add Relationships from the “MeasureList” table to the table Online Sales
    and Retail Sales.
  prefs: []
  type: TYPE_NORMAL
- en: I Hide the Measure columns from both Fact tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'I add two Base Measures to summarize the Value columns from both Fact tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: I must change all Measures, which accessed the separate Measure columns, to
    a Measure, which filters the Measure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'But, to calculate the correct value for the Waterfall chart, I need to include
    the Factor by Measure in my final Measure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now we can create the Waterfall Visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I add the Waterfall Visual to a new Report page.
  prefs: []
  type: TYPE_NORMAL
- en: 'I set the Measure [Value with Factor] for the Y-Axis and the Measure column
    from the MeasureList table as Category:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/96a1b28d8d49179195c425babb3bd8e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16 — Set up the Waterfall chart (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: But now, we see all the Measures in the “MeasureList” table.
  prefs: []
  type: TYPE_NORMAL
- en: 'As I want to see only a subset of them, I use the Filter pane to narrow down
    to the needed Measures:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/59aa555be8abea65a2d014360f5193f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17 — Set the Filters for the Waterfall Visual (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding a Slicer for the Calendar year to filter for the year 2008 and
    sorting the chart by the Measure name, I got the result I wanted (After enabling
    the Data labels and removing the axis legends, etc.):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d651ca9f774e5d283a2882f7ae6ce579.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18 — Completed Waterfall chart (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: This is almost what I expected.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, renaming the Total column to, for example, “Margin” is impossible.
  prefs: []
  type: TYPE_NORMAL
- en: I tried adding a Text box with the word “Margin” on top of the word “Total”.
    But first, it is a tedious task (I must match the font, the font size, and the
    color, and I have to put it in the correct position). Second, when a User clicks
    on the waterfall visual, it automatically switches to the front, hiding the Text
    box.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, I write a good title to ensure the users understand what they
    see.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s talk about statistics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we shout, “Yes, this solves all my problems. I will do it only in this
    way from now on!” Let’s look at some statistics and performance numbers.
  prefs: []
  type: TYPE_NORMAL
- en: I use Vertipaq Analyzer to analyze the statistics on the original and modified
    data models.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the difference in the size of the saved pbix files is not that much:'
  prefs: []
  type: TYPE_NORMAL
- en: 290 MB for the Original
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 340 MB for the modified model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'But, when I look at the In-memory size from Vertipaq Analyzes, I get different
    numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: 350 MB for the Original
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 950 MB for the modified model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory usage has almost tripled.
  prefs: []
  type: TYPE_NORMAL
- en: This indicates that the data cannot be compressed as well as before.
  prefs: []
  type: TYPE_NORMAL
- en: 'And, when we look at the table statistics, we see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6aa6e7295fdf8b967a0861ccb31956de.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19 — Table statistics from both models (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: On top of the picture, you see the statistics of the original model, and below,
    you see the modified model.
  prefs: []
  type: TYPE_NORMAL
- en: As shown before, the row number is multiplied by the number of Measure columns.
  prefs: []
  type: TYPE_NORMAL
- en: But the size of the tables is almost four times larger.
  prefs: []
  type: TYPE_NORMAL
- en: When I dig deeper into the data, I can see that the Value columns use a lot
    more memory, but the Sales Order Number, Sales Order Number, and the ProductKey
    columns of the Online Sales table use 42.5 % of the entire database. This percentage
    was much lower before changing the data modeling.
  prefs: []
  type: TYPE_NORMAL
- en: I can try to change the table’s order. However, Power BI usually makes a good
    decision after analyzing the data and deciding which column to sort the data by
    to achieve the best compression.
  prefs: []
  type: TYPE_NORMAL
- en: It takes almost an hour to reload these two tables, so I will not do it now.
  prefs: []
  type: TYPE_NORMAL
- en: I will possibly do it in the future and publish the results here.
  prefs: []
  type: TYPE_NORMAL
- en: But first, let’s do some performance measurements.
  prefs: []
  type: TYPE_NORMAL
- en: 'I use [DAX Studio](https://www.sqlbi.com/tools/dax-studio/) and the method
    described here to get performance data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/how-to-get-performance-data-from-power-bi-with-dax-studio-b7f11b9dd9f9?source=post_page-----772cd9510c31--------------------------------)
    [## How to get performance data from Power BI with DAX Studio'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes we have a slow Report, and we need to figure out why. We will see
    how to collect performance data and the…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-get-performance-data-from-power-bi-with-dax-studio-b7f11b9dd9f9?source=post_page-----772cd9510c31--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'The first test is to compare the Online Sales amount:'
  prefs: []
  type: TYPE_NORMAL
- en: I get the query from a Visual showing the Sales Amount by Year and month.
  prefs: []
  type: TYPE_NORMAL
- en: 'The execution statistics for the original data model are:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b7ae03ef74a0b612c3e79102fe38124f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 20 — Simple Sales Amount calculation (Original) (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the execution statistics for the modified data model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1822523eb2f7a46275c3ced4e36b7f68.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 21 — Simple Sales Amount calculation (Modified data model) (Figure by
    the Author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the Total time is considerably higher. When we look at the SE
    numbers, we see that the parallelism is much lower than before, which indicates
    that the model is less efficient.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I add more Measures. For example, the Margin, PY, YoY change, and some
    more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/79b07fd95c24f15f12898965f2585e20.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 22 — Multiple Measure calculation (Original) (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Here for the modified data model:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/12fd3a68cd5c425f209abe5986e53337.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23 — Multiple Measure calculation (Modified data model) (Figure by the
    Author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the performance difference between the two data models is again
    huge.
  prefs: []
  type: TYPE_NORMAL
- en: And these are very simple calculations.
  prefs: []
  type: TYPE_NORMAL
- en: The difference is much higher when I look at more complex calculations. I observed
    3–4 times worse performance.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While this approach opens several possibilities, I would only recommend using
    it for some specific scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: I suggest using it only when fulfilling a requirement is impossible with a standard
    model.
  prefs: []
  type: TYPE_NORMAL
- en: The risk for performance degradation is tangible and cannot be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t be fooled by the thinking: “I have only a few thousand rows of data.”'
  prefs: []
  type: TYPE_NORMAL
- en: In my experience, the amount of data is irrelevant in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: More important is the number of distinct values in the data. Otherwise called
    “Cardinality”.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the column Order number.
  prefs: []
  type: TYPE_NORMAL
- en: Each order has a different Order number. So, the cardinality is very high, and
    this column cannot be compressed efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Then, a complex calculation can lead to poor performance even with a few thousand
    rows.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, each situation is different and must be tested accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, this route is sometimes necessary to allow charts like the one requested
    in my case.
  prefs: []
  type: TYPE_NORMAL
- en: One of my clients has data over which he wants to create two Waterfall charts
    like the one shown above.
  prefs: []
  type: TYPE_NORMAL
- en: However, the two tables involved in his business case have 25 Measure columns,
    which would mean a 25fold increase in data rows.
  prefs: []
  type: TYPE_NORMAL
- en: In that case, he needs two waterfall charts for eight Measures. I will leave
    the original table and duplicate only the required data to create the requested
    charts.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, all “normal” calculations will perform as usual while being able
    to fulfill his requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Another positive reason to do it this way is that I can combine (Append in Power
    Query) the fact tables into one table. In such a case, I would add a column with
    the source, for example, “Online Sales” and “Retail Sales”, before combining them
    into one table. This can lead to a simpler data model.
  prefs: []
  type: TYPE_NORMAL
- en: But as we know now, we need to test, repeat, and test again with other scenarios,
    etc., until we know the consequences of this modeling approach.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9de8d0e476c140781b8400f034dfb6f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Jan Kopřiva](https://unsplash.com/@jxk?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I use the Contoso sample dataset, as I did in my previous articles. You can
    download the ContosoRetailDW Dataset for free from Microsoft [here](https://www.microsoft.com/en-us/download/details.aspx?id=18279).
  prefs: []
  type: TYPE_NORMAL
- en: The Contoso Data can be freely used under the MIT License, as described [here](https://github.com/microsoft/Power-BI-Embedded-Contoso-Sales-Demo).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/subscribe/@salvatorecagliari?source=post_page-----772cd9510c31--------------------------------)
    [## Get an email whenever Salvatore Cagliari publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Salvatore Cagliari publishes. By signing up, you will
    create a Medium account if you don't…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/subscribe/@salvatorecagliari?source=post_page-----772cd9510c31--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I make my articles accessible to everyone, even though Medium has a paywall.
    This allows me to earn a little for each reader, but I turn it off so you can
    read my pieces without cost.
  prefs: []
  type: TYPE_NORMAL
- en: You can support my work, which I do during my free time, through
  prefs: []
  type: TYPE_NORMAL
- en: '[https://buymeacoffee.com/salvatorecagliari](https://buymeacoffee.com/salvatorecagliari)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Or scan this QR Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e7ac062070dcd7a00dcf995ad7e95434.png)'
  prefs: []
  type: TYPE_IMG
- en: Any support is greatly appreciated and helps me find more time to create more
    content for you.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you a lot.
  prefs: []
  type: TYPE_NORMAL
