["```py\ncontingency = np.array([[obsA.sum(), (1-obsA).sum()], [obsB.sum(), (1-obsB).sum()]])\n```", "```py\nwith pm.Model() as ConversionModel:\n    # priors\n    pA = pm.Uniform('pA', 0, 1)\n    pB = pm.Uniform('pB', 0, 1)\n\n    delta = pm.Deterministic('delta', pA - pB)\n\n    obsA = pm.Bernoulli('obsA', pA, observed=obsA)\n    obsB = pm.Bernoulli('obsB', pB, observed=obsB)\n\n    trace = pm.sample(2000)\n```", "```py\nwith pm.Model(coords={\n    'ind_id': ind_id,\n}) as SwitchPointModel:\n\n    sigma = pm.HalfCauchy(\"sigma\", beta=2, dims=\"ind_id\")\n\n    # draw a switchpoint from a uniform distribution for each individual\n    switchpoint = pm.DiscreteUniform(\"switchpoint\", lower=0, upper=100, dims=\"ind_id\")\n\n    # priors for the two groups\n    mu1 = pm.HalfNormal(\"mu1\", sigma=10, dims=\"ind_id\")\n    mu2 = pm.HalfNormal(\"mu2\", sigma=10, dims=\"ind_id\")\n\n    diff = pm.Deterministic(\"diff\", mu1 - mu2)\n\n    # create a deterministic variable for the \n    intercept = pm.math.switch(switchpoint < X.T, mu1, mu2)\n\n    obsA = pm.Normal(\"y\", mu=intercept, sigma=sigma, observed=obs)\n\n    trace = pm.sample()\n```"]