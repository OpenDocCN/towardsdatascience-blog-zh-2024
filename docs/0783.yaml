- en: 'Leverage OpenAI Tool calling: Building a reliable AI Agent from Scratch'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用OpenAI工具调用：从零开始构建一个可靠的AI代理
- en: 原文：[https://towardsdatascience.com/leverage-openai-tool-calling-building-a-reliable-ai-agent-from-scratch-4e21fcd15b62?source=collection_archive---------0-----------------------#2024-03-26](https://towardsdatascience.com/leverage-openai-tool-calling-building-a-reliable-ai-agent-from-scratch-4e21fcd15b62?source=collection_archive---------0-----------------------#2024-03-26)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/leverage-openai-tool-calling-building-a-reliable-ai-agent-from-scratch-4e21fcd15b62?source=collection_archive---------0-----------------------#2024-03-26](https://towardsdatascience.com/leverage-openai-tool-calling-building-a-reliable-ai-agent-from-scratch-4e21fcd15b62?source=collection_archive---------0-----------------------#2024-03-26)
- en: '![](../Images/f07cd9ca3af69f6002589e76d59e1898.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f07cd9ca3af69f6002589e76d59e1898.png)'
- en: Created with [DALL·E](https://labs.openai.com/s/1rNDsRujptitO6sPd57aWyZp)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[DALL·E](https://labs.openai.com/s/1rNDsRujptitO6sPd57aWyZp)创建
- en: Step-by-Step Workflow for developing and refining an AI Agent while dealing
    with errors
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发和完善AI代理的逐步工作流程，同时处理错误
- en: '[](https://medium.com/@lukas.kowejsza?source=post_page---byline--4e21fcd15b62--------------------------------)[![Lukasz
    Kowejsza](../Images/8d920478bee9ad674a6c79462128b0db.png)](https://medium.com/@lukas.kowejsza?source=post_page---byline--4e21fcd15b62--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--4e21fcd15b62--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--4e21fcd15b62--------------------------------)
    [Lukasz Kowejsza](https://medium.com/@lukas.kowejsza?source=post_page---byline--4e21fcd15b62--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@lukas.kowejsza?source=post_page---byline--4e21fcd15b62--------------------------------)[![Lukasz
    Kowejsza](../Images/8d920478bee9ad674a6c79462128b0db.png)](https://medium.com/@lukas.kowejsza?source=post_page---byline--4e21fcd15b62--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--4e21fcd15b62--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--4e21fcd15b62--------------------------------)
    [Lukasz Kowejsza](https://medium.com/@lukas.kowejsza?source=post_page---byline--4e21fcd15b62--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--4e21fcd15b62--------------------------------)
    ·16 min read·Mar 26, 2024
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--4e21fcd15b62--------------------------------)
    ·16分钟阅读·2024年3月26日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: When we think about the future of AI, we envision intuitive everyday helpers
    seamlessly integrating into our workflows and taking on complex, routinely tasks.
    We all have found touchpoints that relieve us from the tedium of mental routine
    work. Yet, the main tasks currently tackled involve text creation, correction,
    and brainstorming, underlined by the significant role RAG (Retrieval-Augmented
    Generation) pipelines play in ongoing development. We aim to provide Large Language
    Models with better context to generate more valuable content.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们思考人工智能的未来时，我们设想直观的日常助手无缝地融入我们的工作流程，承担复杂的常规任务。我们都已经找到了减轻我们日常脑力劳动单调的接触点。然而，目前处理的主要任务包括文本创作、修正和头脑风暴，尤其是RAG（检索增强生成）流程在持续发展中的重要作用。我们的目标是为大型语言模型提供更好的上下文，以生成更有价值的内容。
- en: Thinking about the future of AI conjures images of Jarvis from Iron Man or Rasputin
    from Destiny (the game) for me. In both examples, the AI acts as a voice-controlled
    interface to a complex system, offering high-level abstractions. For instance,
    Tony Stark uses it to manage his research, conduct calculations, and run simulations.
    Even R2D2 can respond to voice commands to interface with unfamiliar computer
    systems and extract data or interact with building systems.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 想到人工智能的未来，我脑海中浮现的是《钢铁侠》中的贾维斯，或者游戏《命运》中的拉斯普廷。在这两个例子中，人工智能充当了与复杂系统交互的语音控制界面，提供高级抽象。例如，托尼·斯塔克用它来管理研究、进行计算和运行模拟。即便是R2-D2，也能够通过语音命令与陌生的计算机系统进行交互，提取数据或与建筑系统互动。
- en: In these scenarios, AI enables interaction with complex systems without requiring
    the end user to have a deep understanding of them. This could be likened to an
    ERP system in a large corporation today. It’s rare to find someone in a large
    corporation who fully knows and understands every facet of the in-house ERP system.
    It’s not far-fetched to imagine that, in the near future, AI might assist nearly
    every interaction with an ERP system. From the end user managing customer data
    or logging orders to the software developer fixing bugs or implementing new features,
    these interactions could soon be facilitated by AI assistants familiar with all
    aspects and processes of the ERP system. Such an AI assistant would know which
    database to enter customer data into and which processes and code might be relevant
    to a bug.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些场景中，AI使得与复杂系统的交互变得更加简单，无需最终用户对这些系统有深入的理解。这可以与今天大型企业中的ERP系统类比。在大型企业中，很少有人能够完全了解和理解公司内部ERP系统的每个方面。想象一下，在不远的将来，AI可能会协助几乎所有与ERP系统的交互。从最终用户管理客户数据或记录订单，到软件开发人员修复Bug或实现新功能，这些交互很可能很快就会由熟悉ERP系统各个方面和流程的AI助手来促成。这样的AI助手将知道应该将客户数据输入到哪个数据库，并且能够理解与Bug相关的哪些流程和代码。
- en: To achieve this, several challenges and innovations lie ahead. We need to rethink
    processes and their documentation. Today’s ERP processes are designed for human
    use, with specific roles for different users, documentation for humans, input
    masks for humans, and user interactions designed to be intuitive and error-free.
    The design of these aspects will look different for AI interactions. We need specific
    roles for AI interactions and different process designs to enable intuitive and
    error-free AI interaction. This is already evident in our work with prompts. What
    we consider to be a clear task often turns out not to be so straightforward.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，我们面临着若干挑战和创新。我们需要重新思考流程及其文档。目前的ERP流程是为人类使用设计的，具有不同用户的特定角色、供人类使用的文档、供人类填写的输入框，以及旨在直观且无误的用户交互设计。这些方面的设计在AI交互中将会有所不同。我们需要为AI交互设计特定的角色，并制定不同的流程设计，以实现直观且无误的AI交互。这一点在我们与提示语的工作中已初见端倪。我们认为清晰的任务往往并不像预期的那样简单。
- en: 'From Concept to Reality: Building the Basis for AI Agents'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从概念到现实：构建AI代理的基础
- en: However, let’s first take a step back to the concept of agents. Agents, or AI
    assistants that can perform tasks using the tools provided and make decisions
    on how to use these tools, are the building blocks that could eventually enable
    such a system. They are the process components we’d want to integrate into every
    facet of a complex system. But as highlighted in a previous article, they are
    challenging to deploy reliably. In this article, I will demonstrate how we can
    design and optimize an agent capable of reliably interacting with a database.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，让我们首先回顾一下代理的概念。代理，或者说能够使用提供工具执行任务并决定如何使用这些工具的AI助手，是最终能够实现此类系统的基础构件。它们是我们希望将其集成到复杂系统各个方面的流程组件。但正如之前文章中强调的那样，可靠地部署这些代理是具有挑战性的。在本文中，我将展示我们如何设计和优化一个能够可靠地与数据库交互的代理。
- en: 'While the grand vision of AI’s future is inspiring, it’s crucial to take practical
    steps towards realizing this vision. To demonstrate how we can start building
    the foundation for such advanced AI systems, let’s focus on creating a prototype
    agent for a common task: expense tracking. This prototype will serve as a tangible
    example of how AI can assist in managing financial transactions efficiently, showcasing
    the potential of AI in automating routine tasks and highlighting the challenges
    and considerations involved in designing an AI system that interacts seamlessly
    with databases. By starting with a specific and relatable use case, we can gain
    valuable insights that will inform the development of more complex AI agents in
    the future.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管AI未来的宏大愿景令人鼓舞，但采取切实可行的步骤实现这一愿景至关重要。为了展示我们如何开始为此类先进AI系统构建基础，让我们专注于创建一个用于常见任务——费用跟踪——的原型代理。这个原型将作为一个具体的示例，展示AI如何高效地帮助管理财务交易，展现AI在自动化日常任务中的潜力，并突出在设计一个能够无缝与数据库交互的AI系统时所面临的挑战和考量。通过从一个具体且易于理解的用例入手，我们可以获得宝贵的洞察，这些洞察将为未来更复杂AI代理的开发提供指导。
- en: The Aim of This Article
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本文的目标
- en: This article will lay the groundwork for a series of articles aimed at developing
    a chatbot that can serve as a single point of interaction for a small business
    to support and execute business processes or a chatbot that in your personal life
    organizes everything you need to keep track of. From data, routines, files, to
    pictures, we want to simply chat with our Assistant, allowing it to figure out
    where to store and retrieve your data.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将为一系列文章奠定基础，旨在开发一个聊天机器人，作为小型企业的单一互动入口，支持并执行商业流程，或作为个人生活中的聊天助手，帮助整理你需要跟踪的所有事务。从数据、日常事务、文件到图片，我们希望简单地与我们的助手对话，让它来决定在哪里存储和提取你的数据。
- en: Transitioning from the grand vision of AI’s future to practical applications,
    let’s zoom in on creating a prototype agent. This agent will serve as a foundational
    step towards realizing the ambitious goals discussed earlier. We will embark on
    developing an “Expense Tracking” agent, a straightforward yet essential task,
    demonstrating how AI can assist in managing financial transactions efficiently.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从AI未来的宏伟愿景转向实际应用，让我们聚焦于创建一个原型代理。这个代理将作为实现之前讨论的雄心勃勃目标的基础步骤。我们将开始开发一个“费用跟踪”代理，这是一个简单但至关重要的任务，展示AI如何高效地帮助管理财务交易。
- en: This “Expense Tracking” prototype will not only showcase the potential of AI
    in automating routine tasks but also illuminate the challenges and considerations
    involved in designing an AI system that interacts seamlessly with databases. By
    focusing on this example, we can explore the intricacies of agent design, input
    validation, and the integration of AI with existing systems — laying a solid foundation
    for more complex applications in the future.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这个“费用跟踪”原型不仅展示了AI在自动化日常任务中的潜力，还揭示了设计一个能够与数据库无缝交互的AI系统所面临的挑战和考量。通过聚焦于这个示例，我们可以探讨代理设计、输入验证以及AI与现有系统集成的复杂性——为未来更复杂的应用奠定坚实的基础。
- en: '1\. Hands-On: Testing OpenAI Tool Call'
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 实践操作：测试OpenAI工具调用
- en: 'To bring our prototype agent to life and identify potential bottlenecks, we’re
    venturing into testing the tool call functionality of OpenAI. Starting with a
    basic example of expense tracking, we’re laying down a foundational piece that
    mimics a real-world application. This stage involves creating a base model and
    transforming it into the OpenAI tool schema using the langchain library’s `convert_to_openai_tool`
    function. Additionally, crafting a `report_tool` enables our future agent to communicate
    results or highlight missing information or issues:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的原型代理得以实现并识别潜在瓶颈，我们正在测试OpenAI工具调用功能。从一个基础的费用跟踪示例开始，我们正在奠定一个模拟现实世界应用的基础。这一阶段涉及创建一个基础模型，并通过langchain库的`convert_to_openai_tool`函数将其转化为OpenAI工具架构。此外，构建一个`report_tool`使得我们的未来代理能够传达结果或突出缺失的信息或问题：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With the data model and tools set up, the next step is to use the OpenAI client
    SDK to initiate a simple tool call. In this initial test, we’re intentionally
    providing insufficient information to the model to see if it can correctly indicate
    what’s missing. This approach not only tests the functional capability of the
    agent but also its interactive and error-handling capacities.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好数据模型和工具后，下一步是使用OpenAI客户端SDK发起一个简单的工具调用。在这个初步测试中，我们故意向模型提供不足的信息，以查看它是否能够正确指出缺少的内容。这种方法不仅测试代理的功能能力，还测试其交互和错误处理能力。
- en: Calling OpenAI API
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用OpenAI API
- en: Now, we’ll use the OpenAI client SDK to initiate a simple tool call. In our
    first test, we deliberately provide the model with insufficient information to
    see if it can notify us of the missing details.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用OpenAI客户端SDK发起一个简单的工具调用。在我们的第一次测试中，我们故意向模型提供不足的信息，看看它是否能通知我们缺失的细节。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we’ll need a new function to read the arguments of the function call
    from the response:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要一个新函数，从响应中读取函数调用的参数：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As we can observe, we have encountered several issues in the execution:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所观察到的，我们在执行过程中遇到了几个问题：
- en: The gross_amount is not calculated.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: gross_amount 未被计算。
- en: The date is hallucinated.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日期被虚构了。
- en: With that in mind. Let’s try to resolve this issues and optimize our agent workflow.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 有鉴于此，让我们尝试解决这些问题并优化我们的代理工作流程。
- en: 2\. Optimize Tool handling
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 优化工具处理
- en: To optimize the agent workflow, I find it crucial to prioritize **workflow over
    prompt engineering**. While it might be tempting to fine-tune the prompt so that
    the agent learns to use the tools provided perfectly and makes no mistakes, it’s
    more advisable to first adjust the tools and processes. When a typical error occurs,
    the initial consideration should be **how to fix it code-based**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了优化代理工作流，我认为优先考虑**工作流而非提示工程**是至关重要的。虽然调整提示使代理能够完美地使用提供的工具并避免出错是有吸引力的，但更建议首先调整工具和流程。当出现典型错误时，初步的考虑应是**如何通过代码修复**。
- en: Handling Missing Information
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理缺失信息
- en: Handling missing information effectively is an essential topic for creating
    robust and reliable agents. In the previous example, providing the agent with
    a tool like “get_current_date” is a workaround for specific scenarios. However,
    we must assume that missing information will occur in various contexts, and we
    cannot rely solely on prompt engineering and adding more tools to prevent the
    model from hallucinating missing information.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有效处理缺失信息是创建强大且可靠代理的关键课题。在前面的示例中，提供像“get_current_date”这样的工具是特定场景的变通方法。然而，我们必须假设缺失信息会在各种情况下发生，我们不能仅仅依赖提示工程和添加更多工具来防止模型出现幻觉。
- en: A simple workaround for this scenario is to modify the tool schema to treat
    all parameters as optional. This approach ensures that the agent only submits
    the parameters it knows, preventing unnecessary hallucination.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 针对这种情况的一个简单解决方法是修改工具模式，将所有参数视为可选。此方法确保代理只提交它知道的参数，从而防止不必要的幻觉。
- en: 'Therefore, let’s take a look at openai tool schema:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们来看看openai工具模式：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As we can see we have special key `required` , which we need to remove. Here’s
    how you can adjust the `add_expense_tool` schema to make parameters optional by
    removing the `required` key:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，我们有一个特殊的`required`关键字，需要移除。以下是如何调整`add_expense_tool`模式以通过移除`required`关键字将参数设为可选：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Designing Tool class
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计`Tool`类
- en: 'Next, we can design a Tool class that initially checks the input parameters
    for missing values. We create the `Tool` class with two methods: `.run()`, `.validate_input()`,
    and a property `openai_tool_schema`, where we manipulate the tool schema by removing
    required parameters. Additionally, we define the `ToolResult` BaseModel with the
    fields `content` and `success` to serve as the output object for each tool run.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以设计一个`Tool`类，首先检查输入参数是否缺少值。我们创建`Tool`类并定义两个方法：`.run()`、`.validate_input()`，以及一个属性`openai_tool_schema`，在其中通过移除必需参数来操作工具模式。此外，我们还定义了`ToolResult`
    BaseModel，其中包含`content`和`success`字段，用作每次工具运行的输出对象。
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `Tool` class is a crucial component in the AI agent's workflow, serving
    as a blueprint for creating and managing various tools that the agent can utilize
    to perform specific tasks. It is designed to handle input validation, execute
    the tool's function, and return the result in a standardized format.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tool`类是AI代理工作流中的关键组件，作为创建和管理代理可用工具的蓝图，以执行特定任务。它旨在处理输入验证、执行工具的功能，并以标准化格式返回结果。'
- en: 'The `Tool` class key components:'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Tool`类的关键组件：'
- en: '`name`: The name of the tool.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`name`：工具的名称。'
- en: '`model`: The Pydantic BaseModel that defines the input schema for the tool.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`model`：定义工具输入模式的Pydantic BaseModel。'
- en: '`function`: The callable function that the tool executes.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`function`：工具执行的可调用函数。'
- en: '`validate_missing`: A boolean flag indicating whether to validate missing input
    values (default is `False`).'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`validate_missing`：一个布尔标志，表示是否验证缺失的输入值（默认为`False`）。'
- en: 'The `Tool` class two main methods:'
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Tool`类的两个主要方法：'
- en: '`**run(self, **kwargs) -> ToolResult**`**:** This method is responsible for
    executing the tool’s function with the provided input arguments. It first checks
    if `validate_missing` is set to `True`. If so, it calls the `validate_input()`
    method to check for missing input values. If any missing values are found, it
    returns a `ToolResult` object with an error message and `success` set to `False`.
    If all required input values are present, it proceeds to execute the tool''s `function`
    with the provided arguments and returns a `ToolResult` object with the result
    and `success` set to `True`.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`**run(self, **kwargs) -> ToolResult**`**：该方法负责使用提供的输入参数执行工具的功能。它首先检查`validate_missing`是否设置为`True`。如果是，它会调用`validate_input()`方法检查是否缺少输入值。如果发现缺失的值，则返回一个`ToolResult`对象，包含错误信息并将`success`设置为`False`。如果所有必需的输入值都存在，则继续执行工具的`function`，并返回一个包含结果的`ToolResult`对象，`success`设置为`True`。'
- en: '`**validate_input(self, **kwargs) -> List[str]**`**:** This method compares
    the input arguments passed to the tool with the expected input schema defined
    in the `model`. It iterates over the fields defined in the `model` and checks
    if each field is present in the input arguments. If any field is missing, it appends
    the field name to a list of missing values. Finally, it returns the list of missing
    values.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`**validate_input(self, **kwargs) -> List[str]**`**:** 该方法将传递给工具的输入参数与`model`中定义的预期输入架构进行比较。它遍历`model`中定义的字段，检查每个字段是否在输入参数中。如果任何字段缺失，它将字段名称添加到缺失值列表中。最后，它返回缺失值的列表。'
- en: The `Tool` class also has a property called `openai_tool_schema`, which returns
    the OpenAI tool schema for the tool. It uses the `convert_to_openai_tool()` function
    to convert the `model` to the OpenAI tool schema format. Additionally, it removes
    the `"required"` key from the schema, making all input parameters optional. This
    allows the agent to provide only the available information without the need to
    hallucinate missing values.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tool`类还有一个名为`openai_tool_schema`的属性，它返回该工具的OpenAI工具架构。它使用`convert_to_openai_tool()`函数将`model`转换为OpenAI工具架构格式。此外，它从架构中移除了`"required"`键，使所有输入参数变为可选。这使得代理只需要提供可用信息，而无需虚构缺失值。'
- en: By encapsulating the tool’s functionality, input validation, and schema generation,
    the `Tool` class provides a clean and reusable interface for creating and managing
    tools in the AI agent's workflow. It abstracts away the complexities of handling
    missing values and ensures that the agent can gracefully handle incomplete information
    while executing the appropriate tools based on the available input.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通过封装工具的功能、输入验证和架构生成，`Tool`类为在AI代理工作流中创建和管理工具提供了一个简洁且可重用的接口。它抽象了处理缺失值的复杂性，并确保代理在执行适当的工具时，能够优雅地处理不完整的信息，基于可用输入进行操作。
- en: Testing Missing Information Handling
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试缺失信息处理
- en: Next, we will extend our OpenAI API call. We want the client to utilize our
    tool, and our response object to directly trigger a tool.run(). For this, we need
    to initialize our tools in our newly created Tool class. We define two dummy functions
    which return a success message string.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将扩展我们的OpenAI API调用。我们希望客户端能够使用我们的工具，并且我们的响应对象能够直接触发`tool.run()`。为此，我们需要在新创建的`Tool`类中初始化我们的工具。我们定义了两个虚拟函数，它们返回一个成功消息字符串。
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Next we define our helper function, that each take client response as input
    an help to interact with out tools.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义一个辅助函数，它接收客户响应作为输入，并帮助与我们的工具进行交互。
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now, we can execute our client with our new tools and use the `run_tool_from_response`
    function.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用新工具执行客户端，并使用`run_tool_from_response`函数。
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Perfectly, we now see our tool indicating that missing values are present. Thanks
    to our trick of sending all parameters as optional, we now avoid hallucinated
    parameters.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 完美地，我们现在看到我们的工具表明缺失值存在。感谢我们将所有参数设为可选的技巧，我们现在避免了虚构的参数。
- en: 3\. Building the Agent Workflow
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 构建代理工作流
- en: 'Our process, as it stands, doesn’t yet represent a true agent. So far, we’ve
    only executed a single API tool call. To transform this into an agent workflow,
    we need to introduce an iterative process that feeds the results of tool execution
    back to the client. The basic process should like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 就目前而言，我们的流程还不能算是真正的代理。到目前为止，我们只执行了一个API工具调用。为了将其转变为代理工作流，我们需要引入一个迭代过程，将工具执行的结果反馈给客户端。基本的流程应该是这样的：
- en: '![](../Images/41aa2536800140285336ed2dd1dabdaa.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41aa2536800140285336ed2dd1dabdaa.png)'
- en: Image by author
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'Let’s get started by creating a new OpenAIAgent class:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建一个新的OpenAIAgent类来开始：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Like our `ToolResult`object, we’ve defined a `StepResult` as an object for each
    agent step. We then defined the `__init__` method of the OpenAIAgent class and
    a `to_console()` method to print our intermediate steps and tool calls to the
    console, using colorama for colorful printouts. Next, we define the heart of the
    agent, the `run()` and the `run_step()` method.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们的`ToolResult`对象一样，我们为每个代理步骤定义了一个`StepResult`对象。然后，我们定义了`OpenAIAgent`类的`__init__`方法和一个`to_console()`方法，用于将我们的中间步骤和工具调用打印到控制台，使用colorama进行彩色打印。接下来，我们定义了代理的核心部分，即`run()`和`run_step()`方法。
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the `run()` method, we start by initializing the `step_history`, which will
    serve as our message memory, with the predefined system_message and the user_input.
    Then we start our while loop, where we call `run_step` during each iteration,
    which will return a StepResult Object. We identify if the agent finished his task
    or if an error occurred, which will be passed to the console as well.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在`run()`方法中，我们首先初始化了`step_history`，它将作为我们的消息记忆，包含预定义的system_message和user_input。然后我们开始执行while循环，在每次迭代时调用`run_step`，该方法将返回一个StepResult对象。我们识别出智能体是否完成了任务，或者是否发生了错误，错误信息也会传递到控制台。
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now we’ve defined the logic for each step. We first obtain a response object
    by our previously tested client API call with tools. We append the response message
    object to our `step_history`. We then verify if a tool call is included in our
    response object, otherwise, we return an error in our StepResult. Then we log
    our tool call to the console and run the selected tool with our previously defined
    method `run_tool_from_response()`. We also need to append the tool result to our
    message history. OpenAI has defined a specific format for this purpose, so that
    the Model knows which tool call refers to which output by passing a tool_call_id
    into our message dict. This is done by our method `tool_call_message()`, which
    takes the response object and the tool_result as input arguments. At the end of
    each step, we assign the tool result to a StepResult Object, which also indicates
    if the step was successful or not, and return it to our loop in `run()`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了每个步骤的逻辑。我们首先通过之前测试过的客户端API调用工具，获得一个响应对象。然后将响应消息对象附加到`step_history`中。接着我们验证响应对象中是否包含工具调用，如果没有，我们将在StepResult中返回一个错误。然后我们将工具调用记录到控制台，并通过我们之前定义的方法`run_tool_from_response()`运行选定的工具。我们还需要将工具结果添加到我们的消息历史中。OpenAI为此定义了一个特定的格式，使得模型能够知道哪个工具调用对应哪个输出，通过将tool_call_id传递到消息字典中来实现这一点。我们的`tool_call_message()`方法完成了这一过程，它接受响应对象和工具结果作为输入参数。在每个步骤结束时，我们将工具结果赋值给StepResult对象，这个对象还指示该步骤是否成功，并将其返回到`run()`中的循环。
- en: 4\. Running the Agent
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 运行智能体
- en: Now we can test our agent with the previous example, directly equipping it with
    a `get_current_date_tool` as well. Here, we can set our previously defined `validate_missing`
    attribute to `False`, since the tool doesn't need any input argument.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用之前的示例来测试我们的智能体，并直接为其装备一个`get_current_date_tool`。在这里，我们可以将之前定义的`validate_missing`属性设置为`False`，因为该工具不需要任何输入参数。
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Following the successful execution of our prototype agent, it’s noteworthy to
    emphasize how effectively the agent utilized the designated tools according to
    plan. Initially, it invoked the `get_current_date_tool`, establishing a foundational
    timestamp for the expense entry. Subsequently, when attempting to log the expense
    via the `add_expense_tool`, our intelligently designed tool class identified a
    missing `gross_amount`—a crucial piece of information for accurate financial tracking.
    Impressively, the agent autonomously resolved this by calculating the `gross_amount`
    using the provided `tax_rate`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的原型智能体成功执行后，值得强调的是，智能体根据计划高效地利用了指定的工具。最初，它调用了`get_current_date_tool`，为费用条目建立了一个基础时间戳。随后，在尝试通过`add_expense_tool`记录费用时，我们精心设计的工具类识别出缺少了`gross_amount`—这是准确财务跟踪所需的关键数据。令人印象深刻的是，智能体通过使用提供的`tax_rate`自动计算出`gross_amount`，解决了这一问题。
- en: 'It’s important to mention that in our test run, the nature of the input expense
    — whether the $5 spent on coffee was net or gross — wasn’t explicitly specified.
    At this juncture, such specificity wasn’t required for the agent to perform its
    task successfully. However, this brings to light a valuable insight for refining
    our agent’s understanding and interaction capabilities: Incorporating such detailed
    information into our initial system prompt could significantly enhance the agent’s
    accuracy and efficiency in processing expense entries. This adjustment would ensure
    a more comprehensive grasp of financial data right from the outset.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，在我们的测试过程中，输入费用的性质——例如花费的5美元是净额还是毛额——并未明确指定。在这一点上，这样的具体信息对于智能体成功完成任务并非必须。然而，这一情况揭示了一个有价值的洞察，能够帮助我们优化智能体的理解和交互能力：将此类详细信息纳入初始系统提示中，能够显著提高智能体处理费用条目的准确性和效率。这个调整将确保从一开始就能更全面地理解财务数据。
- en: Key Takeaways
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键要点
- en: '**Iterative Development**: The project underscores the critical nature of an
    iterative development cycle, fostering continuous improvement through feedback.
    This approach is paramount in AI, where variability is the norm, necessitating
    an adaptable and responsive development strategy.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**迭代开发**：该项目强调了迭代开发周期的关键性，通过反馈促进持续改进。这种方法在人工智能领域尤为重要，因为可变性是常态，要求我们采用一种灵活且响应迅速的开发策略。'
- en: '**Handling Uncertainty**: Our journey highlighted the significance of elegantly
    managing ambiguities and errors. Innovations such as optional parameters and rigorous
    input validation have proven instrumental in enhancing both the reliability and
    user experience of the agent.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**处理不确定性**：我们的旅程强调了优雅地管理模糊性和错误的重要性。诸如可选参数和严格输入验证等创新，在提高代理的可靠性和用户体验方面发挥了重要作用。'
- en: '**Customized Agent Workflows for Specific Tasks**: A key insight from this
    work is the importance of customizing agent workflows to suit particular use cases.
    Beyond assembling a suite of tools, the strategic design of tool interactions
    and responses is vital. This customization ensures the agent effectively addresses
    specific challenges, leading to a more focused and efficient problem-solving approach.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**针对特定任务的定制代理工作流**：这项工作的一个关键见解是根据特定用例定制代理工作流的重要性。除了组建一套工具，工具之间的互动和响应的战略设计至关重要。这样的定制确保了代理能够有效应对具体挑战，从而采取更加专注和高效的问题解决方法。'
- en: The journey we have embarked upon is just the beginning of a larger exploration
    into the world of AI agents and their applications in various domains. As we continue
    to push the boundaries of what’s possible with AI, we invite you to join us on
    this exciting adventure. By building upon the foundation laid in this article
    and staying tuned for the upcoming enhancements, you will witness firsthand how
    AI agents can revolutionize the way businesses and individuals handle their data
    and automate complex tasks.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经踏上的旅程只是对人工智能代理及其在各个领域应用的更大探索的开始。随着我们不断突破人工智能可能性边界，我们邀请您与我们一起加入这场激动人心的冒险。通过在本文奠定的基础上继续前行，并期待即将推出的增强功能，您将亲眼见证人工智能代理如何彻底改变企业和个人处理数据及自动化复杂任务的方式。
- en: Together, let us embrace the power of AI and unlock its potential to transform
    the way we work and interact with technology. The future of AI is bright, and
    we are at the forefront of shaping it, one reliable agent at a time.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 一起，让我们拥抱人工智能的力量，释放它改变我们工作和与技术互动方式的潜力。人工智能的未来光明，而我们正站在塑造这一未来的最前沿，一次一个可靠的代理。
- en: Looking Ahead
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 展望未来
- en: As we continue our journey in exploring the potential of AI agents, the upcoming
    articles will focus on expanding the capabilities of our prototype and integrating
    it with real-world systems. In the next article, we will dive into designing a
    robust project structure that allows our agent to interact seamlessly with SQL
    databases. By leveraging the agent developed in this article, we will demonstrate
    how AI can efficiently manage and manipulate data stored in databases, opening
    up a world of possibilities for automating data-related tasks.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们在探索人工智能代理潜力的旅程继续前进，接下来的文章将重点扩展我们原型的能力，并将其与现实世界系统集成。在下一篇文章中，我们将深入探讨如何设计一个稳健的项目结构，使我们的代理能够与SQL数据库无缝交互。通过利用本文中开发的代理，我们将展示人工智能如何高效地管理和操作存储在数据库中的数据，为自动化数据相关任务开辟无限可能。
- en: Building upon this foundation, the third article in the series will introduce
    advanced query features, enabling our agent to handle more complex data retrieval
    and manipulation tasks. We will also explore the concept of a routing agent, which
    will act as a central hub for managing multiple subagents, each responsible for
    interacting with specific database tables. This hierarchical structure will allow
    users to make requests in natural language, which the routing agent will then
    interpret and direct to the appropriate subagent for execution.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，本系列的第三篇文章将介绍高级查询功能，使我们的代理能够处理更复杂的数据检索和操作任务。我们还将探索路由代理的概念，它将作为管理多个子代理的中心枢纽，每个子代理负责与特定数据库表进行交互。这种层级结构将允许用户用自然语言提出请求，路由代理会将请求解释并转发给适当的子代理执行。
- en: To further enhance the practicality and security of our AI-powered system, we
    will introduce a role-based access control system. This will ensure that users
    have the appropriate permissions to access and modify data based on their assigned
    roles. By implementing this feature, we can demonstrate how AI agents can be deployed
    in real-world scenarios while maintaining data integrity and security.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为进一步增强我们基于 AI 的系统的实用性和安全性，我们将引入基于角色的访问控制系统。这样可以确保用户根据分配的角色，拥有适当的权限来访问和修改数据。通过实施这一功能，我们能够展示
    AI 代理如何在保持数据完整性和安全性的同时，在实际场景中得到应用。
- en: Through these upcoming enhancements, we aim to showcase the true potential of
    AI agents in streamlining data management processes and providing a more intuitive
    and efficient way for users to interact with databases. By combining the power
    of natural language processing, database management, and role-based access control,
    we will be laying the groundwork for the development of sophisticated AI assistants
    that can revolutionize the way businesses and individuals handle their data.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些即将推出的增强功能，我们旨在展示 AI 代理在简化数据管理流程方面的真正潜力，并为用户提供一种更直观、更高效的方式来与数据库互动。通过结合自然语言处理、数据库管理和基于角色的访问控制的力量，我们将为开发能够彻底改变企业和个人处理数据方式的高级
    AI 助手奠定基础。
- en: Stay tuned for these exciting developments as we continue to push the boundaries
    of what’s possible with AI agents in data management and beyond.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请继续关注这些令人兴奋的进展，因为我们将继续推动 AI 代理在数据管理及其他领域的边界。
- en: Source Code
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源代码
- en: Additionally, the entire source code for the projects covered is available on
    GitHub. You can access it at [https://github.com/elokus/AgentDemo](https://github.com/elokus/AgentDemo).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，涵盖的项目的完整源代码可以在 GitHub 上找到。您可以通过[https://github.com/elokus/AgentDemo](https://github.com/elokus/AgentDemo)访问它。
