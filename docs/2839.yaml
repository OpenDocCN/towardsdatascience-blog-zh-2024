- en: Another Hike Up Everest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/another-hike-up-everest-dc4ec62ec8dd?source=collection_archive---------8-----------------------#2024-11-22](https://towardsdatascience.com/another-hike-up-everest-dc4ec62ec8dd?source=collection_archive---------8-----------------------#2024-11-22)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to make progress on hard problems in AI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jamesbarney71?source=post_page---byline--dc4ec62ec8dd--------------------------------)[![James
    Barney](../Images/7f39f18db180ffc654caa7f44a9652da.png)](https://medium.com/@jamesbarney71?source=post_page---byline--dc4ec62ec8dd--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--dc4ec62ec8dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--dc4ec62ec8dd--------------------------------)
    [James Barney](https://medium.com/@jamesbarney71?source=post_page---byline--dc4ec62ec8dd--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--dc4ec62ec8dd--------------------------------)
    ·8 min read·Nov 22, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d56829b47a980bf9a64af2e7dbbe3dd9.png)'
  prefs: []
  type: TYPE_IMG
- en: Mount Everest, known locally as **Sagarmatha** or **Chomolangma** ([Wikipedia](https://en.wikipedia.org/wiki/Mount_Everest))
  prefs: []
  type: TYPE_NORMAL
- en: 'New technology is born, matured, and eventually replaced. AI is no different
    and will follow this curve. Many news articles are already proclaiming that Generative
    AI (Gen AI) has arrived at the Trough of Disillusionment: the point in adoption
    where the early adopters are realizing the promises of the new technology are
    much more difficult to achieve than they realized.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9d495766f9cb58e03dcde63fafeff15f.png)'
  prefs: []
  type: TYPE_IMG
- en: The Gartner Hype Cycle [Wikipedia](https://en.wikipedia.org/wiki/Gartner_hype_cycle)
  prefs: []
  type: TYPE_NORMAL
- en: 'This is normal and has happened many times before Gen AI. Consider the boom
    and bust of blockchain — the [lettuce you buy in stores](https://www.nytimes.com/2018/09/24/business/walmart-blockchain-lettuce.html)
    will be tracked from farm to table with blockchain! Or Big Data: you’ll be able
    to [know everything about your customer](https://www.nytimes.com/2012/02/12/sunday-review/big-datas-impact-in-the-world.html),
    delivering value to them and profits to you with little effort!'
  prefs: []
  type: TYPE_NORMAL
- en: The trouble is that these problems being solved by each of these new technologies
    are actually quite vast. Each is its own Everest.
  prefs: []
  type: TYPE_NORMAL
- en: 'And just like Everest, you can’t hike up it in a day. Months or even years
    of preparation are required. Each camp on the way up is specialized for that location.
    Sometimes even the best prepared attempts fail to summit the mountain — that doesn’t
    always mean the team of climbers wasn’t qualified or capable: perhaps the weather
    was bad or they simply took the wrong route.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2409842b726193f4f523752a7cf77b2c.png)'
  prefs: []
  type: TYPE_IMG
- en: 1963 American Everest Expedition ([Wikipedia](https://commons.m.wikimedia.org/wiki/File:1963_American_Everest_expedition.svg))
  prefs: []
  type: TYPE_NORMAL
- en: Your Gen AI strategy should be the same as your strategy for climbing Mount
    Everest (maybe hold off on the extra oxygen, though).
  prefs: []
  type: TYPE_NORMAL
- en: Each problem that Gen AI is being used to solve is typically a [Big Hairy Problem](https://www.investopedia.com/terms/b/big-hairy-audacious-goal-bhag.asp)
    — complicated inputs and complicated outputs with complicated processes connecting
    the two.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember: big leaps are dangerous when climbing mountains. Progress is actually
    made with small gradual steps along a path.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e40e0e02e348c85aa39fae0a8be59dfa.png)'
  prefs: []
  type: TYPE_IMG
- en: Don’t jump — use a ladder ([Wikipedia](https://commons.wikimedia.org/wiki/File:Inside_Khumbu-Icefall.jpg))
  prefs: []
  type: TYPE_NORMAL
- en: Every small step to the summit is preceded by the collection and organization
    of the materials needed on the mountain’s face. You do not want to be half way
    up Everest with no food or water left.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, you need to train yourself and your team to be physically able to
    perform at higher altitude in treacherous conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Understand the Problem being solved
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This shouldn’t mean “what does the solution look like today”. Modernization
    efforts often require replacing existing solutions built on workarounds and concessions.
    It’s critical to understand what the actual problem is. Where is the value from
    the outcome of the process actually being derived? How is it making a customer’s
    experience better? Clearly defining the problem helps later when defining clear
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s critical to remember that humans are VERY GOOD at dealing with ambiguous
    requirements. As a result, many of the Big Hairy Problems that AI is solving are
    described like this:'
  prefs: []
  type: TYPE_NORMAL
- en: “We’d like to use AI automate the complicated order system that we use to process
    all our large customers’ orders!”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Sounds awesome! Can you describe how that process works from end-to-end?
  prefs: []
  type: TYPE_NORMAL
- en: “Well, we get the email from the customer, extract the order information, and
    put that information into our order form. Then we upload that form into the order
    system for processing. Gen AI can automate that whole process, right??”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If we build it step-by-step, sure!
  prefs: []
  type: TYPE_NORMAL
- en: There’s a lot of ambiguity contained within the process above. Expecting a Gen
    AI process to be able to handle each nuance of the process above with little effort
    is a mistake.
  prefs: []
  type: TYPE_NORMAL
- en: What formats do the emails come in? Is it always the same format?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How is the order information described by the customer? Do they use colloquial
    terms for things? Or are do they use your item numbers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is the order information from the customer the same that your fulfillment system
    uses? Is there a lookup that happens?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What format is the upload expecting? Text? PDF? Excel?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it’s an Excel template, are there multiple sheets? Unwritable cells? Data
    validation requirements?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gen AI *can* handle all of these tasks — you just have to be able to define
    each step along the way clearly. If you can’t clearly describe the input and output
    of a process, it’s likely that Gen AI will not do exactly what you’re expecting
    it to do.
  prefs: []
  type: TYPE_NORMAL
- en: If you approach this with a top-down perspective (the prompt would be “you’re
    an AI agent filling out order forms”), you’ll end up with a process that gets
    things right 50% of the time (honestly, still pretty good!) and not in the format
    you’re expecting. The issue is that for you’ll still need a human to review EACH
    output anyways which doubles the work.
  prefs: []
  type: TYPE_NORMAL
- en: 'The MVP: haven’t we been here before?'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is nothing new. We’ve been building Minimum Viable Products (MVPs) for
    years now. You must start small, solve a single step in the problem, and build
    bigger from there (with feedback from your customers!). AI products and workflows
    are no different. Build what is immediately useful and then expand from there.
  prefs: []
  type: TYPE_NORMAL
- en: 'How might we apply that to the order system described above? We should break
    each step in the process down and apply Gen AI where it makes the most sense:'
  prefs: []
  type: TYPE_NORMAL
- en: Customer sends an order email (unstructured inputs)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Order details are put into a form (structured inputs)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Form is formatted and uploaded into the system (structured outputs) OR:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is no form, and the order is constructed manually (unstructured outputs)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The content of emails are notoriously unstructured which makes the application
    of AI here a great use case! In this situation, ask your process owner “What must
    a valid email order contain?” Data like customer name, account number, address,
    items requested along with item quantity are good candidates. To maximize your
    Gen AI system’s accuracy and resiliency when handling these orders, define data
    structures that the AI should adhere to. I’ll [use](https://docs.pydantic.dev/latest/)
    `[pydantic](https://docs.pydantic.dev/latest/)` [to help build these structures](https://docs.pydantic.dev/latest/)
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'From here, we can use these objects to start giving structure to our AI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now with these examples you can give your Gen AI using few-shot prompting and
    increase accuracy. We’ll use [LangChain OutputParsers](https://python.langchain.com/docs/how_to/#output-parsers)
    to do some of the heavy lifting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The actual prompt being sent to OpenAI in this case is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]{"$defs": {"OrderItem": {"properties": {"ItemName": {"title": "Itemname",
    "type": "string"}, "ItemQuantity": {"title": "Itemquantity", "type": "integer"}},
    "required": ["ItemName", "ItemQuantity"], "title": "OrderItem", "type": "object"}},
    "properties": {"CustomerName": {"title": "Customername", "type": "string"}, "AccountNumber":
    {"title": "Accountnumber", "type": "string"}, "ShippingAddress": {"title": "Shippingaddress",
    "type": "string"}, "Items": {"items": {"$ref": "#/$defs/OrderItem"}, "title":
    "Items", "type": "array"}}, "required": ["CustomerName", "AccountNumber", "ShippingAddress",
    "Items"]}[PRE4]'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you send that prompt, the LLM follows the example and extracts the information
    for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: By using this well-defined format for an email order, we can pass this parsed
    object back through the LLM and ask it to ensure that all the required fields
    for an order are present. If it’s not, we can route the email to a human for help!
  prefs: []
  type: TYPE_NORMAL
- en: For example, let’s suppose that all EmailOrders need a CompanyName field as
    well. If the validation is this straightforward, we can simply use `pydantic`
    validations (no AI needed!). If your use case gets more complicated, the output
    can be passed through an LLM to provide some higher level logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll take the same order as above but leave out the CompanyName:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Pydantic does a lot for us here by throwing a `ValidationError`. Our driver
    program can simply catch this error and funnel the email to a human reviewer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, an LLM can also detect this error. I’m showing this for completeness;
    typically you’ll want to leverage traditional programming for data validation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: With all this in place, we now have a system that can easily handle properly
    written email orders. More importantly, we have implemented a **self-governing
    process** that keeps humans in the loop when the AI needs help.
  prefs: []
  type: TYPE_NORMAL
- en: Crucially, we didn’t rewrite the entire order entry process! We’ve taken a time-consuming
    part of the process and built a system that concentrates human effort in the areas
    where it makes the largest difference. Going forward, we can start modifying the
    other parts of the process, systematically removing the human toil.
  prefs: []
  type: TYPE_NORMAL
- en: Summiting Everest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This iterative approach to solving complicated problems is nothing new. All
    big problems need to be broken down into their constituent parts in order to truly
    be solved.
  prefs: []
  type: TYPE_NORMAL
- en: The “magic” of AI is particularly convincing, however. It’s easy to hope to
    make big leaps, given how capable these models are with just a few lines of input.
    Compared to technology like blockchain and Big Data, the effort required to go
    from idea to tantalizing proof-of-concept is minimal. AI doesn’t need dozens of
    custom configured servers to run a Map-Reduce job across 18 TB of data that took
    you 6 months to migrate.
  prefs: []
  type: TYPE_NORMAL
- en: 'So keep that simplicity in mind as you build your next AI solution: small steps
    to the summit.'
  prefs: []
  type: TYPE_NORMAL
- en: See you up there!
  prefs: []
  type: TYPE_NORMAL
