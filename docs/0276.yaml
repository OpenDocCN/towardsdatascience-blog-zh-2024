- en: Getting Started Predicting Time Series Data with Facebook Prophet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/getting-started-predicting-time-series-data-with-facebook-prophet-c74ad3040525?source=collection_archive---------2-----------------------#2024-01-30](https://towardsdatascience.com/getting-started-predicting-time-series-data-with-facebook-prophet-c74ad3040525?source=collection_archive---------2-----------------------#2024-01-30)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This article aims to take away the entry barriers to get started with time series
    analysis in a hands-on tutorial using Prophet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jonas_dieckmann?source=post_page---byline--c74ad3040525--------------------------------)[![Jonas
    Dieckmann](../Images/b3345d7d4ba503b08bd4dc715390d650.png)](https://medium.com/@jonas_dieckmann?source=post_page---byline--c74ad3040525--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--c74ad3040525--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--c74ad3040525--------------------------------)
    [Jonas Dieckmann](https://medium.com/@jonas_dieckmann?source=post_page---byline--c74ad3040525--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--c74ad3040525--------------------------------)
    ·9 min read·Jan 30, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: When getting started with data science, time series analysis is a common thing
    people would love to try themselves! The general idea here is to learn from historical
    patterns over time to predict the future. Typical use cases could be weather predictions
    or sales forecasting. But what does all this have to do with this wise prophet
    below?!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6b84a482c13b16a83fedc78c40fa8e57.png)'
  prefs: []
  type: TYPE_IMG
- en: AI-generated image by leonardo.ai
  prefs: []
  type: TYPE_NORMAL
- en: This article aims to take away the entry barriers to get started with time series
    analysis in a hands-on tutorial using one of the easiest tools called [Facebook
    Prophet](https://facebook.github.io/prophet/) within [Google Colab](https://colab.research.google.com/)
    (both are free!). In case you want to get started immediately, feel free to skip
    the next two chapters where I will give a short background on time series principles
    and also Facebook Prophet itself. Have fun!
  prefs: []
  type: TYPE_NORMAL
- en: 'This article is structured into three main sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '#1 Brief introduction to Time Series Analysis principles'
  prefs: []
  type: TYPE_NORMAL
- en: '#2 An Introduction to Facebook Prophet'
  prefs: []
  type: TYPE_NORMAL
- en: '#3 Hands-on tutorial on how to use Prophet in Google Colab (for free)'
  prefs: []
  type: TYPE_NORMAL
- en: '#1 General Principles of Time Series Analysis'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Imagine you are a store manager for consumer products and you want to predict
    the upcoming product demand to better manage the supply. A reasonable machine
    learning approach for this scenario is to run some time series analysis which
    involves understanding, modeling, and making predictions based on sequential data
    points. [1]
  prefs: []
  type: TYPE_NORMAL
- en: 'The below graphic illustrates an artificial development of historic product
    demand (dark-blue line) over time, which can be used to analyze a time series
    pattern. Our ultimate goal would be to predict (red-dotted line) the actual future
    demand (light-blue line) as precise as possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/76be98eabce3d974413bec2d78f08e89.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of a plotted time series. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: 'A time series is typically decomposed into three main components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Trend**: the long-term movement or general direction in the data.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Seasonality**: fluctuations or patterns that repeat at regular intervals'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Residual/error**: remainder or leftover variation in the data'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The decomposition of a time series into these three components, often referred
    to as additive or multiplicative decomposition, allows analysts to better understand
    the underlying structure and patterns. This understanding is essential for selecting
    appropriate forecasting models and making accurate predictions based on historical
    data. [2]
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7014027115a20cfee7d61ec8779c0dd5.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of a decomposed time series into trend + seasonality + error. Image
    by author
  prefs: []
  type: TYPE_NORMAL
- en: '#2 What is Facebook Prophet?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prophet is an open-source tool released by Facebook's Data Science team that
    produces time series forecasting data based on an additive model where a non-linear
    trend fits with seasonality and holiday effects. The design principles allow parameter
    adjustments without much knowledge of the underlying model which makes the method
    applicable to teams with less statistical knowledge. [3]
  prefs: []
  type: TYPE_NORMAL
- en: Prophet is particularly well-suited for business forecasting applications, and
    it has gained popularity due to its ease of use and effectiveness in handling
    a wide range of time series data. As with every tool, keep in mind that while
    Prophet is powerful, the choice of forecasting method depends on the specific
    characteristics of the data and the goals of the analysis. In general, it is not
    granted that Prophet performs better than other models. However, Prophet comes
    with some useful features e.g., a reflection of seasonality change pre- and post-COVID
    or treating lockdowns as one-off holidays.
  prefs: []
  type: TYPE_NORMAL
- en: For a more in-depth introduction by Meta (Facebook) itself, look at the video
    below [on YouTube](https://www.youtube.com/watch?v=eJrbKU09h-0&ab_channel=MetaOpenSource).
  prefs: []
  type: TYPE_NORMAL
- en: In the following tutorial, we will implement and use Prophet with Python. However,
    you are more than happy to run your analysis using R as well!
  prefs: []
  type: TYPE_NORMAL
- en: '#3 Hands-on tutorial on how to use Prophet'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In case you have limited experience with or no access to your coding environment,
    I recommend making use of [Google Colaboratory (“Colab”)](https://colab.research.google.com/)
    which is somewhat like “*a* *free Jupyter notebook environment that requires no
    setup and runs entirely in the cloud*.” While this tutorial claims more about
    the simplicity and advantages of Colab, there are drawbacks as reduced computing
    power compared to proper cloud environments. However, I believe Colab might not
    be a bad service to take the first steps with Prophet.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up a basic environment for Time Series Analysis within Colab you can
    follow these two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open [https://colab.research.google.com/](https://colab.research.google.com/)
    and register for a free account
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new *notebook* within Colab
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install & use the *prophet* package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Loading and preparing Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I uploaded a small dummy dataset representing the monthly amount of passengers
    for a local bus company (2012–2023). You can find the data [here on GitHub](https://raw.githubusercontent.com/jonasdieckmann/prophet_tutorial/main/passengers.csv).
  prefs: []
  type: TYPE_NORMAL
- en: 'As the first step, we will load the data using pandas and create two separate
    datasets: a training subset with the years 2012 to 2022 as well as a test subset
    with the year 2023\. We will train our time series model with the first subset
    and aim to predict the passenger amount for 2023\. With the second subset, we
    will be able to validate the accuracy later.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the display command can be seen below. The dataset contains
    two columns: the indication of the year-month combination as well as a numeric
    column with the passenger amount in that month. Per default, Prophet is designed
    to work with daily (or even hourly) data, but we will make sure that the monthly
    pattern can be used as well.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/083ecb9d59735390a75f1cdfde35f4d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Passenger dataset. Image by autor
  prefs: []
  type: TYPE_NORMAL
- en: Decomposing training data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get a better understanding of the time series components within our dummy
    data, we will run a quick decomposing. For that, we import the method from *statsmodels*
    library and run the decomposing on our dataset. We decided on an additive model
    and indicated, that one period contains 12 elements (months) in our data. A daily
    dataset would be period=365.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This short piece of code will give us a visual impression of time series itself,
    but especially about the trend, the seasonality, and the residuals over time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/52c693392ede2122ae4d49aeb2225592.png)'
  prefs: []
  type: TYPE_IMG
- en: Decomposed elements for the passenger dummy data. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: We can now clearly see both, a significantly increasing trend over the past
    10 years as well as a recognizable seasonality pattern every year. Following those
    indications, we would now expect the model to predict some further increasing
    amount of passengers, following the seasonality peaks in the summer of the future
    year. But let’s try it out — time to apply some machine learning!
  prefs: []
  type: TYPE_NORMAL
- en: Model fitting with Facebook Prophet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To fit models in Prophet, it is important to have at least a ‘ds’ (datestamp)
    and ‘y’ (value to be forecasted) column. We should make sure that our columns
    are renamed the reflect the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the magic can begin. The process to fit the model is fairly straightforward.
    However, please have a look at the [documentation](https://facebook.github.io/prophet/docs/handling_shocks.html)
    to get an idea of the large amount of options and parameters we could adjust in
    this step. To keep things simple, we will fit a simple model without any further
    adjustments for now — but please keep in mind that real-world data is never perfect:
    you will definitely need parameter tuning in the future.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: That’s all we have to do to fit the model. Let’s make some predictions!
  prefs: []
  type: TYPE_NORMAL
- en: Making predictions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have to make predictions on a table that has a ‘ds’ column with the dates
    you want predictions for. To set up this table, use the *make_future_dataframe*
    method, and it will automatically include historical dates. This way, you can
    see how well the model fits the past data and predicts the future. Since we handle
    monthly data, we will indicate the frequency with “freq=12" and ask for a future
    horizon of 12 months (“periods=12”).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This new dataset then contains both, the training period as well as the additional
    12 months we want to predict:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/67f5957194177eec969937a413b16b0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Future dataset. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: To make predictions, we simply call the *predict* method from Prophet and provide
    the future dataset. The prediction output will contain a large dataset with many
    different columns, but we will focus only on the predicted value *yhat* as well
    as the uncertainty intervals *yhat_lower* and *yhat_upper*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The table below gives us some idea about how the output is generated and stored.
    For August 2023, the model predicts a passenger amount of 532 people. The uncertainty
    interval (which is set by default to 80%) tells us in simple terms that we can
    expect most likely a passenger amount between 508 and 556 people in that month.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2db589424d17336f514f1af97cb1c9ce.png)'
  prefs: []
  type: TYPE_IMG
- en: Prediction subset. Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we want to visualize the output to better understand the predictions
    and the intervals.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To plot the results, we can make use of Prophet’s built-in plotting tools. With
    the plot method, we can display the original time series data alongside the forecasted
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Besides the general time series plot, we also added a dotted line to indicate
    the end of the training period and hence the start of the prediction period. Further,
    we made use of the true test dataset that we had prepared in the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4f9654f9a8bee5bd9b32e54ca2a7f1df.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotted results for the time series analysis incl. true test data and the prediction.
    Image by author
  prefs: []
  type: TYPE_NORMAL
- en: It can be seen that our model isn’t too bad. Most of the true passenger values
    are actually within the predicted uncertainty intervals. However, the summer months
    seem to be too pessimistic still, which is a pattern we can see in previous years
    already. This is a good moment to start exploring the parameters and features
    we could use with Prophet.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, the seasonality is not a constant additive factor but it grows
    with the trend over time. Hence, we might consider changing the *seasonality_mode*
    from “additive” to “multiplicative” during the model fit. [4]
  prefs: []
  type: TYPE_NORMAL
- en: Our tutorial will conclude here to give some time to explore the large number
    of possibilities that Prophet offers to us. To review the full code together,
    I consolidated the snippets in this [Python file](https://raw.githubusercontent.com/jonasdieckmann/prophet_tutorial/main/prophet_tutorial.py).
    Additionally, you could upload [this notebook](https://raw.githubusercontent.com/jonasdieckmann/prophet_tutorial/main/Prophet_Tutorial.ipynb)
    directly to Colab and run it yourself. Let me know how it worked out for you!
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prophet is a powerful tool for predicting future values in time series data,
    especially when your data has repeating patterns like monthly or yearly cycles.
    It’s user-friendly and can quickly provide accurate predictions for your specific
    data. However, it’s essential to be aware of its limitations. If your data doesn’t
    have a clear pattern or if there are significant changes that the model hasn’t
    seen before, Prophet may not perform optimally. Understanding these limitations
    is crucial for using the tool wisely.
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that experimenting with Prophet on your datasets is highly
    recommended! Every dataset is unique, and tweaking settings and trying different
    approaches can help you discover what works best for your specific situation.
    So, dive in, explore, and see how Prophet can enhance your time series forecasting.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jonas_dieckmann?source=post_page-----c74ad3040525--------------------------------)
    [## Jonas Dieckmann - Medium'
  prefs: []
  type: TYPE_NORMAL
- en: Read writing from Jonas Dieckmann on Medium. analytics manager & product owner
    @ philips | passionate and writing about…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@jonas_dieckmann?source=post_page-----c74ad3040525--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I hope you find it useful. Let me know your thoughts! And feel free to connect
    on LinkedIn [https://www.linkedin.com/in/jonas-dieckmann/](https://www.linkedin.com/in/jonas-dieckmann/)
    and/or to follow me here on medium.
  prefs: []
  type: TYPE_NORMAL
- en: 'See also some of my other articles:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://pub.towardsai.net/how-to-use-chatgpt-api-for-direct-interaction-from-colab-or-databricks-39969a0ead5f?source=post_page-----c74ad3040525--------------------------------)
    [## How To Use ChatGPT API for Direct Interaction From Colab or Databricks'
  prefs: []
  type: TYPE_NORMAL
- en: Have you wondered how you can use OpenAI’s API to interact directly with GPT
    algorithms? It’s easy, free, and also more…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pub.towardsai.net](https://pub.towardsai.net/how-to-use-chatgpt-api-for-direct-interaction-from-colab-or-databricks-39969a0ead5f?source=post_page-----c74ad3040525--------------------------------)
    [](/how-to-set-started-with-tensorflow-using-keras-api-and-google-colab-5421e5e4ef56?source=post_page-----c74ad3040525--------------------------------)
    [## How to get started with TensorFlow using Keras API and Google Colab
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-step tutorial to analyze human activity with neuronal networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-set-started-with-tensorflow-using-keras-api-and-google-colab-5421e5e4ef56?source=post_page-----c74ad3040525--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] **Shumway, Robert H.; Stoffer, David S. (2017)**: Time Series Analysis
    and Its Applications. Cham: Springer International Publishing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] **Brownlee, Jason (2017)**: Introduction to Time Series Forecasting With
    Python'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] **Rafferty, Greg (2021)**: Forecasting Time Series Data with Facebook Prophet'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] [https://facebook.github.io/prophet/docs/quick_start.html](https://facebook.github.io/prophet/docs/quick_start.html)'
  prefs: []
  type: TYPE_NORMAL
