- en: 3 Popular Methods for Spatial Interpolation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3种流行的空间插值方法
- en: 原文：[https://towardsdatascience.com/3-best-methods-for-spatial-interpolation-912cab7aee47?source=collection_archive---------4-----------------------#2024-04-09](https://towardsdatascience.com/3-best-methods-for-spatial-interpolation-912cab7aee47?source=collection_archive---------4-----------------------#2024-04-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/3-best-methods-for-spatial-interpolation-912cab7aee47?source=collection_archive---------4-----------------------#2024-04-09](https://towardsdatascience.com/3-best-methods-for-spatial-interpolation-912cab7aee47?source=collection_archive---------4-----------------------#2024-04-09)
- en: From scratch, in Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从头开始，用Python实现
- en: '[](https://medium.com/@alexroz?source=post_page---byline--912cab7aee47--------------------------------)[![Aleksei
    Rozanov](../Images/748b69bfaccf39c9aa568a9e6f41eec3.png)](https://medium.com/@alexroz?source=post_page---byline--912cab7aee47--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--912cab7aee47--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--912cab7aee47--------------------------------)
    [Aleksei Rozanov](https://medium.com/@alexroz?source=post_page---byline--912cab7aee47--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@alexroz?source=post_page---byline--912cab7aee47--------------------------------)[![Aleksei
    Rozanov](../Images/748b69bfaccf39c9aa568a9e6f41eec3.png)](https://medium.com/@alexroz?source=post_page---byline--912cab7aee47--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--912cab7aee47--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--912cab7aee47--------------------------------)
    [Aleksei Rozanov](https://medium.com/@alexroz?source=post_page---byline--912cab7aee47--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--912cab7aee47--------------------------------)
    ·10 min read·Apr 9, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--912cab7aee47--------------------------------)
    ·10分钟阅读·2024年4月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/001778775344af81b306237ca482d2f3.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/001778775344af81b306237ca482d2f3.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[作者](https://medium.com/@alexroz)提供。
- en: Interpolation is a quite common mathematical concept, which is used not only
    by data scientists, but also people from a vast range of fields. However, when
    dealing with geospatial data, interpolation gets more complicated, since you need
    to create a representative grid based on several often sparse observations.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 插值是一个相当常见的数学概念，不仅数据科学家使用，许多其他领域的人也会用到。然而，当处理地理空间数据时，插值变得更为复杂，因为你需要基于多个往往稀疏的观测数据创建一个具有代表性的网格。
- en: Before diving into geospatial part, let’s have a brief recap on linear interpolation.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入探讨地理空间部分之前，让我们简要回顾一下线性插值。
- en: As always, to follow up the tutorial, you can download and run the notebook
    [here](https://github.com/alexxxroz/Medium/blob/main/SpatialInterpolation.ipynb).
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 和往常一样，要跟上教程，你可以在[这里](https://github.com/alexxxroz/Medium/blob/main/SpatialInterpolation.ipynb)下载并运行笔记本。
- en: 'For the purpose of demonstration I’ll use a regular polynomial function:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我将使用一个常规的多项式函数：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/cf8d98b5a651c1aa5f0a1d3acbbc0385.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cf8d98b5a651c1aa5f0a1d3acbbc0385.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[作者](https://medium.com/@alexroz)提供。
- en: 'Now we can randomly sample several points [-4.2, 0, 2.5] and connect them together:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以随机选择几个点 [-4.2, 0, 2.5] 并将它们连接起来：
- en: '![](../Images/e8719b75ecd4d6a0fc7f3f0127f7eac7.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8719b75ecd4d6a0fc7f3f0127f7eac7.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[作者](https://medium.com/@alexroz)提供。
- en: This is called linear interpolation, since the function is approximated by a
    straight line at each interval, and now, knowing function’s values only at 3 points,
    we can find the values inside the interval [-4.2;2.5].
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是线性插值，因为在每个区间内，函数由一条直线近似，而现在，只知道函数在3个点的值，我们就可以找到区间[-4.2;2.5]内的值。
- en: 'There are many other methods, which have higher accuracy, but the idea behind
    them is the same: find the functions values between at least two known points.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他方法，它们具有更高的精度，但它们的基本思路是相同的：在至少两个已知点之间找到函数值。
- en: Now it’s time to get to geospatial part. In this tutorial, our goal will be
    to perform spatial interpolation of daily average air temperature measured at
    meteorological sites across Switzerland provided by [NOAA](https://www.ncdc.noaa.gov/cdo-web/datatools/selectlocation).
    The expected result is a grid of temperatures with cells of 0.1° resolution.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候进入地理空间部分了。在本教程中，我们的目标是对瑞士各地气象站测得的每日平均气温进行空间插值，这些数据由[NOAA](https://www.ncdc.noaa.gov/cdo-web/datatools/selectlocation)提供。预期结果是生成一个温度网格，单元格分辨率为0.1°。
- en: 'Firstly, we need to acquire an administrative boundary of Switzerland and visualize
    it using geopandas:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要获取瑞士的行政边界，并使用geopandas将其可视化：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/5e55dea85838eb0bcc54cd63a1bb2fe8.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5e55dea85838eb0bcc54cd63a1bb2fe8.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[作者](https://medium.com/@alexroz)提供。
- en: Indeed, looks like it’s Switzerland, wow =)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，看起来像是瑞士，哇 =)
- en: 'Now let’s plot our temperature observations and overlay them with the country
    shape. To do that, let’s load meteorological data to regular pandas dataframe
    and then convert it to a geopandas one with coordinates transformed to the *shapely*
    points:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们绘制我们的温度观测数据，并将其与国家边界形状叠加。为此，我们将气象数据加载到常规的pandas数据框中，然后将其转换为带有坐标的geopandas数据框，这些坐标转化为*shapely*点：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After doing that we can easily overlay the two dataframes using *matplotlib*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们可以很容易地使用*matplotlib*将这两个数据框叠加在一起。
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/f4faf1e5e8b63083eefa2d94851ca8a7.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f4faf1e5e8b63083eefa2d94851ca8a7.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[作者](https://medium.com/@alexroz)提供。
- en: 'To visualize our task let’s create the grid for interpolation and overlay it
    with the map above:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了可视化我们的任务，让我们创建一个用于插值的网格，并将其与上面的地图叠加：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/e4607c90b750b50ae111a917e734562d.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e4607c90b750b50ae111a917e734562d.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[作者](https://medium.com/@alexroz)提供。
- en: So the goal is to produce interpolation on the regular grid illustrated above
    having 8 temperature observations.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以目标是对上面插值的常规网格进行插值，包含8个温度观测值。
- en: I. Nearest Neighbor (NN)
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: I. 最近邻（NN）
- en: The first super intuitive and simple method is called Nearest Neighbor (NN).
    As you can guess from its name, the algorithm assigns the value of the nearest
    observation to each grid node.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个直观且简单的方法叫做最近邻（NN）。正如你从名称中可以猜到的，这个算法将最近观测值的值分配给每个网格节点。
- en: 'To implement it we will need only two functions. The first function is called
    Euclidean, and it calculates the distance between two points using the following
    formula:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现它，我们只需要两个函数。第一个函数叫做Euclidean，它使用以下公式计算两点之间的距离：
- en: '![](../Images/0d1d55d8a5f799b2ed5b785c283e1d97.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0d1d55d8a5f799b2ed5b785c283e1d97.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[作者](https://medium.com/@alexroz)提供。
- en: 'The second one is the NN method itself. After creating an empty array to store
    the values we iterate over all latitudes and longitudes, calculate distances from
    each point to the current grid node and assign the value of the closest observation
    to that grid node:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个方法就是NN方法本身。在创建一个空数组来存储值之后，我们遍历所有纬度和经度，计算每个点到当前网格节点的距离，并将最近观测值的值分配给该网格节点：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The whole idea is here, in this line:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 整个思路在这一行中：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Variable data is our pandas dataframe with meteo sites (each row represents
    one site). So in the *for* loop we calculate the distance and find the index of
    the site with the minimum distance.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 变量数据是我们包含气象站点的pandas数据框（每行表示一个站点）。因此，在*for*循环中，我们计算距离并找到距离最小的站点的索引。
- en: 'Now let’s run the algorithm and wrap the results into xarray dataset:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们运行算法，并将结果封装到xarray数据集中：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we can plot the results:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以绘制结果了：
- en: '![](../Images/467e205cd93ce8b723cd2532c76ca361.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/467e205cd93ce8b723cd2532c76ca361.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[作者](https://medium.com/@alexroz)提供。
- en: 'Looks nice, but let’s enhance our plot by creating a Switzerland mask using
    regionmask library:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来不错，但让我们通过使用regionmask库创建瑞士的掩模来增强我们的绘图：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/e7f7730e717c2319598913a194acc95f.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e7f7730e717c2319598913a194acc95f.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[作者](https://medium.com/@alexroz)提供。
- en: As you can see this method might be applied only to categorical data. Since
    we are dealing with temperature, which is continuous variable, meaning it can
    take any value in a certain range, this interpolation is misleading. In real life
    there always gradients and randomness.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这种方法只能应用于分类数据。由于我们处理的是温度数据，温度是连续变量，意味着它可以在某一范围内取任何值，因此这种插值是误导性的。现实生活中总是存在梯度和随机性。
- en: So let’s have a look at more advanced algorithm.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们来看看更先进的算法。
- en: II. Inverse Distance Weighting (IDW)
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: II. 反距离加权（IDW）
- en: 'Basically, Inverse Distance Weighting (IDW) is an enhanced version of NN:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，反距离加权（IDW）是NN的增强版：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see, instead of assigning the value of the closest known point, here
    we calculate weights. To do that the aforementioned Euclidean distanced is used
    as well, but this time we raise each distance to the **-**β-th power (β is an
    arbitrary value). These weights are basically the contribution of each ground
    point to a certain grid node. The greater the distance, the less this point influence
    the node value.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们不是直接赋值给最近已知的点，而是计算权重。为此，前面提到的欧几里得距离也被使用，但这次我们将每个距离的**-**β次方（β是任意值）。这些权重基本上是每个地面点对某个网格节点的贡献。距离越远，这个点对节点值的影响就越小。
- en: After getting the weights we calculate the weighted average.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在得到权重后，我们计算加权平均值。
- en: '![](../Images/e1e8c71eaf2d24be507f660bc5ad8a9b.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e1e8c71eaf2d24be507f660bc5ad8a9b.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[作者](https://medium.com/@alexroz)。
- en: '![](../Images/a8c951cc303dfcb26d32ae11e115651a.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a8c951cc303dfcb26d32ae11e115651a.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[作者](https://medium.com/@alexroz)。
- en: 'Let’s plot it:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们绘制它：
- en: '![](../Images/92f3b15ccad15743feffd844cd4c00ff.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/92f3b15ccad15743feffd844cd4c00ff.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[作者](https://medium.com/@alexroz)。
- en: As you can see, now results are much more realistic and smooth!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，现在的结果更真实且平滑！
- en: III. Kriging
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三、克里金（Kriging）
- en: The last method for today is Kriging. Among these three, this one is most complex,
    and we will only touch upon it. In case you want to use it consciously and effectively,
    consider having look at the literature!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的最后一个方法是克里金（Kriging）。在这三者中，这是最复杂的，我们将仅仅触及它。如果你想有意识且有效地使用它，可以考虑查阅相关文献！
- en: So the main idea of the method is the usage of variogram (or semivariogram).
    In essence, a variogram quantifies how the variability of some parameter changes
    with distance and direction. This exactly what we need when dealing with air temperature.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这个方法的主要思想是使用变异函数（或半变异函数）。本质上，变异函数量化了某个参数如何随着距离和方向的变化而变化。这正是我们在处理空气温度时所需要的。
- en: 'To implement the Kriging algorithms we will need two types of variograms: **experimental**
    and **theoretical**.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现克里金算法，我们将需要两种类型的变异函数：**实验变异函数**和**理论变异函数**。
- en: 'The first one is really easy to calculate. It’s defined as **gamma γ**:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个计算非常简单。它被定义为**gamma γ**：
- en: '![](../Images/4abd2abbed6ff877bef3b09fb87691a7.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4abd2abbed6ff877bef3b09fb87691a7.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[作者](https://medium.com/@alexroz)。
- en: where h — geographical distance between two points, z — temperature function.
    So in a nutshell it’s an average of temperature differences at known points.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 h — 两点之间的地理距离，z — 温度函数。所以简而言之，它是已知点温度差的平均值。
- en: 'The theoretical variogram is a little bit more complicated. Firstly, there
    are many of them:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 理论变异函数要复杂一些。首先，有很多种：
- en: '![](../Images/2ee04146f677148333add1dd78b6b9ff.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2ee04146f677148333add1dd78b6b9ff.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[作者](https://medium.com/@alexroz)。
- en: where p — is partial sill, d — distance (we used *h* before), n — nugget, r
    — range.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 p — 是部分阈值，d — 距离（我们之前用了*h*），n — 暴露量，r — 范围。
- en: I found a really good visual explanation of these parameters at [CDT Columbia](https://iri.columbia.edu/~rijaf/CDTUserGuide/html/interpolation_methods.html).
    I adopted an image, which illustrates the dependence between **γ** and distance,
    from their material. As you can see now it’s clear what sill, partial sill, nugget
    and range are.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我在[CDT Columbia](https://iri.columbia.edu/~rijaf/CDTUserGuide/html/interpolation_methods.html)找到了一个非常好的这些参数的可视化解释。我从他们的资料中采用了一张插图，展示了**γ**与距离之间的关系。如你所见，现在清楚地展示了阈值、部分阈值、暴露量和范围。
- en: '![](../Images/8565dd27b5eed2585089effddec4cff4.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8565dd27b5eed2585089effddec4cff4.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[作者](https://medium.com/@alexroz)。
- en: So the whole idea of the algorithm is to adjust the parameters of the parameters
    of theoretical variogram so it would fit to the experimental one and then predict
    the values of nodes using it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这个算法的整个思路是调整理论变异函数的参数，使其与实验变异函数匹配，然后利用它预测节点的值。
- en: To implement the method we’ll need several extra libraries and to create a class
    called OrdinaryKriging.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现该方法，我们将需要几个额外的库，并创建一个名为OrdinaryKriging的类。
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now let’s consider each function separately.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们分别考虑每个函数。
- en: The **__init__** function besides initializing coordinates and values consists
    of three lists comprising possible values of nugget, sill and range. All three
    are mixed together in all possible combinations and stored in the parameter_combinations
    variable. We will need it later for searching the optimal ones.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**__init__** 函数除了初始化坐标和值外，还包括三个列表，分别包含 nugget、sill 和 range 的可能值。这三者被混合在一起，形成所有可能的组合，并存储在
    parameter_combinations 变量中。稍后我们将用它来搜索最优值。'
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The second function, **theoretical_variogram**, is simply a python implementation
    of one of the aforementioned formulas. In our case, it’s the *exponential* one
    (but you can write code for another one and compare the results):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个函数，**theoretical_variogram**，只是上述公式之一的 Python 实现。在我们的例子中，它是 *指数型*（但你可以为其他公式编写代码并进行比较）：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The third class method **Euclidean**. It’s an altered version of the function
    we created for NN and IDW. This time we return a matrix (n,n) where each row represents
    distances between a point and all other points (one of the values in each row
    is 0, since the distance between a point and itself is 0).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个类方法 **欧几里得**。这是我们为 NN 和 IDW 创建的函数的修改版。这次我们返回一个矩阵 (n,n)，其中每一行表示一个点与所有其他点之间的距离（每行中的一个值为
    0，因为一个点与它自身的距离为 0）。
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The fourth function performs the **fitting**. Here it obtains experimental variogram
    values and Euclidean distances. Then, iterating over our combinations of sill,
    range and nugget it calculates the theoretical variogram values with the following
    estimation of Mean Squared Error, or MSE, between theoretical and experimental
    values (but you can use other metrics). Then we save the optimal parameters to
    the class variable optimal_pars.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 第四个函数执行 **拟合**。在这里，它获取实验变差值和欧几里得距离。然后，通过迭代我们关于 sill、range 和 nugget 的组合，计算理论变差值，并进行理论值与实验值之间的均方误差（MSE）估计（当然你也可以使用其他度量标准）。然后，我们将最优参数保存到类变量
    optimal_pars 中。
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: And the last, but not least function is **predict**. Getting a point (lat;lon)
    as input, it estimates the distance between the point and other known values.
    Then it calls the theoretical_variogram function passing the optimal parameters
    we obtained earlier and getting weights as output. Then a weighted mean is calculated
    and returned.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个函数是 **预测**。它接收一个点（lat;lon）作为输入，估算该点与其他已知点之间的距离。接着，它调用 theoretical_variogram
    函数，传入我们之前获得的最优参数，并输出权重。然后，计算加权均值并返回。
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now we can collect all the predictions and visualize the map:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以收集所有预测并可视化地图：
- en: '[PRE16]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/1349a0969a19bd1bac7ea47919a97413.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1349a0969a19bd1bac7ea47919a97413.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: As you can see, the result is quite different from what we get from IDW. For
    Kriging the most important parameter is the kind of theoretical variogram you
    pick, since it basically defines the relationship between the predicted values
    and distance. In case you don’t want to play around with the code I provide here
    or your own, you can explore [PyKrige](https://geostat-framework.readthedocs.io/projects/pykrige/en/stable/#license)
    library which has implementations of many variogram models.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，结果与 IDW 得到的结果有很大不同。对于克里金插值法（Kriging），最重要的参数是你选择的理论变差模型，因为它基本上定义了预测值与距离之间的关系。如果你不想修改我提供的代码或你自己的代码，你可以探索
    [PyKrige](https://geostat-framework.readthedocs.io/projects/pykrige/en/stable/#license)
    库，它实现了许多变差模型。
- en: Hopefully this article was informative and insightful for you!
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这篇文章对你有帮助，提供了有价值的见解！
- en: ===========================================
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ===========================================
- en: '***All my publications on Medium are free and open-access, that’s why I’d really
    appreciate if you followed me here!***'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '***我在 Medium 上的所有出版物都是免费的，公开访问的，所以如果你在这里关注我，我将非常感激！***'
- en: P.s. I’m extremely passionate about (Geo)Data Science, ML/AI and Climate Change.
    So if you want to work together on some project pls contact me in [LinkedIn](https://www.linkedin.com/in/alexxxroz/).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: P.s. 我对（地理）数据科学、机器学习/人工智能以及气候变化充满热情。所以如果你想一起合作某个项目，请通过 [LinkedIn](https://www.linkedin.com/in/alexxxroz/)
    联系我。
- en: 🛰️Follow for more🛰️
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 🛰️关注我以获取更多更新🛰️
