- en: 'Computing Minimum Sample Size for A/B Tests in Statsmodels: How and Why'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/computing-minimum-sample-size-for-a-b-tests-in-statsmodels-how-and-why-398e357945d9?source=collection_archive---------3-----------------------#2024-05-31](https://towardsdatascience.com/computing-minimum-sample-size-for-a-b-tests-in-statsmodels-how-and-why-398e357945d9?source=collection_archive---------3-----------------------#2024-05-31)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A deep-dive into how and why Statsmodels uses numerical optimization instead
    of closed-form formulas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://jasonjiajs.medium.com/?source=post_page---byline--398e357945d9--------------------------------)[![Jason
    Jia](../Images/e3e3bdf0873cb48384dcf2f76a964ebd.png)](https://jasonjiajs.medium.com/?source=post_page---byline--398e357945d9--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--398e357945d9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--398e357945d9--------------------------------)
    [Jason Jia](https://jasonjiajs.medium.com/?source=post_page---byline--398e357945d9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--398e357945d9--------------------------------)
    ¬∑10 min read¬∑May 31, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cfc8f9479bd992d2d46961c47bd201c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image generated by DALL-E
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is currently no good resource on how Statsmodels computes the minimum
    sample size.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is critical to calculate the minimum sample size required before conducting
    an A/B test. A popular way to do it is by calling the [tt_ind_solve_power function](https://www.statsmodels.org/stable/generated/statsmodels.stats.power.tt_ind_solve_power.html)
    in Python‚Äôs Statsmodels package, but there are currently 2 gaps when it comes
    to understanding how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. There are many great articles (e.g. by [Stan Nsky](/experiment-sample-size-calculation-using-power-analysis-81cb1bc5f74b),
    TDS 2019) explaining what the parameters mean and provide examples of function
    calls. However, they do not explain how the function actually computes the sample
    size and why the procedure is correct.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. There are also many great articles (e.g. by [Mintao Wei](/probing-into-minimum-sample-size-formula-derivation-and-usage-8db9a556280b#c172),
    TDS 2023) that explain the statistical derivation based on a z-test for proportions
    such as conversion rates, which is also a popular choice for many online sample
    size calculators (e.g. [Evan Miller‚Äôs Calculator](https://www.evanmiller.org/ab-testing/sample-size.html)).
    However, this is not the method used by Statsmodels and results can differ.
  prefs: []
  type: TYPE_NORMAL
- en: This is important for data scientists because Statsmodels is commonly used to
    compute sample size in Python.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data scientists frequently use Statsmodels to get the minimum sample size, but
    may not be aware that it employs a different method from what most articles describe
    and what most online calculators use. It is essential to understand how the function
    works so that we can trust its results.
  prefs: []
  type: TYPE_NORMAL
- en: This article bridges the gap by explaining how Statsmodels actually works.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This article aims to make the novel contribution of explaining how `tt_ind_solve_power`
    actually computes the sample size, why the procedure is correct and what benefits
    it brings over closed-form solutions. [1]
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 1:** It will first explain how sample size is computed and why the procedure
    is correct in two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Show the statistical derivation for sample size calculations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a stripped-down version of `tt_ind_solve_power` that is an exact implementation
    of the statistical derivation and produces the same output as the original function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Part 2:** Following which, it will explain two benefits it brings over closed-form
    solutions:'
  prefs: []
  type: TYPE_NORMAL
- en: Benefits to generalizability
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Benefits to statistical intuition
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Part 1: How Statsmodels computes minimum sample size and why it is correct'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1.1\. Showing the statistical derivation for sample size calculations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Core Idea**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A general A/B test is an unpaired two-sample t-test. Rather than using a closed-form
    solution, Statsmodels obtains the minimum sample size in two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: For a given sample size, compute the associated power of the test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run a numerical optimization algorithm to find the sample size that returns
    the target power of the test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Notation and Concepts**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These are some terms we will use throughout the article:'
  prefs: []
  type: TYPE_NORMAL
- en: '**n**: minimum required sample size. n = n_1 + n_2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**n_1, n_2**: minimum required sample size for the treatment and control group,
    respectively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ratio:** n_2 = n_1 * ratio, where for a 50:50 allocation, ratio = 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**p**: p-value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ùõº:** significance level / type I error'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ùõΩ:** type II error; 1-ùõΩ is power'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Œº_1, Œº_2**: means of treatment group and control group, respectively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XÃÑ1, XÃÑ2:** sample means of treatment group and control group, respectively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**t_(1-ùõº):** critical value / t-score that cuts off the top 100ùõº(%) of the
    standard t distribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MDE:** the minimum detectable effect, or the level of statistically significant
    difference that can be detected given all other parameters (e.g. a base conversion
    rate of 10%, an expected uplift of 50% and so an expected treatment conversion
    rate of 15% means that the MDE is 15‚Äì10=5%=0.05)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ùúé:** standard deviation of observations in each group, assumed to be the
    same'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**d:** Cohen‚Äôs d / standardized effect size, given by MDE / ùúé'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**H_0, H_1:** null hypothesis, alternative hypothesis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Derive the formula for power of a test**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Define the null and alternative hypothesis:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**2\. Derive the distribution of the test statistic under the null hypothesis
    (H_0):**'
  prefs: []
  type: TYPE_NORMAL
- en: We find that **under the null hypothesis**, the test statistic t follows a **t-distribution**
    with **(n_1 + n_2 - 2) degrees of freedom**.
  prefs: []
  type: TYPE_NORMAL
- en: 'This follows from the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Where the sample variance of X is computed as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Derive the distribution of the test statistic under the alternative hypothesis
    (H_1):**'
  prefs: []
  type: TYPE_NORMAL
- en: We find that **under the alternative hypothesis**, assuming that the difference
    in means is the MDE, the test statistic t follows a **non-central t-distribution**
    with **non-centrality parameter Œ∏ = d * sqrt((n1 * n2) / (n1 + n2))** and **(n_1
    + n_2 - 2) degrees of freedom**.
  prefs: []
  type: TYPE_NORMAL
- en: A non-central t-distribution (nct) with a positive non-centrality parameter
    can be roughly thought of as a standard t-distribution shifted to the right. [2]
    Intuitively, the standard t-distribution happens under the null when we expect
    0 effect on average, while the non-central t-distribution happens under the alternative
    when we expect a positive effect that is on average roughly equal to the MDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Definition: A non-central t-distribution random variable T with non-centrality
    parameter Œ∏ and ŒΩ degrees of freedom is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: where Z is a standard normal random variable, and *V* is a chi-squared distributed
    random variable with ŒΩ degrees of freedom.
  prefs: []
  type: TYPE_NORMAL
- en: The proof starts from the observation that under the alternative hypothesis,
    the true difference in means is MDE and so we can subtract MDE and divide by the
    population standard deviation to get a standard normal variable.
  prefs: []
  type: TYPE_NORMAL
- en: '**4\. Compute the power**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we know the distribution of the test statistic under the null and alternative
    hypotheses, and the cdf of both distributions are known, we can calculate power
    easily given the level of significance and type of test (two-tailed, greater,
    smaller). The diagram below visualizes how:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f7537362230bff4e8f958aaa8ca1cac5.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, the implementation looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Obtain minimum sample size using numerical optimization**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Given that we now know how to computer power for a given set of parameters,
    we can then run a numerical optimization method to find the minimum sample size
    that achieves the target power. Since the total sample size is a function of the
    treatment sample size (n = n_1 + ratio * n_1), we will be finding n_1.
  prefs: []
  type: TYPE_NORMAL
- en: This works because power is monotonically increasing in sample size n_1\. Intuitively,
    more samples means that A/B testing results are more certain and so if the alternative
    hypothesis is true, more values will reject the null hypothesis (see left subplot
    of figure below).
  prefs: []
  type: TYPE_NORMAL
- en: But this also means that subtracting off the target power gives a monotonically
    increasing function with a negative start point and a positive end point. By the
    intermediate value theorem and monotonicity of the function, there is a unique
    root that corresponds to our minimum sample size (see right subplot of figure
    below).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c66e6dffb8db57745b2cf9d9a2543f10.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure by author
  prefs: []
  type: TYPE_NORMAL
- en: A popular, high-performing numerical optimization method is **Brent‚Äôs method**.
    Brent‚Äôs method is a root-finding algorithm that combines various techniques such
    as the bisection method, the secant method and inverse quadratic interpolation.
    Further details of its implementation in Statsmodels can be found [here](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.brentq.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, the implementation looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 1.2\. Writing a stripped-down version of tt_ind_solve_power that is an exact
    implementation of the statistical derivation and produces the same output as the
    original function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The source file in Statsmodels is available [here](https://github.com/statsmodels/statsmodels/blob/main/statsmodels/stats/power.py).
    While the original function is written to be more powerful, its generalizability
    also makes it harder to gain intuition on how the code works.
  prefs: []
  type: TYPE_NORMAL
- en: I thus looked through the source code line-by-line and simplified it down from
    1,600 lines of code to 160, and from 10+ functions to just 2, while ensuring the
    that implementation remains identical.
  prefs: []
  type: TYPE_NORMAL
- en: 'The stripped-down code contains just two functions under the TTestIndPower
    class, exactly following the statistical derivation explained in Part 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '**power**, which computes power given a sample size'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**solve_power**, which finds the minimum sample size that achieves a target
    power using Brent‚Äôs method'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is the full code for the stripped-down version with a test to check that
    it produces the same output as the original function:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Benefits of the numerical optimization approach used by Statsmodels'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 2.1\. Benefits to generalizability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This approach can be easily generalized to finding other parameters of interest
    (e.g. finding the level of significance or minimum detectable effect instead of
    sample size).
  prefs: []
  type: TYPE_NORMAL
- en: Via the closed-form solution approach, we need to find an equation for each
    parameter, which can be complex or infeasible. In contrast, the same numerical
    optimization approach works for any parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 2.2\. Benefits to statistical intuition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This approach is arguably more intuitive because it is a natural extension of
    the concept of statistical power. Further, the concept of the non-central t-distribution
    offers clearer insights into how minimum sample size changes when other parameters
    change.
  prefs: []
  type: TYPE_NORMAL
- en: '**Case 1: Change in parameter leading to increase in Œ∏ and thus an increase
    in power**'
  prefs: []
  type: TYPE_NORMAL
- en: Recall that the non-centrality parameteris Œ∏ = d * sqrt((n1 * n2) / (n1 + n2)).
    An increase in Œ∏ effectively shifts the non-central distribution to the right,
    reducing the overlap between the distributions under the two hypotheses.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be created by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Increase in MDE which increases Cohen‚Äôs d and thus increases Œ∏
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decrease in population standard deviation which increases Cohen‚Äôs d and thus
    increases Œ∏
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This increases power given the same sample size (see Case 1 in diagram below),
    and thus reduces the minimum sample size.
  prefs: []
  type: TYPE_NORMAL
- en: '**Case 2: Change in parameter leading directly to an increase in power without
    changing Œ∏**'
  prefs: []
  type: TYPE_NORMAL
- en: An increase in the level of significance means that more values will lead to
    a rejection of the null. This directly increases power (see Case 2 in diagram
    below) and reduces the minimum sample size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Case 3: Change in target power**'
  prefs: []
  type: TYPE_NORMAL
- en: An increase in target power means that the initial n will no longer meet the
    higher target power, thus requiring an increase in minimum sample size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/5d68924648af71a50c77c3c4ec9f8591.png)'
  prefs: []
  type: TYPE_IMG
- en: Diagram by author
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The function to solve for minimum sample size in Statsmodels is powerful and
    relies on numerical optimization. While different from standard closed-form solutions,
    this approach makes it easier to see the statistical intuition behind how sample
    size is computed, and to generalize to computing other parameters of interest.
    It is an approach worth understanding for data scientists interested in marketing
    and product analytics.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deng, L. (2020). Required Sample Size for A/B Testing. [https://towardsdatascience.com/required-sample-size-for-a-b-testing-6f6608dd330a](/required-sample-size-for-a-b-testing-6f6608dd330a)
  prefs: []
  type: TYPE_NORMAL
- en: 'Kohavi, R., Tang, D., & Xu, Y (2020). Trustworthy Online Controlled Experiments:
    A Practical Guide to A/B Testing. In *Trustworthy Online Controlled Experiments:
    A Practical Guide to A/B Testing* (p. I). Cambridge: Cambridge University Press.'
  prefs: []
  type: TYPE_NORMAL
- en: Miller, E. (2013). [Sample Size Calculator](https://www.evanmiller.org/ab-testing/sample-size.html).
  prefs: []
  type: TYPE_NORMAL
- en: Nsky, S. (2019). Experiment sample size calculation using power analysis. [https://towardsdatascience.com/experiment-sample-size-calculation-using-power-analysis-81cb1bc5f74b](/experiment-sample-size-calculation-using-power-analysis-81cb1bc5f74b)
  prefs: []
  type: TYPE_NORMAL
- en: 'Wei, M. (2023). Probing into Minimum Sample Size Formula: Derivation and Usage.
    [https://towardsdatascience.com/probing-into-minimum-sample-size-formula-derivation-and-usage-8db9a556280b](/probing-into-minimum-sample-size-formula-derivation-and-usage-8db9a556280b)'
  prefs: []
  type: TYPE_NORMAL
- en: Footnotes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] The equivalent function in R is `pwr.t.test`. We use the Python version
    because the open-source code is available for readers to view, compare and work
    through.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] The general non-central t distribution is not symmetric or centered around
    Cohen‚Äôs d, but tends towards being so as the degrees of freedom increases.'
  prefs: []
  type: TYPE_NORMAL
