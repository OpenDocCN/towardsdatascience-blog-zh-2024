["```py\nMarie_Cochran 01:20, 8 January 2024 01:16, 08 February 2024\nMarie_Cochran 01:10, 27 September 2023 01:16, 08 February 2024\nMarie_Cochran 00:59, 12 September 2023 01:16, 08 February 2024\nMarie_Cochran 11:43, 2 November 2022 01:16, 08 February 2024\n...\nMarie_Cochran 19:20, 10 March 2018 01:16, 08 February 2024\nPeter_Tennant 15:03, 29 July 2023 01:16, 08 February 2024\nPeter_Tennant 21:39, 15 April 2022 01:16, 08 February 2024\n...\n```", "```py\nimport pandas as pd\n\n# Read the data\nwiki_df = pd.read_csv(\"edit_history.txt\", sep='\\t', header=None, names=[\"Title\", \"Edit DateTime\", \"Probe DateTime\"], usecols=[\"Title\", \"Edit DateTime\"])\nwiki_df['Edit DateTime'] = pd.to_datetime(wiki_df['Edit DateTime']) # text to datetime\n\n# Sort the DataFrame by 'Title' and 'Edit DateTime' to ensure the deltas are calculated correctly\nwiki_df.sort_values(by=['Title', 'Edit DateTime'], inplace=True)\n\n# Calculate the time deltas for consecutive edits within the same title\nwiki_df['Time Delta'] = wiki_df.groupby('Title')['Edit DateTime'].diff()\nwiki_df.head()\n```", "```py\n# Remove rows with not-a-time (NaT) values in the 'Time Delta' column\nwiki_df.dropna(subset=['Time Delta'], inplace=True)\n# Sort by time delta and reset the index\nwiki_df.sort_values(by='Time Delta', inplace=True)\nwiki_df.reset_index(drop=True, inplace=True)\ndisplay(wiki_df)\nwiki_df['Time Delta'].describe()\n```", "```py\ncount                          36320\nmean      92 days 13:46:11.116189427\nstd      195 days 11:36:52.016155110\nmin                  0 days 00:00:00\n25%                  0 days 00:27:00\n50%                 15 days 05:41:00\n75%                100 days 21:45:45\nmax               4810 days 17:39:00 \n```", "```py\ndef seconds_to_text(seconds):\n    seconds = round(seconds)\n    result = []\n    for unit_name, unit_seconds in [('y', 86400 * 365.25),('d', 86400),('h', 3600),('m', 60),('s', 1)]:\n        if seconds >= unit_seconds:\n            unit_value, seconds = divmod(seconds, unit_seconds)\n            result.append(f\"{int(unit_value)}{unit_name}\")\n    return ' '.join(result) if result else \"<1s\"\n\nseconds_to_text(100)\n```", "```py\nimport numpy as np\n\ndef wait_wait_table(df, wait_ticks):\n    sorted_time_deltas_seconds = df['Time Delta'].dt.total_seconds()\n    results = []\n    for wait_tick in wait_ticks:\n        greater_or_equal_values = sorted_time_deltas_seconds[sorted_time_deltas_seconds >= wait_tick]\n        median_wait = np.median(greater_or_equal_values)\n        additional_wait = median_wait - wait_tick\n        results.append({\"Wait So Far\": seconds_to_text(wait_tick), \"Median Additional Wait\": seconds_to_text(additional_wait)})\n    return pd.DataFrame(results)\n\nwiki_wait_ticks = [0, 60, 60*5, 60*15, 3600, 3600*4, 86400, 86400 * 7,86400 * 30, 86400 * 100, 86400 * 365.25, 86400 * 365.25 * 5, 86400 * 365.25 * 10]\nwiki_wait_tick_labels = [seconds_to_text(wait_tick) for wait_tick in wiki_wait_ticks]\nwait_wait_table(wiki_df, wiki_wait_ticks).style.hide(axis=\"index\")\n```", "```py\nseed = 0\nrng = np.random.default_rng(seed)\nsorted_popcorn_time_deltas = np.sort(rng.normal(5*60, 15, 30_000))\npopcorn_df = pd.DataFrame(pd.to_timedelta(sorted_popcorn_time_deltas,unit=\"s\"), columns=[\"Time Delta\"])\nprint(popcorn_df.describe())\n```", "```py\n Time Delta\ncount                      30000\nmean   0 days 00:05:00.060355606\nstd    0 days 00:00:14.956424467\nmin    0 days 00:03:52.588244397\n25%    0 days 00:04:50.011437922\n50%    0 days 00:04:59.971380399\n75%    0 days 00:05:10.239357827\nmax    0 days 00:05:59.183245298\n```", "```py\nwait_wait_table(popcorn_df, [0, 10, 30, 60, 2*60, 3*60, 4*60, 5*60]).style.hide(axis=\"index\")\n```", "```py\nseed = 0\nrng = np.random.default_rng(seed)\nlast_week_won = None\nlotto_waits = []\nfor week in range(1_000_000):\n    if rng.uniform(high=27.1) < 1.0:\n        if last_week_won is not None:\n            lotto_waits.append(week - last_week_won)\n        last_week_won = week\nsorted_lotto_time_deltas = np.sort(np.array(lotto_waits) * 7 * 24 * 60 * 60)\nlotto_df = pd.DataFrame(pd.to_timedelta(sorted_lotto_time_deltas,unit=\"s\"), columns=[\"Time Delta\"])\nprint(lotto_df.describe())\n```", "```py\n Time Delta\ncount                        36773\nmean   190 days 08:21:00.141951976\nstd    185 days 22:42:41.462765808\nmin                7 days 00:00:00\n25%               56 days 00:00:00\n50%              133 days 00:00:00\n75%              259 days 00:00:00\nmax             2429 days 00:00:00\n```", "```py\nlotto_days = [0, 7, 7.00001,  2*7, 4*7, 183, 365.25, 2*365.25, 5*365.25]\nlotto_waits = [day * 24 * 60 * 60 for day in lotto_days]\nwait_wait_table(lotto_df, lotto_waits).style.hide(axis=\"index\")\n```", "```py\nlotto_df[lotto_df[\"Time Delta\"] > pd.to_timedelta(24*60*60 * 365.25 * 5, unit=\"s\")]\n```", "```py\nwiki_df['CDF'] = wiki_df['Time Delta'].rank(pct=True)\npopcorn_df['CDF'] = popcorn_df['Time Delta'].rank(pct=True)\nlotto_df['CDF'] = lotto_df['Time Delta'].rank(pct=True)\nwiki_df\n```", "```py\nimport matplotlib.pyplot as plt\n\ndef wait_cdf(title, sorted_df, wait_ticks, dist=None, dist_label=None, left=None, right=None, xscale='linear'):\n    wait_seconds = sorted_df['Time Delta'].dt.total_seconds() # x values\n    cdf = sorted_df['CDF'] # y values\n\n    left = left or wait_seconds.min()\n    right = right or wait_seconds.max()\n\n    plt.figure(figsize=(10, 6))\n    plt.title(title + ' Cumulative Distribution Function (CDF)')\n    plt.plot(wait_seconds, cdf, marker='.', linestyle=\" \", label='Empirical CDF')\n\n    if dist is not None:\n        dist_x = np.logspace(np.log10(left), np.log10(right), 100) if xscale == 'log' else np.linspace(left, right, 100)\n        dist_y = dist.cdf(dist_x)\n        plt.plot(dist_x, dist_y, label = dist_label)\n\n    plt.xlabel('Wait')\n    plt.ylabel('CDF')\n    plt.xscale(xscale)\n    plt.xticks(wait_ticks, [seconds_to_text(wait_tick) for wait_tick in wait_ticks], rotation=45)\n    plt.xlim(left=left, right=right)\n    plt.grid(True, which=\"both\", ls=\"--\")\n    plt.legend(loc='upper left')\n    plt.show()\n\nwait_cdf(\"Lottery Wins\", lotto_df, wiki_wait_ticks, xscale='log')\n```", "```py\nfrom scipy.stats import expon\n\n_, lotto_e_scale = expon.fit(lotto_df['Time Delta'].dt.total_seconds(), floc=0)\nlotto_expon_dist = expon(scale=lotto_e_scale)\nprint(f\"Lottery wins exponential median is {seconds_to_text(lotto_expon_dist.median())}. The scale parameter is {seconds_to_text(lotto_e_scale)}.\")\n```", "```py\nlotto_expon_label = f'ExponentialDistribution(scale={seconds_to_text(lotto_e_scale)})'\nwait_cdf(\"Lottery Wins\", lotto_df, wiki_wait_ticks, dist=lotto_expon_dist, dist_label=lotto_expon_label, xscale='log')\n```", "```py\n_, popcorn_e_scale = expon.fit(popcorn_df['Time Delta'].dt.total_seconds(), floc=0)\npopcorn_expon_dist = expon(scale=popcorn_e_scale)\nprint(f\"Popcorn exponential median is {seconds_to_text(popcorn_expon_dist.median())}\")\npopcorn_expon_label = f'ExponentialDistribution(scale={seconds_to_text(popcorn_e_scale)})'\nwait_cdf(\"Popcorn\", popcorn_df, popcorn_ticks, dist=popcorn_expon_dist, dist_label=popcorn_expon_label, left=10, right=6*60, xscale='linear' )\n\n_, wiki_e_scale = expon.fit(wiki_df['Time Delta'].dt.total_seconds(), floc=0)\nwiki_expon_dist = expon(scale=wiki_e_scale)\nprint(f\"Wiki exponential median is {seconds_to_text(wiki_expon_dist.median())}\")\nwiki_expon_label = f'ExponentialDistribution(scale={seconds_to_text(wiki_e_scale)})'\nwait_cdf(\"Wiki Edits\", wiki_df, wiki_wait_ticks, dist=wiki_expon_dist, dist_label=wiki_expon_label, xscale='log', left=60)\n```", "```py\nfrom scipy.stats import weibull_min\n\nlotto_shape, _, lotto_w_scale = weibull_min.fit(lotto_df['Time Delta'].dt.total_seconds(), floc=0)\nlotto_weibull_dist = weibull_min(c=lotto_shape,scale=lotto_w_scale)\n\nprint(f\"Lottery Wins Weibull median is {seconds_to_text(lotto_weibull_dist.median())}\")\nlotto_weibull_label = f'WeibullDistribution(shape={lotto_shape:.3},scale={seconds_to_text(lotto_w_scale)})'\nwait_cdf(\"Lottery Wins\", lotto_df, wiki_wait_ticks, dist=lotto_weibull_dist, dist_label=lotto_weibull_label, xscale='log')\n```", "```py\npopcorn_shape, _, popcorn_w_scale = weibull_min.fit(popcorn_df['Time Delta'].dt.total_seconds(), floc=0)\npopcorn_weibull_dist = weibull_min(c=popcorn_shape, scale=popcorn_w_scale)\nprint(f\"Popcorn Weibull median is {seconds_to_text(popcorn_weibull_dist.median())}\")\npopcorn_df_weibull_label = f'Weibull(shape={popcorn_shape:.3}, scale={seconds_to_text(popcorn_w_scale)})'\nwait_cdf(\"Popcorn\", popcorn_df, popcorn_ticks, dist=popcorn_weibull_dist, dist_label=popcorn_df_weibull_label, left=3*60, right=7*60, xscale='linear')\n```", "```py\nwiki_shape, _, wiki_w_scale = weibull_min.fit(wiki_df['Time Delta'].dt.total_seconds(), floc=0)\nwiki_weibull_dist = weibull_min(c=wiki_shape, scale=wiki_w_scale)\nprint(f\"Wiki Weibull median is {seconds_to_text(wiki_weibull_dist.median())}\")\nwiki_df_weibull_label = f'Weibull(shape={wiki_shape:.3},scale={seconds_to_text(wiki_w_scale)})'\nwait_cdf(\"Wiki Edits\", wiki_df, wiki_wait_ticks, dist=wiki_weibull_dist, dist_label=wiki_df_weibull_label, xscale='log', left=60)\n```"]