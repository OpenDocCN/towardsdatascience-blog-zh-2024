- en: Full Guide to Building a Professional Portfolio with Python, Markdown, Git,
    and GitHub Pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/full-guide-to-build-a-professionnal-portfolio-with-python-markdown-git-and-github-page-for-66d12f7859f0?source=collection_archive---------0-----------------------#2024-07-20](https://towardsdatascience.com/full-guide-to-build-a-professionnal-portfolio-with-python-markdown-git-and-github-page-for-66d12f7859f0?source=collection_archive---------0-----------------------#2024-07-20)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to develop your image as a developer or data worker with a quality portfolio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@petoulemonde?source=post_page---byline--66d12f7859f0--------------------------------)[![Pierre-Etienne
    Toulemonde](../Images/95fdda47e79e3c194fc96ef29f3a2188.png)](https://medium.com/@petoulemonde?source=post_page---byline--66d12f7859f0--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--66d12f7859f0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--66d12f7859f0--------------------------------)
    [Pierre-Etienne Toulemonde](https://medium.com/@petoulemonde?source=post_page---byline--66d12f7859f0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--66d12f7859f0--------------------------------)
    ·9 min read·Jul 20, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9205955a834dc7af6a9ba134a2325593.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Product School](https://unsplash.com/@productschool?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: My previous portfolio
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The adventure begins
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3.1\. Software needed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.2\. Configure the local environment
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.3\. Create the working folder
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.4\. Prepare Git
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.5\. Feed the website
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.6\. Website configuration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.7\. Final *mkdocs.yml* file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.8\. Final file structure
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 3.9\. Deploy the work
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: GitHub Pages configuration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Iterative improvements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My final 2024-edition portfolio!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**My previous portfolio**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2023, I’d been coding for data projects for 2 years and was looking to create
    my first portfolio to present my data science projects. I discovered [Matt Chapman’s
    TDS article](/the-portfolio-that-got-me-a-data-scientist-job-513cc821bfe4) and
    [Matt Chapman’s portfolio](https://mattschapman.github.io/). This article corresponded
    perfectly to my technical knowledge at the time (Python, Git). Thanks to Matt
    Chapman’s article, I begun my first portfolio! So I decided to explore this solution
    and figure out how to go about it. I discovered [the reference that Matt Chapman
    used](https://medium.com/@evanca/set-up-your-portfolio-website-in-less-than-10-minutes-with-github-pages-d0efa8ff56fd)
    and the [corresponding repository](https://github.com/evanca/quick-portfolio).
    I used this reference to create my portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: 'In 2024, I found my old portfolio old-fashioned compared to existing portfolios,
    and not very attractive to data enthusiasts or recruiters. Exploring the projects
    already carried out in the community, I found several projects with superb documentation.
    Here are 2 links that inspired me: [Multi pages documentation based on GitHub
    Pages](https://github.com/aphp/edsnlp), and [JavaScript portfolio based on GitHub
    Pages](https://github.com/KeeganFernandesWork/KeeganFernandesDataScience) and
    [corresponding Medium article](https://keeganfdes03.medium.com/making-a-data-science-portfolio-using-github-pages-for-free-ee831d4dec68).'
  prefs: []
  type: TYPE_NORMAL
- en: '**The adventure begins**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this new edition of my portfolio, my criteria were: a free solution, with
    minimal configuration. Looking through existing documentations and portfolios,
    I had several options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'option 1: Keeping the same visual and architecture from my previous portfolio'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'option 2: Fork the JavaScript portfolio mentioned above'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'option 3: Use the [mkdocs](https://www.mkdocs.org/) Python package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As I don’t code in JavaScript, I would have been quickly limited in my customization,
    so I preferred to pass. Using a single GitHub Pages as in my previous portfolio
    wasn’t enough of an improvement on my portfolio. During my research, I discovered
    2 mkdocs sub-packages that particularly caught my attention for the visuals they
    offered: [mkdocs-material](https://squidfunk.github.io/mkdocs-material/) and [just-the-docs](https://just-the-docs.com/).
    I finally chose mkdocs for 3 reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: the package (mkdocs) is easy to use, and I know Python and Git, which are the
    2 technologies required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the website content is in Markdown, and the package automatically generates
    the site with a minimum of action on my part on the GitHub repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the website generated is beautiful and functional
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mkdocs-material allows the use of Google Tags, perfect for tracking traffic
    on my portfolio!
  prefs: []
  type: TYPE_NORMAL
- en: '**The code**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of this project, I had already set up my GitHub Pages, created my
    repository and created the virtual environment for my previous portfolio. To enable
    everyone to follow and reproduce this article, I’ve decided to start from scratch.
    For those of you who already have a GitHub Pages portfolio, you’re already familiar
    with Git and Python and will be able to hang on to the branches without any worries.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I’ll be sharing some URL links. My aim is to give you a good
    understanding of every aspect of the code and, if necessary, to provide you with
    resources to go into more detail on a subject or solve an error that I haven’t
    described in my article.
  prefs: []
  type: TYPE_NORMAL
- en: '**Software needed**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this work, you will need at least Python and Git installed and configured
    on your computer, and a GitHub account. Personally, I work on VSCode and [Miniconda
    integrated into PowerShell](https://stackoverflow.com/questions/64149680/how-can-i-activate-a-conda-environment-from-powershell)
    so that I can have my scripts and terminal on the same screen. To configure Git,
    I refer you to the *Your identity* part of the page on the [Git site](https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup).
  prefs: []
  type: TYPE_NORMAL
- en: '**Configure the local environment**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I work with [Miniconda](https://docs.anaconda.com/miniconda/). If you work with
    the same tool, you will recognize the ‘*(base)>’* elements. If not, this element
    represent the current virtual python environment (*base* is the default virtual
    environment of Miniconda). The element `*working_folder*` is the the terminal’s
    current folder.
  prefs: []
  type: TYPE_NORMAL
- en: '1\. The first step is to create the virtual environment for the portfolio project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '2\. In this new environment, we need to install the Python packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '3\. To guarantee the reproducibility of your environment, we export requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Create the working folder**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'My previous portfolio didn’t use mkdocs, so I create the mkdocs structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace *<your GitHub username>* by your GitHub username. For the rest of this
    article, I’ll call the folder *<your GitHub username>.github.io working_folder*.
    The new folder will have the following architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To understand the mkdocs package, you will find the documentation [here](https://www.mkdocs.org/).
  prefs: []
  type: TYPE_NORMAL
- en: P**repare Git**
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you already have a GitHub Pages, you can clone your *<your GitHub username>.github.io*
    repository and skip this part. The step part is to create the local Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Create a file named *readme.md.* This file is the classic readme file for any
    Git repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a Git terminal and create the local repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 3\. On your GitHub account, create a new repository named *<your GitHub username>.github.io*
    (replace *<your GitHub username>* by your GitHub username)
  prefs: []
  type: TYPE_NORMAL
- en: '4\. Connect the local repository with the remote repository. In the Git terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: If you are not familiar with GitHub Pages, the [GitHub Pages website](https://pages.github.com/)
    will introduce them to you and explain why I use *<your GitHub username>.github.io*
    as repository name.
  prefs: []
  type: TYPE_NORMAL
- en: 'The working folder will have the following architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Feed the website**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mkdocs allows you to display website and dynamically include modifications,
    so you can see your site evolve over time. The code to dynamically generate the
    site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This command returns a local URL (e.g. *127.0.0.1:8000*) to paste into the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '**readme.md and index.md**'
  prefs: []
  type: TYPE_NORMAL
- en: The readme file corresponds to the home page of the remote repository. When
    you created the working folder with the mkdocs package, it created a *docs/index.md*
    file which corresponds to the site’s home page.
  prefs: []
  type: TYPE_NORMAL
- en: '**The menu**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to configure the menu of the website (the left panel, to
    navigate between pages). In the *working_folder/mkdocs.yml* file, this is the
    *nav* part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The *Home* element is important: this is the home page of the website. You
    can choose to duplicate the *readme.md* file inside the *index.md* file to have
    the same home page on the GitHub repository and the website, or write a new *index.md*
    file to have a specific home page for your portfolio.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break down the following block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '*Previous data science project*:will represent the name of a group of pages
    in the navigation bar. *“Predict Health Outcomes of Horses”* will be the name
    displayed in the menu of the file indicated, in this case: *horse_health_prediction_project/readme.md*
    . Mkdocs automatically finds the pages to display in the docs folder, so there
    is no need to specify this in the path. However, as the horse health prediction
    project is presented in an eponymous folder, you must specify in which folder
    the file you wish to display is located.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the *docs/* folder, I add my previous project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then I add each project’s presentation in the nav bar with the following syntax:
    `*“<displayed name>”: <path_from_docs_to_project_file>/<project_presentation>.md`*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The indentation here is very important: it’s define folders of the navigation
    bar. Not all files in the docs folder need to be listed in the navigation bar.
    However, if they are not listed, they will not be directly accessible to the visitor.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Website configuration**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Then I configure invisible but very important aspects of my website:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Basic web site information asked by mkdocs-material:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The *site_name* corresponding to the name on the tab browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some repo informations to allow mkdocs-material to display information in the
    top right-hand corner of the repository hosting the site:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'I define the design to use here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s a very important step because this line says to mkdocs: ‘Use the mkdocs-material
    package to build the website’. If you miss this step, the GitHub Pages will not
    have the mkdocs-material visual and functionalities!'
  prefs: []
  type: TYPE_NORMAL
- en: 'I add some additional information, to track the traffic on my website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The *property* is a code from Google Analytics, to track traffic on my portfolio.
    The code is generated with Google Analytics and linked to my Google account (you
    can found a tutorial to create your code [here](https://www.w3schools.com/howto/howto_google_analytics.asp)).
  prefs: []
  type: TYPE_NORMAL
- en: Of course I didn’t write the whole file at once. I started to add one project
    files and information in the file architecture and in the navigation bar, then
    the configuration, then another project, then configuration, …
  prefs: []
  type: TYPE_NORMAL
- en: '**The final *mkdocs.yml* file**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'My final *mkdocs.yml* file is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**The final file structure**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At this step, my file structure is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Deploy the work**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mkdocs allows to generate the code for the website in 1 command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Mkdocs translate all the mkdocs files to html website, like a magician! The
    Markdown links are transformed into HTML links and the sitemap of the site is
    generated.
  prefs: []
  type: TYPE_NORMAL
- en: Then, commit all the changes in the local repository and push it in the remote
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '**The GitHub Pages configuration**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To set up a GitHub Pages, the steps are:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow previous steps, to push a minimal portfolio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On [GitHub](https://github.com), in the remote repo home page, click on ‘*Settings*’
    (top menu)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the left menu, click on ‘*Pages*’
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure the page:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '- *Source*: *deploy from a branch'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- Branch*: *gh-deploy* and */root* - then save'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the top menu, click on ‘*Actions*’. You should see a ‘workflow run’. Leave
    it there, and as soon as it is green, it’s good, your site is online! Well done,
    you succeeded!
  prefs: []
  type: TYPE_NORMAL
- en: You can see you website on *https://<your GitHub username>.github.io*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Iterative improvements**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The more I look at my portfolio to check and present it, the more errors I
    notice. To correct them, nothing could be simpler:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make changes on your computer (to take a quick look at the modification made
    and make others if necessary, quick reminder: `*mkdocs serve*`)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Regenerate the site using `*mkdocs gh-deploy*`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit all changes
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push into the remote repo.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And the magic happens: GitHub automatically makes the modification (look at
    the ‘*Actions*’ tab to see where GitHub is at).'
  prefs: []
  type: TYPE_NORMAL
- en: '**My final 2024-edition portfolio!**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You’ll find my edition 2024 portfolio [here](https://petoulemonde.github.io)
    and the GitHub repository [here](https://github.com/petoulemonde.github.io). In
    the future, I’d like to integrate JavaScript to make the portfolio more dynamic.
  prefs: []
  type: TYPE_NORMAL
- en: Why didn’t I buy a website for my portfolio? I’d like to concentrate on creating
    content for my portfolio and new projects, and keep the administrative aspect
    of these tasks to a minimum. What’s more, for a website as for a GitHub Pages,
    people will find out about the project by clicking on a link that redirects them
    to my site, so purchased website or not, the result will be the same.
  prefs: []
  type: TYPE_NORMAL
- en: Many thanks for your attention, this was my first medium article. Feel free
    to respond on the article, I’d love to hear what you think. See you soon!
  prefs: []
  type: TYPE_NORMAL
