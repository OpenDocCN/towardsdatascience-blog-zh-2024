- en: 'System Design: Bloom Filter'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/system-design-bloom-filter-a2e19dcd4810?source=collection_archive---------3-----------------------#2024-03-24](https://towardsdatascience.com/system-design-bloom-filter-a2e19dcd4810?source=collection_archive---------3-----------------------#2024-03-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Smartly transforming a hash table to a probabilistic data structure to trade
    accuracy for large memory gains
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@slavahead?source=post_page---byline--a2e19dcd4810--------------------------------)[![Vyacheslav
    Efimov](../Images/441e600862b2b93564c6cd81abb0092d.png)](https://medium.com/@slavahead?source=post_page---byline--a2e19dcd4810--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a2e19dcd4810--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a2e19dcd4810--------------------------------)
    [Vyacheslav Efimov](https://medium.com/@slavahead?source=post_page---byline--a2e19dcd4810--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a2e19dcd4810--------------------------------)
    ·6 min read·Mar 24, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2e1fcf1dc1e730a621e06a24289dd872.png)'
  prefs: []
  type: TYPE_IMG
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: H**ash table** is one of the most widely known and used data structures. With
    a wise choice of hash function, a hash table can produce optimal performance for
    insertion, search and deletion queries in constant time.
  prefs: []
  type: TYPE_NORMAL
- en: The main drawback of the hash table is potential collisions. To avoid them,
    one of the standard methods includes increasing the hash table size. While this
    approach works well in most cases, sometimes we are still limited in using large
    memory space.
  prefs: []
  type: TYPE_NORMAL
- en: It is necessary to recall that a hash table always provides a correct response
    to any query. It might go through collisions and be slow sometimes but it **always**
    **guarantees 100% correct responses**. It turns out that in some systems, we do
    not always need to receive correct information to queries. Such a decrease in
    accuracy can be used to focus on improving other aspects of the system.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will discover an innovative data structure called a **Bloom
    filter**. In simple words, it is a modified version of a standard hash table which
    trades off a small decrease in accuracy for memory space gains.
  prefs: []
  type: TYPE_NORMAL
