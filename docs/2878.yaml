- en: AI Agents in Networking Industry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/ai-agents-in-networking-industry-f73a42fa22e1?source=collection_archive---------9-----------------------#2024-11-27](https://towardsdatascience.com/ai-agents-in-networking-industry-f73a42fa22e1?source=collection_archive---------9-----------------------#2024-11-27)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: AI Agents for deploying, configuring and monitoring Networks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mandeepkular?source=post_page---byline--f73a42fa22e1--------------------------------)[![Mandeep
    Kular](../Images/7569ebc1b25b979bfdf76abd4a39f154.png)](https://medium.com/@mandeepkular?source=post_page---byline--f73a42fa22e1--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f73a42fa22e1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f73a42fa22e1--------------------------------)
    [Mandeep Kular](https://medium.com/@mandeepkular?source=post_page---byline--f73a42fa22e1--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f73a42fa22e1--------------------------------)
    ·11 min read·Nov 27, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: AI agents have been all the rage in 2024 and rightfully so. Unlike traditional
    AI models or interactions with Large Language Models (LLMs) that provide responses
    based on static training data, AI agents are dynamic entities that can perceive,
    reason (due to prompting techniques), and act autonomously within their operational
    domains. Their ability to adapt and optimize processes makes them invaluable in
    fields requiring intricate decision-making and real-time responsiveness, such
    as network deployment, testing, monitoring and debugging. In the coming days we
    will see vast adoption of AI agents across all industries, especially networking
    industry.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6f63370ec2c836b6f6516ee7697713c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Agentic Workflow (Image by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Here I demonstrate network deployment, configuration and monitoring via AI agents.
    Overall this agentic workflow consists of 4 agents. First one is tasked to get
    the installation steps from [https://learn.srlinux.dev/get-started/lab/](https://learn.srlinux.dev/get-started/lab/)
    website. Second agent executes these steps. Third agent comes up with relevant
    node configs based on network topology and finally the last agent executes the
    configuration and verifies end to end connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: '***For details on the code playbook, please check my github link:*** [***AI-Agents-For-Networking***](https://github.com/mkular/AI-Agents-For-Networking)***.***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Deploying a network with CrewAI’s MAS (multi-agent system)**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this use-case, entire topology was deployed on a pre-built Debian 12 UTM
    VM (as a sandbox environment). This was deliberatly chosen as it comes with all
    relevant packages like containerlab and docker packages pre-installed. Containerlab
    helps spin up various container based networking topologies with ease. Following
    topology was chosen which consisted of linux containers and Nokia’s SR Linux containers:'
  prefs: []
  type: TYPE_NORMAL
- en: Client1 — — Leaf1 — — Spine1 — — Leaf2 — — Client2
  prefs: []
  type: TYPE_NORMAL
- en: Where Client1 and Client2 are linux containers and Leaf1 and Leaf2 are IXR-D2L
    and Spine1 is IXR-D5 types of SR Linux containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is the summarized workflow of each agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Document Specialist Agent**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Goes over the given website url and extracts the installation steps, network
    topology deployment steps and finds node connection instructions. Following is
    the sample code to create agent, task and its custom tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once run, following is an example output (Final Answer) from the agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]bash'
  prefs: []
  type: TYPE_NORMAL
- en: Installation Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: curl -sL https://containerlab.dev/setup | sudo -E bash -s "all"
  prefs: []
  type: TYPE_NORMAL
- en: Topology Deployment Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: sudo containerlab deploy -c -t https://github.com/srl-labs/srlinux-getting-started
  prefs: []
  type: TYPE_NORMAL
- en: Node Connection Instructions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ssh leaf1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As can be seen, it has clearly extracted the desired steps from the url. This
    is then passed on to the next agent.
  prefs: []
  type: TYPE_NORMAL
- en: '***Note: Adding code for all the agents will make this article lengthy. Kindly
    check my github repo for more details:*** [***AI-Agents-For-Networking***](https://github.com/mkular/AI-Agents-For-Networking)***.***'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**2\. Linux Configuration Agent**'
  prefs: []
  type: TYPE_NORMAL
- en: Executes the commands obtained from Document specialist agent. Its given the
    login details for UTM VM and instructed to execute the commands on that VM. It
    finishes by checking that all docker containers all running. It also checks the
    health of the VM before performing any containerlab/docker commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output (Final Answer) from this agent clearly shows successful execution
    of VM health checks, containerlab and docker commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Filesystem                   Size  Used Avail Use% Mounted on
  prefs: []
  type: TYPE_NORMAL
- en: udev                         5.9G     0  5.9G   0% /dev
  prefs: []
  type: TYPE_NORMAL
- en: tmpfs                        1.2G  1.3M  1.2G   1% /run
  prefs: []
  type: TYPE_NORMAL
- en: /dev/mapper/debian--vg-root   61G  5.7G   52G  10% /
  prefs: []
  type: TYPE_NORMAL
- en: tmpfs                        5.9G     0  5.9G   0% /dev/shm
  prefs: []
  type: TYPE_NORMAL
- en: tmpfs                        5.0M     0  5.0M   0% /run/lock
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda2                    456M   92M  340M  22% /boot
  prefs: []
  type: TYPE_NORMAL
- en: /dev/sda1                    511M  5.9M  506M   2% /boot/efi
  prefs: []
  type: TYPE_NORMAL
- en: tmpfs                        1.2G     0  1.2G   0% /run/user/1000
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
  prefs: []
  type: TYPE_NORMAL
- en: root           1  0.0  0.1 168128 12792 ?        Ss   Nov25   1:28 /sbin/init
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: debian    106849  0.0  0.0   8244  4992 pts/0    Ss+  Nov25   0:09 -bash
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
  prefs: []
  type: TYPE_NORMAL
- en: '64 bytes from 8.8.8.8: icmp_seq=1 ttl=116 time=15.4 ms'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: '--- 8.8.8.8 ping statistics ---'
  prefs: []
  type: TYPE_NORMAL
- en: 4 packets transmitted, 4 received, 0% packet loss, time 3012ms
  prefs: []
  type: TYPE_NORMAL
- en: rtt min/avg/max/mdev = 15.316/16.778/20.466/2.142 ms
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: +---+---------+--------------+------------------------------------+---------------+---------+----------------+----------------------+
  prefs: []
  type: TYPE_NORMAL
- en: '| # |  Name   | Container ID |               Image                |     Kind      |  State  |  IPv4
    Address  |     IPv6 Address     |'
  prefs: []
  type: TYPE_TB
- en: +---+---------+--------------+------------------------------------+---------------+---------+----------------+----------------------+
  prefs: []
  type: TYPE_NORMAL
- en: '| 1 | client1 | ab894528a0e9 | ghcr.io/srl-labs/network-multitool | linux         |
    running | 172.20.20.4/24 | 3fff:172:20:20::4/64 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | client2 | 6f9f0822be5d | ghcr.io/srl-labs/network-multitool | linux         |
    running | 172.20.20.2/24 | 3fff:172:20:20::2/64 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | leaf1   | e7a1a3874600 | ghcr.io/nokia/srlinux:24.7.2       | nokia_srlinux
    | running | 172.20.20.3/24 | 3fff:172:20:20::3/64 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | leaf2   | ed4399b8f7d6 | ghcr.io/nokia/srlinux:24.7.2       | nokia_srlinux
    | running | 172.20.20.5/24 | 3fff:172:20:20::5/64 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | spine1  | ada601805590 | ghcr.io/nokia/srlinux:24.7.2       | nokia_srlinux
    | running | 172.20.20.6/24 | 3fff:172:20:20::6/64 |'
  prefs: []
  type: TYPE_TB
- en: +---+---------+--------------+------------------------------------+---------------+---------+----------------+----------------------+
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: CONTAINER ID   IMAGE                                COMMAND                  CREATED         STATUS         PORTS                                          NAMES
  prefs: []
  type: TYPE_NORMAL
- en: ada601805590   ghcr.io/nokia/srlinux:24.7.2         "/tini -- fixuid -q …"   4
    minutes ago   Up 4 minutes                                                  spine1
  prefs: []
  type: TYPE_NORMAL
- en: 6f9f0822be5d   ghcr.io/srl-labs/network-multitool   "/bin/sh /docker/ent…"   4
    minutes ago   Up 4 minutes   22/tcp, 80/tcp, 443/tcp, 1180/tcp, 11443/tcp   client2
  prefs: []
  type: TYPE_NORMAL
- en: e7a1a3874600   ghcr.io/nokia/srl-labs/network-multitool   "/bin/sh /docker/ent…"   4
    minutes ago   Up 4 minutes                                                  leaf1
  prefs: []
  type: TYPE_NORMAL
- en: ab894528a0e9   ghcr.io/nokia/srl-labs/network-multitool   "/bin/sh /docker/ent…"   4
    minutes ago   Up 4 minutes                                                  client1
  prefs: []
  type: TYPE_NORMAL
- en: ed4399b8f7d6   ghcr.io/nokia/srlinux:24.7.2         "/tini -- fixuid -q …"   4
    minutes ago   Up 4 minutes                                                  leaf2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**3\. Network Configuration Specialist Agent**'
  prefs: []
  type: TYPE_NORMAL
- en: The job of this agent is to understand the topology i.e. the number of nodes
    and their connectivity. It then needs to come up with ip allocation scheme, generate
    relevant interface and routing configuration of linux containers and SR Linux
    containers alongwith adhering to the ip allocation scheme.
  prefs: []
  type: TYPE_NORMAL
- en: For SR Linux configuration an example config was given in the prompt. This example
    config could have also been obtained from a configuration guide in pdf format
    which would have been RAGed by the agent (given the right tools).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the output of this agent below, it can clearly be seen that it has succesfully
    come up with ip allocation based on the topology, the relevant configurations
    and routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]bash'
  prefs: []
  type: TYPE_NORMAL
- en: /sbin/ip address add 10.1.1.2/24 dev eth1
  prefs: []
  type: TYPE_NORMAL
- en: /sbin/ip route add 10.1.4.2/32 via 10.1.1.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]bash'
  prefs: []
  type: TYPE_NORMAL
- en: enter candidate private
  prefs: []
  type: TYPE_NORMAL
- en: configure data interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: set / interface ethernet-1/1 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/1 subinterface 0 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/1 subinterface 0 ipv4 address 10.1.1.1/24
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/1 subinterface 0 ipv4 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/49 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/49 subinterface 0 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/49 subinterface 0 ipv4 address 10.1.2.1/24
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/49 subinterface 0 ipv4 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: add interfaces to default namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: set / network-instance default interface ethernet-1/1.0
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default interface ethernet-1/49.0
  prefs: []
  type: TYPE_NORMAL
- en: configure BGP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp router-id 1.1.1.1
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp autonomous-system 65001
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp afi-safi ipv4-unicast admin-state
    enable
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp group ebgp admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp group ebgp export-policy [ export-all
    ]
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp group ebgp import-policy [ export-all
    ]
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp neighbor 10.1.2.2 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp neighbor 10.1.2.2 peer-group ebgp
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp neighbor 10.1.2.2 peer-as 65002
  prefs: []
  type: TYPE_NORMAL
- en: create policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: set / routing-policy policy export-all default-action policy-result accept
  prefs: []
  type: TYPE_NORMAL
- en: commit now
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]bash'
  prefs: []
  type: TYPE_NORMAL
- en: enter candidate private
  prefs: []
  type: TYPE_NORMAL
- en: configure data interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: set / interface ethernet-1/1 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/1 subinterface 0 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/1 subinterface 0 ipv4 address 10.1.2.2/24
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/1 subinterface 0 ipv4 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/2 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/2 subinterface 0 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/2 subinterface 0 ipv4 address 10.1.3.1/24
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/2 subinterface 0 ipv4 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: add interfaces to default namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: set / network-instance default interface ethernet-1/1.0
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default interface ethernet-1/2.0
  prefs: []
  type: TYPE_NORMAL
- en: configure BGP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp router-id 2.2.2.2
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp autonomous-system 65002
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp afi-safi ipv4-unicast admin-state
    enable
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp group ebgp admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp group ebgp export-policy [ export-all
    ]
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp group ebgp import-policy [ export-all
    ]
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp neighbor 10.1.2.1 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp neighbor 10.1.2.1 peer-group ebgp
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp neighbor 10.1.2.1 peer-as 65001
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp neighbor 10.1.3.2 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp neighbor 10.1.3.2 peer-group ebgp
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp neighbor 10.1.3.2 peer-as 65003
  prefs: []
  type: TYPE_NORMAL
- en: create policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: set / routing-policy policy export-all default-action policy-result accept
  prefs: []
  type: TYPE_NORMAL
- en: commit now
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]bash'
  prefs: []
  type: TYPE_NORMAL
- en: enter candidate private
  prefs: []
  type: TYPE_NORMAL
- en: configure data interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: set / interface ethernet-1/1 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/1 subinterface 0 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/1 subinterface 0 ipv4 address 10.1.4.1/24
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/1 subinterface 0 ipv4 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/49 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/49 subinterface 0 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/49 subinterface 0 ipv4 address 10.1.3.2/24
  prefs: []
  type: TYPE_NORMAL
- en: set / interface ethernet-1/49 subinterface 0 ipv4 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: add interfaces to default namespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: set / network-instance default interface ethernet-1/1.0
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default interface ethernet-1/49.0
  prefs: []
  type: TYPE_NORMAL
- en: configure BGP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp router-id 3.3.3.3
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp autonomous-system 65003
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp afi-safi ipv4-unicast admin-state
    enable
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp group ebgp admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp group ebgp export-policy [ export-all
    ]
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp group ebgp import-policy [ export-all
    ]
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp neighbor 10.1.3.1 admin-state enable
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp neighbor 10.1.3.1 peer-group ebgp
  prefs: []
  type: TYPE_NORMAL
- en: set / network-instance default protocols bgp neighbor 10.1.3.1 peer-as 65002
  prefs: []
  type: TYPE_NORMAL
- en: create policy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: set / routing-policy policy export-all default-action policy-result accept
  prefs: []
  type: TYPE_NORMAL
- en: commit now
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]bash'
  prefs: []
  type: TYPE_NORMAL
- en: /sbin/ip address add 10.1.4.2/24 dev eth1
  prefs: []
  type: TYPE_NORMAL
- en: /sbin/ip route add 10.1.1.2/32 via 10.1.4.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**4\. Senior Network Administrator Agent**'
  prefs: []
  type: TYPE_NORMAL
- en: This agent gets the configuration generated and applies it to all the nodes,
    checks for bgp peering to come up and then finally executes ping from end to end
    verifying connectivity. Here the agent gets to the right show command just by
    inferring from the configuration commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following is the Final Answer from this agent obtained after successful configuration
    and of the network topology and checking end to end connectivity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: PING 10.1.4.2 (10.1.4.2) 56(84) bytes of data.
  prefs: []
  type: TYPE_NORMAL
- en: '64 bytes from 10.1.4.2: icmp_seq=1 ttl=61 time=128 ms'
  prefs: []
  type: TYPE_NORMAL
- en: '64 bytes from 10.1.4.2: icmp_seq=2 ttl=61 time=8.16 ms'
  prefs: []
  type: TYPE_NORMAL
- en: '64 bytes from 10.1.4.2: icmp_seq=3 ttl=61 time=4.49 ms'
  prefs: []
  type: TYPE_NORMAL
- en: '64 bytes from 10.1.4.2: icmp_seq=4 ttl=61 time=5.86 ms'
  prefs: []
  type: TYPE_NORMAL
- en: '--- 10.1.4.2 ping statistics ---'
  prefs: []
  type: TYPE_NORMAL
- en: 4 packets transmitted, 4 received, 0% packet loss, time 3005ms
  prefs: []
  type: TYPE_NORMAL
- en: rtt min/avg/max/mdev = 4.491/36.620/127.973/52.758 ms
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Conclusion**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AI agents go above and beyond automation. They can reason and try to come up
    with alternatives. A simple example can be if a linux command fails due to permission
    issue and the agent has access to sudo password, next time it will try with a
    sudo password to succeed. A complex example can be incase the bgp peering is not
    up, then based on the prompt instructions they can try to find why and even go
    about fixing it.
  prefs: []
  type: TYPE_NORMAL
- en: Agentic workflows have its challenges and they require different way of thinking
    compared to programmatic approaches. So far the downsides that I have encountered
    include that it can take longer (sometimes way longer) to achieve an outcome,
    runtimes vary with each run and outputs can vary (this can somewhat be controlled
    by better prompts).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, for trivial, straightforward tasks like scraping a website and executing
    the given set of commands, a smaller LLM can be used like gpt-4o-mini or llama3.1–7b
    etc. However, for tasks like designing the network topology, a bigger LLM is required.
    Although here claude-3–5-sonnet was chosen but ideally a good 70b model should
    suffice. Finally, you have to be very diligent with prompts. They will make or
    break your use-case!
  prefs: []
  type: TYPE_NORMAL
