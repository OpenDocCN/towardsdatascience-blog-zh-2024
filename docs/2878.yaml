- en: AI Agents in Networking Industry
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络行业中的 AI 代理
- en: 原文：[https://towardsdatascience.com/ai-agents-in-networking-industry-f73a42fa22e1?source=collection_archive---------9-----------------------#2024-11-27](https://towardsdatascience.com/ai-agents-in-networking-industry-f73a42fa22e1?source=collection_archive---------9-----------------------#2024-11-27)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/ai-agents-in-networking-industry-f73a42fa22e1?source=collection_archive---------9-----------------------#2024-11-27](https://towardsdatascience.com/ai-agents-in-networking-industry-f73a42fa22e1?source=collection_archive---------9-----------------------#2024-11-27)
- en: AI Agents for deploying, configuring and monitoring Networks
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于部署、配置和监控网络的 AI 代理
- en: '[](https://medium.com/@mandeepkular?source=post_page---byline--f73a42fa22e1--------------------------------)[![Mandeep
    Kular](../Images/7569ebc1b25b979bfdf76abd4a39f154.png)](https://medium.com/@mandeepkular?source=post_page---byline--f73a42fa22e1--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f73a42fa22e1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f73a42fa22e1--------------------------------)
    [Mandeep Kular](https://medium.com/@mandeepkular?source=post_page---byline--f73a42fa22e1--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@mandeepkular?source=post_page---byline--f73a42fa22e1--------------------------------)[![Mandeep
    Kular](../Images/7569ebc1b25b979bfdf76abd4a39f154.png)](https://medium.com/@mandeepkular?source=post_page---byline--f73a42fa22e1--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f73a42fa22e1--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f73a42fa22e1--------------------------------)
    [Mandeep Kular](https://medium.com/@mandeepkular?source=post_page---byline--f73a42fa22e1--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f73a42fa22e1--------------------------------)
    ·11 min read·Nov 27, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f73a42fa22e1--------------------------------)
    ·阅读时间：11分钟·2024年11月27日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: AI agents have been all the rage in 2024 and rightfully so. Unlike traditional
    AI models or interactions with Large Language Models (LLMs) that provide responses
    based on static training data, AI agents are dynamic entities that can perceive,
    reason (due to prompting techniques), and act autonomously within their operational
    domains. Their ability to adapt and optimize processes makes them invaluable in
    fields requiring intricate decision-making and real-time responsiveness, such
    as network deployment, testing, monitoring and debugging. In the coming days we
    will see vast adoption of AI agents across all industries, especially networking
    industry.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: AI 代理在2024年成为热议话题，且实至名归。与传统的 AI 模型或与大型语言模型（LLMs）的交互不同，后者仅根据静态训练数据提供回应，AI 代理是动态的实体，能够感知、推理（得益于提示技术）并在其操作领域内自主行动。它们的适应性和优化过程的能力使它们在需要复杂决策和实时响应的领域中不可或缺，如网络部署、测试、监控和调试。在未来的日子里，我们将看到
    AI 代理在各行各业的广泛应用，尤其是在网络行业。
- en: '![](../Images/6f63370ec2c836b6f6516ee7697713c0.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6f63370ec2c836b6f6516ee7697713c0.png)'
- en: Agentic Workflow (Image by the author)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 代理工作流（图片由作者提供）
- en: Here I demonstrate network deployment, configuration and monitoring via AI agents.
    Overall this agentic workflow consists of 4 agents. First one is tasked to get
    the installation steps from [https://learn.srlinux.dev/get-started/lab/](https://learn.srlinux.dev/get-started/lab/)
    website. Second agent executes these steps. Third agent comes up with relevant
    node configs based on network topology and finally the last agent executes the
    configuration and verifies end to end connectivity.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我展示了通过 AI 代理进行网络部署、配置和监控的过程。整体代理工作流由 4 个代理组成。第一个代理负责从 [https://learn.srlinux.dev/get-started/lab/](https://learn.srlinux.dev/get-started/lab/)
    网站获取安装步骤。第二个代理执行这些步骤。第三个代理根据网络拓扑提供相关的节点配置，最后一个代理执行配置并验证端到端的连接性。
- en: '***For details on the code playbook, please check my github link:*** [***AI-Agents-For-Networking***](https://github.com/mkular/AI-Agents-For-Networking)***.***'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***有关代码手册的详细信息，请查看我的 GitHub 链接：*** [***AI-Agents-For-Networking***](https://github.com/mkular/AI-Agents-For-Networking)***.***'
- en: '**Deploying a network with CrewAI’s MAS (multi-agent system)**'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**使用 CrewAI 的 MAS（多代理系统）部署网络**'
- en: 'For this use-case, entire topology was deployed on a pre-built Debian 12 UTM
    VM (as a sandbox environment). This was deliberatly chosen as it comes with all
    relevant packages like containerlab and docker packages pre-installed. Containerlab
    helps spin up various container based networking topologies with ease. Following
    topology was chosen which consisted of linux containers and Nokia’s SR Linux containers:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个使用案例，整个拓扑部署在一个预先构建的 Debian 12 UTM 虚拟机上（作为沙盒环境）。选择它的原因是，它已经预装了所有相关的软件包，如
    containerlab 和 docker 包。Containerlab 帮助轻松启动各种基于容器的网络拓扑。选择了以下拓扑，包含 Linux 容器和诺基亚的
    SR Linux 容器：
- en: Client1 — — Leaf1 — — Spine1 — — Leaf2 — — Client2
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Client1 — — Leaf1 — — Spine1 — — Leaf2 — — Client2
- en: Where Client1 and Client2 are linux containers and Leaf1 and Leaf2 are IXR-D2L
    and Spine1 is IXR-D5 types of SR Linux containers.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 Client1 和 Client2 是 Linux 容器，Leaf1 和 Leaf2 是 IXR-D2L 类型，Spine1 是 IXR-D5 类型的
    SR Linux 容器。
- en: 'Following is the summarized workflow of each agent:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是每个代理的简要工作流：
- en: '**Document Specialist Agent**'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文档专家代理**'
- en: 'Goes over the given website url and extracts the installation steps, network
    topology deployment steps and finds node connection instructions. Following is
    the sample code to create agent, task and its custom tool:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它访问给定的网址，提取安装步骤、网络拓扑部署步骤，并查找节点连接指令。以下是创建代理、任务及其自定义工具的示例代码：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once run, following is an example output (Final Answer) from the agent:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 运行后，以下是该代理的示例输出（最终答案）：
- en: '[PRE1]bash'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]bash'
- en: Installation Steps
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装步骤
- en: curl -sL https://containerlab.dev/setup | sudo -E bash -s "all"
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: curl -sL https://containerlab.dev/setup | sudo -E bash -s "all"
- en: Topology Deployment Steps
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拓扑部署步骤
- en: sudo containerlab deploy -c -t https://github.com/srl-labs/srlinux-getting-started
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: sudo containerlab deploy -c -t https://github.com/srl-labs/srlinux-getting-started
- en: Node Connection Instructions
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 节点连接指令
- en: ssh leaf1
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: ssh leaf1
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As can be seen, it has clearly extracted the desired steps from the url. This
    is then passed on to the next agent.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，它已从网址中清晰地提取了所需的步骤。然后这些步骤被传递给下一个代理。
- en: '***Note: Adding code for all the agents will make this article lengthy. Kindly
    check my github repo for more details:*** [***AI-Agents-For-Networking***](https://github.com/mkular/AI-Agents-For-Networking)***.***'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***注意：为所有代理添加代码会使本文变得冗长。请查看我的 GitHub 仓库获取更多细节：*** [***AI-Agents-For-Networking***](https://github.com/mkular/AI-Agents-For-Networking)***.***'
- en: '**2\. Linux Configuration Agent**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**2. Linux 配置代理**'
- en: Executes the commands obtained from Document specialist agent. Its given the
    login details for UTM VM and instructed to execute the commands on that VM. It
    finishes by checking that all docker containers all running. It also checks the
    health of the VM before performing any containerlab/docker commands.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 执行从文档专家代理获取的命令。它获得了 UTM 虚拟机的登录详情，并指示在该虚拟机上执行命令。完成后，它会检查所有的 docker 容器是否都在运行。它还在执行任何
    containerlab/docker 命令之前检查虚拟机的健康状态。
- en: 'The output (Final Answer) from this agent clearly shows successful execution
    of VM health checks, containerlab and docker commands:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 该代理的输出（最终答案）清晰地显示了虚拟机健康检查、containerlab 和 docker 命令的成功执行：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Filesystem                   Size  Used Avail Use% Mounted on
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统                   大小  已用 可用 用% 挂载点
- en: udev                         5.9G     0  5.9G   0% /dev
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: udev                         5.9G     0  5.9G   0% /dev
- en: tmpfs                        1.2G  1.3M  1.2G   1% /run
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: tmpfs                        1.2G  1.3M  1.2G   1% /run
- en: /dev/mapper/debian--vg-root   61G  5.7G   52G  10% /
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: /dev/mapper/debian--vg-root   61G  5.7G   52G  10% /
- en: tmpfs                        5.9G     0  5.9G   0% /dev/shm
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: tmpfs                        5.9G     0  5.9G   0% /dev/shm
- en: tmpfs                        5.0M     0  5.0M   0% /run/lock
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: tmpfs                        5.0M     0  5.0M   0% /run/lock
- en: /dev/sda2                    456M   92M  340M  22% /boot
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: /dev/sda2                    456M   92M  340M  22% /boot
- en: /dev/sda1                    511M  5.9M  506M   2% /boot/efi
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: /dev/sda1                    511M  5.9M  506M   2% /boot/efi
- en: tmpfs                        1.2G     0  1.2G   0% /run/user/1000
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: tmpfs                        1.2G     0  1.2G   0% /run/user/1000
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
- en: root           1  0.0  0.1 168128 12792 ?        Ss   Nov25   1:28 /sbin/init
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: root           1  0.0  0.1 168128 12792 ?        Ss   Nov25   1:28 /sbin/init
- en: '...'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: debian    106849  0.0  0.0   8244  4992 pts/0    Ss+  Nov25   0:09 -bash
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: debian    106849  0.0  0.0   8244  4992 pts/0    Ss+  Nov25   0:09 -bash
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: PING 8.8.8.8 (8.8.8.8) 56(84) 字节的数据。
- en: '64 bytes from 8.8.8.8: icmp_seq=1 ttl=116 time=15.4 ms'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 64 字节来自 8.8.8.8：icmp_seq=1 ttl=116 时间=15.4 毫秒
- en: '...'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: '--- 8.8.8.8 ping statistics ---'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '--- 8.8.8.8 ping 统计 ---'
- en: 4 packets transmitted, 4 received, 0% packet loss, time 3012ms
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 4 个数据包传输，4 个接收，0% 丢包，时间 3012 毫秒
- en: rtt min/avg/max/mdev = 15.316/16.778/20.466/2.142 ms
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: rtt 最小/平均/最大/均方根 = 15.316/16.778/20.466/2.142 ms
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: +---+---------+--------------+------------------------------------+---------------+---------+----------------+----------------------+
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: +---+---------+--------------+------------------------------------+---------------+---------+----------------+----------------------+
- en: '| # |  Name   | Container ID |               Image                |     Kind      |  State  |  IPv4
    Address  |     IPv6 Address     |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| # |  名称   | 容器 ID |               镜像                |     类型      |  状态  |  IPv4
    地址  |     IPv6 地址     |'
- en: +---+---------+--------------+------------------------------------+---------------+---------+----------------+----------------------+
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: +---+---------+--------------+------------------------------------+---------------+---------+----------------+----------------------+
- en: '| 1 | client1 | ab894528a0e9 | ghcr.io/srl-labs/network-multitool | linux         |
    running | 172.20.20.4/24 | 3fff:172:20:20::4/64 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 1 | client1 | ab894528a0e9 | ghcr.io/srl-labs/network-multitool | linux         |
    运行中 | 172.20.20.4/24 | 3fff:172:20:20::4/64 |'
- en: '| 2 | client2 | 6f9f0822be5d | ghcr.io/srl-labs/network-multitool | linux         |
    running | 172.20.20.2/24 | 3fff:172:20:20::2/64 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 2 | client2 | 6f9f0822be5d | ghcr.io/srl-labs/network-multitool | linux         |
    运行中 | 172.20.20.2/24 | 3fff:172:20:20::2/64 |'
- en: '| 3 | leaf1   | e7a1a3874600 | ghcr.io/nokia/srlinux:24.7.2       | nokia_srlinux
    | running | 172.20.20.3/24 | 3fff:172:20:20::3/64 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 3 | leaf1   | e7a1a3874600 | ghcr.io/nokia/srlinux:24.7.2       | nokia_srlinux
    | 运行中 | 172.20.20.3/24 | 3fff:172:20:20::3/64 |'
- en: '| 4 | leaf2   | ed4399b8f7d6 | ghcr.io/nokia/srlinux:24.7.2       | nokia_srlinux
    | running | 172.20.20.5/24 | 3fff:172:20:20::5/64 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 4 | leaf2   | ed4399b8f7d6 | ghcr.io/nokia/srlinux:24.7.2       | nokia_srlinux
    | 运行中 | 172.20.20.5/24 | 3fff:172:20:20::5/64 |'
- en: '| 5 | spine1  | ada601805590 | ghcr.io/nokia/srlinux:24.7.2       | nokia_srlinux
    | running | 172.20.20.6/24 | 3fff:172:20:20::6/64 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 5 | spine1  | ada601805590 | ghcr.io/nokia/srlinux:24.7.2       | nokia_srlinux
    | 运行中 | 172.20.20.6/24 | 3fff:172:20:20::6/64 |'
- en: +---+---------+--------------+------------------------------------+---------------+---------+----------------+----------------------+
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: +---+---------+--------------+------------------------------------+---------------+---------+----------------+----------------------+
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: CONTAINER ID   IMAGE                                COMMAND                  CREATED         STATUS         PORTS                                          NAMES
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 容器 ID   镜像                                命令                  创建时间         状态         端口                                          名称
- en: ada601805590   ghcr.io/nokia/srlinux:24.7.2         "/tini -- fixuid -q …"   4
    minutes ago   Up 4 minutes                                                  spine1
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ada601805590   ghcr.io/nokia/srlinux:24.7.2         "/tini -- fixuid -q …"   4分钟前   运行中
    4 分钟                                                spine1
- en: 6f9f0822be5d   ghcr.io/srl-labs/network-multitool   "/bin/sh /docker/ent…"   4
    minutes ago   Up 4 minutes   22/tcp, 80/tcp, 443/tcp, 1180/tcp, 11443/tcp   client2
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 6f9f0822be5d   ghcr.io/srl-labs/network-multitool   "/bin/sh /docker/ent…"   4分钟前   运行中
    4 分钟   22/tcp, 80/tcp, 443/tcp, 1180/tcp, 11443/tcp   client2
- en: e7a1a3874600   ghcr.io/nokia/srl-labs/network-multitool   "/bin/sh /docker/ent…"   4
    minutes ago   Up 4 minutes                                                  leaf1
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: e7a1a3874600   ghcr.io/nokia/srl-labs/network-multitool   "/bin/sh /docker/ent…"   4分钟前   运行中
    4 分钟                                                leaf1
- en: ab894528a0e9   ghcr.io/nokia/srl-labs/network-multitool   "/bin/sh /docker/ent…"   4
    minutes ago   Up 4 minutes                                                  client1
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: ab894528a0e9   ghcr.io/nokia/srl-labs/network-multitool   "/bin/sh /docker/ent…"   4分钟前   运行中
    4 分钟                                                client1
- en: ed4399b8f7d6   ghcr.io/nokia/srlinux:24.7.2         "/tini -- fixuid -q …"   4
    minutes ago   Up 4 minutes                                                  leaf2
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: ed4399b8f7d6   ghcr.io/nokia/srlinux:24.7.2         "/tini -- fixuid -q …"   4分钟前   运行中
    4 分钟                                                leaf2
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**3\. Network Configuration Specialist Agent**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 网络配置专家代理**'
- en: The job of this agent is to understand the topology i.e. the number of nodes
    and their connectivity. It then needs to come up with ip allocation scheme, generate
    relevant interface and routing configuration of linux containers and SR Linux
    containers alongwith adhering to the ip allocation scheme.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代理的任务是理解拓扑结构，即节点数量及其连接性。然后，它需要提出 IP 分配方案，并生成 Linux 容器和 SR Linux 容器的相关接口和路由配置，同时遵守
    IP 分配方案。
- en: For SR Linux configuration an example config was given in the prompt. This example
    config could have also been obtained from a configuration guide in pdf format
    which would have been RAGed by the agent (given the right tools).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 SR Linux 配置，提示中给出了一个示例配置。这个示例配置也可以通过代理从 PDF 格式的配置指南中获取（前提是有合适的工具）。
- en: 'In the output of this agent below, it can clearly be seen that it has succesfully
    come up with ip allocation based on the topology, the relevant configurations
    and routes:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面这个代理的输出中，可以清楚地看到，它已经成功根据拓扑结构、相关配置和路由来分配了 IP 地址：
- en: '[PRE9]bash'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE9]bash'
- en: /sbin/ip address add 10.1.1.2/24 dev eth1
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: /sbin/ip address add 10.1.1.2/24 dev eth1
- en: /sbin/ip route add 10.1.4.2/32 via 10.1.1.1
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: /sbin/ip route add 10.1.4.2/32 via 10.1.1.1
- en: '[PRE10]bash'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE10]bash'
- en: enter candidate private
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 进入候选私人模式
- en: configure data interfaces
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置数据接口
- en: set / interface ethernet-1/1 admin-state enable
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/1 管理状态启用
- en: set / interface ethernet-1/1 subinterface 0 admin-state enable
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/1 subinterface 0 管理状态启用
- en: set / interface ethernet-1/1 subinterface 0 ipv4 address 10.1.1.1/24
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/1 subinterface 0 ipv4 地址 10.1.1.1/24
- en: set / interface ethernet-1/1 subinterface 0 ipv4 admin-state enable
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/1 subinterface 0 ipv4 管理状态启用
- en: set / interface ethernet-1/49 admin-state enable
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/49 管理状态启用
- en: set / interface ethernet-1/49 subinterface 0 admin-state enable
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/49 subinterface 0 管理状态启用
- en: set / interface ethernet-1/49 subinterface 0 ipv4 address 10.1.2.1/24
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/49 subinterface 0 ipv4 地址 10.1.2.1/24
- en: set / interface ethernet-1/49 subinterface 0 ipv4 admin-state enable
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/49 subinterface 0 ipv4 管理状态启用
- en: add interfaces to default namespace
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将接口添加到默认命名空间
- en: set / network-instance default interface ethernet-1/1.0
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default interface ethernet-1/1.0
- en: set / network-instance default interface ethernet-1/49.0
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default interface ethernet-1/49.0
- en: configure BGP
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 BGP
- en: set / network-instance default protocols bgp admin-state enable
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp 管理状态启用
- en: set / network-instance default protocols bgp router-id 1.1.1.1
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp 路由器 ID 1.1.1.1
- en: set / network-instance default protocols bgp autonomous-system 65001
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp 自治系统 65001
- en: set / network-instance default protocols bgp afi-safi ipv4-unicast admin-state
    enable
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp afi-safi ipv4-unicast 管理状态启用
- en: set / network-instance default protocols bgp group ebgp admin-state enable
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp group ebgp 管理状态启用
- en: set / network-instance default protocols bgp group ebgp export-policy [ export-all
    ]
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp group ebgp 导出策略 [ export-all ]
- en: set / network-instance default protocols bgp group ebgp import-policy [ export-all
    ]
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp group ebgp 导入策略 [ export-all ]
- en: set / network-instance default protocols bgp neighbor 10.1.2.2 admin-state enable
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp neighbor 10.1.2.2 管理状态启用
- en: set / network-instance default protocols bgp neighbor 10.1.2.2 peer-group ebgp
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp neighbor 10.1.2.2 对等组 ebgp
- en: set / network-instance default protocols bgp neighbor 10.1.2.2 peer-as 65002
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp neighbor 10.1.2.2 对等 AS 65002
- en: create policy
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建策略
- en: set / routing-policy policy export-all default-action policy-result accept
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / 路由策略 策略 export-all 默认操作 策略结果 接受
- en: commit now
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 提交现在
- en: '[PRE11]bash'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE11]bash'
- en: enter candidate private
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 进入候选私人模式
- en: configure data interfaces
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置数据接口
- en: set / interface ethernet-1/1 admin-state enable
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/1 管理状态启用
- en: set / interface ethernet-1/1 subinterface 0 admin-state enable
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/1 subinterface 0 管理状态启用
- en: set / interface ethernet-1/1 subinterface 0 ipv4 address 10.1.2.2/24
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/1 subinterface 0 ipv4 地址 10.1.2.2/24
- en: set / interface ethernet-1/1 subinterface 0 ipv4 admin-state enable
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/1 subinterface 0 ipv4 管理状态启用
- en: set / interface ethernet-1/2 admin-state enable
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/2 管理状态启用
- en: set / interface ethernet-1/2 subinterface 0 admin-state enable
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/2 subinterface 0 管理状态启用
- en: set / interface ethernet-1/2 subinterface 0 ipv4 address 10.1.3.1/24
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/2 subinterface 0 ipv4 地址 10.1.3.1/24
- en: set / interface ethernet-1/2 subinterface 0 ipv4 admin-state enable
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / interface ethernet-1/2 subinterface 0 ipv4 管理状态启用
- en: add interfaces to default namespace
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将接口添加到默认命名空间
- en: set / network-instance default interface ethernet-1/1.0
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default interface ethernet-1/1.0
- en: set / network-instance default interface ethernet-1/2.0
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default interface ethernet-1/2.0
- en: configure BGP
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 BGP
- en: set / network-instance default protocols bgp admin-state enable
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp 管理状态启用
- en: set / network-instance default protocols bgp router-id 2.2.2.2
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp 路由器 ID 2.2.2.2
- en: set / network-instance default protocols bgp autonomous-system 65002
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp 自治系统 65002
- en: set / network-instance default protocols bgp afi-safi ipv4-unicast admin-state
    enable
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp afi-safi ipv4-unicast 管理状态启用
- en: set / network-instance default protocols bgp group ebgp admin-state enable
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp group ebgp 管理状态启用
- en: set / network-instance default protocols bgp group ebgp export-policy [ export-all
    ]
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp group ebgp 导出策略 [ export-all ]
- en: set / network-instance default protocols bgp group ebgp import-policy [ export-all
    ]
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 / network-instance default protocols bgp group ebgp 导入策略 [ export-all ]
- en: set / network-instance default protocols bgp neighbor 10.1.2.1 admin-state enable
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp neighbor 10.1.2.1 admin-state enable
- en: set / network-instance default protocols bgp neighbor 10.1.2.1 peer-group ebgp
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp neighbor 10.1.2.1 peer-group ebgp
- en: set / network-instance default protocols bgp neighbor 10.1.2.1 peer-as 65001
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp neighbor 10.1.2.1 peer-as 65001
- en: set / network-instance default protocols bgp neighbor 10.1.3.2 admin-state enable
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp neighbor 10.1.3.2 admin-state enable
- en: set / network-instance default protocols bgp neighbor 10.1.3.2 peer-group ebgp
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp neighbor 10.1.3.2 peer-group ebgp
- en: set / network-instance default protocols bgp neighbor 10.1.3.2 peer-as 65003
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp neighbor 10.1.3.2 peer-as 65003
- en: create policy
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建策略
- en: set / routing-policy policy export-all default-action policy-result accept
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: set / routing-policy policy export-all default-action policy-result accept
- en: commit now
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 立即提交
- en: '[PRE12]bash'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE12]bash'
- en: enter candidate private
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 进入候选私有配置
- en: configure data interfaces
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置数据接口
- en: set / interface ethernet-1/1 admin-state enable
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: set / interface ethernet-1/1 admin-state enable
- en: set / interface ethernet-1/1 subinterface 0 admin-state enable
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: set / interface ethernet-1/1 subinterface 0 admin-state enable
- en: set / interface ethernet-1/1 subinterface 0 ipv4 address 10.1.4.1/24
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: set / interface ethernet-1/1 subinterface 0 ipv4 address 10.1.4.1/24
- en: set / interface ethernet-1/1 subinterface 0 ipv4 admin-state enable
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: set / interface ethernet-1/1 subinterface 0 ipv4 admin-state enable
- en: set / interface ethernet-1/49 admin-state enable
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: set / interface ethernet-1/49 admin-state enable
- en: set / interface ethernet-1/49 subinterface 0 admin-state enable
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: set / interface ethernet-1/49 subinterface 0 admin-state enable
- en: set / interface ethernet-1/49 subinterface 0 ipv4 address 10.1.3.2/24
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: set / interface ethernet-1/49 subinterface 0 ipv4 address 10.1.3.2/24
- en: set / interface ethernet-1/49 subinterface 0 ipv4 admin-state enable
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: set / interface ethernet-1/49 subinterface 0 ipv4 admin-state enable
- en: add interfaces to default namespace
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将接口添加到默认命名空间
- en: set / network-instance default interface ethernet-1/1.0
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default interface ethernet-1/1.0
- en: set / network-instance default interface ethernet-1/49.0
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default interface ethernet-1/49.0
- en: configure BGP
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 BGP
- en: set / network-instance default protocols bgp admin-state enable
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp admin-state enable
- en: set / network-instance default protocols bgp router-id 3.3.3.3
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp router-id 3.3.3.3
- en: set / network-instance default protocols bgp autonomous-system 65003
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp autonomous-system 65003
- en: set / network-instance default protocols bgp afi-safi ipv4-unicast admin-state
    enable
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp afi-safi ipv4-unicast admin-state
    enable
- en: set / network-instance default protocols bgp group ebgp admin-state enable
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp group ebgp admin-state enable
- en: set / network-instance default protocols bgp group ebgp export-policy [ export-all
    ]
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp group ebgp export-policy [ export-all
    ]
- en: set / network-instance default protocols bgp group ebgp import-policy [ export-all
    ]
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp group ebgp import-policy [ export-all
    ]
- en: set / network-instance default protocols bgp neighbor 10.1.3.1 admin-state enable
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp neighbor 10.1.3.1 admin-state enable
- en: set / network-instance default protocols bgp neighbor 10.1.3.1 peer-group ebgp
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp neighbor 10.1.3.1 peer-group ebgp
- en: set / network-instance default protocols bgp neighbor 10.1.3.1 peer-as 65002
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: set / network-instance default protocols bgp neighbor 10.1.3.1 peer-as 65002
- en: create policy
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建策略
- en: set / routing-policy policy export-all default-action policy-result accept
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: set / routing-policy policy export-all default-action policy-result accept
- en: commit now
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 立即提交
- en: '[PRE13]bash'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE13]bash'
- en: /sbin/ip address add 10.1.4.2/24 dev eth1
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: /sbin/ip address add 10.1.4.2/24 dev eth1
- en: /sbin/ip route add 10.1.1.2/32 via 10.1.4.1
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: /sbin/ip route add 10.1.1.2/32 via 10.1.4.1
- en: '[PRE14]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**4\. Senior Network Administrator Agent**'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. 高级网络管理员代理**'
- en: This agent gets the configuration generated and applies it to all the nodes,
    checks for bgp peering to come up and then finally executes ping from end to end
    verifying connectivity. Here the agent gets to the right show command just by
    inferring from the configuration commands.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 该代理获取生成的配置并将其应用到所有节点，检查 BGP 对等连接是否建立，然后最终执行端到端的 ping 测试以验证连接性。此时，代理仅通过推测配置命令就能得到正确的显示命令。
- en: 'Following is the Final Answer from this agent obtained after successful configuration
    and of the network topology and checking end to end connectivity:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此代理在成功配置网络拓扑并检查端到端连接后获得的最终答案：
- en: '[PRE15]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: PING 10.1.4.2 (10.1.4.2) 56(84) bytes of data.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: PING 10.1.4.2 (10.1.4.2) 56(84) 字节数据。
- en: '64 bytes from 10.1.4.2: icmp_seq=1 ttl=61 time=128 ms'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 从 10.1.4.2 收到 64 字节：icmp_seq=1 ttl=61 time=128 ms
- en: '64 bytes from 10.1.4.2: icmp_seq=2 ttl=61 time=8.16 ms'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 从 10.1.4.2 收到 64 字节：icmp_seq=2 ttl=61 time=8.16 ms
- en: '64 bytes from 10.1.4.2: icmp_seq=3 ttl=61 time=4.49 ms'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 从 10.1.4.2 收到 64 字节：icmp_seq=3 ttl=61 time=4.49 ms
- en: '64 bytes from 10.1.4.2: icmp_seq=4 ttl=61 time=5.86 ms'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 64字节来自10.1.4.2：icmp_seq=4 ttl=61 time=5.86 ms
- en: '--- 10.1.4.2 ping statistics ---'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '--- 10.1.4.2 ping统计 ---'
- en: 4 packets transmitted, 4 received, 0% packet loss, time 3005ms
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 传输4个数据包，接收4个，丢包率0%，时间3005ms
- en: rtt min/avg/max/mdev = 4.491/36.620/127.973/52.758 ms
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: rtt min/avg/max/mdev = 4.491/36.620/127.973/52.758 ms
- en: '[PRE16]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Conclusion**'
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: AI agents go above and beyond automation. They can reason and try to come up
    with alternatives. A simple example can be if a linux command fails due to permission
    issue and the agent has access to sudo password, next time it will try with a
    sudo password to succeed. A complex example can be incase the bgp peering is not
    up, then based on the prompt instructions they can try to find why and even go
    about fixing it.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: AI代理超越了自动化的范畴。它们可以推理并尝试提出替代方案。一个简单的例子是，如果一个Linux命令因权限问题失败，而代理有sudo密码的访问权限，那么下次它将尝试使用sudo密码以便成功。一个复杂的例子是，如果BGP对等连接没有建立，根据提示指令，它们可以尝试找出原因，甚至进行修复。
- en: Agentic workflows have its challenges and they require different way of thinking
    compared to programmatic approaches. So far the downsides that I have encountered
    include that it can take longer (sometimes way longer) to achieve an outcome,
    runtimes vary with each run and outputs can vary (this can somewhat be controlled
    by better prompts).
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 代理工作流有其挑战，需要与程序化方法不同的思维方式。到目前为止，我遇到的缺点包括，可能需要更长时间（有时要长得多）才能实现结果，运行时每次都不同，输出也会有所变化（这可以通过更好的提示词进行某种程度的控制）。
- en: Finally, for trivial, straightforward tasks like scraping a website and executing
    the given set of commands, a smaller LLM can be used like gpt-4o-mini or llama3.1–7b
    etc. However, for tasks like designing the network topology, a bigger LLM is required.
    Although here claude-3–5-sonnet was chosen but ideally a good 70b model should
    suffice. Finally, you have to be very diligent with prompts. They will make or
    break your use-case!
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，对于一些琐碎、直接的任务，比如抓取网站并执行给定的命令，可以使用较小的LLM，如gpt-4o-mini或llama3.1–7b等。然而，对于设计网络拓扑这样的任务，则需要更大的LLM。虽然这里选择了claude-3–5-sonnet，但理想情况下，一个好的70b模型应该足够。最后，你必须非常谨慎地使用提示词。它们可能决定你的用例成败！
