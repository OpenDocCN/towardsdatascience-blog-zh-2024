["```py\nwith test_parameters as(\n    select \n        0.08 as baseline_rate,       -- assuming current rate of 8% of payment rate\n        10 as min_detectable_effect, -- wanting 10% improvement\n        95 as significance_level,    -- 95% confidence level\n        80 as statistical_power,     -- 80% statistical power\n        'TWO' as tail_type,          -- 'ONE' or 'TWO' for tail type test \n        &volume as monthly_volume    -- dynamic query to pull volume data can be used \n        -- example: (select count(*) from accounts where assign_date>=add_months(sysdate,-1) ) \n    from dual\n    )\n\n   select * from test_parameters;\n```", "```py\n--statistical parameter conversion\n    ,statistical_parameters as(\n    select\n        baseline_rate,\n        min_detectable_effect,\n        monthly_volume,\n        tail_type,\n\n    --set confidence level z-score based on tail type\n        case when tail_type='ONE' then \n         case significance_level \n              when 90 then 1.28 -- One tailed test for 90% confidence\n              when 95 then 1.645 -- One tailed test for 95% confidence\n              when 99 then 2.326 -- One tailed test for 99% confidence\n              else 1.645 end \n         else\n             case significance_level \n              when 90 then 1.645 -- Two tailed test for 90% confidence\n              when 95 then 1.96 -- Two tailed test for 95% confidence\n              when 99 then 2.576 -- Two tailed test for 99% confidence\n              else 1.96 end end as z_alpha,\n\n    --set power level z-score (same for both tail types)\n        case statistical_power\n            when 80 then 0.84\n            when 90 then 1.28\n            when 95 then 1.645\n            else 0.84 end as z_beta\n    from test_parameters\n    )\n\n    select * from statistical_parameters;\n```", "```py\n--Sample size calculation\n    ,sample_size_calculation as(\n    select \n        baseline_rate,\n        min_detectable_effect,\n        monthly_volume,\n        tail_type,\n        z_alpha,\n        z_beta,\n\n    --calculate minimum effect size\n        baseline_rate*(min_detectable_effect/100) as minimum_effect,\n\n    --calculate base sample size\n        ceil(\n             case tail_type \n                  when 'ONE' then\n                       ( power(z_alpha + z_beta, 2) * baseline_Rate * (1 - baseline_Rate)) / (power(baseline_Rate * (min_detectable_effect/100), 2))\n                  else\n                       (2 * power(z_alpha + z_beta, 2) * baseline_Rate * (1 - baseline_Rate)) / (power(baseline_Rate * (min_detectable_effect/100), 2)) \n                  end\n             ) as required_sample_size     \n    from statistical_parameters\n    )\n```", "```py\n --split ratio\n    ,split_ratios as(\n    --generate split ratios from 10 to 50 for challenger\n    Select  \n        level * 10 as challenger_pct,\n        100 - (level * 10) as control_pct\n    from dual\n    connect by level <= 5 -- This generates 10/90, 20/80, 30/70, 40/60, 50/50\n    )\n\n    --split_analysis\n    ,split_analysis as(\n    select \n        s.baseline_Rate * 100 as current_rate_pct,\n        s.baseline_rate * (1 + s.min_detectable_effect/100) * 100 as target_rate_pct,\n        s.min_detectable_effect as improvement_pct,\n        s.tail_type,\n        s.required_sample_size as sample_size_per_group,\n        s.required_sample_size * 2 as total_sample_needed,\n        s.monthly_volume,\n        r.challenger_pct,\n        r.control_pct,\n\n    --calculate test duration (months) for different splits\n        round(s.required_sample_size / (s.monthly_volume * (r.challenger_pct/100)), 1) as months_needed,\n\n    --calculate test days needed for each split\n        round(s.required_sample_size / (s.monthly_volume * (r.challenger_pct/100)) * 30, 0) as days_needed,\n\n     --Assess risk level for each split\n        case \n            when r.challenger_pct <= 20 then 'Conservative'\n            when r.challenger_pct <= 35 then 'Balanced'\n            else 'Aggressive' end as risk_level\n    from sample_size_calculation s cross join split_ratios r\n    )\n\n    select * from split_analysis;\n```", "```py\n,risk_Assessment as(\n        select \n            monthly_volume,\n            sample_size_per_group,\n            challenger_pct,\n            risk_level,\n        --assess potential impact\n    round(monthly_volume * (challenger_pct/100) * (current_rate_pct/100)) as accounts_at_risk,\n    round(monthly_volume * (challenger_pct/100) * (current_rate_pct/100) * (1 - (improvement_pct/100))) as worst_case_scenario\n        from split_analysis\n    )\n\n    ,volume_recommendations as(\n        select distinct \n            sample_size_per_group,\n            --recommende monthly volumes for different completion timeframes for all splits\n            ceil(sample_size_per_group / 0.5) as volume_for_1_month_50_50, --50/50 split\n            ceil(sample_size_per_group / 0.4) as volume_for_1_month_40_60, --40/60 split\n            ceil(sample_size_per_group / 0.3) as volume_for_1_month_30_70, --30/70 split\n            ceil(sample_size_per_group / 0.2) as volume_for_1_month_20_80, --20/80 split\n            ceil(sample_size_per_group / 0.1) as volume_for_1_month_10_90  --10/90 split\n        from split_analysis\n        )\n```", "```py\n,final_Recommendation as(\n    select\n        sa.*,\n        ra.accounts_At_Risk,\n        ra.worst_case_scenario,\n        vr.volume_for_1_month_50_50,\n        vr.volume_for_1_month_40_60,\n        vr.volume_for_1_month_30_70,\n        vr.volume_for_1_month_20_80,\n        vr.volume_for_1_month_10_90,\n        --Generate final recommendations based on all split ratios\n    case when sa.monthly_volume >= vr.volume_for_1_month_50_50 and sa.challenger_pct = 50 \n         then 'AGGRESSIVE: 50/50 split possible. Fastest completion in ' || sa.days_needed || ' days but highest risk ' \n         when sa.monthly_volume >= vr.volume_for_1_month_40_60 and sa.challenger_pct = 40 \n         then 'MODERATELY AGGRESSIVE: 40/60 split feasible. Completes in ' || sa.days_needed || ' days with moderate-high risk.'\n         when sa.monthly_volume >= vr.volume_for_1_month_30_70 and sa.challenger_pct = 30 \n         then 'BALANCED: 30/70 split recommended. Completes in ' || sa.days_needed || ' days with balanced risk.'\n         when sa.monthly_volume >= vr.volume_for_1_month_20_80 and sa.challenger_pct = 20 \n         then 'CONSERVATIVE: 20/80 split possible. Takes ' || sa.days_needed || ' days with lower risk.'\n         when sa.monthly_volume >= vr.volume_for_1_month_10_90 and sa.challenger_pct = 10 \n         then 'BALANCED: 10/90 split possible. Takes ' || sa.days_needed || ' days but minimizes risk.'\n         else 'NOT RECOMMENDED: Current volume of ' || sa.monthly_volume || ' insufficient for reliable testing with ' \n              || sa.challenger_pct || '/' ||  sa.control_pct || ' split.' end as recommendation\n    from split_analysis sa join risk_assessment ra on sa.challenger_pct=ra.challenger_pct\n        cross join volume_recommendations vr \n        )\n```", "```py\nselect      \n        tail_type as test_type,\n        current_rate_pct || '%' as current_rate,\n        target_rate_pct || '%' as target_rate,\n        improvement_pct || '%' as improvement,\n        sample_size_per_group as needed_per_group,\n        total_sample_needed as total_needed,\n        monthly_volume,\n        challenger_pct || '/' || control_pct || ' split' as split_ratio,\n        days_needed || ' days (' || round(months_needed, 1) || ' months)' as duration,\n        risk_level,\n        accounts_At_Risk || ' accounts at risk' as risk_exposure,\n        worst_Case_Scenario || ' worst case' as risk_scenario,\n            case\n                when challenger_pct = 10 then\n                    case    \n                        when monthly_volume >= volume_for_1_month_10_90 \n                        then 'Current volume (' || monthly_volume || ') sufficient for 10/90 split'\n                        else 'Need ' || volume_for_1_month_10_90 \n                        || ' monthly accounts for 10/90 split (current: ' || monthly_volume || ')'\n                    end\n                when challenger_pct = 20 then\n                    case    \n                        when monthly_volume >= volume_for_1_month_20_80 \n                        then 'Current volume (' || monthly_volume || ') sufficient for 20/80 split'\n                        else 'Need ' || volume_for_1_month_20_80 \n                        || ' monthly accounts for 20/80 split (current: ' || monthly_volume || ')'\n                    end\n                 when challenger_pct = 30 then\n                    case    \n                        when monthly_volume >= volume_for_1_month_30_70 \n                        then 'Current volume (' || monthly_volume || ') sufficient for 30/70 split'\n                        else 'Need ' || volume_for_1_month_30_70 \n                        || ' monthly accounts for 30/70 split (current: ' || monthly_volume || ')'\n                    end\n                 when challenger_pct = 40 then\n                    case    \n                        when monthly_volume >= volume_for_1_month_40_60 \n                        then 'Current volume (' || monthly_volume || ') sufficient for 40/60 split'\n                        else 'Need ' || volume_for_1_month_40_60 \n                        || ' monthly accounts for 40/60 split (current: ' || monthly_volume || ')'\n                    end\n                else\n                    case    \n                        when monthly_volume >= volume_for_1_month_50_50 \n                        then 'Current volume (' || monthly_volume || ') sufficient for 50/50 split'\n                        else 'Need ' || volume_for_1_month_50_50 \n                        || ' monthly accounts for 50/50 split (current: ' || monthly_volume || ')'\n                    end\n                end as volume_assessment,\n            recommendation\n        from final_Recommendation\n        order by challenger_pct;\n```"]