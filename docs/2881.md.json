["```py\npath_file <- \"D:/folder1/folder2/folder3/folder_with_datasets/\"\nget_names_labels(path_file)\n```", "```py\n# Say you want these two variables\nvariables_needed <- c('ID', 'VAR1_A')\nnames_labels <- names_labels[which(names_labels$variable_name %in% variables_needed), ]\n```", "```py\nnames_labels <- names_labels %>%\n  group_by(file_name) %>%\n  mutate(count = n()) %>%\n  filter(count >= 2)\n```", "```py\nunique(names_labels$file_name) # Sanity check, that there is only one dataframe\nread_and_select(unique(names_labels$file_name)[1])\n```", "```py\nlength(unique(names_labels$file_name))\nnames_labels$file_name <- str_extract(names_labels$file_name, \"[^.]+\")\nrm(list = setdiff(ls(), c(unique(names_labels$file_name))))\n```", "```py\n# Get a list with the names of the dataframes in the environment (“ABC” and “DEF”)\nobject_names <- ls() \n\n# Get a list with the actual dataframe\nobject_list <- mget(object_names)\n\n# Reduce the dataframes in the list (“ABC” and “DEF”) by merging conditional on the unique identifier (“ID”)\ndf <- Reduce(function(x, y) merge(x, y, by = \"ID\", all = TRUE), object_list)\n\n# Clean your environment to keep only the dataframes (“ABC” and “DEF”) and a new dataframe “df” which will contain all the variables you needed.\nrm(object_list, object_names)\n```", "```py\n# You can load the functions as\nsource('D:/Folder1/Folder2/Folder3/_Functions.R')\n```", "```py\nlibrary(haven)\nlibrary(tidyverse)\nlibrary(stringr)\n\n## STEPS TO USE THESE FUNCTIONS:\n## 1\\. DEFINE THE OBJECT 'PATH_FILE', WHICH IS A PATH TO THE DIRECTORY WHERE\n##    ALL THE DATASETS ARE STORED.\n## 2\\. APPLY THE FUNCTION 'get_names_labels' WITH THE PATH. THE FUNCTION WILL \n##    RETURN A DATAFRAME NAMES 'names_labels'. \n## 3\\. THE FUNCTION WILL RETURN A DATASET ('names_labels) SHOWING THE NAMES OF \n##    THE VARIABLES, THE LABELS, AND THE DATASET. VISUALLY/MANUALLY EXPLORE THE \n##    DATASET TO SELECT THE VARIABLES WE NEED. CREATE A VECTOR WITH THE NAMES \n##    OF THE VARIABLES WE NEED, AND NAME THIS VECTOR 'variables_needed'.\n## 4\\. FROM THE DATASET 'names_labels', KEEP ONLY THE ROWS WITH THE VARIABLES WE\n##    WILL USE (STORED IN THE VECTOR 'variables_needed').\n## 5\\. APPLY THE FUNCTION 'read_and_select' TO EACH OF THE DATASETS WITH RELEVANT \n##    VARIABLES. THIS FUNCTION WILL ONLY NEED THE NAME OF THE DATASET, WHICH IS\n##    STORED IN THE LAST COLUMN OF DATASET 'names_labels'.\n\n### FUNCTION TO 1) READ ALL DATASETS IN A FOLDER; 2) EXTRACT NAMES AND LABELS;\n### 3) PUT NAMES AND LABELS IN A DATASET; AND 4) RETURN THE DATASET. THE ONLY\n### INPUT NEEDED IS A PATH TO A DIRECTORY WHERE ALL THE DATASETS ARE STORED.\n\nget_names_labels <- function(path_file){\n  results_df <- list()\n\n  sas_files <- c(\n    list.files(path = path_file, pattern = \"\\\\.sas7bdat$\")\n  )\n\n  for (i in 1:length(sas_files)) {\n    print(sas_files[i])\n\n    # Read the SAS file\n    sas_data <- read_sas(paste0(path_file, sas_files[i]))\n    sas_data <- as.data.frame(sas_data)\n\n    # Get the variable names and labels\n    var_names <- names(sas_data)\n    labels <- sas_data %>% \n      map(~attributes(.)$label) %>%\n      map_chr(~ifelse(is.null(.), NA, .))\n\n    # Combine the variable names and labels into a data frame\n    var_df <- data.frame(\n      variable_name = var_names,\n      variable_label = labels,\n      file_name = sas_files[i],\n      stringsAsFactors = FALSE\n    )\n\n    # Append the results to the overall data frame\n    results_df[[i]] <- var_df\n  }\n\n  results_df <- do.call(rbind, results_df)\n\n  #return(results_df)\n  assign('names_labels', results_df, envir = .GlobalEnv)\n\n}\n\n################################################################################\n\n### FUNCTION TO READ EACH DATASET AND KEEP ONLY THE VARIABLES WE SELECTED; THE\n### FUNCTION WILL SAVE EACH DATASET IN THE ENVIRONMENT. THE ONLY INPUNT IS THE\n### NAME OF THE DATASET.\n\nread_and_select <- function(df_file){\n\n  df_tmp <- read_sas(paste0(path_file, df_file))\n\n  df_tmp <- df_tmp %>%\n    select(unique(names_labels[which(names_labels$file_name == df_file), ]$variable_name)) %>%\n    as.data.frame()\n\n  assign(str_extract(df_file, \"[^.]+\"), df_tmp,envir = .GlobalEnv)\n\n}\n\n################################################################################\n```"]