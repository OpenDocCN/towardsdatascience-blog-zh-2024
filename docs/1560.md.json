["```py\npip install tensorflow-data-validation\n```", "```py\nimport tensorflow_data_validation as tfdv\nimport tensorflow as tf\n\nTRAIN_DATA = '/data/titanic_train.csv'\nTEST_DATA = '/data/titanic_test.csv'\nANOMALOUS_DATA = '/data/titanic_test_anomalies.csv'\n```", "```py\n# Generate statistics for training data\ntrain_stats=tfdv.generate_statistics_from_csv(TRAIN_DATA)\ntfdv.visualize_statistics(train_stats)\n```", "```py\nschema=tfdv.infer_schema(statistics=train_stats)\ntfdv.display_schema(schema=schema)\n```", "```py\n# Generate statistics for evaluation data\n\neval_stats=tfdv.generate_statistics_from_csv(ANOMALOUS_DATA)\n\ntfdv.visualize_statistics(lhs_statistics = train_stats, rhs_statistics = eval_stats,\n                          lhs_name = \"Training Data\", rhs_name = \"Evaluation Data\")\n```", "```py\n# Identifying Anomalies\nanomalies=tfdv.validate_statistics(statistics=eval_stats, schema=schema)\ntfdv.display_anomalies(anomalies)\n```", "```py\n# Adding a new value for 'Destination'\ndestination_domain=tfdv.get_domain(schema, 'Destination')\ndestination_domain.value.append('Anomaly')\n\nanomalies=tfdv.validate_statistics(statistics=eval_stats, schema=schema)\ntfdv.display_anomalies(anomalies)\n```", "```py\n# Adding data in CAPS to domain for VIP and CryoSleep\n\nvip_domain=tfdv.get_domain(schema, 'VIP')\nvip_domain.value.extend(['TRUE','FALSE'])\n\n# Setting domain of one feature to another\ntfdv.set_domain(schema, 'CryoSleep', vip_domain)\n\nanomalies=tfdv.validate_statistics(statistics=eval_stats, schema=schema)\ntfdv.display_anomalies(anomalies)\n```", "```py\n# INT can be safely converted to FLOAT. So we can safely ignore it and ask TFDV to use schema\n\noptions = tfdv.StatsOptions(schema=schema, infer_type_from_schema=True)\neval_stats=tfdv.generate_statistics_from_csv(ANOMALOUS_DATA, stats_options=options)\n\nanomalies=tfdv.validate_statistics(statistics=eval_stats, schema=schema)\ntfdv.display_anomalies(anomalies)\n```", "```py\n# Transported is the class label and will not be available in Evaluation data.\n# To indicate that we set two environments; Training and Serving\n\nschema.default_environment.append('Training')\nschema.default_environment.append('Serving')\n\ntfdv.get_feature(schema, 'Transported').not_in_environment.append('Serving')\n\nserving_anomalies_with_environment=tfdv.validate_statistics(\n    statistics=eval_stats, schema=schema, environment='Serving')\n\ntfdv.display_anomalies(serving_anomalies_with_environment)\n```", "```py\nserving_stats = tfdv.generate_statistics_from_csv(TEST_DATA)\n\n# Skew Comparator\nspa_analyze=tfdv.get_feature(schema, 'Spa')\nspa_analyze.skew_comparator.infinity_norm.threshold=0.01\n\n# Drift Comparator\nCryoSleep_analyze=tfdv.get_feature(schema, 'CryoSleep')\nCryoSleep_analyze.drift_comparator.infinity_norm.threshold=0.01\n\nskew_anomalies=tfdv.validate_statistics(statistics=train_stats, schema=schema,\n                                        previous_statistics=eval_stats,\n                                        serving_statistics=serving_stats)\ntfdv.display_anomalies(skew_anomalies)\n```", "```py\n# Saving the Schema\nfrom tensorflow.python.lib.io import file_io\nfrom google.protobuf import text_format\n\nfile_io.recursive_create_dir('schema')\nschema_file = os.path.join('schema', 'schema.pbtxt')\ntfdv.write_schema_text(schema, schema_file)\n```", "```py\n# Loading the Schema\nloaded_schema= tfdv.load_schema_text(schema_file)\nloaded_schema\n```"]