- en: Introducing Python’s datetime Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/introducing-pythons-datetime-module-13c5895b85a9?source=collection_archive---------4-----------------------#2024-05-14](https://towardsdatascience.com/introducing-pythons-datetime-module-13c5895b85a9?source=collection_archive---------4-----------------------#2024-05-14)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Quick Success Data Science
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Beginner’s Guide to Handling Dates and Times
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@lee_vaughan?source=post_page---byline--13c5895b85a9--------------------------------)[![Lee
    Vaughan](../Images/9f6b90bb76102f438ab0b9a4a62ffa3f.png)](https://medium.com/@lee_vaughan?source=post_page---byline--13c5895b85a9--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--13c5895b85a9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--13c5895b85a9--------------------------------)
    [Lee Vaughan](https://medium.com/@lee_vaughan?source=post_page---byline--13c5895b85a9--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--13c5895b85a9--------------------------------)
    ·10 min read·May 14, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d8a210178765943238055245bd0f1a02.png)'
  prefs: []
  type: TYPE_IMG
- en: A Python clock by DALL-E3
  prefs: []
  type: TYPE_NORMAL
- en: A *time series* is a sequence of data points indexed chronologically. They’re
    common components in scientific and financial datasets where observations are
    made over time.
  prefs: []
  type: TYPE_NORMAL
- en: Although you and I recognize “11/11/1918” as a date, a computer sees this value
    as a *text string*. For Python to intelligently work with calendar dates, hours,
    minutes, seconds, and so on, these strings must be converted into *special objects*
    that are “aware” of the mechanics of the Gregorian calendar, the sexagesimal (base
    60) time system, time zones, daylight-saving time, leap years, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Native Python supports times series through its `[datetime](https://docs.python.org/3/library/datetime.html)`
    module. I’ll introduce the basics of working with `datetime` in this *Quick Success
    Data Science* article. In a subsequent article, I’ll cover how to handle time
    series using Python’s pandas data analysis library.
  prefs: []
  type: TYPE_NORMAL
- en: The Python `datetime` Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python can properly and efficiently manipulate time information by treating
    it as specific *data types*. Its built-in `datetime` module includes `date`, `time`,
    and combined `datetime` types that permit working with time zones, daylight saving
    time (DST), leap years, and different…
  prefs: []
  type: TYPE_NORMAL
