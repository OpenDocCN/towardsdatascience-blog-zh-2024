["```py\nfrom itertools import product\nimport numpy as np\nimport pandas as pd\n\ndef check_both(result, attack_dice=3):\n    \"\"\"\n    Given a result of multiple dice, and a number of attack dice, determine whether the attack will win both soldiers,\n    the defense will both soldiers, or each will win a soldier.\n\n    :param result: array of dice results, where the attack dice are declared first\n    :param attack_dice: number of dice which represent the attack dice\n    :return:\n    \"\"\"\n    if np.partition(result[:attack_dice], -1)[-1] > np.partition(result[attack_dice:], -1)[-1] and \\\n            np.partition(result[:attack_dice], -2)[-2] > np.partition(result[attack_dice:], -2)[-2]:\n        return 'attack_both'\n    elif np.partition(result[:attack_dice], -1)[-1] > np.partition(result[attack_dice:], -1)[-1] or \\\n            np.partition(result[:attack_dice], -2)[-2] > np.partition(result[attack_dice:], -2)[-2]:\n        return 'one_one'\n    else:\n        return 'defense_both'\n\n# produce array of all possible permutations of 5 dice\narr = np.array(list(product([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\n                            [1, 2, 3, 4, 5, 6]))).transpose()\n\n# calculate and print counts of various result types\nprint(pd.Series(np.apply_along_axis(check_both, axis=0, arr=arr)).value_counts())\n```"]