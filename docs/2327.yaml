- en: Building an Interactive UI for Llamaindex Workflows
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Llamaindex工作流构建交互式UI
- en: 原文：[https://towardsdatascience.com/building-an-interactive-ui-for-llamaindex-workflows-842dd7abedde?source=collection_archive---------3-----------------------#2024-09-24](https://towardsdatascience.com/building-an-interactive-ui-for-llamaindex-workflows-842dd7abedde?source=collection_archive---------3-----------------------#2024-09-24)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/building-an-interactive-ui-for-llamaindex-workflows-842dd7abedde?source=collection_archive---------3-----------------------#2024-09-24](https://towardsdatascience.com/building-an-interactive-ui-for-llamaindex-workflows-842dd7abedde?source=collection_archive---------3-----------------------#2024-09-24)
- en: A guide to integrating human-in-the-loop interactions using Llamaindex, FastAPI,
    and Streamlit
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Llamaindex、FastAPI和Streamlit集成人机互动的指南
- en: '[](https://medium.com/@lzchen.cs?source=post_page---byline--842dd7abedde--------------------------------)[![Lingzhen
    Chen](../Images/9014cbac032238d8a5c9f4708ba6ffcb.png)](https://medium.com/@lzchen.cs?source=post_page---byline--842dd7abedde--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--842dd7abedde--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--842dd7abedde--------------------------------)
    [Lingzhen Chen](https://medium.com/@lzchen.cs?source=post_page---byline--842dd7abedde--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@lzchen.cs?source=post_page---byline--842dd7abedde--------------------------------)[![Lingzhen
    Chen](../Images/9014cbac032238d8a5c9f4708ba6ffcb.png)](https://medium.com/@lzchen.cs?source=post_page---byline--842dd7abedde--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--842dd7abedde--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--842dd7abedde--------------------------------)
    [Lingzhen Chen](https://medium.com/@lzchen.cs?source=post_page---byline--842dd7abedde--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--842dd7abedde--------------------------------)
    ·10 min read·Sep 24, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--842dd7abedde--------------------------------)
    ·阅读时间：10分钟·2024年9月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: 'In my last article, I demonstrated how I use LlamaIndex workflows to streamline
    my research and presentation process. I built a workflow that takes a research
    topic, finds related articles on arxiv.org, creates summaries for the papers,
    and generates a PowerPoint slide deck to present the papers. You can read the
    full walk-through here:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一篇文章中，我展示了如何使用LlamaIndex工作流来简化我的研究和展示过程。我构建了一个工作流，该工作流获取研究主题，在arxiv.org上查找相关文章，创建论文摘要，并生成一个PowerPoint幻灯片展示这些论文。你可以在这里阅读完整的操作步骤：
- en: '[](/how-i-streamline-my-research-and-presentation-with-llamaindex-workflows-3d75a9a10564?source=post_page-----842dd7abedde--------------------------------)
    [## How I Streamline My Research and Presentation with LlamaIndex Workflows'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/how-i-streamline-my-research-and-presentation-with-llamaindex-workflows-3d75a9a10564?source=post_page-----842dd7abedde--------------------------------)
    [## 我如何通过LlamaIndex工作流简化我的研究和展示'
- en: An example of orchestrating AI workflow with robustness, flexibility and controllability
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个协调AI工作流的示例，具有鲁棒性、灵活性和可控性
- en: towardsdatascience.com](/how-i-streamline-my-research-and-presentation-with-llamaindex-workflows-3d75a9a10564?source=post_page-----842dd7abedde--------------------------------)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/how-i-streamline-my-research-and-presentation-with-llamaindex-workflows-3d75a9a10564?source=post_page-----842dd7abedde--------------------------------)
- en: To continue building on the workflow and make it more user-friendly, I implemented
    a UI with Streamlit to enhance the user experience. The UI displays progress updates
    of the workflow execution, integrates user input, enables real-time user feedback,
    and renders the final generated slide deck.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续构建工作流并使其更具用户友好性，我使用Streamlit实现了一个UI，以增强用户体验。该UI显示工作流执行的进度更新，集成用户输入，支持实时用户反馈，并呈现最终生成的幻灯片。
- en: '![](../Images/943a490d724acbf5ce0f3ce0d5b7e379.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/943a490d724acbf5ce0f3ce0d5b7e379.png)'
- en: The Streamlit UI (Screen recording by author)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit UI（作者录屏）
- en: 'You can check out the full code on my [Github](https://github.com/lz-chen/research-agent).
    In this article, I will walk through some key points on the UI implementation
    and the integration between the frontend and the backend:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我的[Github](https://github.com/lz-chen/research-agent)上查看完整代码。在本文中，我将介绍UI实现的一些关键点，以及前端和后端之间的集成：
- en: '**Backend enhancements:**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**后端增强：**'
- en: Update the workflow to support sending streaming event
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新工作流以支持发送流式事件
- en: Update the workflow to pause execution and wait for user inputs
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新工作流以暂停执行并等待用户输入
- en: Host several endpoints using FastAPI for running workflow, accepting user inputs,
    and downloading files, enabling async processes and streaming messages
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用FastAPI托管多个端点以运行工作流，接受用户输入和下载文件，支持异步处理和流式消息
- en: '**Frontend UI features:**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**前端UI功能：**'
- en: Send requests to the backend and display event data streamed from the backend
    in an expander
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向后台发送请求并在扩展框中显示从后台流式传输的事件数据
- en: Display related information in a container and collect user input, if user input
    is required
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器中显示相关信息并收集用户输入（如果需要用户输入）
- en: Render the final generated slide deck
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染最终生成的幻灯片
- en: Provide a button for the user to download the final file
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供一个按钮供用户下载最终文件
- en: '**Putting it all together:**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**将所有内容整合在一起：**'
- en: Separate frontend and backend dependencies and build by using distinct `pyproject.toml`
    and `Dockerfile`
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将前端和后端依赖项分开，并通过使用不同的`pyproject.toml`和`Dockerfile`进行构建
- en: Use `docker-compose` to build launch all services
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`docker-compose`构建并启动所有服务
- en: When starting the workflow from the terminal, it is straightforward to see which
    step it is executing and the logging we put in those steps.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端启动工作流时，可以很直观地看到当前正在执行的步骤以及我们在这些步骤中添加的日志信息。
- en: '![](../Images/20ff5b34a307eada9bf3fc5771f5eab0.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/20ff5b34a307eada9bf3fc5771f5eab0.png)'
- en: Terminal log for the workflow execution (Screenshot by author)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流执行的终端日志（截图来自作者）
- en: We can also enable the human-in-the-loop interaction by simply using `user_feedback
    = input()`in the workflow. This will pause the workflow and wait for the user
    input (See the human-in-the-loop example in this official Llamaindex [notebook](https://docs.llamaindex.ai/en/stable/examples/workflow/human_in_the_loop_story_crafting/)).
    However, to be able to achieve the same functionality in a user-friendly interface,
    we need additional modifications to the original workflow.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过简单地在工作流中使用`user_feedback = input()`来启用人机互动。这将暂停工作流并等待用户输入（请参见此官方Llamaindex[笔记本](https://docs.llamaindex.ai/en/stable/examples/workflow/human_in_the_loop_story_crafting/)中的人机互动示例）。然而，为了在用户友好的界面中实现相同的功能，我们需要对原始工作流做出额外的修改。
- en: Sending streaming events from the workflow
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从工作流发送流式事件
- en: 'Workflow can take a long time to execute, so for a better user experience,
    Llamaindex provided a way to send streaming events to indicate the progress of
    the workflow, as shown in the notebook [here](https://docs.llamaindex.ai/en/stable/understanding/workflows/stream/).
    In my workflow, I define a `WorkflowStreamingEvent` class to include useful information
    about the event message, such as the type of the event, and from which step it
    is sent:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流执行可能需要很长时间，因此为了提供更好的用户体验，Llamaindex提供了一种方法，通过发送流式事件来指示工作流的进度，如笔记本[这里](https://docs.llamaindex.ai/en/stable/understanding/workflows/stream/)所示。在我的工作流中，我定义了一个`WorkflowStreamingEvent`类，包含有关事件消息的有用信息，如事件类型，以及它是从哪个步骤发送的：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To enable sending streaming events, the workflow step needs to have access
    to the shared context, which is done by adding `@step(pass_context=True)` decorator
    to the step definition. Then in the step definition, we can send event messages
    about the progress through the context. For example, in the `tavily_query()` step:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启用发送流式事件，工作流步骤需要访问共享上下文，这通过在步骤定义中添加`@step(pass_context=True)`装饰器来实现。然后，在步骤定义中，我们可以通过上下文发送关于进度的事件消息。例如，在`tavily_query()`步骤中：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this example, we set the `event_type` to be `“server_message”` . It means
    that it is an update message and no user action is required. We have another type
    of event `"request_user_input"` that indicates a user input is needed. For example,
    in the `gather_feedback_outline()` step in the workflow, after generating the
    slide text outlines from the original paper summary, a message is sent to prompt
    the user to provide approval and feedback on the outline text:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将`event_type`设置为`“server_message”`，意味着这是一个更新消息，不需要用户操作。我们还有另一种事件类型`"request_user_input"`，表示需要用户输入。例如，在工作流中的`gather_feedback_outline()`步骤中，在从原始论文摘要生成幻灯片文本大纲后，会发送一条消息，提示用户提供对大纲文本的批准和反馈：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These events are handled differently in the backend API and the frontend logic,
    which I will describe in detail in the later sections of this article.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事件在后台API和前端逻辑中有不同的处理方式，我将在本文后续部分详细描述。
- en: Pausing the workflow to wait for user input
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 暂停工作流以等待用户输入
- en: '![](../Images/e95ddc55fad1afe523da3672c85e3168.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e95ddc55fad1afe523da3672c85e3168.png)'
- en: Workflow steps that requires user feedback (Image by author)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 需要用户反馈的工作流步骤（图像来自作者）
- en: When sending a `"request_user_input"` event to the user, we only want to proceed
    to the next step **after** we have received the user input. As shown in the workflow
    diagram above, it either proceeds to the `outlines_with_layout()`step if the user
    approves the outline, or to the `summary2outline()` step again if the user does
    not approve.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当向用户发送 `"request_user_input"` 事件时，我们只希望在**收到**用户输入后才继续执行下一步。如上面的工作流图所示，如果用户批准了大纲，它会进入
    `outlines_with_layout()` 步骤；如果用户没有批准，则会再次进入 `summary2outline()` 步骤。
- en: 'This is achieved using the `Future()` object from Python’s `asyncio` library.
    In the `SlideGenerationWorkflow` class, we set an attribute `self.user_input_future
    = asyncio.Future()` that can be waited on in the `gather_feedback_outline()` step.
    The subsequent execution of the workflow is conditioned on the content of the
    user feedback:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过使用 Python 的 `asyncio` 库中的 `Future()` 对象来实现的。在 `SlideGenerationWorkflow`
    类中，我们设置了一个属性 `self.user_input_future = asyncio.Future()`，这个属性可以在 `gather_feedback_outline()`
    步骤中等待。工作流的后续执行取决于用户反馈的内容：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The FastAPI backend
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FastAPI 后端
- en: We set up the backend using fastAPI, expose a POST endpoint to handle requests,
    and initiate the workflow run. The asynchronous function `run_workflow_endpoint()`
    takes `ResearchTopic` as input. In the function, an asynchronous generator `event_generator()`
    is defined, which creates a task to run the workflow and streams the events to
    the client as the workflow progresses. When the workflow finishes, it will also
    stream the final file results to the client.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 FastAPI 设置后端，暴露一个 POST 端点来处理请求，并启动工作流运行。异步函数 `run_workflow_endpoint()`
    接受 `ResearchTopic` 作为输入。在该函数中，定义了一个异步生成器 `event_generator()`，它创建一个任务来运行工作流，并在工作流进展时将事件流传输给客户端。当工作流完成时，它还会将最终的文件结果流传输给客户端。
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In addition to this endpoint, there are endpoints for receiving user input from
    the client and handling file download requests. Since each workflow is assigned
    a unique workflow ID, we can map the user input received from the client to the
    correct workflow. By call the `set_result()` on the awaiting `Future`, the pending
    workflow can resume execution.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这个端点外，还有接收来自客户端的用户输入和处理文件下载请求的端点。由于每个工作流都分配了一个唯一的工作流 ID，我们可以将从客户端接收到的用户输入映射到正确的工作流。通过调用等待中的
    `Future` 对象的 `set_result()`，挂起的工作流可以恢复执行。
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The download endpoint also identifies where the final file is located based
    on the workflow ID.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 下载端点还会根据工作流 ID 确定最终文件的位置。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Streamlit frontend
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Streamlit 前端
- en: 'In the frontend page, after the user submits the research topic through `st.text_input()`,
    a long-running process is started in a background thread in a new event loop for
    receiving the streamed events from the backend, without interfering with the rest
    of the page:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端页面中，在用户通过 `st.text_input()` 提交研究主题后，一个长时间运行的进程将在后台线程中启动，并在一个新的事件循环中接收来自后端的流式事件，而不会干扰页面的其他部分：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The event data streamed from the backend is fetched by `httpx.AsyncClient` and
    put into a message queue for further processing. Different information is extracted
    depending on the event types. For event type `“request_user_input”`, the thread
    is also paused until the user input is provided.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从后端流式传输的事件数据由 `httpx.AsyncClient` 获取，并放入消息队列以供进一步处理。根据事件类型提取不同的信息。对于事件类型 `"request_user_input"`，线程也会暂停，直到提供用户输入。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We store the messages in the `st.session_state` and use a `st.expander()` to
    display and update these streamed data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将消息存储在 `st.session_state` 中，并使用 `st.expander()` 来显示和更新这些流式数据。
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To ensure the UI remains responsive and displays the event messages when they
    are being processed in a background thread, we use a customed [autorefresh](https://github.com/kmcgrady/streamlit-autorefresh)
    component to refresh the page at a set interval:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保 UI 保持响应，并在后台线程处理事件消息时显示这些消息，我们使用自定义的 [autorefresh](https://github.com/kmcgrady/streamlit-autorefresh)
    组件，在设定的时间间隔内刷新页面：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When the streamed event is of type `“request_user_input”`, we will display
    related information in a separate container and gather user feedback. As there
    can be multiple events that require user input from one workflow run, we put them
    in a message queue and make sure to assign a unique key to the `st.feedback()`,
    `st.text_area()` and `st.button()` that are linked to each event to ensure the
    widgets don’t interfere with each other:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当流式事件的类型为 `"request_user_input"` 时，我们将在一个单独的容器中显示相关信息并收集用户反馈。由于一个工作流运行过程中可能会有多个需要用户输入的事件，我们将它们放入消息队列，并确保为与每个事件关联的
    `st.feedback()`、`st.text_area()` 和 `st.button()` 分配一个唯一的键，以确保这些小部件互不干扰：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the end, when the workflow run finally finishes, the frontend client will
    get a response that contains the path to the final generated files (same slide
    deck in pdf format for rendering in the UI and pptx format for downloading as
    the final result). We display the pdf file and create a button for downloading
    the pptx file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当工作流运行结束时，前端客户端将收到一个响应，其中包含最终生成文件的路径（相同的幻灯片文件，pdf格式用于UI渲染，pptx格式用于下载作为最终结果）。我们展示pdf文件，并创建一个按钮供用户下载pptx文件：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Putting everything together with `docker-compose`
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`docker-compose`将一切组合起来
- en: We will create a multi-service Docker application with `docker-compose` to run
    the frontend and backend apps.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`docker-compose`创建一个多服务的Docker应用程序，来运行前端和后端应用程序。
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: That’s it! Just run `docker-compose up`, and we now have an app that can run
    a research workflow based on the user’s input query, prompt the user for feedback
    during the execution, and display the final result to the user.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！只需运行`docker-compose up`，我们现在有一个应用程序，可以根据用户输入的查询运行研究工作流，在执行过程中提示用户提供反馈，并向用户显示最终结果。
- en: Thank you for reading! Check out my [GitHub](https://github.com/lz-chen/research-agent)
    for the complete implementation. I look forward to hearing your thoughts, input,
    and feedbacks. I work as a Data Science Consultant at [Inmeta](https://inmeta.no/),
    part of [Crayon Group](https://www.crayon.com/no/). Feel free to connect with
    me on [LinkedIn](https://www.linkedin.com/in/lingzhen-chen-76720680/).😊
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！查看我的[GitHub](https://github.com/lz-chen/research-agent)获取完整实现。我期待听到您的想法、建议和反馈。我目前在[Inmeta](https://inmeta.no/)担任数据科学顾问，Inmeta是[Crayon
    Group](https://www.crayon.com/no/)的一部分。欢迎在[LinkedIn](https://www.linkedin.com/in/lingzhen-chen-76720680/)与我联系。😊
