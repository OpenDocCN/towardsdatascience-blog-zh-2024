- en: Comprehensive Guide to Datasets and Dataloaders in PyTorch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/comprehensive-guide-to-datasets-and-dataloaders-in-pytorch-4d20f973d5d5?source=collection_archive---------6-----------------------#2024-06-15](https://towardsdatascience.com/comprehensive-guide-to-datasets-and-dataloaders-in-pytorch-4d20f973d5d5?source=collection_archive---------6-----------------------#2024-06-15)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The full guide to creating custom datasets and dataloaders for different models
    in PyTorch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@rtdcunha?source=post_page---byline--4d20f973d5d5--------------------------------)[![Ryan
    D''Cunha](../Images/7a39859e2b5e5b09ef2c60aaf6bb75ac.png)](https://medium.com/@rtdcunha?source=post_page---byline--4d20f973d5d5--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--4d20f973d5d5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--4d20f973d5d5--------------------------------)
    [Ryan D''Cunha](https://medium.com/@rtdcunha?source=post_page---byline--4d20f973d5d5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--4d20f973d5d5--------------------------------)
    ·5 min read·Jun 15, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6e4efac0de583f1e865e0158db53f194.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: GPT4o Generated'
  prefs: []
  type: TYPE_NORMAL
- en: Before you can build a machine learning model, you need to load your data into
    a dataset. Luckily, PyTorch has many commands to help with this entire process
    (if you are not familiar with PyTorch I recommend refreshing on the basics [here](https://medium.com/@rtdcunha/a-beginners-guide-to-pytorch-6bc600ca4b8d)).
  prefs: []
  type: TYPE_NORMAL
- en: PyTorch has good documentation to help with this process, but I have not found
    any comprehensive documentation or tutorials towards custom datasets. I’m first
    going to start with creating basic premade datasets and then work my way up to
    creating datasets from scratch for different models!
  prefs: []
  type: TYPE_NORMAL
- en: What is a Dataset and Dataloader?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we dive into code for different use cases, let’s understand the difference
    between the two terms. Generally, you first create your dataset and then create
    a dataloader. A **dataset** contains the features and labels from each data point
    that will be fed into the model. A **dataloader** is a custom PyTorch iterable
    that makes it easy to load data with added features.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The most common arguments in the dataloader are *batch_size*, *shuffle* (usually
    only for the training data), *num_workers* (to multi-process loading the data),
    and *pin_memory* (to put the fetched data Tensors in pinned memory and enable
    faster data transfer to CUDA-enabled GPUs).
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended to set pin_memory = True instead of specifying num_workers
    due to multiprocessing complications with CUDA.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Loading a Premade Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the case that your dataset is downloaded from online or locally, it will
    be extremely simple to create the dataset. I think PyTorch has good [documentation](https://pytorch.org/tutorials/beginner/basics/data_tutorial.html)
    on this, so I will be brief.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you know the dataset is either from PyTorch or PyTorch-compatible, simply
    call the necessary imports and the dataset of choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Each dataset will have unique arguments to pass into it (found [here](https://pytorch.org/vision/main/datasets.html)).
    In general, it will be the path the dataset is stored at, a boolean indicating
    if it needs to be downloaded or not (conveniently called download), whether it
    is training or testing, and if transforms need to be applied.
  prefs: []
  type: TYPE_NORMAL
- en: Transforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I dropped in that transforms can be applied to a dataset at the end of the last
    section, but what actually is a transform?
  prefs: []
  type: TYPE_NORMAL
- en: A **transform** is a method of manipulating data for preprocessing an image.
    There are many different facets to transforms. The most common transform, *ToTensor()*,
    will convert the dataset to tensors (needed to input into any model). Other transforms
    built into PyTorch (*torchvision.transforms*) include flipping, rotating, cropping,
    normalizing, and shifting images. These are typically used so the model can generalize
    better and doesn’t overfit to the training data. Data augmentations can also be
    used to artificially increase the size of the dataset if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Beware most torchvision transforms only accept Pillow image or tensor formats
    (not numpy). To convert, simply use
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'To convert from numpy, either create a torch tensor or use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Transforms can be applied simultaneously using *torchvision.transforms.compose*.
    You can combine as many transforms as needed for the dataset. An example is shown
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Be sure to pass the saved transform as an argument into the dataset for it to
    be applied in the dataloader.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Custom Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In most cases of developing your own model, you will need a custom dataset.
    A common use case would be transfer learning to apply your own dataset on a pretrained
    model.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are 3 required parts to a PyTorch dataset class: **initialization**,
    **length**, and **retrieving an element**.'
  prefs: []
  type: TYPE_NORMAL
- en: '**__init__**: To initialize the dataset, pass in the raw and labeled data.
    The best practice is to pass in the raw image data and labeled data separately.'
  prefs: []
  type: TYPE_NORMAL
- en: '**__len__**: Return the length of the dataset. Before creating the dataset,
    the raw and labeled data should be checked to be the same size.'
  prefs: []
  type: TYPE_NORMAL
- en: '**__getitem__**: This is where all the data handling occurs to return a given
    index (idx) of the raw and labeled data. If any transforms need to be applied,
    the data must be converted to a tensor and transformed. If the initialization
    contained a path to the dataset, the path must be opened and data accessed/preprocessed
    before it can be returned.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example dataset for a semantic segmentation model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: It is important to look at the input of the first layer of the model (especially
    for a pretrained model), to make sure the shape of the data matches the input
    shape. If not, you may need to adjust the dimensions. This is common if the input
    image is a greyscale n x n array, but the model requires a channel dimension (1
    x 256 x 256).
  prefs: []
  type: TYPE_NORMAL
- en: After the dataset and dataloader are applied, the format of the data should
    be NCHW (batch size, channel size, height, width). Reformatting can be done in
    the __getitem__ method before outputting to the model.
  prefs: []
  type: TYPE_NORMAL
- en: Splitting the Dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While creating the dataset, you may want to split into a training, testing,
    and validation dataset. This can be done using a built-in PyTorch function and
    specifying the sizes. Make sure the dataset splits add up to the total length
    of the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Data Labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There can be different data labels depending on the model: classification,
    object detection, or segmentation. A model classification label will contain a
    class label if it is multiclass or a binary number if it is binary. An object
    detection model will contain a bounding box of coordinates as the label. A semantic
    segmentation model will contain a binary mask matching the size of the raw image
    data. An instance segmentation contains all mask data in the raw image data.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a dataset is a foundational aspect of model development. By having
    a faulty dataset, there will be many errors downstream in training or evaluating
    the model. The most common errors to watch out for are shape or type mismatches.
    By following this and referring to PyTorch docs, you should have a working dataset!
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[## Datasets & DataLoaders - PyTorch Tutorials 2.3.0+cu121 documentation'
  prefs: []
  type: TYPE_NORMAL
- en: Learn the Basics || Quickstart || Tensors || Datasets & DataLoaders || Transforms
    || Build Model || Autograd ||…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pytorch.org](https://pytorch.org/tutorials/beginner/basics/data_tutorial.html?source=post_page-----4d20f973d5d5--------------------------------)
    [](https://pytorch.org/tutorials/beginner/data_loading_tutorial.html?source=post_page-----4d20f973d5d5--------------------------------)
    [## Writing Custom Datasets, DataLoaders and Transforms - PyTorch Tutorials 2.3.0+cu121
    documentation
  prefs: []
  type: TYPE_NORMAL
- en: 'Author: Sasank Chilamkurthy A lot of effort in solving any machine learning
    problem goes into preparing the data…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pytorch.org](https://pytorch.org/tutorials/beginner/data_loading_tutorial.html?source=post_page-----4d20f973d5d5--------------------------------)  [##
    Transforming and augmenting images - Torchvision 0.18 documentation
  prefs: []
  type: TYPE_NORMAL
- en: Torchvision supports common computer vision transformations in the torchvision.transforms
    and torchvision.transforms.v2…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pytorch.org](https://pytorch.org/vision/stable/transforms.html?source=post_page-----4d20f973d5d5--------------------------------)  [##
    Compose - Torchvision main documentation
  prefs: []
  type: TYPE_NORMAL
- en: Run PyTorch locally or get started quickly with one of the supported cloud platforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: pytorch.org](https://pytorch.org/vision/main/generated/torchvision.transforms.Compose.html?source=post_page-----4d20f973d5d5--------------------------------)
  prefs: []
  type: TYPE_NORMAL
