- en: Use R to build Clinical Flowchart with shinyCyJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/clinical-flowchart-shinycyjs-e-2f5489154794?source=collection_archive---------10-----------------------#2024-09-03](https://towardsdatascience.com/clinical-flowchart-shinycyjs-e-2f5489154794?source=collection_archive---------10-----------------------#2024-09-03)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Customizable R package for Graph / Network visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://jhk0530.medium.com/?source=post_page---byline--2f5489154794--------------------------------)[![Jinhwan
    Kim](../Images/b88f1327cd0800b21ccd235262fefeec.png)](https://jhk0530.medium.com/?source=post_page---byline--2f5489154794--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--2f5489154794--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--2f5489154794--------------------------------)
    [Jinhwan Kim](https://jhk0530.medium.com/?source=post_page---byline--2f5489154794--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--2f5489154794--------------------------------)
    ·6 min read·Sep 3, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Clinical Flowchart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Clinical (Trial) Flowchart is a visual representation of each step and procedure
    in a clinical trial or treatment process.
  prefs: []
  type: TYPE_NORMAL
- en: It starts with patients, lists which therapeutic methods are used, which patients
    are excluded from the trial and for what reason, how the groups are assigned,
    and so on, and looks like the example below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/746cddecc4f78642a9a5a0c89bdd7838.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Cesa, Gian Luca, et al](https://www.jmir.org/2013/6/e113/). JMIR Publications
    15(6) 2013'
  prefs: []
  type: TYPE_NORMAL
- en: This illustration implies the following
  prefs: []
  type: TYPE_NORMAL
- en: Initially started with 124 patients
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exclude 34 patients due to ineligibility or declining to participate
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The remaining 90 patients are randomly assigned to a group (Extended CBT, CBT,
    IP) to compare treatments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In each group, 4, 10, and 10 people drop out of the course (although ideally
    30 people would be split), and the rest receive the assigned treatment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the patients were followed up after 1 year, 9, 6, and 7 were unresponsive,
    respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*The trial started with 124 patients and ended up with only 44 patients, which
    shows how difficult and expensive clinical trials can be.*'
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, there is no set way to draw this flowchart, and you can use any commercial
    software such as PowerPoint or Keynote, or web-based diagramming tools such as
    **draw.io** or lucidchart.
  prefs: []
  type: TYPE_NORMAL
- en: Clinical Flowchart with R
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I don’t know exactly why, but this time I needed to use R to plot the chart.
  prefs: []
  type: TYPE_NORMAL
- en: The advantages of using a programming approach like R include automation and
    reuse, integration with other functions (e.g., a program that plots from data
    source to chart), and a level of customization not available in commercial programs.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, here’s how I’ve tried to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: '[flowchart](https://github.com/bruigtp/flowchart/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the original purpose of the package was to draw participant flow diagrams,
    this is the closest I could get to what I was trying to achieve. I think it’s
    the best choice unless you have special circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: '[DiagrammeR](https://github.com/rich-iannone/DiagrammeR/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A library for graph and network visualization that leverages features from d3
    and mermaid.
  prefs: []
  type: TYPE_NORMAL
- en: ggplot2 + [ggforce](https://github.com/thomasp85/ggforce)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R’s best friend ggplot (recommended by GPT) and its companion packages.
  prefs: []
  type: TYPE_NORMAL
- en: '[visNetwork](https://github.com/datastorm-open/visNetwork)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: R package for network visualization graphs based on vis.js.
  prefs: []
  type: TYPE_NORMAL
- en: However, as it turns out, all four methods failed.
  prefs: []
  type: TYPE_NORMAL
- en: This is because there was a special situation with the figure I was trying to
    draw.
  prefs: []
  type: TYPE_NORMAL
- en: The following figure shows the actual drawing, with only the numbers and groups
    replaced with 1000, 1,2,3… A, B.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/016e612bd2311ba14f738932cc947dd7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: 'There were two problematic parts: the **Completed curative surgery** part in
    the middle, where the two nodes from the previous step connect to one long node,
    and the difficulty of positioning the edge.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/04cdc6a40c8db3327eb8f80d2f87578d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: I considered several ways to do this, and eventually decided to use an old friend,
    shinyCyJS, which I can customize to my purpose.
  prefs: []
  type: TYPE_NORMAL
- en: '[shinyCyJS](https://github.com/jhk0530/shinyCyJS)is a R package to leverage
    the network/graph visualization capabilities of [cytoscape.js](https://js.cytoscape.org/)
    in R. It was the first thing I wrote when I was looking for genomic network visualization
    when I graduated (at the time, there was only [igraph](https://github.com/igraph/rigraph)
    and [RCyjs](https://bioconductor.org/packages/release/bioc/html/RCyjs.html)) and
    didn’t find what I was looking for, which is how I ended up at my current job.'
  prefs: []
  type: TYPE_NORMAL
- en: 2 Custom feature with shinyCyJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Positioning Edges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to implement the positioning of the edges in the two custom features
    above, I initially tried to use taxi edges.
  prefs: []
  type: TYPE_NORMAL
- en: However, again, this only determines the edge based on the position of the node,
    and it is not possible to move the edge, so I switched to adding a microscopic
    node in the middle and traversing the edge to it, as shown below (since it is
    possible to specify the position of the “micro” node).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/babadb179203976e4b121a8bbded6abd.png)![](../Images/42277c7591b1d66da5c96ca2186d78cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: One Big Node
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In cytoscape.js, by default, nodes are connected by edges that consider the
    **shortest distance between the center and the center**, and if they go through
    other points along the way, like the taxi mentioned above, the **points are not
    specified and are calculated algorithmically**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8644b2d457d7368f9e2cc7a332339188.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Edge arrow types](https://js.cytoscape.org/demos/edge-arrows/) of Cytoscape.js'
  prefs: []
  type: TYPE_NORMAL
- en: The problem with allowing intermediate points to be specified is that when there
    are multiple edges between nodes, like in the bezier and haystack examples, it
    is annoying to have to specify intermediate points for all of them.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous example, there are only three edges, so it’s not a big deal,
    but in the case of genomic networks, which I studied in graduate school, a single
    gene often interacts with dozens or hundreds of other genes, so it’s a big deal.
  prefs: []
  type: TYPE_NORMAL
- en: In the worst case scenario, the edges overlap and missing a few edges can cause
    the graph to produce completely different information.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/327075482d992cced5961cdce0e739ff.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Ideker, T., & Krogan, N. J.](https://www.embopress.org/doi/full/10.1038/msb.2011.99)
    Molecular systems biology 8(1) 2012'
  prefs: []
  type: TYPE_NORMAL
- en: In other words, in the problem of connecting to one long node, the long node
    is only a graphical (`width`) perspective for the user,
  prefs: []
  type: TYPE_NORMAL
- en: But from the computer’s point of view, it is irrational behavior to connect
    an edge to a node that doesn’t even exist, as shown in the image below, so there
    is no reason to consider this option in the first place.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/737e59fbe58d29be0a3eb076f2d7ae88.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: To solve this problem, I created a micro node and modified it to connect to
    the appropriate part, just like the previous edge midpoint problem.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f3684ec9694dbe5d039a51fe3feb55b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Here is a partial view of the graph I ended up creating in R. (Again, groups
    and numbers are arbitrarily modified)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/133e2f8d8cee75d916a2ee92b09063f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Another problem, download as PNG
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Technically, you can use the Export as PNG button in Rstudio viewer as shown
    below, and if that doesn’t work, you can take a screenshot, but cytoscape.js has
    a function to save the graph as png, so I used it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ed572ffe8e4f78fc955df54632aa1924.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: '**I actually had a request to add a download to png feature to shinyCyJS a
    while back, and I replied “why not just take a screenshot?”.*'
  prefs: []
  type: TYPE_NORMAL
- en: This required using an internet browser (chrome) (As cytoscape.js is Javascript)
    and that meant I had to go beyond R and implement it on the web using Shiny.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, shinyCyJS is a package that was built with shiny integration in mind
    from the start, so it was no problem.
  prefs: []
  type: TYPE_NORMAL
- en: Below is the code you need to run in Chrome’s developer tools to download it
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: shinyCyJS is an R package I wrote, and it literally does everything cytoscape
    does, plus custom features like this if needed, so if you need to do network/graph
    visualization in R, you can try it out or ask for what you need.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, if you don’t need to use R, **draw.io seems better.**
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, if you want to package other Javascript libraries for use with
    R, you can send me an email.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading.
  prefs: []
  type: TYPE_NORMAL
