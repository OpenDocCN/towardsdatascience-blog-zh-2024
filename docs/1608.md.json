["```py\nimport pandas as pd\nimport numpy as np\n\nSTD = 3.3\nMEAN = 0\nALPHA = 18\nBETA = 0.7\nN = 1000\n\ndf = pd.DataFrame({\"et\": np.random.normal(loc=MEAN, scale=STD, size=N)})\ndf[\"et-1\"] = df[\"et\"].shift(1, fill_value=0)\ndf[\"xt\"] = ALPHA + (BETA*df[\"et-1\"]) + df[\"et\"]\n```", "```py\nfrom scipy import stats\nfrom statsmodels.base.model import GenericLikelihoodModel\nimport statsmodels.api as sm\n\nclass MovingAverageMLE(GenericLikelihoodModel):\n    def initialize(self):\n        super().initialize()\n        extra_params_names = ['beta', 'std']\n        self._set_extra_params_names(extra_params_names)\n\n        self.start_params = np.array([0.1, 0.1, 0.1])\n\n    def calc_conditional_et(self, intercept, beta):\n        df = pd.DataFrame({\"xt\": self.endog})\n        ets = [0.0]\n        for i in range(1, len(df)):\n            ets.append(df.iloc[i][\"xt\"] - intercept - (beta*ets[i-1]))\n\n        return ets\n\n    def loglike(self, params):\n        ets = self.calc_conditional_et(params[0], params[1])\n        return stats.norm.logpdf(\n            ets,\n            scale=params[2],\n        ).sum()\n```", "```py\ndf = sm.add_constant(df) # add intercept for estimation (alpha)\nmodel = MovingAverageMLE(df[\"xt\"], df[\"const\"])\nr = model.fit()\nr.summary()\n```"]