- en: Deep Dive into Transformers by Hand ✍︎
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/deep-dive-into-transformers-by-hand-%EF%B8%8E-68b8be4bd813?source=collection_archive---------0-----------------------#2024-04-12](https://towardsdatascience.com/deep-dive-into-transformers-by-hand-%EF%B8%8E-68b8be4bd813?source=collection_archive---------0-----------------------#2024-04-12)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Explore the details behind the power of transformers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@srijanie.dey?source=post_page---byline--68b8be4bd813--------------------------------)[![Srijanie
    Dey, PhD](../Images/2b3292a3b22d712d91d0bfc14df64446.png)](https://medium.com/@srijanie.dey?source=post_page---byline--68b8be4bd813--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--68b8be4bd813--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--68b8be4bd813--------------------------------)
    [Srijanie Dey, PhD](https://medium.com/@srijanie.dey?source=post_page---byline--68b8be4bd813--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--68b8be4bd813--------------------------------)
    ·6 min read·Apr 12, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: There has been a new development in our neighborhood.
  prefs: []
  type: TYPE_NORMAL
- en: A ‘Robo-Truck,’ as my son likes to call it, has made its new home on our street.
  prefs: []
  type: TYPE_NORMAL
- en: It is a Tesla Cyber Truck and I have tried to explain that name to my son many
    times but he insists on calling it Robo-Truck. Now every time I look at Robo-Truck
    and hear that name, it reminds me of the movie Transformers where robots could
    transform to and from cars.
  prefs: []
  type: TYPE_NORMAL
- en: And isn’t it strange that Transformers as we know them today could very well
    be on their way to powering these Robo-Trucks? It’s almost a full circle moment.
    But where am I going with all these?
  prefs: []
  type: TYPE_NORMAL
- en: Well, I am heading to the destination — Transformers. Not the robot car ones
    but the neural network ones. And you are invited!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/51e6a28c10ef051412c2b9cfbb2838d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author (Our Transformer — ‘Robtimus Prime’. Colors as mandated by my
    artist son.)
  prefs: []
  type: TYPE_NORMAL
- en: What are Transformers?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Transformers are essentially neural networks. Neural networks that specialize
    in learning context from the data.
  prefs: []
  type: TYPE_NORMAL
- en: But what makes them special is the presence of mechanisms that eliminate the
    need for **labeled datasets** and **convolution or recurrence** in the network.
  prefs: []
  type: TYPE_NORMAL
- en: What are these special mechanisms?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many. But the two mechanisms that are truly the force behind the transformers
    are attention weighting and feed-forward networks (FFN).
  prefs: []
  type: TYPE_NORMAL
- en: What is attention-weighting?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Attention-weighting is a technique by which the model learns which part of the
    incoming sequence needs to be focused on. Think of it as the ‘Eye of Sauron’ scanning
    everything at all times and throwing light on the parts that are relevant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fun-fact: Apparently, the researchers had almost named the Transformer model
    ‘Attention-Net’, given Attention is such a crucial part of it.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**What is FFN?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the context of transformers, FFN is essentially a regular multilayer perceptron
    acting on a batch of independent data vectors. Combined with attention, it produces
    the correct ‘position-dimension’ combination.
  prefs: []
  type: TYPE_NORMAL
- en: '**How do Attention and FFN work?**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, without further ado, let’s dive into how **attention-weighting** and **FFN**
    make transformers so powerful.
  prefs: []
  type: TYPE_NORMAL
- en: This discussion is based on Prof. Tom Yeh’s wonderful AI by Hand Series on [Transformers](https://lnkd.in/g39jcD7j)
    . (All the images below, unless otherwise noted, are by Prof. Tom Yeh from the
    above-mentioned LinkedIn posts, which I have edited with his permission.)
  prefs: []
  type: TYPE_NORMAL
- en: 'So here we go:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The key ideas here : **attention weighting and feed-forward network (FFN)**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Keeping those in mind, suppose we are given:'
  prefs: []
  type: TYPE_NORMAL
- en: 5 input features from a previous block (A 3x5 matrix here, where X1, X2, X3,
    X4 and X5 are the features and each of the three rows denote their characteristics
    respectively.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/8fbc7712aec4f5834dac58f2c4724322.png)'
  prefs: []
  type: TYPE_IMG
- en: '[1] **Obtain attention weight matrix A**'
  prefs: []
  type: TYPE_NORMAL
- en: The first step in the process is to obtain the **attention weight matrix A**.
    This is the part where the self-attention mechanism comes to play. What it is
    trying to do is find the most relevant parts in this input sequence.
  prefs: []
  type: TYPE_NORMAL
- en: We do it by feeding the input features into the query-key (QK) module. For simplicity,
    the details of the QK module are not included here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98c0a5d3d06cbc56f250062940a59e77.png)'
  prefs: []
  type: TYPE_IMG
- en: '[2] **Attention Weighting**'
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the **attention weight matrix A (5x5)**, we multiply the input
    features (3x5) with it to obtain the **attention-weighted features Z**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/88977d9819fb55ceb71256aa238c4cb1.png)'
  prefs: []
  type: TYPE_IMG
- en: The important part here is that the features here are combined **based on their
    positions** P1, P2 and P3 i.e. **horizontally**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To break it down further, consider this calculation performed row-wise:'
  prefs: []
  type: TYPE_NORMAL
- en: P1 X A1 = Z1 → Position [1,1] = 11
  prefs: []
  type: TYPE_NORMAL
- en: P1 X A2 = Z2 → Position [1,2] = 6
  prefs: []
  type: TYPE_NORMAL
- en: P1 X A3 = Z3 → Position [1,3] = 7
  prefs: []
  type: TYPE_NORMAL
- en: P1 X A4 = Z4 → Position [1,4] = 7
  prefs: []
  type: TYPE_NORMAL
- en: P1 X A5 = Z5 → Positon [1,5] = 5
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: P2 X A4 = Z4 → Position [2,4] = 3
  prefs: []
  type: TYPE_NORMAL
- en: P3 X A5 = Z5 →Position [3,5] = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/16388ba68af2bae868e9845f6b719465.png)'
  prefs: []
  type: TYPE_IMG
- en: It seems a little tedious in the beginning but follow the multiplication row-wise
    and the result should be pretty straight-forward.
  prefs: []
  type: TYPE_NORMAL
- en: 'Cool thing is the way our attention-weight matrix **A** is arranged, the new
    features **Z** turn out to be the combinations of **X** as below:'
  prefs: []
  type: TYPE_NORMAL
- en: Z1 = X1 + X2
  prefs: []
  type: TYPE_NORMAL
- en: Z2 = X2 + X3
  prefs: []
  type: TYPE_NORMAL
- en: Z3 = X3 + X4
  prefs: []
  type: TYPE_NORMAL
- en: Z4 = X4 + X5
  prefs: []
  type: TYPE_NORMAL
- en: Z5 = X5 + X1
  prefs: []
  type: TYPE_NORMAL
- en: '(Hint : Look at the positions of 0s and 1s in matrix **A**).'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] **FFN : First Layer**'
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to feed the attention-weighted features into the feed-forward
    neural network.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the difference here lies in **combining the values across dimensions**
    as opposed to positions in the previous step. It is done as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ed26d0b60d3f60310db8a988a7a4f437.png)'
  prefs: []
  type: TYPE_IMG
- en: What this does is that it looks at the data from the other direction.
  prefs: []
  type: TYPE_NORMAL
- en: '**- In the attention step, we combined our input on the basis of the original
    features to obtain new features.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**- In this FFN step, we consider their characteristics i.e. combine features
    vertically to obtain our new matrix.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Eg: P1(1,1) * Z1(1,1)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: + P2(1,2) * Z1 (2,1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: + P3 (1,3) * Z1(3,1) + b(1) = 11, where b is bias.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Once again element-wise row operations to the rescue. Notice that here the number
    of dimensions of the new matrix is increased to 4 here.
  prefs: []
  type: TYPE_NORMAL
- en: '[4] **ReLU**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our favorite step : ReLU, where the negative values obtained in the previous
    matrix are returned as zero and the positive value remain unchanged.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2dc50d4a90df572bd357073a42b871a5.png)'
  prefs: []
  type: TYPE_IMG
- en: '[5] **FFN : Second Layer**'
  prefs: []
  type: TYPE_NORMAL
- en: Finally we pass it through the second layer where the dimensionality of the
    resultant matrix is reduced from 4 back to 3.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ca42007aef10d51a48d23fb8a90ee9d4.png)'
  prefs: []
  type: TYPE_IMG
- en: The output here is ready to be fed to the next block (see its similarity to
    the original matrix) and the entire process is repeated from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: '**The two key things to remember here are:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**The attention layer combines across positions (horizontally).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The feed-forward layer combines across dimensions (vertically).**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And this is the secret sauce behind the power of the transformers — the ability
    to analyze data from different directions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To summarize the ideas above, here are the key points:'
  prefs: []
  type: TYPE_NORMAL
- en: The transformer architecture can be perceived as a combination of the attention
    layer and the feed-forward layer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **attention layer combines the features** to produce a new feature. E.g.
    think of combining two robots Robo-Truck and Optimus Prime to get a new robot
    Robtimus Prime.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **feed-forward (FFN) layer combines the parts or the characteristics** of
    the a feature to produce new parts/characteristics. E.g. wheels of Robo-Truck
    and Ion-laser of Optimus Prime could produce a wheeled-laser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The ever powerful Transformers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Neural networks have existed for quite some time now. Convolutional Neural Networks
    (CNN) and Recurrent Neural Networks (RNN) had been reigning supreme but things
    took quite an eventful turn once Transformers were introduced in the year 2017\.
    And since then, the field of AI has grown at an exponential rate — with new models,
    new benchmarks, new learnings coming in every single day. And only time will tell
    if this phenomenal idea will one day lead the way for something even bigger —
    a real ‘Transformer’.
  prefs: []
  type: TYPE_NORMAL
- en: But for now it would not be wrong to say that an idea can really *transform*
    how we live!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/860b393c7b33bd9c4edfb8330c924678.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: P.S. If you would like to work through this exercise on your own, here is the
    blank template for your use.
  prefs: []
  type: TYPE_NORMAL
- en: '[Blank Template for hand-exercise](https://drive.google.com/file/d/1F08laMdmwQ2vxYIqewOghS1eknaprgxe/view?usp=drive_link)'
  prefs: []
  type: TYPE_NORMAL
- en: Now go have some fun and create your own **Robtimus Prime**!
  prefs: []
  type: TYPE_NORMAL
