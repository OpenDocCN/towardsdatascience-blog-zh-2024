- en: Validations in Pydantic V2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/validations-in-pydantic-v2-15bcbb39a98b?source=collection_archive---------6-----------------------#2024-07-17](https://towardsdatascience.com/validations-in-pydantic-v2-15bcbb39a98b?source=collection_archive---------6-----------------------#2024-07-17)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Validating with Field, Annotated, field validator, and model validator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://kayjanwong.medium.com/?source=post_page---byline--15bcbb39a98b--------------------------------)[![Kay
    Jan Wong](../Images/28e803eca6327d97b6aa97ee4095d7bd.png)](https://kayjanwong.medium.com/?source=post_page---byline--15bcbb39a98b--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--15bcbb39a98b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--15bcbb39a98b--------------------------------)
    [Kay Jan Wong](https://kayjanwong.medium.com/?source=post_page---byline--15bcbb39a98b--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--15bcbb39a98b--------------------------------)
    ·7 min read·Jul 17, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bd2605efe60b46b99118b62a88d62303.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Max Di Capua](https://unsplash.com/@maxdicapua?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Pydantic is *the* data validation library for Python, integrating seamlessly
    with FastAPI, classes, data classes, and functions. Data validation refers to
    the validation of input fields to be the appropriate data types (and performing
    data conversions automatically in non-strict modes), to impose simple numeric
    or character limits for input fields, or even impose custom and complex constraints.
  prefs: []
  type: TYPE_NORMAL
- en: With larger classes and more fields to perform validation on, and with validations
    being able to process and modify the raw inputs, it is important to know the **different
    types of validators**, and their **order of precedence** in execution.
  prefs: []
  type: TYPE_NORMAL
- en: This article will discuss the different types of validation that Pydantic offers
    and the order of precedence of the different types of validation with code examples,
    which are not covered in great detail in Pydantic’s documentation. The focus will
    be on the validation of classes, also referred to as `BaseModel`.
  prefs: []
  type: TYPE_NORMAL
- en: Table of Contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Types of Validation](https://medium.com/p/15bcbb39a98b/#d692)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Validating with Field function](https://medium.com/p/15bcbb39a98b/#6a8b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Validating with Annotated type](https://medium.com/p/15bcbb39a98b/#6c2b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Validating with field validator](https://medium.com/p/15bcbb39a98b/#d28b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
