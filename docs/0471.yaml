- en: Using IPython Jupyter Magic Commands to Improve the Notebook Experience
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IPython Jupyter 魔法命令改善笔记本体验
- en: 原文：[https://towardsdatascience.com/using-ipython-jupyter-magic-commands-to-improve-the-notebook-experience-f2c870cab356?source=collection_archive---------2-----------------------#2024-02-19](https://towardsdatascience.com/using-ipython-jupyter-magic-commands-to-improve-the-notebook-experience-f2c870cab356?source=collection_archive---------2-----------------------#2024-02-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/using-ipython-jupyter-magic-commands-to-improve-the-notebook-experience-f2c870cab356?source=collection_archive---------2-----------------------#2024-02-19](https://towardsdatascience.com/using-ipython-jupyter-magic-commands-to-improve-the-notebook-experience-f2c870cab356?source=collection_archive---------2-----------------------#2024-02-19)
- en: A post on creating a custom IPython Jupyter Magic command
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义 IPython Jupyter 魔法命令的帖子
- en: '[](https://medium.com/@stefan.krawczyk?source=post_page---byline--f2c870cab356--------------------------------)[![Stefan
    Krawczyk](../Images/150405abaad9590e1dc2589168ed2fa3.png)](https://medium.com/@stefan.krawczyk?source=post_page---byline--f2c870cab356--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f2c870cab356--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f2c870cab356--------------------------------)
    [Stefan Krawczyk](https://medium.com/@stefan.krawczyk?source=post_page---byline--f2c870cab356--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@stefan.krawczyk?source=post_page---byline--f2c870cab356--------------------------------)[![Stefan
    Krawczyk](../Images/150405abaad9590e1dc2589168ed2fa3.png)](https://medium.com/@stefan.krawczyk?source=post_page---byline--f2c870cab356--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--f2c870cab356--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--f2c870cab356--------------------------------)
    [Stefan Krawczyk](https://medium.com/@stefan.krawczyk?source=post_page---byline--f2c870cab356--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f2c870cab356--------------------------------)
    ·12 min read·Feb 19, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--f2c870cab356--------------------------------)
    ·12分钟阅读·2024年2月19日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/2795ea522a2ce09a38aa5c62dc372b90.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2795ea522a2ce09a38aa5c62dc372b90.png)'
- en: Learn to apply some magic to your notebooks. Image by author using DALL-E-3\.
    A version of this post originally appeared [here](https://blog.dagworks.io/p/using-ipython-jupyter-magic-commands).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 学会在你的笔记本中施展一些魔法。图像由作者使用 DALL-E-3 创建。此帖的一个版本最初发布在[这里](https://blog.dagworks.io/p/using-ipython-jupyter-magic-commands)。
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Jupyter Notebooks are commonplace in data science. They allow a mixture of “read,
    evaluate, print, [in a] loop” (REPL) code writing and documentation in a single
    place. They’re most commonly used for analysis and brainstorming purposes, but
    also, more contentiously, some prefer notebooks to scripts to run production code
    (but we won’t focus on that here).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter 笔记本在数据科学中已经很常见。它们允许在一个地方混合“读取、评估、打印、[循环]”（REPL）代码编写和文档编写。它们通常用于分析和头脑风暴目的，但也有一些人更倾向于使用笔记本而非脚本来运行生产代码（不过我们在这里不讨论这个话题）。
- en: Invariably, the code written in notebooks will be repetitive in some way such
    as setting up a database connection, displaying an output, saving results, interacting
    with an internal platform tool, etc. It’s best to store this code as functions
    and/or modules to make them reusable and more easily manage them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 不可避免地，笔记本中编写的代码在某些方面会有重复，比如设置数据库连接、显示输出、保存结果、与内部平台工具交互等。最好将这些代码存储为函数和/或模块，以便它们可重用且更易于管理。
- en: However, the notebook experience is not always improved when you do that. For
    instance, you still need to import and call these functions throughout your notebook,
    which doesn’t change the notebook experience much at all. So what is the answer
    to augmenting the notebook development experience itself? [IPython Jupyter Magic
    Commands](https://ipython.readthedocs.io/en/stable/interactive/magics.html).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，进行这项操作并不总是能改善笔记本的体验。例如，你仍然需要在整个笔记本中导入并调用这些函数，这样并不会显著改变笔记本的体验。那么，如何增强笔记本开发体验呢？[IPython
    Jupyter 魔法命令](https://ipython.readthedocs.io/en/stable/interactive/magics.html)。
- en: IPython Jupyter Magic commands (e.g. lines in notebook cells starting with `%`
    or `%%`) can decorate a notebook cell, or line, to modify its behavior. Many are
    available by default, including `%timeit` to measure the execution time of the
    cell and `%bash` to execute shell commands, and others are provided by extensions
    [such as](https://pypi.org/project/ipython-sql/) `%sql` [to write SQL queries](https://pypi.org/project/ipython-sql/)
    directly in a cell of your notebook.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: IPython Jupyter魔法命令（例如，笔记本单元中以`%`或`%%`开头的行）可以修饰笔记本单元或行，以修改其行为。许多魔法命令是默认提供的，包括`%timeit`用于测量单元的执行时间，`%bash`用于执行Shell命令，还有一些命令由扩展提供，[例如](https://pypi.org/project/ipython-sql/)
    `%sql` [可以直接在笔记本单元中编写SQL查询](https://pypi.org/project/ipython-sql/)。
- en: In this post, we’ll show how your team can turn any utility function(s) into
    reusable IPython Jupyter magics for a better notebook experience. As an example,
    we’ll use [Hamilton](https://github.com/dagworks-inc/hamilton), an open source
    library we created, to motivate the creation of a magic that facilitates better
    development ergonomics for using it. You needn’t know what Hamilton is to understand
    this post.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将展示如何让你的团队将任何实用函数转化为可重用的IPython Jupyter魔法，以提供更好的笔记本体验。作为示例，我们将使用我们创建的开源库[Hamilton](https://github.com/dagworks-inc/hamilton)，来促使我们创建一个魔法，帮助改进开发中的使用体验。你不需要了解Hamilton是什么，就能理解本文的内容。
- en: '*Note. Nowadays, there are many flavors of notebooks (*[*Jupyter*](https://jupyter.org/)*,*
    [*VSCode*](https://code.visualstudio.com/docs/datascience/jupyter-notebooks)*,*
    [*Databricks*](https://docs.databricks.com/en/notebooks/index.html)*, etc.), but
    they’re all built on top of IPython. Therefore, the Magics developed should be
    reusable across environments.*'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*注意：如今，有许多种类的笔记本（如[*Jupyter*](https://jupyter.org/)、[*VSCode*](https://code.visualstudio.com/docs/datascience/jupyter-notebooks)、[*Databricks*](https://docs.databricks.com/en/notebooks/index.html)等），但它们都是建立在IPython之上的。因此，开发的Magics应该可以跨环境重用。*'
- en: Understanding IPython Jupyter Magics
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解IPython Jupyter Magics
- en: IPython Jupyter Magics (which we’ll shorten to just Magics) are bits of code
    that can be dynamically loaded into your notebooks. They come in two flavors,
    line and cell magics.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: IPython Jupyter Magics（我们简称为Magics）是可以动态加载到笔记本中的代码片段。它们有两种类型，单行魔法和单元魔法。
- en: '***Line magic***, as it suggests, operates on a single line. That is, it only
    takes in as input what is specified on the same line. They are denoted by a single
    `%` in front of the command.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '***单行魔法***，顾名思义，作用于单独的一行。也就是说，它只处理该行上指定的输入。它们通过命令前的单个`%`表示。'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '***Cell magic***, as it suggests, takes the entire contents of a cell. They
    are denoted by a double ``%%``in front of the command.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '***单元魔法***，顾名思义，作用于整个单元的内容。它们通过命令前的双``%%``表示。'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Jupyter comes with [several in-built magic commands](https://ipython.readthedocs.io/en/stable/interactive/magics.html).
    You can think of them as “command line” tools that have access to the entire notebook
    context. This allows them to interact with the notebook output (e.g., printing
    results, displaying a PNG, rendering HTML), but also to modify the state of existing
    variables and write to other code and markdown cells!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter自带[一些内置魔法命令](https://ipython.readthedocs.io/en/stable/interactive/magics.html)。你可以将它们看作是“命令行”工具，可以访问整个笔记本的上下文。这使得它们不仅能够与笔记本的输出进行交互（例如，打印结果、显示PNG、渲染HTML），还可以修改现有变量的状态，并写入其他代码和Markdown单元！
- en: This is great for developing internal tooling because it can abstract away and
    hide from the user unnecessary complexities, making the experience “magical”.
    This is a powerful tool to develop your own “platform efforts”, especially for
    MLOps and LLMOps purposes, as you can hide what is being integrated with from
    having to be exposed in the notebook. It therefore also means that notebooks don’t
    need to be updated if this abstracted code changes under-the-hood, since it can
    all be hidden in a python dependency upgrade.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于开发内部工具非常有用，因为它可以抽象并隐藏不必要的复杂性，给用户带来“神奇”的体验。这是开发你自己“平台工作”的强大工具，特别适用于MLOps和LLMOps目的，因为你可以将集成的内容隐藏，不需要在笔记本中暴露。因此，这也意味着如果这些抽象代码在幕后发生变化，笔记本不需要更新，因为所有内容都可以隐藏在Python依赖项的升级中。
- en: Workflow example
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作流示例
- en: Magic commands have the potential to make your workflow simpler and faster.
    For example, if you prefer to develop in a notebook before moving your code to
    a Python module, this can involve error-prone cutting & pasting. For this purpose,
    the magic `%%writefile my_module.py` will directly create a file and copy your
    cell content into it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法命令有可能让你的工作流程变得更简单、更快捷。例如，如果你更倾向于先在笔记本中开发，然后再将代码转移到 Python 模块中，这可能涉及容易出错的剪切和粘贴。为此，魔法命令`%%writefile
    my_module.py`将直接创建一个文件，并将你的单元格内容复制到其中。
- en: On the opposite hand, you might prefer developing in `my_module.py` in your
    IDE and then load it into a notebook to test your functions. This usually involves
    restarting the notebook kernel to refresh the module imports, which can be tedious.
    In that case, `%autoreload` will automatically reload every module imports before
    every cell execution, removing this friction point!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，你可能更喜欢在 IDE 中开发 `my_module.py`，然后将其加载到笔记本中以测试你的函数。这通常需要重启笔记本内核来刷新模块导入，这可能会很麻烦。在这种情况下，`%autoreload`
    将在每次单元格执行之前自动重新加载所有模块导入，从而消除这个摩擦点！
- en: The Need for Custom Magic Commands
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义魔法命令的需求
- en: In the post [How well-structured should your data code be?](https://blog.dagworks.io/p/how-well-structured-should-your-data),
    it is argued that standardization/centralization/“platform” efforts, should change
    the shape of the “move quickly vs. built-to-last” trade-off curve for the better.
    A concrete tactic to change this trade-off is to implement better tooling. Better
    tooling should make what used to be complex, simpler and accessible. Which is
    exactly what you can achieve with your own custom Magic commands, which translates
    to less of a trade-off to be made.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在文章 [数据代码应该有多结构化？](https://blog.dagworks.io/p/how-well-structured-should-your-data)
    中，提到标准化/集中化/“平台”工作应当改善“快速推进与打造持久系统”之间的取舍曲线。改变这一取舍的一个具体策略是实现更好的工具支持。更好的工具应该使曾经复杂的事情变得更简单并且易于访问。这正是通过自定义魔法命令可以实现的目标，它意味着你可以减少需要做出的取舍。
- en: A Hamilton Magic Command
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个 Hamilton 魔法命令
- en: '*For those unfamiliar with Hamilton we point readers to the many TDS articles
    with it (e.g.* [*origin story*](/functions-dags-introducing-hamilton-a-microframework-for-dataframe-generation-more-8e34b84efc1d)*,*
    [*Production prompt engineering*](/llmops-production-prompt-engineering-patterns-with-hamilton-5c3a20178ad2)*,*
    [*Simplifying Airflow DAG Creation & Maintenance*](https://medium.com/towards-data-science/simplify-airflow-dag-creation-and-maintenance-with-hamilton-in-8-minutes-e6e48c9c2cb0),[*Tidy
    Production Pandas*](https://medium.com/towards-data-science/tidy-production-pandas-with-hamilton-3b759a2bf562),
    *etc.) as well as* [*https://www.tryhamilton.dev/*](https://www.tryhamilton.dev/)*.*'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*对于那些不熟悉 Hamilton 的读者，我们建议阅读许多相关的 TDS 文章（例如* [*起源故事*](/functions-dags-introducing-hamilton-a-microframework-for-dataframe-generation-more-8e34b84efc1d)*，*
    [*生产提示工程*](/llmops-production-prompt-engineering-patterns-with-hamilton-5c3a20178ad2)*，*
    [*简化 Airflow DAG 创建与维护*](https://medium.com/towards-data-science/simplify-airflow-dag-creation-and-maintenance-with-hamilton-in-8-minutes-e6e48c9c2cb0)，[*整洁的生产
    Pandas*](https://medium.com/towards-data-science/tidy-production-pandas-with-hamilton-3b759a2bf562)，*等等。）以及*
    [*https://www.tryhamilton.dev/*](https://www.tryhamilton.dev/)*。*'
- en: '[Hamilton](https://github.com/dagworks-inc/hamilton) is an open source tool
    that we created at Stitch Fix back in 2019\. Hamilton helps data scientists and
    engineers define testable, modular, self-documenting dataflows, that encode lineage
    and metadata. Hamilton achieves these traits in part by requiring Python functions
    to be curated into modules.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[Hamilton](https://github.com/dagworks-inc/hamilton) 是我们在 2019 年在 Stitch Fix
    创建的一个开源工具。Hamilton 帮助数据科学家和工程师定义可测试、模块化、自文档化的数据流，并对其进行血统追踪和元数据编码。Hamilton 通过要求
    Python 函数被整理成模块来实现这些特性。'
- en: 'Nonetheless, the typical Jupyter notebook usage pattern leads to code residing
    in the notebook and nowhere else posing a developer ergonomics challenge:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，典型的 Jupyter 笔记本使用模式会导致代码只存在于笔记本中，无法在其他地方访问，这给开发者带来了人机工程学挑战：
- en: '***How can we enable someone to create Python modules easily and quickly from
    a notebook, while also improving the development experience?***'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***我们如何使人们能够轻松快捷地从笔记本创建 Python 模块，同时改善开发体验？***'
- en: 'The Hamilton developer loop looks like the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Hamilton 开发循环如下所示：
- en: '![](../Images/b08c25854dbcff9a783f416a19bac357.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b08c25854dbcff9a783f416a19bac357.png)'
- en: Hamilton development loop. Image by author.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Hamilton 开发循环。图像来自作者。
- en: Take a minute to read this loop. The loop shows that anytime a code change is
    made, the user would need to not only re-import the Python module, but also recreate
    the Driver object as well. Since notebooks allow cell execution in any order,
    it can become difficult for the user to track which version is loaded for each
    module and what is currently loaded in a Driver. This burden lies on the user
    and might require restarting the kernel, which would lose other computations (thankfully,
    Hamilton can be set up to execute complex dataflows and resume where you left-off…),
    which is less than ideal.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 花点时间阅读这个循环。该循环显示了每次代码更改时，用户不仅需要重新导入 Python 模块，还需要重新创建驱动程序对象。由于笔记本允许按任意顺序执行单元格，这可能会让用户很难跟踪每个模块的版本以及驱动程序中当前加载的内容。这项负担由用户承担，并可能需要重启内核，这会丢失其他计算结果（幸运的是，Hamilton
    可以设置为执行复杂的数据流并从上次停止的地方继续……），这并不是理想的情况。
- en: 'Here’s how we could improve this loop using Magics:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们如何使用魔法命令来改进这个循环：
- en: Create a “temporary” Python module from the functions defined in a cell, and
    import this new module directly in the notebook.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从单元格中定义的函数创建一个“临时”Python模块，并直接在笔记本中导入这个新模块。
- en: Automatically visualize the directed acyclic graph (DAG) defined by the functions
    to reduce visualization boilerplate code.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动可视化函数定义的有向无环图（DAG），减少可视化样板代码。
- en: Rebuild all Hamilton Drivers found in the notebook with updated modules, saving
    the user time to have to remember to manually recreate drivers to pick up the
    change.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新构建笔记本中所有的 Hamilton 驱动程序，并更新模块，节省用户记得手动重新创建驱动程序来接收变更的时间。
- en: What we’re going to implement
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们将要实现的功能
- en: 'We would like a command that looks like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望命令看起来像这样：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'And cause the following behavior after running the cell:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 运行单元格后，产生以下行为：
- en: Create a module with the name my_module in the notebook.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在笔记本中创建名为 my_module 的模块。
- en: Display the DAG constructed by the functions within the cell.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示由单元格内的函数构建的有向无环图（DAG）。
- en: Rebuild any downstream drivers that used my_module in *other cells,* saving
    the user having to re-run those cells.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新构建任何使用了 my_module 的下游驱动程序，*避免用户需要重新运行这些单元格*。
- en: As you can see this is a non-trivial Magic command, since we’re adjusting output
    of the cell and state of the notebook.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这是一个非平凡的魔法命令，因为我们正在调整单元格的输出和笔记本的状态。
- en: Building a Custom Magic Command
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自定义魔法命令
- en: Here we lay out step by step how to create a Magic Command. To avoid only showing
    a trivial “hello world” example, we’ll explain how we built Hamilton’s `%%cell_to_module`
    magic as well.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们一步步地说明如何创建魔法命令。为了避免只展示一个平凡的“hello world”例子，我们还将解释如何构建 Hamilton 的 `%%cell_to_module`
    魔法命令。
- en: 'Step 1: Setting up your code'
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤 1：设置你的代码
- en: Create a new Python module where we’ll write the magic code and a jupyter notebook
    to try it. The name of this module (i.e., `.py` file) will be the name of the
    extension you’ll need to load.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的 Python 模块，在其中编写魔法命令代码，并创建一个 Jupyter Notebook 来进行尝试。这个模块（即 `.py` 文件）的名称将是你需要加载的扩展名。
- en: If Jupyter notebook is installed, you have all the required Python dependencies
    already. Then, add libraries you will need for your Magic, in our case Hamilton
    (``pip install sf-hamilton[visualization]``).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装了 Jupyter Notebook，你已经具备了所有必需的 Python 依赖项。然后，添加你需要的库，在我们的案例中是 Hamilton（``pip
    install sf-hamilton[visualization]``）。
- en: 'Step 2: Define your Magic Command'
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤 2：定义你的魔法命令
- en: To define a simple Magic command, you can use functions or objects ([see these
    docs](https://ipython.readthedocs.io/en/stable/config/custommagics.html)). For
    more complex Magics where state is needed, you will need the class approach. We’ll
    use the class based approach here. To start we need to import IPython modules/functions
    and then define a class that inherits `magic.Magics`. Each method decorated with
    `@cell_magic` or `@line_magic` defines a new magic, and the class can house however
    many of them.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个简单的魔法命令，你可以使用函数或对象（[查看这些文档](https://ipython.readthedocs.io/en/stable/config/custommagics.html)）。对于需要状态的复杂魔法命令，你将需要使用类方法。在这里我们将使用基于类的方法。首先，我们需要导入
    IPython 模块/函数，然后定义一个继承自 `magic.Magics` 的类。每个使用 `@cell_magic` 或 `@line_magic` 装饰器的方法都定义了一个新的魔法命令，类可以包含任意数量的这些方法。
- en: 'To start, your code should look like this at a high level:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你的代码在高层次上应该是这样的：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For stateful magic, it can be useful to add an `__init__()` method (i.e. constructor).
    It is not needed in our case.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于有状态的魔法命令，添加 `__init__()` 方法（即构造函数）可能很有用。但在我们的情况下并不需要。
- en: By inheriting from `magic.Magics`, this class has access to several important
    fields including self.shell, which is the [IPython InteractiveShell](https://ipython.readthedocs.io/en/stable/api/generated/IPython.core.interactiveshell.html#IPython.core.interactiveshell.InteractiveShell)
    that underlies the notebook. Using it allows you to pull and introspect variables
    loaded in the active Jupyter notebook.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过继承自`magic.Magics`，此类可以访问多个重要字段，包括self.shell，这是支撑笔记本的[IPython InteractiveShell](https://ipython.readthedocs.io/en/stable/api/generated/IPython.core.interactiveshell.html#IPython.core.interactiveshell.InteractiveShell)。使用它可以让你提取并检查当前Jupyter笔记本中加载的变量。
- en: 'Our Hamilton Magic Command will start off looking like:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Hamilton Magic命令将首先如下所示：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Step 3: Parsing input arguments'
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤3：解析输入参数
- en: Next, we specify what arguments will be passed and how to parse them. For each
    argument, add a *@argument*, and add a *@magic_arguments()* decorator on top.
    They follow a similar pattern to [argparse](https://docs.python.org/3/library/argparse.html)
    arguments if you’re familiar, but they aren’t quite as fully featured. Within
    the function, you need to call the *parse_argstring()* function. It receives the
    function itself to read instructions from the decorators, and `*line*` (the one
    with `%` or `%%`) which contains the arguments values.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们指定将传递哪些参数以及如何解析它们。对于每个参数，添加`@argument`，并在顶部添加`@magic_arguments()`装饰器。如果你熟悉[argparse](https://docs.python.org/3/library/argparse.html)参数，它们遵循类似的模式，但功能不完全一样。在函数内部，你需要调用*parse_argstring()*函数。它接收函数本身以读取来自装饰器的指令，以及`*line*`（包含`%`或`%%`）其中包含参数值。
- en: 'Our command would start to look like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的命令将开始看起来像这样：
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note, for required arguments, there is no facility in *magic_arguments()* for
    that, so you need to manually check in the body of the function for correctness,
    etc.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于必需的参数，*magic_arguments()*中没有为此提供设施，因此你需要在函数体内手动检查正确性等。
- en: 'Continuing our dissection of the Hamilton Magic example, the method on the
    class now looks like the following; we use many optional arguments:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 继续解析Hamilton Magic示例，类中的方法现在看起来如下；我们使用了许多可选参数：
- en: '[PRE6]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note, the extra arguments to *@argument* are useful for when someone uses `?`
    to query what the magic does. I.e. `?%%cell_to_module` will show documentation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，额外的`@argument`参数对于当有人使用`?`查询Magic的功能时非常有用。例如，`?%%cell_to_module`将显示文档。
- en: 'Step 4: Implement the Command’s Logic'
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤4：实现命令的逻辑
- en: 'Now that we have parsed the arguments, we can implement the logic of the magic
    command. There aren’t any particular constraints here and you can write any Python
    code. Skipping a generic example (you have enough to get started from the prior
    step), let’s dig into our Hamilton Magic example. For it, we want to use the arguments
    to determine the desired behavior for the command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经解析了参数，可以实现Magic命令的逻辑。这里没有特别的限制，你可以编写任何Python代码。跳过一个通用的示例（你已经有足够的内容可以从前一步开始），让我们深入探讨Hamilton
    Magic示例。对于它，我们希望使用参数来决定命令的期望行为：
- en: Create the Python module with *module_name*.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建Python模块，命名为*module_name*。
- en: If *— rebuild-driver*, rebuild the drivers, passing in verbosity.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果*— rebuild-driver*，重建驱动程序，并传递详细信息。
- en: If *— config* is present, get that ready.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果*— config*存在，准备好它。
- en: If *— display*, display the DAG.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果*— display*，显示DAG。
- en: 'See comments in the code for explanations:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅代码中的注释以获取解释：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice how we use `self.shell`. This allows us to update and inject variables
    into the notebook. The values returned by the function will be used as “cell output”
    (where you see printed values).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们是如何使用`self.shell`的。这允许我们更新并注入变量到笔记本中。函数返回的值将作为“单元输出”使用（即你看到打印值的地方）。
- en: 'Step 5: Register your Magic Command'
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤5：注册你的Magic命令
- en: Lastly, we need to tell IPython and the notebook about the Magic Command. Our
    module where our Magic is defined must have the following function to register
    our Magic class, and be able to load our extension. If doing anything stateful,
    this is where you’d instantiate it.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要告知IPython和笔记本关于Magic命令的信息。我们定义Magic的模块必须具备以下功能来注册Magic类，并能够加载我们的扩展。如果涉及任何有状态的操作，应该在这里实例化它。
- en: Notice that the argument `ipython` here is the same InteractiveShell available
    through `self.shell` in the class method we defined.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里`ipython`参数与我们定义的类方法中`self.shell`所提供的InteractiveShell是相同的。
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: See the full [Hamilton Magic Command here](https://github.com/DAGWorks-Inc/hamilton/blob/main/hamilton/plugins/jupyter_magic.py).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅完整的[Hamilton Magic命令](https://github.com/DAGWorks-Inc/hamilton/blob/main/hamilton/plugins/jupyter_magic.py)。
- en: Try it out
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尝试一下
- en: 'To load your magic in the notebook, try the following:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要在笔记本中加载你的魔法命令，请尝试以下命令：
- en: '`%load_ext my_magic`'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`%load_ext my_magic`'
- en: 'in the case of our Hamilton Magic we’d load it via:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的 Hamilton 魔法命令，我们可以通过以下方式加载：
- en: '`%load_ext hamilton.plugins.jupyter_magic`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`%load_ext hamilton.plugins.jupyter_magic`'
- en: While you’re developing, use this to reload your updated magic without having
    to restart the notebook kernel.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，使用此命令重新加载你更新后的魔法命令，而无需重启笔记本内核。
- en: '`%reload_ext my_magic`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`%reload_ext my_magic`'
- en: 'You can then invoke the magic commands defined on a per line or cell basis.
    So for the Hamilton one we’d now be able to do:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以在每一行或单元格的基础上调用定义的魔法命令。因此，对于 Hamilton，我们现在可以执行：
- en: '`%%?cell_to_module`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`%%?cell_to_module`'
- en: 'Here’s an example use of it, with it injecting the visualization:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用示例，展示了它如何注入可视化内容：
- en: '![](../Images/d7005592ce1910bd5c6144271f319361.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d7005592ce1910bd5c6144271f319361.png)'
- en: Example showing the magic in action.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 展示魔法命令实际应用的示例。
- en: '![](../Images/678f3c262e4d8d42f81b65d8bcee585f.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/678f3c262e4d8d42f81b65d8bcee585f.png)'
- en: Animated gif of adding functions and hitting enter to refresh the image.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 动画 GIF，展示如何添加函数并按回车刷新图像。
- en: What you’d do next
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你接下来会做什么
- en: In a real world use case, you would most likely version and package your magic
    likely into a library, that you can then manage easily in python environments
    as required. With the Hamilton Magic Command it’s packaged into the Hamilton library,
    and thus to get it, one need only install sf-hamilton and loading the magic command
    would become accessible in the notebook.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际使用案例中，你最有可能将你的魔法命令版本化并打包到一个库中，然后在 Python 环境中根据需要轻松管理。对于 Hamilton 魔法命令，它被打包进了
    Hamilton 库，因此只需安装 sf-hamilton，加载魔法命令后即可在笔记本中访问。
- en: To close
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要关闭
- en: In this post we showed you the steps required to create and load your own IPython
    Jupyter Magic Command. Hopefully you’re now thinking of the common cells/task/actions
    that you perform in a notebook setting, which could be enhanced/simplified/or
    even removed with the addition of a simple Magic!
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们向你展示了创建和加载你自己的 IPython Jupyter 魔法命令所需的步骤。希望你现在已经开始思考在笔记本中常做的单元格/任务/操作，这些操作可以通过添加简单的魔法命令来增强/简化/甚至去除！
- en: To demonstrate a real-life example, we motivated and showed the internals of
    a Hamilton Magic Command to show a command that was built to improve the developer
    experience within a Jupyter notebook, by augmenting the output and changing internal
    state.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示一个现实中的例子，我们动机并展示了一个 Hamilton 魔法命令的内部工作原理，目的是展示一个为了提高 Jupyter Notebook 中开发者体验而设计的命令，通过增强输出并改变内部状态。
- en: We hope that this post helps you get over the hump and create something more
    ergonomic and useful for you and your teams’ Jupyter Notebook experience.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望这篇文章能帮助你克服难关，为你和你的团队的 Jupyter Notebook 体验创建更符合人体工程学的工具。
- en: Some other resources
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他资源
- en: '[Built-in magic commands — IPython 8.21.0 documentation](https://ipython.readthedocs.io/en/stable/interactive/magics.html)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[内建魔法命令 — IPython 8.21.0 文档](https://ipython.readthedocs.io/en/stable/interactive/magics.html)'
- en: '[Defining custom magics — IPython 8.21.0 documentation](https://ipython.readthedocs.io/en/stable/config/custommagics.html)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[定义自定义魔法命令 — IPython 8.21.0 文档](https://ipython.readthedocs.io/en/stable/config/custommagics.html)'
- en: '[1.4\. Creating an IPython extension with custom magic commands](https://ipython-books.github.io/14-creating-an-ipython-extension-with-custom-magic-commands/)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1.4\. 创建一个带有自定义魔法命令的 IPython 扩展](https://ipython-books.github.io/14-creating-an-ipython-extension-with-custom-magic-commands/)'
