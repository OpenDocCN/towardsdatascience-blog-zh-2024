- en: Managing Pivot Table and Excel Charts with VBA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/managing-pivot-table-and-excel-charts-with-vba-3dc5d672dff0?source=collection_archive---------12-----------------------#2024-06-18](https://towardsdatascience.com/managing-pivot-table-and-excel-charts-with-vba-3dc5d672dff0?source=collection_archive---------12-----------------------#2024-06-18)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Save precious hours by automating working with pivot tables and charts using
    VBA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@himalaya.birshrestha?source=post_page---byline--3dc5d672dff0--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page---byline--3dc5d672dff0--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--3dc5d672dff0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--3dc5d672dff0--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page---byline--3dc5d672dff0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--3dc5d672dff0--------------------------------)
    ·9 min read·Jun 18, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: As digitalization and innovation are taking over different domains, working
    with big datasets has become a norm and commonplace in Universities, research
    organizations, and industries. Automating the common tasks can save several hours
    for analysts, so they can spend less time on processing and managing data, and
    more time on the juicy part, which is analyzing and generating insights.
  prefs: []
  type: TYPE_NORMAL
- en: A pivot table is one such tool, which allows generaling several insights from
    stacked datasets. One can perform tons of analysis just by playing with the field
    settings of the pivot table based on the requirements. If someone has numerous
    stacked datasets that can be transformed into pivot tables, how can the pivot
    tables be refreshed automatically? How can one automate the selection of chart
    colors based on the series name and manage other chart elements? This blog post
    gives the answers to such questions by an illustrative example, step by step.
  prefs: []
  type: TYPE_NORMAL
- en: While it could take considerable effort to set up the code in the beginning,
    once it is set up, it can be very handy and time-saving to analysts who work with
    numerous large datasets daily. Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f4ecc8bd15caabeef8b391591514fc84.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Norbert Levajsics](https://unsplash.com/@levajsics?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I took the sample data from the website of [Excel-Easy](https://www.excel-easy.com/data-analysis/pivot-tables.html).
    This is a nice website containing beginner-friendly tutorials on basic Excel and
    VBA functionalities. The dataset contains records of fruit and vegetable sales
    in specific countries in 2016 and 2017\. The dataset contains six fields: Order
    ID, Product, Category, Amount, Date, and Country. I divided this dataset into
    2 csv files called `results1.csv` and `results2.csv` for creating pivot tables.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f5bf4bd47288e4652e7b60d3b12e1dd7.png)'
  prefs: []
  type: TYPE_IMG
- en: Structure of dataset. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'I pulled this dataset in the `RawData` worksheet. I created a dynamic range
    called `raw_data_source` with the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '**=OFFSET(RawData!$A$1, 0, 0, COUNTA(RawData!$A:$A), COUNTA(RawData!$1:$1))**'
  prefs: []
  type: TYPE_NORMAL
- en: The reason for creating a dynamic range was that the size (number of rows) of
    the dataset was different in different CSV files, and I wanted to use the entire
    dataset as source of the pivot table.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/787818780f73d2439d1ba882f8f9a452.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a dynamic named range as source for the pivot table. Illustration by
    Author.
  prefs: []
  type: TYPE_NORMAL
- en: Pivot tables and charts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dataset in the `raw_data_source` range in the `RawData` sheet was used as
    a data source to create two simple pivot tables and charts.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/afe820de943480d30e9dd8eb9d2c2e50.png)'
  prefs: []
  type: TYPE_IMG
- en: Specifying the source of the pivot table. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The first one portrayed total fruits and vegetable sales by individual products
    filterable by country with the field settings as shown.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3ce903eacb27581bcafc363ed7fc36d4.png)'
  prefs: []
  type: TYPE_IMG
- en: First pivot chart and its settings. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The second one portrayed total fruit and vegetable sales by countries.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/db3162aae0e2636485d4dfa74618719c.png)'
  prefs: []
  type: TYPE_IMG
- en: Second pivot chart and its settings. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Automating refreshing pivot tables based on a new dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this step, I wanted to automate the refreshing of the datasets from the
    file I specified. I created a placeholder in the `Admin` sheet to place the path
    of the CSV data whose dataset I wanted to pull and refresh the pivot tables with.
    I named the cell `A2` as `filepath` as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d18a0b9e83d709020bfa5db1e8f8755a.png)'
  prefs: []
  type: TYPE_IMG
- en: Placeholder for file pathname with dataset. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: The code for this step is given below in the `UpdateRawData` subroutine. I declared
    the variables `wb`, `ws_admin`, `ws_rawdata`, and `filepath` for the names of
    the workbook, Admin sheet, RawData sheet, and path of the file containing the
    dataset respectively. First I cleared the contents of the RawData sheet. Then
    I went to the source workbook based on the filename, selected the corresponding
    sheet, copied its contents, returned to the `ws_rawdata` sheet, and pasted the
    contents as values. Finally, I refreshed the workbook using the code `wb.RefreshAll`
    that refreshed the entire workbook including the sheets with the pivot table and
    chart respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: I linked this subroutine to the **Refresh files and charts** button. Once I
    specified the filename in the placeholder and clicked on the button, the dataset
    and pivot tables were updated automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Creating a colors table using VBA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I created a table in the `Admin` sheet containing the list of the specific fruits
    and vegetables available in the dataset. In column F, I specified the tentative
    hexadecimal color codes for the color of each fruit or vegetable. I wanted to
    use these colors to update the colors in pivot charts. First, I wanted to paint
    column F with the color I specified in each cell.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cef0874d1ee3959d227d299d7955504e.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a list of available fruits and vegetables in the dataset along with
    their corresponding hexadecimal color codes. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Hexadecimal color code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The hexadecimal code for each color is a 6-digit hexadecimal number (0 to 9
    or A to F) with base 16\. In a hexadecimal color code `RRGGBB`, each pair of two
    letters represents the various shades of red, green, and blue color. In a Red
    Green Blue (RGB) system, the value of each shade ranges from 0 to 255.
  prefs: []
  type: TYPE_NORMAL
- en: For example, for a hexadecimal color code `ffab23`, I calculated the corresponding
    RGB code with the following calculation. `ffab23` in the hexadecimal system translates
    to (255, 171, 35) in the RGB system referring to the Red, Green, and Blue color
    components respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4e0c4c79ddb75cf914723fe4accf4610.png)'
  prefs: []
  type: TYPE_IMG
- en: Calculating RGB code for a hexadecimal color code ffab23 manually. Illustration
    by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can also be visualized by going to the Custom Colors option in Excel as
    shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6aaf8d00e234ed7ed48d7edb7a2a7d8a.png)'
  prefs: []
  type: TYPE_IMG
- en: Demonstrating RGB components and actual color for the hexadecimal color code
    ffab23\. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: In Excel VBA, using `**&H**` in combination with a value implies that it is
    a hexadecimal number and the `Val()` function returns the corresponding decimal
    number. In the Immediate Window below, `r`, `g`, and `b` represent the corresponding
    decimal values for each shade of Red, Green, and Blue respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cb9331018b2f160b63822fa597e82fc8.png)'
  prefs: []
  type: TYPE_IMG
- en: Immediate window displaying how the corresponding decimal values are derived
    in VBA from hexadecimal code. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: In the code below, I created a named range `color_code_range` for the table
    containing the hexadecimal color code for each fruit or vegetable. I looped through
    each cell in the selection, derived the red, green, and blue components in decimal
    numbers, and painted the interior of the cell with the same RGB color code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When I ran the above subroutine, the column F gets painted with the same color
    as the color code as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c271a6cf5daa5b7f63d663750f671282.png)'
  prefs: []
  type: TYPE_IMG
- en: Painting the cells with the color code mentioned in it. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: If the color code is changed, and the code is run again, it will generate new
    colors in the table. Isn’t that cool?
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Working with a dictionary in VBA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the next step, I wanted to assign the colors in the pivot charts based on
    the custom colors I chose above. For this purpose, I created a dictionary containing
    the product name as keys and the corresponding hexadecimal color codes as values.
  prefs: []
  type: TYPE_NORMAL
- en: The pre-requisite for creating a dictionary object in VBA is to activate the
    Microsoft Scripting Runtime beforehand. For this, you can go to Tools -> References
    -> Check the box next to Microsoft Scripting Runtime and click on ok.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1bbd6b917235f828e43963dc49cd8128.png)'
  prefs: []
  type: TYPE_IMG
- en: Pre-requisite for working with a dictionary in Excel VBA. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: In the code below, I created a dictionary object called `colorMap`. I looped
    through the Range E2:F10 in the `Admin` sheet. I added the contents in column
    E as keys, and the contents in column F as their corresponding values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the second for loop above, I looped through each key of the colorMap dictionary
    and printed the keys and values in the immediate window as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a30fc8c8a5eeefcdc4e7761894af41bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Printing the contents of the colorMap dictionary object. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Managing pivot chart elements using VBA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Based on the learnings from the previous steps, I wanted to go one step further
    and update the pivot chart elements using VBA. In this case, I wanted to set the
    chart title automatically based on a cell value and apply the colors of specific
    fruits and vegetables defined in the `Admin` sheet to the pivot charts.
  prefs: []
  type: TYPE_NORMAL
- en: In this step, I assigned `Plot1` and `Plot2` sheets as an array called `sheetNames`.
    I declared `chartObj` as ChartObject. Within each sheet, I looped through each
    ChartObject among all ChartObjects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** [ChartObject](https://learn.microsoft.com/en-us/office/vba/api/excel.chartobject)
    acts as a container for a [Chart](https://learn.microsoft.com/en-us/office/vba/api/excel.chart(object))
    object in VBA that controls the size and appearance of the embedded chart in a
    worksheet. It is a member of the [ChartObjects](https://learn.microsoft.com/en-us/office/vba/api/excel.chartobjects)
    collection. It is important to understand the differences in the methods and properties
    of each of these objects in VBA.'
  prefs: []
  type: TYPE_NORMAL
- en: After going through each chartObj, I set the title for each chart based on the
    value in cell E1\. Next, I looped through each series in the overall Series Collection
    of the Chart object. I assigned the series name (i.e., name of fruit or vegetable)
    to a variable called `itemName`, and got the corresponding color code from the
    `colorMap` dictionary. Similar to step 2, I got the red, green, and blue components
    of the color code in decimal numbers, and filled the series bar with the RGB colors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: An illustration of the use of this code is depicted below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cdfe81230c6b410e79176524e22ccd66.png)'
  prefs: []
  type: TYPE_IMG
- en: Transformation of pivot chart elements using the VBA code. Illustration by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this post, I illustrated how one can customize and automate working with
    pivot tables and charts using VBA. I have demonstrated the automation of four
    key tasks: refreshing pivot tables and charts with new datasets; creating color
    tables based on hexadecimal color code; how to work with dictionaries in VBA;
    and managing and updating pivot chart elements using VBA. In the second step,
    I have elaborated the conversion of hexadecimal color codes to the corresponding
    RGB color codes using both Excel and VBA, and used this technique in the subsequent
    steps.'
  prefs: []
  type: TYPE_NORMAL
- en: The code and Excel file for this post are present in this GitHub [repository](https://github.com/hbshrestha/Data_Analytics).
    Thank you for reading!
  prefs: []
  type: TYPE_NORMAL
