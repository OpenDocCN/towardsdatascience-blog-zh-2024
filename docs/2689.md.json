["```py\nfrom langchain_community.graphs import Neo4jGraph\n\ngraph = Neo4jGraph(\n    url=\"bolt://54.87.130.140:7687\",\n    username=\"neo4j\",\n    password=\"cables-anchors-directories\",\n    refresh_schema=False\n)\n```", "```py\nclass Node(BaseNode):\n    id: str = Field(..., description=\"Name or human-readable unique identifier\")\n    label: str = Field(..., description=f\"Available options are {enum_values}\")\n    properties: Optional[List[Property]]\n```", "```py\nclass Relationship(BaseRelationship):\n    source_node_id: str\n    source_node_label: str = Field(..., description=f\"Available options are {enum_values}\")\n    target_node_id: str\n    target_node_label: str = Field(..., description=f\"Available options are {enum_values}\")\n    type: str = Field(..., description=f\"Available options are {enum_values}\")\n    properties: Optional[List[Property]]\n```", "```py\nclass Property(BaseModel):\n    \"\"\"A single property consisting of key and value\"\"\"\n    key: str = Field(..., description=f\"Available options are {enum_values}\")\n    value: str\n```", "```py\nYou are a top-tier algorithm designed for extracting information in structured formats to build a knowledge graph. Your task is to identify the entities and relations specified in the user prompt from a given text and produce the output in JSON format. This output should be a list of JSON objects, with each object containing the following keys:\n\n- **\"head\"**: The text of the extracted entity, which must match one of the types specified in the user prompt.\n- **\"head_type\"**: The type of the extracted head entity, selected from the specified list of types.\n- **\"relation\"**: The type of relation between the \"head\" and the \"tail,\" chosen from the list of allowed relations.\n- **\"tail\"**: The text of the entity representing the tail of the relation.\n- **\"tail_type\"**: The type of the tail entity, also selected from the provided list of types.\n\nExtract as many entities and relationships as possible. \n\n**Entity Consistency**: Ensure consistency in entity representation. If an entity, like \"John Doe,\" appears multiple times in the text under different names or pronouns (e.g., \"Joe,\" \"he\"), use the most complete identifier consistently. This consistency is essential for creating a coherent and easily understandable knowledge graph.\n\n**Important Notes**:\n- Do not add any extra explanations or text.\n```", "```py\nexamples = [\n    {\n        \"text\": (\n            \"Adam is a software engineer in Microsoft since 2009, \"\n            \"and last year he got an award as the Best Talent\"\n        ),\n        \"head\": \"Adam\",\n        \"head_type\": \"Person\",\n        \"relation\": \"WORKS_FOR\",\n        \"tail\": \"Microsoft\",\n        \"tail_type\": \"Company\",\n    },\n    {\n        \"text\": (\n            \"Adam is a software engineer in Microsoft since 2009, \"\n            \"and last year he got an award as the Best Talent\"\n        ),\n        \"head\": \"Adam\",\n        \"head_type\": \"Person\",\n        \"relation\": \"HAS_AWARD\",\n        \"tail\": \"Best Talent\",\n        \"tail_type\": \"Award\",\n    },\n...\n]\n```", "```py\nfrom langchain_core.documents import Document\n\ntext = \"\"\"\nMarie Curie, 7 November 1867 – 4 July 1934, was a Polish and naturalised-French physicist and chemist who conducted pioneering research on radioactivity.\nShe was the first woman to win a Nobel Prize, the first person to win a Nobel Prize twice, and the only person to win a Nobel Prize in two scientific fields.\nHer husband, Pierre Curie, was a co-winner of her first Nobel Prize, making them the first-ever married couple to win the Nobel Prize and launching the Curie family legacy of five Nobel Prizes.\nShe was, in 1906, the first woman to become a professor at the University of Paris.\nAlso, Robin Williams.\n\"\"\"\ndocuments = [Document(page_content=text)]\n```", "```py\nfrom langchain_openai import ChatOpenAI\nimport getpass\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI api key\")\n\nllm = ChatOpenAI(model='gpt-4o')\n```", "```py\nfrom langchain_experimental.graph_transformers import LLMGraphTransformer\n\nno_schema = LLMGraphTransformer(llm=llm)\n```", "```py\ndata = await no_schema.aconvert_to_graph_documents(documents)\n```", "```py\n[\n    GraphDocument(\n        nodes=[\n            Node(id=\"Marie Curie\", type=\"Person\", properties={}),\n            Node(id=\"Pierre Curie\", type=\"Person\", properties={}),\n            Node(id=\"Nobel Prize\", type=\"Award\", properties={}),\n            Node(id=\"University Of Paris\", type=\"Organization\", properties={}),\n            Node(id=\"Robin Williams\", type=\"Person\", properties={}),\n        ],\n        relationships=[\n            Relationship(\n                source=Node(id=\"Marie Curie\", type=\"Person\", properties={}),\n                target=Node(id=\"Nobel Prize\", type=\"Award\", properties={}),\n                type=\"WON\",\n                properties={},\n            ),\n            Relationship(\n                source=Node(id=\"Marie Curie\", type=\"Person\", properties={}),\n                target=Node(id=\"Nobel Prize\", type=\"Award\", properties={}),\n                type=\"WON\",\n                properties={},\n            ),\n            Relationship(\n                source=Node(id=\"Marie Curie\", type=\"Person\", properties={}),\n                target=Node(\n                    id=\"University Of Paris\", type=\"Organization\", properties={}\n                ),\n                type=\"PROFESSOR\",\n                properties={},\n            ),\n            Relationship(\n                source=Node(id=\"Pierre Curie\", type=\"Person\", properties={}),\n                target=Node(id=\"Nobel Prize\", type=\"Award\", properties={}),\n                type=\"WON\",\n                properties={},\n            ),\n        ],\n        source=Document(\n            metadata={\"id\": \"de3c93515e135ac0e47ca82a4f9b82d8\"},\n            page_content=\"\\nMarie Curie, 7 November 1867 – 4 July 1934, was a Polish and naturalised-French physicist and chemist who conducted pioneering research on radioactivity.\\nShe was the first woman to win a Nobel Prize, the first person to win a Nobel Prize twice, and the only person to win a Nobel Prize in two scientific fields.\\nHer husband, Pierre Curie, was a co-winner of her first Nobel Prize, making them the first-ever married couple to win the Nobel Prize and launching the Curie family legacy of five Nobel Prizes.\\nShe was, in 1906, the first woman to become a professor at the University of Paris.\\nAlso, Robin Williams!\\n\",\n        ),\n    )\n]\n```", "```py\nno_schema_prompt = LLMGraphTransformer(llm=llm, ignore_tool_usage=True)\ndata = await no_schema.aconvert_to_graph_documents(documents)\n```", "```py\nallowed_nodes = [\"Person\", \"Organization\", \"Location\", \"Award\", \"ResearchField\"]\nnodes_defined = LLMGraphTransformer(llm=llm, allowed_nodes=allowed_nodes)\ndata = await allowed_nodes.aconvert_to_graph_documents(documents)\n```", "```py\nallowed_nodes = [\"Person\", \"Organization\", \"Location\", \"Award\", \"ResearchField\"]\nallowed_relationships = [\"SPOUSE\", \"AWARD\", \"FIELD_OF_RESEARCH\", \"WORKS_AT\", \"IN_LOCATION\"]\nrels_defined = LLMGraphTransformer(\n  llm=llm, \n  allowed_nodes=allowed_nodes,\n  allowed_relationships=allowed_relationships\n)\ndata = await rels_defined.aconvert_to_graph_documents(documents)\n```", "```py\nallowed_nodes = [\"Person\", \"Organization\", \"Location\", \"Award\", \"ResearchField\"]\nallowed_relationships = [\n    (\"Person\", \"SPOUSE\", \"Person\"),\n    (\"Person\", \"AWARD\", \"Award\"),\n    (\"Person\", \"WORKS_AT\", \"Organization\"),\n    (\"Organization\", \"IN_LOCATION\", \"Location\"),\n    (\"Person\", \"FIELD_OF_RESEARCH\", \"ResearchField\")\n]\nrels_defined = LLMGraphTransformer(\n  llm=llm, \n  allowed_nodes=allowed_nodes,\n  allowed_relationships=allowed_relationships\n)\ndata = await rels_defined.aconvert_to_graph_documents(documents)\n```", "```py\nallowed_nodes = [\"Person\", \"Organization\", \"Location\", \"Award\", \"ResearchField\"]\nallowed_relationships = [\n    (\"Person\", \"SPOUSE\", \"Person\"),\n    (\"Person\", \"AWARD\", \"Award\"),\n    (\"Person\", \"WORKS_AT\", \"Organization\"),\n    (\"Organization\", \"IN_LOCATION\", \"Location\"),\n    (\"Person\", \"FIELD_OF_RESEARCH\", \"ResearchField\")\n]\nnode_properties=True\nrelationship_properties=True\nprops_defined = LLMGraphTransformer(\n  llm=llm, \n  allowed_nodes=allowed_nodes,\n  allowed_relationships=allowed_relationships,\n  node_properties=node_properties,\n  relationship_properties=relationship_properties\n)\ndata = await props_defined.aconvert_to_graph_documents(documents)\ngraph.add_graph_documents(data)\n```", "```py\nallowed_nodes = [\"Person\", \"Organization\", \"Location\", \"Award\", \"ResearchField\"]\nallowed_relationships = [\n    (\"Person\", \"SPOUSE\", \"Person\"),\n    (\"Person\", \"AWARD\", \"Award\"),\n    (\"Person\", \"WORKS_AT\", \"Organization\"),\n    (\"Organization\", \"IN_LOCATION\", \"Location\"),\n    (\"Person\", \"FIELD_OF_RESEARCH\", \"ResearchField\")\n]\nnode_properties=[\"birth_date\", \"death_date\"]\nrelationship_properties=[\"start_date\"]\nprops_defined = LLMGraphTransformer(\n  llm=llm, \n  allowed_nodes=allowed_nodes,\n  allowed_relationships=allowed_relationships,\n  node_properties=node_properties,\n  relationship_properties=relationship_properties\n)\ndata = await props_defined.aconvert_to_graph_documents(documents)\ngraph.add_graph_documents(data)\n```", "```py\nLLMGraphTransformer(\n  llm=llm, \n  allowed_nodes=allowed_nodes,\n  allowed_relationships=allowed_relationships,\n  strict_mode=False\n)\n```", "```py\ngraph.add_graph_documents(graph_documents)\n```", "```py\ngraph.add_graph_documents(graph_documents, baseEntityLabel=True)\n```", "```py\ngraph.add_graph_documents(graph_documents, include_source=True)\n```"]