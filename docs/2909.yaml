- en: The Arcane Network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/the-arcane-network-95d3f19749be?source=collection_archive---------3-----------------------#2024-12-02](https://towardsdatascience.com/the-arcane-network-95d3f19749be?source=collection_archive---------3-----------------------#2024-12-02)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/4302fc9ae4ee9be837e375bae43e5b52.png)'
  prefs: []
  type: TYPE_IMG
- en: How to use network science and Python to map out the popular show
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@janosovm?source=post_page---byline--95d3f19749be--------------------------------)[![Milan
    Janosov](../Images/b7ede67b165cdd368d96f13f46c68ccb.png)](https://medium.com/@janosovm?source=post_page---byline--95d3f19749be--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--95d3f19749be--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--95d3f19749be--------------------------------)
    [Milan Janosov](https://medium.com/@janosovm?source=post_page---byline--95d3f19749be--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--95d3f19749be--------------------------------)
    ·7 min read·Dec 2, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: The second season of *Arcane*, a recent blockbuster series on Netflix based
    on the universe of one of the most popular online video games ever, League of
    Legends, is set in a fantasy world with heavy steampunk design, closed with astonishing
    visuals and a record-breaking budget. As a good network and data scientist with
    a particular interest in turning pop cultural items into data visualization, this
    was all I needed after finishing the closing season to map out the hidden connections
    and turn the storyline of Arcane into a network visualization — using Python.
    Hence, by the end of this tutorial, you will have hands-on skills on how to create
    and visualize the network behind Arcane.
  prefs: []
  type: TYPE_NORMAL
- en: However, these skills and methods are absolutely not specific to this story.
    In fact, they highlight the general approach network science provides to map out,
    design, visualize, and interpret networks of any complex system. These systems
    can range from transportation and COVID-19 spreading network patterns to brain
    networks to various social networks, such as that of the Arcane series.
  prefs: []
  type: TYPE_NORMAL
- en: '*All images created by the author.*'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Collecting the list of characters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since here we are going to map out the connections behind all characters, first,
    we need to get a list of each character. For this, the Arcane [fan wiki](https://arcane.fandom.com/wiki/Category:Characters)
    site is an excellent source of free-to-use information (CC BY-SA 3.0), which we
    can easily access by simple web scraping techniques. Namely, we will use urllib
    to download, and with BeautifulSoup, we will extract the names and fan wiki profile
    URLs of each character listed on the main character page.
  prefs: []
  type: TYPE_NORMAL
- en: 'First downloading the character listing site’s html:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then, I extracted all the potentially relevant names. One can easily figure
    out what tags to feed the parsed html stored in the ‘soup’ variable by just right-clicking
    on a desired element (in this case, a character profile) and selecting the element
    inspection option in any browser.
  prefs: []
  type: TYPE_NORMAL
- en: From this, I learned that the name and url of a character are stored in a line
    which has ‘title=’ in it, but does not contain ‘:’ (which corresponds to categories).
    Additionally, I created a still_character flag, which helped me decide which subpages
    on the character listing page still belong to legitimate characters of the story.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code block will create a dictionary (‘names_urls’) which stores
    the name and url of each character as key-value pairs. Now let’s have a quick
    look at what we have and print the name-url dictionary and the total length of
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A sample of the output from this code block, where we can text each link —
    pointing to the biography profile of each character:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3ad33d86437ab3146554e91a80d70500.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Which code cell returns the result of 67, implying the total number of named
    characters we have to deal with. This means we are already done with the first
    task — we have a comprehensive list of characters as well as easy access to their
    full textual profile on their fan wiki sites.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Collecting profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To map out the connections between two characters, we figure out a way to quantify
    the relationship between each two characters. To capture this, I rely on how frequently
    the two character’s biographies reference each other. On the technical end, to
    achieve this, we will need to collect these complete biographies we just got the
    links to. We will get that again using simple web scraping techniques, and then
    save the source of each site in a separate file locally as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: By the end of this section, our folder ‘fandom_profiles’ should contain the
    fanwiki profiles of each Arcane character — ready to be processed as we work our
    way towards building the Arcane network.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. The Arcane network
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To build the network between characters, we assume that the intensity of interactions
    between two characters is signaled by the number of times each character’s profile
    mentions the other. Hence, the nodes of this network are the characters, which
    are linked with connections of varying strength based on the number of times each
    character’s wiki site source references any other character’s wiki.
  prefs: []
  type: TYPE_NORMAL
- en: Building the network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following code block, we build up the edge list — the list of connections
    that contains both the source and the target node (character) of each connection,
    as well as the weight (co-reference frequency) between the two characters. Additionally,
    to conduct the in-profile search effectively, I create a names_ids which only
    contains the specific identifier of each character, without the rest of the web
    address.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As this code block runs, it should return around 180 edges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we use the NetworkX graph analytics library to turn the edge list into
    a graph object and output the number of nodes and edges the graph has:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of this code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0efcd63ba520a218c408ab4c57c3bcac.png)'
  prefs: []
  type: TYPE_IMG
- en: This output tells us that while we started with 67 characters, 16 of them ended
    up not being connected to anyone in the network, hence the smaller number of nodes
    in the constructed graph.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the network
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we have the network, we can visualize it! First, let’s create a simple
    draft visualization of the network using Matplotlib and the built-in tools of
    NetworkX.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output image of this cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3b7a5aa717021a4b84c3d48a813ef25d.png)'
  prefs: []
  type: TYPE_IMG
- en: While this network already gives a few hints about the main structure and most
    frequent characteristics of the show, we can design a much more detailed visualization
    using the open-source network visualization software Gephi. For this, we need
    to export the network into a .gexf graph data file first, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the tutorial on how to visualize this network using Gephi:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aae9b3347f0af50a8557d15dbb93153c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Video tutorial on Youtube: [https://www.youtube.com/watch?v=utm91FhZalQ](https://www.youtube.com/watch?v=utm91FhZalQ)'
  prefs: []
  type: TYPE_NORMAL
- en: Extras
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here comes an extension part, which I am referring to in the video. After exporting
    the node table, including the network community indices, I read that table using
    Pandas and assigned individual colors to each community. I got the colors (and
    their hex codes) from ChatGPT, asking it to align with the main color themes of
    the show. Then, this block of code exports the color—which I again used in Gephi
    to color the final graph.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we color the network based on the communities we found (communities meaning
    highly interconnected subgraphs of the original network), we uncovered four major
    groups, each corresponding to specific sets of characters within the storyline.
    Not so surprisingly, the algorithm clustered together the main protagonist family
    with Jinx, Vi, and Vander (pink). Then, we also see the cluster of the underground
    figures of Zaun (blue), such as Silco, while the elite of Piltover (blue) and
    the militarist enforce (green) are also well-grouped together.
  prefs: []
  type: TYPE_NORMAL
- en: The beauty and use of such community structures is that while such explanations
    put it in context very easily, usually, it would be very hard to come up with
    a similar map only based on intuition. While the methodology presented here clearly
    shows how we can use network science to extract the hidden connections of virtual
    (or real) social systems, let it be the partners of a law firm, the co-workers
    of an accounting firm, and the HR department of a major oil company.
  prefs: []
  type: TYPE_NORMAL
