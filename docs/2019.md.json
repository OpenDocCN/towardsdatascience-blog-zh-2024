["```py\n# Import libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nimport pandas as pd\nimport numpy as np\n\n# Make the dataset\ndataset_dict = {\n    'Outlook': ['sunny', 'sunny', 'overcast', 'rainy', 'rainy', 'rainy', 'overcast', 'sunny', 'sunny', 'rainy', 'sunny', 'overcast', 'overcast', 'rainy', 'sunny', 'overcast', 'rainy', 'sunny', 'sunny', 'rainy', 'overcast', 'rainy', 'sunny', 'overcast', 'sunny', 'overcast', 'rainy', 'overcast'],\n    'Temperature': [85.0, 80.0, 83.0, 70.0, 68.0, 65.0, 64.0, 72.0, 69.0, 75.0, 75.0, 72.0, 81.0, 71.0, 81.0, 74.0, 76.0, 78.0, 82.0, 67.0, 85.0, 73.0, 88.0, 77.0, 79.0, 80.0, 66.0, 84.0],\n    'Humidity': [85.0, 90.0, 78.0, 96.0, 80.0, 70.0, 65.0, 95.0, 70.0, 80.0, 70.0, 90.0, 75.0, 80.0, 88.0, 92.0, 85.0, 75.0, 92.0, 90.0, 85.0, 88.0, 65.0, 70.0, 60.0, 95.0, 70.0, 78.0],\n    'Wind': [False, True, False, False, False, True, True, False, False, False, True, True, False, True, True, False, False, True, False, True, True, False, True, False, False, True, False, False],\n    'Play': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No', 'No', 'Yes', 'Yes', 'No', 'No', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No', 'Yes']\n}\noriginal_df = pd.DataFrame(dataset_dict)\n\nprint(original_df)\n```", "```py\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\n# Preprocess data\ndf = pd.get_dummies(original_df, columns=['Outlook'], prefix='', prefix_sep='', dtype=int)\ndf['Wind'] = df['Wind'].astype(int)\ndf['Play'] = (df['Play'] == 'Yes').astype(int)\ndf = df[['sunny','rainy','overcast','Temperature','Humidity','Wind','Play']]\n\n# Split data and standardize features\nX, y = df.drop(columns='Play'), df['Play']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.5, shuffle=False)\n\nscaler = StandardScaler()\nfloat_cols = X_train.select_dtypes(include=['float64']).columns\nX_train[float_cols] = scaler.fit_transform(X_train[float_cols])\nX_test[float_cols] = scaler.transform(X_test[float_cols])\n\n# Print results\nprint(pd.concat([X_train, y_train], axis=1).round(2), '\\n')\nprint(pd.concat([X_test, y_test], axis=1).round(2), '\\n')\n```", "```py\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Select the Number of Neighbors ('k')\nk = 5\n```", "```py\nimport numpy as np\n\n# Choose a Distance Metric\ndistance_metric = 'euclidean'\n\n# Trying to calculate distance between ID 0 and ID 1\nprint(np.linalg.norm(X_train.loc[0].values - X_train.loc[1].values))\n```", "```py\n# Initialize the k-NN Classifier\nknn_clf = KNeighborsClassifier(n_neighbors=k, metric=distance_metric)\n\n# \"Train\" the kNN (although no real training happens)\nknn_clf.fit(X_train, y_train)\n```", "```py\nfrom scipy.spatial import distance\n\n# Compute the distances from the first row of X_test to all rows in X_train\ndistances = distance.cdist(X_test.iloc[0:1], X_train, metric='euclidean')\n\n# Create a DataFrame to display the distances\ndistance_df = pd.DataFrame({\n    'Train_ID': X_train.index,\n    'Distance': distances[0].round(2),\n    'Label': y_train\n}).set_index('Train_ID')\n\nprint(distance_df.sort_values(by='Distance'))\n```", "```py\n# Use the k-NN Classifier to make predictions\ny_pred = knn_clf.predict(X_test)\nprint(\"Label     :\",list(y_test))\nprint(\"Prediction:\",list(y_pred))\n```", "```py\nfrom sklearn.metrics import accuracy_score\n\n# Evaluation Phase\naccuracy = accuracy_score(y_test, y_pred)\nprint(f'Accuracy: {accuracy.round(4)*100}%')\n```", "```py\nlabels, predictions, accuracies = list(y_test), [], []\n\nk_list = [3, 5, 7]\nfor k in k_list:\n    knn_clf = KNeighborsClassifier(n_neighbors=k)\n    knn_clf.fit(X_train, y_train)\n    y_pred = knn_clf.predict(X_test)\n    predictions.append(list(y_pred))\n    accuracies.append(accuracy_score(y_test, y_pred).round(4)*100)\n\ndf_predictions = pd.DataFrame({'Label': labels})\nfor k, pred in zip(k_list, predictions):\n    df_predictions[f'k = {k}'] = pred\n\ndf_accuracies = pd.DataFrame({'Accuracy ': accuracies}, index=[f'k = {k}' for k in k_list]).T\n\nprint(df_predictions)\nprint(df_accuracies)\n```", "```py\n# Import libraries\nimport pandas as pd\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import accuracy_score\n\n# Load data\ndataset_dict = {\n    'Outlook': ['sunny', 'sunny', 'overcast', 'rainy', 'rainy', 'rainy', 'overcast', 'sunny', 'sunny', 'rainy', 'sunny', 'overcast', 'overcast', 'rainy', 'sunny', 'overcast', 'rainy', 'sunny', 'sunny', 'rainy', 'overcast', 'rainy', 'sunny', 'overcast', 'sunny', 'overcast', 'rainy', 'overcast'],\n    'Temperature': [85.0, 80.0, 83.0, 70.0, 68.0, 65.0, 64.0, 72.0, 69.0, 75.0, 75.0, 72.0, 81.0, 71.0, 81.0, 74.0, 76.0, 78.0, 82.0, 67.0, 85.0, 73.0, 88.0, 77.0, 79.0, 80.0, 66.0, 84.0],\n    'Humidity': [85.0, 90.0, 78.0, 96.0, 80.0, 70.0, 65.0, 95.0, 70.0, 80.0, 70.0, 90.0, 75.0, 80.0, 88.0, 92.0, 85.0, 75.0, 92.0, 90.0, 85.0, 88.0, 65.0, 70.0, 60.0, 95.0, 70.0, 78.0],\n    'Wind': [False, True, False, False, False, True, True, False, False, False, True, True, False, True, True, False, False, True, False, True, True, False, True, False, False, True, False, False],\n    'Play': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No', 'No', 'Yes', 'Yes', 'No', 'No', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No', 'Yes']\n}\ndf = pd.DataFrame(dataset_dict)\n\n# Preprocess data\ndf = pd.get_dummies(df, columns=['Outlook'], prefix='', prefix_sep='', dtype=int)\ndf['Wind'] = df['Wind'].astype(int)\ndf['Play'] = (df['Play'] == 'Yes').astype(int)\n\n# Split data\nX, y = df.drop(columns='Play'), df['Play']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.5, shuffle=False)\n\n# Standardize features\nscaler = StandardScaler()\nfloat_cols = X_train.select_dtypes(include=['float64']).columns\nX_train[float_cols] = scaler.fit_transform(X_train[float_cols])\nX_test[float_cols] = scaler.transform(X_test[float_cols])\n\n# Train model\nknn_clf = KNeighborsClassifier(n_neighbors=3, metric='euclidean')\nknn_clf.fit(X_train, y_train)\n\n# Predict and evaluate\ny_pred = knn_clf.predict(X_test)\nprint(f\"Accuracy: {accuracy_score(y_test, y_pred)}\")\n```"]