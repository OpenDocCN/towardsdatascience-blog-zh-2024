["```py\n##########################\n# IMPORT LIBRARIES SECTION\n##########################\n# Import web scraping tool\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport numpy as np\n\n# Import visualization appropriate libraries\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport seaborn as sns # New York temperature plotting\nimport plotly.graph_objects as go # Apple stock charting\nfrom pandas.plotting import scatter_matrix # scatterplot matrix\n\n# Import appropriate libraries for New York temperature plotting\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom datetime import datetime, timedelta\nimport re\n\n# Convert day to datetime library\nimport calendar\n\n# Cross-correlation analysis library\nfrom statsmodels.tsa.stattools import ccf\n\n# Stats library\nimport scipy.stats as stats\n\n# Granger causality library\nfrom statsmodels.tsa.stattools import grangercausalitytests\n```", "```py\n##################################################################################\n# EXAMINE THE NEW YORK CITY WEATHER AND APPLE STOCK DATA IN READYING FOR MERGE ...\n##################################################################################\n\n# Extract New York City weather data for the years 2017 to 2022 for all 12 months\n# 5-YEAR NEW YORK CITY TEMPERATURE DATA\n\n# Function to convert 'Day' column to a consistent date format for merging\ndef convert_nyc_date(day, month_name, year):\n    month_num = datetime.strptime(month_name, '%B').month\n\n    # Extract numeric day using regular expression\n    day_match = re.search(r'\\d+', day)\n    day_value = int(day_match.group()) if day_match else 1\n\n    date_str = f\"{month_num:02d}-{day_value:02d}-{year}\"\n\n    try:\n        return pd.to_datetime(date_str, format='%m-%d-%Y')\n    except ValueError:\n        return pd.to_datetime(date_str, errors='coerce')\n\n# Set variables\nyears = range(2017, 2023)\nall_data = [] # Initialize an empty list to store data for all years\n\n# Enter for loop\nfor year in years:\n    url = f'https://www.extremeweatherwatch.com/cities/new-york/year-{year}'\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n\n    div_container = soup.find('div', {'class': 'page city-year-page'})\n\n    if div_container:\n        select_month = div_container.find('select', {'class': 'form-control url-selector'})\n\n        if select_month:\n            monthly_data = []\n            for option in select_month.find_all('option'):\n                month_name = option.text.strip().lower()\n\n                h5_tag = soup.find('a', {'name': option['value'][1:]}).find_next('h5', {'class': 'mt-4'})\n\n                if h5_tag:\n                    responsive_div = h5_tag.find_next('div', {'class': 'responsive'})\n                    table = responsive_div.find('table', {'class': 'bordered-table daily-table'})\n\n                    if table:\n                        data = []\n                        for row in table.find_all('tr')[1:]:\n                            cols = row.find_all('td')\n                            day = cols[0].text.strip()\n                            high_temp = float(cols[1].text.strip())\n                            data.append([convert_nyc_date(day, month_name, year), high_temp])\n\n                        monthly_df = pd.DataFrame(data, columns=['Date', 'High (째F)'])\n                        monthly_data.append(monthly_df)\n                    else:\n                        print(f\"Table not found for {month_name.capitalize()} {year}\")\n                else:\n                    print(f\"h5 tag not found for {month_name.capitalize()} {year}\")\n\n            # Concatenate monthly data to form the complete dataframe for the year\n            yearly_nyc_df = pd.concat(monthly_data, ignore_index=True)\n\n            # Extract month name from the 'Date' column\n            yearly_nyc_df['Month'] = yearly_nyc_df['Date'].dt.strftime('%B')\n\n            # Capitalize the month names\n            yearly_nyc_df['Month'] = yearly_nyc_df['Month'].str.capitalize()\n\n            all_data.append(yearly_nyc_df)\n\n######################################################################################################\n# Generate a time series plot of the 5-year New York City daily high temperatures\n######################################################################################################\n\n# Concatenate the data for all years\nif all_data:\n    combined_df = pd.concat(all_data, ignore_index=True)\n\n    # Create a line plot for each year\n    plt.figure(figsize=(12, 6))\n    sns.lineplot(data=combined_df, x='Date', y='High (째F)', hue=combined_df['Date'].dt.year)\n    plt.title('New York City Daily High Temperature Time Series (2017-2022) - 5-Year Trend', fontsize=18)\n    plt.xlabel('Date', fontsize=16)  # Set x-axis label\n    plt.ylabel('High Temperature (째F)', fontsize=16)  # Set y-axis label\n    plt.legend(title='Year', bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=14)  # Display legend outside the plot\n    plt.tick_params(axis='both', which='major', labelsize=14)  # Set font size for both axes' ticks\n    plt.show()\n```", "```py\n# APPLE STOCK CODE\n\n# Set variables\nyears = range(2017, 2023)\ndata = []  # Initialize an empty list to store data for all years\n\n# Extract Apple's historical data for the years 2017 to 2022\nfor year in years:\n    url = f'https://markets.financialcontent.com/stocks/quote/historical?Symbol=537%3A908440&Year={year}&Month=12&Range=12'\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    table = soup.find('table', {'class': 'quote_detailed_price_table'})\n\n    if table:\n        for row in table.find_all('tr')[1:]:\n            cols = row.find_all('td')\n            date = cols[0].text\n\n            # Check if the year is within the desired range\n            if str(year) in date:\n                open_price = cols[1].text\n                high = cols[2].text\n                low = cols[3].text\n                close = cols[4].text\n                volume = cols[5].text\n                change_percent = cols[6].text\n                data.append([date, open_price, high, low, close, volume, change_percent])\n\n# Create a DataFrame from the extracted data\napple_df = pd.DataFrame(data, columns=['Date', 'Open', 'High', 'Low', 'Close', 'Volume', 'Change(%)'])\n\n# Verify that DataFrame contains 5-years\n# apple_df.head(50)\n\n#################################################################\n# Generate a Candlestick charting of the 5-year stock performance\n#################################################################\n\nnew_apple_df = apple_df.copy()\n\n# Convert Apple 'Date' column to a consistent date format\nnew_apple_df['Date'] = pd.to_datetime(new_apple_df['Date'], format='%b %d, %Y')\n\n# Sort the datasets by 'Date' in ascending order\nnew_apple_df = new_apple_df.sort_values('Date')\n\n# Convert numerical columns to float, handling empty strings\nnumeric_cols = ['Open', 'High', 'Low', 'Close', 'Volume', 'Change(%)']\nfor col in numeric_cols:\n    new_apple_df[col] = pd.to_numeric(new_apple_df[col], errors='coerce')\n\n# Create a candlestick chart\nfig = go.Figure(data=[go.Candlestick(x=new_apple_df['Date'],\n                open=new_apple_df['Open'],\n                high=new_apple_df['High'],\n                low=new_apple_df['Low'],\n                close=new_apple_df['Close'])])\n\n# Set the layout\nfig.update_layout(title='Apple Stock Candlestick Chart',\n                  xaxis_title='Date',\n                  yaxis_title='Stock Price',\n                  xaxis_rangeslider_visible=False,\n                  font=dict(\n                      family=\"Arial\",\n                      size=16,\n                      color=\"Black\"\n                  ),\n                  title_font=dict(\n                      family=\"Arial\",\n                      size=20,\n                      color=\"Black\"\n                  ),\n                  xaxis=dict(\n                      title=dict(\n                          text=\"Date\",\n                          font=dict(\n                              family=\"Arial\",\n                              size=18,\n                              color=\"Black\"\n                          )\n                      ),\n                      tickfont=dict(\n                          family=\"Arial\",\n                          size=16,\n                          color=\"Black\"\n                      )\n                  ),\n                  yaxis=dict(\n                      title=dict(\n                          text=\"Stock Price\",\n                          font=dict(\n                              family=\"Arial\",\n                              size=18,\n                              color=\"Black\"\n                          )\n                      ),\n                      tickfont=dict(\n                          family=\"Arial\",\n                          size=16,\n                          color=\"Black\"\n                      )\n                  )\n)\n\n# Show the chart\nfig.show()\n```", "```py\n##########################################\n# MERGE THE NEW_NYC_DF WITH NEW_APPLE_DF\n##########################################\n# Convert the 'Day' column in New York City combined_df to a consistent date format ...\n\nnew_nyc_df = combined_df.copy()\n\n# Add missing weekends to NYC temperature data\nstart_date = new_nyc_df['Date'].min()\nend_date = new_nyc_df['Date'].max()\nweekend_dates = pd.date_range(start_date, end_date, freq='B')  # B: business day frequency (excludes weekends)\nmissing_weekends = weekend_dates[~weekend_dates.isin(new_nyc_df['Date'])]\nmissing_data = pd.DataFrame({'Date': missing_weekends, 'High (째F)': None})\nnew_nyc_df = pd.concat([new_nyc_df, missing_data]).sort_values('Date').reset_index(drop=True)  # Resetting index\nnew_apple_df = apple_df.copy()\n\n# Convert Apple 'Date' column to a consistent date format\nnew_apple_df['Date'] = pd.to_datetime(new_apple_df['Date'], format='%b %d, %Y')\n\n# Sort the datasets by 'Date' in ascending order\nnew_nyc_df = combined_df.sort_values('Date')\nnew_apple_df = new_apple_df.sort_values('Date')\n\n# Merge the datasets on the 'Date' column\nmerged_df = pd.merge(new_apple_df, new_nyc_df, on='Date', how='inner')\n\n# Verify the correct merge -- should merge only NYC temp records that match with Apple stock records by Date\nmerged_df\n```", "```py\n# Ensure the columns of interest are numeric \nmerged_df['High (째F)'] = pd.to_numeric(merged_df['High (째F)'], errors='coerce')\nmerged_df['Close'] = pd.to_numeric(merged_df['Close'], errors='coerce')\n\n# UPDATED CODE BY PAUL USES ASTRONOMICAL TEMPERATURES \n\n# CORRELATION HEATMAP OF YEAR-OVER-YEAR \n# DAILY HIGH NYC TEMPERATURES VS.\n# APPLE STOCK 2017-2023\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Convert 'Date' to datetime\nmerged_df['Date'] = pd.to_datetime(merged_df['Date'])\n\n# Define a function to map months to seasons\ndef map_season(month):\n    if month in [4, 5, 6]:\n        return 'Spring'\n    elif month in [7, 8, 9]:\n        return 'Summer'\n    elif month in [10, 11, 12]:\n        return 'Fall'\n    else:\n        return 'Winter'\n\n# Extract month from the Date column and map it to seasons\nmerged_df['Season'] = merged_df['Date'].dt.month.map(map_season)\n\n# Extract the years present in the data\nyears = merged_df['Date'].dt.year.unique()\n\n# Create subplots for each combination of year and season\nseasons = ['Spring', 'Summer', 'Fall', 'Winter']\n\n# Convert 'Close' column to numeric\nmerged_df['Close'] = pd.to_numeric(merged_df['Close'], errors='coerce')\n\n# Create an empty DataFrame to store correlation matrix\ncorr_matrix = pd.DataFrame(index=years, columns=seasons)\n\n# Calculate correlation matrix for each combination of year and season\nfor year in years:\n    year_data = merged_df[merged_df['Date'].dt.year == year]\n    for season in seasons:\n        data = year_data[year_data['Season'] == season]\n        corr = data['High (째F)'].corr(data['Close'])\n        corr_matrix.loc[year, season] = corr\n\n# Plot correlation matrix\nplt.figure(figsize=(10, 6))\nsns.heatmap(corr_matrix.astype(float), annot=True, cmap='coolwarm', fmt=\".2f\")\nplt.title('Temperature-Stock Correlation', fontsize=18)  # Set main title font size\nplt.xlabel('Season', fontsize=16)  # Set x-axis label font size\nplt.ylabel('Year', fontsize=16)  # Set y-axis label font size\nplt.tick_params(axis='both', which='major', labelsize=14)  # Set annotation font size\nplt.tight_layout()\nplt.show()\n```", "```py\n#######################\n# STAT ANALYSIS SECTION\n#######################\n#############################################################\n# GRANGER CAUSALITY TEST\n# test whether past values of temperature (or stock prices) \n# can predict future values of stock prices (or temperature).\n# perform the Granger causality test between 'High (째F)' and \n# 'Close' columns in merged_df up to a maximum lag of 255\n#############################################################\n\n# Perform Granger causality test\nmax_lag = 1  # Choose the maximum lag of 100 - Jupyter times out at higher lags\ntest_results = grangercausalitytests(merged_df[['High (째F)', 'Close']], max_lag)\n\n# Interpretation:\n\n# looks like none of the lag give a significant p-value\n# at alpha .05, we cannot reject the null hypothesis, that is,\n# we cannot conclude that Granger causality exists between daily high\n# temperatures in NYC and Apple stock\n\n#################################################################\n# CROSS-CORRELATION ANALYSIS\n# calculate the cross-correlation between 'High (째F)' and 'Close' \n# columns in merged_df, and ccf_values will contain the \n# cross-correlation coefficients, while lag_values will \n# contain the corresponding lag values\n#################################################################\n\n# Calculate cross-correlation\nccf_values = ccf(merged_df['High (째F)'], merged_df['Close'])\nlag_values = np.arange(-len(merged_df)+1, len(merged_df))\n\nccf_values, lag_values\n\n# Interpretation:\n# Looks like there is strong positive correlation in the variables\n# in latter years and positive correlation in their respective\n# lags. This confirms what our plotting shows us\n\n########################################################\n# LOOK AT THE BEST CORRELATION COEFFICIENT - 2020? LET'S\n# EXPLORE FURTHER AND CALCULATE THE p-VALUE AND\n# CONFIDENCE INTERVAL\n########################################################\n\n# Get dataframes for specific periods of spurious correlation\n\nmerged_df['year'] = merged_df['Date'].dt.year\nbest_season_data = merged_df.loc[(merged_df['year'] == 2020) & (merged_df['Season'] == 'Spring')]\n\n# Calculate correlation coefficient and p-value\ncorr_coeff, p_value = stats.pearsonr(best_season_data['High (째F)'], best_season_data['Close'])\ncorr_coeff, p_value\n\n# Perform bootstrapping to obtain confidence interval\ndef bootstrap_corr(data, n_bootstrap=1000):\n    corr_values = []\n    for _ in range(n_bootstrap):\n        sample = data.sample(n=len(data), replace=True)\n        corr_coeff, _ = stats.pearsonr(sample['High (째F)'], sample['Close'])\n        corr_values.append(corr_coeff)\n    return np.percentile(corr_values, [2.5, 97.5])  # 95% confidence interval\n\nconfidence_interval = bootstrap_corr(best_season_data)\nconfidence_interval\n```", "```py\n#####################################################################\n# VISUALIZE RELATIONSHIP BETWEEN APPLE STOCK AND NYC DAILY HIGH TEMPS\n#####################################################################\n\n# Dual y-axis plotting using twinx() function from matplotlib\ndate = merged_df['Date']\ntemperature = merged_df['High (째F)']\nstock_close = merged_df['Close']\n\n# Create a figure and axis\nfig, ax1 = plt.subplots(figsize=(10, 6))\n\n# Plotting temperature on the left y-axis (ax1)\ncolor = 'tab:red'\nax1.set_xlabel('Date', fontsize=16)\nax1.set_ylabel('Temperature (째F)', color=color, fontsize=16)\nax1.plot(date, temperature, color=color)\nax1.tick_params(axis='y', labelcolor=color)\n\n# Create a secondary y-axis for the stock close prices\nax2 = ax1.twinx()\ncolor = 'tab:blue'\nax2.set_ylabel('Stock Close Price', color=color, fontsize=16)\nax2.plot(date, stock_close, color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\n# Title and show the plot\nplt.title('Apple Stock correlates with New York City Temperature', fontsize=18)\nplt.show()\n```"]