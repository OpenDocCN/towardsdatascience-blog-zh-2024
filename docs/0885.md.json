["```py\n# We Define the observations\nobservations <- list(\n  Sham = c(rep(0, 7)),\n  tMCAO = c(rep(2, 3), rep(3, 2), rep(4, 2)),\n  tMCAO_C = c(rep(1, 3), rep(2, 3), rep(3, 1))\n)\n\n# We create an empty data frame to populate\ndf <- data.frame(Group = character(), Response = integer())\n\n# We populate the data frame\nfor (group in names(observations)) {\n  for (response in unique(observations[[group]])) {\n    df <- rbind(df, data.frame(Group = rep(group, sum(observations[[group]] == response)), \n                               Response = rep(response, sum(observations[[group]] == response))))\n  }\n}\n\nhead(df)\n```", "```py\ndf$Response <- factor(df$Response, levels = c(\"0\", \"1\", \"2\", \"3\", \"4\"), ordered = TRUE)\n\nstr(df)\n```", "```py\nlibrary(ggplot2)\nlibrary(brms)\nlibrary(ggdist)\nlibrary(easystats)\nlibrary(dplyr)\nlibrary(tibble)\n\nPlot_theme <- theme_classic() +\n  theme(\n      plot.title = element_text(size=18, hjust = 0.5, face=\"bold\"),\n      plot.subtitle = element_text(size = 10, color = \"black\"),\n      plot.caption = element_text(size = 12, color = \"black\"),\n      axis.line = element_line(colour = \"black\", size = 1.5, linetype = \"solid\"),\n      axis.ticks.length=unit(7,\"pt\"),\n\n      axis.title.x = element_text(colour = \"black\", size = 16),\n      axis.text.x = element_text(colour = \"black\", size = 16, angle = 0, hjust = 0.5),\n      axis.ticks.x = element_line(colour = \"black\", size = 1),\n\n      axis.title.y = element_text(colour = \"black\", size = 16),\n      axis.text.y = element_text(colour = \"black\", size = 16),\n      axis.ticks.y = element_line(colour = \"black\", size = 1),\n\n      legend.position=\"right\",\n      legend.direction=\"vertical\",\n      legend.title = element_text(colour=\"black\", face=\"bold\", size=12),\n      legend.text = element_text(colour=\"black\", size=10),\n\n      plot.margin = margin(t = 10,  # Top margin\n                             r = 2,  # Right margin\n                             b = 10,  # Bottom margin\n                             l = 10) # Left margin\n      ) \n```", "```py\nggplot(df, aes(x = factor(Response), fill = Group)) +\n  geom_bar(position = \"dodge\") +\n  labs(x = \"Response\", y = \"Count\", title = \"Response by Group\") +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Set1\") +\n  Plot_theme +\ntheme(legend.position = \"top\", legend.direction = \"horizontal\")\n```", "```py\nOrdinal_Fit <- brm(Response ~ Group, \n           data = df, \n           family = cumulative(\"probit\"),\n           # seed for reproducibility purposes\n           seed = 8807,\n           control = list(adapt_delta = 0.99),\n           # this is to save the model in my laptop\n           file    = \"Models/2024-04-03_UseAndAbuseANOVA/Ordinal_Fit.rds\",\n           file_refit = \"never\")\n\n# Add loo for model comparison\nOrdinal_Fit <- \n  add_criterion(Ordinal_Fit, c(\"loo\", \"waic\", \"bayes_R2\"))\n```", "```py\npp_check(Ordinal_Fit, ndraws = 100) +\n  labs(title = \"Ordinal regression\") +\n  theme_classic()\n```", "```py\ndescribe_posterior(Ordinal_Fit,\n                   centrality = \"mean\",\n                   dispersion = TRUE,\n                   ci_method = \"HDI\",\n                   test = \"rope\",\n                   )\n```", "```py\nOrdinal_CondEffects <- \n  conditional_effects(Ordinal_Fit, \"Group\", categorical = TRUE)\n\nOrdinal_CondEffects <- plot(Ordinal_CondEffects, \n       plot = FALSE)[[1]]\n\nOrdinal_CondEffects + \n  Plot_theme +\n  theme(legend.position = \"bottom\", legend.direction = \"horizontal\")\n```", "```py\nOrdinal_Mdl2 <- bf (Response ~ Group) +\n                     lf(disc ~  0 + Group, cmc = FALSE)\n\nOrdinal_Fit2 <- brm( \n           formula = Ordinal_Mdl2,\n           data = df, \n           family = cumulative(\"probit\"),\n           # seed for reproducibility purposes\n           seed = 8807,\n           control = list(adapt_delta = 0.99),\n           # this is to save the model in my laptop\n           file    = \"Models/2024-04-03_UseAndAbuseANOVA/Ordinal_Fit2.rds\",\n           file_refit = \"never\")\n\n# Add loo for model comparison\nOrdinal_Fit2 <- \n  add_criterion(Ordinal_Fit2, c(\"loo\", \"waic\", \"bayes_R2\"))\n```", "```py\npp_check(Ordinal_Fit2, ndraws = 100) +\n  labs(title = \"Student-t\") +\n  theme_classic()\n```", "```py\ndescribe_posterior(Ordinal_Fit2,\n                   centrality = \"mean\",\n                   dispersion = TRUE,\n                   ci_method = \"HDI\",\n                   test = \"rope\",\n                   )\n```", "```py\nOrdinal_CondEffects2 <- \n  conditional_effects(Ordinal_Fit2, categorical = TRUE)\n\nOrdinal_CondEffects2 <- plot(Ordinal_CondEffects2, \n       plot = FALSE)[[1]]\n\nOrdinal_CondEffects2 +\n  Plot_theme +\n  theme(legend.position = \"bottom\", legend.direction = \"horizontal\")\n```", "```py\nloo(Ordinal_Fit, Ordinal_Fit2)\n```"]