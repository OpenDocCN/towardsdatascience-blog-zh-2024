["```py\npoetry config virtualenvs.in-project true\n```", "```py\npoetry config virtualenvs.in-project true\npoetry new gemini-movie-detectives-api\n\ncd gemini-movie-detectives-api\n\npoetry add 'uvicorn[standard]'\npoetry add fastapi\npoetry add pydantic-settings\npoetry add httpx\npoetry add 'google-cloud-aiplatform>=1.38'\npoetry add jinja2\n```", "```py\n[tool.poetry]\nname = \"gemini-movie-detectives-api\"\nversion = \"0.1.0\"\ndescription = \"Use Gemini Pro LLM via VertexAI to create an engaging quiz game incorporating TMDB API data\"\nauthors = [\"Volker Janz <volker@janz.sh>\"]\nreadme = \"README.md\"\n\n[tool.poetry.dependencies]\npython = \"^3.12\"\nfastapi = \"^0.110.1\"\nuvicorn = {extras = [\"standard\"], version = \"^0.29.0\"}\npython-dotenv = \"^1.0.1\"\nhttpx = \"^0.27.0\"\npydantic-settings = \"^2.2.1\"\ngoogle-cloud-aiplatform = \">=1.38\"\njinja2 = \"^3.1.3\"\nruff = \"^0.3.5\"\npre-commit = \"^3.7.0\"\n\n[build-system]\nrequires = [\"poetry-core\"]\nbuild-backend = \"poetry.core.masonry.api\"\n```", "```py\nfrom fastapi import FastAPI\n\napp = FastAPI()\n\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n```", "```py\nsource .venv/bin/activate\nuvicorn gemini_movie_detectives_api.main:app --reload\ncurl -s localhost:8000 | jq .\n```", "```py\n@app.post('/quiz')\n@rate_limit\n@retry(max_retries=settings.quiz_max_retries)\ndef start_quiz(quiz_config: QuizConfig = QuizConfig()):\n    movie = tmdb_client.get_random_movie(\n        page_min=_get_page_min(quiz_config.popularity),\n        page_max=_get_page_max(quiz_config.popularity),\n        vote_avg_min=quiz_config.vote_avg_min,\n        vote_count_min=quiz_config.vote_count_min\n    )\n\n    if not movie:\n        logger.info('could not find movie with quiz config: %s', quiz_config.dict())\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='No movie found with given criteria')\n\n    try:\n        genres = [genre['name'] for genre in movie['genres']]\n\n        prompt = prompt_generator.generate_question_prompt(\n            movie_title=movie['title'],\n            language=get_language_by_name(quiz_config.language),\n            personality=get_personality_by_name(quiz_config.personality),\n            tagline=movie['tagline'],\n            overview=movie['overview'],\n            genres=', '.join(genres),\n            budget=movie['budget'],\n            revenue=movie['revenue'],\n            average_rating=movie['vote_average'],\n            rating_count=movie['vote_count'],\n            release_date=movie['release_date'],\n            runtime=movie['runtime']\n        )\n\n        chat = gemini_client.start_chat()\n\n        logger.debug('starting quiz with generated prompt: %s', prompt)\n        gemini_reply = gemini_client.get_chat_response(chat, prompt)\n        gemini_question = gemini_client.parse_gemini_question(gemini_reply)\n\n        quiz_id = str(uuid.uuid4())\n        session_cache[quiz_id] = SessionData(\n            quiz_id=quiz_id,\n            chat=chat,\n            question=gemini_question,\n            movie=movie,\n            started_at=datetime.now()\n        )\n\n        return StartQuizResponse(quiz_id=quiz_id, question=gemini_question, movie=movie)\n    except GoogleAPIError as e:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f'Google API error: {e}')\n    except Exception as e:\n        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f'Internal server error: {e}')\n```", "```py\n@app.post('/quiz')\n```", "```py\nclass QuizConfig(BaseModel):\n    vote_avg_min: float = Field(5.0, ge=0.0, le=9.0)\n    vote_count_min: float = Field(1000.0, ge=0.0)\n    popularity: int = Field(1, ge=1, le=3)\n    personality: str = Personality.DEFAULT.name\n    language: str = Language.DEFAULT.name\n# ...\ndef start_quiz(quiz_config: QuizConfig = QuizConfig()):\n```", "```py\n@rate_limit\n@retry(max_retries=settings.quiz_max_retries)\n```", "```py\nraise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail='No movie found with given criteria')\n```", "```py\nclass QuizConfig(BaseModel):\n    vote_avg_min: float = Field(5.0, ge=0.0, le=9.0)\n    vote_count_min: float = Field(1000.0, ge=0.0)\n    popularity: int = Field(1, ge=1, le=3)\n    personality: str = Personality.DEFAULT.name\n    language: str = Language.DEFAULT.name\n```", "```py\nclass Personality(StrEnum):\n    DEFAULT = 'default.jinja'\n    CHRISTMAS = 'christmas.jinja'\n    SCIENTIST = 'scientist.jinja'\n    DAD = 'dad.jinja'\n```", "```py\ncall_count = 0\nlast_reset_time = datetime.now()\n\ndef rate_limit(func: callable) -> callable:\n    @wraps(func)\n    def wrapper(*args, **kwargs) -> callable:\n        global call_count\n        global last_reset_time\n\n        # reset call count if the day has changed\n        if datetime.now().date() > last_reset_time.date():\n            call_count = 0\n            last_reset_time = datetime.now()\n\n        if call_count >= settings.quiz_rate_limit:\n            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail='Daily limit reached')\n\n        call_count += 1\n        return func(*args, **kwargs)\n\n    return wrapper\n```", "```py\n@app.post('/quiz')\n@rate_limit\n@retry(max_retries=settings.quiz_max_retries)\ndef start_quiz(quiz_config: QuizConfig = QuizConfig()):\n```", "```py\n@lru_cache(maxsize=1024)\ndef get_movie_details(self, movie_id: int):\n    response = httpx.get(f'https://api.themoviedb.org/3/movie/{movie_id}', headers={\n        'Authorization': f'Bearer {self.tmdb_api_key}'\n    }, params={\n        'language': 'en-US'\n    })\n\n    movie = response.json()\n    movie['poster_url'] = self.get_poster_url(movie['poster_path'])\n\n    return movie\n```", "```py\npoetry add 'google-cloud-aiplatform>=1.38'\n```", "```py\nimport vertexai\nfrom google.oauth2.service_account import Credentials\nfrom vertexai.generative_models import GenerativeModel\n\nproject_id = \"my-project-id\"\nlocation = \"us-central1\"\n\ncredentials = Credentials.from_service_account_file(\"credentials.json\")\nmodel = \"gemini-1.0-pro\"\n\nvertexai.init(project=project_id, location=location, credentials=credentials)\nmodel = GenerativeModel(model)\n\nchat_session = model.start_chat()\n```", "```py\ndef get_chat_response(chat: ChatSession, prompt: str) -> str:\n    text_response = []\n    responses = chat.send_message(prompt, stream=True)\n    for chunk in responses:\n        text_response.append(chunk.text)\n    return ''.join(text_response)\n```", "```py\nimport vertexai\nfrom google.oauth2.service_account import Credentials\nfrom vertexai.generative_models import GenerativeModel, ChatSession\n\nproject_id = \"my-project-id\"\nlocation = \"us-central1\"\n\ncredentials = Credentials.from_service_account_file(\"credentials.json\")\nmodel = \"gemini-1.0-pro\"\n\nvertexai.init(project=project_id, location=location, credentials=credentials)\nmodel = GenerativeModel(model)\n\nchat_session = model.start_chat()\n\ndef get_chat_response(chat: ChatSession, prompt: str) -> str:\n    text_response = []\n    responses = chat.send_message(prompt, stream=True)\n    for chunk in responses:\n        text_response.append(chunk.text)\n    return ''.join(text_response)\n\nresponse = get_chat_response(\n    chat_session,\n    \"How to say 'you are awesome' in Spanish?\"\n)\nprint(response)\n```", "```py\ngeneration_config = {\n    'temperature': 0.5\n}\n\nresponses = chat.send_message(\n    prompt,\n    generation_config=generation_config,\n    stream=True\n)\n```", "```py\nYour reply must only consist of three lines! You must only reply strictly using the following template for the three lines:\nQuestion: <Your question>\nHint 1: <The first hint to help the participants>\nHint 2: <The second hint to get the title more easily>\n```", "```py\n@staticmethod\ndef parse_gemini_question(gemini_reply: str) -> GeminiQuestion:\n    result = re.findall(r'[^:]+: ([^\\n]+)', gemini_reply, re.MULTILINE)\n    if len(result) != 3:\n        msg = f'Gemini replied with an unexpected format. Gemini reply: {gemini_reply}'\n        logger.warning(msg)\n        raise ValueError(msg)\n\n    question = result[0]\n    hint1 = result[1]\n    hint2 = result[2]\n\n    return GeminiQuestion(question=question, hint1=hint1, hint2=hint2)\n```", "```py\ncurl -s -X POST https://movie-detectives.com/api/quiz \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"vote_avg_min\": 5.0, \"vote_count_min\": 1000.0, \"popularity\": 3, \"personality\": \"christmas\"}' | jq .\n```", "```py\n{\n  \"quiz_id\": \"e1d298c3-fcb0-4ebe-8836-a22a51f87dc6\",\n  \"question\": {\n    \"question\": \"Ho ho ho, this movie takes place in a world of dreams, just like the dreams children have on Christmas Eve after seeing Santa Claus! It's about a team who enters people's dreams to steal their secrets. Can you guess the movie? Merry Christmas!\",\n    \"hint1\": \"The main character is like a skilled elf, sneaking into people's minds instead of houses. \",\n    \"hint2\": \"I_c_p_i_n \"\n  },\n  \"movie\": {...}\n}\n```", "```py\ncurl -s -X POST https://movie-detectives.com/api/quiz \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"vote_avg_min\": 5.0, \"vote_count_min\": 1000.0, \"popularity\": 3, \"language\": \"german\"}' | jq .\n```", "```py\n{\n  \"quiz_id\": \"7f5f8cf5-4ded-42d3-a6f0-976e4f096c0e\",\n  \"question\": {\n    \"question\": \"Stellt euch vor, es gäbe riesige Monster, die auf der Erde herumtrampeln, als wäre es ein Spielplatz! Einer ist ein echtes Urviech, eine Art wandelnde Riesenechse mit einem Atem, der so heiß ist, dass er euer Toastbrot in Sekundenschnelle rösten könnte. Der andere ist ein gigantischer Affe, der so stark ist, dass er Bäume ausreißt wie Gänseblümchen. Und jetzt ratet mal, was passiert? Die beiden geraten aneinander, wie zwei Kinder, die sich um das letzte Stück Kuchen streiten! Wer wird wohl gewinnen, die Riesenechse oder der Superaffe? Das ist die Frage, die sich die ganze Welt stellt! \",\n    \"hint1\": \"Der Film spielt in einer Zeit, in der Monster auf der Erde wandeln.\",\n    \"hint2\": \"G_dz_ll_ vs. K_ng \"\n  },\n  \"movie\": {...}\n}\n```", "```py\ncurl -s -X POST https://movie-detectives.com/api/quiz/84c19425-c179-4198-9773-a8a1b71c9605/answer \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"answer\": \"Greenland\"}' | jq .\n```", "```py\n{\n  \"quiz_id\": \"84c19425-c179-4198-9773-a8a1b71c9605\",\n  \"question\": {...},\n  \"movie\": {...},\n  \"user_answer\": \"Greenland\",\n  \"result\": {\n    \"points\": \"3\",\n    \"answer\": \"Congratulations! You got it! Greenland is the movie we were looking for. You're like a human GPS, always finding the right way!\"\n  }\n}\n```"]