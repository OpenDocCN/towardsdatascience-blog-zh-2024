["```py\n**Contents**\n\n[What are Agents?](#417f)\n\n[Building the Agent](#6fc2)\n- [The Tools](#8705)\n- [The Toolkit](#6004)\n- [The LLM](#1c1d)\n- [The Prompt](#0728)\n\n[The Agent](#159c)\n\n[Testing our Agent](#0844)\n\n[Observations](#fef3)\n\n[The Future](#daa9)\n\n[Conclusion](#c1a5)\n```", "```py\nmkdir simple-math-agent && cd simple-math-agent\ntouch math-agent.py\npython3 -m venv .venv\n. .venv/bin/activate\n```", "```py\npip install langchain langchain_openai\n```", "```py\ngit clone git@github.com:smaameri/simple-math-agent.git\n```", "```py\nfrom langchain_core.tools import BaseTool\n\nclass AddTool(BaseTool):\n    name = \"add\"\n    description = \"Adds two numbers together\"\n    args_schema: Type[BaseModel] = AddInput\n    return_direct: bool = True\n\n    def _run(\n        self, a: int, b: int, run_manager: Optional[CallbackManagerForToolRun] = None\n    ) -> str:\n        return a + b\n```", "```py\nAddInput\n    a: int = Field(description=\"first number\")\n    b: int = Field(description=\"second number\")\n```", "```py\nfrom langchain.tools import tool\n\n@tool\ndef add(a: int, b: int) -> int:\n “””Adds two numbers together””” # this docstring gets used as the description\n return a + b # the actions our tool performs\n```", "```py\nprint(add.name) # add\nprint(add.description) # Adds two numbers together.\nprint(add.args) # {'a': {'title': 'A', 'type': 'integer'}, 'b': {'title': 'B', 'type': 'integer'}}\n```", "```py\n@tool\ndef multiply(a: int, b: int) -> int:\n    \"\"\"Multiply two numbers.\"\"\"\n    return a * b\n\n@tool\ndef square(a) -> int:\n    \"\"\"Calculates the square of a number.\"\"\"\n    a = int(a)\n    return a * a\n```", "```py\ntoolkit = [add, multiply, square]\n```", "```py\nfrom langchain_openai import ChatOpenAI\n\nllm = ChatOpenAI(model=\"gpt-3.5-turbo-1106\", temperature=0)\n```", "```py\nprompt = ChatPromptTemplate.from_messages(\n    [\n        (\"system\", \"\"\"\n          You are a mathematical assistant. Use your tools to answer questions.\n          If you do not have a tool to answer the question, say so. \n\n          Return only the answers. e.g\n          Human: What is 1 + 1?\n          AI: 2\n          \"\"\"),\n        MessagesPlaceholder(\"chat_history\", optional=True),\n        (\"human\", \"{input}\"),\n        MessagesPlaceholder(\"agent_scratchpad\"),\n    ]\n)\n```", "```py\nagent = create_openai_tools_agent(llm, toolkit, prompt)\n```", "```py\nnext_action = agent.get_action(...)\nwhile next_action != AgentFinish:\n    observation = run(next_action)\n    next_action = agent.get_action(..., next_action, observation)\nreturn next_action\n```", "```py\nagent_executor = AgentExecutor(agent=agent, tools=toolkit, verbose=True)\n```", "```py\nresult = agent_executor.invoke({\"input\": \"what is 1 + 1\"})\n```", "```py\npython3 math-agent.py\n```", "```py\nimport os\n\nfrom langchain.agents import AgentExecutor, create_openai_tools_agent\nfrom langchain_openai import ChatOpenAI\n\nfrom langchain.tools import BaseTool, StructuredTool, tool\nfrom langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder\n\nos.environ[\"OPENAI_API_KEY\"] = \"sk-\"\n\n# setup the tools\n@tool\ndef add(a: int, b: int) -> int:\n    \"\"\"Add two numbers.\"\"\"\n    return a + b\n\n@tool\ndef multiply(a: int, b: int) -> int:\n    \"\"\"Multiply two numbers.\"\"\"\n    return a * b\n\n@tool\ndef square(a) -> int:\n    \"\"\"Calculates the square of a number.\"\"\"\n    a = int(a)\n    return a * a\n\nprompt = ChatPromptTemplate.from_messages(\n    [\n        (\"system\", \"\"\"You are a mathematical assistant.\n        Use your tools to answer questions. If you do not have a tool to\n        answer the question, say so. \n\n        Return only the answers. e.g\n        Human: What is 1 + 1?\n        AI: 2\n        \"\"\"),\n        MessagesPlaceholder(\"chat_history\", optional=True),\n        (\"human\", \"{input}\"),\n        MessagesPlaceholder(\"agent_scratchpad\"),\n    ]\n)\n\n# Choose the LLM that will drive the agent\nllm = ChatOpenAI(model=\"gpt-3.5-turbo-1106\", temperature=0)\n\n# setup the toolkit\ntoolkit = [add, multiply, square]\n\n# Construct the OpenAI Tools agent\nagent = create_openai_tools_agent(llm, toolkit, prompt)\n\n# Create an agent executor by passing in the agent and tools\nagent_executor = AgentExecutor(agent=agent, tools=toolkit, verbose=True)\n\nresult = agent_executor.invoke({\"input\": \"what is 1 + 1?\"})\n\nprint(result['output'])\n```"]