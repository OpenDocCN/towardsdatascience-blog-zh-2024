- en: 'SQL Explained: Common Table Expressions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/sql-explained-common-table-expressions-fc23e4675890?source=collection_archive---------3-----------------------#2024-05-22](https://towardsdatascience.com/sql-explained-common-table-expressions-fc23e4675890?source=collection_archive---------3-----------------------#2024-05-22)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/feb13ea203eef5edd5fee914cb37aac9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by AI (Dalle-3)
  prefs: []
  type: TYPE_NORMAL
- en: What CTEs are and how you use them
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@thomas_reid?source=post_page---byline--fc23e4675890--------------------------------)[![Thomas
    Reid](../Images/c1b4e5f577272633ba07e5dbfd21c02d.png)](https://medium.com/@thomas_reid?source=post_page---byline--fc23e4675890--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fc23e4675890--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fc23e4675890--------------------------------)
    [Thomas Reid](https://medium.com/@thomas_reid?source=post_page---byline--fc23e4675890--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--fc23e4675890--------------------------------)
    ·8 min read·May 22, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Common Table Expressions (or CTEs as they are known) in SQL are temporary, named
    result sets containing intermediate data that are derived from another SQL query.
    Once you have data in a CTE, you can reference that data one or more times within
    the same query.
  prefs: []
  type: TYPE_NORMAL
- en: Given the above description, you might think that CTEs sound a lot like regular
    temporary tables in SQL and in some respects they are. So, why would you use a
    CTE rather than a temporary table? To answer this we need to take a look at two
    of the main disadvantages of temporary tables.
  prefs: []
  type: TYPE_NORMAL
- en: One is that temporary tables can contribute to more complex code, especially
    if they’re used across different parts of a large SQL script. They need explicit
    creation, deletion and possibly indexes built on them, adding overhead to your
    SQL and session management.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, temporary tables consume physical storage which might be a consideration
    if space is tight and you have lots of them. Additionally, when looking at queries
    that use temporary tables it might not be clear what data is contained in the
    temporary table and where the data came from.
  prefs: []
  type: TYPE_NORMAL
- en: CTEs don’t have the above issues. First off, they are ephemeral so that once
    the SQL session has ended the CTE goes out of scope and any…
  prefs: []
  type: TYPE_NORMAL
