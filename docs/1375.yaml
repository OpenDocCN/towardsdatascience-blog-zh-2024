- en: Why You Don‚Äôt Need JS to Make 3D plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/la-crime-now-in-3d-no-glasses-required-498398c25a39?source=collection_archive---------2-----------------------#2024-06-01](https://towardsdatascience.com/la-crime-now-in-3d-no-glasses-required-498398c25a39?source=collection_archive---------2-----------------------#2024-06-01)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Visualizing crime geodata in python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@alexroz?source=post_page---byline--498398c25a39--------------------------------)[![Aleksei
    Rozanov](../Images/748b69bfaccf39c9aa568a9e6f41eec3.png)](https://medium.com/@alexroz?source=post_page---byline--498398c25a39--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--498398c25a39--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--498398c25a39--------------------------------)
    [Aleksei Rozanov](https://medium.com/@alexroz?source=post_page---byline--498398c25a39--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--498398c25a39--------------------------------)
    ¬∑6 min read¬∑Jun 1, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/41f0fd59d6221d6335f1d9b4c92ba959.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: In my opinion, one of the best features geo data possesses is its capability
    for 3D visualization. However, due to the amount of computational resources needed
    for such calculations, it‚Äôs really rarely performed in python (often *JavaScript*
    and its libraries used as alternatives). In one of my previous articles I shared
    six python packages which allow creation of beautiful static and interactive maps,
    yet only in 2D space.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@alexroz/6-python-libraries-to-make-beautiful-maps-9fb9edb28b27?source=post_page-----498398c25a39--------------------------------)
    [## 6 python libraries to make beautiful maps'
  prefs: []
  type: TYPE_NORMAL
- en: At some point any Data Scientist faces the need to analyze or model geo spatial
    data, and it can‚Äôt be done without the‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@alexroz/6-python-libraries-to-make-beautiful-maps-9fb9edb28b27?source=post_page-----498398c25a39--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Today I want to bridge this gap and investigate with you a really stylish and
    efficient framework for high-performance web-based visualizations[**deck.jl**](https://deck.gl/),
    which also has a python library **PyDeck**.
  prefs: []
  type: TYPE_NORMAL
- en: To properly explore its capabilities in python we need a large geospatial dataset.
    A perfect candidate for that is [Los Angeles Crime Data 2010‚Äì2020](https://www.kaggle.com/datasets/sumaiaparveenshupti/los-angeles-crime-data-20102020)
    dataset from Kaggle. Luckily, it has an [open license](https://creativecommons.org/publicdomain/zero/1.0/),
    so we could freely use it for our purposes.
  prefs: []
  type: TYPE_NORMAL
- en: The authors distribute two *csv* files, which we are going to merge into one
    filtering out all the columns except longitude and latitude (coordinates of the
    places where the crimes were conducted).
  prefs: []
  type: TYPE_NORMAL
- en: '**üêçThe full python code:** [**GitHub**](https://github.com/alexxxroz/Medium/blob/main/PyDeck_3D_Maps.ipynb)**.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After loading it in pandas, I want to perform a static 2D visualization using
    *cartopy*, just to have a reliable reference. If we simply plot the data, we‚Äôll
    get a bunch of data points, which are of no use for us.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e4c1d339c756c6b642af6d8ab0088150.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: Instead let‚Äôs perform spatial interpolation using the NN method (you can read
    more about it in my other article).
  prefs: []
  type: TYPE_NORMAL
- en: '[](/3-best-methods-for-spatial-interpolation-912cab7aee47?source=post_page-----498398c25a39--------------------------------)
    [## 3 Best Methods for Spatial Interpolation'
  prefs: []
  type: TYPE_NORMAL
- en: From scratch, in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/3-best-methods-for-spatial-interpolation-912cab7aee47?source=post_page-----498398c25a39--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Basically, it means that we transfer sparse observations into a geographical
    grid (PyDeck will do the same thing, in this case it can be called data aggregation).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After the algorithm is done (you‚Äôll need to wait for some time, since we have
    more than 2 mil rows to process), we can wrap its results into an *xarray* dataset
    and map it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4cb04396ef5a88ff66debcc1afa1e262.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: From my perspective, it looks nice and informative, but if you need to sell
    this project to someone, you‚Äôll most probably fail with such a map xD. So let‚Äôs
    pip install PyDeck and see what it can do for us!
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Hexagons.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first type of map layer I found beautiful was the Hexagon layer. You need
    to specify it while creating the L**ayer** variable in PyDeck. There are several
    other crucial parameters for us:'
  prefs: []
  type: TYPE_NORMAL
- en: radius (the radius of hexagon in meters, i.e. spatial resolution in m);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: elevation_scale (scale factor for bins, the greater the value, the higher the
    hexagons);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: elevation_range (min and max height);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pickable (interactively showing the values);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: extruded (cell elevation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The second variable we need to create is the View state. We need to feed it
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: longitude and latitude;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: zoom (initial zoom);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: min_zoom and max_zoom;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bearing (left/right view angle);
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pitch (up/down view angle).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we have a large dataset, google colab doesn‚Äôt display all the dataset,
    so you have two options:'
  prefs: []
  type: TYPE_NORMAL
- en: Sample N rows from the dataset;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Save the map to html and open it in your browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you pick the second one, you‚Äôll get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/39e06c87e81077954efe4dc5f62ec734.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: To be honest, I love how hexagons look, but I‚Äôve never seen them in any scientific
    paper/presentation/lecture, so I‚Äôd recommend using them consciously.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let‚Äôs try to create a similar visualization, but using columns. But in
    this case we will need to pass to the function the xarray dataset we created earlier
    and specify the color and the variable to visualize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/cc30a98b5ee2146008744d31b6a2df27.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Scatter plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In essence, scatter plot is a cloud of points, but the authors of PyDeck developed
    cylinders, which look quite unique:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/02f97b260ea3c59ba0ad2e115cea005f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b181b49d8fcccb41ab7b2117138ad0d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Map style
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A really cool thing about PyDeck is that as plotly, geemap, folium and other
    interactive mapping tools, it allows users to change the basemap, meaning you
    can design a map according to your project‚Äôs context:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/50b2a8f66e10ec360688621211efbdd0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Titles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The next feature, which I find super helpful, is changing the interactive data
    description. By putting a cursor on a column/hexagon/point you can get meta information,
    but often it looks a little bit preposterous. But in PyDeck you can easily overcome
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/582e1ea8485234ef1a68a63fe9fa529c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8ea69b8f10ab3eed20ae63fcbfcfb08b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: 6\. View angle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, the most amazing feature of this library is your ability to change
    the viewing angle on the map simply by clicking the right button of your mouse:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0d126df99ce2a038c2d6a607ca604a79.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [author](https://medium.com/@alexroz).
  prefs: []
  type: TYPE_NORMAL
- en: I definitely enjoy **PyDeck** and plan to dive deeper into the **deck.jl** framework.
    With super easy and intuitive syntax it allows users to build impressive visualizations
    being energy-efficient. Python limits the capabilities of this package a lot,
    so check out their [gallery](https://deck.gl/examples), it‚Äôs mind blowing, especially
    their experimental GlobalView feature‚Ä¶
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully this article was informative and insightful for you!
  prefs: []
  type: TYPE_NORMAL
- en: ===========================================
  prefs: []
  type: TYPE_NORMAL
- en: '***All my publications on Medium are free and open-access, that‚Äôs why I‚Äôd really
    appreciate if you followed me here!***'
  prefs: []
  type: TYPE_NORMAL
- en: P.s. I‚Äôm extremely passionate about (Geo)Data Science, ML/AI and Climate Change.
    So if you want to work together on some project pls contact me in [LinkedIn](https://www.linkedin.com/in/alexxxroz/).
  prefs: []
  type: TYPE_NORMAL
- en: üõ∞Ô∏èFollow for moreüõ∞Ô∏è
  prefs: []
  type: TYPE_NORMAL
