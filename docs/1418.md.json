["```py\nclass Emotion(dspy.Signature):\n   # Describe the task\n   \"\"\"Classify emotions in a sentence.\"\"\"\n\n   sentence = dspy.InputField()\n   # Adding description to the output field\n   sentiment = dspy.OutputField(desc=\"Possible choices: sadness, joy, love, anger, fear, surprise.\")\n```", "```py\nClassify emotions in a sentence.\n\n---\n\nFollow the following format.\n\nSentence: ${sentence}\nSentiment: Possible choices: sadness, joy, love, anger, fear, surprise.\n\n---\n\nSentence:\n```", "```py\nclass SimplifiedBootstrapFewShot ( Teleprompter ) :\n  def __init__ ( self , metric = None ) :\n  self . metric = metric\n\n  def compile ( self , student , trainset , teacher = None ) :\n    teacher = teacher if teacher is not None else student\n    compiled_program = student . deepcopy ()\n\n    # Step 1\\. Prepare mappings between student and teacher Predict modules .\n    # Note : other modules will rely on Predict internally .\n    assert student_and_teacher_have_compatible_predict_modules ( student , teacher )\n    name2predictor , predictor2name = map_predictors_recursively ( student , teacher )\n\n    # Step 2\\. Bootstrap traces for each Predict module .\n    # We ’ll loop over the training set . We ’ll try each example once for simplicity .\n    for example in trainset :\n      if we_found_enough_bootstrapped_demos () : break\n\n      # turn on compiling mode which will allow us to keep track of the traces\n      with dspy . setting . context ( compiling = True ) :\n        # run the teacher program on the example , and get its final prediction\n        # note that compiling = True may affect the internal behavior here\n        prediction = teacher (** example . inputs () )\n\n        # get the trace of the all interal Predict calls from teacher program\n        predicted_traces = dspy . settings . trace\n\n      # if the prediction is valid , add the example to the traces\n      if self . metric ( example , prediction , predicted_traces ) :\n        for predictor , inputs , outputs in predicted_traces :\n          d = dspy . Example ( automated = True , ** inputs , ** outputs )\n          predictor_name = self . predictor2name [id( predictor ) ]\n          compiled_program [ predictor_name ]. demonstrations . append ( d )\n\n return compiled_program\n```", "```py\nfrom haystack.components.retrievers.in_memory import InMemoryBM25Retriever\nfrom haystack.components.generators import OpenAIGenerator\nfrom haystack.components.builders import PromptBuilder\nfrom haystack import Pipeline\n\nretriever = InMemoryBM25Retriever(document_store, top_k=3)\ngenerator = OpenAIGenerator(model=\"gpt-3.5-turbo\")\n\ntemplate = \"\"\"\nGiven the following information, answer the question.\n\nContext:\n{% for document in documents %}\n    {{ document.content }}\n{% endfor %}\n\nQuestion: {{question}}\nAnswer:\n\"\"\"\n\nprompt_builder = PromptBuilder(template=template)\n\nrag_pipeline = Pipeline()\nrag_pipeline.add_component(\"retriever\", retriever)\nrag_pipeline.add_component(\"prompt_builder\", prompt_builder)\nrag_pipeline.add_component(\"llm\", generator)\n\nrag_pipeline.connect(\"retriever\", \"prompt_builder.documents\")\nrag_pipeline.connect(\"prompt_builder\", \"llm\")\n```", "```py\nquestion = \"What effects does ketamine have on rat neural stem cells?\"\n\nresponse = rag_pipeline.run({\"retriever\": {\"query\": question}, \"prompt_builder\": {\"question\": question}})\n\nprint(response[\"llm\"][\"replies\"][0])\n```", "```py\nclass GenerateAnswer(dspy.Signature):\n    \"\"\"Answer questions with short factoid answers.\"\"\"\n\n    context = dspy.InputField(desc=\"may contain relevant facts\")\n    question = dspy.InputField()\n    answer = dspy.OutputField(desc=\"short and precise answer\")\n```", "```py\nclass RAG(dspy.Module):\n    def __init__(self):\n        super().__init__()\n        self.generate_answer = dspy.ChainOfThought(GenerateAnswer)\n\n    # this makes it possible to use the Haystack retriever\n    def retrieve(self, question):\n        results = retriever.run(query=question)\n        passages = [res.content for res in results['documents']]\n        return Prediction(passages=passages)\n\n    def forward(self, question):\n        context = self.retrieve(question).passages\n        prediction = self.generate_answer(context=context, question=question)\n        return dspy.Prediction(context=context, answer=prediction.answer)\n```", "```py\nfrom haystack.components.evaluators import SASEvaluator\n\nsas_evaluator = SASEvaluator()\nsas_evaluator.warm_up()\n\ndef mixed_metric(example, pred, trace=None):\n    semantic_similarity = sas_evaluator.run(ground_truth_answers=[example.answer], predicted_answers=[pred.answer])[\"score\"]\n\n    n_words=len(pred.answer.split())\n    long_answer_penalty=0\n    if 20<n_words<40:\n      long_answer_penalty = 0.025 * (n_words - 20)\n    elif n_words>=40:\n      long_answer_penalty = 0.5\n\n    return semantic_similarity - long_answer_penalty\n```", "```py\nfrom dspy.teleprompt import BootstrapFewShot\n\noptimizer = BootstrapFewShot(metric=mixed_metric)\n\ncompiled_rag = optimizer.compile(RAG(), trainset=trainset)\n```", "```py\ncompiled_rag.predictors()[0].demos\n```", "```py\nExample({'question': 'Does increased Syk phosphorylation lead to overexpression of TRAF6 in peripheral B cells of patients with systemic lupus erythematosus?', 'answer': 'Our results suggest that the activated Syk-mediated TRAF6 pathway leads to aberrant activation of B cells in SLE, and also highlight Syk as a potential target for B-cell-mediated processes in SLE.'})\n```", "```py\nExample({'augmented': True, 'context': ['Chronic rhinosinusitis (CRS) …', 'Allergic airway …', 'The mechanisms and ….'], 'question': 'Are group 2 innate lymphoid cells ( ILC2s ) increased in chronic rhinosinusitis with nasal polyps or eosinophilia?', 'rationale': 'produce the answer. We need to consider the findings from the study mentioned in the context, which showed that ILC2 frequencies were associated with the presence of nasal polyps, high tissue eosinophilia, and eosinophil-dominant CRS.', 'answer': 'Yes, ILC2s are increased in chronic rhinosinusitis with nasal polyps or eosinophilia.'})\n```", "```py\nstatic_prompt = lm.inspect_history(n=1).rpartition(\"---\\n\")[0]\n```", "```py\nfrom haystack.components.retrievers.in_memory import InMemoryBM25Retriever\nfrom haystack.components.generators import OpenAIGenerator\nfrom haystack.components.builders import PromptBuilder, AnswerBuilder\nfrom haystack import Pipeline\n\ntemplate = static_prompt+\"\"\"\n---\n\nContext:\n{% for document in documents %}\n    «{{ document.content }}»\n{% endfor %}\n\nQuestion: {{question}}\nReasoning: Let's think step by step in order to\n\"\"\"\n\nnew_prompt_builder = PromptBuilder(template=template)\n\nnew_retriever = InMemoryBM25Retriever(document_store, top_k=3)\nnew_generator = OpenAIGenerator(model=\"gpt-3.5-turbo\")\n\nanswer_builder = AnswerBuilder(pattern=\"Answer: (.*)\")\n\noptimized_rag_pipeline = Pipeline()\noptimized_rag_pipeline.add_component(\"retriever\", new_retriever)\noptimized_rag_pipeline.add_component(\"prompt_builder\", new_prompt_builder)\noptimized_rag_pipeline.add_component(\"llm\", new_generator)\noptimized_rag_pipeline.add_component(\"answer_builder\", answer_builder)\n\noptimized_rag_pipeline.connect(\"retriever\", \"prompt_builder.documents\")\noptimized_rag_pipeline.connect(\"prompt_builder\", \"llm\")\noptimized_rag_pipeline.connect(\"llm.replies\", \"answer_builder.replies\")\n```"]