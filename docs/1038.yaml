- en: 'physipy: Make Python Unit-Aware'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/physipy-make-python-unit-aware-846162522889?source=collection_archive---------4-----------------------#2024-04-24](https://towardsdatascience.com/physipy-make-python-unit-aware-846162522889?source=collection_archive---------4-----------------------#2024-04-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Part 1: physipy brings meter and Joule to python'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://mocquin.medium.com/?source=post_page---byline--846162522889--------------------------------)[![Yoann
    Mocquin](../Images/b30a0f70c56972aabd2bc0a74baa90bb.png)](https://mocquin.medium.com/?source=post_page---byline--846162522889--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--846162522889--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--846162522889--------------------------------)
    [Yoann Mocquin](https://mocquin.medium.com/?source=post_page---byline--846162522889--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--846162522889--------------------------------)
    ·9 min read·Apr 24, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: 'Have you ever done engineering/scientific computation with Python, and ended
    up lost or confused about which unit your variable was expressed in, like “is
    that the value in meters or millimeters”? Or you realized that at some point you
    added an electrical current with a resistance — which is impossible? As every
    physics teacher has said at some point: you cannot add carrots and tomatoes.'
  prefs: []
  type: TYPE_NORMAL
- en: Well, [**physipy**](https://physipy.readthedocs.io/en/latest/) is here exactly
    to solve those kinds of problems.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/64c1fa6887982d4d16ccc8d8e44f661c.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Artturi Jalli](https://unsplash.com/@artturijalli?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**Table of content:**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**·** [**What is physipy?**](#c2e8) **·** [**Understanding physipy, an example
    at a time**](#993c)'
  prefs: []
  type: TYPE_NORMAL
- en: ∘[Computing body-mass-index BMI with physipy](#f986)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Newton’s law of motion with numpy array](#af26)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Ohm’s Law with NumPy functions](#5b07)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Einstein’s Mass-Energy Equivalence for common particles, with favunit](#6d8b)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Free-fall with built-in favunit](#b84f)
  prefs: []
  type: TYPE_NORMAL
- en: ∘ [Plotting an object position and speed with Matplotlib](#bf9d)
  prefs: []
  type: TYPE_NORMAL
- en: '**·** [**Wrapup**](#f32d)'
  prefs: []
  type: TYPE_NORMAL
- en: '*All images by author.*'
  prefs: []
  type: TYPE_NORMAL
- en: What is physipy?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
