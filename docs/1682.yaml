- en: Step-by-Step Guide to Creating Simulated Data in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/step-by-step-guide-to-creating-simulated-data-in-python-0845e13e297c?source=collection_archive---------2-----------------------#2024-07-10](https://towardsdatascience.com/step-by-step-guide-to-creating-simulated-data-in-python-0845e13e297c?source=collection_archive---------2-----------------------#2024-07-10)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A beginner-friendly tutorial on generating your own data for analysis and testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://marcusmvls-vinicius.medium.com/?source=post_page---byline--0845e13e297c--------------------------------)[![Marcus
    Sena](../Images/ff594ec7029e6259f0be6dc031d8a6cd.png)](https://marcusmvls-vinicius.medium.com/?source=post_page---byline--0845e13e297c--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0845e13e297c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0845e13e297c--------------------------------)
    [Marcus Sena](https://marcusmvls-vinicius.medium.com/?source=post_page---byline--0845e13e297c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0845e13e297c--------------------------------)
    ·7 min read·Jul 10, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6bcf22a841c978218fcf4b88da3132db.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Alexandru-Bogdan Ghita](https://unsplash.com/@bogzilla?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Imagine you just coded a machine learning model and need to test it on specific
    scenarios, or you are publishing an academic paper about a custom data science
    solution but the available datasets have copyright limitations. On the other hand,
    you might be in the debugging and troubleshooting phase of a machine learning
    project and need data to identify and resolve issues.
  prefs: []
  type: TYPE_NORMAL
- en: All these situations, and many more, can benefit from using simulated data.
    Frequently, real-world data is not readily available, expensive, or private. Therefore,
    creating synthetic data is a useful skill for data science practitioners and professionals.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I present some methods and techniques for creating simulated
    data, toy datasets, and "dummy" values from scratch using Python. Some solutions
    use methods from Python libraries and others are techniques that use built-in
    Python functions.
  prefs: []
  type: TYPE_NORMAL
- en: All the methods shown in the next sections were useful for me at some point
    in research tasks, academic papers, model training, or testing. I hope the reader
    explores the notebook at the end of the article and uses it as a guide or keeps
    it as a reference for future projects.
  prefs: []
  type: TYPE_NORMAL
- en: Table of contents
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[1\. Using NumPy](#0751)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[2\. Using Scikit-learn](#d80b)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[3\. Using SciPy](#5cfb)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[4\. Using Faker](#855f)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[5\. Using Synthetic Data Vault (SDV)](#1937)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Conclusions and Next Steps](#29f3)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1\. Using NumPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The most famous Python library for dealing with linear algebra and numerical
    computing is also helpful for data generation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Linear data generation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this example, I’ll show how to create a dataset with noise having a linear
    relationship with the target values. It can be useful for testing linear regression
    models.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/95b874c7e5687dcb196b28ba4312da16.png)'
  prefs: []
  type: TYPE_IMG
- en: Simulated linear data (image by the author).
  prefs: []
  type: TYPE_NORMAL
- en: '**Time series data**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this example, I'll use NumPy to generate synthetic time series data with
    a linear trend and a seasonal component. That example is useful for financial
    modeling and stock market prediction.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/71c35febf35269780dbb75f742d81401.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Custom data**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes it's needed data with particular characteristics. For example, you
    may need a high-dimensional dataset with only a few informative dimensions for
    dimensionality reduction tasks. In that case, the example below shows an adequate
    method to generate such datasets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The code snippet above creates a dataset with 100 observations and 6 features
    based on a lower dimensional array of only 3 dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Using Scikit-learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to machine learning models, Scikit-learn has data generators useful
    for building artificial datasets with controlled size and complexity.
  prefs: []
  type: TYPE_NORMAL
- en: '**Make classification**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *make_classification* method can be used to create a random n-class dataset.
    That method allows the creation of datasets with a chosen number of observations,
    features, and classes.
  prefs: []
  type: TYPE_NORMAL
- en: It can be useful for testing and debugging classification models such as support
    vector machines, decision trees, and Naive Bayes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/98d2c98069f8ddb2bca5fb1e96c1fe54.png)'
  prefs: []
  type: TYPE_IMG
- en: Dataset first rows (image by the author).
  prefs: []
  type: TYPE_NORMAL
- en: '**Make regression**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, the *make_regression* method is useful for creating datasets for
    regression analysis. It allows to set the number of observations, the number of
    features, the bias, and the noise of the resulting dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5a975196aa5fb709579f692b45283083.png)'
  prefs: []
  type: TYPE_IMG
- en: Simulated data with make_regression (image by the author).
  prefs: []
  type: TYPE_NORMAL
- en: '**Make blobs**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The make_blobs method allows the creation of artificial "blobs" with data that
    can be used for clustering tasks. It allows setting the total number of points
    in the dataset, the number of clusters, and the intra-cluster standard deviation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5df7a4743c1a21b323178106b0755e4e.png)'
  prefs: []
  type: TYPE_IMG
- en: Simulated data in clusters (image by the author).
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Using SciPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SciPy (short for Scientific Python) library is, along with NumPy, one of
    the best ones for handling numerical computing, optimization, statistical analysis,
    and many other mathematical tasks. The stats model of SciPy can create simulated
    data from many statistical distributions, such as normal, binomial, and exponential
    distributions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/752f226fbcac411c23456b8dbed63f3e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/08bb072cfa22c15fcc2a1b3fbebefc1d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0454620f63b59f62107d16ea92a5e27d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Using Faker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What about non-numerical data? Often we need to train our model on non-numerical
    or user data such as name, address, and email. A solution for creating realistic
    data similar to user information is using the Faker Python library.
  prefs: []
  type: TYPE_NORMAL
- en: The Faker Library can generate convincing data that can be used to test applications
    and machine learning classifiers. In the example below, I show how to create a
    fake dataset with name, address, phone number, and email information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/333c512f49172854f7cae1b36f3f3c46.png)'
  prefs: []
  type: TYPE_IMG
- en: Fake user data with Faker (image by the author).
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Using Synthetic Data Vault (SDV)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if you have a dataset that doesn't have enough observations or you need
    more data similar to an existing dataset to supplement the training step of your
    machine-learning model? The Synthetic Data Vault (SDV) is a Python library that
    allows the creation of synthetic datasets using statistical models.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example below, we''ll use SDV to expand a demo dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/929606b4f0f2e46c3484fbee6aedcd8c.png)'
  prefs: []
  type: TYPE_IMG
- en: Adult demo dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2716d3930d21bcb642c7b2721b84b1e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Simulated samples (image by the author).
  prefs: []
  type: TYPE_NORMAL
- en: Observe how the data is very similar to the original dataset but it's synthetic
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions and Next Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The article presented 5 ways of creating simulated and synthetic datasets that
    can be used for machine-learning projects, statistical modeling, and other tasks
    involving data. The examples shown are easy to follow, so I recommend exploring
    the code, reading the documentation available, and developing other data generation
    methods more suitable to every need.
  prefs: []
  type: TYPE_NORMAL
- en: As said before, data scientists, machine learning professionals, and developers
    can gain from using synthetic datasets by improving model performance and lowering
    the costs of production and application testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the notebook with all the methods explored in the article:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/Marcussena/Synthetic-data-generation?source=post_page-----0845e13e297c--------------------------------)
    [## GitHub - Marcussena/Synthetic-data-generation: Simulated Data Generation for
    Data Science and…'
  prefs: []
  type: TYPE_NORMAL
- en: Simulated Data Generation for Data Science and Machine Learning - Marcussena/Synthetic-data-generation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/Marcussena/Synthetic-data-generation?source=post_page-----0845e13e297c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] DataCamp. “Creating Synthetic Data with Python and Faker.” DataCamp, [https://www.datacamp.com/tutorial/creating-synthetic-data-with-python-faker-tutorial](https://www.datacamp.com/tutorial/creating-synthetic-data-with-python-faker-tutorial).
    Accessed 4 July 2024.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Scikit-learn. “Generated Datasets.” Scikit-learn, [https://scikit-learn.org/stable/datasets/sample_generators.html#sample-generators](https://scikit-learn.org/stable/datasets/sample_generators.html#sample-generators).
    Accessed 4 July 2024.'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] SDV User Guide. “Gaussian Copula User Guide.” SDV, [https://sdv.dev/SDV/user_guides/single_table/gaussian_copula.html](https://sdv.dev/SDV/user_guides/single_table/gaussian_copula.html).
    Accessed 4 July 2024.'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] SciPy User Guide. “SciPy Tutorial.” SciPy Documentation, [https://docs.scipy.org/doc/scipy/tutorial/index.html](https://docs.scipy.org/doc/scipy/tutorial/index.html).
    Accessed 4 July 2024.'
  prefs: []
  type: TYPE_NORMAL
