- en: How to Write Memory-Efficient Classes in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-write-memory-efficient-classes-in-python-beb90811abfa?source=collection_archive---------0-----------------------#2024-01-13](https://towardsdatascience.com/how-to-write-memory-efficient-classes-in-python-beb90811abfa?source=collection_archive---------0-----------------------#2024-01-13)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/6d3fa23de320d6f4dd772d2fc675018d.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Christian Dubovan](https://unsplash.com/@cdubo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Three tricks to prevent your data project from memory overflow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@siavashyasini?source=post_page---byline--beb90811abfa--------------------------------)[![Siavash
    Yasini](../Images/55220a8a9397ba51dcc381828735f4a2.png)](https://medium.com/@siavashyasini?source=post_page---byline--beb90811abfa--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--beb90811abfa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--beb90811abfa--------------------------------)
    [Siavash Yasini](https://medium.com/@siavashyasini?source=post_page---byline--beb90811abfa--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--beb90811abfa--------------------------------)
    ·7 min read·Jan 13, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: A few years ago, I wrote a blog post on how to write memory-efficient loops
    in Python which became quite popular. The positive response encouraged me to write
    a second part, where I delve into additional memory optimization methods.
  prefs: []
  type: TYPE_NORMAL
- en: When writing python code, loops are not the only place where we need to be mindful
    of memory usage. In data-related projects and object-oriented code development,
    it is important to make sure that our classes are also memory efficient. Often,
    we invest a significant amount of time designing and writing complex and intricate
    classes, only to discover that they perform poorly in testing or production due
    to the large amount of data they need to carry.
  prefs: []
  type: TYPE_NORMAL
- en: By following the techniques and approaches discussed in the article, you can
    create classes that optimize memory usage and improve overall performance. This
    blog post explores three techniques and recommended approaches for creating memory-efficient
    Python classes.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Use __slots__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Python’s `__slots__` dunder, you can explicitly define the attributes
    that a class can ever possess. This generally helps optimize the memory usage
    of our classes by avoiding the creation of a…
  prefs: []
  type: TYPE_NORMAL
