- en: What’s New in Pandas 2.2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/whats-new-in-pandas-2-2-e3afe6f341f5?source=collection_archive---------3-----------------------#2024-01-30](https://towardsdatascience.com/whats-new-in-pandas-2-2-e3afe6f341f5?source=collection_archive---------3-----------------------#2024-01-30)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The most interesting things about the new release
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@patrick_hoefler?source=post_page---byline--e3afe6f341f5--------------------------------)[![Patrick
    Hoefler](../Images/35ca9ef1100d8c93dbadd374f0569fe1.png)](https://medium.com/@patrick_hoefler?source=post_page---byline--e3afe6f341f5--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--e3afe6f341f5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--e3afe6f341f5--------------------------------)
    [Patrick Hoefler](https://medium.com/@patrick_hoefler?source=post_page---byline--e3afe6f341f5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--e3afe6f341f5--------------------------------)
    ·5 min read·Jan 30, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9eaf581fc856e2a9299e0181e4191394.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Zoe Nicolaou](https://unsplash.com/@lekneuro?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/panda-climbing-on-tree-44g_jwn3JzY?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  prefs: []
  type: TYPE_NORMAL
- en: pandas 2.2 was released on January 22nd 2024\. Let’s take a look at the things
    this release introduces and how it will help us to improve our pandas workloads.
    It includes a bunch of improvements that will improve the user experience.
  prefs: []
  type: TYPE_NORMAL
- en: pandas 2.2 brought a few additional improvements that rely on the Apache Arrow
    ecosystem. Additionally, we added deprecations for changes that are necessary
    to make Copy-on-Write the default in pandas 3.0\. Let’s dig into what this means
    for you. We will look at the most important changes in detail.
  prefs: []
  type: TYPE_NORMAL
- en: I am part of the pandas core team. I am an open source engineer for [Coiled](https://www.coiled.io)
    where I work on Dask, including improving the pandas integration.
  prefs: []
  type: TYPE_NORMAL
- en: Improved PyArrow support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have introduced PyArrow backed DataFrame in pandas 2.0 and continued to improve
    the integration since then to enable a seamless integration into the pandas API.
    pandas has accessors for certain dtypes that enable specialized operations, like
    the string accessor, that provides many string methods. Historically, list and
    structs were represented as NumPy object dtype, which made working with them quite
    cumbersome. The Arrow dtype backend now enables tailored accessors for lists and
    structs, which makes working with these objects a lot easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a series that contains a dictionary in every row. Previously, this
    was only possible with NumPy object dtype and accessing elements from these rows
    required iterating over them. The `struct` accessor now enables direct access
    to certain attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The next release will bring a CategoricalAccessor based on Arrow types.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating the Apache ADBC Driver
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Historically, pandas relied on SqlAlchemy to read data from an Sql database.
    This worked very reliably, but it was very slow. Alchemy reads the data row-wise,
    while pandas has a columnar layout, which makes reading and moving the data into
    a DataFrame slower than necessary.
  prefs: []
  type: TYPE_NORMAL
- en: The [ADBC Driver](https://arrow.apache.org/docs/format/ADBC.html) from the Apache
    Arrow project enables users to read data in a columnar layout, which brings huge
    performance improvements. It reads the data and stores them into an Arrow table,
    which is used to convert to a pandas DataFrame. You can make this conversion zero-copy,
    if you set `dtype_backend="pyarrow"` for `read_sql`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The ADBC Driver currently supports Postgres and Sqlite. I would recommend everyone
    to switch over to this driver if you use Postgres, the driver is significantly
    faster and completely avoids round-tripping through Python objects, thus preserving
    the database types more reliably. This is the feature that I am personally most
    excited about.
  prefs: []
  type: TYPE_NORMAL
- en: Adding case_when to the pandas API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Coming from Sql to pandas, users often miss the case-when syntax that provides
    an easy and clean way to create new columns conditionally. pandas 2.2 adds a new
    `case_when` method, that is defined on a Series. It operates similarly to what
    Sql does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The method takes a list of conditions that are evaluated sequentially. The new
    object is then created with those values in rows where the condition evaluates
    to True. The method should make it significantly easier for us to create conditional
    columns.
  prefs: []
  type: TYPE_NORMAL
- en: Copy-on-Write
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copy-on-Write was initially introduced in pandas 1.5.0\. The mode will become
    the default behavior with 3.0, which is hopefully the next pandas release. This
    means that we have to get our code into a state where it is compliant with the
    Copy-on-Write rules. pandas 2.2 introduced deprecation warnings for operations
    that will change behavior.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will now raise a `FutureWarning`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'I wrote [an earlier post](https://medium.com/towards-data-science/deep-dive-into-pandas-copy-on-write-mode-part-iii-c024eaa16ed4)
    that goes into more detail about how you can migrate your code and what to expect.
    There is an additional warning mode for Copy-on-Write that will raise warnings
    for all cases that change behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Most of those warnings are only noise for the majority of pandas users, which
    is the reason why they are hidden behind an option.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will raise a lengthy warning explaining what will change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The short summary of this is: Updating `view` will never update `df`, no matter
    what operation is used. This is most likely not relevant for most.'
  prefs: []
  type: TYPE_NORMAL
- en: I would recommend enabling the mode and checking the warnings briefly, but not
    to pay too much attention to them if you are comfortable that you are not relying
    on updating two different objects at once.
  prefs: []
  type: TYPE_NORMAL
- en: I would recommend checking out the [migration guide for Copy-on-Write](https://pandas.pydata.org/docs/dev/user_guide/copy_on_write.html#migrating-to-copy-on-write)
    that explains the necessary changes in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading to the new version
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can install the new pandas version with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Or:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This will give you the new release in your environment.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ve looked at a couple of improvements that will improve performance and user
    experience for certain aspects of pandas. The most exciting new features will
    come in pandas 3.0, where Copy-on-Write will be enabled by default.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading. Feel free to reach out to share your thoughts and feedback.
  prefs: []
  type: TYPE_NORMAL
