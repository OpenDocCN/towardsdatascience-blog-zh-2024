- en: LLM Agents Demystified
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/llm-agents-demystified-8e2a62c185fa?source=collection_archive---------1-----------------------#2024-07-14](https://towardsdatascience.com/llm-agents-demystified-8e2a62c185fa?source=collection_archive---------1-----------------------#2024-07-14)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hands-on ReAct agent implementation with AdalFlow library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://liyin2015.medium.com/?source=post_page---byline--8e2a62c185fa--------------------------------)[![Li
    Yin](../Images/ef856165bfb90c952ed7d16da42e28ee.png)](https://liyin2015.medium.com/?source=post_page---byline--8e2a62c185fa--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--8e2a62c185fa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--8e2a62c185fa--------------------------------)
    [Li Yin](https://liyin2015.medium.com/?source=post_page---byline--8e2a62c185fa--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--8e2a62c185fa--------------------------------)
    ·14 min read·Jul 14, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/377c1a54d2816cd3209bda5a881ca73e.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Image source](https://unsplash.com/photos/an-abstract-image-of-a-sphere-with-dots-and-lines-nGoCBxiaRO0),
    credits to [Growtika](https://unsplash.com/@growtika)'
  prefs: []
  type: TYPE_NORMAL
- en: 'AdalFlow library: [https://github.com/SylphAI-Inc/AdalFlow](https://github.com/SylphAI-Inc/AdalFlow)'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Colab notebook**](https://colab.research.google.com/drive/1mpocvG8lPyW1ISOK7SJ4bCt9KmQCP0SJ?usp=sharing)'
  prefs: []
  type: TYPE_NORMAL
- en: '*“An autonomous agent is a system situated within and a part of an environment
    that senses that environment and acts on it, over time, in pursuit of its own
    agenda and so as to effect what it senses in the future.”*'
  prefs: []
  type: TYPE_NORMAL
- en: '*— Franklin and Graesser (1997)*'
  prefs: []
  type: TYPE_NORMAL
- en: Alongside the well-known RAGs, agents [[1]](https://lightrag.sylph.ai/tutorials/agent.html#id3)
    are another popular family of LLM applications. What makes agents stand out is
    their ability to reason, plan, and act via accessible tools. When it comes to
    implementation, AdalFlow has simplified it down to a generator that can use tools,
    taking multiple steps (sequential or parallel) to complete a user query.
  prefs: []
  type: TYPE_NORMAL
- en: What is ReAct Agent?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will first introduce ReAct [[2]](https://lightrag.sylph.ai/tutorials/agent.html#id4),
    a general paradigm for building agents with a sequential of interleaving thought,
    action, and observation steps.
  prefs: []
  type: TYPE_NORMAL
- en: '**Thought**: The reasoning behind taking an action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Action**: The action to take from a predefined set of actions. In particular,
    these are the tools/functional tools we have introduced in [tools](https://lightrag.sylph.ai/tutorials/tool_helper.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Observation**: The simplest scenario is the execution result of the action
    in string format. To be more robust, this can be defined in any way that provides
    the right amount of execution information for the LLM to plan the next step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prompt and Data Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`[**DEFAULT_REACT_AGENT_SYSTEM_PROMPT**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.DEFAULT_REACT_AGENT_SYSTEM_PROMPT)`
    is the default prompt for React agent’s LLM planner. We can categorize the prompt
    template into four parts:'
  prefs: []
  type: TYPE_NORMAL
- en: Task description
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This part is the overall role setup and task description for the agent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Tools, output format, and example
  prefs: []
  type: TYPE_NORMAL
- en: This part of the template is exactly the same as how we were calling functions
    in the [tools](https://lightrag.sylph.ai/tutorials/tool_helper.html). The `output_format_str`
    is generated by `FunctionExpression` via `JsonOutputParser`. It includes the actual
    output format and examples of a list of `FunctionExpression` instances. We use
    `thought` and `action` fields of the `FunctionExpression` as the agent’s response.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Task specification to teach the planner how to “think”.
  prefs: []
  type: TYPE_NORMAL
- en: We provide more detailed instruction to ensure the agent will always end with
    ‘finish’ action to complete the task. Additionally, we teach it how to handle
    simple queries and complex queries.
  prefs: []
  type: TYPE_NORMAL
- en: For simple queries, we instruct the agent to finish with as few steps as possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For complex queries, we teach the agent a ‘divide-and-conquer’ strategy to solve
    the query step by step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We put all these three parts together to be within the `<SYS></SYS>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Agent step history.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use `[**StepOutput**](https://lightrag.sylph.ai/apis/core/core.types.html#core.types.StepOutput)`
    to record the agent’s step history, including:'
  prefs: []
  type: TYPE_NORMAL
- en: '`action`: This will be the `FunctionExpression` instance predicted by the agent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`observation`: The execution result of the action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In particular, we format the steps history after the user query as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to the tools provided by users, by default, we add a new tool named
    `finish` to allow the agent to stop and return the final answer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Simply returning a string might not fit all scenarios, and we might consider
    allowing users to define their own finish function in the future for more complex
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, since the provided tools cannot always solve user queries, we
    allow users to configure if an LLM model should be used to solve a subquery via
    the `add_llm_as_fallback` parameter. This LLM will use the same model client and
    model arguments as the agent’s planner. Here is our code to specify the fallback
    LLM tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: React Agent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We define the class `[**ReActAgent**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.ReActAgent)`
    to put everything together. It will orchestrate two components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`planner`: A `Generator` that works with a `JsonOutputParser` to parse the
    output format and examples of the function calls using `FunctionExpression`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ToolManager`: Manages a given list of tools, the finish function, and the
    LLM tool. It is responsible for parsing and executing the functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, it manages step_history as a list of `StepOutput` instances for
    the agent’s internal state.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f1e51b6cfadc9c78c5729ddecc0c5b9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Prompt the agent with an input query and process the steps to generate a response.
  prefs: []
  type: TYPE_NORMAL
- en: Agent In Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will set up two sets of models, llama3–70b-8192 by Groq and gpt-3.5-turbo
    by OpenAI, to test two queries. For comparison, we will compare these with a vanilla
    LLM response without using the agent. Here are the code snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The structure of React, including the initialization arguments and two major
    components: `tool_manager` and `planner`, is shown below.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]\n{\n    "thought": "Why the function is called (Optional[str]) (optional)",\n    "action":
    "FuncName() Valid function call expression. Example: \\"FuncName(a=1, b=2)\\"
    Follow the data type specified in the function parameters.e.g. for Type object
    with x,y properties, use \\"ObjectType(x=1, y=2) (str) (required)"\n}\n[PRE8]\n{\n    "thought":
    "I have finished the task.",\n    "action": "finish(answer=\\"final answer: \''answer\''\\")"\n}\n________\n[PRE9]).
    Please do not add anything other than valid JSON output!\n-Use double quotes for
    the keys and string values.\n-DO NOT mistaken the "properties" and "type" in the
    schema as the actual fields in the JSON output.\n-Follow the JSON formatting conventions.''},
    prompt_variables: [''input_str'', ''tools'', ''step_history'', ''output_format_str'']'
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '(model_client): GroqAPIClient()'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '(output_processors): JsonOutputParser('
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'data_class=FunctionExpression, examples=[FunctionExpression(thought=''I have
    finished the task.'', action=''finish(answer="final answer: \''answer\''")'')],
    exclude_fields=None, return_data_class=True'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '(output_format_prompt): Prompt('
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'template: Your output should be formatted as a standard JSON instance with
    the following schema:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '{% if example %}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Examples:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '{% endif %}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: -Make sure to always enclose the JSON output in triple backticks ([PRE12]
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, let’s run the test function to see the agent in action.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Our agent will show the core steps for developers via colored printout, including
    input_query, steps, and the final answer. The printout of the first query with
    llama3 is shown below (without the color here):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2ee8fc221d212043565747fa5e693db2.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'For the second query, the printout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The comparison between the agent and the vanilla LLM response is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'For the second query, the comparison is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The ReAct agent is particularly helpful for answering queries that require capabilities
    like computation or more complicated reasoning and planning. However, using it
    on general queries might be an overkill, as it might take more steps than necessary
    to answer the query.
  prefs: []
  type: TYPE_NORMAL
- en: Customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Template**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing you want to customize is the template itself. You can do this
    by passing your own template to the agent’s constructor. We suggest you to modify
    our default template: `[**DEFAULT_REACT_AGENT_SYSTEM_PROMPT**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.DEFAULT_REACT_AGENT_SYSTEM_PROMPT)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Examples for Better Output Format**'
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, the `examples` in the constructor allow you to provide more examples
    to enforce the correct output format. For instance, if we want it to learn how
    to correctly call multiply, we can pass in a list of `FunctionExpression` instances
    with the correct format. Classmethod `from_function` can be used to create a `FunctionExpression`
    instance from a function and its arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can visualize how this is passed to the planner prompt via:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The above example will be formated as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"thought": "Why the function is called (Optional[str]) (optional)",'
  prefs: []
  type: TYPE_NORMAL
- en: '"action": "FuncName(<kwargs>) Valid function call expression. Example: \"FuncName(a=1,
    b=2)\" Follow the data type specified in the function parameters.e.g. for Type
    object with x,y properties, use \"ObjectType(x=1, y=2) (str) (required)"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"thought": "Now, let''s multiply two numbers.",'
  prefs: []
  type: TYPE_NORMAL
- en: '"action": "multiply(a=3, b=4)"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: ________
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"thought": "I have finished the task.",'
  prefs: []
  type: TYPE_NORMAL
- en: '"action": "finish(answer=\"final answer: ''answer''\")"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: ________
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]). Please do not add anything other than valid JSON output!'
  prefs: []
  type: TYPE_NORMAL
- en: -Use double quotes for the keys and string values.
  prefs: []
  type: TYPE_NORMAL
- en: -DO NOT mistaken the "properties" and "type" in the schema as the actual fields
    in the JSON output.
  prefs: []
  type: TYPE_NORMAL
- en: -Follow the JSON formatting conventions.
  prefs: []
  type: TYPE_NORMAL
- en: </OUTPUT_FORMAT>
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: '**Subclass ReActAgent**'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to customize the agent further, you can subclass the `[**ReActAgent**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.ReActAgent)`
    and override the methods you want to change.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] A survey on large language model based autonomous agents: [Paitesanshi/LLM-Agent-Survey](https://github.com/Paitesanshi/LLM-Agent-Survey)'
  prefs: []
  type: TYPE_NORMAL
- en: '**[**[**2**](https://lightrag.sylph.ai/tutorials/agent.html#id2)**]** ReAct:
    [https://arxiv.org/abs/2210.03629](https://arxiv.org/abs/2210.03629)'
  prefs: []
  type: TYPE_NORMAL
- en: API references
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`[**components.agent.react.ReActAgent**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.ReActAgent)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[**core.types.StepOutput**](https://lightrag.sylph.ai/apis/core/core.types.html#core.types.StepOutput)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[**components.agent.react.DEFAULT_REACT_AGENT_SYSTEM_PROMPT**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.DEFAULT_REACT_AGENT_SYSTEM_PROMPT)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
