["```py\nimport numpy as np\nimport pandas as pd\nfrom sklearn.datasets import fetch_openml\nfrom sklearn.preprocessing import RobustScaler\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pyod.models.iforest import IForest\nfrom pyod.models.lof import LOF\nfrom pyod.models.ecod import ECOD\n\n# Collect the data\ndata = fetch_openml('abalone', version=1) \ndf = pd.DataFrame(data.data, columns=data.feature_names)\ndf = pd.get_dummies(df)\ndf = pd.DataFrame(RobustScaler().fit_transform(df), columns=df.columns)\n\n# Use an Isolation Forest to clean the data\nclf = IForest() \nclf.fit(df)\nif_scores = clf.decision_scores_\ntop_if_scores = np.argsort(if_scores)[::-1][:10]\nclean_df = df.loc[[x for x in df.index if x not in top_if_scores]].copy()\n\n# Create a set of doped records\ndoped_df = df.copy() \nfor i in doped_df.index:\n  col_name = np.random.choice(df.columns)\n  med_val = clean_df[col_name].median()\n  if doped_df.loc[i, col_name] > med_val:\n    doped_df.loc[i, col_name] = \\   \n      clean_df[col_name].quantile(np.random.random()/2)\n  else:\n    doped_df.loc[i, col_name] = \\\n       clean_df[col_name].quantile(0.5 + np.random.random()/2)\n\n# Define a method to test a specified detector. \ndef test_detector(clf, title, df, clean_df, doped_df, ax): \n  clf.fit(clean_df)\n  df = df.copy()\n  doped_df = doped_df.copy()\n  df['Scores'] = clf.decision_function(df)\n  df['Source'] = 'Real'\n  doped_df['Scores'] = clf.decision_function(doped_df)\n  doped_df['Source'] = 'Doped'\n  test_df = pd.concat([df, doped_df])\n  sns.boxplot(data=test_df, orient='h', x='Scores', y='Source', ax=ax)\n  ax.set_title(title)\n\n# Plot each detector in terms of how well they score doped records \n# higher than the original records\nfig, ax = plt.subplots(nrows=1, ncols=3, sharey=True, figsize=(10, 3)) \ntest_detector(IForest(), \"IForest\", df, clean_df, doped_df, ax[0])\ntest_detector(LOF(), \"LOF\", df, clean_df, doped_df, ax[1])\ntest_detector(ECOD(), \"ECOD\", df, clean_df, doped_df, ax[2])\nplt.tight_layout()\nplt.show()\n```"]