["```py\nclass EmptyClass:\n    pass\n```", "```py\nempty_instance = EmptyClass()\nanother_empty_instance = EmptyClass()\n\n>>> empty_instance == another_empty_instance\nFalse\n```", "```py\n>>> dir(EmptyClass)\n['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', \n'__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', \n'__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', \n'__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', \n'__str__', '__subclasshook__', '__weakref__']\n```", "```py\nclass Item:\n    def __init__(self, name: str, price: float) -> None:\n        self.name = name\n        self.price = price\n\nitem = Item(name=\"Milk (1L)\", price=0.99)\n```", "```py\n>>> item\n<__main__.Item at 0x00000226C614E870>\n```", "```py\nclass Item:\n    def __init__(self, name: str, price: float) -> None:\n        self.name = name\n        self.price = price\n\n    def __repr__(self) -> str:\n        return f\"{self.__class__.__name__}('{self.name}', {self.price})\"\n\nitem = Item(name=\"Milk (1L)\", price=0.99)\n\n>>> item # In this example it is equivalent also to the command: print(item)\nItem('Milk (1L)', 0.99)\n```", "```py\nfrom typing import Optional, Iterator\nfrom typing_extensions import Self\n\nclass Grocery:\n\n    def __init__(self, items: Optional[dict[Item, int]] = None):\n        self.items = items or dict()\n\n    def __add__(self, new_items: dict[Item, int]) -> Self:\n\n        new_grocery = Grocery(items=self.items)\n\n        for new_item, quantity in new_items.items():\n\n            if new_item in new_grocery.items:\n                new_grocery.items[new_item] += quantity\n            else:\n                new_grocery.items[new_item] = quantity\n\n        return new_grocery\n\n    def __iter__(self) -> Iterator[Item]:\n        return iter(self.items)\n\n    def __getitem__(self, item: Item) -> int:\n\n        if self.items.get(item):\n            return self.items.get(item)\n        else:\n            raise KeyError(f\"Item {item} not in the grocery\")\n```", "```py\nitem = Item(name=\"Milk (1L)\", price=0.99)\ngrocery = Grocery(items={item: 3})\n\n>>> print(grocery.items)\n{Item('Milk (1L)', 0.99): 3}\n```", "```py\nnew_item = Item(name=\"Soy Sauce (0.375L)\", price=1.99)\ngrocery = grocery + {new_item: 1} + {item: 2}\n\n>>> print(grocery.items)\n{Item('Milk (1L)', 0.99): 5, Item('Soy Sauce (0.375L)', 1.99): 1}\n```", "```py\n>>> print([item for item in grocery])\n[Item('Milk (1L)', 0.99), Item('Soy Sauce (0.375L)', 1.99)]\n```", "```py\n>>> grocery[new_item]\n1\n\nfake_item = Item(\"Creamy Cheese (500g)\", 2.99)\n>>> grocery[fake_item]\nKeyError: \"Item Item('Creamy Cheese (500g)', 2.99) not in the grocery\"\n```", "```py\nimport time \n\ndef expensive_function(input):\n    time.sleep(5)\n    return input\n```", "```py\nstart_time = time.time()\n\n>>> print(expensive_function(2))\n>>> print(expensive_function(2))\n>>> print(f\"Time for computation: {round(time.time()-start_time, 1)} seconds\")\n2\n2\nTime for computation: 10.0 seconds\n```", "```py\nclass CachedExpensiveFunction:\n\n    def __init__(self) -> None:\n        self.cache = dict()\n\n    def __call__(self, input):\n        if input not in self.cache:\n            output = expensive_function(input=input)\n            self.cache[input] = output\n            return output\n        else:\n            return self.cache.get(input)\n\nstart_time = time.time()\ncached_exp_func = CachedExpensiveFunction()\n\n>>> print(cached_exp_func(2))\n>>> print(cached_exp_func(2))\n>>> print(f\"Time for computation: {round(time.time()-start_time, 1)} seconds\")\n2\n2\nTime for computation: 5.0 seconds\n```", "```py\nstart_time = time.time()\nanother_cached_exp_func = CachedExpensiveFunction()\n\n>>> print(cached_exp_func(3))\n>>> print(another_cached_exp_func (3))\n>>> print(f\"Time for computation: {round(time.time()-start_time, 1)} seconds\")\n3\n3\nTime for computation: 10.0 seconds\n```"]