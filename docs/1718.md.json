["```py\ntask_desc = r\"\"\"You are a helpful assistant.\nAnswer the user's query using the tools provided below with minimal steps and maximum accuracy.\nEach step you will read the previous Thought, Action, and Observation(execution result of the action) and then provide the next Thought and Action.\"\"\"\n```", "```py\ntools = r\"\"\"{% if tools %}\n<TOOLS>\n{% for tool in tools %}\n{{ loop.index }}.\n{{tool}}\n------------------------\n{% endfor %}\n</TOOLS>\n{% endif %}\n{{output_format_str}}\"\"\"\n```", "```py\ntask_spec = r\"\"\"<TASK_SPEC>\n- For simple queries: Directly call the ``finish`` action and provide the answer.\n- For complex queries:\n   - Step 1: Read the user query and potentially divide it into subqueries. And get started with the first subquery.\n   - Call one available tool at a time to solve each subquery/subquestion. \\\n   - At step 'finish', join all subqueries answers and finish the task.\nRemember:\n- Action must call one of the above tools with name. It can not be empty.\n- You will always end with 'finish' action to finish the task. The answer can be the final answer or failure message.\n</TASK_SPEC>\"\"\"\n```", "```py\nstep_history = r\"\"\"User query:\n{{ input_str }}\n{# Step History #}\n{% if step_history %}\n<STEPS>\n{% for history in step_history %}\nStep {{ loop.index }}.\n\"Thought\": \"{{history.action.thought}}\",\n\"Action\": \"{{history.action.action}}\",\n\"Observation\": \"{{history.observation}}\"\n------------------------\n{% endfor %}\n</STEPS>\n{% endif %}\nYou:\"\"\"\n```", "```py\ndef finish(answer: str) -> str:\n   \"\"\"Finish the task with answer.\"\"\"\n   return answer\n```", "```py\n_additional_llm_tool = (\n   Generator(model_client=model_client, model_kwargs=model_kwargs)\n   if self.add_llm_as_fallback\n   else None\n)\n\ndef llm_tool(input: str) -> str:\n   \"\"\"I answer any input query with llm's world knowledge. Use me as a fallback tool or when the query is simple.\"\"\"\n   # use the generator to answer the query\n   try:\n         output: GeneratorOutput = _additional_llm_tool(\n            prompt_kwargs={\"input_str\": input}\n         )\n         response = output.data if output else None\n         return response\n   except Exception as e:\n         log.error(f\"Error using the generator: {e}\")\n         print(f\"Error using the generator: {e}\")\n   return None\n```", "```py\nfrom lightrag.components.agent import ReActAgent\nfrom lightrag.core import Generator, ModelClientType, ModelClient\nfrom lightrag.utils import setup_env\n\nsetup_env()\n\n# Define tools\ndef multiply(a: int, b: int) -> int:\n   \"\"\"\n   Multiply two numbers.\n   \"\"\"\n   return a * b\ndef add(a: int, b: int) -> int:\n   \"\"\"\n   Add two numbers.\n   \"\"\"\n   return a + b\ndef divide(a: float, b: float) -> float:\n   \"\"\"\n   Divide two numbers.\n   \"\"\"\n   return float(a) / b\nllama3_model_kwargs = {\n   \"model\": \"llama3-70b-8192\",  # llama3 70b works better than 8b here.\n   \"temperature\": 0.0,\n}\ngpt_model_kwargs = {\n   \"model\": \"gpt-3.5-turbo\",\n   \"temperature\": 0.0,\n}\n\ndef test_react_agent(model_client: ModelClient, model_kwargs: dict):\n   tools = [multiply, add, divide]\n   queries = [\n      \"What is the capital of France? and what is 465 times 321 then add 95297 and then divide by 13.2?\",\n      \"Give me 5 words rhyming with cool, and make a 4-sentence poem using them\",\n   ]\n   # define a generator without tools for comparison\n   generator = Generator(\n      model_client=model_client,\n      model_kwargs=model_kwargs,\n   )\n   react = ReActAgent(\n      max_steps=6,\n      add_llm_as_fallback=True,\n      tools=tools,\n      model_client=model_client,\n      model_kwargs=model_kwargs,\n   )\n   # print(react)\n   for query in queries:\n      print(f\"Query: {query}\")\n      agent_response = react.call(query)\n      llm_response = generator.call(prompt_kwargs={\"input_str\": query})\n      print(f\"Agent response: {agent_response}\")\n      print(f\"LLM response: {llm_response}\")\n      print(\"\")\n```", "```py\nReActAgent(\n   max_steps=6, add_llm_as_fallback=True,\n   (tool_manager): ToolManager(Tools: [FunctionTool(fn: , async: False, definition: FunctionDefinition(func_name='multiply', func_desc='multiply(a: int, b: int) -> int\\n\\n    Multiply two numbers.\\n    ', func_parameters={'type': 'object', 'properties': {'a': {'type': 'int'}, 'b': {'type': 'int'}}, 'required': ['a', 'b']})), FunctionTool(fn: , async: False, definition: FunctionDefinition(func_name='add', func_desc='add(a: int, b: int) -> int\\n\\n    Add two numbers.\\n    ', func_parameters={'type': 'object', 'properties': {'a': {'type': 'int'}, 'b': {'type': 'int'}}, 'required': ['a', 'b']})), FunctionTool(fn: , async: False, definition: FunctionDefinition(func_name='divide', func_desc='divide(a: float, b: float) -> float\\n\\n    Divide two numbers.\\n    ', func_parameters={'type': 'object', 'properties': {'a': {'type': 'float'}, 'b': {'type': 'float'}}, 'required': ['a', 'b']})), FunctionTool(fn: .llm_tool at 0x11384b740>, async: False, definition: FunctionDefinition(func_name='llm_tool', func_desc=\"llm_tool(input: str) -> str\\nI answer any input query with llm's world knowledge. Use me as a fallback tool or when the query is simple.\", func_parameters={'type': 'object', 'properties': {'input': {'type': 'str'}}, 'required': ['input']})), FunctionTool(fn: .finish at 0x11382fa60>, async: False, definition: FunctionDefinition(func_name='finish', func_desc='finish(answer: str) -> str\\nFinish the task with answer.', func_parameters={'type': 'object', 'properties': {'answer': {'type': 'str'}}, 'required': ['answer']}))], Additional Context: {})\n   (planner): Generator(\n      model_kwargs={'model': 'llama3-70b-8192', 'temperature': 0.0},\n      (prompt): Prompt(\n         template: \n         {# role/task description #}\n         You are a helpful assistant.\n         Answer the user's query using the tools provided below with minimal steps and maximum accuracy.\n         {# REACT instructions #}\n         Each step you will read the previous Thought, Action, and Observation(execution result of the action) and then provide the next Thought and Action.\n         {# Tools #}\n         {% if tools %}\n\n         You available tools are:\n         {# tools #}\n         {% for tool in tools %}\n         {{ loop.index }}.\n         {{tool}}\n         ------------------------\n         {% endfor %}\n\n         {% endif %}\n         {# output format and examples #}\n\n         {{output_format_str}}\n\n         {# Task specification to teach the agent how to think using 'divide and conquer' strategy #}\n         - For simple queries: Directly call the ``finish`` action and provide the answer.\n         - For complex queries:\n            - Step 1: Read the user query and potentially divide it into subqueries. And get started with the first subquery.\n            - Call one available tool at a time to solve each subquery/subquestion. \\\n            - At step 'finish', join all subqueries answers and finish the task.\n         Remember:\n         - Action must call one of the above tools with name. It can not be empty.\n         - You will always end with 'finish' action to finish the task. The answer can be the final answer or failure message.\n\n         -----------------\n         User query:\n         {{ input_str }}\n         {# Step History #}\n         {% if step_history %}\n\n         {% for history in step_history %}\n         Step {{ loop.index }}.\n         \"Thought\": \"{{history.action.thought}}\",\n         \"Action\": \"{{history.action.action}}\",\n         \"Observation\": \"{{history.observation}}\"\n         ------------------------\n         {% endfor %}\n\n         {% endif %}\n         You:, prompt_kwargs: {'tools': ['func_name: multiply\\nfunc_desc: \"multiply(a: int, b: int) -> int\\\\n\\\\n    Multiply two numbers.\\\\n    \"\\nfunc_parameters:\\n  type: object\\n  properties:\\n    a:\\n      type: int\\n    b:\\n      type: int\\n  required:\\n  - a\\n  - b\\n', 'func_name: add\\nfunc_desc: \"add(a: int, b: int) -> int\\\\n\\\\n    Add two numbers.\\\\n    \"\\nfunc_parameters:\\n  type: object\\n  properties:\\n    a:\\n      type: int\\n    b:\\n      type: int\\n  required:\\n  - a\\n  - b\\n', 'func_name: divide\\nfunc_desc: \"divide(a: float, b: float) -> float\\\\n\\\\n    Divide two numbers.\\\\n    \"\\nfunc_parameters:\\n  type: object\\n  properties:\\n    a:\\n      type: float\\n    b:\\n      type: float\\n  required:\\n  - a\\n  - b\\n', \"func_name: llm_tool\\nfunc_desc: 'llm_tool(input: str) -> str\\n\\n  I answer any input query with llm''s world knowledge. Use me as a fallback tool\\n  or when the query is simple.'\\nfunc_parameters:\\n  type: object\\n  properties:\\n    input:\\n      type: str\\n  required:\\n  - input\\n\", \"func_name: finish\\nfunc_desc: 'finish(answer: str) -> str\\n\\n  Finish the task with answer.'\\nfunc_parameters:\\n  type: object\\n  properties:\\n    answer:\\n      type: str\\n  required:\\n  - answer\\n\"], 'output_format_str': 'Your output should be formatted as a standard JSON instance with the following schema:\\n```", "```py\\nExamples:\\n```", "```py\\n-Make sure to always enclose the JSON output in triple backticks (```", "```py\n         {{schema}}\n         ```", "```py\n         {{example}}\n         ```", "```py). Please do not add anything other than valid JSON output!\n         -Use double quotes for the keys and string values.\n         -DO NOT mistaken the \"properties\" and \"type\" in the schema as the actual fields in the JSON output.\n         -Follow the JSON formatting conventions., prompt_variables: ['example', 'schema']\n         )\n         (output_processors): JsonParser()\n      )\n   )\n)\n```", "```py\ntest_react_agent(ModelClientType.GROQ(), llama3_model_kwargs)\ntest_react_agent(ModelClientType.OPENAI(), gpt_model_kwargs)\n```", "```py\n2024-07-10 16:48:47 - [react.py:287:call] - input_query: What is the capital of France? and what is 465 times 321 then add 95297 and then divide by 13.2\n\n2024-07-10 16:48:48 - [react.py:266:_run_one_step] - Step 1:\nStepOutput(step=1, action=FunctionExpression(thought=\"Let's break down the query into subqueries and start with the first one.\", action='llm_tool(input=\"What is the capital of France?\")'), function=Function(thought=None, name='llm_tool', args=[], kwargs={'input': 'What is the capital of France?'}), observation='The capital of France is Paris!')\n_______\n2024-07-10 16:48:49 - [react.py:266:_run_one_step] - Step 2:\nStepOutput(step=2, action=FunctionExpression(thought=\"Now, let's move on to the second subquery.\", action='multiply(a=465, b=321)'), function=Function(thought=None, name='multiply', args=[], kwargs={'a': 465, 'b': 321}), observation=149265)\n_______\n2024-07-10 16:48:49 - [react.py:266:_run_one_step] - Step 3:\nStepOutput(step=3, action=FunctionExpression(thought=\"Now, let's add 95297 to the result.\", action='add(a=149265, b=95297)'), function=Function(thought=None, name='add', args=[], kwargs={'a': 149265, 'b': 95297}), observation=244562)\n_______\n2024-07-10 16:48:50 - [react.py:266:_run_one_step] - Step 4:\nStepOutput(step=4, action=FunctionExpression(thought=\"Now, let's divide the result by 13.2.\", action='divide(a=244562, b=13.2)'), function=Function(thought=None, name='divide', args=[], kwargs={'a': 244562, 'b': 13.2}), observation=18527.424242424244)\n_______\n2024-07-10 16:48:50 - [react.py:266:_run_one_step] - Step 5:\nStepOutput(step=5, action=FunctionExpression(thought=\"Now, let's combine the answers of both subqueries.\", action='finish(answer=\"The capital of France is Paris! and the result of the mathematical operation is 18527.424242424244.\")'), function=Function(thought=None, name='finish', args=[], kwargs={'answer': 'The capital of France is Paris! and the result of the mathematical operation is 18527.424242424244.'}), observation='The capital of France is Paris! and the result of the mathematical operation is 18527.424242424244.')\n_______\n2024-07-10 16:48:50 - [react.py:301:call] - answer:\nThe capital of France is Paris! and the result of the mathematical operation is 18527.424242424244.\n```", "```py\n2024-07-10 16:48:51 - [react.py:287:call] - input_query: Give me 5 words rhyming with cool, and make a 4-sentence poem using them\n2024-07-10 16:48:52 - [react.py:266:_run_one_step] - Step 1:\nStepOutput(step=1, action=FunctionExpression(thought=\"I need to find 5 words that rhyme with 'cool'.\", action='llm_tool(input=\"What are 5 words that rhyme with \\'cool\\'?\")'), function=Function(thought=None, name='llm_tool', args=[], kwargs={'input': \"What are 5 words that rhyme with 'cool'?\"}), observation='Here are 5 words that rhyme with \"cool\":\\n\\n1\\. Rule\\n2\\. Tool\\n3\\. Fool\\n4\\. Pool\\n5\\. School')\n_______\n2024-07-10 16:49:00 - [react.py:266:_run_one_step] - Step 2:\nStepOutput(step=2, action=FunctionExpression(thought='Now that I have the rhyming words, I need to create a 4-sentence poem using them.', action='llm_tool(input=\"Create a 4-sentence poem using the words \\'rule\\', \\'tool\\', \\'fool\\', \\'pool\\', and \\'school\\'.\")'), function=Function(thought=None, name='llm_tool', args=[], kwargs={'input': \"Create a 4-sentence poem using the words 'rule', 'tool', 'fool', 'pool', and 'school'.\"}), observation=\"Here is a 4-sentence poem using the words 'rule', 'tool', 'fool', 'pool', and 'school':\\n\\nIn the classroom, we learn to rule,\\nWith a pencil as our trusty tool.\\nBut if we're not careful, we can be a fool,\\nAnd end up swimming in the school pool.\")\n_______\n2024-07-10 16:49:12 - [react.py:266:_run_one_step] - Step 3:\nStepOutput(step=3, action=FunctionExpression(thought='I have the poem, now I need to finish the task.', action='finish(answer=\"Here are 5 words that rhyme with \\'cool\\': rule, tool, fool, pool, school. Here is a 4-sentence poem using the words: In the classroom, we learn to rule, With a pencil as our trusty tool. But if we\\'re not careful, we can be a fool, And end up swimming in the school pool.\")'), function=Function(thought=None, name='finish', args=[], kwargs={'answer': \"Here are 5 words that rhyme with 'cool': rule, tool, fool, pool, school. Here is a 4-sentence poem using the words: In the classroom, we learn to rule, With a pencil as our trusty tool. But if we're not careful, we can be a fool, And end up swimming in the school pool.\"}), observation=\"Here are 5 words that rhyme with 'cool': rule, tool, fool, pool, school. Here is a 4-sentence poem using the words: In the classroom, we learn to rule, With a pencil as our trusty tool. But if we're not careful, we can be a fool, And end up swimming in the school pool.\")\n_______\n2024-07-10 16:49:12 - [react.py:301:call] - answer:\nHere are 5 words that rhyme with 'cool': rule, tool, fool, pool, school. Here is a 4-sentence poem using the words: In the classroom, we learn to rule, With a pencil as our trusty tool. But if we're not careful, we can be a fool, And end up swimming in the school pool.\n```", "```py\nAnswer with agent: The capital of France is Paris! and the result of the mathematical operation is 18527.424242424244.\nAnswer without agent: GeneratorOutput(data=\"I'd be happy to help you with that!\\n\\nThe capital of France is Paris.\\n\\nNow, let's tackle the math problem:\\n\\n1\\. 465 × 321 = 149,485\\n2\\. Add 95,297 to that result: 149,485 + 95,297 = 244,782\\n3\\. Divide the result by 13.2: 244,782 ÷ 13.2 = 18,544.09\\n\\nSo, the answer is 18,544.09!\", error=None, usage=None, raw_response=\"I'd be happy to help you with that!\\n\\nThe capital of France is Paris.\\n\\nNow, let's tackle the math problem:\\n\\n1\\. 465 × 321 = 149,485\\n2\\. Add 95,297 to that result: 149,485 + 95,297 = 244,782\\n3\\. Divide the result by 13.2: 244,782 ÷ 13.2 = 18,544.09\\n\\nSo, the answer is 18,544.09!\", metadata=None)\n```", "```py\nAnswer with agent: Here are 5 words that rhyme with 'cool': rule, tool, fool, pool, school. Here is a 4-sentence poem using the words: In the classroom, we learn to rule, With a pencil as our trusty tool. But if we're not careful, we can be a fool, And end up swimming in the school pool.\nAnswer without agent: GeneratorOutput(data='Here are 5 words that rhyme with \"cool\":\\n\\n1\\. rule\\n2\\. tool\\n3\\. fool\\n4\\. pool\\n5\\. school\\n\\nAnd here\\'s a 4-sentence poem using these words:\\n\\nIn the summer heat, I like to be cool,\\nFollowing the rule, I take a dip in the pool.\\nI\\'m not a fool, I know just what to do,\\nI grab my tool and head back to school.', error=None, usage=None, raw_response='Here are 5 words that rhyme with \"cool\":\\n\\n1\\. rule\\n2\\. tool\\n3\\. fool\\n4\\. pool\\n5\\. school\\n\\nAnd here\\'s a 4-sentence poem using these words:\\n\\nIn the summer heat, I like to be cool,\\nFollowing the rule, I take a dip in the pool.\\nI\\'m not a fool, I know just what to do,\\nI grab my tool and head back to school.', metadata=None)\n```", "```py\nfrom lightrag.core.types import FunctionExpression\n```", "```py\n# generate an example of calling multiply with key-word arguments\nexample_using_multiply = FunctionExpression.from_function(\n     func=multiply,\n     thought=\"Now, let's multiply two numbers.\",\n     a=3,\n     b=4,\n )\nexamples = [example_using_multiply]# pass it to the agent\n```", "```py\nreact.planner.print_prompt()\n```", "```py\n<OUTPUT_FORMAT>\nYour output should be formatted as a standard JSON instance with the following schema:\n```", "```py\nExamples:\n```", "```py\n-Make sure to always enclose the JSON output in triple backticks (```"]