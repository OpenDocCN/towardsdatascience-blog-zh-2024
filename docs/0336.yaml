- en: 'Data Visualisation 101: Playbook for Attention-Grabbing Visuals'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/data-visualisation-101-playbook-for-attention-grabbing-visuals-c5b9faa7a950?source=collection_archive---------1-----------------------#2024-02-05](https://towardsdatascience.com/data-visualisation-101-playbook-for-attention-grabbing-visuals-c5b9faa7a950?source=collection_archive---------1-----------------------#2024-02-05)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Practical Techniques for Captivating Visual Communication with Plotly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://miptgirl.medium.com/?source=post_page---byline--c5b9faa7a950--------------------------------)[![Mariya
    Mansurova](../Images/b1dd377b0a1887db900cc5108bca8ea8.png)](https://miptgirl.medium.com/?source=post_page---byline--c5b9faa7a950--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--c5b9faa7a950--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--c5b9faa7a950--------------------------------)
    [Mariya Mansurova](https://miptgirl.medium.com/?source=post_page---byline--c5b9faa7a950--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--c5b9faa7a950--------------------------------)
    ·15 min read·Feb 5, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4ae5b13ef99ae95541ef3b8986bc995b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by DALL-E 3
  prefs: []
  type: TYPE_NORMAL
- en: In [the previous article](https://medium.com/towards-data-science/visualisation-101-choosing-the-best-visualisation-type-3a10838b150d),
    we discussed choosing the most suitable visualisation type for your task. We’ve
    identified seven different use cases (*Time Series, Nominal Comparison, Deviation,
    Ranking, Part-to-whole, Frequency Distribution and Correlation*) and what chart
    types will be the best options for them. No surprise, in most cases, you can use
    basic chart types such as line charts, bar charts or scatter plots.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting the optimal visualisation type is an essential foundation. However,
    it’s not all you need to keep in mind when working on data visualisation.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s return back to basics. The primary goal of visualisation is to convey
    your message to the audience. That’s why we need to think about how the audience
    perceives our charts. In practice, the audience’s perception and understanding
    depend on many small details.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, I would like to share these essential aspects of data visualisation.
    We will go through three steps to get clearer, sharper and smarter visuals:'
  prefs: []
  type: TYPE_NORMAL
- en: reducing noise to avoid audience confusion and distraction,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adding highlights to focus their attention,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: adding the context to provide all necessary information for clear understanding.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I will use Plotly since it’s my primary tool for data visualisation.
  prefs: []
  type: TYPE_NORMAL
- en: Unless stated explicitly, all chart examples below are based on synthetic datasets.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Step 1: Reducing noise'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It might be tempting to include all the information you have in your visualisation,
    for example, to add labels for every point on the graph. At these moments, we
    are usually driven by good intentions — to give the audience comprehensive view.
  prefs: []
  type: TYPE_NORMAL
- en: However, the human brain works differently. Each element you add to the visualisation
    increases cognitive load. People have a limited capacity of mental power to perceive
    information, so it’s essential not to waste it by adding unneeded elements. By
    adding too many details, you risk losing your audience completely because your
    charts might be perceived as more complicated than they actually are. This perceived
    complexity may frighten your audience since they might not want to spend time
    and effort understanding it.
  prefs: []
  type: TYPE_NORMAL
- en: We can refer to the data visualisation iconic books to think about it. Edward
    Tufte is a pioneer in the field of data visualisation. In his book “*The Visual
    Display of Quantitative Information”*, he introduces the concept of data-ink ratio
    ([source](https://infovis-wiki.net/wiki/Data-Ink_Ratio)).
  prefs: []
  type: TYPE_NORMAL
- en: A large share of ink on a graphic should present data-information, the ink changing
    as the data change. Data-ink is the non-erasable core of a graphic, the non-redundant
    ink arranged in response to variation in the numbers represented.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We aim to maximise the share of meaningful elements (or ink) in our charts.
    For that, we can remove clutter (or noise) from our charts to decrease perceived
    cognitive load. Clutter is graphical elements that take place but don’t give any
    additional understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, default settings in our tools sometimes don’t help us to make
    clear visualisations. So, first of all, I advise you to change the default template
    in Plotly — it will help you declutter your charts.
  prefs: []
  type: TYPE_NORMAL
- en: The default template is `plotly`. It looks similar to the seaborn style (you
    can check in [the gallery](https://seaborn.pydata.org/examples/index.html)) and
    includes background colours and grid lines. In my opinion, it adds too much noise
    to charts. I prefer a much more lightweight template called `simple_white`.
  prefs: []
  type: TYPE_NORMAL
- en: You can compare these two styles on the graph. Feel the difference.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/db250fe14ca41942a0e3a93a3bae3d1b.png)'
  prefs: []
  type: TYPE_IMG
- en: Graphs by author
  prefs: []
  type: TYPE_NORMAL
- en: Use the code below to change the template for all your Plotly visualisations.
    You can check what other built-in templates are available and even learn how to
    create your own custom template in [the documentation](https://plotly.com/python/templates/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After changing the template to `simple_white`, all your graphs will be automatically
    lighter. However, it’s only the beginning of our journey to data visualisations
    without clutter. Since each graphical element adds cognitive load, it’s worth
    considering whether they are needed. Each element on your chart should be your
    conscious decision rather than the default behaviour of your tool.
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, graphical elements don’t add any value to understanding, so we
    can (and should) get rid of them. Let’s look at a couple of such examples.
  prefs: []
  type: TYPE_NORMAL
- en: If you create a bar chart with only one trace, Plotly will still show you the
    legend. However, we can eliminate it without losing any information and provide
    context about the metric in the y-axis title.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bf7414614473f77aa4ea5ab319f40688.png)'
  prefs: []
  type: TYPE_IMG
- en: Graphs by author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s hide the legend on our graph.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'It was surprising for me, but there are cases when you can get rid of not only
    the legend but also one of the axes. Look at the two charts below: we’ve labelled
    each bar for clarity, making it effortless for the audience to interpret and compare
    the values based on bar lengths. So, there’s no need to keep the x-axis. Ideally,
    we should add some context about the used metric to the chart title — we will
    discuss how to do it later.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0903525e57897a112250507007b3e5c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph by author
  prefs: []
  type: TYPE_NORMAL
- en: To hide one of the axes, we need to change its visibility.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We’ve learned how to tweak Plotly’s defaults and make your charts cleaner and
    clearer. However, it’s not the only thing to watch out for — quite often, we add
    noise and clutter ourselves. Let me show you examples of noisy graphs I’ve seen
    many times.
  prefs: []
  type: TYPE_NORMAL
- en: Analysts like numbers (at least I do). So, we often want to show our audience
    all these numbers, for example, how many customers we had in the previous months.
    It often ends up with a chart like the one below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a975bfef09a5decebdb6fbd2ead51db5.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph by author
  prefs: []
  type: TYPE_NORMAL
- en: 'With all this clutter of numbers, you miss entirely the trends and insights
    in data. What I would do to fix it:'
  prefs: []
  type: TYPE_NORMAL
- en: It goes without saying I would remove the labels. If your audience needs to
    know precise numbers, keep only the essential ones (for example, only the last
    month or two).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s a good practice to round up the values you’re showing, for example, `184.1K`
    instead of `184051`. In most cases, there’s not much difference for your audience,
    whether there were 184 051 or 184 063 customers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, if you want to focus your audience’s attention on the trends in your data,
    I would advise you to omit markers and keep only lines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The other temptation is to make your visualisations more colourful. Please resist
    it unless colours play their role, either encoding some data or highlighting the
    most noteworthy aspects. We will talk about the wise usage of colours just in
    a second. Meanwhile, you can look at the example below and observe what catches
    your eye first and how much effort you need to understand the underlying data.
    When I look at the first graph, I feel a bit confused and keep thinking about
    what these colours mean and why each bar differs.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b7cb09f0e4be56fcff02cdd827783f6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Graphs by author
  prefs: []
  type: TYPE_NORMAL
- en: Also, this graph shows us that having too many accents (bright colours in our
    case) doesn’t work — we are just distracted and don’t know what to focus on.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve learned how to remove noise from our charts. After this step, we have
    neutral visualisations. They are like a canvas. Now, the next step is to place
    accents strategically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Adding accents'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using accents wisely enables you to direct your audience’s attention and emphasise
    the main message. People usually pay attention first to brighter and darker colours.
    However, it’s important to remember that you can’t highlight everything. Instead,
    you should concentrate your audience’s focus on one or two key aspects of the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: You can also build a hierarchy of accents, emphasising the main message the
    most and pushing not-so-important (but still necessary) parts to the background.
    It allows you to avoid distraction but still keep all the needed context. We will
    see examples of such approaches below.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to understand what elements of your data visualisation draw attention,
    try to do the following simple test: close your eyes, open them, and observe what
    initially catches your eye. Another option is to show your visualisation to someone
    else and ask them to comment on their thought process.'
  prefs: []
  type: TYPE_NORMAL
- en: Colours
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In my opinion, colour is the most powerful tool to drive your audience’s attention.
    That’s why I want to discuss it in detail. Let’s start with an example. Look at
    the visualisation below. What do you look at first? What do you think the author
    wanted to tell you with this chart?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/305d79fc34a9014c0ed0d12a1698d861.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph by author, data from [StackOverflow survey](https://survey.stackoverflow.co/2023/#technology-most-popular-technologies)
  prefs: []
  type: TYPE_NORMAL
- en: 'You likely started to look at SQL and compare it with other languages. In [my
    previous article](https://medium.com/towards-data-science/lmql-sql-for-language-models-d7486d88c541),
    I used this chart to illustrate the following idea:'
  prefs: []
  type: TYPE_NORMAL
- en: '*According to the annual* [*StackOverflow survey*](https://survey.stackoverflow.co/2023/#technology-most-popular-technologies)*,
    SQL is still one of the most popular languages in the world. For professional
    developers, SQL is in the top-3 languages (after Javascript and HTML/CSS). More
    than a half of professionals use it. Surprisingly, SQL is even more popular than
    Python.*'
  prefs: []
  type: TYPE_NORMAL
- en: I used the contrast between grey and bright blue to focus your attention on
    the SQL I was talking about. If I made this visualisation now, I would also make
    the title bolder to make it stand out since it’s a meaningful context.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s compare it with a fully grey-neutral version. Without any visual cues,
    you would spend much more time and effort looking at all the data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1ba5b117793fe9dec7ca384ce4adc42c.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph by author
  prefs: []
  type: TYPE_NORMAL
- en: I hope you can now see all the potential power of colour. Let’s learn how to
    use the colours in Plotly
  prefs: []
  type: TYPE_NORMAL
- en: We will start with a bar chart like in the example above. I highlighted segments
    where the conversion is below the threshold with a brighter colour. For this,
    I defined the list of colours depending on the conversion value and passed it
    to Plotly as colour for lines and markers. I’ve also specified that I want labels
    outside the bars and made colours more pale with opacity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3f1a6ca99375229f2e4904bbbdeb21be.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph by author
  prefs: []
  type: TYPE_NORMAL
- en: Let’s discuss a bit about how to define the colours. In the example above, I
    used predefined SVG colours `"silver"` and `"purple"`. You can find the complete
    list of predefined colours [here](https://www.w3.org/TR/css-color-3/#svg-color).
  prefs: []
  type: TYPE_NORMAL
- en: If you want more customisation, you can pass colours as HEX codes. For example,
    you can use your brand colours to add your company vibe to the presentations.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to get HEX codes is to screenshot your interface, upload it
    to a colour picker (*I usually search for “online colour picker from image”*)
    and look up all the needed codes. For example, one of the brand colours for Wise
    (the company I’m working at) is bright green with a hex code `#9FE870`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4dfa5c62f9feac2ff4b4c228b1d1e6f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Since I often use brand colours in my charts, I have them saved in a config
    file locally so I can easily access them by name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, I hope you won’t be stuck trying to understand how to tell Plotly what
    colour you want. So, let’s move on to another example with linear graphs and learn
    other ways to specify colours.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to manually define each segment’s colour precisely, you can use
    `color_discrete_map`. I often use this approach when I need consistent colour-coding
    across multiple graphs. If you depict Android in blue and iOS in orange on one
    chart in your presentation but then reverse the colours on another graph, your
    audience might become confused. So, it’s worth paying attention to such details.
  prefs: []
  type: TYPE_NORMAL
- en: In the graph below, I used purple to highlight the growing iOS audience and
    shade of greys for the other platforms since I don’t want you to pay attention
    to them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2c24b7aa9b0531e89a83db9d1de3a20f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: If I want to show cohorts and don’t care about a specific colour for each cohort,
    I can just specify the sequence of colours in the `color_discrete_sequence` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c1d26c43beb3833a8ed0736389d6345b.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph by author
  prefs: []
  type: TYPE_NORMAL
- en: 'I used a predefined Plotly palette for colours, but you can also specify custom
    colours as a list of strings. Here are the palettes available in Plotly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Discrete colour palettes](https://plotly.com/python/discrete-color/) include
    mostly diverging colours, which are handy when you need to distinguish different
    segments from each other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In [Continuous colour scales](https://plotly.com/python/colorscales/), you can
    find a lot of sequential colour palettes which are ideal for ordinal categories
    (for example, customer maturity equal to `"< 1 month"`, `"1–3 months"`, `"4–6
    months"`, `"6–12 months"` and `"> 12 months"`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The continuous scales can also be used when you need to encode values using
    colour, such as heat maps.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5e0d667a42afc375966bec54d945395e.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph by author
  prefs: []
  type: TYPE_NORMAL
- en: When you use colours, you need to keep in mind that there are colourblind people.
    The most common difficulty is to distinguish shades of red and green. So, try
    to avoid these combinations or use some other visual cues simultaneously (like
    text or icons). It will help you not to lose part of your audience.
  prefs: []
  type: TYPE_NORMAL
- en: Shades of green and red are often used to denote the positive and negative aspects
    of something (for example, to show higher and lower conversion on a heat map).
    You can use blue and orange shades instead.
  prefs: []
  type: TYPE_NORMAL
- en: Size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The other way to highlight something is size. We perceive something bigger as
    a more significant one. For example, to make an accent on one of the lines, we
    can increase its width.
  prefs: []
  type: TYPE_NORMAL
- en: In Plotly, we need to use Graphical Objects to tweak line widths.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b2e6ca69afd6d5939d4565c5689d0502.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph by author
  prefs: []
  type: TYPE_NORMAL
- en: Now, the iOS line stands out compared to other platforms. We can also focus
    the audience’s attention using bold or italic fonts. Let’s add the title to our
    graph and highlight the central part of it. For that, we can use HTML tag `<b>`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/61d28febb1463f93b507e10dfc31ae16.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph by author
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Storytelling'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve learned how to put accents and are ready to move on to the last part —
    storytelling. We’ve already discussed that the context is vital for understanding
    the message. So, in this part, we will discuss how to add it to your charts.
  prefs: []
  type: TYPE_NORMAL
- en: To add more context, the most straightforward thing you can leverage is to specify
    a title and labels. It will prevent your audience’s questions about what exactly
    they see. You can use a `title` parameter for a chart title (similarly to the
    one we did before) and `labels` to override default labels for axes and legend
    titles.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/69e1dd20770f5a008a1443db786bf9eb.png)'
  prefs: []
  type: TYPE_IMG
- en: Graphs by author
  prefs: []
  type: TYPE_NORMAL
- en: It’s a good practice to make titles detailed so that the titles might become
    quite long. Plotly is a powerful visual tool but has room for improvement. For
    example, it can’t handle long chart titles — the tail of the title won’t be visible.
  prefs: []
  type: TYPE_NORMAL
- en: However, Plotly is agile enough, and we can fix it ourselves. We will use `<br>`
    HTML tag to add line breaks between words if the line length exceeds the threshold
    (70 characters). Let’s do it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/83fdd9503d6f35386ab131c6d19e7933.png)'
  prefs: []
  type: TYPE_IMG
- en: Graphs by author
  prefs: []
  type: TYPE_NORMAL
- en: Also, we might want to show some of the metrics’ values. We’ve already discussed
    that labelling all data points generates too much clutter, but showing the last
    values sounds reasonable.
  prefs: []
  type: TYPE_NORMAL
- en: 'I will demonstrate two ways to do it in Plotly: using the `text` field and
    annotations functionality. I usually prefer using `text`, but it’s quite subjective.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with the `text` option. First, let’s look at the raw data set.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5e72c146a3b55f5f40be2d41f469415f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s add the `text_val` field to the dataset that is equal to the value
    for the last month and is empty for others. I’ve also specified formatting to
    show numbers as thousands to remove unneeded details.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We are ready to create our visualisation. I passed the newly-created `text_val`
    column as the `text` parameter for the visualisation, updated the `mode` to be
    `"lines+text"` and specified the `middle right` text position. I also moved the
    legend so it doesn’t interfere with our annotations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7d0d737fd0304900de5e77c756331e6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph by author
  prefs: []
  type: TYPE_NORMAL
- en: The other way to label the values is to use the annotations functionality. Firstly,
    let’s calculate the last values for each platform and format the text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Let’s add more parameters we will use for annotations’ formatting and convert
    the data frame into the list that we can pass to Plotly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can similarly make a visualisation passing annotations and get the same
    result. So, it’s up to you what to use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Vertical or horizontal lines can also add the needed context for your audience.
    For example, you can highlight important dates like a marketing campaign launch
    or show SLA for your metric. Let’s add a vertical line to our chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can do it easily by using `fig.add_vline`. Unfortunately, there’s a bug
    in Plotly, and it can’t work with dates. However, we can use a [workaround](https://github.com/plotly/plotly.py/issues/3065):
    it looks weird, but works.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/15c75f6f31fcea2673afd0ba00d66fa2.png)'
  prefs: []
  type: TYPE_IMG
- en: Graph by author
  prefs: []
  type: TYPE_NORMAL
- en: You can add horizontal lines or even rectangles if you want to highlight the
    whole area on the chart. You can find more details in [the documentation](https://plotly.com/python/horizontal-vertical-shapes/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this article, we’ve walked through the essential aspects of data visualisations:'
  prefs: []
  type: TYPE_NORMAL
- en: Removing unneeded noise to avoid distraction,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using accents to focus your audience’s attention using colours and sizes,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding context to help your audience understand your message.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thank you a lot for reading this article. If you have any follow-up questions
    or comments, please leave them in the comments section.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This article is highly influenced by the excellent book about data visualisations,
    *“Storytelling with Data: A Data Visualization Guide for Business Professionals”*
    by Cole Nussbaumer Knaflic.'
  prefs: []
  type: TYPE_NORMAL
