- en: Unit Disk Uniform Sampling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/unit-disk-uniform-sampling-91880f3740fa?source=collection_archive---------11-----------------------#2024-09-16](https://towardsdatascience.com/unit-disk-uniform-sampling-91880f3740fa?source=collection_archive---------11-----------------------#2024-09-16)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Discover the optimal transformations to apply on the standard [0,1] uniform
    random generator for uniformly sampling a 2D disk
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@thom01.rouch?source=post_page---byline--91880f3740fa--------------------------------)[![Thomas
    Rouch](../Images/a8440bbed59cd8d9cdd752cf1fea2831.png)](https://medium.com/@thom01.rouch?source=post_page---byline--91880f3740fa--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--91880f3740fa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--91880f3740fa--------------------------------)
    [Thomas Rouch](https://medium.com/@thom01.rouch?source=post_page---byline--91880f3740fa--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--91880f3740fa--------------------------------)
    ·13 min read·Sep 16, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a5274695921aab399278b1c4885a9e40.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Vitolda Klein](https://unsplash.com/@little_klein?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 0\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In my previous article on [*Unit Disk and 2D Bounded KDE*](/unit-disk-and-2d-bounded-kde-2cb5c3544f1c),
    I discussed the importance of being able to sample arbitrary distributions. This
    is especially relevant for applications like Monte Carlo integration, which is
    used to solve complex integrals, such as light scattering in [*Physically Based
    Rendering* (PBRT)](https://pbrt.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Sampling in 2D introduces new challenges compared to 1D. This article focuses
    on uniformly sampling the 2D unit disk and visualizing how transformations applied
    to a standard [0,1] uniform random generator create different distributions.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll also explore how these transformations, though yielding the same distribution,
    affect Monte Carlo integration by introducing distortion, leading to increased
    variance.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. How to sample a disk uniformly?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Random number generators often offer many predefined sampling distributions.
    However, for highly specific distributions, you’ll likely need to create your
    own. This involves combining and transforming basic distributions to achieve the
    desired outcome.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, to uniformly sample the interval between `a` and `b`, you can
    apply an affine transform on the standard uniform sampling from `[0,1]`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/516b44fb76ab4312ef169c2eddd881ed.png)'
  prefs: []
  type: TYPE_IMG
- en: In this article, we’ll explore how to uniformly sample points within the 2D
    unit disk by building on the basic [0,1] uniform sampling.
  prefs: []
  type: TYPE_NORMAL
- en: For readability, I’ve intentionally used the adjective “unit” in two different
    contexts in this article. The “unit square” refers to the [0,1]² domain, reflecting
    the range of the basic random generator. Conversely, the “unit disk” is described
    within [-1,1]² for convenience in polar coordinates. In practice, we can easily
    map between these using an affine transformation. We’ll denote `*u*` and `*v*`
    as samples drawn from the standard [0,1] or [-1,1] uniform distribution.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Rejection Sampling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the [0,1] uniform sampling twice allows us to uniformly sample the unit
    square [0,1]².
  prefs: []
  type: TYPE_NORMAL
- en: A very simple approach known as “Rejection Sampling” consists in sampling the
    unit square and rejecting any sample falling outside the disk.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b57ec900cb99f629ec666feb67555de2.png)'
  prefs: []
  type: TYPE_IMG
- en: Rejection sampling of the inner disk inside the unit square. Valid (green) and
    invalid (red) samples - Figure by the author
  prefs: []
  type: TYPE_NORMAL
- en: This results in points that follow a uniform 2D distribution within the disk
    contained in the unit square, as illustrated in the figure below.
  prefs: []
  type: TYPE_NORMAL
- en: The density maps in this article are generated by sampling many points from
    the specified distribution and then applying a Kernel Density Estimator. Methods
    for addressing boundary bias in the density are detailed in the previous article
    [**“Unit Disk and 2D Bounded KDE”**](https://medium.com/towards-data-science/unit-disk-and-2d-bounded-kde-2cb5c3544f1c)**.**
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/8c919f93803088a39ebc292a4867d14a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Density of the 2D Disk Rejection Sampling estimated by Kernel Density
    Estimation on 10000 samples. Right: Corresponding 1D density profile along the
    diagonal of the density map — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: A major drawback is that rejection sampling can require many points to get the
    desired number of valid samples, with no upper limit on the total number, leading
    to inefficiencies and higher computational costs.
  prefs: []
  type: TYPE_NORMAL
- en: Intuitive Polar Sampling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An intuitive approach is to use polar coordinates for uniform sampling: draw
    a radius within [0,1] and an angle within [0, 2π].'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9fde3aeb830972d63181fc0952465bc6.png)'
  prefs: []
  type: TYPE_IMG
- en: Both the radius and angle are uniform, what could possibly go wrong?However,
    this method leads to an infinite density singularity at the origin, as illustrated
    by the empirical density map below.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure the linear colormap remains readable, the density map has been capped
    at an arbitrary maximum value of 10\. Without this cap, the map would display
    a single red dot at the center of a blue disk.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/703362cd37e51f257f4e683ecbe0bafb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Density of the 2D Disk Polar Sampling estimated by Kernel Density Estimation
    on 10000 samples. Right: Corresponding 1D density profile along the diagonal of
    the density map — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: 'The figure below uses color to show how the unit square, sampled with (u,v),
    maps to the unit disk with (x,y) using the polar transform defined above. The
    colored areas in the square are equal, but this equality does not hold once mapped
    to the disk. This visually illustrates the density map: large radii exhibit much
    lower density, as they are distributed across a wider ring farther from the origin.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2a382094b8d35583d98252686f0411b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Unit Square with colored columns. Right: Corresponding Polar mapping
    to the unit Disk — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the mathematical details. When applying a transform T to a multi-dimensional
    random variable A, the resulting density is found by dividing by the absolute
    value of the determinant of the Jacobian of T.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a8abf9f098f02118f970822f08eb3f9a.png)'
  prefs: []
  type: TYPE_IMG
- en: The polar transform is given by the equation below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/41afde5c216d7426b06161afcf45a0e8.png)'
  prefs: []
  type: TYPE_IMG
- en: We can compute the determinant of its jacobian.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7956a7c947454501ea73e841f646e328.png)'
  prefs: []
  type: TYPE_IMG
- en: Thus, the polar transformation results in a density that is inversely proportional
    to the radius, explaining the observed singularity.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/541ef3e656fd05b05971494499aedab8.png)'
  prefs: []
  type: TYPE_IMG
- en: The 1D density profile along the diagonal shown above corresponds to the absolute
    value of the inverse function, which is then set to zero outside [-1, 1]. At first
    glance, this might seem counterintuitive, given that the 1D inverse function isn’t
    integrable over [-1, 1]! However, it’s essential to remember that the integration
    is performed in 2D using polar coordinates, not in 1D.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Uniform Polar Sampling — Differential Equation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two ways to find the correct polar transform that results in an uniform
    distribution. Either by solving a differential equation or by using the inversion
    method. Let’s explore both approaches.
  prefs: []
  type: TYPE_NORMAL
- en: 'To address the heterogeneity in the radius, we introduce a function `f` to
    adjust it: `r=f(u)`. The angle, however, is kept uniform due to the symmetry of
    the disk. We can then solve the differential equation that ensures the determinant
    of the corresponding Jacobian remains constant, to keep the same density.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ee411bd3612c9bde862c2440a846ebd7.png)'
  prefs: []
  type: TYPE_IMG
- en: We get `ff'=c`, which has a unique solution given the boundary conditions `f(0)=0`
    and `f(1)=1`. We end up with the following transform.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/41f3a71c921a9a3e5a7cd576b78dfb69.png)'
  prefs: []
  type: TYPE_IMG
- en: Uniform Polar Sampling — Inversion Method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The inversion method is easier to grasp in the discrete case. Consider three
    possible values A, B and C with probabilities of 60%, 10%, and 30%, respectively.
    As shown in the figure below, we can stack these probabilities to reach a total
    height of 100%. By uniformly drawing a percentage U between 0% and 100% and mapping
    it to the corresponding value A, B or C on the stack, we can transform a uniform
    sampling into our discrete non‑uniform distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c50128307bf4c521f590cac4c091e850.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inversion Method in the discrete case. Left: Histogram. Right: Cumulative Distribution
    Function — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: This is very similar in the continuous case. The inversion method begins by
    integrating the probability distribution function (PDF) `p` of a 1D variable `X`
    to obtain the cumulative distribution function (CDF) `P(X<x)`, which increases
    from 0 to 1\. Then, by sampling a uniform variable `U` from [0,1] and applying
    the inverse CDF to `U`, we can obtain a sample `x` that follows the desired distribution
    `p`.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming a uniform disk distribution p(x,y), we can deduce the corresponding
    polar distribution p(r,θ) to enforce.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/158a480f82f7d2357573594d66f5e7d8.png)'
  prefs: []
  type: TYPE_IMG
- en: It turns out that this density p(r,θ) is separable, and we can independently
    sample r and θ from their respective expected 1D marginal densities using the
    inversion method.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c8998592f5d477f8a6bf68efb89c300b.png)'
  prefs: []
  type: TYPE_IMG
- en: When the joint density isn’t separable, we first sample a variable from its
    marginal density and then draw the second variable from its conditional density
    given the first variable.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We integrate these marginal densities into CDFs.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1593123dc07477176a02e805fdf61785.png)'
  prefs: []
  type: TYPE_IMG
- en: Sampling uniform (u,v) within [0,1] and applying the inverse CDFs gives us the
    following transform, which is the same as the one obtained above using the differential
    equation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/41f3a71c921a9a3e5a7cd576b78dfb69.png)'
  prefs: []
  type: TYPE_IMG
- en: The resulting distribution is effectively uniform, as confirmed by the empirical
    density map shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/01ae07e8d0830d602305ff7df78d08ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Density of the 2D Disk correct Polar Sampling estimated by Kernel Density
    Estimation on 10000 samples. Right: Corresponding 1D density profile along the
    diagonal of the density map — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: The square root function effectively adjusts the colored columns to preserve
    their relative areas when mapped to the disk.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a79f57174d1044604cd5d22745c3cc43.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Unit Square with colored columns. Right: Corresponding Polar and Uniform
    Polar mappings to the unit Disk — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5974c2eb8ff4287c6aa830c034e5c49a.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Tim Johnson](https://unsplash.com/@mangofantasy?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. How to sample a disk uniformly, but with less distortion?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In applications like Physically Based Rendering (See [*PBRT (Physically Based
    Rendering: From Theory To Implementation*](https://pbrt.org/)), integral equations
    describing light scattering are solved numerically using Monte-Carlo Integration
    (MC).'
  prefs: []
  type: TYPE_NORMAL
- en: MC Integration estimates the integral by a weighted mean of the operand evaluated
    at samples drawn from a given distribution. With `n` samples, it converges to
    the correct result at a rate of `O(1/sqrt(n))`. To halve the error, you need four
    times as many samples. Therefore, optimizing the sampling process to make the
    most of each sample is crucial.
  prefs: []
  type: TYPE_NORMAL
- en: Techniques like stratified sampling helps ensuring that all regions of the integrand
    are equally likely to be sampled, avoiding the redundancy of closely spaced samples
    that provide little additional information.
  prefs: []
  type: TYPE_NORMAL
- en: Distortion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The mapping we discussed earlier is valid as it uniformly samples the unit disk.
    However, it distorts areas on the disk, particularly near the outer edge. Square
    regions of the unit square can be mapped to very thin and stretched areas on the
    disk.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/82158f67d2132e1c07e5ff9a66a269a4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Unit Square with colored cells. Right: Corresponding Uniform Polar mapping
    to the unit Disk — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: This distortion is problematic because the sampling on the square loses its
    homogeneous distribution property. Close (u,v) samples can result in widely separated
    points on the disk, leading to increased variance. As a result, more samples are
    needed in the Monte Carlo integration to offset this variance.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we’ll introduce another uniform sampling technique that reduces
    distortion, thereby preventing unnecessary increases in variance.
  prefs: []
  type: TYPE_NORMAL
- en: Shirley’s Concentric Mapping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In 1997, Peter Shirley published [“*A Low Distortion Map Between Disk and Square”*](https://www.semanticscholar.org/paper/A-Low-Distortion-Map-Between-Disk-and-Square-Shirley-Chiu/43226a3916a85025acbb3a58c17f6dc0756b35ac).
    Instead of treating the uniform unit square as a plain parameter space with no
    spatial meaning, as we did with the radius and angle, he suggests to slightly
    distort the unit square into the unit disk.
  prefs: []
  type: TYPE_NORMAL
- en: The idea is to map concentric squares within the unit square into concentric
    circles within the unit disk, as if pinching the corners to round out the square.
    In the figure below, this approach appears much more natural compared to uniform
    polar sampling.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cddf737f5d3641453e7e8a258dc846a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Unit Square with colored concentric squares. Right: Corresponding Uniform
    Polar and Shirley mappings to the unit Disk — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: The unit square is divided into eight triangles, with the mapping defined for
    one triangle and the others inferred by symmetry.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e4c223e45ef55662010df39806c290cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Reference Triangle in the Unit Square with colored concentric squares.
    Right: Corresponding Shirley mapping to the unit Disk — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned at the beginning of the article, it is more convenient to switch
    between the [0,1]² and [-1,1]² definitions of the unit square rather than using
    cumbersome affine transformations in the equations. Thus, we will use the [-1,1]²
    unit square to align with the [-1,1]² unit disk definition.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'As illustrated in the figure above, the reference triangle is defined by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b996c37f5a4a3d88a8553664bef6d03e.png)'
  prefs: []
  type: TYPE_IMG
- en: Mapping the vertical edges of concentric squares to concentric arc segments
    means that each point at a given abscissa `u` is mapped to the radius `r=u`. Next,
    we need to determine the angular mapping `f` that results in a uniform distribution
    across the unit disk.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4c5db9e8566caa81a5ea52cd10e165c0.png)'
  prefs: []
  type: TYPE_IMG
- en: We can deduce the determinant of the corresponding Jacobian.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bed11fe119615ebdf17837f0eda51781.png)'
  prefs: []
  type: TYPE_IMG
- en: For a uniform disk distribution, the density within the eighth sector of the
    disk (corresponding to the reference triangle) is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/492f63827e6293b91c6c704af7be127a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'On the other side, we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/01b3b0777767ae1fa0929d312e565d0d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By combining the three previous equations and `r=u` , we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/032e21092ceda6139af757e40f234303.png)'
  prefs: []
  type: TYPE_IMG
- en: Integrating the previous equations with a zero constant to satisfy θ=0 when
    v=0 gives the angle mapping. Finally, we get the following mapping.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bf67419f24d3d8420c292192350c503f.png)'
  prefs: []
  type: TYPE_IMG
- en: The seven others triangles are deduced by symmetry. The resulting distribution
    is effectively uniform, as confirmed by the empirical density map shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9bd1339804169df6bc47d3ff4bf8a554.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Density of the 2D Disk Shirley Sampling estimated by Kernel Density Estimation
    on 10000 samples. Right: Corresponding 1D density profile along the diagonal of
    the density map — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: As expected, Shirley’s mapping, when applied to the colored grid, significantly
    reduces cell stretching and distortion compared to the polar mapping.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0e92c99d7f3f6c564172df9633aa8b8f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Unit Square with colored cells. Right: Corresponding Uniform Polar and
    Shirley mappings to the unit Disk — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: Variant of Shirley’s Mapping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The θ mapping in Shirley’s method isn’t very intuitive. Thus, as seen in the
    figure below, it’s tempting to view it simply as a consequence of the more natural
    constraint that `y` depends solely on `v`, ensuring that horizontal lines remain
    horizontal.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6d1442ee91a6927586b21ab1d317478f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Reference Triangle in the Unit Square with colored cells. Right: Corresponding
    Shirley mapping to the unit Disk — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: However, this intuition is incorrect since the horizontal lines are actually
    slightly curved. The Shirley mapping presented above, i.e. the only uniform mapping
    respecting the `r=u` constraint, enforces the following y value, which subtly
    varies with u.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7f96b47fcacf7b8ced28541b6b43f2ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Although we know it won’t result in a uniform distribution, let’s explore a
    variant that uses a linear mapping between y and v, just for the sake of experimentation.
  prefs: []
  type: TYPE_NORMAL
- en: The Shirley variant shown here is intended solely for educational purposes,
    to illustrate how the Shirley mapping alters the horizontal lines by bending them.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We obtain `y` by scaling `v` by the length of the half-diagonal, which maps
    the top-right corner of the square to the edge of the disk. The value of `x` can
    then be deduced from `y` by using the radius constraint `r=u`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c120441217f0189132319f540427ec9e.png)'
  prefs: []
  type: TYPE_IMG
- en: The figure below shows a side-by-side comparison of the original Shirley mapping
    and its variant. While both images appear almost identical, it’s worth noting
    that the variant preserves the horizontality of the lines.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/174e884b9de575a3af855e40da3a29ba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Reference Triangle in the Unit Square with colored cells. Right: Corresponding
    Shirley and Shirley Variant mappings to the unit Disk — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: As expected, the empirical density map shows notable deviations from uniformity,
    oscillating between 0.8 and 1.1 rather than maintaining a constant value of 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that the density shown below depends on the angle, so the 1D density
    profile would vary if extracted from a different orientation.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/2eea5aa6c1ce94ba855402bc95addb02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Left: Density of the 2D Disk Shirley Variant Sampling estimated by Kernel Density
    Estimation on 10000 samples. Right: Corresponding 1D density profile along the
    diagonal of the density map — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f44cbee23cddba4efa6d43b357688059.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Antenna](https://unsplash.com/@antenna?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Visual Comparison of the sampling methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apply the mapping on an image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the second section of this article, visualizing how a square image is mapped
    to a disk proved helpful in understanding the distortion caused by the mappings.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve that, we could naively project each colored pixel from the square
    onto its corresponding location on the disk. However, this approach is flawed,
    as it doesn’t ensure that every pixel on the disk will be assigned a color. Additionally,
    some disk pixels may receive multiple colors, resulting in them being overwritten
    and causing inaccuracies.
  prefs: []
  type: TYPE_NORMAL
- en: 'The correct approach is to reverse the process: iterate over the disk pixels,
    apply the inverse mapping to find the corresponding floating-point pixel in the
    square, and then estimate its color through interpolation. This can be done using
    `cv2.remap` from OpenCV.'
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the current mapping formulas only allow us to convert disk to square images.
    To map from square to disk, we need to reverse these formulas.
  prefs: []
  type: TYPE_NORMAL
- en: The inverse formulas are not detailed here for the sake of brevity.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Each of the following subsections will illustrate both the square-to-disk and
    disk-to-square mappings using a specific pattern image. Enjoy the exploration!
  prefs: []
  type: TYPE_NORMAL
- en: Colored Checkerboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/6e68bb7c4d07ae39811ba501cdda1843.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Square with colored checkerboard . Bottom: Mappings to the unit Disk
    — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/951dbd261f847974177fc87e6ee1c648.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Disk with colored checkerboard . Bottom: Mappings to the unit Square
    — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: Part of colored Checkerboard
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/06793fd8131368fea303db7cf59ca355.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Square with partial colored checkerboard . Bottom: Mappings to the
    unit Disk — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/27f3a5984d5c3d3517a6a24754e067fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Disk with partial colored checkerboard . Bottom: Mappings to the
    unit Square — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: Concentric Squares
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/c17bb1039b68847dae28c2928354263d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Square with concentric squares . Bottom: Mappings to the unit Disk
    — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c5da3217970f81f3c89d1288c61ae1b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Disk with concentric squares . Bottom: Mappings to the unit Square
    — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: Columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/ca4a873964a6c98dc02c4ac61abc42cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Square with colored columns . Bottom: Mappings to the unit Disk —
    Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5dd29f107f8ec747fdf03d614929260b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Disk with colored columns. Bottom: Mappings to the unit Square —
    Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: Concentric Circles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/a48c6bf470dcb4accd909f44db0d7a13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Square with concentric circles . Bottom: Mappings to the unit Disk
    — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ce17dc7a8e7938d8bfc327c1c1de3e4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Disk with concentric circles . Bottom: Mappings to the unit Square
    — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: Quadrants
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/9a3f70f53f7540640d99a0b303e657c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Square with quadrants . Bottom: Mappings to the unit Disk — Figure
    by the author'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3a9a1579aa6f16a2f9c62620eedd6dbd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Disk with quadrants . Bottom: Mappings to the unit Square — Figure
    by the author'
  prefs: []
  type: TYPE_NORMAL
- en: Face
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/e1b6a122869cb18b8fbd7a8cb4fd0569.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Square with the author’s profile picture . Bottom: Mappings to the
    unit Disk — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/17567825230a5c82cbcb2134b6ad26f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Top: Unit Disk with the author’s profile picture . Bottom: Mappings to the
    unit Square — Figure by the author'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ff489646beee84ef91cbaea2c528c868.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [and machines](https://unsplash.com/@and_machines?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Uniform Sampling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The naive disk sampling approach using uniform polar coordinates is a good example
    for understanding how transforming variables can affect their distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Using the inversion method you can now turn a uniform sampling on [0,1] into
    any 1D distribution, by using its inverse Cumulative Distribution Function (CDF).
  prefs: []
  type: TYPE_NORMAL
- en: To sample any 2D distribution, we first sample a variable from its marginal
    density and then draw the second variable from its conditional density given the
    first variable.
  prefs: []
  type: TYPE_NORMAL
- en: Distortion and Variance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on your use-case, you might want to guarantee that nearby (u,v) samples
    will remain close when mapped onto the disk. In such cases, the Shirley transformation
    is preferable to uniform polar sampling, as it introduces less variance.
  prefs: []
  type: TYPE_NORMAL
