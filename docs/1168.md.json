["```py\nfrom langchain_anthropic import ChatAnthropic\nfrom langchain_core.output_parsers import StrOutputParser\nfrom langchain_core.prompts import PromptTemplate\n\n# Set up the LLM Chain to return a single word based on the query,\n# and based on a list of words we provide to it in the prompt template\nllm_completion_select_route_chain = (\n        PromptTemplate.from_template(\"\"\"\nGiven the user question below, classify it as either\nbeing about `LangChain`, `Anthropic`, or `Other`.\n\nDo not respond with more than one word.\n\n<question>\n{question}\n</question>\n\nClassification:\"\"\"\n                                     )\n        | ChatAnthropic(model_name=\"claude-3-haiku\")\n        | StrOutputParser()\n)\n\n# We setup an IF/Else condition to route the query to the correct chain \n# based on the LLM completion call above\ndef route_to_chain(route_name):\n    if \"anthropic\" == route_name.lower():\n        return anthropic_chain\n    elif \"langchain\" == route_name.lower():\n        return langchain_chain\n    else:\n        return general_chain\n\n...\n\n# Later on in the application, we can use the response from the LLM\n# completion chain to control (i.e route) the flow of the application \n# to the correct chain via the route_to_chain method we created\nroute_name = llm_completion_select_route_chain.invoke(user_query)\nchain = route_to_chain(route_name)\nchain.invoke(user_query)\n```", "```py\nfrom semantic_router import Route\n\n# we could use this as a guide for our chatbot to avoid political\n# conversations\npolitics = Route(\n    name=\"politics\",\n    utterances=[\n        \"isn't politics the best thing ever\",\n        \"why don't you tell me about your political opinions\",\n        \"don't you just love the president\",\n        \"they're going to destroy this country!\",\n        \"they will save the country!\",\n    ],\n)\n\n# this could be used as an indicator to our chatbot to switch to a more\n# conversational prompt\nchitchat = Route(\n    name=\"chitchat\",\n    utterances=[\n        \"how's the weather today?\",\n        \"how are things going?\",\n        \"lovely weather today\",\n        \"the weather is horrendous\",\n        \"let's go to the chippy\",\n    ],\n)\n\n# we place both of our decisions together into single list\nroutes = [politics, chitchat]\n```", "```py\nencoder = OpenAIEncoder()\n\nfrom semantic_router.layer import RouteLayer\n\nroute_layer = RouteLayer(encoder=encoder, routes=routes)\n```", "```py\nroute_layer(\"don't you love politics?\").name\n# -> 'politics'\n```"]