- en: Build Your Agents from Scratch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/build-your-agents-from-scratch-forget-autogen-or-crewai-part-a-a114cd1e785f?source=collection_archive---------2-----------------------#2024-09-23](https://towardsdatascience.com/build-your-agents-from-scratch-forget-autogen-or-crewai-part-a-a114cd1e785f?source=collection_archive---------2-----------------------#2024-09-23)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Design your own agents without any framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@hamzafarooq?source=post_page---byline--a114cd1e785f--------------------------------)[![Hamza
    Farooq](../Images/8e6d6ae323b57a2e4448357c2d61be77.png)](https://medium.com/@hamzafarooq?source=post_page---byline--a114cd1e785f--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a114cd1e785f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a114cd1e785f--------------------------------)
    [Hamza Farooq](https://medium.com/@hamzafarooq?source=post_page---byline--a114cd1e785f--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a114cd1e785f--------------------------------)
    ·7 min read·Sep 23, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/59d5595c2bac63d71cfbbdc8c6275882.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Arseny Togulev](https://unsplash.com/@tetrakiss?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: In the recent months, we’ve have all heard about Agents and Multi-Agent frameworks.
    These AI agents have become the unsung heroes of automation and decision-making.
  prefs: []
  type: TYPE_NORMAL
- en: While pre-built frameworks like [AutoGen](https://microsoft.github.io/autogen/)
    and [CrewAI](https://www.crewai.com/) offer tempting shortcuts, (and rightly so!)
    there’s an unparalleled thrill and depth of understanding that comes from building
    your own agent from the ground up.
  prefs: []
  type: TYPE_NORMAL
- en: '*It’s like choosing between instant ramen and crafting a gourmet meal — sure,
    the former is quick, but the latter? That’s where the real magic happens.*'
  prefs: []
  type: TYPE_NORMAL
- en: Today, we’re going to roll up our sleeves and dive into the nitty-gritty of
    creating *AgentPro*, our very own AI assistant. By the end of this article, you’ll
    have a foundational understanding of how AI agents tick, and you’ll be well on
    your way to creating a digital companion that can generate and execute code on
    demand.
  prefs: []
  type: TYPE_NORMAL
- en: '*It’s like teaching a robot to fish, except instead of fish, it’s pulling Python
    scripts out of the ether!*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Caution: this code might not work in all cases but it should help you get
    started + indentation errors migh occur in code**'
  prefs: []
  type: TYPE_NORMAL
- en: Here’s the [Colab Notebook](https://colab.research.google.com/drive/1JilIxgnrs1vrWeF2tOL0eboiYwNfTmB0?usp=sharing)
  prefs: []
  type: TYPE_NORMAL
- en: '**The Building Blocks: A Roadmap to AgentPro**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we dive into the code, let’s outline the key components we’ll be constructing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/85a64a14a6e92b921810d9c644011382.png)'
  prefs: []
  type: TYPE_IMG
- en: The 5 Stages of developing an Agent from Scratch (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: '*Initialization: Setting up our agent’s “brain”*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Code Generation: Teaching our agent to write Python scripts*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Library Management: Enabling our agent to install necessary tools*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Code Execution: Empowering our agent to run the code it generates*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Command Center: Creating a central hub to manage all these functions*'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let’s break down each of these steps and see how they come together to
    form our AI assistant.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1: Initialization — Giving Our Agent Its First Spark of Life**'
  prefs: []
  type: TYPE_NORMAL
- en: Every great journey begins with a single step, and in the world of AI agents,
    that step is initialization. This is where we set up the basic structure of our
    agent and connect it to its primary source of intelligence — in this case, the
    OpenAI API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This snippet is the digital equivalent of giving life to our AI assistant. We’re
    importing necessary libraries, setting up our OpenAI API key, and creating the
    skeleton of our AgentPro class. It’s like providing a body for our AI — not very
    useful on its own, but essential for everything that follows.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 2: Code Generation — Teaching Our Agent to Write Python**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that our agent has a “body,” let’s give it the ability to think — or in
    this case, to generate code. This is where things start to get exciting!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]python\n|^[PRE2]$'', '''', response.choices[0].message.content, flags=re.MULTILINE)'
  prefs: []
  type: TYPE_NORMAL
- en: code_lines = code.split('\n')
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'while code_lines and not (code_lines[0].startswith(''import'') or code_lines[0].startswith(''from'')
    or code_lines[0].startswith(''#'')):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: code_lines.pop(0)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return '\n'.join(code_lines)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'def install_libraries(self, code):'
  prefs: []
  type: TYPE_NORMAL
- en: libraries = re.findall(r'#\s*pip install\s+([\w-]+)', code)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if libraries:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Installing required libraries...")
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for lib in libraries:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'try:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: importlib.import_module(lib.replace('-', '_'))
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print(f"{lib} is already installed.")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'except ImportError:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print(f"Installing {lib}...")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: subprocess.check_call([sys.executable, "-m", "pip", "install", lib])
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Libraries installed successfully.")
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'def execute_code(self, code):'
  prefs: []
  type: TYPE_NORMAL
- en: 'with tempfile.NamedTemporaryFile(mode=''w'', suffix=''.py'', delete=False)
    as temp_file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: temp_file.write(code)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: temp_file_path = temp_file.name
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'try:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: result = subprocess.run(['python', temp_file_path], capture_output=True, text=True,
    timeout=30)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: output = result.stdout
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: error = result.stderr
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'except subprocess.TimeoutExpired:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: output = ""
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: error = "Execution timed out after 30 seconds."
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'finally:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: os.unlink(temp_file_path)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return output, error
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'def run(self, prompt):'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(f"Generating code for: {prompt}")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: code = self.generate_code(prompt)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Generated code:")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print(code)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print("\nExecuting code...")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: output, error = self.execute_code(code)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Output:")
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print(output)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if error:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Error:")
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print(error)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'if __name__ == "__main__":'
  prefs: []
  type: TYPE_NORMAL
- en: agent = AgentPro()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: agent.run("""make a detailed deck on the best forms of leadership with at
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: least 10 slides and save it to a pptx called leadership.pptx""")
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: With this simple command, we’re asking our agent to create a full presentation
    on leadership styles, complete with at least 10 slides, and save it as a PowerPoint
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Our agent will generate the necessary Python code (likely using a library like
    python-pptx), install any required libraries, execute the code to create the presentation,
    and then report back with the results or any errors encountered.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve just built the foundation of a powerful AI agent capable of generating
    and executing Python code on demand. From setting up its “brain” with the OpenAI
    API, to giving it the power to write and run code, to equipping it with the ability
    to install necessary tools, we’ve created a versatile digital assistant.
  prefs: []
  type: TYPE_NORMAL
- en: This is just the beginning of what’s possible with custom AI agents. In future
    installments, we’ll explore how to enhance AgentPro with web searching capabilities,
    image generation, and even more complex decision-making processes.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, with great power comes great responsibility. Your new AI assistant
    is a powerful tool, but it’s up to you to guide it wisely. Use it to automate
    tedious tasks, explore new ideas, and push the boundaries of what’s possible with
    AI.
  prefs: []
  type: TYPE_NORMAL
- en: Just maybe don’t ask it to write your wedding vows or decide on your next career
    move — some things are still best left to human intuition!
  prefs: []
  type: TYPE_NORMAL
- en: Stay tuned for Part B, where we’ll teach our agent some new tricks and start
    to unlock its true potential. Until then, happy coding, and may your AI adventures
    be bug-free and endlessly exciting!
  prefs: []
  type: TYPE_NORMAL
- en: Follow for Part B!
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested in learning more about this content, please subscribe.
    You can also connect with me on [LinkedIn](https://www.linkedin.com/in/hamzafarooq/)
  prefs: []
  type: TYPE_NORMAL
- en: '**About me**'
  prefs: []
  type: TYPE_NORMAL
- en: Hi! I am Hamza, and I’m thrilled to be your guide on this exciting journey into
    the world of AI agents. With a background as a Senior Research Scientist at Google
    and teaching experience at prestigious institutions like Stanford and UCLA, I’ve
    been at the forefront of AI development and education for years. My passion lies
    in demystifying complex AI concepts and empowering the next generation of AI practitioners.
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of which, if you’ve enjoyed this deep dive into building AI agents
    from scratch, you might be interested in taking your LLM knowledge to the next
    level. I’ve recently developed a comprehensive course titled [Enterprise RAG and
    Multi-Agent Applications](https://maven.com/boring-bot/advanced-llm) on the MAVEN
    platform. This course is tailored for practitioners who want to push the boundaries
    of what’s possible with Large Language Models, especially in enterprise settings.
  prefs: []
  type: TYPE_NORMAL
- en: In [Enterprise RAG and Multi-Agent Applications](https://maven.com/boring-bot/advanced-llm)
    we explore cutting-edge techniques that go beyond the basics. From advanced Retrieval-Augmented
    Generation (RAG) solutions to the latest methods in model optimization and responsible
    AI practices, this course is designed to equip you with the skills needed to tackle
    real-world AI challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you’re looking to implement state-of-the-art LLM applications or dive
    deep into the intricacies of model fine-tuning and ethical AI deployment, this
    course has got you covered.
  prefs: []
  type: TYPE_NORMAL
