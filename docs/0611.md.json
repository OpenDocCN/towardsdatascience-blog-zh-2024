["```py\nimport numpy as np\nimport random\nfrom scipy.stats import gaussian_kde\nimport matplotlib.pyplot as plt\n\nif __name__ == \"__main__\":\n    N = 2000\n    n_simulations = 500\n\n    estimate_1 = lambda sample: 2 * round(np.mean(sample)) - 1\n    estimate_2 = lambda sample: round(max(sample) + ((max(sample) - k) / k))\n\n    estimate_1_per_k, estimate_2_per_k = [],[]\n    k_range = range(2,10)\n    for k in k_range:\n        diffs_1, diffs_2 = [],[]\n        # sample without duplicates:\n        samples = [random.sample(range(N), k) for _ in range(n_simulations)]\n        estimate_1_per_k.append([estimate_1(sample) for sample in samples])\n        estimate_2_per_k.append([estimate_2(sample) for sample in samples])\n\n    fig,axs = plt.subplots(1,2, sharey=True, sharex=True)\n    axs[0].violinplot(estimate_1_per_k, positions=k_range, showextrema=True)\n    axs[0].scatter(k_range, [np.mean(d) for d in estimate_1_per_k], color=\"purple\")\n    axs[1].violinplot(estimate_2_per_k, positions=k_range, showextrema=True)\n    axs[1].scatter(k_range, [np.mean(d) for d in estimate_2_per_k], color=\"purple\")\n\n    axs[0].set_xlabel(\"k\")\n    axs[1].set_xlabel(\"k\")\n    axs[0].set_ylabel(\"Estimated N\")\n    axs[0].set_title(r\"$2\\times m-1$\")\n    axs[1].set_title(r\"$x+\\frac{x-k}{k}$\")\n    plt.show()\n\n    plt.gcf().clf()\n    k = 5\n    xs = np.linspace(500,3500, 500)\n\n    fig, axs = plt.subplots(1,2, sharey=True)\n    density_1 = gaussian_kde(estimate_1_per_k[k])\n    axs[0].plot(xs, density_1(xs))\n    density_2 = gaussian_kde(estimate_2_per_k[k])\n    axs[1].plot(xs, density_2(xs))\n    axs[0].vlines(2000, ymin=0, ymax=0.003, color=\"grey\", linestyles=\"dotted\")\n    axs[1].vlines(2000, ymin=0, ymax=0.003, color=\"grey\", linestyles=\"dotted\")\n    axs[0].set_ylim(0,0.0025)\n\n    a,b = 1750, 2250\n    ix = np.linspace(a,b)\n    verts = [(a, 0), *zip(ix, density_1(ix)), (b, 0)]\n    poly = plt.Polygon(verts, facecolor='0.9', edgecolor='0.5')\n    axs[0].add_patch(poly)\n    print(\"Integral for estimate 1: \", density_1.integrate_box(a,b))\n\n    verts = [(a, 0), *zip(ix, density_2(ix)), (b, 0)]\n    poly = plt.Polygon(verts, facecolor='0.9', edgecolor='0.5')\n    axs[1].add_patch(poly)\n    print(\"Integral for estimate 2: \", density_2.integrate_box(a,b))\n\n    axs[0].set_ylabel(\"Probability Density\")\n    axs[0].set_xlabel(\"N\")\n    axs[1].set_xlabel(\"N\")\n    axs[0].set_title(r\"$2\\times m-1$\")\n    axs[1].set_title(r\"$x+\\frac{x-k}{k}$\")\n\n    plt.show() \n```"]