["```py\nimport plotly.io as pio\npio.templates.default = 'simple_white'\n```", "```py\n# create chart\nfig = px.bar(df, text_auto = ',.6r', width = 600)\n\n# hide legend\nfig.update_layout(showlegend = False)\n```", "```py\nfig.update_xaxes(visible = False)\n# you can similarly hide y-axes using fig.update_yaxes(visible = False)\n```", "```py\n# defining colors based on conversion value\ncolors = list(map(\n    lambda x: 'silver' if x >= 40 else 'purple',\n    conv_df.conversion.values\n))\n\n# creating default plot\nfig = px.bar(conv_df, text_auto='.2f', labels = {'value': 'conversion, %'})\n\n# updating colors\nfig.update_traces(marker_color=colors, marker_line_color=colors, \n    textposition='outside', marker_line_width=1.5, opacity=0.9)\n\n# hiding legend \nfig.update_layout(showlegend = False)\n\n# updating range to add some space on the top\nfig.update_yaxes(range = [0, 70]) \n```", "```py\ncolours = {\n  \"light_green\": \"#9FE870\",\n  \"dark_green\": \"#163300\",\n  \"light_blue\": \"#7CECF1\",\n  \"dark_blue\": \"#000146\",\n  \"light_orange\": \"#FFC828\"\n}\n```", "```py\ncolormap = {'Android': 'silver', 'Windows': 'gray', 'iOS': 'purple'}\npx.line(ts_df, color_discrete_map = colormap)\n```", "```py\npx.area(df, color_discrete_sequence = px.colors.qualitative.Prism)\n```", "```py\npx.imshow(\n    gmv_df.values, \n    x = gmv_df.columns,\n    y = gmv_df.index,\n    color_continuous_scale='pubugn'\n    text_auto=',.6r', aspect=\"auto\",\n    labels=dict(x=\"age group\", y=\"region\", color=\"GMV in GBP\")\n)\n```", "```py\nimport plotly.graph_objects as go\n\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(\n        mode='lines', x=ts_df.index,\n        y=ts_df.Android, showlegend=True,\n        name = 'Android', line = {'width': 1}\n    )\n)\nfig.add_trace(\n    go.Scatter(\n        mode='lines', x=ts_df.index,\n        y=ts_df.Windows, showlegend=True,\n        name = 'Windows', line = {'width': 1}\n    )\n)\nfig.add_trace(\n    go.Scatter(\n        mode='lines', x=ts_df.index,\n        y=ts_df.iOS, showlegend=True,\n        name = 'iOS', line = {'width': 3} \n    )\n)\n\nfig.show()\n```", "```py\nfig.update_layout(\n    title = '<b>Monthly sessions:</b> sky-rocketing trend for iOS'\n)\n```", "```py\npx.line(ts_df, width = 600, \n    labels = {'value': 'sessions', 'os': 'platform', 'month_date': 'month'},\n    title = 'Monthly sessions over time')\n```", "```py\ndef format_string_by_lines(s, line_limit = 70):    \n    lines = []\n    curr_line_words = []\n    curr_line_length = 0\n\n    for word in s.split(' '):\n        if curr_line_length + len(word) > line_limit:\n            lines.append(' '.join(curr_line_words))\n            curr_line_words = []\n            curr_line_length = 0\n\n        curr_line_words.append(word)\n        curr_line_length += len(word)\n\n    lines.append(' '.join(curr_line_words))\n    return ' <br> '.join(lines)\n\nchart_title = '<b>Monthly sessions over time:</b> we can see sky-rocketing trend on iOS while Android and Windows are pretty stagnant.'\npx.line(ts_df, width = 600, \n    labels = {'value': 'sessions', 'os': 'platform', 'month_date': 'month'},\n    title = format_string_by_lines(chart_title))\n```", "```py\nraw_ts_df['text_val'] = list(map(\n    lambda v, d: '' if d != raw_ts_df.month_date.max() else '%.1fK' % (v/1000),\n    raw_ts_df.value,\n    raw_ts_df.month_date\n))\n```", "```py\nfig = px.line(raw_ts_df, x = 'month_date', y = 'value', \n    color = 'platform', text = 'text_val',\n    width = 1000, height = 500, \n    labels = {'value': 'sessions', 'os': 'platform', 'month_date': 'month'},\n    title = '<b>Monthly sessions</b>')\n\nfig.update_traces(textposition=\"middle right\", mode='lines+text')\nfig.update_layout(legend=dict(orientation=\"h\", yanchor=\"bottom\", \n    y=0.05, xanchor=\"right\", x=1))\n```", "```py\nannotations = raw_ts_df.groupby('platform', as_index = False)\\\n    .aggregate({'value': 'last', 'month_date': 'last'})\\\n    .rename(columns = {'value': 'y', 'month_date': 'x'})\n\nannotations['text'] = annotations.y.map(lambda v: '%.1fK' % (v/1000))\nannotations = annotations.drop('platform', axis = 1)\n```", "```py\nannotations['showarrow'] = False\nannotations['xanchor'] = 'left' \nannotations['yanchor'] = 'middle'\nannotations_list = annotations.to_dict('records')\n```", "```py\nfig = px.line(raw_ts_df, x = 'month_date', y = 'value', \n    color = 'platform', \n    width = 1000, height = 500, \n    labels = {'value': 'sessions', 'os': 'platform', 'month_date': 'month'},\n    title = '<b>Monthly sessions</b>')\n\nfig.update_layout(annotations = annotations_list,\n    legend=dict(orientation=\"h\", yanchor=\"bottom\", \n    y=0.05, xanchor=\"right\", x=1))\n```", "```py\nfig.add_vline(\n    x=datetime.datetime.strptime(\"2023-09-01\", \"%Y-%m-%d\").timestamp() * 1000, line_width=3, line_dash=\"dash\", \n    line_color='black', annotation_text=\"Marketing   <br> campaign  \", \n    annotation_position=\"top left\"\n)\n```"]