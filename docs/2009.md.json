["```py\ndocker run \\\n -it - rm \\\n - publish=7474:7474 - publish=7687:7687 \\\n - env NEO4J_AUTH=neo4j/123456789 \\\n - env NEO4J_PLUGINS='[\"graph-data-science\",\"apoc\",\"n10s\"]' \\\n neo4j:5.17.0\n```", "```py\nURI = \"bolt://localhost:7687\"\nAUTH = (\"neo4j\", \"123456789\")\ndriver = GraphDatabase.driver(URI, auth=AUTH)\ndriver.verify_connectivity()\n```", "```py\nCALL n10s.graphconfig.init({ handleVocabUris: \"IGNORE\" });\nCREATE CONSTRAINT n10s_unique_uri FOR (r:Resource) REQUIRE r.uri IS UNIQUE;\nCALL n10s.onto.import.fetch(http://purl.obolibrary.org/obo/doid.owl, RDF/XML);\n```", "```py\nMATCH (cancer:Class {label:\"cancer\"})<-[:SCO|SCO_RESTRICTION *1..]-(n:Class)\nWITH n\nMATCH (n)-[:SCO|SCO_RESTRICTION]->(m:Class)\nWITH gds.graph.project(\n    \"proj\", n, m, {}, {undirectedRelationshipTypes: ['*']}\n) AS g\nRETURN g.graphName AS graph, g.nodeCount AS nodes, g.relationshipCount AS rels\n```", "```py\nCALL gds.fastRP.write(\n  'proj',\n  {embeddingDimension: 128, randomSeed: 42, writeProperty: 'embedding'}\n) YIELD nodePropertiesWritten\n\nCALL gds.louvain.write(\n  \"proj\",\n  {writeProperty: \"louvain\"}\n) YIELD communityCount\n\nMATCH (cancer:Class {label:\"cancer\"})<-[:SCO|SCO_RESTRICTION *0..]-(n)\nRETURN DISTINCT\n  n.label as label,\n  n.embedding as embedding,\n  n.louvain as louvain\n```", "```py\nnodes[nodes.louvain == 2168][\"label\"].tolist()\n#array(['\"islet cell tumor\"',\n#       '\"non-functioning pancreatic endocrine tumor\"',\n#       '\"pancreatic ACTH hormone producing tumor\"',\n#       '\"pancreatic somatostatinoma\"',\n#       '\"pancreatic vasoactive intestinal peptide producing tumor\"',\n#       '\"pancreatic gastrinoma\"', '\"pancreatic delta cell neoplasm\"',\n#       '\"pancreatic endocrine carcinoma\"',\n#       '\"pancreatic non-functioning delta cell tumor\"'], dtype=object)\n```", "```py\nnodes[nodes.louvain == 174][\"label\"]\n#array(['\"head and neck cancer\"', '\"glottis carcinoma\"',\n#       '\"head and neck carcinoma\"', '\"squamous cell carcinoma\"',\n#...\n#       '\"pancreatic squamous cell carcinoma\"',\n#       '\"pancreatic adenosquamous carcinoma\"',\n#...\n#       '\"mixed epithelial/mesenchymal metaplastic breast carcinoma\"',\n#       '\"breast mucoepidermoid carcinoma\"'], dtype=object)p\n```", "```py\nfrom sklearn.manifold import TSNE\n\nnodes = pd.read_csv(\"export.csv\")\nnodes['louvain'] = pd.Categorical(nodes.louvain)\n\nembedding = nodes.embedding.apply(lambda x: ast.literal_eval(x))\nembedding = embedding.tolist()\nembedding = pd.DataFrame(embedding)\n\ntsne = TSNE()\nX = tsne.fit_transform(embedding)\n\nfig, axes = plt.subplots()\naxes.scatter(\n    X[:,0],\n    X[:,1],\n    c  = cm.tab20(Normalize()(nodes['louvain'].cat.codes))\n)\nplt.show()\n```"]