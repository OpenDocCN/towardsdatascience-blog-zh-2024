["```py\nimport numpy as np\nimport pandas as pd\nfrom sklearn.svm import SVC\n\n# Create DataFrame\ndf = pd.DataFrame({\n    '🌞': [0, 1, 1, 2, 3, 3, 2, 3, 0, 0, 1, 2, 3],\n    '💧': [0, 0, 1, 0, 1, 2, 3, 3, 1, 2, 3, 2, 1],\n    'y': [1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1]\n}, index=range(1, 14))\n\n# Split into train and test\ntrain_df, test_df = df.iloc[:8].copy(), df.iloc[8:].copy()\nX_train, y_train = train_df[['🌞', '💧']], train_df['y']\nX_test, y_test = test_df[['🌞', '💧']], test_df['y']\n\n# Create and fit SVC model\nsvc = SVC(kernel='linear', C=2)\nsvc.fit(X_train, y_train)\n\n# Add Lagrange multipliers and support vector status\ntrain_df['α'] = 0.0\ntrain_df.loc[svc.support_ + 1, 'α'] = np.abs(svc.dual_coef_[0])\ntrain_df['Is SV'] = train_df.index.isin(svc.support_ + 1)\n\nprint(\"Training Data, Lagrange Multipliers, and Support Vectors:\")\nprint(train_df)\n\n# Print model parameters\nw, b = svc.coef_[0], svc.intercept_[0]\nprint(f\"\\nModel Parameters:\")\nprint(f\"Weights (w): [{w[0]}, {w[1]}]\")\nprint(f\"Bias (b): {b}\")\nprint(f\"Decision function: f(🌞,💧) = ({w[0]})🌞 + ({w[1]})💧 + ({b})\")\n\n# Make predictions\ntest_df['ŷ'] = svc.predict(X_test)\n\nprint(\"\\nTest Data and Predictions:\")\nprint(test_df)\n```", "```py\nimport numpy as np\nimport pandas as pd\nfrom sklearn.svm import SVC\n\n# Create DataFrame\ndf = pd.DataFrame({\n    '🌞': [0, 1, 1, 2, 3, 3, 2, 3, 0, 0, 1, 2, 3],\n    '💧': [0, 0, 1, 0, 1, 2, 3, 3, 1, 2, 3, 2, 1],\n    'y': [1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1]\n}, index=range(1, 14))\n\n# Split into train and test\ntrain_df, test_df = df.iloc[:8].copy(), df.iloc[8:].copy()\nX_train, y_train = train_df[['🌞', '💧']], train_df['y']\nX_test, y_test = test_df[['🌞', '💧']], test_df['y']\n\n# Create and fit SVC model with polynomial kernel\nsvc = SVC(kernel='poly', degree=2, coef0=1, C=1)\nsvc.fit(X_train, y_train)\n\n# Add Lagrange multipliers and support vector status\ntrain_df['α'] = 0.0\ntrain_df.loc[svc.support_ + 1, 'α'] = np.abs(svc.dual_coef_[0])\ntrain_df['Is SV'] = train_df.index.isin(svc.support_ + 1)\n\nprint(\"Training Data, Lagrange Multipliers, and Support Vectors:\")\nprint(train_df)\n\n# Make predictions\ntest_df['ŷ'] = svc.predict(X_test)\nprint(\"\\nTest Data and Predictions:\")\nprint(test_df)\n```"]