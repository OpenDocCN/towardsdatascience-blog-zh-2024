- en: Optimising Non-Linear Treatment Effects in Pricing and Promotions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/optimising-non-linear-treatment-effects-in-pricing-and-promotions-011ce140d180?source=collection_archive---------2-----------------------#2024-05-24](https://towardsdatascience.com/optimising-non-linear-treatment-effects-in-pricing-and-promotions-011ce140d180?source=collection_archive---------2-----------------------#2024-05-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Causal AI, exploring the integration of causal reasoning into machine learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@raz1470?source=post_page---byline--011ce140d180--------------------------------)[![Ryan
    O''Sullivan](../Images/7cd161d38d67d2c0b7da2d8f3e7d33fe.png)](https://medium.com/@raz1470?source=post_page---byline--011ce140d180--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--011ce140d180--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--011ce140d180--------------------------------)
    [Ryan O''Sullivan](https://medium.com/@raz1470?source=post_page---byline--011ce140d180--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--011ce140d180--------------------------------)
    ¬∑12 min read¬∑May 24, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/10380a5d9fbe3aded646019e930eb6a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ernest Ojeh](https://unsplash.com/@namzo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: What is this series of articles about?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to my series on Causal AI, where we will explore the integration of
    causal reasoning into machine learning models. Expect to explore a number of practical
    applications across different business contexts.
  prefs: []
  type: TYPE_NORMAL
- en: In the last article we covered *using Double Machine Learning and Linear Programming
    to optimise treatment strategies*. This time we will continue with the theme of
    optimisation exploring *optimising non-linear treatment effects in Pricing & Promotions*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you missed the last article on Double Machine Learning and Linear Programming,
    check it out here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/using-double-machine-learning-and-linear-programming-to-optimise-treatment-strategies-920c20a29553?source=post_page-----011ce140d180--------------------------------)
    [## Using Double Machine Learning and Linear Programming to optimise treatment
    strategies'
  prefs: []
  type: TYPE_NORMAL
- en: Causal AI, exploring the integration of causal reasoning into machine learning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/using-double-machine-learning-and-linear-programming-to-optimise-treatment-strategies-920c20a29553?source=post_page-----011ce140d180--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article will showcase how we can optimise non-linear treatment effects
    in pricing (but the ideas can also be applied across marketing and other domains
    too).
  prefs: []
  type: TYPE_NORMAL
- en: '**In this article I will help you understand:**'
  prefs: []
  type: TYPE_NORMAL
- en: Why is it common to have non-linear treatment effects in pricing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What tools from our Causal AI toolbox are suitable for estimating non-linear
    treatment effects?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can non-linear programming be used to optimise pricing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A worked case study in Python working through how we can combine our Causal
    AI toolbox and non-linear programming to optimise pricing budgets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The full notebook can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/raz1470/causal_ai/blob/main/notebooks/using%20dml%20and%20lp%20to%20optimise%20treatment%20strategies.ipynb?source=post_page-----011ce140d180--------------------------------)
    [## causal_ai/notebooks/using dml and lp to optimise treatment strategies.ipynb
    at main ¬∑‚Ä¶'
  prefs: []
  type: TYPE_NORMAL
- en: This project introduces Causal AI and how it can drive business value. - causal_ai/notebooks/using
    dml and lp to‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/raz1470/causal_ai/blob/main/notebooks/using%20dml%20and%20lp%20to%20optimise%20treatment%20strategies.ipynb?source=post_page-----011ce140d180--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Why is it common to have non-linear treatment effects in pricing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Diminishing returns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let‚Äôs take the example of a retailer adjusting the price of a product. Initially
    lowering the price might lead to a significant increase in sales. However, as
    they continue to lower the price, the increase in sales may start to plateau.
    We call this diminishing returns. As illustrated below, the effect of diminishing
    returns is generally non-linear.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/00d137dc0252c7fe3a474395358fd7c8.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: 'Diminishing returns can be observed across various fields beyond pricing. Some
    common examples are:'
  prefs: []
  type: TYPE_NORMAL
- en: Marketing ‚Äî Increasing social media spend can increase customer acquisition,
    but as time goes on it becomes more difficult to target new, untapped audiences.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Farming ‚Äî Adding fertilizer to a field can increase crop yield significantly
    initially, but this effect will very quickly start to diminish.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manufacturing ‚Äî Adding more workers to a production process will improve efficiencies,
    but each additional worker may contribute less to the overall output.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This makes me start to wonder, if diminishing returns are so common, then which
    techniques from our Causal AI toolbox are capable of handling this?
  prefs: []
  type: TYPE_NORMAL
- en: What methods from our Causal AI toolbox are suitable for estimating non-linear
    treatment effects?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Toolbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two key questions which we will ask to help us identify what methods
    from our Causal AI toolbox are suitable for our Pricing problem:'
  prefs: []
  type: TYPE_NORMAL
- en: Can it handle continuous treatments?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can it capture non-linear treatment effects?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Below we can see a summary of how suitable each method is:'
  prefs: []
  type: TYPE_NORMAL
- en: Propensity score matching (PSM) ‚Äî Treatment needs to be binary ‚ùå
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inverse-propensity score matching (IPSM) ‚Äî Treatment needs to be binary ‚ùå
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: T-Learner ‚Äî Treatment needs to be binary ‚ùå
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Double Machine Learning (DML) ‚Äî Treatment effect is linear ‚ùå
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doubly-Robust Learner (DR) ‚Äî Treatment needs to be binary ‚ùå
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: S-Learner ‚Äî Can handle continuous treatments and non-linear relationships between
    the treatment and outcome if an appropriate machine learning algorithm (e.g. gradient
    boosting) is used üíö
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: S-Learner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ‚ÄúS‚Äù in S-Learner comes from it being a ‚Äúsingle model‚Äù. An arbitrary machine
    learning model is used to predict the outcome using the treatment, confounders
    and other covariates as features. This model is then used to estimate the difference
    between the potential outcomes under different treatment conditions (which gives
    us the treatment effect).
  prefs: []
  type: TYPE_NORMAL
- en: 'The are a number of benefits to the S-Learner:'
  prefs: []
  type: TYPE_NORMAL
- en: It can handle both binary and continuous treatments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can use any machine learning algorithm, giving us the flexibility to capture
    non-linear relationships for both the features and treatment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One word of caution: regularisation bias! Modern machine learning algorithms
    use regularisation to prevent overfitting ‚Äî but this can be damaging to causal
    problems. Take the hyper-parameter *max features* from gradient boosting tree
    methods ‚Äî in a number of trees, it is likely that the treatment won‚Äôt be included
    in the model. This will dampen the effect of the treatment.'
  prefs: []
  type: TYPE_NORMAL
- en: When using the S-Learner, I recommend thinking carefully about the regularisation
    parameters e.g. set *max features* to 1.0 (effectively switching off the feature
    regularisation).
  prefs: []
  type: TYPE_NORMAL
- en: How can non-linear programming be used to optimise pricing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Price optimisation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let‚Äôs say we have a number of products and we want to optimise their price given
    a set promotional budget. For each product we train an S-Learner (using gradient
    boosting) with the treatment set as discount level and the outcome set as total
    number of orders. Our S-Leaners output a complex model that can be used to estimate
    the effect of different discount levels. But how can we optimise the discount
    levels for each product?
  prefs: []
  type: TYPE_NORMAL
- en: Response Curves
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Optimisation techniques such as linear (or even non-linear) programming rely
    on having a clear functional form of the response. Machine learning techniques
    like random forests and gradient boosting don‚Äôt give us this (unlike say linear
    regression). However, a response curve can translate the outputs of an S-Learner
    into a comprehensive form, showing how the outcome responds to the treatment.
  prefs: []
  type: TYPE_NORMAL
- en: If you can‚Äôt quite picture how we can create a response curve yet, don‚Äôt worry
    we will cover this in the Python case study!
  prefs: []
  type: TYPE_NORMAL
- en: Michaelis-Menton equation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are several equations we could use to map the S-Learner to a response
    curve. One of them is the Micaelis-Menton equation.
  prefs: []
  type: TYPE_NORMAL
- en: The Micaelis-Menton equation is commonly used in enzyme kinetics (the study
    of the rates at which enzymes catalyse chemical reactions) to describe the rate
    of enzymatic reactions.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/103dde2faf7a1ea73b0d3fe4dd0b2798.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: v ‚Äî is the reaction velocity (this is our transformed response, so total number
    of orders in our pricing example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vmax ‚Äî is the maximum reaction velocity (we will call this alpha, a parameter
    we need to learn)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Km ‚Äî is the substrate concentration (we will call this lambda, a parameter we
    need to learn)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: S ‚Äî is the Michaelis constant (this is our treatment, so discount level in our
    pricing example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Its principles can also be applied to other fields, especially when dealing
    with systems where increasing input does not proportionally increase output due
    to saturation factors. Below we visualise how different values of alpha and lamda
    effect the curve:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/339c252eb69c29a11f08f39d2b0e2cbd.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: Once we have our response curves, next we can think about optimisation. The
    Micaelis-Menton gives us a non-linear function. Therefore non-linear programming
    is an appropriate choice.
  prefs: []
  type: TYPE_NORMAL
- en: Non-linear programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We covered linear programming in the my last article. Non-linear programing
    is similar but the objective function and/or constraints are non-linear in nature.
  prefs: []
  type: TYPE_NORMAL
- en: Sequential Least Squares Programming (SLSQP) is an algorithm used for solving
    non-linear programming problems. It allows for both equality and inequality constraints
    making it a sensible choice for our use case.
  prefs: []
  type: TYPE_NORMAL
- en: Equality constraints e.g. Total promotional budget is equal to ¬£100k
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inequality constraints e.g. Discount on each product between ¬£1 and ¬£10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SciPy have an easy to use implementation of SLSQP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://docs.scipy.org/doc/scipy/reference/optimize.minimize-slsqp.html?source=post_page-----011ce140d180--------------------------------)
    [## minimize(method=''SLSQP'') - SciPy v1.13.0 Manual'
  prefs: []
  type: TYPE_NORMAL
- en: If jac in ['2-point', '3-point', 'cs'] the relative step size to use for numerical
    approximation of jac. The absolute‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: docs.scipy.org](https://docs.scipy.org/doc/scipy/reference/optimize.minimize-slsqp.html?source=post_page-----011ce140d180--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Next we will illustrate how powerful the combination of the S-Learner, Micaelis-Menton
    equation and non-linear programing can be!
  prefs: []
  type: TYPE_NORMAL
- en: Case study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Historically the promotions teams have used their expert judgement to set the
    discount for their 3 top products. Given the current economic conditions, they
    are being forced to reduce their overall promotional budget by 20%. They turn
    to the Data Science team to advise how they can do this whilst minimising the
    loss in orders being placed.
  prefs: []
  type: TYPE_NORMAL
- en: Data generating process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We set up a data generating process with the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: 4 features with a complex relationship with the number of orders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A treatment effect which follows the Micaelis-Menton equation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The X features are confounding variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/070ded84b57d5cde15c71bc2917b0210.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the data generator to create samples for 3 products, each with a different
    treatment effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: S-Learner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can train an S-Learner by using any machine learning algorithm and including
    the treatment and covariates as features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We train an S-Learner for each product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'At the moment this is just a prediction model ‚Äî Below we visualise how well
    it does at this job:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/633b5e5ab9af4aa5319a9f6e195fe89e.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: Extracting the treatment effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next we will use our S-learner to extract the treatment effect for the full
    range of treatment values (discount amount) whilst holding other features to their
    mean value.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by extracting the expected outcome (number of orders) for the full
    range of treatment values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We do this for each product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We then extract the expected outcome (number of orders) when the treatment
    is set to 0:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, we do this for each product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now calculate the treatment effect for the full range of treatment values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When we compare this to the actual treatment effect which we saved from our
    data-generator, we can see the S-Learner is very effective at estimating the treatment
    effects for the full range of treatment values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b97c0b95c35e52cf9b9fac26fa824876.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: Now we have this treatment effect data, we can use it to build response curves
    for each product.
  prefs: []
  type: TYPE_NORMAL
- en: Michaelis-Menton
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To build the response curves, we need a curve fitting tool. SciPy has a great
    implementation of one which we will use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html?source=post_page-----011ce140d180--------------------------------)
    [## scipy.optimize.curve_fit - SciPy v1.13.0 Manual'
  prefs: []
  type: TYPE_NORMAL
- en: scipy.optimize. curve_fit ( f , xdata , ydata , , , , , bounds = (-inf, inf)
    , , , * , , , ** kwargs ) [source] Use‚Ä¶
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: docs.scipy.org](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.curve_fit.html?source=post_page-----011ce140d180--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by setting up the function that we want to learn:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then use curve_fit to learn the alpha and lambda parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We do this for each product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now feed the learnt parameters into the michaelis menten function to
    help us visualise how well the curve fitting did:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the curve fitting did a great job!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd743bbd492a4de4bf9bc40f0b9d8ad4.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: Now we have the alpha and lambda parameters for each product, we can start thinking
    about the non-linear optimisation‚Ä¶
  prefs: []
  type: TYPE_NORMAL
- en: Non-linear programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We start by setting collating all the required information for the optimisation:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of all the products
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The total promotional budget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The budget ranges for each product
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parameters for each product from the Michaelis Menten response curves
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Next we set up the objective function ‚Äî We want to maximise orders but as we
    are going to use a minimisation method, we return the negative of the sum of orders
    expected.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally we can run our optimisation to determine the optimal budget to allocate
    to each product:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output shows us what the optimal promotional budget is for each product:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7468ce2e35ed95ef3fdd0f6432967360.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: 'If you closely inspect the response curves, you will see that what the optimisation
    results are intuitive:'
  prefs: []
  type: TYPE_NORMAL
- en: Small decrease in the budget for product 1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decrease the budget for product 2 significantly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase the budget for product 3 significantly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closing thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Today we covered the powerful combination of the S-Learner, Micaelis-Menton
    equation and non-linear programing! Here are some closing thoughts:'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned earlier, when using the S-Learner beware of regularisation bias!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A good alternative to the S-Learner is using DML but transforming your treatment
    before training the model ‚Äì However, this means you need to have some prior knowledge
    of the functional from of the treatment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I chose to use the Micaelis-Menton equation to build my response curves ‚Äî However,
    this may not fit your problem and can be replaced by other transformations which
    are more suitable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using SLSQP to solve nonlinear programming problems gives you the flexibility
    to use both equality and inequality constraints.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The data you collect is likely to be observational ‚Äì This poses some challenges
    around the range of discount values you will collect ‚Äì They are probably going
    to be clustered around a set region. Using some sort of Shapley approach to create
    the data used to create the response curves may be more suitable in this situation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I‚Äôve chosen to focus on Pricing & Promotions, but this framework can be extended
    to Marketing budgets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow me if you want to continue this journey into Causal AI ‚Äî In the next
    article we will cover measuring the intrinsic causal influence of your marketing
    campaigns.
  prefs: []
  type: TYPE_NORMAL
