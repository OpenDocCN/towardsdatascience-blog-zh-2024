["```py\nset_a = {1, 4, 9, 16}\nset_b = set([1,2,3]) #coverting list to set\nempty_set = set()\n```", "```py\n#LIST Implementation O(n^2)\ndef remove_duplicate_entries(list input_list):\n    output_list = []\n    for element in input_list:\n        if element in output_list: \n             output_list.append(element)\n    return output_list\n```", "```py\n#SET Implementation O(n)\ndef remove_duplicate_entries(list input_list):\n    return list(set(input_list))\n```", "```py\n#LIST Implementation\ndef has_duplicates(list input_list):\n    unique_elements = []\n    for element in input_list:\n        if element in unique_elements: \n             return True\n        else:\n             unique_elements.append(element)\n    return False\n```", "```py\n#SET Implementation\ndef has_duplicates(list input_list): \n    return len(input_list) != len(set(input_list))\n```", "```py\ndef has_duplicates(list input_list) -> bool:\n    unique_elements = set() #**modified here\n    for element in input_list:\n        if element in unique_elements: \n             return True\n        else:\n             unique_elements.add(element)\n    return False\n```", "```py\ndef is_pangram(str sentence) -> bool:\n    present_letters = {letter for letter in sentence}\n    return len(present_letters) == 26\n```", "```py\nnumber_list = range(random.randint(1,000,000))\nnumber_set = set(number_list)\n\n#Line 1\n#BEGIN TIMER\nprint(-1 in number_list)\n#END TIMER\n\n#Line 2\n#BEGIN TIMER\nprint(-1 in number_set)\n#END TIMER \n```", "```py\n#LIST\nnumbers = [1, 3, 4, 7, 8, 11]\n\nnumbers.remove(4)\nnumbers.remove(5) #Raises ERROR as 5 is not in list\nnumbers.pop(0) #Deletes number at index 0, ie. 1\n\n#SET\nnumbers = {1, 3, 4, 7, 8, 11}\n\nnumbers.remove(4)\nnumbers.remove(5) #Raises ERROR as 5 is not in set\nnumbers.discard(5) #Does not raise error if 5 is not in the set\nnumbers -= {1,2,3} #Performs set difference, ie. 1, 3 are discarded \n```", "```py\nnum_list = [1,2,3]\nnum_set = {1,2,3}\n\nnum_list.append(4)\nnum_set.add(4)\n\nnum_list += [5,6,7]\nnum_set += {5,6,7} \n```", "```py\nA = {1, 2, 3, 5, 8, 13}\nB = {2, 3, 5, 7, 13, 17}\n\n# A n B\nAintersectB = A & B\n# A U B\nAunionB = A | B\n# A \\ B\nAminusB = A - B\n# A U B - A n B or A Delta B\nAsymmetricdiffB = A ^ B \n```", "```py\nA <= B #A is a proper subset of B\nA > B #A is a superset of B \n```"]