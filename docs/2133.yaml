- en: 'Encoding Categorical Data, Explained: A Visual Guide with Code Example for
    Beginners'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/encoding-categorical-data-explained-a-visual-guide-with-code-example-for-beginners-b169ac4193ae?source=collection_archive---------0-----------------------#2024-09-02](https://towardsdatascience.com/encoding-categorical-data-explained-a-visual-guide-with-code-example-for-beginners-b169ac4193ae?source=collection_archive---------0-----------------------#2024-09-02)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: DATA PREPROCESSING
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Six ways of matchmaking categories and numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@samybaladram?source=post_page---byline--b169ac4193ae--------------------------------)[![Samy
    Baladram](../Images/715cb7af97c57601966c5d2f9edd0066.png)](https://medium.com/@samybaladram?source=post_page---byline--b169ac4193ae--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b169ac4193ae--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b169ac4193ae--------------------------------)
    [Samy Baladram](https://medium.com/@samybaladram?source=post_page---byline--b169ac4193ae--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b169ac4193ae--------------------------------)
    ¬∑10 min read¬∑Sep 2, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/389bb09672932e42606d764b20186804.png)'
  prefs: []
  type: TYPE_IMG
- en: '`‚õ≥Ô∏è More [DATA PREPROCESSING](https://medium.com/@samybaladram/list/data-preprocessing-17a2c49b44e4),
    explained: ¬∑ [Missing Value Imputation](/missing-value-imputation-explained-a-visual-guide-with-code-examples-for-beginners-93e0726284eb)
    ‚ñ∂ [Categorical Encoding](/encoding-categorical-data-explained-a-visual-guide-with-code-example-for-beginners-b169ac4193ae)
    ¬∑ [Data Scaling](/scaling-numerical-data-explained-a-visual-guide-with-code-examples-for-beginners-11676cdb45cb)
    ¬∑ [Discretization](/discretization-explained-a-visual-guide-with-code-examples-for-beginners-f056af9102fa?gi=c1bf25229f86)
    ¬∑ [Oversampling & Undersampling](/oversampling-and-undersampling-explained-a-visual-guide-with-mini-2d-dataset-1155577d3091)
    ¬∑ [Data Leakage in Preprocessing](/data-leakage-in-preprocessing-explained-a-visual-guide-with-code-examples-33cbf07507b7)`'
  prefs: []
  type: TYPE_NORMAL
- en: Ah, categorical data ‚Äî the colorful characters in our datasets that machines
    just can‚Äôt seem to understand. This is where ‚Äúred‚Äù becomes 1, ‚Äúblue‚Äù 2, and data
    scientists turn into language translators (or more like matchmakers?).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I know what you‚Äôre thinking: ‚ÄúEncoding? Isn‚Äôt that just assigning numbers
    to categories?‚Äù Oh, if only it were that simple! We‚Äôre about to explore six different
    encoding methods, all on ([again](/missing-value-imputation-explained-a-visual-guide-with-code-examples-for-beginners-93e0726284eb))
    a single, tiny dataset (with visuals, of course!) From simple labels to mind-bending
    cyclic transformations, you‚Äôll see why choosing the right encoding can be as important
    as picking the perfect algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/352a0dcc36660bb12d01eed09f4a7d2b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'All visuals: Author-created using Canva Pro. Optimized for mobile; may appear
    oversized on desktop.'
  prefs: []
  type: TYPE_NORMAL
- en: What Is Categorical Data and Why Does It Need Encoding?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we jump into our dataset and encoding methods, let‚Äôs take a moment to
    understand what categorical data is and why it needs special treatment in the
    world of machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: What Is Categorical Data?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Categorical data is like the descriptive labels we use in everyday life. It
    represents characteristics or qualities that can be grouped into categories.
  prefs: []
  type: TYPE_NORMAL
- en: Why Does Categorical Data Need Encoding?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here‚Äôs the catch: most machine learning algorithms are like picky eaters ‚Äî
    they only digest numbers. They can‚Äôt directly understand that ‚Äúsunny‚Äù is different
    from ‚Äúrainy‚Äù. That‚Äôs where encoding comes in. It‚Äôs like translating these categories
    into a language that machines can understand and work with.'
  prefs: []
  type: TYPE_NORMAL
- en: Types of Categorical Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Not all categories are created equal. We generally have two types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nominal**: These are categories with *no inherent order*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Ex: ‚Äú*Outlook‚Äù (sunny, overcast, rainy) is nominal. There‚Äôs no natural ranking
    between these weather conditions.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Ordinal**: These categories have a *meaningful order*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Ex:* ‚ÄúTemperature‚Äù (Very Low, Low, High, Very High) is ordinal. There‚Äôs a
    clear progression from coldest to hottest.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](../Images/f5b91bc4572d0f9c937f3d23ab1c1210.png)'
  prefs: []
  type: TYPE_IMG
- en: Why Care About Proper Encoding?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It preserves important information in your data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It can significantly impact your model‚Äôs performance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Incorrect encoding can introduce unintended biases or relationships.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Imagine if we encoded ‚Äúsunny‚Äù as 1 and ‚Äúrainy‚Äù as 2\. The model might think
    rainy days are ‚Äúgreater than‚Äù sunny days, which isn‚Äôt what we want!
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand what categorical data is and why it needs encoding, let‚Äôs
    take a look at our dataset and see how we can tackle its categorical variables
    using six different encoding methods.
  prefs: []
  type: TYPE_NORMAL
- en: The Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let‚Äôs use a simple golf dataset to illustrate our encoding methods (and it has
    mostly categorical columns). This dataset records various weather conditions and
    the resulting crowdedness at a golf course.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/08ad89fd65ebc9089f7517e8d617deb8.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we have a lot of categorical variables. Our task is to encode
    these variables so that a machine learning model can use them to predict, say,
    the Crowdedness of the golf course.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs get into it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Method 1: Label Encoding'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Label Encoding assigns a unique integer to each category in a categorical variable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Common Use üëç**: It‚Äôs often used for ordinal variables where there‚Äôs a clear
    order to the categories, such as education levels (e.g., primary, secondary, tertiary)
    or product ratings (e.g., 1 star, 2 stars, 3 stars).'
  prefs: []
  type: TYPE_NORMAL
- en: '**In Our Case**: We could use Label Encoding for the ‚ÄòWeekday‚Äô column in our
    golf dataset. Each day of the week would be assigned a unique number (e.g., Monday
    = 0, Tuesday = 1, etc.). However, we need to be careful as this might imply that
    Sunday (6) is ‚Äúgreater than‚Äù Saturday (5), which may not be meaningful for our
    analysis.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8aaa58914826d59dc04181e3f8bb16dc.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Method 2: One-Hot Encoding'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One-Hot Encoding creates a new binary column for each category in a categorical
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: '**Common Use üëç**: It‚Äôs typically used for nominal variables where there‚Äôs no
    inherent order to the categories. It‚Äôs particularly useful when dealing with variables
    that have a relatively small number of categories.'
  prefs: []
  type: TYPE_NORMAL
- en: '**In Our Case**: One-Hot Encoding would be ideal for our ‚ÄòOutlook‚Äô column.
    We‚Äôd create three new columns: ‚ÄòOutlook_sunny‚Äô, ‚ÄòOutlook_overcast‚Äô, and ‚ÄòOutlook_rainy‚Äô.
    Each row would have a 1 in one of these columns and 0 in the others, representing
    the weather condition for that day.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/61228288809b5e3a8ee325a941fd5ba0.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Method 3: Binary Encoding'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Binary Encoding represents each category as a binary number (0 and 1).
  prefs: []
  type: TYPE_NORMAL
- en: '**Common Use üëç**: It‚Äôs often used when there are only two categories, mostly
    in a yes-no situation.'
  prefs: []
  type: TYPE_NORMAL
- en: '**In Our Case**: While our ‚ÄòWindy‚Äô column only has two categories (Yes and
    No), we could use Binary Encoding to demonstrate the technique. It would result
    in a single binary column, where one category (e.g., No) is represented as 0 and
    the other (Yes) as 1.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d7e5f059c8d9740139ffae766aaa36ab.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Method 4: Target Encoding'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Target Encoding replaces each category with the mean of the target variable
    for that category.
  prefs: []
  type: TYPE_NORMAL
- en: '**Common Use üëç:** It‚Äôs used when there‚Äôs likely a relationship between the
    categorical variable and the target variable. It‚Äôs particularly useful for high-cardinality
    features in datasets with a reasonable number of rows.'
  prefs: []
  type: TYPE_NORMAL
- en: '**In Our Case:** We could apply Target Encoding to our ‚ÄòHumidity‚Äô column, using
    ‚ÄòCrowdedness‚Äô as the target. Each ‚ÄòDry‚Äô or ‚ÄòHumid‚Äô in the ‚ÄòWindy‚Äô column would
    be replaced with the average crowdedness observed for humid and dry days respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/12aa8b9f07391655769d8d75ceb99a97.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Method 5: Ordinal Encoding'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ordinal Encoding assigns ordered integers to ordinal categories based on their
    inherent order.
  prefs: []
  type: TYPE_NORMAL
- en: '**Common Use üëç: It‚Äôs us**ed for ordinal variables where the order of categories
    is meaningful and you want to preserve this order information.'
  prefs: []
  type: TYPE_NORMAL
- en: '**In Our Case**: Ordinal Encoding is perfect for our ‚ÄòTemperature‚Äô column.
    We could assign integers to represent the order: Low = 1, High = 2, Extreme =
    3\. This preserves the natural ordering of temperature categories.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c661ba6b647fc8602a9e74750107d18d.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Method 6: Cyclic Encoding'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cyclic Encoding/Transformation transforms a cyclical categorical variable into
    two numerical features that preserve the variable‚Äôs cyclical nature. It typically
    uses sine and cosine transformations to represent the cyclical pattern. For example,
    for the column ‚ÄúMonth‚Äù we‚Äôd make it numerical first (1‚Äì12) then create two new
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: Month_cos = cos(2 *œÄ* (*m* ‚Äî 1) / 12)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Month_sin = sin(2 *œÄ* (*m* ‚Äî 1) / 12)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: where *m* is a number from 1 to 12 representing January to December.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/427a445ee518ec29c5272d553148997d.png)'
  prefs: []
  type: TYPE_IMG
- en: Imagine the encoding to be the (x,y) coordinate on this weird clock, starting
    from 1‚Äì12\. To preserve the cyclical order, we need to represent them using two
    columns instead of one.
  prefs: []
  type: TYPE_NORMAL
- en: '**Common Use**: It‚Äôs used for categorical variables that have a natural cyclical
    order, such as days of the week, months of the year, or hours of the day. Cyclic
    encoding is particularly useful when the ‚Äúdistance‚Äù between categories matters
    and wraps around (e.g., the distance between December and January should be small,
    just like the distance between any other consecutive months).'
  prefs: []
  type: TYPE_NORMAL
- en: '**In Our Case**: In our golf dataset, the best column for cyclic encoding would
    be the ‚ÄòMonth‚Äô column. Months have a clear cyclical pattern that repeats every
    year. This could be particularly useful for our golf dataset, as it would capture
    seasonal patterns in golfing activity that might repeat annually. Here‚Äôs how we
    could apply it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c9905c0b2556090c2301d3f5681a7c70.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Conclusion: The Power of Transformation (and Understanding)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, there you have it! Six different ways to encode categorical data, all applied
    to our golf course dataset. Now, all categories are transformed into numbers!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0bb08bc860e6a02f94855d683cfb0477.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let‚Äôs recap how each method tackled our data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Label Encoding**: Turned our ‚ÄòWeekday‚Äô into numbers, making Monday 0 and
    Sunday 6 ‚Äî simple but potentially misleading.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**One-Hot Encoding**: Gave ‚ÄòOutlook‚Äô its own columns, letting ‚Äòsunny‚Äô, ‚Äòovercast‚Äô,
    and ‚Äòrainy‚Äô stand independently.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Binary Encoding**: Compressed our ‚ÄòHumidity‚Äô into efficient binary code,
    saving space without losing information.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Target Encoding**: Replaced ‚ÄòWindy‚Äô categories with average ‚ÄòCrowdedness‚Äô,
    capturing hidden relationships.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Ordinal Encoding**: Respected the natural order of ‚ÄòTemperature‚Äô, from ‚ÄòVery
    Low‚Äô to ‚ÄòVery High‚Äô.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Cyclic Encoding**: Transformed ‚ÄòMonth‚Äô into sine and cosine components, preserving
    its circular nature.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There‚Äôs no one-size-fits-all solution in categorical encoding. The best method
    depends on your specific data, the nature of your categories, and the requirements
    of your machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: Encoding categorical data might seem like a small step in the grand scheme of
    a machine learning project, but it‚Äôs often these seemingly minor details that
    can make or break a model‚Äôs performance.
  prefs: []
  type: TYPE_NORMAL
- en: '**‚ö†Ô∏è Caution: Key Considerations in Categorical Encoding**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we wrap up our encoding discussion, let‚Äôs highlight some critical points
    to keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Information Loss**: Some encoding methods can lead to loss of information.
    For example, label encoding might impose an unintended ordinal relationship.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**The New Category Issue**: Most encoding techniques stumble when faced with
    categories in your test data that weren‚Äôt present during training. Always have
    a strategy for handling these unexpected guests.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Curse of Dimensionality**: Techniques like one-hot encoding can dramatically
    increase the number of features (imagine if you have hundreds different categories
    like countries or cities!). You might want to select the features that actually
    matters to encode (like categorizing the rare ones as ‚ÄúOthers‚Äù).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Document, Document, Document**: Your future self (and your colleagues) will
    thank you for clearly recording your encoding decisions. This transparency is
    for reproducibility and for understanding any potential biases in your results.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, well, encoding is about translating your categorical data into a language
    that machines can understand, while preserving as much meaning as possible. It‚Äôs
    not about finding a perfect encoding, but about choosing the method that best
    suits your specific needs and constraints. Approach it thoughtfully, and you‚Äôll
    set a strong foundation for your machine learning works.
  prefs: []
  type: TYPE_NORMAL
- en: üåü Categorical Encoding Code Summarized
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Technical Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This article uses Python 3.7 , pandas 2.1, and numpy 1.26\. While the concepts
    discussed are generally applicable, specific code implementations may vary slightly
    with different versions.
  prefs: []
  type: TYPE_NORMAL
- en: About the Illustrations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unless otherwise noted, all images are created by the author, incorporating
    licensed design elements from Canva Pro.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a548db6268bfcf7076a78e8f15a46780.png)'
  prefs: []
  type: TYPE_IMG
- en: For a concise visual summary, check out [the companion Instagram post.](https://www.instagram.com/p/C_a4DWEy5IA)
  prefs: []
  type: TYPE_NORMAL
- en: 'ùôéùôöùôö ùô¢ùô§ùôßùôö ùòøùôñùô©ùôñ ùôãùôßùôöùô•ùôßùô§ùôòùôöùô®ùô®ùôûùô£ùôú ùô¢ùôöùô©ùôùùô§ùôôùô® ùôùùôöùôßùôö:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Samy Baladram](../Images/835013c69e08fec04ad9ca465c2adf6c.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Samy Baladram](https://medium.com/@samybaladram?source=post_page-----b169ac4193ae--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Data Preprocessing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://medium.com/@samybaladram/list/data-preprocessing-17a2c49b44e4?source=post_page-----b169ac4193ae--------------------------------)6
    stories![](../Images/f7ead0fb9a8dc2823d7a43d67a1c6932.png)![Cartoon illustration
    of two figures embracing, with letters ‚ÄòA‚Äô, ‚ÄòB‚Äô, ‚ÄòC‚Äô and numbers ‚Äò1‚Äô, ‚Äò2‚Äô, ‚Äò3‚Äô
    floating around them. A pink heart hovers above, symbolizing affection. The background
    is a pixelated pattern of blue and green squares, representing data or encoding.
    This image metaphorically depicts the concept of encoding categorical data, where
    categories (ABC) are transformed into numerical representations (123).](../Images/72bb3a287a9ca4c5e7a3871e234bcc4b.png)![A
    cartoon illustration representing data scaling in machine learning. A tall woman
    (representing a numerical feature with a large range) is shown shrinking into
    a child (representing the same feature after scaling to a smaller range). A red
    arrow indicates the shrinking process, and yellow sparkles around the child signify
    the positive impact of scaling.](../Images/d261b2c52a3cafe266d1962d4dbabdbd.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'ùôîùô§ùô™ ùô¢ùôûùôúùôùùô© ùôñùô°ùô®ùô§ ùô°ùôûùô†ùôö:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Samy Baladram](../Images/835013c69e08fec04ad9ca465c2adf6c.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Samy Baladram](https://medium.com/@samybaladram?source=post_page-----b169ac4193ae--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Classification Algorithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://medium.com/@samybaladram/list/classification-algorithms-b3586f0a772c?source=post_page-----b169ac4193ae--------------------------------)8
    stories![](../Images/f95c1a80b88fe6220b18cd3b2a83a30d.png)![](../Images/6ea70d9d2d9456e0c221388dbb253be8.png)![](../Images/7221f0777228e7bcf08c1adb44a8eb76.png)![Samy
    Baladram](../Images/835013c69e08fec04ad9ca465c2adf6c.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Samy Baladram](https://medium.com/@samybaladram?source=post_page-----b169ac4193ae--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Regression Algorithms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[View list](https://medium.com/@samybaladram/list/regression-algorithms-b0b6959f1b39?source=post_page-----b169ac4193ae--------------------------------)5
    stories![A cartoon doll with pigtails and a pink hat. This ‚Äúdummy‚Äù doll, with
    its basic design and heart-adorned shirt, visually represents the concept of a
    dummy regressor in machine. Just as this toy-like figure is a simplified, static
    representation of a person, a dummy regressor is a basic models serve as baselines
    for more sophisticated analyses.](../Images/aa7eeaa18e4bb093f5ce4ab9b93a8a27.png)![](../Images/44e6d84e61c895757ff31e27943ee597.png)![](../Images/7f3e5f3e2aca2feec035ca92e1bc440a.png)'
  prefs: []
  type: TYPE_NORMAL
