["```py\n#Model Parameters\nalpha = 4.0  #intercept\nbeta = 0.5 #slope\nsigma = 1.0 #error-scale\n```", "```py\n#Generate fake data\nx =  8 * np.random.rand(100)\ny = alpha + beta * x\ny = np.random.normal(y, scale=sigma) #noise\n#visualize generated data\nplt.scatter(x, y, alpha = 0.8)\n```", "```py\ndata {                    //input the data to STAN\n    int<lower=0> N;\n    vector[N] x;\n    vector[N] y;\n}\n```", "```py\n//simple model block \nmodel {                   \n    //priors\n    alpha ~ normal(0,10);\n    beta ~ normal(0,1); \n\n    //model\n    y ~ normal(alpha + beta * x, sigma);\n}\n```", "```py\ngenerated quantities {    //get quantities of interest from fitted model\n    vector[N] yhat;\n    vector[N] log_lik;\n    for (n in 1:N){\n        yhat[n] = normal_rng(alpha + x[n] * beta, sigma);             \n        //generate samples from model\n        log_lik[n] = normal_lpdf( y[n] | alpha + x[n] * beta, sigma); \n        //probability of data given the model and parameters\n        }\n}\n```", "```py\nmodel = \"\"\"\ndata {                    //input the data to STAN\n    int<lower=0> N;\n    vector[N] x;\n    vector[N] y;\n}\n```", "```py\nparameters {              \n    real alpha;\n    real beta;\n    real<lower=0> sigma;\n}model {                   \n    alpha ~ normal(0,10);\n    beta ~ normal(0,1);   \n    y ~ normal(alpha + beta * x, sigma);\n}generated quantities {    \n    vector[N] yhat;\n    vector[N] log_lik;\n\n    for (n in 1:N){ yhat[n] = normal_rng(alpha + x[n] * beta, sigma);             \n        log_lik[n] = normal_lpdf(y[n] | alpha + x[n] * beta, sigma); }\n}\n\"\"\"\n```", "```py\n#STAN takes data as a dict\ndata = {'N': len(x), 'x': x, 'y': y}\n```", "```py\n#parameters for STAN fitting\nchains = 2\nsamples = 1000\nwarmup = 10\n# set seed\n```", "```py\n# Compile the model\nposterior = stan.build(model, data=data, random_seed = 42)\n# Train the model and generate samples\nfit = posterior.sample(num_chains=chains, num_samples=samples)The .sample() method parameters control the Hamiltonian Monte Carlo (HMC) sampling process, where â€”\n```"]