["```py\nfrom mlxtend.frequent_patterns import apriori\nimport pandas as pd\nfrom sklearn.datasets import fetch_openml\nimport warnings\n\nwarnings.filterwarnings(action='ignore', category=DeprecationWarning)\n\ndata = fetch_openml('SpeedDating', version=1, parser='auto') \ndata_df = pd.DataFrame(data.data, columns=data.feature_names)\n\ndata_df = data_df[['d_pref_o_attractive', 'd_pref_o_sincere',\n                   'd_pref_o_intelligence', 'd_pref_o_funny',\n                   'd_pref_o_ambitious', 'd_pref_o_shared_interests']] \ndata_df = pd.get_dummies(data_df) \nfor col_name in data_df.columns:\n    data_df[col_name] = data_df[col_name].map({0: False, 1: True})\n\nfrequent_itemsets = apriori(data_df, min_support=0.3, use_colnames=True) \n\ndata_df['FPOF_Score'] = 0\n\nfor fis_idx in frequent_itemsets.index: \n    fis = frequent_itemsets.loc[fis_idx, 'itemsets']\n    support = frequent_itemsets.loc[fis_idx, 'support'] \n    col_list = (list(fis))\n    cond = True\n    for col_name in col_list:\n        cond = cond & (data_df[col_name])\n\n    data_df.loc[data_df[cond].index, 'FPOF_Score'] += support   \n\nmin_score = data_df['FPOF_Score'].min() \nmax_score = data_df['FPOF_Score'].max()\ndata_df['FPOF_Score'] = [(max_score - x) / (max_score - min_score) \n                         for x in data_df['FPOF_Score']]\n```", "```py\nfrequent_itemsets['length'] = \\\n    frequent_itemsets['itemsets'].apply(lambda x: len(x))\n```"]