["```py\nfrom pydantic import BaseModel\n\nclass OrderItem(BaseModel):\n  ItemName: str\n  ItemQuantity: int\n\nclass EmailOrder(BaseModel):\n  CustomerName: str\n  AccountNumber: str\n  ShippingAddress: str\n  Items: list[OrderItem]\n```", "```py\n>>> i = OrderItem(ItemName='eggs', ItemQuantity=2)\n>>> i\nOrderItem(ItemName='eggs', ItemQuantity=2)\n>>> i.model_dump_json()\n'{\"ItemName\":\"eggs\",\"ItemQuantity\":2}'\n>>> e = EmailOrder(CustomerName=\"James\", AccountNumber=\"1234\", ShippingAddress=\"1234 Bayberry Ln\", Items=[i])\n>>> e.model_dump_json()\n'{\"CustomerName\":\"James\",\"AccountNumber\":\"1234\",\"ShippingAddress\":\"1234 Bayberry Ln\",\"Items\":[{\"ItemName\":\"eggs\",\"ItemQuantity\":2}]}'\n```", "```py\nfrom langchain_core.output_parsers import JsonOutputParser\nfrom langchain_core.prompts import PromptTemplate\nfrom langchain_openai import OpenAI\n\nllm = OpenAI(model=\"gpt-3.5-turbo-instruct\") \n\ntemplate = \"\"\"\n    {format_instructions}\n    <email>\n    {email_body}\n    </email>\n    Instructions:\n    - Read the email and extract the information in it. \n    - Respond in the format instructions given above.\n    Begin! \n\"\"\"\nparser = JsonOutputParser(pydantic_object=EmailOrder)\nprompt = PromptTemplate(\n        template=template,\n        input_variables=[\"email_body\"],\n        partial_variables={\n            \"format_instructions\": parser.get_format_instructions\n        },\n    )\n\nchain = prompt | llm | parser\nemail_body = \"hello i'd like to order 2 eggs. My name is James. My account number is 1234\\. My address is 1234 Bayberry Ln. Appreciate it!\"\nchain.invoke({\"email_body\": email_body})\n```", "```py\nprompt = \"\"\"The output should be formatted as a JSON instance that conforms to the JSON schema below.\n\nAs an example, for the schema {\"properties\": {\"foo\": {\"title\": \"Foo\", \"description\": \"a list of strings\", \"type\": \"array\", \"items\": {\"type\": \"string\"}}}, \"required\": [\"foo\"]}\nthe object {\"foo\": [\"bar\", \"baz\"]} is a well-formatted instance of the schema. The object {\"properties\": {\"foo\": [\"bar\", \"baz\"]}} is not well-formatted.\n\nHere is the output schema:\n```", "```py\n<email>\n    \"hello i'd like to order 2 eggs. My name is James. My account number is 1234\\. My address is 1234 Bayberry Ln. Appreciate it!\"\n</email>\nInstructions:\n- Read the email and extract the information in it. \n- Respond in the format instructions given above.\nBegin!\"\"\"\n```", "```py\n{\n    \"CustomerName\": \"James\",\n    \"AccountNumber\": \"1234\",\n    \"ShippingAddress\": \"1234 Bayberry Ln\",\n    \"Items\": [\n        {\n            \"ItemName\": \"eggs\",\n            \"ItemQuantity\": 2\n        }\n    ]\n}\n```", "```py\n>>> class EmailOrder(BaseModel):\n...   CustomerName: str\n...   AccountNumber: str\n...   ShippingAddress: str\n...   Items: list[OrderItem]\n...   CompanyName: str\n...   \n>>> e = EmailOrder(CustomerName=\"James\", AccountNumber=\"1234\", ShippingAddress=\"1234 Bayberry Ln\", Items=[i])\nTraceback (most recent call last):\n  File \"<python-input-19>\", line 1, in <module>\n    e = EmailOrder(CustomerName=\"James\", AccountNumber=\"1234\", ShippingAddress=\"1234 Bayberry Ln\", Items=[i])\n  File \"/Users/jbarney/.venv/lib/python3.13/site-packages/pydantic/main.py\", line 212, in __init__\n    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)\npydantic_core._pydantic_core.ValidationError: 1 validation error for EmailOrder\nCompanyName\n  Field required [type=missing, input_value={'CustomerName': 'James',...ello', ItemQuantity=2)]}, input_type=dict]\n```", "```py\nprompt = \"\"\"Evaluate that the input object matches the expected schema: \n{input}\n{schema}\nReply with \"True\" if it does match and \"False\" if it does not match.\n\"\"\"\n```"]