["```py\nprobability_assignments = {\"Control\": 50, \"Variant 1\": 30, \"Variant 2\": 20}\n```", "```py\nimport hashlib\n\nrepresentative_customers = [\"Customer1\", \"Customer2\", \"Customer3\", \"Customer4\"]\n\ndef get_hash(customer_id):\n    hash_object = hashlib.md5(customer_id.encode())\n    return hash_object.hexdigest()\n\n{customer: get_hash(customer) for customer in representative_customers}\n\n# {'Customer1': 'becfb907888c8d48f8328dba7edf6969',\n#  'Customer2': '0b0216b290922f789dd3efd0926d898e',\n#  'Customer3': '2c988de9d49d47c78f9f1588a1f99934',\n#  'Customer4': 'b7ca9bb43a9387d6f16cd7b93a7e5fb0'}\n```", "```py\ndef get_integer_representation_of_hash(customer_id):\n    hash_value = get_hash(customer_id)\n    return int(hash_value, 16)\n\n{\n    customer: get_integer_representation_of_hash(customer)\n    for customer in representative_customers\n}\n\n# {'Customer1': 253631877491484416479881095850175195497,\n#  'Customer2': 14632352907717920893144463783570016654,\n#  'Customer3': 59278139282750535321500601860939684148,\n#  'Customer4': 244300725246749942648452631253508579248}\n```", "```py\n{\"Control\": 50, \"Variant 1\": 30, \"Variant 2\": 20}\n```", "```py\ndef divide_space_into_partitions(prob_distribution):\n    partition_ranges = []\n    start = 0\n    for partition in prob_distribution:\n        partition_ranges.append((start, start + partition))\n        start += partition\n    return partition_ranges\n\ndivide_space_into_partitions(prob_distribution=probability_assignments.values())\n\n# note that this is zero indexed, lower bound inclusive and upper bound exclusive\n# [(0, 50), (50, 80), (80, 100)]\n```", "```py\ndef assign_groups(customer_id, partitions):\n    hash_value = get_relevant_place_value(customer_id, 100)\n    for idx, (start, end) in enumerate(partitions):\n        if start <= hash_value < end:\n            return idx\n    return None\n\npartitions = divide_space_into_partitions(\n    prob_distribution=probability_assignments.values()\n)\n\ngroups = {\n    customer: list(probability_assignments.keys())[assign_groups(customer, partitions)]\n    for customer in representative_customers\n}\n\n# output\n# {'Customer1': 'Variant 2',\n#  'Customer2': 'Variant 1',\n#  'Customer3': 'Control',\n#  'Customer4': 'Control'}\n```", "```py\n# resulting proportions from a simulation on 1 million customers.\n{'Variant 1': 0.299799, 'Variant 2': 0.199512, 'Control': 0.500689\n```", "```py\nsalt_id = \"f7d1b7e4-3f1d-4b7b-8f3d-3f1d4b7b8f3d\"\ncustomer_with_salt_id = [\n    f\"{customer}{salt_id}\" for customer in representative_customers\n]\n\n# ['Customer1f7d1b7e4-3f1d-4b7b-8f3d-3f1d4b7b8f3d',\n#  'Customer2f7d1b7e4-3f1d-4b7b-8f3d-3f1d4b7b8f3d',\n#  'Customer3f7d1b7e4-3f1d-4b7b-8f3d-3f1d4b7b8f3d',\n#  'Customer4f7d1b7e4-3f1d-4b7b-8f3d-3f1d4b7b8f3d']\n```", "```py\ndef get_relevant_place_value(customer_id, place_value):\n    hash_value = get_integer_representation_of_hash(customer_id)\n    return hash_value % place_value\n```"]