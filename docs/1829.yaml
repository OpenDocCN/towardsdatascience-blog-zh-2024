- en: 'How to Create an LLM-Powered app to Convert Text to Presentation Slides: GenSlide
    — A Step-by-step Guide'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-use-llms-to-create-presentation-slides-genslide-a-step-by-step-guide-31f7588ffb5e?source=collection_archive---------1-----------------------#2024-07-29](https://towardsdatascience.com/how-to-use-llms-to-create-presentation-slides-genslide-a-step-by-step-guide-31f7588ffb5e?source=collection_archive---------1-----------------------#2024-07-29)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mehdi.mka?source=post_page---byline--31f7588ffb5e--------------------------------)[![Mehdi
    Mohammadi](../Images/4fba46a01526ee9a58f35d6162becdd3.png)](https://medium.com/@mehdi.mka?source=post_page---byline--31f7588ffb5e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--31f7588ffb5e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--31f7588ffb5e--------------------------------)
    [Mehdi Mohammadi](https://medium.com/@mehdi.mka?source=post_page---byline--31f7588ffb5e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--31f7588ffb5e--------------------------------)
    ·8 min read·Jul 29, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/836f3d41c515d3dd6e133fd5c8e8d41a.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Mitchell Luo](https://unsplash.com/@mitchel3uo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'In this post, I am going to share how you can create a simple yet powerful
    application that uses LLMs to convert your written content into concise PowerPoint
    slides. The good part: You even run your own LLM service, so'
  prefs: []
  type: TYPE_NORMAL
- en: you keep your data private, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: no cost to call LLM APIs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Reaching the power of GenSlide is straightforward. Follow these steps to set
    up and run this tool on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Create project folder'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Begin by creating the project folder in your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After completing all the steps, the final file structure would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first file we create contains packages list. Create a file named `requirements.txt`.
    Add the following package dependencies to the file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Specifically, we’re leveraging the `gpt4all` package to run a large language
    model (LLM) server on a local machine. To dive deeper into `gpt4all`, refer to
    their [**official documentation**](https://docs.gpt4all.io/).
  prefs: []
  type: TYPE_NORMAL
- en: We also use `[streamlit](https://streamlit.io/)` package to create the user
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Setting Up the Environment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, create a virtual environment and install the necessary packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '*Note:* Ensure that you are using a Python version other than `3.9.7`, as `streamlit`
    is incompatible with that version. For this tutorial I used Python version `3.12`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Implement LLM Service'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our LLM service should be able to receive a text as input and generate a summary
    of the key points of the text as output. It should organize the output in a list
    of JSON objects. We’ll specify these details in the prompt definition. Let’s first
    create a folder for LLM service.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We arrange the implementation into two **.py** files in this folder.
  prefs: []
  type: TYPE_NORMAL
- en: '**consts.py**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here we need to define the name of LLM model we want to use. You can see the
    list of models that can be used here: [https://docs.gpt4all.io/gpt4all_python/home.html#load-llm](https://docs.gpt4all.io/gpt4all_python/home.html#load-llm).
    Meta’s Llama model performs good for this task.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We also define the prompt message here that includes the instructions to the
    LLM as well as some examples of the desired output. We ask the output to be in
    JSON format, so it would be easier for us to process and create a presentation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 2\. **gpt.py**
  prefs: []
  type: TYPE_NORMAL
- en: Here we want to create a Flask application that receives HTTP POST requests
    from the clients and call the LLM model to extract the summary in a JSON representation.
  prefs: []
  type: TYPE_NORMAL
- en: First things first; import dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Define the host IP, port, Flask app and allow Cross-Origin Resource Sharing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Define a base folder to store the LLM model. Here with *“MODEL_PATH”* environment
    variable we overwrite the default location of models set by gpt4all. Now the models
    will be stored in the project folder under *“gpt_models/gpt4all/”*. When GPT4All
    class is instantiated for the first time, it will look for the *model_name* in
    the *model_path* (it’s argument), if not found, will look into *MODEL_PATH*. If
    not found, it will start to download the model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Define a function to call the *generate()* function of the LLM model and return
    the response. We may set optional parameters such as *temperature* and *max_tokens*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Define a POST API to receive clients’ requests. Requests come in the form of
    JSON objects *{“content”:”…”}*. We will use this *“content”* value and call the
    *generate_text()* method defined above. If everything goes well, we send the output
    along with an 200 HTTP (OK) status code. Otherwise an “Error” message and status
    code 500 is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Run the Flask app.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 4: Implement front end'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Frontend is where we get the user’s input and interact with the LLM service
    and finally create the PowerPoint slides.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the project folder, create a folder named frontend.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The implementation falls into 4 Python files.
  prefs: []
  type: TYPE_NORMAL
- en: '**llm_call.py**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This would be where we send the POST requests to the LLM server. We set our
    LLM server on *localhost* port *8081*. We enclose the input text into a JSON object
    with the key *“content”*. The output of the call should be a JSON string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 2\. **slide_deck.py**
  prefs: []
  type: TYPE_NORMAL
- en: Here we use `pptx` package to create PowerPoint slides. The list of JSON objects
    contains the information to add slides to the presentation. For detailed information
    about `pptx` package refer to their [documentation](https://python-pptx.readthedocs.io/en/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 3\. **slide_gen.py**
  prefs: []
  type: TYPE_NORMAL
- en: Let’s break it into smaller snippets.
  prefs: []
  type: TYPE_NORMAL
- en: Here, after importing necessary packages, create a folder to store the generated
    *.pptx* files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Then define these two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: A method to invoke `chat_completion_request` and send the request to the LLM
    and parse the JSON string,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A method that gets the output of previous method and instantiate a `SlideDeck`
    to fill in the PowerPoint slides.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 4. **ui.py**
  prefs: []
  type: TYPE_NORMAL
- en: We create a simple UI with an input text box. User can type in or copy/paste
    their text there and hit enter to start the slide generation. Upon completion
    of slide generation, a message is printed at the end of input text box. `streamlit`
    is very handy here.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 5: Running the LLM Service'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to the `llm-service` folder and run the `gpt.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '*Note:* The first time you run this, the LLM model will be downloaded, which
    may take several minutes to complete.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 6: Launching the User Interface (UI)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, it’s time to bring up the UI. Navigate to the `frontend` folder and run
    the `ui.py` file using Streamlit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This command will launch the UI in your default web browser.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Your PowerPoint Presentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the UI up and running, follow these simple steps to generate your presentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Input Text:** In the provided text box, input the content you’d like
    to transform into a presentation. Here is the sample you may use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Generate Slides:** Once you enter the text (followed by Command ⌘ + Enter
    keys in Mac), GenSlide will process it and create the presentation `.pptx`file.'
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Access Your Slides:** The newly created PowerPoint file will be saved
    in the`frontend/generated`folder.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8127336761624ea0134f3a49a73d7af9.png)'
  prefs: []
  type: TYPE_IMG
- en: User Interface to enter the text
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9c3f1660e47c791da5305a77dc0ad38f.png)'
  prefs: []
  type: TYPE_IMG
- en: Generated PowerPoint slides
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! The ability to automate slide generation is not just a technical
    achievement; it’s a time-saving marvel for professionals and students alike. For
    the next steps, the application can be extended to read the text from other formats
    like PDF files, MS Word documents, web pages and more. I would be happy to hear
    how you use or extend this project.
  prefs: []
  type: TYPE_NORMAL
- en: For further enhancement and contributions, feel free to explore the repository
    on [GitHub](https://github.com/mehdimo/GenSlide). You can checkout the tutorial
    video as well.
  prefs: []
  type: TYPE_NORMAL
