- en: 'How to Create an LLM-Powered app to Convert Text to Presentation Slides: GenSlide
    — A Step-by-step Guide'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创建一个LLM驱动的应用程序，将文本转换为演示文稿幻灯片：GenSlide——一步一步的指南
- en: 原文：[https://towardsdatascience.com/how-to-use-llms-to-create-presentation-slides-genslide-a-step-by-step-guide-31f7588ffb5e?source=collection_archive---------1-----------------------#2024-07-29](https://towardsdatascience.com/how-to-use-llms-to-create-presentation-slides-genslide-a-step-by-step-guide-31f7588ffb5e?source=collection_archive---------1-----------------------#2024-07-29)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-use-llms-to-create-presentation-slides-genslide-a-step-by-step-guide-31f7588ffb5e?source=collection_archive---------1-----------------------#2024-07-29](https://towardsdatascience.com/how-to-use-llms-to-create-presentation-slides-genslide-a-step-by-step-guide-31f7588ffb5e?source=collection_archive---------1-----------------------#2024-07-29)
- en: '[](https://medium.com/@mehdi.mka?source=post_page---byline--31f7588ffb5e--------------------------------)[![Mehdi
    Mohammadi](../Images/4fba46a01526ee9a58f35d6162becdd3.png)](https://medium.com/@mehdi.mka?source=post_page---byline--31f7588ffb5e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--31f7588ffb5e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--31f7588ffb5e--------------------------------)
    [Mehdi Mohammadi](https://medium.com/@mehdi.mka?source=post_page---byline--31f7588ffb5e--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@mehdi.mka?source=post_page---byline--31f7588ffb5e--------------------------------)[![Mehdi
    Mohammadi](../Images/4fba46a01526ee9a58f35d6162becdd3.png)](https://medium.com/@mehdi.mka?source=post_page---byline--31f7588ffb5e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--31f7588ffb5e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--31f7588ffb5e--------------------------------)
    [Mehdi Mohammadi](https://medium.com/@mehdi.mka?source=post_page---byline--31f7588ffb5e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--31f7588ffb5e--------------------------------)
    ·8 min read·Jul 29, 2024
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--31f7588ffb5e--------------------------------)
    ·阅读时间：8分钟·2024年7月29日
- en: --
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/836f3d41c515d3dd6e133fd5c8e8d41a.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/836f3d41c515d3dd6e133fd5c8e8d41a.png)'
- en: Photo by [Mitchell Luo](https://unsplash.com/@mitchel3uo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Mitchell Luo](https://unsplash.com/@mitchel3uo?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'In this post, I am going to share how you can create a simple yet powerful
    application that uses LLMs to convert your written content into concise PowerPoint
    slides. The good part: You even run your own LLM service, so'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将分享如何创建一个简单而强大的应用程序，利用LLM将你的书面内容转换为简洁的PowerPoint幻灯片。好处是：你甚至可以运行自己的LLM服务，因此
- en: you keep your data private, and
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持你的数据私密，并且
- en: no cost to call LLM APIs.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用LLM API不收费。
- en: Getting Started
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用
- en: Reaching the power of GenSlide is straightforward. Follow these steps to set
    up and run this tool on your machine.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用GenSlide的功能非常简单。只需按照以下步骤在你的计算机上设置并运行此工具。
- en: 'Step 1: Create project folder'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤1：创建项目文件夹
- en: 'Begin by creating the project folder in your local machine:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在本地计算机上创建项目文件夹：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After completing all the steps, the final file structure would look like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有步骤后，最终的文件结构应如下所示：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first file we create contains packages list. Create a file named `requirements.txt`.
    Add the following package dependencies to the file.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的第一个文件包含软件包列表。创建一个名为`requirements.txt`的文件，并将以下软件包依赖项添加到该文件中。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Specifically, we’re leveraging the `gpt4all` package to run a large language
    model (LLM) server on a local machine. To dive deeper into `gpt4all`, refer to
    their [**official documentation**](https://docs.gpt4all.io/).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们利用`gpt4all`包在本地计算机上运行大型语言模型（LLM）服务器。若要深入了解`gpt4all`，请参考他们的[**官方文档**](https://docs.gpt4all.io/)。
- en: We also use `[streamlit](https://streamlit.io/)` package to create the user
    interface.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用`[streamlit](https://streamlit.io/)`包来创建用户界面。
- en: 'Step 2: Setting Up the Environment'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤2：设置环境
- en: 'Next, create a virtual environment and install the necessary packages:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个虚拟环境并安装必要的软件包：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Note:* Ensure that you are using a Python version other than `3.9.7`, as `streamlit`
    is incompatible with that version. For this tutorial I used Python version `3.12`.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：* 请确保你使用的Python版本不是`3.9.7`，因为`streamlit`与该版本不兼容。在本教程中，我使用的是Python版本`3.12`。'
- en: 'Step 3: Implement LLM Service'
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤3：实现LLM服务
- en: Our LLM service should be able to receive a text as input and generate a summary
    of the key points of the text as output. It should organize the output in a list
    of JSON objects. We’ll specify these details in the prompt definition. Let’s first
    create a folder for LLM service.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的LLM服务应该能够接收文本作为输入，并生成文本关键点的摘要作为输出。它应该将输出组织成JSON对象列表。我们将在提示定义中指定这些细节。首先，创建一个用于LLM服务的文件夹。
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We arrange the implementation into two **.py** files in this folder.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现代码分成两个**.py**文件，存放在这个文件夹内。
- en: '**consts.py**'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**consts.py**'
- en: 'Here we need to define the name of LLM model we want to use. You can see the
    list of models that can be used here: [https://docs.gpt4all.io/gpt4all_python/home.html#load-llm](https://docs.gpt4all.io/gpt4all_python/home.html#load-llm).
    Meta’s Llama model performs good for this task.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要定义想要使用的LLM模型的名称。你可以在这里查看可用的模型列表：[https://docs.gpt4all.io/gpt4all_python/home.html#load-llm](https://docs.gpt4all.io/gpt4all_python/home.html#load-llm)。Meta的Llama模型在这个任务中表现良好。
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We also define the prompt message here that includes the instructions to the
    LLM as well as some examples of the desired output. We ask the output to be in
    JSON format, so it would be easier for us to process and create a presentation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在这里定义了提示消息，其中包含对LLM的指令以及一些期望输出的示例。我们要求输出为JSON格式，这样便于我们处理并创建演示文稿。
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 2\. **gpt.py**
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **gpt.py**
- en: Here we want to create a Flask application that receives HTTP POST requests
    from the clients and call the LLM model to extract the summary in a JSON representation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们想创建一个Flask应用，它接收来自客户端的HTTP POST请求，并调用LLM模型来提取JSON格式的摘要。
- en: First things first; import dependencies.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入依赖项。
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Define the host IP, port, Flask app and allow Cross-Origin Resource Sharing.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 定义主机IP、端口、Flask应用，并允许跨域资源共享。
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Define a base folder to store the LLM model. Here with *“MODEL_PATH”* environment
    variable we overwrite the default location of models set by gpt4all. Now the models
    will be stored in the project folder under *“gpt_models/gpt4all/”*. When GPT4All
    class is instantiated for the first time, it will look for the *model_name* in
    the *model_path* (it’s argument), if not found, will look into *MODEL_PATH*. If
    not found, it will start to download the model.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个基础文件夹来存储LLM模型。这里通过*“MODEL_PATH”*环境变量覆盖gpt4all设置的默认模型存储位置。现在，模型将存储在项目文件夹下的*“gpt_models/gpt4all/”*目录中。当首次实例化GPT4All类时，它会在*model_path*（它的参数）中查找*model_name*，如果没有找到，则会在*MODEL_PATH*中查找。如果仍然没有找到，它会开始下载该模型。
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Define a function to call the *generate()* function of the LLM model and return
    the response. We may set optional parameters such as *temperature* and *max_tokens*.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个函数来调用LLM模型的*generate()*函数并返回响应。我们可以设置一些可选参数，如*temperature*和*max_tokens*。
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Define a POST API to receive clients’ requests. Requests come in the form of
    JSON objects *{“content”:”…”}*. We will use this *“content”* value and call the
    *generate_text()* method defined above. If everything goes well, we send the output
    along with an 200 HTTP (OK) status code. Otherwise an “Error” message and status
    code 500 is returned.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个POST API来接收客户端的请求。请求以JSON对象*{“content”:”…”}*的形式传入。我们将使用这个*“content”*值并调用上面定义的*generate_text()*方法。如果一切顺利，我们将发送输出，并附带200
    HTTP（OK）状态码。否则，将返回“Error”消息和500状态码。
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Run the Flask app.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Flask应用。
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Step 4: Implement front end'
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4步：实现前端
- en: Frontend is where we get the user’s input and interact with the LLM service
    and finally create the PowerPoint slides.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前端是我们获取用户输入、与LLM服务交互并最终创建PowerPoint幻灯片的地方。
- en: Inside the project folder, create a folder named frontend.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目文件夹内，创建一个名为frontend的文件夹。
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The implementation falls into 4 Python files.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 实现分为4个Python文件。
- en: '**llm_call.py**'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**llm_call.py**'
- en: This would be where we send the POST requests to the LLM server. We set our
    LLM server on *localhost* port *8081*. We enclose the input text into a JSON object
    with the key *“content”*. The output of the call should be a JSON string.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们向LLM服务器发送POST请求的地方。我们将LLM服务器设置在*localhost*的*8081*端口。我们将输入文本封装为一个JSON对象，键名为*“content”*。调用的输出应该是一个JSON字符串。
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 2\. **slide_deck.py**
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **slide_deck.py**
- en: Here we use `pptx` package to create PowerPoint slides. The list of JSON objects
    contains the information to add slides to the presentation. For detailed information
    about `pptx` package refer to their [documentation](https://python-pptx.readthedocs.io/en/latest/).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`pptx`包来创建PowerPoint幻灯片。JSON对象列表包含添加幻灯片到演示文稿的信息。有关`pptx`包的详细信息，请参考其[文档](https://python-pptx.readthedocs.io/en/latest/)。
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 3\. **slide_gen.py**
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **slide_gen.py**
- en: Let’s break it into smaller snippets.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将它拆分成更小的片段。
- en: Here, after importing necessary packages, create a folder to store the generated
    *.pptx* files.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，在导入必要的包后，创建一个文件夹来存储生成的*.pptx*文件。
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then define these two methods:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后定义这两个方法：
- en: A method to invoke `chat_completion_request` and send the request to the LLM
    and parse the JSON string,
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种方法，用于调用`chat_completion_request`并将请求发送到LLM并解析JSON字符串，
- en: A method that gets the output of previous method and instantiate a `SlideDeck`
    to fill in the PowerPoint slides.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种方法，它获取前一个方法的输出并实例化一个`SlideDeck`来填充PowerPoint幻灯片。
- en: '[PRE17]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 4. **ui.py**
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 4. **ui.py**
- en: We create a simple UI with an input text box. User can type in or copy/paste
    their text there and hit enter to start the slide generation. Upon completion
    of slide generation, a message is printed at the end of input text box. `streamlit`
    is very handy here.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个简单的UI，带有输入框。用户可以在其中输入或复制/粘贴文本，然后按回车开始幻灯片生成。幻灯片生成完成后，输入框下方会显示一条消息。`streamlit`在这里非常方便。
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Step 5: Running the LLM Service'
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5步：运行LLM服务
- en: 'Navigate to the `llm-service` folder and run the `gpt.py` file:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到`llm-service`文件夹并运行`gpt.py`文件：
- en: '[PRE19]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Note:* The first time you run this, the LLM model will be downloaded, which
    may take several minutes to complete.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：* 第一次运行时，LLM模型将被下载，这可能需要几分钟才能完成。'
- en: 'Step 6: Launching the User Interface (UI)'
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6步：启动用户界面（UI）
- en: 'Now, it’s time to bring up the UI. Navigate to the `frontend` folder and run
    the `ui.py` file using Streamlit:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候启动UI了。导航到`frontend`文件夹并使用Streamlit运行`ui.py`文件：
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This command will launch the UI in your default web browser.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在您的默认网页浏览器中启动用户界面（UI）。
- en: Creating Your PowerPoint Presentation
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的PowerPoint演示文稿
- en: 'With the UI up and running, follow these simple steps to generate your presentation:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: UI已启动并运行后，按照以下简单步骤生成您的演示文稿：
- en: '**1\. Input Text:** In the provided text box, input the content you’d like
    to transform into a presentation. Here is the sample you may use:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 输入文本：** 在提供的文本框中，输入您想要转换成演示文稿的内容。您可以使用以下示例：'
- en: '[PRE21]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '**2\. Generate Slides:** Once you enter the text (followed by Command ⌘ + Enter
    keys in Mac), GenSlide will process it and create the presentation `.pptx`file.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 生成幻灯片：** 一旦输入文本（在Mac上按下Command ⌘ + Enter键），GenSlide将处理它并创建演示文稿`.pptx`文件。'
- en: '**3\. Access Your Slides:** The newly created PowerPoint file will be saved
    in the`frontend/generated`folder.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 获取您的幻灯片：** 新创建的PowerPoint文件将保存在`frontend/generated`文件夹中。'
- en: '![](../Images/8127336761624ea0134f3a49a73d7af9.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8127336761624ea0134f3a49a73d7af9.png)'
- en: User Interface to enter the text
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面用于输入文本
- en: '![](../Images/9c3f1660e47c791da5305a77dc0ad38f.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9c3f1660e47c791da5305a77dc0ad38f.png)'
- en: Generated PowerPoint slides
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的PowerPoint幻灯片
- en: Congratulations! The ability to automate slide generation is not just a technical
    achievement; it’s a time-saving marvel for professionals and students alike. For
    the next steps, the application can be extended to read the text from other formats
    like PDF files, MS Word documents, web pages and more. I would be happy to hear
    how you use or extend this project.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！自动生成幻灯片的能力不仅是一个技术成就；它对专业人士和学生来说都是一个节省时间的奇迹。在接下来的步骤中，应用程序可以扩展为读取来自其他格式的文本，如PDF文件、MS
    Word文档、网页等。我很高兴听到您如何使用或扩展这个项目。
- en: For further enhancement and contributions, feel free to explore the repository
    on [GitHub](https://github.com/mehdimo/GenSlide). You can checkout the tutorial
    video as well.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 若要进一步增强功能和贡献，欢迎在[GitHub](https://github.com/mehdimo/GenSlide)上浏览该代码库。您还可以查看教程视频。
