["```py\nload(\"wave1_alberta.RData\")\n\nhead(wave1_alberta, 10)\n```", "```py\nlibrary(\"dplyr\")\n\nwave1_alberta %>%\n  group_by(month) %>%\n  count(word, sort = TRUE) %>%\n  slice_head(n = 5) %>%\n  as.data.frame()\n```", "```py\nlibrary(\"tidytext\")\nlibrary(\"ggplot2\")\n\nwave1_alberta %>%\n  # Group by month\n  group_by(month) %>%\n  count(word, sort = TRUE) %>%\n  # Find the top 10 words\n  slice_head(n = 10) %>%\n  ungroup() %>%\n  # Order the words by their frequency within each month\n  mutate(word = reorder_within(word, n, month)) %>%\n  # Create a bar graph\n  ggplot(aes(x = n, y = word, fill = month)) +\n  geom_col() +\n  scale_y_reordered() +\n  facet_wrap(~ month, scales = \"free_y\") +\n  labs(x = \"Frequency\", y = NULL) +\n  theme(legend.position = \"none\",\n        axis.text.x = element_text(size = 11),\n        axis.text.y = element_text(size = 11),\n        strip.background = element_blank(),\n        strip.text = element_text(colour = \"black\", face = \"bold\", size = 13))\n```", "```py\n# Calculate TF-IDF for the words for each month\nwave1_tf_idf <- wave1_alberta %>%\n  count(month, word, sort = TRUE) %>%\n  bind_tf_idf(word, month, n) %>%\n  arrange(month, -tf_idf) %>%\n  group_by(month) %>%\n  top_n(10) %>%\n  ungroup\n\n# Visualize the results\nwave1_tf_idf %>%\n  mutate(word = reorder_within(word, tf_idf, month)) %>%\n  ggplot(aes(word, tf_idf, fill = month)) +\n  geom_col(show.legend = FALSE) + \n  facet_wrap(~ month, scales = \"free\", ncol = 2) +\n  scale_x_reordered() +\n  coord_flip() +\n  theme(strip.background = element_blank(),\n        strip.text = element_text(colour = \"black\", face = \"bold\", size = 13),\n        axis.text.x = element_text(size = 11),\n        axis.text.y = element_text(size = 11)) +\n  labs(x = NULL, y = \"TF-IDF\")\n```", "```py\nwave1_alberta %>%\n  # Save \"day\" as a separate variable\n  mutate(day = substr(date, 9, 10)) %>%\n  group_by(month, day) %>%\n  # Count the number of words\n  summarize(n = n()) %>%\n  ggplot(aes(day, n, color = month, shape = month, group = month)) +\n  geom_point(size = 2) + \n  geom_line() + \n  labs(x = \"Days\", y = \"Number of Words\") +\n  theme(legend.position = \"none\", \n        axis.text.x = element_text(angle = 90, size = 11),\n        strip.background = element_blank(),\n        strip.text = element_text(colour = \"black\", face = \"bold\", size = 11),\n        axis.text.y = element_text(size = 11)) +\n  ylim(0, 800) +\n  facet_wrap(~ month, scales = \"free_x\")\n```", "```py\n# From the three lexicons, Bing is already available in the tidytext page\n# for AFINN and NRC, install the textdata package by uncommenting the next line\n# install.packages(\"textdata\")\nget_sentiments(\"bing\")\nget_sentiments(\"afinn\") \nget_sentiments(\"nrc\")\n\n# We will need the spread function from tidyr\nlibrary(\"tidyr\")\n\n# Sentiment scores with bing (based on frequency)\nwave1_alberta %>%\n  mutate(day = substr(date, 9, 10)) %>%\n  group_by(month, day) %>%\n  inner_join(get_sentiments(\"bing\")) %>%\n  count(month, day, sentiment) %>%\n  spread(sentiment, n) %>%\n  mutate(sentiment = positive - negative) %>%\n  ggplot(aes(day, sentiment, fill = month)) +\n  geom_col(show.legend = FALSE) +\n  labs(x = \"Days\", y = \"Sentiment Score\") +\n  ylim(-50, 50) + \n  theme(legend.position = \"none\", axis.text.x = element_text(angle = 90)) +\n  facet_wrap(~ month, ncol = 2, scales = \"free_x\") +\n  theme(strip.background = element_blank(),\n        strip.text = element_text(colour = \"black\", face = \"bold\", size = 11),\n        axis.text.x = element_text(size = 11),\n        axis.text.y = element_text(size = 11))\n```", "```py\nwave1_alberta %>%\n  mutate(day = substr(date, 9, 10)) %>%\n  group_by(month, day) %>%\n  inner_join(get_sentiments(\"afinn\")) %>%\n  group_by(month, day) %>%\n  summarize(sentiment = sum(value),\n            type = ifelse(sentiment >= 0, \"positive\", \"negative\")) %>%\n  ggplot(aes(day, sentiment, fill = type)) +\n  geom_col(show.legend = FALSE) +\n  labs(x = \"Days\", y = \"Sentiment Score\") +\n  ylim(-100, 100) + \n  facet_wrap(~ month, ncol = 2, scales = \"free_x\") +\n  theme(legend.position = \"none\", \n        strip.background = element_blank(),\n        strip.text = element_text(colour = \"black\", face = \"bold\", size = 11),\n        axis.text.x = element_text(size = 11, angle = 90),\n        axis.text.y = element_text(size = 11))\n```", "```py\nwave1_alberta %>%\n  mutate(day = substr(date, 9, 10)) %>%\n  group_by(month, day) %>%\n  inner_join(get_sentiments(\"nrc\")) %>%\n  count(month, day, sentiment) %>%\n  group_by(month, sentiment) %>%\n  summarize(n_total = sum(n)) %>%\n  ggplot(aes(n_total, sentiment, fill = sentiment)) +\n  geom_col(show.legend = FALSE) +\n  labs(x = \"Frequency\", y = \"\") +\n  xlim(0, 2000) + \n  facet_wrap(~ month, ncol = 2, scales = \"free_x\") +\n  theme(strip.background = element_blank(),\n        strip.text = element_text(colour = \"black\", face = \"bold\", size = 11),\n        axis.text.x = element_text(size = 11),\n        axis.text.y = element_text(size = 11))\n```", "```py\nlibrary(\"sentimentr\")\nlibrary(\"magrittr\")\n\nload(\"wave1_alberta_sentence.RData\")\n\n# Calculate sentiment scores by day and month\nwave1_sentimentr <- wave1_alberta_sentence %>%\n  mutate(day = substr(date, 9, 10)) %>%\n  get_sentences() %$%\n  sentiment_by(text, list(month, day))\n\n# View the dataset\nhead(wave1_sentimentr, 10)\n```", "```py\nwave1_sentimentr %>%\n  group_by(month, day) %>%\n  ggplot(aes(day, ave_sentiment, fill = ave_sentiment)) +\n  scale_fill_gradient(low=\"red\", high=\"blue\") + \n  geom_col(show.legend = FALSE) +\n  labs(x = \"Days\", y = \"Sentiment Score\") +\n  ylim(-0.1, 0.3) +\n  facet_wrap(~ month, ncol = 2, scales = \"free_x\") +\n  theme(legend.position = \"none\", \n        strip.background = element_blank(),\n        strip.text = element_text(colour = \"black\", face = \"bold\", size = 11),\n        axis.text.x = element_text(size = 11, angle = 90),\n        axis.text.y = element_text(size = 11))\n```"]