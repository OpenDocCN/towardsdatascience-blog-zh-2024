["```py\n#taken from https://www.gymlibrary.dev/content/environment_creation/\n#create gym for Moore-Greitzer Model\n#action space: continuous  +/- 10.0 float , maybe make scale to mu \n#observation space:  -30,30 x2 float for x,y,zand\n#reward:  -1*(x^2+y^2+z^2)^1/2 (try to drive to 0)\n\n#Moore-Grietzer model:\n\nfrom os import path\nfrom typing import Optional\n\nimport numpy as np\nimport math\n\nimport scipy\nfrom scipy.integrate import solve_ivp\n\nimport gymnasium as gym\nfrom gymnasium import spaces\nfrom gymnasium.envs.classic_control import utils\nfrom gymnasium.error import DependencyNotInstalled\nimport dynamics  #local library containing formulas for solve_ivp\nfrom dynamics import MGM\n\nclass MGMEnv(gym.Env):\n    #no render modes\n    def __init__(self, render_mode=None, size=30):\n\n        self.observation_space =spaces.Box(low=-size+1, high=size-1, shape=(2,), dtype=float)\n\n        self.action_space = spaces.Box(-10, 10, shape=(1,), dtype=float) \n        #need to update action to normal distribution\n\n    def _get_obs(self):\n        return self.state\n\n    def reset(self, seed: Optional[int] = None, options=None):\n        #need below to seed self.np_random\n        super().reset(seed=seed)\n\n        #start random x1, x2 origin\n        np.random.seed(seed)\n        x=np.random.uniform(-8.,8.)\n        while (x>-2.5 and x<2.5):\n            np.random.seed()\n            x=np.random.uniform(-8.,8.)\n        np.random.seed(seed)\n        y=np.random.uniform(-8.,8.)\n        while (y>-2.5 and y<2.5):\n            np.random.seed()\n            y=np.random.uniform(-8.,8.)\n        self.state = np.array([x,y])\n        observation = self._get_obs()\n\n        return observation, {}\n\n    def step(self,action):\n\n        u=action.item()\n\n        result=solve_ivp(MGM, (0, 0.05), self.state, args=[u])\n\n        x1=result.y[0,-1]\n        x2=result.y[1,-1]\n        self.state=np.array([x1.item(),x2.item()])\n        done=False\n        observation=self._get_obs()\n        info=x1\n\n        reward = -math.sqrt(x1.item()**2)#+x2.item()**2)\n\n        truncated = False #placeholder for future expnasion/limits if solution diverges\n        info = x1\n\n        return observation, reward, done, truncated, {}\n```", "```py\ndef MGM(t, A, K):\n    #non-linear approximation of surge/stall dynamics of a gas turbine engine per Moore-Greitzer model from\n    #\"Output-Feedbak Cotnrol on Nonlinear systems using Control Contraction Metrics and Convex Optimization\"\n    #by Machester and Slotine\n    #2D system, x1 is mass flow, x2 is pressure increase\n    x1, x2 = A\n    if x1>20:  x1=20.\n    elif x1<-20:  x1=-20.\n    if x2>20:  x2=20.\n    elif x2<-20:  x2=-20.\n    dx1= -x2-1.5*x1**2-0.5*x1**3\n    dx2=x1+K\n    return np.array([dx1, dx2])\n```"]