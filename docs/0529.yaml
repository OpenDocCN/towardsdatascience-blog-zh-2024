- en: Working with Python Dataclasses and Dataclass Wizard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/working-with-python-dataclasses-and-dataclass-wizard-4e000b03fe5c?source=collection_archive---------1-----------------------#2024-02-26](https://towardsdatascience.com/working-with-python-dataclasses-and-dataclass-wizard-4e000b03fe5c?source=collection_archive---------1-----------------------#2024-02-26)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let’s create Python data objects in a few lines of code!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@jodhernandezbemj?source=post_page---byline--4e000b03fe5c--------------------------------)[![Jose
    D. Hernandez-Betancur](../Images/fc2be8064501a06c2e363f6fb7d93be7.png)](https://medium.com/@jodhernandezbemj?source=post_page---byline--4e000b03fe5c--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--4e000b03fe5c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--4e000b03fe5c--------------------------------)
    [Jose D. Hernandez-Betancur](https://medium.com/@jodhernandezbemj?source=post_page---byline--4e000b03fe5c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--4e000b03fe5c--------------------------------)
    ·10 min read·Feb 26, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cf81445a041a00083618f5b388c6ab93.png)'
  prefs: []
  type: TYPE_IMG
- en: Image generated by the author using Gencraft.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re a Python coder, you’re probably familiar with Zen. Three of its 19
    guideline principles state that “explicit is better than implicit,” “readability
    counts,” and “simple is better than complex.” When you’re creating or integrating
    an existing Python package, you aim to find the most Pythonic way to do your task,
    both functionally and efficiently. Python’s [dataclasses](https://docs.python.org/3/library/dataclasses.html)
    library provides an attractive approach to quickly and easily creating objects.
    This package includes a suite of tools that help speed up and make your code legible,
    whether you’re working on a data science or software development project. However,
    given that there is no magic wand without a wizard, the [dataclass wizard](https://dataclass-wizard.readthedocs.io/en/latest/overview.html)
    package provides *dataclasses* with additional powers that can enhance your code
    in a Pythonic style. In this post, we will dive into these two packages to take
    our work to the next level.
  prefs: []
  type: TYPE_NORMAL
- en: Dataclasses Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use *dataclasses*, we import and apply the `@dataclass` decorator. This decorator
    enables us to specify if the instance should be frozen (`frozen=True`), initialized
    (`init=True`), or slotted (`slots=True`). Moreover, although the `field` object
    is not required for creating *dataclasses* objects, we can use it to…
  prefs: []
  type: TYPE_NORMAL
