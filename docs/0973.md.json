["```py\nfrom langchain_community.document_loaders.csv_loader import CSVLoader\nfrom datetime import datetime, timedelta\n\ndocuments = []\n\nfor i in range(1, 4):\n  loader = CSVLoader(\n    encoding=\"utf8\",\n    file_path=f\"data/john_wick_{i}.csv\",\n    metadata_columns=[\"Review_Date\", \"Review_Title\", \"Review_Url\", \"Author\", \"Rating\"]\n  )\n\n  movie_docs = loader.load()\n  for doc in movie_docs:\n\n    # We add metadate about the number of the movi\n    doc.metadata[\"Movie_Title\"] = f\"John Wick {i}\"\n\n    # convert \"Rating\" to an `int`, if no rating is provided - None\n    doc.metadata[\"Rating\"] = int(doc.metadata[\"Rating\"]) if doc.metadata[\"Rating\"] else 5\n\n  documents.extend(movie_docs)\n```", "```py\nprint(documents[0])\n\nDocument(page_content=\": 0\\nReview: The best way I can describe John Wick is to picture Taken but instead of Liam Neeson it's Keanu Reeves and instead of his daughter it's his dog. That's essentially the plot of the movie. John Wick (Reeves) is out to seek revenge on the people who took something he loved from him. It's a beautifully simple premise for an action movie - when action movies get convoluted, they get bad i.e. A Good Day to Die Hard. John Wick gives the viewers what they want: Awesome action, stylish stunts, kinetic chaos, and a relatable hero to tie it all together. John Wick succeeds in its simplicity.\", metadata={'source': 'data/john_wick_1.csv', 'row': 0, 'Review_Date': '6 May 2015', 'Review_Title': ' Kinetic, concise, and stylish; John Wick kicks ass.\\n', 'Review_Url': '/review/rw3233896/?ref_=tt_urv', 'Author': 'lnvicta', 'Rating': 8, 'Movie_Title': 'John Wick 1', 'last_accessed_at': datetime.datetime(2024, 4, 8, 11, 49, 47, 92560)})\n```", "```py\nfrom langchain_community.vectorstores import Chroma\nfrom langchain_openai import OpenAIEmbeddings\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\nos.environ[\"OPENAI_API_KEY\"] = os.getenv('OPENAI_KEY')\n\nembeddings = OpenAIEmbeddings(model=\"text-embedding-3-small\")\n\ndb = Chroma.from_documents(documents=documents, embedding=embeddings, collection_name=\"doc_jonhWick\", persist_directory=\"./jonhWick_db\")\n```", "```py\nfrom langchain_community.vectorstores import Chroma\nfrom langchain_openai import OpenAIEmbeddings\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\nos.environ[\"OPENAI_API_KEY\"] = os.getenv('OPENAI_KEY')\n\nembeddings = OpenAIEmbeddings(model=\"text-embedding-3-small\")\n\nvectordb= Chroma(persist_directory=\"./jonhWick_db\", \n                  embedding_function=embeddings, \n                  collection_name=\"doc_jonhWick\")pyth\n```", "```py\n# Specifying top k\nnaive_retriever = vectordb.as_retriever(search_kwargs={ \"k\" : 10})\n\n# Similarity score threshold retrieval\n# naive_retriever = db.as_retriever(search_kwargs={\"score_threshold\": 0.8}, search_type=\"similarity_score_threshold\")\n\n# Maximum marginal relevance retrieval\n# naive_retriever = db.as_retriever(search_type=\"mmr\")\n```", "```py\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_openai import ChatOpenAI\n\n# Augmented\nTEMPLATE = \"\"\"\\\nYou are happy assistant. Use the context provided below to answer the question.\n\nIf you do not know the answer, or are unsure, say you don't know.\n\nQuery:\n{question}\n\nContext:\n{context}\n\"\"\"\n\nrag_prompt = ChatPromptTemplate.from_template(TEMPLATE)\n\n# Generation\nchat_model = ChatOpenAI()\n```", "```py\nfrom langchain_core.runnables import RunnablePassthrough, RunnableParallel\nfrom operator import itemgetter\nfrom langchain_core.output_parsers import StrOutputParser\n\nsetup_and_retrieval = RunnableParallel({\"question\": RunnablePassthrough(), \"context\": naive_retriever })\noutput_parser = StrOutputParser()\n\nnaive_retrieval_chain = setup_and_retrieval \n                        | rag_prompt \n                        | chat_model \n                        | output_parser\n\nnaive_retrieval_chain.invoke( \"Did people generally like John Wick?\")\n\n# response: 'Yes, people generally liked John Wick.' \n```", "```py\nfrom langchain.retrievers import ParentDocumentRetriever\nfrom langchain.storage import InMemoryStore\nfrom langchain_text_splitters import RecursiveCharacterTextSplitter\nfrom langchain_openai import OpenAIEmbeddings\nfrom langchain_community.vectorstores import Chroma\n\n# documents = Read csv files. Check jupyter notebook for more details\n\nparent_docs = documents\n\n# Embedding Model\nembeddings = OpenAIEmbeddings(model=\"text-embedding-3-small\")\n\n# Splitters\nchild_splitter = RecursiveCharacterTextSplitter(chunk_size=200)\n# We don't need a parent splitter because the data cames from CSV file, and each row is a parent doc.\n# parent_splitter = RecursiveCharacterTextSplitter(chunk_size=800)\n\n# Stores\nstore = InMemoryStore()\nvectorstore = Chroma(embedding_function=embeddings, collection_name=\"fullDoc\", persist_directory=\"./JohnWick_db_parentsRD\")\n\nparent_document_retriever = ParentDocumentRetriever(\n    vectorstore=vectorstore,\n    docstore=store,\n    child_splitter=child_splitter,\n    # parent_splitter =parent_splitter\n)\n```", "```py\nprint(f\"Number of parent chunks  is: {len(list(store.yield_keys()))}\")\n\nprint(f\"Number of child chunks is: {len(parent_document_retriever.vectorstore.get()['ids'])}\")\n\n'''\nNumber of parent chunks  is: 75\nNumber of child chunks is: 3701\n'''\n```", "```py\nsetup_and_retrieval = RunnableParallel({\"question\": RunnablePassthrough(), \"context\": parent_document_retriever })\noutput_parser = StrOutputParser()\n\nparent_retrieval_chain = setup_and_retrieval | rag_prompt | chat_model | output_parser\n```", "```py\nfrom langchain.chains.query_constructor.base import AttributeInfo\nfrom langchain.retrievers.self_query.base import SelfQueryRetriever\nfrom langchain_openai import ChatOpenAI\nfrom langchain.retrievers.self_query.chroma import ChromaTranslator\n\nmetadata_field_info = [\n    AttributeInfo(\n        name=\"Movie_Title\",\n        description=\"The title of the movie\",\n        type=\"string\",\n    ),\n    AttributeInfo(\n        name=\"Review_Date\",\n        description=\"The date of the review\",\n        type=\"string\",\n    ),\n    AttributeInfo(\n        name=\"Review_Title\",\n        description=\"The title of the review\",\n        type=\"string\",\n    ),\n    AttributeInfo(\n        name=\"Review_Url\",\n        description=\"The URL of the review\",\n        type=\"string\",\n    ),\n    AttributeInfo(\n        name=\"Author\",\n        description=\"The author of the review\",\n        type=\"string\",\n    ),\n    AttributeInfo(\n        name=\"Rating\",\n        description=\"A 1 to 10 rating for the movie\",\n        type=\"integer\",\n    )\n]\n```", "```py\ndocument_content_desription = \"A review of the Jonh Wick movie.\"\nembeddings = OpenAIEmbeddings(model=\"text-embedding-3-small\")\nchat_model = ChatOpenAI()\n\nself_query_retriever = SelfQueryRetriever.from_llm(\n    llm=ChatOpenAI(temperature=0),\n    vectorstore =vectordb,\n    document_contents = document_content_desription,\n    metadata_field_info =metadata_field_info,\n    verbose = True,\n    structured_query_translator = ChromaTranslator()\n)\n```", "```py\nQuestion = \"Make a summary of the reviews that talk about John Wick 3 and have a score higher than 7\"\nresponse = naive_retrieval_chain.invoke(Question)\nprint(response)\n\n'''\nI don't know the answer.\n'''\n------------------------------------------------------------------------\n\nresponse = self_retrieval_chain.invoke(Question)\nprint(response)\n\n'''\nJohn Wick: Chapter 3 - Parabellum is quite literally \nabout consequences, dealing with the fallout of John's...\n'''\n```", "```py\nnaive_retriever = vectordb.as_retriever(search_kwargs={ \"k\" : 10})\n```", "```py\nfrom langchain_cohere import CohereRerank\n\nos.environ[\"COHERE_API_KEY\"] = \"YOUR API KEY FROM COHERE\"\n\ncompressor = CohereRerank(top_n=3)\n```", "```py\nfrom langchain.retrievers.contextual_compression import ContextualCompressionRetriever\n\ncompression_retriever = ContextualCompressionRetriever(\n    base_compressor=compressor, \n    base_retriever=naive_retriever\n)\n```"]