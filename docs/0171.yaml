- en: Enhancing Interaction between Language Models and Graph Databases via a Semantic
    Layer
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过语义层增强语言模型与图数据库之间的交互
- en: 原文：[https://towardsdatascience.com/enhancing-interaction-between-language-models-and-graph-databases-via-a-semantic-layer-0a78ad3eba49?source=collection_archive---------0-----------------------#2024-01-18](https://towardsdatascience.com/enhancing-interaction-between-language-models-and-graph-databases-via-a-semantic-layer-0a78ad3eba49?source=collection_archive---------0-----------------------#2024-01-18)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/enhancing-interaction-between-language-models-and-graph-databases-via-a-semantic-layer-0a78ad3eba49?source=collection_archive---------0-----------------------#2024-01-18](https://towardsdatascience.com/enhancing-interaction-between-language-models-and-graph-databases-via-a-semantic-layer-0a78ad3eba49?source=collection_archive---------0-----------------------#2024-01-18)
- en: Provide an LLM agent with a suite of robust tools it can use to interact with
    a graph database
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为LLM代理提供一套强大的工具，以便其与图数据库进行交互
- en: '[](https://bratanic-tomaz.medium.com/?source=post_page---byline--0a78ad3eba49--------------------------------)[![Tomaz
    Bratanic](../Images/d5821aa70918fcb3fc1ff0013497b3d5.png)](https://bratanic-tomaz.medium.com/?source=post_page---byline--0a78ad3eba49--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0a78ad3eba49--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0a78ad3eba49--------------------------------)
    [Tomaz Bratanic](https://bratanic-tomaz.medium.com/?source=post_page---byline--0a78ad3eba49--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://bratanic-tomaz.medium.com/?source=post_page---byline--0a78ad3eba49--------------------------------)[![Tomaz
    Bratanic](../Images/d5821aa70918fcb3fc1ff0013497b3d5.png)](https://bratanic-tomaz.medium.com/?source=post_page---byline--0a78ad3eba49--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0a78ad3eba49--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0a78ad3eba49--------------------------------)
    [Tomaz Bratanic](https://bratanic-tomaz.medium.com/?source=post_page---byline--0a78ad3eba49--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0a78ad3eba49--------------------------------)
    ·11 min read·Jan 18, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0a78ad3eba49--------------------------------)
    ·阅读时长11分钟·2024年1月18日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Knowledge graphs provide a great representation of data with flexible data schema
    that can store [structured and unstructured information](https://medium.com/neo4j/using-a-knowledge-graph-to-implement-a-devops-rag-application-b6ba24831b16).
    You can use Cypher statements to retrieve information from a graph database like
    Neo4j. One option is to use LLMs to generate Cypher statements. While that option
    provides excellent flexibility, the truth is that base LLMs are still brittle
    at consistently generating precise Cypher statements. Therefore, we need to look
    for an alternative to guarantee consistency and robustness. What if, instead of
    developing Cypher statements, the LLM extracts parameters from user input and
    uses predefined functions or Cypher templates based on the user intent? In short,
    you could provide the LLM with a set of predefined tools and instructions on when
    and how to use them based on the user input, which is also known as the semantic
    layer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱通过灵活的数据模式提供了对数据的出色表示，能够存储[结构化和非结构化信息](https://medium.com/neo4j/using-a-knowledge-graph-to-implement-a-devops-rag-application-b6ba24831b16)。你可以使用Cypher语句从图数据库（如Neo4j）中检索信息。一种选择是使用大型语言模型（LLMs）生成Cypher语句。虽然这种方式提供了极大的灵活性，但事实是，基础LLMs在始终如一地生成精确的Cypher语句方面仍然不够稳定。因此，我们需要寻找一种替代方案，以确保一致性和稳健性。那么，如果LLM从用户输入中提取参数，而不是直接开发Cypher语句，并根据用户意图使用预定义的函数或Cypher模板呢？简而言之，你可以为LLM提供一套预定义的工具和使用指令，指示何时以及如何基于用户输入使用它们，这也被称为语义层。
- en: '![](../Images/aeeb64a2a96d1a41bf353ad6817a5d4e.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aeeb64a2a96d1a41bf353ad6817a5d4e.png)'
- en: Semantic layer is an intermediate step that provides additional accuracy and
    robust way of LLMs interacting with a Knowledge graph. Image by the author. Inspired
    by [this image](https://cube.dev/blog/semantic-layer-the-backbone-of-ai-powered-data-experiences).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 语义层是一个中间步骤，提供了一种更精确、更稳健的方式，使LLMs与知识图谱进行交互。图片来自作者。灵感来源于[这张图片](https://cube.dev/blog/semantic-layer-the-backbone-of-ai-powered-data-experiences)。
- en: A semantic layer consists of various tools exposed to an LLM that it can use
    to interact with a knowledge graph. They can be of various complexity. You can
    think of each tool in a semantic layer as a function. For example, take a look
    at the following function.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 语义层由多个暴露给大语言模型的工具组成，它可以用来与知识图谱进行互动。这些工具的复杂性各异。你可以将语义层中的每个工具看作一个函数。例如，看看以下这个函数。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The tools can have multiple input parameters, like in the above example, which
    allows you to implement complex tools. Additionally, the workflow can consist
    of more than a database query, allowing you to handle any edge cases or exceptions
    as you see fit. The advantage is that you turn prompt engineering problems, which
    might work most of the time, into code engineering problems, which work every
    time exactly as scripted.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具可以有多个输入参数，正如上面的例子所示，这使你能够实现复杂的工具。此外，工作流不仅仅可以由数据库查询组成，还允许你处理任何边缘情况或异常，具体取决于你的需求。其优势在于，你将可能大部分时间有效的提示工程问题，转化为每次都能精确执行的代码工程问题。
- en: Movie agent
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电影代理
- en: In this blog post, we will demonstrate how to implement a semantic layer that
    allows an LLM agent to interact with a knowledge graph that contains information
    about actors, movies, and their ratings.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客文章中，我们将展示如何实现一个语义层，使大语言模型代理能够与包含演员、电影及其评分信息的知识图谱进行互动。
- en: '![](../Images/e04d930fdbbd3e70efc04a3060abfcff.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e04d930fdbbd3e70efc04a3060abfcff.png)'
- en: Movie agent architecture. Image by the author.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 电影代理架构。图像由作者提供。
- en: 'Taken from the documentation (also written by me):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 取自文档（同样由我编写）：
- en: The agent utilizes several tools to interact with the Neo4j graph database effectively.
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 代理利用多种工具有效地与Neo4j图数据库进行交互。
- en: ''
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*** Information tool**: Retrieves data about movies or individuals, ensuring
    the agent has access to the latest and most relevant information.'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*** 信息工具**：检索有关电影或个人的数据，确保代理能够访问最新和最相关的信息。'
- en: ''
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*** Recommendation Tool**: Provides movie recommendations based upon user preferences
    and input.'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*** 推荐工具**：根据用户的偏好和输入提供电影推荐。'
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*** Memory Tool**: Stores information about user preferences in the knowledge
    graph, allowing for a personalized experience over multiple interactions.'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*** 内存工具**：在知识图谱中存储有关用户偏好的信息，从而在多次互动中提供个性化体验。'
- en: An agent can use information or recommendation tools to retrieve information
    from the database or use the memory tool to store user preferences in the database.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 代理可以使用信息或推荐工具从数据库中检索信息，或使用内存工具将用户偏好存储到数据库中。
- en: Predefined functions and tools empower the agent to orchestrate intricate user
    experiences, guiding individuals towards specific goals or delivering tailored
    information that aligns with their current position within the user journey.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 预定义的函数和工具使得代理能够编排复杂的用户体验，引导用户朝着特定目标前进，或提供与其当前用户旅程位置相关的定制信息。
- en: This predefined approach enhances the robustness of the system by reducing the
    artistic freedom of an LLM, ensuring that responses are more structured and aligned
    with predetermined user flows, thereby improving the overall user experience.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这种预定义方法通过减少大语言模型的艺术自由度，从而增强了系统的稳健性，确保回应更加结构化，并与预定的用户流程对齐，从而改善了整体的用户体验。
- en: The semantic layer backend of a movie agent is implemented and available as
    a [LangChain template](https://github.com/langchain-ai/langchain/tree/master/templates/neo4j-semantic-layer).
    I have used this template to build a simple streamlit chat application.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 电影代理的语义层后端已经实现，并作为一个[LangChain模板](https://github.com/langchain-ai/langchain/tree/master/templates/neo4j-semantic-layer)可用。我使用了这个模板构建了一个简单的Streamlit聊天应用程序。
- en: '![](../Images/8e94a84617ebaa1796729ef1cae7a77d.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8e94a84617ebaa1796729ef1cae7a77d.png)'
- en: Streamlit chat interface. Image by the author.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit聊天界面。图像由作者提供。
- en: 'Code is available on [GitHub](https://github.com/tomasonjo/llm-movieagent).
    You can start the project by defining environment variables and executing the
    following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可在[GitHub](https://github.com/tomasonjo/llm-movieagent)上获取。你可以通过定义环境变量并执行以下命令来启动项目：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Graph model
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图模型
- en: The graph is based on the [MovieLens](https://grouplens.org/datasets/movielens/)
    dataset. It contains information about actors, movies, and 100k user ratings of
    movies.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 该图基于[MovieLens](https://grouplens.org/datasets/movielens/)数据集。它包含有关演员、电影和10万条电影评分的信息。
- en: '![](../Images/1498878706b68d43ef3619c7bbbec6a1.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1498878706b68d43ef3619c7bbbec6a1.png)'
- en: Graph schema. Image by the author.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图谱架构。图像由作者提供。
- en: The visualization depicts a knowledge graph of individuals who have either acted
    in or directed a movie, which is further categorized by genre. Each movie node
    holds information about its release date, title, and IMDb rating. The graph also
    contains user ratings, which we can use to provide recommendations.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 该可视化图展示了一个知识图谱，包含那些参与过电影表演或导演的个人，并且按类型进行了进一步分类。每个电影节点包含其发布日期、标题和 IMDb 评分信息。图谱中还包含用户评分，我们可以利用这些评分提供推荐。
- en: You can populate the graph by executing the `ingest.py` script, which is located
    in the root directory of the folder.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过执行位于文件夹根目录的 `ingest.py` 脚本来填充图谱。
- en: Defining tools
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义工具
- en: 'Now, we will define the tools an agent can use to interact with the knowledge
    graph. We will start with the **information tool**. Information tool is designed
    to fetch relevant information about actors, directors, and movies. The Python
    code looks the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将定义代理可以用来与知识图谱互动的工具。我们从**信息工具**开始。信息工具的设计目的是获取有关演员、导演和电影的相关信息。Python 代码如下所示：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The function starts by finding relevant people or movies mentioned using a full-text
    index. The [full-text index in Neo4j](https://neo4j.com/docs/cypher-manual/current/indexes-for-full-text-search/)
    uses Lucene under the hood. It enables a seamless implementation of text distance-based
    lookups, which allow the user to misspell some words and still get results. If
    no relevant entities are found, we can directly return a response. On the other
    hand, if multiple candidates are identified, we can guide the agent to ask the
    user a follow-up question and be more specific about the movie or person they
    are interested in. Imagine that a user asks, “Who is John?”.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 函数首先通过全文索引查找提到的相关人物或电影。[Neo4j 中的全文索引](https://neo4j.com/docs/cypher-manual/current/indexes-for-full-text-search/)底层使用
    Lucene。它支持无缝实现基于文本距离的查找，允许用户拼写错误的词语也能获取到结果。如果没有找到相关实体，我们可以直接返回响应。另一方面，如果识别出多个候选项，我们可以引导代理向用户询问后续问题，并让他们对感兴趣的电影或人物给出更具体的信息。假设用户问：“约翰是谁？”。
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this case, the tool informs the agent that it needs additional information.
    With simple prompt engineering, we can steer the agent to ask the user a follow-up
    question. Suppose the user is specific enough, which allows the tool to identify
    a particular movie or a person. In that case, we use a parametrized Cypher statement
    to retrieve relevant information.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，工具通知代理需要额外的信息。通过简单的提示工程，我们可以引导代理询问用户后续问题。假设用户提供了足够具体的信息，这样工具就能识别特定的电影或人物。在这种情况下，我们使用带参数的
    Cypher 语句来检索相关信息。
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With this information, the agent can answer most of the questions that concern
    Keanu Reeves.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些信息，代理可以回答大多数关于基努·里维斯的问题。
- en: Now, let’s guide the agent on utilizing this tool effectively. Fortunately,
    with LangChain, the process is straightforward and efficient. First, we define
    the input parameters of the function using a Pydantic object.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们引导代理有效地使用这个工具。幸运的是，借助 LangChain，这一过程既简单又高效。首先，我们使用 Pydantic 对象定义函数的输入参数。
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, we describe that both entity and entity_type parameters are strings. The
    entity parameter input is defined as the movie or a person mentioned in the question.
    On the other hand, with the entity_type, we also provide available options. When
    dealing with low cardinalities, meaning when there is a small number of distinct
    values, we can provide available options directly to an LLM so that it can use
    valid inputs. As we saw before, we use a full-text index to disambiguate movies
    or people as there are too many values to provide directly in the prompt.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们说明了 entity 和 entity_type 参数都是字符串类型。entity 参数输入被定义为问题中提到的电影或人物。而对于 entity_type，我们也提供了可选项。在处理低基数（即有少量不同值）的情况时，我们可以直接向
    LLM 提供可选项，让它使用有效的输入。正如我们之前看到的，我们使用全文索引来消除电影或人物的歧义，因为有太多值不能直接在提示中提供。
- en: Now let’s put it all together in a Information tool definition.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将这一切汇总到信息工具定义中。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Accurate and concise tool definitions are an important part of a semantic layer,
    so that an agent can correctly pick relevant tools when needed.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 准确简洁的工具定义是语义层的重要组成部分，以便代理在需要时能够正确选择相关工具。
- en: The recommendation tool is slightly more complex.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐工具稍微复杂一些。
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The first thing to notice is that both input parameters are optional. Therefore,
    we need to introduce workflows that handle all the possible combinations of input
    parameters and the lack of them. To produce personalized recommendations, we first
    get a `user_id` , which is then passed into downstream Cypher recommendation statements.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先需要注意的是，这两个输入参数都是可选的。因此，我们需要引入处理所有可能输入参数组合和缺失情况的工作流。为了生成个性化推荐，我们首先获取`user_id`，然后将其传递到下游的Cypher推荐语句中。
- en: Similarly as before, we need to present the input of the function to the agent.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前一样，我们需要向代理呈现函数的输入。
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Since only 20 available genres exist, we provide their values as part of the
    prompt. For movie disambiguation, we again use a full-text index within the function.
    As before, we finish with the tool definition to inform the LLM when to use it.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于只有20种可用的电影类型，我们将它们的值作为提示的一部分提供。为了避免电影歧义，我们再次在函数内部使用全文索引。像之前一样，我们以工具定义结束，以通知LLM何时使用它。
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So far, we have defined two tools to retrieve data from the database. However,
    the information flow doesn’t have to be one-way. For example, when a user informs
    the agent they have already watched a movie and maybe liked it, we can store that
    information in the database and use it in further recommendations. Here is where
    the memory tool comes in handy.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经定义了两个工具来从数据库中检索数据。然而，信息流不必是单向的。例如，当用户告诉代理他们已经看过某部电影并且可能喜欢它时，我们可以将该信息存储在数据库中，并在未来的推荐中使用它。此时，记忆工具将非常有用。
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The memory tool has two mandatory input parameters that define the movie and
    its rating. It’s a straightforward tool. One thing I should mention is that I
    noticed in my testing that it probably makes sense to provide examples of when
    to give a specific rating, as the LLM isn’t the best at it out of the box.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 记忆工具有两个强制性的输入参数，用于定义电影及其评分。这是一个简单的工具。我需要提到的一点是，在我的测试中，我注意到可能需要提供何时给出特定评分的示例，因为LLM开箱即用时并不是最擅长这方面的处理。
- en: Agent
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代理
- en: Let’s put it now all together using [LangChain expression language](https://python.langchain.com/docs/expression_language/)
    (LCEL) to define an agent.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过使用[LangChain表达式语言](https://python.langchain.com/docs/expression_language/)（LCEL）来定义一个代理，把所有内容整合在一起。
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: LangChain expression language makes it very convenient to define an agent and
    expose all its functionalities. We won’t go into LCEL syntax as that is beyond
    the scope of this blog post.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain表达式语言使得定义代理并暴露其所有功能变得非常方便。我们不会深入探讨LCEL语法，因为那超出了本博客的范围。
- en: The movie agent backend is exposed as an API endpoint using [LangServe](https://www.langchain.com/langserve).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 电影代理后台作为API端点通过[LangServe](https://www.langchain.com/langserve)暴露。
- en: Streamlit chat application
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Streamlit聊天应用
- en: Now we just have to implement a streamlit application that connects to the LangServe
    API endpoint and we are good to go. We’ll just look at the async function that
    is used to retrieve an agent response.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只需要实现一个Streamlit应用，它连接到LangServe API端点，就可以开始使用了。我们将看看用于检索代理响应的异步函数。
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The function `get_agent_response` is designed to interact with a movie-agent
    API. It sends a request with the user's input and chat history to the API and
    then processes the response asynchronously. The function handles different types
    of responses, updating the stream handler with new statuses and appending the
    generated text to the session state, which allows us to stream results to the
    user.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`get_agent_response`旨在与电影代理API进行交互。它向API发送包含用户输入和聊天历史的请求，然后异步处理API的响应。该函数处理不同类型的响应，更新流处理器的新状态，并将生成的文本附加到会话状态中，从而使我们能够将结果流式传输给用户。
- en: Let’s now test it out
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们进行测试。
- en: '![](../Images/bce1fd1386d8ea222ccafa7738aa6b16.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bce1fd1386d8ea222ccafa7738aa6b16.png)'
- en: Movie agent in action. Image by the author.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 电影代理在运行中。图像由作者提供。
- en: The resulting movie agent offers a surprisingly good and guided interaction
    with the user.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示，电影代理提供了与用户出乎意料的良好和引导式互动。
- en: Conclusion
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: In conclusion, the integration of a semantic layer in language model interactions
    with graph databases, as exemplified by our Movie Agent, represents a significant
    leap forward in enhancing user experience and data interaction efficiency. By
    shifting the focus from generating arbitrary Cypher statements to utilizing a
    structured, predefined suite of tools and functions, the semantic layer brings
    a new level of precision and consistency to language model engagements. This approach
    not only streamlines the process of extracting relevant information from knowledge
    graphs but also ensures a more goal-oriented, user-centric experience.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，在语言模型与图数据库交互中引入语义层，如我们在电影代理（Movie Agent）中所示，代表了提升用户体验和数据交互效率的一次重大飞跃。通过将重点从生成任意的Cypher语句转移到利用结构化、预定义的工具和功能套件，语义层为语言模型的交互带来了一个新的精确性和一致性水平。这种方法不仅简化了从知识图谱中提取相关信息的过程，还确保了一个更具目标导向和用户中心的体验。
- en: The semantic layer acts as a bridge, translating user intent into specific,
    actionable queries that the language model can execute with accuracy and reliability.
    As a result, users benefit from a system that not only understands their queries
    more effectively but also guides them towards their desired outcomes with greater
    ease and less ambiguity. Furthermore, by constraining the language model’s responses
    within the parameters of these predefined tools, we mitigate the risks of incorrect
    or irrelevant outputs, thereby enhancing the trustworthiness and reliability of
    the system.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 语义层充当着桥梁的角色，将用户意图转换为具体、可执行的查询，语言模型能够准确可靠地执行这些查询。因此，用户受益于一个不仅能够更有效理解他们查询的系统，而且还能更轻松、减少歧义地引导他们朝着预期的结果前进。此外，通过将语言模型的响应限制在这些预定义工具的范围内，我们降低了错误或无关输出的风险，从而增强了系统的可信度和可靠性。
- en: The code is available on [GitHub](https://github.com/tomasonjo/llm-movieagent).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 代码可在[GitHub](https://github.com/tomasonjo/llm-movieagent)上找到。
- en: Dataset
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据集
- en: 'F. Maxwell Harper and Joseph A. Konstan. 2015\. The MovieLens Datasets: History
    and Context. ACM Transactions on Interactive Intelligent Systems (TiiS) 5, 4:
    19:1–19:19\. [https://doi.org/10.1145/2827872](https://doi.org/10.1145/2827872)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 'F. Maxwell Harper 和 Joseph A. Konstan. 2015. 《MovieLens数据集：历史与背景》。ACM交互智能系统交易（TiiS）5,
    4: 19:1–19:19. [https://doi.org/10.1145/2827872](https://doi.org/10.1145/2827872)'
