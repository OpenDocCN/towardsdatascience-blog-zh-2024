- en: Data Visualization Generation Using Large Language and Image Generation Models
    with LIDA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/data-visualization-generation-using-large-language-and-image-generation-models-with-lida-69fcf95866ee?source=collection_archive---------1-----------------------#2024-06-25](https://towardsdatascience.com/data-visualization-generation-using-large-language-and-image-generation-models-with-lida-69fcf95866ee?source=collection_archive---------1-----------------------#2024-06-25)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An overview of the LIDA library, including how to get started, examples, and
    considerations going forward
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@payal-patel?source=post_page---byline--69fcf95866ee--------------------------------)[![Payal
    Patel](../Images/2fc555726b3865db375ce7973f4c1cec.png)](https://medium.com/@payal-patel?source=post_page---byline--69fcf95866ee--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--69fcf95866ee--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--69fcf95866ee--------------------------------)
    [Payal Patel](https://medium.com/@payal-patel?source=post_page---byline--69fcf95866ee--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--69fcf95866ee--------------------------------)
    ·12 min read·Jun 25, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Recently I came across [LIDA](https://microsoft.github.io/lida/) — a grammar-agnostic
    library designed to automatically generate data visualizations and infographics
    using large language models (LLMs) and Image Generation Models (IGMs). LIDA works
    with various large language model providers, such as OpenAI and Hugging Face.
    In this post, I’ll provide a high-level overview of the library, show you how
    to get started, highlight a few examples, and share some thoughts and considerations
    on the use of LLMs and IGMsin the data visualization and business intelligence
    (BI) field.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d826a62854c7a0146b0b8618ca5a7847.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Photo](https://unsplash.com/photos/a-group-of-colorful-objects-2yClsTFXIcE)
    by [and_machines](https://unsplash.com/@and_machines) on [Unsplash](https://unsplash.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Overview¹
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating data visualizations is often a complex task — one that involves data
    manipulation, coding, and design skills. LIDA is an open-source library that automates
    the data visualization creation process by reducing development time, number of
    errors, and overall complexity.
  prefs: []
  type: TYPE_NORMAL
- en: LIDA consists of 4 modules, as displayed in the following image. Each module
    serves a unique purpose in this multi-stage visualization generation approach.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3a59fdd48ac545ca16921436a912328a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Victor Dibia from [LIDA GitHub](https://microsoft.github.io/lida/)
  prefs: []
  type: TYPE_NORMAL
- en: '**SUMMARIZER**: this module converts data into a summary in natural language.
    The summary is implemented in two stages. In the first stage, *Base Summary Generation*,
    rules are applied to extract properties from the dataset using the pandas library,
    general statistics are generated, and a few samples are pulled for each column
    in the dataset. In the second stage, *Summary enrichment*, the contents from the
    *Base Summary stage* is enriched by either an LLM or a user via the UI to include
    a semantic description of the dataset and fields.¹'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**GOAL EXPLORER**: this module creates data exploration goals based on the
    summary generated by the SUMMARIZER module. Goals generated by this module are
    represented as JSON data structures containing the question, the visualization
    addressing the question, and the rationale.¹'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**VIZ GENERATOR**: this module consists of 3 submodules (a code scaffold constructor,
    a code generator, and a code executor). The goal of this module is to generate,
    evaluate, repair, filter, and execute visualization code according to specifications
    within a data visualization goal from the GOAL EXPLORER module, or from a new
    visualization goal created by the user.¹'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**INFOGRAPHER**: this moduleutilizes IGMs to createstylized infographics based
    on the output of the VIZ GENERATOR module, and based on visualization and style
    prompts.¹'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'LIDA leverages two key capabilities of LLMs:'
  prefs: []
  type: TYPE_NORMAL
- en: Language Modeling — these capabilities assist in the generation of semantically
    meaningful visualization goals.¹
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code Writing (i.e. Code Generation) — these capabilities assist in generating
    code to create data visualizations, which are then used as input to image generation
    models, such as DALL-E and Latent Diffusion, to generate stylized infographics.¹
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Additionally, prompt engineering is used within the LIDA tool.
  prefs: []
  type: TYPE_NORMAL
- en: “Prompt Engineering is the process of designing, optimizing, and refining prompts
    used to communicate with AI language models. A prompt is a question, statement,
    or request that is input into an AI system to elicit a specific response or output.”²
  prefs: []
  type: TYPE_NORMAL
- en: A couple of ways prompt engineering is incorporated into LIDA include the usage
    of prompts to create & define six evaluation dimensions, and the ability for users
    to specify style prompts to format a visualization.
  prefs: []
  type: TYPE_NORMAL
- en: The examples later in this post show more on some of these features mentioned
    in this section, and you can read more about LIDA [here](https://microsoft.github.io/lida/).
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are 2 ways to get started with LIDA — via the python API, or via a hybrid
    user interface. This section shows how to get started with the user interface
    from your local machine using the optional bundled UI and web API in the LIDA
    library.
  prefs: []
  type: TYPE_NORMAL
- en: '*Note: In this example, OpenAI is used. To use a different LLM provider, or
    to use the Python API, check out the GitHub documentation* [*here*](https://github.com/microsoft/lida)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Install the necessary libraries'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install the following libraries on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 2: Create a variable to store your OpenAI API Key'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create an OpenAI API Key navigate to your **Profile** > **User API Keys**,
    then select **+ Create new secret key.**
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/13a7b80195d14424e7c8f61096f3da78.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Retrieve API Key'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the API key. In a new terminal window, save the API key in a variable called
    **OPENAI_API_KEY**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 3: Launch the UI Web App'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the terminal window, launch the LIDA UI web app with the following command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In a web browser, navigate to “***localhost:8080****”,* and then you’re all
    set to get started! Select either the **Live demo** or **Demo** tab to view the
    web app.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1deda8eed8d554fa2cab76ee63709641.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Accessing LIDA web app'
  prefs: []
  type: TYPE_NORMAL
- en: Web App Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section goes through a few examples and tips using the [**Top 10 Films
    US Box Office dataset**](https://www.kaggle.com/datasets/willsfilms/top-10-films-at-the-us-box-office-2000-2023)³
    from Kaggle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Select a visualization library/grammar'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before creating any data visualizations or summaries, select a visualization
    library to use. There are 4 options to pick from: Altair, Matplotlib, Seaborn,
    and GGPlot. To start with, select ***Seaborn*** — a Python library for data visualization,
    based on Matplotlib.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/206ff7d5471fa98c1f32d252e6df1761.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Select a visualization library/grammar'
  prefs: []
  type: TYPE_NORMAL
- en: '***TIP:*** *Not sure which library to start with? Pick one, and switch later!
    You can switch the visualization library/grammar at a later point, even after
    the data has been uploaded. If you switch after loading the data, and see an error,
    a quick refresh should resolve the issue.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Review Generation Settings'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the right, there is an option to modify the **Generation Settings**. Here
    you can select the **Model Provider**, the **Model** to use for generation, and
    adjust other fields such as **Max Tokens**, **Temperature**, and **Number of Messages**.
    For now, keep the default settings.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/365f40b7a152e2ab5ba489f0eb2f56d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Review Generation Settings'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Upload data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After setting the base parameters, upload the dataset. Click or drag the file
    to upload the dataset into the web app. Alternatively, you can use one of the
    sample files provided.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab02ff8718021b8c8375c8bff004e4f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Upload file'
  prefs: []
  type: TYPE_NORMAL
- en: '***TIP:*** *If you get an error when trying to upload a file, check your usage
    and billing access for the model provider you have selected. Access issues can
    result in data file upload issues in LIDA. Additionally, the terminal window will
    display error messages, if there are any, that may be useful for troubleshooting
    an issue.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**CAUTION: Be careful about if/when switching back to the LIDA homepage — this
    will result in losing the work in your current display!**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Review the Data Summary'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Data Summary** section provides a description of the dataset, and a summary
    of the fields in the dataset including column type, number of unique values, description
    of the column, and sample values. This output is a result of the **SUMMARIZER**
    module mentioned previously.
  prefs: []
  type: TYPE_NORMAL
- en: The following image shows the **Data Summary** for the [**Top 10 Films US Box
    Office dataset**](https://www.kaggle.com/datasets/willsfilms/top-10-films-at-the-us-box-office-2000-2023).
    There is a description for the entire dataset, and all 9 columns in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/445cc0f6b834f829c3f0560a92b15128.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Data Summary for Top 10 Films US Box Office Dataset'
  prefs: []
  type: TYPE_NORMAL
- en: Select **View raw summary?** to view the data summary as a JSON dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/324a74b33ed3347958143514efade886.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: View raw summary'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Review Goal Exploration'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section shows a list of automatically generated goals, or hypotheses, based
    on the dataset uploaded. Each goal is stated as question, and includes a description
    of what the visualization will display. This output is a result of the **GOAL
    EXPLORER** module mentioned previously.
  prefs: []
  type: TYPE_NORMAL
- en: Here you can read through the different goals, and select one to visualize in
    the **Visualization Generation** section.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d78a1b7d400b3cd9717fba880e3481e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Goal Exploration results for Top 10 Films US Box Office Dataset'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 6: Visualization Generation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Based on the goal selected in the previous section, **Goal Exploration**, you
    will see the visualization, as well as the Python code used to generate the visual
    for that goal.
  prefs: []
  type: TYPE_NORMAL
- en: The following image shows the result for the goal, “*What is the distribution
    of movie releases by month?*”. On the left is the visualization, a vertical bar
    chart, and on the right is the Python code used to create the visual. This code
    snippet can be copied for external use.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3465a5730f6df0b8a2ed0bc1dc6bd853.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Visualization Generation output for “What is the distribution
    of movie releases by month?”'
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can enter a new visualization goal, outside of the ones listed
    in the **Goal Exploration** section.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the following image shows the output for “*What are the top 5 genres
    with the largest average budget?*”.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/711c438ccd9ef6f23c818545160efb6b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Visualization Generation output for “What are the top 5 genres
    with the largest average budget?”'
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** Selecting the **Generate** button, to the right of the goal, refreshes
    the visualization. This may result in slight changes, such as a change in the
    color scheme.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 7: Visualization modification and evaluation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once a visualization is generated, there are 4 tabs that can be utilized: **Refine**,
    **Explain**, **Evaluate** & **Recommend**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a823c2d62c642b811c2d3d4eba9930fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Refine, Explain, Evaluate, and Recommend! tabs under the Visualization
    Generation section'
  prefs: []
  type: TYPE_NORMAL
- en: The first tab, **Refine**, modifies the chart using natural language commands.
  prefs: []
  type: TYPE_NORMAL
- en: The following image shows modifications made to the chart, “*What is the distribution
    of movie releases by month*?”, using the **Refine** tab. The chart was modified
    using natural commands to arrange the months in chronological order, to display
    the values in a horizontal bar chart, and to add count values to each bar.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e68acf9d54415fd0996e3bd537d9894f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Visualization Generation output after natural language commands
    input in Refine tab'
  prefs: []
  type: TYPE_NORMAL
- en: '***TIP****: Make sure your style prompts are clear, concise, & specific! Otherwise
    you may end up with a distorted visualization, unexpected results, or your natural
    language command may not render a chart. Remember, when it comes to writing prompts,
    Garbage In → Garbage Out! Writing prompts is an art, so writing effective style
    prompts may require some refinement.*'
  prefs: []
  type: TYPE_NORMAL
- en: If you need to reset the visualization after a few style prompts not turning
    out as expected, use the **Clear Chat History** button to reset the visualization.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0780134a5513a9890e0ca18ed7a86f66.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Clear Chat History button'
  prefs: []
  type: TYPE_NORMAL
- en: The second tab, **Explain**, provides a text explanation on how the visual was
    created — in terms of data transformations, chart elements, code, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fa9a159a684e7504e84e7a181ef49b19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Chart explanations example'
  prefs: []
  type: TYPE_NORMAL
- en: 'The third tab, **Evaluate**, evaluates the generated chart across 6 dimensions:
    bugs, transformation, compliance, type, encoding, and aesthetics. Each dimension
    has a rating out of 5, and a description on why it received that rating.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f82976ba455f3783db80e447b59fe28a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Chart evaluation example'
  prefs: []
  type: TYPE_NORMAL
- en: There is an option to auto repair the chart, using the button on the bottom
    right, **Auto Repair Chart**, as seen in the image above. If you agree with the
    recommendations provided in the chart evaluation, then this is a nice and quick
    way to apply the fixes! The following image shows an updated chart after auto
    repairing the chart based on the *Aesthetics* evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d686cbfb32ccedcabd4a9bab5dfd6bf2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Updated bar chart after **Auto Repair Chart** selected'
  prefs: []
  type: TYPE_NORMAL
- en: The fourth tab, **Recommend!**, generates similar charts, and corresponding
    code snippets— not tied to the initial goal. This can be useful for brainstorming
    other charts, or other insights to gain from the data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e8c580a41e1b79ba763c04599795dbdc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image by Author: Chart recommendation examples'
  prefs: []
  type: TYPE_NORMAL
- en: Thoughts & Considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section highlights a few areas of consideration regarding the use of LLMs
    and IGMs in the data visualization and business intelligence field — including,
    but not limited to, automatic data visualization generation.
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation Metrics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LIDA makes use of 2 metrics — Visualization Error Rate (VER), and Self-Evaluated
    Visualization Quality (SEVQ).
  prefs: []
  type: TYPE_NORMAL
- en: VER shows how many of the generated visualizations result in code compilation
    errors, stated as a percentage.
  prefs: []
  type: TYPE_NORMAL
- en: SEVQ uses LLMs, such as GPT-4, to assess the quality of visualizations generated.
    It takes the average score of 6 dimensions — code accuracy, data transformations,
    goal compliance, visualization type, data encoding, and aesthetics. These dimensions
    each generate a score based on prompts to an LLM (to see a sketch of the prompts
    used, read the paper [**here**](https://aclanthology.org/2023.acl-demo.11.pdf))¹.
    You may recall, these dimensions appear in the **Evaluate** tab in the LIDA web
    app.
  prefs: []
  type: TYPE_NORMAL
- en: These metrics evaluate visualization generation, and they raise a good point
    — it’s important to keep in mind how we evaluate the use of LLMs and IGMs for
    data visualization and BI tools. As this area continues to evolve, it’s important
    for practitioners to keep this in mind when implementing LLMs and IGMs for data
    visualization and BI solutions for their organization, and ask themselves — What
    metrics do we need to consider going forward? What processes need to be built
    in place? How do we ensure the output is accurate, trustworthy, explainable, and
    governed?
  prefs: []
  type: TYPE_NORMAL
- en: Deployment — Environment Setup Considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When utilizing LLMs and IGMs for data visualization within an organization,
    there are several things to consider regarding deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Use of these models for data visualization, or use of these models in general,
    can require a large amount of resources, depending on factors such as the model
    size, dataset size, and number of users. This can lead to high costs if not planned
    correctly and efficiently. It’s important to make sure the correct infrastructure
    is set in place, to ensure a smooth implementation. Testing more refined LLMs
    for a specific use case can also help in reducing the overall footprint.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, data security and governance are important to keep in mind when
    using LLMs and IGMs for data visualization. Regardless of the tool, it’s crucial
    to ensure that data is secure within the tool, and that it is governed throughout
    its use.
  prefs: []
  type: TYPE_NORMAL
- en: Chart Explanations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As shown in a previous example, the chart explanations generated within LIDA
    focus on details regarding how the chart was created — in terms of data transformations,
    chart elements, and code generated. While this is helpful for a developer creating
    charts with a dataset, this kind of context is not beneficial for business users.
    Business users and analysts would benefit from chart explanations that include
    insights about the data points within a visualization, not just the chart elements
    and structure.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of an individual’s role, natural language text accompanying the charts
    can help provide key insights from a data visualization. There are some natural
    language generation (NLG) tools that are able to integrate into business-intelligence
    (BI) tools today. It’ll be interesting to see how this space continuous to evolve
    with LLMs, IGMs, and data visualization solutions.
  prefs: []
  type: TYPE_NORMAL
- en: '*Haven’t seen NLG with BI before? Check out this* [*GitHub page*](https://github.com/payalnpatel/Tableau/blob/main/NLG/NLG-for-BI-notes.md)
    *for a quick intro.*'
  prefs: []
  type: TYPE_NORMAL
- en: Moving forward, it’s imperative to think about the end user, and understanding
    what LLM + IGM + data visualizations solutions will fit that audience based on
    their goals and interests.
  prefs: []
  type: TYPE_NORMAL
- en: Chart Design using Prompts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The examples earlier showed how data visualizations can be generated using LLMs
    and IGMs. While these charts are automatically generated, they still require modification
    to make sure they are well designed. Often you can’t leave the first chart as
    it is. This requires the use of the Auto Repair capabilities in LIDA, which captures
    some but not all changes that should be made, as well as style prompts, which
    requires some experience and knowledge in the data visualization domain.
  prefs: []
  type: TYPE_NORMAL
- en: These style prompts are inputted by the user in natural language and can include
    requests such as modifying chart titles, changing chart colors, or sorting chart
    values.
  prefs: []
  type: TYPE_NORMAL
- en: The use of these style prompts can help users save time when developing charts
    — reducing the time to write code, and reducing the time needed to debug and format
    code.
  prefs: []
  type: TYPE_NORMAL
- en: However, with the introduction of prompts in data visualization generation,
    it becomes equally important to understand what makes a good prompt. Prompts that
    are clear, concise, and specific will yield better results than one that is not.
    Unclear requests, can result in poor visualizations or unexpected results.
  prefs: []
  type: TYPE_NORMAL
- en: Now this doesn’t mean we shouldn’t leverage prompts in creating data visualizations
    — rather, it’s to point out that there may be a learning curve as you get started.
    Figuring out the right prompt may involve some testing, and will require clearly
    phrased commands.
  prefs: []
  type: TYPE_NORMAL
- en: Overall, LIDA is a great open-source tool to start learning about some of the
    advancements in LLMs, IGMs, & Data Visualization. Check out Victor Dibia’s full
    paper [here](https://aclanthology.org/2023.acl-demo.11.pdf) & try out the web
    app, or Python API, to learn more about how LLMs and IGMs are changing the way
    we can create data visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: '*Payal is a Data & AI specialist. In her spare time, she enjoys reading, traveling,
    and writing on Medium. If you enjoy her work,* [*follow or subscribe*](https://medium.com/@payal-patel)
    *to her list, and never miss a story!*'
  prefs: []
  type: TYPE_NORMAL
- en: '*The above article is personal and does not necessarily represent IBM’s positions,
    strategies, or opinions.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs: []
  type: TYPE_NORMAL
- en: '[1]: Dibia, Victor. *LIDA: A Tool for Automatic Generation of Grammar-Agnostic
    Visualizations and Infographics Using Large Language Models*, Microsoft Research,
    8 May 2023, aclanthology.org/2023.acl-demo.11.pdf.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2]: Vagh, Avinash. “NLP and Prompt Engineering: Understanding the Basics.”
    *DEV Community*, DEV Community, 6 Apr. 2023, dev.to/avinashvagh/understanding-the-concept-of-natural-language-processing-nlp-and-prompt-engineering-35hg.'
  prefs: []
  type: TYPE_NORMAL
- en: '[3]: Films, Will’s. “Top 10 Films at the US Box Office 2000–2023.” *Kaggle*,
    20 Mar. 2024, [www.kaggle.com/datasets/willsfilms/top-10-films-at-the-us-box-office-2000-2023.](http://www.kaggle.com/datasets/willsfilms/top-10-films-at-the-us-box-office-2000-2023.)
    (CC0)'
  prefs: []
  type: TYPE_NORMAL
