- en: Radical Simplicity in Data Engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/radical-simplicity-in-data-engineering-86ec3d2bd71c?source=collection_archive---------4-----------------------#2024-07-26](https://towardsdatascience.com/radical-simplicity-in-data-engineering-86ec3d2bd71c?source=collection_archive---------4-----------------------#2024-07-26)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn from Software Engineers and Discover the Joy of ‘Worse is Better’ Thinking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@caiparryjones96?source=post_page---byline--86ec3d2bd71c--------------------------------)[![Cai
    Parry-Jones](../Images/60b83f5167651f9621a3e73b8d72ccae.png)](https://medium.com/@caiparryjones96?source=post_page---byline--86ec3d2bd71c--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--86ec3d2bd71c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--86ec3d2bd71c--------------------------------)
    [Cai Parry-Jones](https://medium.com/@caiparryjones96?source=post_page---byline--86ec3d2bd71c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--86ec3d2bd71c--------------------------------)
    ·6 min read·Jul 26, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9427c6236c0c26ea78735c52b9b205e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'source: [unsplash.com](https://unsplash.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Recently, I have had the fortune of speaking to a number of data engineers
    and data architects about the problems they face with data in their businesses.
    The main pain points I heard time and time again were:'
  prefs: []
  type: TYPE_NORMAL
- en: Not knowing why something broke
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting burnt with high cloud compute costs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking too long to build data solutions/complete data projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Needing expertise on many tools and technologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These problems aren’t new. I’ve experienced them, you’ve probably experienced
    them. Yet, we can’t seem to find a solution that solves all of these issues in
    the long run. You might think to yourself, ‘well point one can be solved with
    {insert data observability tool}’, or ‘point two just needs a stricter data governance
    plan in place’. The problem with these style of solutions is they add additional
    layers of complexity, which cause the final two pain points to increase in seriousness.
    The aggregate sum of pain remains the same, just a different distribution between
    the four points.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a8dc96143f25d0bb69eacb1128c1193a.png)'
  prefs: []
  type: TYPE_IMG
- en: created by the author using [Google Sheets](https://workspace.google.com/intl/en_uk/products/sheets/)
  prefs: []
  type: TYPE_NORMAL
- en: 'This article aims to present a contrary style of problem solving: radical simplicity.'
  prefs: []
  type: TYPE_NORMAL
- en: '**TL;DR**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Software engineers have found massive success in embracing simplicity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Over-engineering and pursuing perfection can result in bloated, slow-to-develop
    data systems, with sky high costs to the business.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data teams should consider sacrificing some functionality for the sake of simplicity
    and speed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A Lesson From Those Software Guys**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In 1989, the computer scientist [Richard P. Gabriel](https://en.wikipedia.org/wiki/Richard_P._Gabriel)
    wrote a relatively famous essay on computer systems paradoxically called ‘Worse
    Is Better’. I won’t go into the details, you can read the essay [here](https://dreamsongs.com/WorseIsBetter.html)
    if you like, but the underlying message was that software quality does not necessarily
    improve as functionality increases. In other words, on occasions, you can sacrifice
    completeness for simplicity and end up with an inherently ‘better’ product because
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This was a strange idea to the pioneers of computing during the 1950/60s. The
    philosophy of the day was: a computer system needs to be pure, and it can only
    be pure if it accounts for all possible scenarios. This was likely due to the
    fact that most leading computer scientists at the time were academics, who very
    much wanted to treat computer science as a hard science.'
  prefs: []
  type: TYPE_NORMAL
- en: Academics at MIT, the leading institution in computing at the time, started
    working on the operating system for the next generation of computers, called [Multics](https://en.wikipedia.org/wiki/Multics).
    After nearly a decade of development and millions of dollars of investment, the
    MIT guys released their new system. It was unquestionably the most advanced operating
    system of the time, however it was a pain to install due to the computing requirements,
    and feature updates were slow due to the size of the code base. As a result, it
    never caught on beyond a few select universities and industries.
  prefs: []
  type: TYPE_NORMAL
- en: 'While Multics was being built, a small group supporting Multics’s development
    became frustrated with the growing requirements required for the system. They
    eventually decided to break away from the project. Armed with this experience
    they set their sights on creating their own operating system, one with a fundamental
    philosophy shift:'
  prefs: []
  type: TYPE_NORMAL
- en: The design must be simple, both in implementation and interface. It is more
    important for the implementation to be simple than the interface. Simplicity is
    the most important consideration in a design.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — Richard P. Gabriel
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Five years after Multics’s release, the breakaway group released their operating
    system, [Unix](https://en.wikipedia.org/wiki/History_of_Unix). Slowly but steadily
    it caught traction, and by the 1990s Unix became the go-to choice for computers,
    with [over 90% of the world’s top 500 fastest supercomputers](https://en.wikipedia.org/wiki/Usage_share_of_operating_systems#Supercomputers)
    using it. To this day, Unix is still widely used, most notably as the system underlying
    macOS.
  prefs: []
  type: TYPE_NORMAL
- en: There were obviously other factors beyond its simplicity that led to Unix’s
    success. But its lightweight design was, and still is, a highly valuable asset
    of the system. That could only come about because the designers were willing to
    sacrifice functionality. The data industry should not be afraid to to think the
    same way.
  prefs: []
  type: TYPE_NORMAL
- en: '**Back to Data in the 21st Century**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thinking back at my own experiences, the philosophy of most big data engineering
    projects I’ve worked on was similar to that of Multics. For example, there was
    a project where we needed to automate standardising the raw data coming in from
    all our clients. The decision was made to do this in the data warehouse via dbt,
    since we could then have a full view of data lineage from the very raw files right
    through to the standardised single table version and beyond. The problem was that
    the first stage of transformation was very manual, it required loading each individual
    raw client file into the warehouse, then dbt creates a model for cleaning each
    client’s file. This led to 100s of dbt models needing to be generated, all using
    essentially the same logic. Dbt became so bloated it took minutes for the data
    lineage chart to load in the dbt docs website, and our GitHub Actions for CI ([continuous
    integration](https://docs.github.com/en/actions/automating-builds-and-tests/about-continuous-integration))
    took over an hour to complete for each pull request.
  prefs: []
  type: TYPE_NORMAL
- en: This could have been resolved fairly simply if leadership had allowed us to
    make the first layer of transformations outside of the data warehouse, using AWS
    Lambda and Python. But no, that would have meant the data lineage produced by
    dbt wouldn’t be 100% complete. That was it. That was the whole reason not to massively
    simplify the project. Similar to the group who broke away from the Multics project,
    I left this project mid-build, it was simply too frustrating to work on something
    that so clearly could have been much simpler. As I write this, I discovered they
    are still working on the project.
  prefs: []
  type: TYPE_NORMAL
- en: So, What the Heck is Radical Simplicity?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Radical simplicity in data engineering isn’t a framework or data-stack toolkit,
    it is simply a frame of mind. A philosophy that prioritises simple, straightforward
    solutions over complex, all-encompassing systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Key principles of this philosophy include:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Minimalism: Focusing on core functionalities that deliver the most value, rather
    than trying to accommodate every possible scenario or requirement.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Accepting trade-offs: Willingly sacrificing some degree of completeness or
    perfection in favour of simplicity, speed, and ease of maintenance.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Pragmatism over idealism: Prioritising practical, workable solutions that solve
    real business problems efficiently, rather than pursuing theoretically perfect
    but overly complex systems.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Reduced cognitive load: Designing systems and processes that are easier to
    understand, implement, and maintain, thus reducing the expertise required across
    multiple tools and technologies.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Cost-effectiveness: Embracing simpler solutions that often require less computational
    resources and human capital, leading to lower overall costs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Agility and adaptability: Creating systems that are easier to modify and evolve
    as business needs change, rather than rigid, over-engineered solutions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Focus on outcomes: Emphasising the end results and business value rather than
    getting caught up in the intricacies of the data processes themselves.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This mindset can be in direct contradiction to modern data engineering solutions
    of adding more tools, processes, and layers. As a result, be expected to fight
    your corner. Before suggesting an alternative, simpler, solution, come prepared
    with a deep understanding of the problem at hand. I am reminded of the quote:'
  prefs: []
  type: TYPE_NORMAL
- en: It takes a lot of hard work to make something simple, to truly understand the
    underlying challenges and come up with elegant solutions. […] It’s not just minimalism
    or the absence of clutter. It involves digging through the depth of complexity.
    To be truly simple, you have to go really deep. […] You have to deeply understand
    the essence of a product in order to be able to get rid of the parts that are
    not essential.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — Steve Jobs
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Side note: Be aware that adopting radical simplicity doesn’t mean ignoring
    new tools and advanced technologies. In fact one of my favourite solutions for
    a data warehouse at the moment is using a new open-source database called [duckDB](https://duckdb.org/).
    Check it out, it’s pretty cool.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusion**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The lessons from software engineering history offer valuable insights for today’s
    data landscape. By embracing radical simplicity, data teams can address many of
    the pain points plaguing modern data solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t be afraid to champion radical simplicity in your data team. Be the catalyst
    for change if you see opportunities to streamline and simplify. The path to simplicity
    isn’t easy, but the potential rewards can be substantial.
  prefs: []
  type: TYPE_NORMAL
