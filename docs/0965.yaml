- en: Callbacks and Pipeline structures in LangChain
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LangChain中的回调函数和管道结构
- en: 原文：[https://towardsdatascience.com/callbacks-and-pipeline-structures-in-langchain-925aa077227e?source=collection_archive---------6-----------------------#2024-04-16](https://towardsdatascience.com/callbacks-and-pipeline-structures-in-langchain-925aa077227e?source=collection_archive---------6-----------------------#2024-04-16)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/callbacks-and-pipeline-structures-in-langchain-925aa077227e?source=collection_archive---------6-----------------------#2024-04-16](https://towardsdatascience.com/callbacks-and-pipeline-structures-in-langchain-925aa077227e?source=collection_archive---------6-----------------------#2024-04-16)
- en: Learn about the structure of LangChain pipelines, callbacks, how to create custom
    callbacks and integrate them into your pipelines for improved monitoring
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解LangChain管道的结构、回调函数的工作原理、如何创建自定义回调函数并将其集成到管道中，以便更好地进行监控。
- en: '[](https://medium.com/@RSK2327?source=post_page---byline--925aa077227e--------------------------------)[![Roshan
    Santhosh](../Images/2509f38bf7d5a40c453fa54575293f06.png)](https://medium.com/@RSK2327?source=post_page---byline--925aa077227e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--925aa077227e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--925aa077227e--------------------------------)
    [Roshan Santhosh](https://medium.com/@RSK2327?source=post_page---byline--925aa077227e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@RSK2327?source=post_page---byline--925aa077227e--------------------------------)[![Roshan
    Santhosh](../Images/2509f38bf7d5a40c453fa54575293f06.png)](https://medium.com/@RSK2327?source=post_page---byline--925aa077227e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--925aa077227e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--925aa077227e--------------------------------)
    [Roshan Santhosh](https://medium.com/@RSK2327?source=post_page---byline--925aa077227e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--925aa077227e--------------------------------)
    ·11 min read·Apr 16, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--925aa077227e--------------------------------)
    ·11分钟阅读·2024年4月16日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Callbacks are an important functionality that helps with monitoring/debugging
    your pipelines. In this note, we cover the basics of callbacks and how to create
    custom ones for your use cases. More importantly, through examples, we also develop
    an understanding of the structure/componentization of LangChain pipelines and
    how that plays into the design of custom callbacks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数是一个重要的功能，帮助你监控和调试管道。在本笔记中，我们将介绍回调函数的基础知识，以及如何为你的使用场景创建自定义回调函数。更重要的是，通过示例，我们还将深入理解LangChain管道的结构/组件化，并探讨这些如何影响自定义回调函数的设计。
- en: This note assumes basic familiarity with LangChain and how pipelines in LangChain
    work.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本笔记假设读者已具备对LangChain及其工作流程的基本了解。
- en: Basic Structure of Callbacks
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回调函数的基本结构
- en: To learn about the basics of callbacks in LangChain, we start with the [official
    documentation](https://python.langchain.com/docs/modules/callbacks/) where we
    can find the definition of the **BaseCallbackHandler** class.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解LangChain中回调函数的基础知识，我们从[官方文档](https://python.langchain.com/docs/modules/callbacks/)开始，在这里我们可以找到**BaseCallbackHandler**类的定义。
- en: '![](../Images/09298f9767c694b691d4567ee5fed0e6.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/09298f9767c694b691d4567ee5fed0e6.png)'
- en: Image taken from official [langchain documentation](https://python.langchain.com/docs/modules/callbacks/)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图片摘自官方[LangChain文档](https://python.langchain.com/docs/modules/callbacks/)
- en: '[BaseCallbackManager code](https://github.com/langchain-ai/langchain/blob/master/libs/core/langchain_core/callbacks/base.py)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[BaseCallbackManager代码](https://github.com/langchain-ai/langchain/blob/master/libs/core/langchain_core/callbacks/base.py)'
- en: 'As you can see this is an abstract class that defines quite a few methods to
    cover various events in your LangChain pipeline. These methods can be grouped
    together into the following segments :'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这是一个抽象类，定义了许多方法，以涵盖LangChain管道中的各种事件。这些方法可以分为以下几个部分：
- en: LLM [start, end, error, new token]
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LLM [开始, 结束, 错误, 新令牌]
- en: Chain [start, end, error]
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Chain [开始, 结束, 错误]
- en: Tool [start, end, error]
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Tool [开始, 结束, 错误]
- en: Agent [action, finish]
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Agent [动作, 完成]
- en: If you have worked with LangChain pipelines before, the methods along with their
    provided descriptions should be mostly self explanatory. For example, the ***on_llm_start***
    callback is the event that gets triggered when the LangChain pipeline passes input
    to the LLM. And that ***on_llm_end*** is subsequently triggered when the LLM provides
    its final output.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前使用过LangChain管道，方法及其提供的描述应该是自解释的。例如，***on_llm_start***回调是在LangChain管道将输入传递给LLM时触发的事件。随后，***on_llm_end***在LLM提供最终输出时被触发。
- en: '*NOTE : There are events triggers that can be used in addition to whats shown
    above. These can be found* [*here*](https://api.python.langchain.com/en/latest/runnables/langchain_core.runnables.base.RunnableSequence.html)*.
    These cover triggers relating to Retrievers, Prompts, ChatModel etc.*'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*注意：除了上面显示的内容外，还有一些事件触发器可以使用。这些可以在* [*这里*](https://api.python.langchain.com/en/latest/runnables/langchain_core.runnables.base.RunnableSequence.html)*找到。这些触发器涵盖了与检索器、提示、聊天模型等相关的内容。*'
- en: Understanding how Callbacks work
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解回调的工作原理
- en: Callbacks are a very common programming concept that have been widely used for
    a while now, so the high level concept of how callbacks work is well understood.
    So in this post, we focus on the specific nuances of how callbacks work in LangChain
    and how we could use it to satisfy our specific use cases.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 回调是一个非常常见的编程概念，已经广泛使用了一段时间，因此回调的工作原理在高层次上是众所周知的。因此，在这篇文章中，我们专注于回调在LangChain中的特定细节，以及如何利用它满足我们的特定用例。
- en: Keeping in the mind the base Callback class that we saw in the previous section,
    we explore Callbacks in LangChain through a series of increasingly complex examples
    and in the process gain a better understanding of the structure of pipelines in
    LangChain. This would be a top-down approach to learning where we start with examples
    first and actual definitions later as I found that to be more useful personally
    for this specific topic.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我们在上一节看到的基本Callback类，我们通过一系列越来越复杂的示例来探索LangChain中的回调，并在此过程中更好地理解LangChain管道的结构。这将是一种自上而下的学习方法，我们首先从示例开始，之后再讲解实际的定义，因为我发现这种方法对这个特定主题更为有用。
- en: Example 1
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 1
- en: 'We start with a simple dummy chain that has 3 components : 2 prompts and a
    custom function to join them. I refer to this as a dummy example because its very
    unlikely that you would need two separate prompts to interact with each other,
    but it makes for an easier example to start with for understanding callbacks and
    LangChain pipelines.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个简单的虚拟链开始，它有三个组件：2个提示和一个自定义函数来连接它们。我称之为虚拟示例，因为你不太可能需要两个单独的提示来相互交互，但它为理解回调和LangChain管道提供了一个更易于开始的例子。
- en: '![](../Images/a85491d7b3e8d386730736be9216aac8.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a85491d7b3e8d386730736be9216aac8.png)'
- en: 'Example 1 : Basic structure of LangChain pipeline'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1：LangChain管道的基本结构
- en: 'Implementing this in code would look like :'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 用代码实现这一点会是这样的：
- en: '![](../Images/feb48b47658516acf9ea930c09acb98c.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/feb48b47658516acf9ea930c09acb98c.png)'
- en: Pipeline implementation for Example 1
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1的管道实现
- en: The above code is pretty textbook stuff. The only possibly complex piece is
    the ***retrieve_text*** and ***RunnableLambda*** function thats being used here.
    The reason this is necessary is because the format of the output from ***qa_prompt1***
    is not compatible with the format of the output required by ***qa_prompt2.***
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码是非常基础的内容。唯一可能复杂的部分是***retrieve_text***和这里使用的***RunnableLambda***函数。之所以需要这样做，是因为***qa_prompt1***的输出格式与***qa_prompt2***所需的输出格式不兼容。
- en: '**Defining the custom Callback**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义自定义回调**'
- en: '![](../Images/ad6bc4c936d6251b991b066126236e51.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ad6bc4c936d6251b991b066126236e51.png)'
- en: 'For our custom callback, we define a new subclass of BaseCallbackHandler called
    CustomCallback1 which defines the ***on_chain_start*** method. The method definition
    is straightforward as it simply takes the input values passed to it and saves
    it in 2 specific variables : ***chain_input*** and ***serialized_input***'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的自定义回调，我们定义了一个名为CustomCallback1的新子类，它继承自BaseCallbackHandler，并定义了***on_chain_start***方法。该方法的定义非常简单，因为它只是接受传递给它的输入值，并将其保存在两个特定的变量中：***chain_input***和***serialized_input***。
- en: '**Invoking the custom callback**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**调用自定义回调**'
- en: '![](../Images/98c6c6878453f2bea6bfb157f45f84bf.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/98c6c6878453f2bea6bfb157f45f84bf.png)'
- en: 'Example 1 : Invoking with pipeline with the custom callback'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1：使用自定义回调调用管道
- en: 'The above code shows one of the possible ways to pass your custom callback
    to your pipeline : As a list of callback objects as the value to a corresponding
    key of ‘callbacks’. This also makes it easy to guess that *you can pass multiple
    callbacks to your LangChain pipeline.*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码展示了将自定义回调传递给管道的几种可能方式之一：将回调对象的列表作为'callbacks'对应键的值传递。这也使得很容易猜测*你可以将多个回调传递给你的LangChain管道。*
- en: Decoding the Callback/Pipeline Structure
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解码回调/管道结构
- en: Now comes the interesting part. After we have defined the callbacks and passed
    it on to our pipeline, we now perform a deep dive into the callback outputs
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在进入有趣的部分。在我们定义回调函数并将其传递给管道后，我们将深入探讨回调输出。
- en: We first look at the values stored in ***chain_input***
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先查看存储在***chain_input***中的值。
- en: '![](../Images/86a11c5f570e3a85f96289a9b62f2698.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/86a11c5f570e3a85f96289a9b62f2698.png)'
- en: 'Example 1 : Contents of chain_input variable of callback handler'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 示例1：回调处理程序的chain_input变量内容
- en: '**Observations :**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**观察结果：**'
- en: Though **there are 3 components in our chain, there are 4 values in *chain_input***.
    Which corresponds to the ***on_chain_start*** method being triggered 4 times instead
    of 3.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尽管**我们链中有3个组件，但*chain_input***中有4个值。这与***on_chain_start***方法被触发4次而不是3次相对应。
- en: For the first two ***chain_input*** values/ on_chain_start triggers, the input
    is the same as the user provided input.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于前两个***chain_input***值/on_chain_start触发器，输入与用户提供的输入相同。
- en: We next look at the outputs of ***serialized_input***
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们查看***serialized_input***的输出。
- en: '![](../Images/0d71d6c54bc40938b4099c2f89863fde.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0d71d6c54bc40938b4099c2f89863fde.png)'
- en: '**Observations :**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**观察结果：**'
- en: The first component is a ***RunnableSequence*** which is a component that wasnt
    added by the user but was automatically added by LangChain. The rest of the components
    correspond directly to the user-defined components in the pipeline.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个组件是一个***RunnableSequence***，这是一个用户没有添加但LangChain自动添加的组件。其余组件直接对应管道中用户定义的组件。
- en: The full contents of serialized_input is extensive! While there is a definite
    structure to that content, its definitely out of scope for this post and possibly
    doesnt have much practical implications for an end user.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***serialized_input***的完整内容非常庞大！尽管该内容有明确的结构，但它确实超出了本文的范围，而且可能对最终用户没有太大实际意义。'
- en: How do we interpret these results
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何解读这些结果？
- en: For the most part, the outputs seen in the ***chain_input*** and ***serialized_input***
    make sense. Whether its the input values or the names/IDs of the components. The
    only largely unknown part is the ***RunnableSequence*** component, so we take
    a closer look at this.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，***chain_input***和***serialized_input***中看到的输出是有意义的。无论是输入值还是组件的名称/ID。唯一不太明了的部分是***RunnableSequence***组件，因此我们对此进行了更详细的查看。
- en: As I mentioned previously, the full contents of ***serialized_input*** is extensive
    and not easy to digest. So to make things easier, we look at only the high level
    attributes described in ***serialized_input*** and try to intrepret the results
    through these attributes. For this, we make use of a custom debugging function
    called ***getChainBreakdown*** (code in notebook).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，***serialized_input***的完整内容庞大且难以消化。因此，为了简化问题，我们只查看***serialized_input***中描述的高级属性，并通过这些属性来尝试解读结果。为此，我们使用了一个名为***getChainBreakdown***的自定义调试函数（代码见笔记本）。
- en: 'We call ***getChainBreakdown*** on all values of ***serialized_input*** and
    observe the output. Specifically for the first ***RunnableSequence*** element,
    we look at the keys of the kwargs dict : first, midde, last, name.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在所有***serialized_input***的值上调用***getChainBreakdown***并观察输出。特别是对于第一个***RunnableSequence***元素，我们查看kwargs字典的键：first，middle，last，name。
- en: '![](../Images/a6ccf5a1ef4250daa084ec5cff56725a.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6ccf5a1ef4250daa084ec5cff56725a.png)'
- en: On closer inspection of the kwargs argument and their values, we see that they
    have the same structure as our previous pipeline components. In fact, **the first,
    middle and last components correspond exactly to the user-defined components of
    the pipeline.**
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 经过仔细检查kwargs参数及其值后，我们发现它们的结构与之前的管道组件完全一致。事实上，**第一个、中间和最后的组件正好对应管道中用户定义的组件。**
- en: '![](../Images/3918083f2cf8c069ce8d73a234ec7894.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3918083f2cf8c069ce8d73a234ec7894.png)'
- en: Closer inspection of RunnableSequence kwargs values
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 更仔细地检查RunnableSequence的kwargs值。
- en: 'The above details form the basis of the final conclusion that we make here.
    That the structure of the pipeline is like shown below :'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述细节构成了我们得出最终结论的基础。即管道的结构如下所示：
- en: '![](../Images/733df8d01a5d1285fc7c71ed85d20ba1.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/733df8d01a5d1285fc7c71ed85d20ba1.png)'
- en: 'Example 1 : Structure of LangChain pipeline'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 1 : LangChain 管道结构'
- en: We do make a bit of a leap here as the above flowchart was confirmed after going
    through a bunch of examples and observing the format in which these components
    are created internally by LangChain. So bear with me as we go through these other
    examples which will solidify the conclusion that we make here.
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们在这里稍微做了一个跳跃，因为在通过一系列示例并观察 LangChain 内部创建这些组件的格式后，确认了上述流程图。所以请耐心等待，我们将通过这些其他示例来巩固我们在这里得出的结论。
- en: With the above defined structure, the other pieces of the puzzle fit together
    quite well. Focusing on the chain_input values, lets map them to the components
    (with their ordering) defined above.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述定义的结构，其他部分的拼图也能很好的组合在一起。专注于 chain_input 值，下面我们将它们映射到上述定义的组件（包括它们的顺序）。
- en: '![](../Images/dd692e9be32631fa88cd061b0571b0c0.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd692e9be32631fa88cd061b0571b0c0.png)'
- en: 'Example 1 : Mapping chain_input values to pipeline components'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 1 : 将 chain_input 值映射到管道组件'
- en: '**Observations :**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**观察结果：**'
- en: For RunnableSequence, as it acts like a wrapper for the whole pipeline, the
    input from the user acts as the input for the RunnableSequence component as well.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 RunnableSequence，它作为整个管道的包装器，用户的输入也作为 RunnableSequence 组件的输入。
- en: For the first ChatPromptTemplate (qa_prompt1), as the first ‘true’ component
    of the pipeline, it receives the direct input from the user
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第一个 ChatPromptTemplate（qa_prompt1），作为管道中的第一个“真正的”组件，它直接接收用户的输入。
- en: For RunnableLambda (retrieve_text), it receives as input the output from qa_prompt1,
    which is a Message object
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 RunnableLambda（retrieve_text），它接收来自 qa_prompt1 的输出作为输入，qa_prompt1 是一个 Message
    对象。
- en: For the last ChatPromptTemplate (qa_prompt2), it receives as input the output
    from retrieve_text, which is a dict with ‘prompt’ as its single key
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于最后一个 ChatPromptTemplate（qa_prompt2），它接收来自 retrieve_text 的输出作为输入，retrieve_text
    是一个字典，其中 'prompt' 是唯一的键。
- en: The above breakdown shows how the structure of the pipeline described above
    fits perfectly with the data seen in ***serialized_input*** and ***chain_input***
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 上述细分显示了如何将上述描述的管道结构与 ***serialized_input*** 和 ***chain_input*** 中看到的数据完美地契合。
- en: '**Example 2**'
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**示例 2**'
- en: For the next example, we extend Example 1 by adding a LLM as the final step.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个示例，我们通过在最后一步添加 LLM 来扩展示例 1。
- en: '![](../Images/fcd60f4feaecfe05f96f2afcaaf932af.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fcd60f4feaecfe05f96f2afcaaf932af.png)'
- en: 'Example 2 : Pipeline definition'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 2 : 管道定义'
- en: 'For the callback, since we have now added a LLM into the mix, we define a new
    custom callback that additionally defines the ***on_llm_start*** method. It has
    the same functionality as on_chain_start where the input arguments are saved into
    the callback object variables : ***chain_input*** and ***serialized_input***'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于回调，由于我们现在已经将 LLM 加入其中，我们定义了一个新的自定义回调，其中额外定义了 ***on_llm_start*** 方法。它的功能与 on_chain_start
    相同，输入参数被保存在回调对象变量中：***chain_input*** 和 ***serialized_input***。
- en: '![](../Images/afd7116322e83863c9057c4515c3d11c.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/afd7116322e83863c9057c4515c3d11c.png)'
- en: 'Example 2 : New custom callback with added on_llm_start method'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 2 : 新的自定义回调，添加了 on_llm_start 方法'
- en: Proposing the Pipeline structure
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提议管道结构
- en: At this stage, instead of evaluating the callback variables, we switch things
    up and propose the potential structure of the pipeline. Given what we had learnt
    from the first example, the following should be the potential structure of the
    pipeline
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，我们不再评估回调变量，而是提出管道的潜在结构。根据我们从第一个示例中学到的内容，以下应该是管道的潜在结构。
- en: '![](../Images/25c4f818730b753f5f092f0f5f20adfc.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25c4f818730b753f5f092f0f5f20adfc.png)'
- en: 'Example 2 : Proposed structure of pipeline'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 2 : 提议的管道结构'
- en: So we would have a ***RunnableSequence*** component as a wrapper for the pipeline.
    And additionally include a new ***ChatOpenAI*** object thats nested within the
    ***RunnableSequence*** component.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将有一个 ***RunnableSequence*** 组件作为管道的包装器。并且在 ***RunnableSequence*** 组件中嵌套一个新的
    ***ChatOpenAI*** 对象。
- en: '**Validating proposed structure using data**'
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**验证提议的结构使用数据**'
- en: We now look at the values of in the callback object to validate the above proposed
    structure.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们查看回调对象中的值，以验证上述提议的结构。
- en: We first look at the values stored in ***chain_input***
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先查看存储在 ***chain_input*** 中的值。
- en: '![](../Images/e5821967629f973e91c7862bca104b41.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e5821967629f973e91c7862bca104b41.png)'
- en: 'Example 2 : chain_input values'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 2 : chain_input 值'
- en: 'And then the ***serialized_input*** values :'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是 ***serialized_input*** 值：
- en: '![](../Images/e9819f105451d2ee4d17284071f5bb1c.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e9819f105451d2ee4d17284071f5bb1c.png)'
- en: 'Example 2 : serialized_input values'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2：serialized_input 值
- en: As well as a deeper inspection of the RunnableSequence components
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以及对RunnableSequence组件的更深入检查
- en: '![](../Images/39b910cc4e2d3d951bd01d0bcc4403e0.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/39b910cc4e2d3d951bd01d0bcc4403e0.png)'
- en: 'Example 2 : Closer inspection of RunnableSequence kwargs values'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2：仔细检查RunnableSequence的kwargs值
- en: '**Observations :**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**观察：**'
- en: 'The values of ***serialized_input*** validate the activation/trigger sequence
    that was proposed in the pipeline structure : RunnableSequence -> ChatPromptTemplate(qa_prompt1)
    -> RunnableLambda(retrieve_text) -> ChatPromptTemplate(qa_prompt2) -> ChatOpenAI'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***serialized_input***的值验证了在管道结构中提出的激活/触发序列：RunnableSequence -> ChatPromptTemplate(qa_prompt1)
    -> RunnableLambda(retrieve_text) -> ChatPromptTemplate(qa_prompt2) -> ChatOpenAI。'
- en: The values of ***chain_input*** also map correctly to the proposed structure.
    The only new addition is the fifth entry, which corresponds to the output from
    ***qa_prompt2***, which is fed as input to the ChatOpenAI object
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***chain_input***的值也正确映射到提议的结构中。唯一的新增加项是第五个条目，它对应于来自***qa_prompt2***的输出，这个输出作为输入传递给ChatOpenAI对象。'
- en: The components of the RunnableSequence kwargs also verify the proposed structure
    as the new ‘last’ element is the ChatOpenAI object
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RunnableSequence的组件kwargs也验证了提议的结构，因为新的“最后”元素是ChatOpenAI对象。
- en: By this stage, you should have an intuitive understanding of how LangChain pipelines
    are structured and when/how different callback events are triggered.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 到此阶段，你应该对LangChain管道的结构和不同回调事件的触发时机有了直观的理解。
- en: Though we have only focused on Chain and LLM events so far, these translate
    well to the other Tool and Agent triggers as well
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 虽然到目前为止我们只关注了链和LLM事件，但这些事件同样适用于其他工具和代理触发器。
- en: Example 3
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 3
- en: For the next example, we progress to a more complex chain involving a parallel
    implementation (RunnableParallel)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个示例，我们将处理一个更复杂的链，涉及并行实现（RunnableParallel）。
- en: Chain/Callback Implementation
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链/回调实现
- en: 'The chain has a parallel implementation as its first block which computes two
    values : context and question, which are then passed on to a prompt template to
    create the final prompt. The parallel functionality is required because we need
    to pass both context and question to the prompt template at the same time, where
    the context is retrived from a different source while the question is provided
    by the user.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 该链的第一个模块实现了并行功能，它计算出两个值：上下文和问题，这两个值随后被传递到一个提示模板中，以生成最终的提示。需要并行功能是因为我们需要同时将上下文和问题传递给提示模板，其中上下文从不同的源获取，而问题则由用户提供。
- en: For the context value, we use a static function ***get_data*** that returns
    the same piece of text (this is a dummy version of an actual retriever used in
    RAG applications).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上下文值，我们使用一个静态函数***get_data***，它返回相同的文本片段（这是一个用于RAG应用的实际检索器的虚拟版本）。
- en: '![](../Images/41d8affecbf0cbcce12300f47c983acb.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41d8affecbf0cbcce12300f47c983acb.png)'
- en: 'Example 3 : Chain implementation'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3：链的实现
- en: For the callback implementation, we use the same callback as the first example,
    CustomCallback1
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于回调实现，我们使用与第一个示例相同的回调，即CustomCallback1。
- en: Decoding the Callback/Pipeline Structure
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解码回调/管道结构
- en: Similar to previous examples, we start by looking at the outputs of ***chain_input***
    and ***serialized_input***
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的示例类似，我们首先查看***chain_input***和***serialized_input***的输出。
- en: '![](../Images/a92432cbeb40d6a15dac6a227e83d2ac.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a92432cbeb40d6a15dac6a227e83d2ac.png)'
- en: 'Example 3 : chain_input values'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3：chain_input 值
- en: '![](../Images/9ff2607608a8df2e0a2f9bbfbae4aa7f.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9ff2607608a8df2e0a2f9bbfbae4aa7f.png)'
- en: 'Example 3 : serialized_input values'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3：serialized_input 值
- en: We also look do a deep dive into the ***RunnableSequence*** (index 0) and ***RunnableParallel***
    (index 1) components
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将深入研究***RunnableSequence***（索引0）和***RunnableParallel***（索引1）组件。
- en: '![](../Images/6cd911544c6a75f852469b21689410bd.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6cd911544c6a75f852469b21689410bd.png)'
- en: '**Observations :**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**观察：**'
- en: Consistent with previous examples, the RunnableSequence acts as a wrapper to
    the whole pipeline. Its first component is the ***RunnableParallel*** component
    and its last component is the ***ChatPromptTemplate*** component
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与前面的示例一致，RunnableSequence作为整个管道的包装器。它的第一个组件是***RunnableParallel***组件，最后一个组件是***ChatPromptTemplate***组件。
- en: 'The RunnableParallel in turn encompasses two components : the ***RunnablePassthrough***
    and the ***RunnableLambda*** (***get_data***).'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: RunnableParallel包含两个组件：***RunnablePassthrough***和***RunnableLambda***（***get_data***）。
- en: 'The inputs to the first 4 components : ***RunnableSequence***, ***RunnableParallel***,
    ***RunnablePassthrough*** and ***RunnableLambda*** (***get_data***) are the same
    : the provided user input. Only for the final ***ChatPromptTemplate*** component
    do we have a different input, which is a dict with question and context keys.'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前四个组件的输入：***RunnableSequence***、***RunnableParallel***、***RunnablePassthrough***
    和 ***RunnableLambda***（***get_data***）是相同的：提供的用户输入。只有最终的***ChatPromptTemplate***组件的输入不同，这是一个包含问题和上下文键的字典。
- en: 'Based on these observations, we can infer the final structure of the pipeline
    as such :'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这些观察，我们可以推断出管道的最终结构如下：
- en: '![](../Images/dd8756214b5be8bafed7eec2f58d5bc1.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd8756214b5be8bafed7eec2f58d5bc1.png)'
- en: 'Example 3 : Structure of LangChain pipeline'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 示例3：LangChain管道结构
- en: Example 4
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例4
- en: Same as Example 3, but with an additional processing function for retrieving
    context
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 与示例3相同，但增加了一个用于检索上下文的处理函数。
- en: Chain/Callback Implementation
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Chain/Callback实现
- en: '![](../Images/0ef17c0768f777f46bdc7111b72cb469.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ef17c0768f777f46bdc7111b72cb469.png)'
- en: 'Example 4 : Chain implementation'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 示例4：链实现
- en: Decoding the Callback/Pipeline Structure
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解码回调/管道结构
- en: Similar to previous examples, we again look at the usual data points
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的示例类似，我们再次查看常见的数据点。
- en: '![](../Images/89b0a6509f53fd7a8e67ef3354784c60.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/89b0a6509f53fd7a8e67ef3354784c60.png)'
- en: 'Example 4 : chain_input values'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 示例4：chain_input值
- en: '![](../Images/8798ce2d935710f97f481fac0a1eaeff.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8798ce2d935710f97f481fac0a1eaeff.png)'
- en: 'Example 4 : serialized_input values'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 示例4：serialized_input值
- en: We observe that there are now 2 RunnableSequence components in our pipeline.
    So for the next step, we deep dive into both of these RunnableSequence components
    to see its internal components
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们观察到现在管道中有2个RunnableSequence组件。因此，下一步我们将深入探讨这两个RunnableSequence组件，查看其内部组成部分。
- en: '![](../Images/75d6cea7cc29c1a6cb021c70594d57aa.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/75d6cea7cc29c1a6cb021c70594d57aa.png)'
- en: '**Observations :**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**观察：**'
- en: For the first ***RunnableSequence*** components, its components are the same
    as the previous example. Starts with ***RunnableParallel*** and ends with ***ChatPromptTemplate***
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第一个***RunnableSequence***组件，它的组成部分与之前的示例相同。以***RunnableParallel***开始，以***ChatPromptTemplate***结束。
- en: For the second ***RunnableSequence***, its first component is the ***RunnableLambda
    (get_data)*** component and the last component is the ***RunnableLambda (format_docs)***
    component. This is basically the part of the pipeline responsible for generating
    the ‘context’ value. So its possible for a LangChain pipeline to have multiple
    RunnableSequence components to it. Especially when you are creating ‘sub-pipelines’
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第二个***RunnableSequence***，它的第一个组件是***RunnableLambda (get_data)***组件，最后一个组件是***RunnableLambda
    (format_docs)***组件。这基本上是管道中负责生成‘context’值的部分。因此，一个LangChain管道可以有多个RunnableSequence组件，特别是当你创建‘子管道’时。
- en: In this case, the creation of the ‘context’ value can be considered a pipeline
    by itself as it involves 2 different components chained together. So any such
    sub-pipelines in your primary pipeline will be wrapped up by a RunnableSequence
    component
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这种情况下，‘context’值的创建可以被视为一个独立的管道，因为它涉及到两个不同的组件连接在一起。所以在你的主管道中，任何这样的子管道都会被一个RunnableSequence组件包装。
- en: 3\. The values from chain_input also match up well with the pipeline components
    and their ordering (Not going to breakdown each component’s input here as it should
    be self-explanatory by now)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 3. chain_input中的值也与管道组件及其顺序很好地匹配（这里不再逐一分析每个组件的输入，因为现在应该很容易理解了）。
- en: So based on the above observations, the following is the identified structure
    of this pipeline
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 基于上述观察，以下是该管道的已识别结构。
- en: '![](../Images/6b5a3c01eed6ad1e1e32a0ab06a5196d.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6b5a3c01eed6ad1e1e32a0ab06a5196d.png)'
- en: 'Example 4 : Structure of LangChain pipeline'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 示例4：LangChain管道结构
- en: Conclusion
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: The objective of this post was to help develop an (intuitive) understanding
    of how LangChain pipelines are structured and how callback triggers are associated
    with the pipeline.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的目标是帮助培养对LangChain管道结构及回调触发器如何与管道关联的（直观）理解。
- en: By going through increasingly complex chain implementations, we were able to
    understand the general structure of LangChain pipelines and how a callback can
    be used for retrieving useful information. Developing an understanding of how
    LangChain pipelines are structured will also help facilitate the debugging process
    when errors are encountered.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通过逐步分析越来越复杂的链式实现，我们能够理解LangChain管道的一般结构以及如何使用回调函数来检索有用的信息。了解LangChain管道的结构还将有助于在遇到错误时促进调试过程。
- en: A very common use case for callbacks is retrieving intermediate steps and through
    these examples we saw how we can implement custom callbacks that track the input
    at each stage of the pipeline. Add to this our understanding of the structure
    of the LangChain pipelines, we can now easily pinpoint the input to each component
    of the pipeline and retrieve it accordingly.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 回调函数的一个非常常见的用例是检索中间步骤，通过这些示例，我们看到了如何实现自定义回调函数，跟踪管道中每个阶段的输入。结合我们对LangChain管道结构的理解，现在我们可以轻松地定位每个组件的输入并相应地检索它。
- en: Resources
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: '[Notebook with code/examples](https://github.com/rsk2327/AI-Workbook/blob/3c92744030b79f849867b15fc19ee1e738b83eab/LangChain/Callback%20Deep%20Dive.ipynb)
    : Contains few additional examples not covered in this note.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[包含代码/示例的笔记本](https://github.com/rsk2327/AI-Workbook/blob/3c92744030b79f849867b15fc19ee1e738b83eab/LangChain/Callback%20Deep%20Dive.ipynb)：包含一些本笔记中未覆盖的附加示例。'
- en: Unless specified otherwise, all images are created by the author.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，所有图片均由作者创作。
- en: '*In addition to Medium, I share my thoughts, ideas and other updates on* [*Linkedin*](https://www.linkedin.com/in/roshan-santhosh/)*.*'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '*除了Medium，我还在* [*Linkedin*](https://www.linkedin.com/in/roshan-santhosh/)*分享我的想法、创意和其他更新。*'
