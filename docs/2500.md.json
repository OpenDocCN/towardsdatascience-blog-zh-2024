["```py\ncargo test --target wasm32-wasip1\ncargo test --target wasm32-unknown-unknown \n```", "```py\nrustup target add thumbv7m-none-eabi\ncargo check --target thumbv7m-none-eabi\n```", "```py\ncargo tree --edges no-dev --format \"{p} {f}\"\n```", "```py\nrange-set-blaze v0.1.6 (C:\\deldir\\branches\\rustconf24.nostd) \n├── gen_ops v0.3.0\n├── itertools v0.13.0 default,use_alloc,use_std\n│   └── either v1.12.0 use_std\n├── num-integer v0.1.46 default,std\n│   └── num-traits v0.2.19 default,i128,std\n│       [build-dependencies]\n│       └── autocfg v1.3.0\n└── num-traits v0.2.19 default,i128,std (*)\n```", "```py\n[dependencies]\ngen_ops = \"0.3.0\"\nitertools = { version = \"0.13.0\", features=[\"use_alloc\"], default-features = false }\nnum-integer = { version = \"0.1.46\", default-features = false }\nnum-traits = { version = \"0.2.19\", features=[\"i128\"], default-features = false } \n```", "```py\n#![no_std]\nextern crate alloc;\n```", "```py\nuse std::cmp::max;\nuse std::cmp::Ordering;\nuse std::collections::BTreeMap;\n```", "```py\nuse core::cmp::max;\nuse core::cmp::Ordering;\nuse alloc::collections::BTreeMap;\n```", "```py\n[features]\ndefault = [\"foo\"]\nfoo = []\n```", "```py\n#![no_std]\nextern crate alloc;\n\n// ...\n\n#[cfg(feature = \"foo\")]\npub fn demo_read_ranges_from_file<P, T>(path: P) -> std::io::Result<RangeSetBlaze<T>>\nwhere\n    P: AsRef<std::path::Path>,\n    T: FromStr + Integer,\n{\n    todo!(\"This function is not yet implemented.\");\n}\n```", "```py\ncargo check # enables \"foo\", the default Cargo features\ncargo check --features foo # also enables \"foo\"\ncargo check --no-default-features # enables nothing\n```", "```py\n[features]\ndefault = [\"std\"]\nstd = []\n```", "```py\n#[cfg(feature = \"std\")]\nextern crate std;\n```", "```py\n#![no_std]\nextern crate alloc;\n\n#[cfg(feature = \"std\")]\nextern crate std;\n\n// ...\n\n#[cfg(feature = \"std\")]\npub fn demo_read_ranges_from_file<P, T>(path: P) -> std::io::Result<RangeSetBlaze<T>>\nwhere\n    P: AsRef<std::path::Path>,\n    T: FromStr + Integer,\n{\n    todo!(\"This function is not yet implemented.\");\n}\n```", "```py\n[features]\ndefault = [\"std\"]\nstd = [\"itertools/use_std\", \"num-traits/std\", \"num-integer/std\"]\n\n[dependencies]\nitertools = { version = \"0.13.0\", features = [\"use_alloc\"], default-features = false }\nnum-integer = { version = \"0.1.46\", default-features = false }\nnum-traits = { version = \"0.2.19\", features = [\"i128\"], default-features = false }\ngen_ops = \"0.4.0\"\n```", "```py\ncargo check # std\ncargo check --no-default-features # no_std\n```", "```py\n# DOES NOT TEST `no_std`\ncargo test --no-default-features\n```", "```py\n#[test]\nfn test_read_file_metadata() {\n    let metadata = std::fs::metadata(\"./\").unwrap();\n    assert!(metadata.is_dir());\n}\n```", "```py\n#![cfg(test)]\nuse std::prelude::v1::*;\nuse std::{format, print, println, vec};\n```", "```py\nqemu-system-arm --version\n```", "```py\ncargo new tests/embedded\n```", "```py\n[package]\nname = \"embedded\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nalloc-cortex-m = \"0.4.4\"\ncortex-m = \"0.7.7\"\ncortex-m-rt = \"0.7.3\"\ncortex-m-semihosting = \"0.5.0\"\npanic-halt = \"0.2.0\"\n# Change to refer to your top-level project\nrange-set-blaze = { path = \"../..\", default-features = false }\n```", "```py\n// Based on https://github.com/rust-embedded/cortex-m-quickstart/blob/master/examples/allocator.rs\n// and https://github.com/rust-lang/rust/issues/51540\n#![feature(alloc_error_handler)]\n#![no_main]\n#![no_std]\nextern crate alloc;\nuse alloc::string::ToString;\nuse alloc_cortex_m::CortexMHeap;\nuse core::{alloc::Layout, iter::FromIterator};\nuse cortex_m::asm;\nuse cortex_m_rt::entry;\nuse cortex_m_semihosting::{debug, hprintln};\nuse panic_halt as _;\n#[global_allocator]\nstatic ALLOCATOR: CortexMHeap = CortexMHeap::empty();\nconst HEAP_SIZE: usize = 1024; // in bytes\n#[alloc_error_handler]\nfn alloc_error(_layout: Layout) -> ! {\n    asm::bkpt();\n    loop {}\n}\n\n#[entry]\nfn main() -> ! {\n    unsafe { ALLOCATOR.init(cortex_m_rt::heap_start() as usize, HEAP_SIZE) }\n\n    // Test(s) goes here. Run only under emulation\n    use range_set_blaze::RangeSetBlaze;\n    let range_set_blaze = RangeSetBlaze::from_iter([100, 103, 101, 102, -3, -4]);\n    hprintln!(\"{:?}\", range_set_blaze.to_string());\n    if range_set_blaze.to_string() != \"-4..=-3, 100..=103\" {\n        debug::exit(debug::EXIT_FAILURE);\n    }\n\n    debug::exit(debug::EXIT_SUCCESS);\n    loop {}\n}\n```", "```py\nuse range_set_blaze::RangeSetBlaze;\nlet range_set_blaze = RangeSetBlaze::from_iter([100, 103, 101, 102, -3, -4]);\nhprintln!(\"{:?}\", range_set_blaze.to_string());\nif range_set_blaze.to_string() != \"-4..=-3, 100..=103\" {\n    debug::exit(debug::EXIT_FAILURE);\n}\n```", "```py\ncd tests/embedded\nwget https://raw.githubusercontent.com/rust-embedded/cortex-m-quickstart/master/build.rs\nwget https://raw.githubusercontent.com/rust-embedded/cortex-m-quickstart/master/memory.\n```", "```py\ncd tests/embedded\nInvoke-WebRequest -Uri 'https://raw.githubusercontent.com/rust-embedded/cortex-m-quickstart/master/build.rs' -OutFile 'build.rs'\nInvoke-WebRequest -Uri 'https://raw.githubusercontent.com/rust-embedded/cortex-m-quickstart/master/memory.x' -OutFile 'memory.x'\n```", "```py\n[target.thumbv7m-none-eabi]\nrunner = \"qemu-system-arm -cpu cortex-m3 -machine lm3s6965evb -nographic -semihosting-config enable=on,target=native -kernel\"\n\n[build]\ntarget = \"thumbv7m-none-eabi\"\n```", "```py\n# Setup\n# Make this subproject 'nightly' to support #![feature(alloc_error_handler)]\nrustup override set nightly\nrustup target add thumbv7m-none-eabi\n\n# If needed, cd tests/embedded\ncargo run\n```", "```py\n[package]\n# ... \ncategories = [\"no-std\", \"wasm\", \"embedded\"] # + others specific to your package\nkeywords = [\"no_std\", \"wasm\"] # + others specific to your package\n```", "```py\nuse heapless::{LinearMap, Vec};\n// …\nlet mut map: LinearMap<u8, Vec<usize, DIGIT_COUNT>, DIGIT_COUNT> = LinearMap::new();\n// …\nlet mut vec = Vec::default();\nvec.push(index).unwrap();\nmap.insert(*byte, vec).unwrap(); // actually copies\n```", "```py\nextern crate alloc; // remove this\n```", "```py\ntest_thumbv7m_none_eabi:\n    name: Setup and Check Embedded\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Set up Rust\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: stable\n          target: thumbv7m-none-eabi\n      - name: Install check stable and nightly\n        run: |\n          cargo check --target thumbv7m-none-eabi --no-default-features\n          rustup override set nightly\n          rustup target add thumbv7m-none-eabi\n          cargo check --target thumbv7m-none-eabi --no-default-features\n          sudo apt-get update && sudo apt-get install qemu qemu-system-arm\n      - name: Test Embedded (in nightly)\n        timeout-minutes: 1\n        run: |\n          cd tests/embedded\n          cargo run\n```"]