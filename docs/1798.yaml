- en: Nine Rust Cargo.toml Wats and Wat Nots
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 九个 Rust Cargo.toml 的 Wat 和 Wat Not
- en: 原文：[https://towardsdatascience.com/nine-rust-cargo-toml-wats-and-wat-nots-1e5e02e41648?source=collection_archive---------1-----------------------#2024-07-24](https://towardsdatascience.com/nine-rust-cargo-toml-wats-and-wat-nots-1e5e02e41648?source=collection_archive---------1-----------------------#2024-07-24)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/nine-rust-cargo-toml-wats-and-wat-nots-1e5e02e41648?source=collection_archive---------1-----------------------#2024-07-24](https://towardsdatascience.com/nine-rust-cargo-toml-wats-and-wat-nots-1e5e02e41648?source=collection_archive---------1-----------------------#2024-07-24)
- en: Master Cargo.toml formatting rules and avoid frustration
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 掌握 Cargo.toml 格式规则，避免挫败感
- en: '[](https://medium.com/@carlmkadie?source=post_page---byline--1e5e02e41648--------------------------------)[![Carl
    M. Kadie](../Images/9dbe27c76e9567136e5a7dc587f1fb15.png)](https://medium.com/@carlmkadie?source=post_page---byline--1e5e02e41648--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--1e5e02e41648--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--1e5e02e41648--------------------------------)
    [Carl M. Kadie](https://medium.com/@carlmkadie?source=post_page---byline--1e5e02e41648--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@carlmkadie?source=post_page---byline--1e5e02e41648--------------------------------)[![Carl
    M. Kadie](../Images/9dbe27c76e9567136e5a7dc587f1fb15.png)](https://medium.com/@carlmkadie?source=post_page---byline--1e5e02e41648--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--1e5e02e41648--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--1e5e02e41648--------------------------------)
    [Carl M. Kadie](https://medium.com/@carlmkadie?source=post_page---byline--1e5e02e41648--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--1e5e02e41648--------------------------------)
    ·8 min read·Jul 24, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--1e5e02e41648--------------------------------)
    ·阅读时长 8 分钟 ·2024年7月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/811e179337d8b0229e8200ca753b3c86.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/811e179337d8b0229e8200ca753b3c86.png)'
- en: 'Rust Cargo Suprises — Source: [https://openai.com/dall-e-2/](https://openai.com/dall-e-2/).
    All other figures from the author.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 'Rust Cargo 惊讶 — 来源: [https://openai.com/dall-e-2/](https://openai.com/dall-e-2/)。所有其他图表来自作者。'
- en: In JavaScript and other languages, we call [a surprising or inconsistent behavior
    a “Wat!”](https://www.destroyallsoftware.com/talks/wat) [that is, a “What!?”].
    For example, in JavaScript, an empty array plus an empty array produces an empty
    string, `[] + [] === ""`. Wat!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 和其他语言中，我们称 [这种令人惊讶或不一致的行为为“Wat!”](https://www.destroyallsoftware.com/talks/wat)
    [即“什么!?”]。例如，在 JavaScript 中，一个空数组加上一个空数组会产生一个空字符串，`[] + [] === ""`。Wat!
- en: At the other extreme, a language sometimes behaves with surprising consistency.
    I’m calling that a “Wat Not”.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个极端，某些语言表现出令人惊讶的一致性。我称之为“Wat Not”。
- en: Rust is generally (much) more consistent than JavaScript. Some Rust-related
    formats, however, offer surprises. Specifically, this article looks at nine wats
    and wat nots in `Cargo.toml`.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 通常（远远）比 JavaScript 更一致。然而，一些与 Rust 相关的格式却带来惊喜。具体来说，这篇文章将讨论 `Cargo.toml`
    中的九个“wat”和“wat not”。
- en: Recall that `Cargo.toml` is the manifest file that defines your Rust project’s
    configuration and dependencies. Its format, TOML (Tom's Obvious, Minimal Language),
    represents nested key/value pairs and/or arrays. JSON and YAML are similar formats.
    Like YAML, but unlike JSON, Tom designed TOML for easy reading and writing by
    humans.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，`Cargo.toml` 是定义 Rust 项目配置和依赖项的清单文件。它的格式 TOML（Tom's Obvious, Minimal Language）表示嵌套的键/值对和/或数组。JSON
    和 YAML 是类似的格式。Tom 设计 TOML 时，像 YAML 一样，但不同于 JSON，他的目标是让人类更容易阅读和写作。
- en: This journey of nine wats and wat nots will not be as entertaining as JavaScript’s
    quirks (thank goodness). However, if you’ve ever found `Cargo.toml`'s format confusing,
    I hope this article will help you feel better about yourself. Also, and most importantly,
    when you learn the nine wats and wat nots, I hope you will be able to write your
    `Cargo.toml` more easily and effectively.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这段包含九个“wat”和“wat not”的旅程可能不会像 JavaScript 的怪癖那样有趣（谢天谢地）。然而，如果你曾经觉得 `Cargo.toml`
    的格式令人困惑，希望这篇文章能让你对自己感觉更好。而且，更重要的是，当你学习了这九个“wat”和“wat not”之后，希望你能更轻松、更高效地编写 `Cargo.toml`。
- en: 'This article is not about “fixing” `Cargo.toml`. The file format is great at
    its main purpose: specifying the configuration and dependencies of a Rust project.
    Instead, the article is about understanding the format and its quirks.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本文并不是要“修复” `Cargo.toml`。该文件格式在其主要用途上表现得非常出色：指定 Rust 项目的配置和依赖项。相反，本文的目的是帮助理解这种格式及其怪癖。
- en: 'Wat 1: Dependencies vs. Profile Section Names'
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么？1：依赖项与配置文件部分名称
- en: 'You probably know how to add a `[dependencies]` section to your `Cargo.toml`.
    Such a section specifies release dependencies, for example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能知道如何向`Cargo.toml`添加`[dependencies]`部分。这样的部分指定发布依赖项，例如：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Along the same lines, you can specify development dependencies with a `[dev-dependencies]`
    section and build dependencies with a `[build-dependencies]` section.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，你可以通过`[dev-dependencies]`部分指定开发依赖，通过`[build-dependencies]`部分指定构建依赖。
- en: You may also need to set compiler options, for example, an optimization level
    and whether to include debugging information. You do that with *profile* sections
    for release, development, and build. Can you guess the names of these three sections?
    Is it `[profile]`, `[dev-profile]` and `[build-profile]`?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还需要设置编译器选项，例如优化级别和是否包含调试信息。你可以通过**配置文件**部分来设置这些选项，分别用于发布、开发和构建。你能猜出这三个部分的名称吗？是`[profile]`、`[dev-profile]`和`[build-profile]`吗？
- en: No! It’s `[profile.release]`, `[profile.dev]`, and `[profile.build]`. Wat?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 不！是`[profile.release]`、`[profile.dev]`和`[profile.build]`。什么？
- en: Would `[dev-profile]` be better than `[profile.dev]`? Would `[dependencies.dev]`
    be better than `[dev-dependencies]`?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`[dev-profile]`比`[profile.dev]`更好吗？`[dependencies.dev]`比`[dev-dependencies]`更好吗？'
- en: I personally prefer the names with dots. (In “Wat Not 9”, we’ll see the power
    of dots.) I am, however, willing to just remember the dependences work one way
    and profiles work another.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人更喜欢带点的名称。（在“什么？不是9”中，我们将看到点的强大功能。）不过，我也愿意记住依赖项和配置文件的工作方式不同。
- en: 'Wat 2: Dependency Inheritance'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么？2：依赖继承
- en: You might argue that dots are fine for profiles, but hyphens are better for
    dependencies because `[dev-dependencies]` inherits from `[dependencies]`. In other
    words, the dependencies in `[dependencies]` are also available in `[dev-dependencies]`.
    So, does this mean that `[build-dependencies]` inherits from `[dependencies]`?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会争辩说，点在配置文件中是可以的，但连字符在依赖项中更好，因为`[dev-dependencies]`继承自`[dependencies]`。换句话说，`[dependencies]`中的依赖项在`[dev-dependencies]`中也可以使用。那么，这是否意味着`[build-dependencies]`继承自`[dependencies]`？
- en: No! `[build-dependencies]` does not inherit from `[dependencies]`. Wat?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不！`[build-dependencies]`并不继承自`[dependencies]`。什么？
- en: I find this `Cargo.toml` behavior convenient but confusing.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得这种`Cargo.toml`的行为既方便又令人困惑。
- en: 'Wat 3: Default Keys'
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么？3：默认键
- en: 'You likely know that instead of this:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能知道，这样写不好：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'you can write this:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以这样写：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What’s the principle here? How in general TOML do you designate one key as the
    default key?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的原则是什么？在一般的TOML中，如何指定一个键为默认键？
- en: You can’t! General TOML has no default keys. Wat?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能！一般的TOML没有默认键。什么？
- en: Cargo TOML does special processing on the `version` key in the `[dependencies]`
    section. This is a Cargo-specific feature, not a general TOML feature. As far
    as I know, Cargo TOML offers no other default keys.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Cargo TOML对`[dependencies]`部分中的`version`键进行特殊处理。这是Cargo特有的功能，而不是一般的TOML功能。据我所知，Cargo
    TOML没有其他默认键。
- en: 'Wat 4: Sub-Features'
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么？4：子特性
- en: With `Cargo.toml` `[features]` you can create versions of your project that
    differ in their dependences. Those dependences may themselves differ in their
    features, which we’ll call sub-features.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`Cargo.toml`的`[features]`，你可以创建不同依赖项版本的项目。这些依赖项本身也可能在特性上有所不同，我们称之为子特性。
- en: 'Here we create two versions of our project. The default version depends on
    `getrandom` with default features. The `wasm` version depends on `getrandom` with
    the `js` sub-feature:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了项目的两个版本。默认版本依赖于`getrandom`，并使用默认特性。`wasm`版本依赖于`getrandom`，并使用`js`子特性：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, `wasm` is a feature of our project that depends on dependency
    alias `getrandom-rs` which represents the version of the `getrandom` crate with
    the `js` sub-feature.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，`wasm`是我们项目的一个特性，依赖于别名`getrandom-rs`，它表示带有`js`子特性的`getrandom` crate的版本。
- en: So, how can we give this same specification while avoiding the wordy `[dependencies.getrandom-js]`
    section?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何在避免冗长的`[dependencies.getrandom-js]`部分的同时，给出相同的规范呢？
- en: 'In `[features],` replace `getrandom-js"` with `"getrandom/js"`. We can just
    write:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在`[features]`中，将`getrandom-js`替换为`"getrandom/js"`。我们可以简单地写：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Wat!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 什么？
- en: In general, in `Cargo.toml`, a feature specification such as `wasm = ["getrandom/js"]`
    can list
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在`Cargo.toml`中，特性规范如`wasm = ["getrandom/js"]`可以列出
- en: other features
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他特性
- en: dependency aliases
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖别名
- en: dependencies
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖项
- en: one or more dependency “slash” a sub-feature
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个或多个依赖项“斜杠”一个子特性
- en: This is not standard TOML. Rather, it is a `Cargo.toml`-specific shorthand.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是标准TOML，而是`Cargo.toml`特有的简写。
- en: 'Bonus: Guess how you’d use the shorthand to say that your `wasm` feature should
    include `getrandom` with two sub-features: `js` and `test-in-browser`?'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 奖励：猜猜你如何使用简写来表示 `wasm` 特性应该包括 `getrandom`，并且有两个子特性：`js` 和 `test-in-browser`？
- en: 'Answer: List the dependency twice.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 答案：列出依赖项两次。
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Wat 5: Dependencies for Targets'
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wat 5：目标的依赖项
- en: We’ve seen how to specify dependencies for release, debug, and build.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何为发布、调试和构建指定依赖项。
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We’ve seen how to specify dependencies for various features:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何为各种特性指定依赖项：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How would you guess we specify dependences for various targets (e.g. a version
    of Linux, Windows, etc.)?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何猜测我们为各种目标（例如某个版本的 Linux、Windows 等）指定依赖项呢？
- en: 'We prefix `[dependences]` with `target.*TARGET_EXPRESSION*`, for example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `target.*TARGET_EXPRESSION*` 来前缀 `[dependences]`，例如：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Which, by the rules of general TOML means we can also say:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 按照一般 TOML 的规则，这也意味着我们可以这样说：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Wat!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Wat!
- en: 'I find this prefix syntax strange, but I can’t suggest a better alternative.
    I do, however, wonder why features couldn’t have been handle the same way:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得这个前缀语法很奇怪，但我无法提出更好的替代方案。不过，我确实好奇为什么特性不能以相同的方式处理：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Wat Not 6: Target cfg Expressions'
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wat Not 6：目标 cfg 表达式
- en: This is our first “Wat Not”, that is, it is something that surprised me with
    its consistency.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的第一个“Wat Not”，即它是以其一致性让我感到惊讶的部分。
- en: Instead of a concrete target such as `x86_64-pc-windows-msvc`, you may instead
    use a `cfg` expression in single quotes. For example,
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `cfg` 表达式（用单引号包裹）来代替具体的目标，如 `x86_64-pc-windows-msvc`。例如，
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: I don’t consider this a “wat!”. I think it is great.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我不认为这算是“wat!”，我认为这很棒。
- en: 'Recall that `cfg`, short for “configuration", is the Rust mechanism usually
    used to conditionally compile code. For example, in our `main.rs`, we can say:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾 `cfg`，它是“配置”（configuration）的缩写，是 Rust 用来有条件编译代码的机制。例如，在我们的 `main.rs` 中，我们可以写：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In `Cargo.toml`, in target expressions, pretty much the whole `[cfg](https://doc.rust-lang.org/reference/conditional-compilation.html)`
    [mini-language](https://doc.rust-lang.org/reference/conditional-compilation.html)
    is supported.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Cargo.toml` 中，目标表达式几乎支持整个 `[cfg](https://doc.rust-lang.org/reference/conditional-compilation.html)`
    [小语言](https://doc.rust-lang.org/reference/conditional-compilation.html)。
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The only parts of the `cfg` mini-language not supported are (I think) that you
    can’t set a value with the `--cfg` command line argument. Also, some cfg values
    such as `test` don’t make sense.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`cfg` 小语言中唯一不支持的部分是（我认为）你不能通过 `--cfg` 命令行参数设置一个值。另外，像 `test` 这样的 cfg 值没有意义。'
- en: 'Wat 7: Profiles for Targets'
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wat 7：目标的配置文件
- en: 'Recall from Wat 1 that you set compiler options with `[profile.release]`, `[profile.dev]`,
    and `[profile.build]`. For example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾 Wat 1，你可以通过 `[profile.release]`、`[profile.dev]` 和 `[profile.build]` 设置编译器选项。例如：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Guess how you set compiler options for a specific target, such as Windows? Is
    it this?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你能猜到如何为特定目标（如 Windows）设置编译器选项吗？是这样吗？
- en: '[PRE15]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'No. Instead, you create a new file named `.cargo/config.toml` and add this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 否。相反，你需要创建一个名为 `.cargo/config.toml` 的新文件，并添加以下内容：
- en: '[PRE16]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Wat!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Wat!
- en: In general, `Cargo.toml` only supports `target.*TARGET_EXPRESSION*` as the prefix
    of dependency section. You may not prefix a profile section. In `[.cargo/config.toml](https://doc.rust-lang.org/cargo/reference/config.html)`,
    however, you may have `[target.*TARGET_EXPRESSION*]` sections. In those sections,
    you may set environment variables that set compiler options.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，`Cargo.toml` 只支持 `target.*TARGET_EXPRESSION*` 作为依赖项部分的前缀。你不能为配置文件部分添加前缀。但是，在
    `[.cargo/config.toml](https://doc.rust-lang.org/cargo/reference/config.html)`
    中，你可以有 `[target.*TARGET_EXPRESSION*]` 部分。在这些部分中，你可以设置环境变量来设置编译器选项。
- en: 'Wat Not 8: TOML Lists'
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wat Not 8：TOML 列表
- en: '`Cargo.toml` supports two syntaxes for lists:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cargo.toml` 支持两种列表语法：'
- en: Inline Array
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内联数组
- en: Table Array
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格数组
- en: 'This example uses both:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子同时使用了以下两种：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Can we change the table array to an inline array? Yes!
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能把表格数组改成内联数组吗？可以！
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Can we change the inline array of features into a table array?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能把特性的内联数组改成表格数组吗？
- en: No. Inline arrays of simple values (here, strings) cannot be represented as
    table arrays. However, I consider this a “wat not”, not a “wat!” because this
    is a limitation of general TOML, not just of `Cargo.toml`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 否。内联数组（在这里是字符串类型）不能表示为表格数组。然而，我认为这算是一个“wat not”，而不是“wat!” 因为这是通用 TOML 的限制，而不仅仅是
    `Cargo.toml` 的限制。
- en: 'Aside: YAML format, like TOML format, offers two list syntaxes. However, both
    of YAMLs two syntaxes [work with simple values](https://www.yaml.info/learn/flowstyle.html).'
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 顺便提一下，YAML 格式和 TOML 格式一样，提供了两种列表语法。不过，YAML 的两种语法[都能与简单值一起使用](https://www.yaml.info/learn/flowstyle.html)。
- en: 'Wat Not 9: TOML Inlining, Sections, and Dots'
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wat Not 9：TOML 内联、节和点
- en: Here is a typical `Cargo.toml`. It mixes section syntax, such as `[dependences]`
    with inline syntax such as `getrandom = {version = "0.2", features = ["std", "test-in-browser"]}.`
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的`Cargo.toml`。它混合了部分语法，如`[dependences]`，以及内联语法，如`getrandom = {version
    = "0.2", features = ["std", "test-in-browser"]}`。
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Can we re-write it to be 100% inline? Yes.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能把它重写成100%内联的形式吗？可以。
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can also re-write it with maximum sections:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以将其重写为最大化使用部分：
- en: '[PRE21]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, let’s talk about dots. In TOML, dots are used to separate keys in
    nested tables. For example, `a.b.c` is a key `c` in a table `b` in a table `a`.
    Can we re-write our example with “lots of dots”? Yes:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们谈谈点号。在TOML中，点号用于分隔嵌套表中的键。例如，`a.b.c`表示表`a`中的表`b`中的键`c`。我们能用“很多点号”重写我们的例子吗？可以：
- en: '[PRE22]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: I appreciate TOML’s flexibility with respect to sections, inlining, and dots.
    I count that flexibility as a “wat not”. You may find all the choices it offers
    confusing. I, however, like that `Cargo.toml` lets us use TOML’s full power.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我很欣赏TOML在处理部分、内联和点号方面的灵活性。我将这种灵活性视为一种“wat not”。你可能会觉得它提供的所有选择令人困惑。不过，我喜欢`Cargo.toml`让我们能够充分发挥TOML的强大功能。
- en: You can see [this example on GitHub](https://github.com/CarlKCarlK/cargo-wat).
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以在[GitHub上查看这个例子](https://github.com/CarlKCarlK/cargo-wat)。
- en: Conclusion
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: '`Cargo.toml` is an essential tool in the Rust ecosystem, offering a balance
    of simplicity and flexibility that caters to both beginners and seasoned developers.
    Through the nine wats and wat nots we’ve explored, we’ve seen how this configuration
    file can sometimes surprise with its idiosyncrasies and yet impress with its consistency
    and power.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`Cargo.toml`是Rust生态系统中的一个重要工具，它提供了简单性和灵活性的平衡，既适合初学者，也适合经验丰富的开发者。通过我们探索的九个wats和wat
    nots，我们看到这个配置文件有时因其怪癖而令人惊讶，但也因其一致性和强大功能而让人印象深刻。'
- en: Understanding these quirks can save you from potential frustrations and enable
    you to leverage `Cargo.toml` to its fullest. From managing dependencies and profiles
    to handling target-specific configurations and features, the insights gained here
    will help you write more efficient and effective `Cargo.toml` files.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这些怪癖可以帮助你避免潜在的挫折，并使你能够最大化地利用`Cargo.toml`。从管理依赖关系和配置文件到处理特定目标的配置和特性，在这里获得的洞察将帮助你编写更高效、更有效的`Cargo.toml`文件。
- en: In essence, while `Cargo.toml` may have its peculiarities, these characteristics
    are often rooted in practical design choices that prioritize functionality and
    readability. Embrace these quirks, and you’ll find that `Cargo.toml` not only
    meets your project’s needs but also enhances your Rust development experience.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，虽然`Cargo.toml`可能有些特殊性，但这些特性通常根源于实际的设计选择，优先考虑功能性和可读性。接受这些怪癖，你会发现`Cargo.toml`不仅能满足你项目的需求，还能提升你的Rust开发体验。
- en: '*Please* [*follow Carl on Medium*](https://medium.com/@carlmkadie)*. I write
    on scientific programming in Rust and Python, machine learning, and statistics.
    I tend to write about one article per month.*'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*请* [*关注Carl在Medium上的文章*](https://medium.com/@carlmkadie)*。我在Rust和Python的科学编程、机器学习以及统计学方面写作。我通常每个月写一篇文章。*'
