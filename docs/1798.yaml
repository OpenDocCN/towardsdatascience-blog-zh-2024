- en: Nine Rust Cargo.toml Wats and Wat Nots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/nine-rust-cargo-toml-wats-and-wat-nots-1e5e02e41648?source=collection_archive---------1-----------------------#2024-07-24](https://towardsdatascience.com/nine-rust-cargo-toml-wats-and-wat-nots-1e5e02e41648?source=collection_archive---------1-----------------------#2024-07-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Master Cargo.toml formatting rules and avoid frustration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@carlmkadie?source=post_page---byline--1e5e02e41648--------------------------------)[![Carl
    M. Kadie](../Images/9dbe27c76e9567136e5a7dc587f1fb15.png)](https://medium.com/@carlmkadie?source=post_page---byline--1e5e02e41648--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--1e5e02e41648--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--1e5e02e41648--------------------------------)
    [Carl M. Kadie](https://medium.com/@carlmkadie?source=post_page---byline--1e5e02e41648--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--1e5e02e41648--------------------------------)
    ·8 min read·Jul 24, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/811e179337d8b0229e8200ca753b3c86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Rust Cargo Suprises — Source: [https://openai.com/dall-e-2/](https://openai.com/dall-e-2/).
    All other figures from the author.'
  prefs: []
  type: TYPE_NORMAL
- en: In JavaScript and other languages, we call [a surprising or inconsistent behavior
    a “Wat!”](https://www.destroyallsoftware.com/talks/wat) [that is, a “What!?”].
    For example, in JavaScript, an empty array plus an empty array produces an empty
    string, `[] + [] === ""`. Wat!
  prefs: []
  type: TYPE_NORMAL
- en: At the other extreme, a language sometimes behaves with surprising consistency.
    I’m calling that a “Wat Not”.
  prefs: []
  type: TYPE_NORMAL
- en: Rust is generally (much) more consistent than JavaScript. Some Rust-related
    formats, however, offer surprises. Specifically, this article looks at nine wats
    and wat nots in `Cargo.toml`.
  prefs: []
  type: TYPE_NORMAL
- en: Recall that `Cargo.toml` is the manifest file that defines your Rust project’s
    configuration and dependencies. Its format, TOML (Tom's Obvious, Minimal Language),
    represents nested key/value pairs and/or arrays. JSON and YAML are similar formats.
    Like YAML, but unlike JSON, Tom designed TOML for easy reading and writing by
    humans.
  prefs: []
  type: TYPE_NORMAL
- en: This journey of nine wats and wat nots will not be as entertaining as JavaScript’s
    quirks (thank goodness). However, if you’ve ever found `Cargo.toml`'s format confusing,
    I hope this article will help you feel better about yourself. Also, and most importantly,
    when you learn the nine wats and wat nots, I hope you will be able to write your
    `Cargo.toml` more easily and effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'This article is not about “fixing” `Cargo.toml`. The file format is great at
    its main purpose: specifying the configuration and dependencies of a Rust project.
    Instead, the article is about understanding the format and its quirks.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Wat 1: Dependencies vs. Profile Section Names'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You probably know how to add a `[dependencies]` section to your `Cargo.toml`.
    Such a section specifies release dependencies, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Along the same lines, you can specify development dependencies with a `[dev-dependencies]`
    section and build dependencies with a `[build-dependencies]` section.
  prefs: []
  type: TYPE_NORMAL
- en: You may also need to set compiler options, for example, an optimization level
    and whether to include debugging information. You do that with *profile* sections
    for release, development, and build. Can you guess the names of these three sections?
    Is it `[profile]`, `[dev-profile]` and `[build-profile]`?
  prefs: []
  type: TYPE_NORMAL
- en: No! It’s `[profile.release]`, `[profile.dev]`, and `[profile.build]`. Wat?
  prefs: []
  type: TYPE_NORMAL
- en: Would `[dev-profile]` be better than `[profile.dev]`? Would `[dependencies.dev]`
    be better than `[dev-dependencies]`?
  prefs: []
  type: TYPE_NORMAL
- en: I personally prefer the names with dots. (In “Wat Not 9”, we’ll see the power
    of dots.) I am, however, willing to just remember the dependences work one way
    and profiles work another.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wat 2: Dependency Inheritance'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might argue that dots are fine for profiles, but hyphens are better for
    dependencies because `[dev-dependencies]` inherits from `[dependencies]`. In other
    words, the dependencies in `[dependencies]` are also available in `[dev-dependencies]`.
    So, does this mean that `[build-dependencies]` inherits from `[dependencies]`?
  prefs: []
  type: TYPE_NORMAL
- en: No! `[build-dependencies]` does not inherit from `[dependencies]`. Wat?
  prefs: []
  type: TYPE_NORMAL
- en: I find this `Cargo.toml` behavior convenient but confusing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wat 3: Default Keys'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You likely know that instead of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'you can write this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What’s the principle here? How in general TOML do you designate one key as the
    default key?
  prefs: []
  type: TYPE_NORMAL
- en: You can’t! General TOML has no default keys. Wat?
  prefs: []
  type: TYPE_NORMAL
- en: Cargo TOML does special processing on the `version` key in the `[dependencies]`
    section. This is a Cargo-specific feature, not a general TOML feature. As far
    as I know, Cargo TOML offers no other default keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wat 4: Sub-Features'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With `Cargo.toml` `[features]` you can create versions of your project that
    differ in their dependences. Those dependences may themselves differ in their
    features, which we’ll call sub-features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we create two versions of our project. The default version depends on
    `getrandom` with default features. The `wasm` version depends on `getrandom` with
    the `js` sub-feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `wasm` is a feature of our project that depends on dependency
    alias `getrandom-rs` which represents the version of the `getrandom` crate with
    the `js` sub-feature.
  prefs: []
  type: TYPE_NORMAL
- en: So, how can we give this same specification while avoiding the wordy `[dependencies.getrandom-js]`
    section?
  prefs: []
  type: TYPE_NORMAL
- en: 'In `[features],` replace `getrandom-js"` with `"getrandom/js"`. We can just
    write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Wat!
  prefs: []
  type: TYPE_NORMAL
- en: In general, in `Cargo.toml`, a feature specification such as `wasm = ["getrandom/js"]`
    can list
  prefs: []
  type: TYPE_NORMAL
- en: other features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dependency aliases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: one or more dependency “slash” a sub-feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is not standard TOML. Rather, it is a `Cargo.toml`-specific shorthand.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus: Guess how you’d use the shorthand to say that your `wasm` feature should
    include `getrandom` with two sub-features: `js` and `test-in-browser`?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Answer: List the dependency twice.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Wat 5: Dependencies for Targets'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve seen how to specify dependencies for release, debug, and build.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ve seen how to specify dependencies for various features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How would you guess we specify dependences for various targets (e.g. a version
    of Linux, Windows, etc.)?
  prefs: []
  type: TYPE_NORMAL
- en: 'We prefix `[dependences]` with `target.*TARGET_EXPRESSION*`, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Which, by the rules of general TOML means we can also say:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Wat!
  prefs: []
  type: TYPE_NORMAL
- en: 'I find this prefix syntax strange, but I can’t suggest a better alternative.
    I do, however, wonder why features couldn’t have been handle the same way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Wat Not 6: Target cfg Expressions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is our first “Wat Not”, that is, it is something that surprised me with
    its consistency.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of a concrete target such as `x86_64-pc-windows-msvc`, you may instead
    use a `cfg` expression in single quotes. For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: I don’t consider this a “wat!”. I think it is great.
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall that `cfg`, short for “configuration", is the Rust mechanism usually
    used to conditionally compile code. For example, in our `main.rs`, we can say:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In `Cargo.toml`, in target expressions, pretty much the whole `[cfg](https://doc.rust-lang.org/reference/conditional-compilation.html)`
    [mini-language](https://doc.rust-lang.org/reference/conditional-compilation.html)
    is supported.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The only parts of the `cfg` mini-language not supported are (I think) that you
    can’t set a value with the `--cfg` command line argument. Also, some cfg values
    such as `test` don’t make sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wat 7: Profiles for Targets'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Recall from Wat 1 that you set compiler options with `[profile.release]`, `[profile.dev]`,
    and `[profile.build]`. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Guess how you set compiler options for a specific target, such as Windows? Is
    it this?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'No. Instead, you create a new file named `.cargo/config.toml` and add this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Wat!
  prefs: []
  type: TYPE_NORMAL
- en: In general, `Cargo.toml` only supports `target.*TARGET_EXPRESSION*` as the prefix
    of dependency section. You may not prefix a profile section. In `[.cargo/config.toml](https://doc.rust-lang.org/cargo/reference/config.html)`,
    however, you may have `[target.*TARGET_EXPRESSION*]` sections. In those sections,
    you may set environment variables that set compiler options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Wat Not 8: TOML Lists'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Cargo.toml` supports two syntaxes for lists:'
  prefs: []
  type: TYPE_NORMAL
- en: Inline Array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Table Array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This example uses both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Can we change the table array to an inline array? Yes!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Can we change the inline array of features into a table array?
  prefs: []
  type: TYPE_NORMAL
- en: No. Inline arrays of simple values (here, strings) cannot be represented as
    table arrays. However, I consider this a “wat not”, not a “wat!” because this
    is a limitation of general TOML, not just of `Cargo.toml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Aside: YAML format, like TOML format, offers two list syntaxes. However, both
    of YAMLs two syntaxes [work with simple values](https://www.yaml.info/learn/flowstyle.html).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Wat Not 9: TOML Inlining, Sections, and Dots'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here is a typical `Cargo.toml`. It mixes section syntax, such as `[dependences]`
    with inline syntax such as `getrandom = {version = "0.2", features = ["std", "test-in-browser"]}.`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Can we re-write it to be 100% inline? Yes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also re-write it with maximum sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let’s talk about dots. In TOML, dots are used to separate keys in
    nested tables. For example, `a.b.c` is a key `c` in a table `b` in a table `a`.
    Can we re-write our example with “lots of dots”? Yes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: I appreciate TOML’s flexibility with respect to sections, inlining, and dots.
    I count that flexibility as a “wat not”. You may find all the choices it offers
    confusing. I, however, like that `Cargo.toml` lets us use TOML’s full power.
  prefs: []
  type: TYPE_NORMAL
- en: You can see [this example on GitHub](https://github.com/CarlKCarlK/cargo-wat).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Cargo.toml` is an essential tool in the Rust ecosystem, offering a balance
    of simplicity and flexibility that caters to both beginners and seasoned developers.
    Through the nine wats and wat nots we’ve explored, we’ve seen how this configuration
    file can sometimes surprise with its idiosyncrasies and yet impress with its consistency
    and power.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding these quirks can save you from potential frustrations and enable
    you to leverage `Cargo.toml` to its fullest. From managing dependencies and profiles
    to handling target-specific configurations and features, the insights gained here
    will help you write more efficient and effective `Cargo.toml` files.
  prefs: []
  type: TYPE_NORMAL
- en: In essence, while `Cargo.toml` may have its peculiarities, these characteristics
    are often rooted in practical design choices that prioritize functionality and
    readability. Embrace these quirks, and you’ll find that `Cargo.toml` not only
    meets your project’s needs but also enhances your Rust development experience.
  prefs: []
  type: TYPE_NORMAL
- en: '*Please* [*follow Carl on Medium*](https://medium.com/@carlmkadie)*. I write
    on scientific programming in Rust and Python, machine learning, and statistics.
    I tend to write about one article per month.*'
  prefs: []
  type: TYPE_NORMAL
