- en: Setting A Dockerized Python Environment — The Hard Way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0?source=collection_archive---------2-----------------------#2024-02-13](https://towardsdatascience.com/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0?source=collection_archive---------2-----------------------#2024-02-13)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[](https://medium.com/@rami.krispin?source=post_page---byline--e62531bca7a0--------------------------------)[![Rami
    Krispin](../Images/8af28c282d42a2a27c28aa8af4c8d482.png)](https://medium.com/@rami.krispin?source=post_page---byline--e62531bca7a0--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--e62531bca7a0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--e62531bca7a0--------------------------------)
    [Rami Krispin](https://medium.com/@rami.krispin?source=post_page---byline--e62531bca7a0--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--e62531bca7a0--------------------------------)
    ·9 min read·Feb 13, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: This post will review different methods to run a dockerized Python environment
    from the command line (CLI). Am I recommending you run your Python environment
    from the CLI? **Absolutely not!**
  prefs: []
  type: TYPE_NORMAL
- en: There are better ways to set up a Python development environment, such as using
    [VScode and the Dev Containers extension](https://github.com/RamiKrispin/vscode-python).
    We will use the “hard way” to set up a Python environment from the CLI for learning
    purposes. We will review different approaches to launching a container with the
    run command and see how to customize a built-in image using the Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/acbfde2cb642aa103b6f28af32df61d0.png)'
  prefs: []
  type: TYPE_IMG
- en: A Pixal Python Snake (created by the author with Midjourney)
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with this tutorial, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Desktop (or equivalent) if you are using a macOS or Windows OS machine,
    or Docker installed if you are using a Linux OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker Hub account to pull the image from.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throughout this tutorial, we will use the official Python image — `python:3.1o`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s get started by pulling the official Python 3.10 image from Docker Hub.
    First, let’s log in to Docker Hub by using the `docker login`command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will use the `docker pull` command from the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If this is the first time you pull the image, you should expect the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can review the image details with the use of the `docker images` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Before running the container, let’s review the image metadata with the `docker
    inspect` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return the below **JSON** output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ispect` command provides a lot of useful information about the image,
    such as the layers information, the image size, the hardware architecture, etc.
    As we want to run the image, the most interesting detail is the [CMD](https://docs.docker.com/engine/reference/builder/#cmd)
    setting. The `CMD`command in the Dockerfile defines what command to execute during
    the container launch time. We can parse from the above output the `CMD` information
    with the [jq](https://jqlang.github.io/jq/) package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the image is set to execute the `python3` command during the
    container run time. Let’s now launch the container using the `run` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And… nothing happens. The reason for that, in short, is that we need to give
    Docker access to the terminal. We will use the interactive and TTY arguments to
    run the image in an interactive mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This will attach the terminal to the container and open Python inside the container:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b066a01e44128424e719f9428d280fc9.png)'
  prefs: []
  type: TYPE_IMG
- en: Running the Python image in interactive mode (screenshot by the author)
  prefs: []
  type: TYPE_NORMAL
- en: 'While we were able to launch Python inside a container, it is not as useful:'
  prefs: []
  type: TYPE_NORMAL
- en: We cannot create, edit, and run scripts inside the Python interpreter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, the Python image comes with a limited number of libraries. In this
    mode, you cannot add additional ones
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Last but not least, the container is ephemeral. Once you stop it, all the work
    is lost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, if we will try to load pandas, we will get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/574f93ea2b2baadd9a6e412773b40e20.png)'
  prefs: []
  type: TYPE_IMG
- en: Trying to load the Pandas library (screenshot by the author)
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following sections, we will address those issues by creating a Dockerfile
    and customizing the base image functionality. This includes adding the following
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: Set a virtual environment and install packages with a requirements file. For
    simplicity,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install a `vim` editor to edit files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the `CMD` command to open a shell terminal upon launch (as opposed to
    the Python interpreter). This will enable us to create new scripts, edit, and
    execute from the terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customize the Base Image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To customize the Python environment and make the above changes, we will create
    a Dockerfile with the following functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the Python image — `python:3.10`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Set a virtual environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install required libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Install vim editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expose a bash terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a Python Virtual Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set up a Python virtual environment, we will use the following two helper
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`requirements.txt`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This file defines the list of Python libraries to install in the virtual environment.
    For example, in this case, we will install the Pandas library, version 2.0.3\.
    Generally, I also install the wheels library, which handles C dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The next helper file is the below bash script, which sets the virtual environment
    and installs the required libraries from the `requirements.txt` file.
  prefs: []
  type: TYPE_NORMAL
- en: '`set_python_env.sh`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** We use a variable (marked as `$1`) to define the environment name,
    which will be assigned to the `PYTHON_ENV` variable. Using variables during the
    build is a good practice, as it enables us to modify some of the image characteristics
    without modifying the code. We will assign the variable via the Dockerfile.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s explain the following concatenate code from the above bash script that
    sets the virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The above three lines of code include three concatenate expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: First, the `python3 -m venv /opt/$PYTHON_ENV` set a virtual environment with
    the `venv` command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, add the virtual environment path to the `PATH` variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third, add to the `.bashrc` file the activate command of the environment. This
    will ensure that whenever we launch the terminal, it will activate this virtual
    environment by default (otherwise, you will have to do it manually upon the launch
    of the environment)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the environment is set, we use the `source` command to activate the environment,
    and the `pip3` command to install the libraries inside the environment.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Dockerfile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After we review the helper files, let's see how they are incorporated inside
    the below Dockerfile.
  prefs: []
  type: TYPE_NORMAL
- en: '`Dockerfile`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are using the same image — `python:3.10`as our base image.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we set an argument named `PYTHON_ENV` with the `ARG` command to define
    the virtual environment name. We set`my_env` as the default value, which can be
    modified during the build time using the `arg` argument. We use the `PYTHON_ENV`
    argument to set an environment variable as well.
  prefs: []
  type: TYPE_NORMAL
- en: Before setting the virtual environment, we will create inside the image a new
    library under the root folder named `requirements` and use the `COPY` command
    to copy the above helper files — `requirements.txt` and `set_my_python.sh` to
    the `requirements` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we call the bash script — `set_my_python.sh` , which sets the virtual
    environment and installs the required libraries. As mentioned above, we use the
    `PYTHON_ENV` variable as an argument with the `set_my_python.sh` file to set the
    virtual environment name dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `apt` command to install **vim** — a CLI editor. This will enable
    us to edit code on via the container CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Last but not least, use the `CMD` command to launch a shell terminal using
    bash:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'At this point, we have the below files in the local folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now go ahead and build the image with the `docker build` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s run again the docker images command to review the current images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: As you can note, adding the virtual environment and installing the packages
    added about 250 Mb to the image size.
  prefs: []
  type: TYPE_NORMAL
- en: Running the Python Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After we built the image, let’s launch the image with the `docker run` command
    and check if the above properties are defined as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This launches the image in interactive mode, and opens a bash terminal as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6898d42a4462a0bbb0ea5a3826cada26.png)'
  prefs: []
  type: TYPE_IMG
- en: Launching the container via the shell terminal (screenshot by the author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can notice in the above screenshot, it launched the container inside
    the bash terminal, and the virtual environment is set as expected as `my_env`.
    The `pandas` library was installed and can be loaded, and we can now edit files
    from the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: One issue to take care of is that the container is still ephemeral. Therefore,
    any code we create inside the image is not exportable and will be lost after we
    stop the container from running.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple solution is to mount a volume with the `volume` argument. For simplicity,
    we will go ahead and mount the local folder, where we keep the Dockerfile and
    the helper files, to a new folder inside the container named `my_scripts`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a8623245254898dcff248d1bac468805.png)'
  prefs: []
  type: TYPE_IMG
- en: Mounting a local volume to the container (screenshot by the author)
  prefs: []
  type: TYPE_NORMAL
- en: Once the folder is mounted, any file that is created, modified, or deleted from
    the mounted folder inside the container will be reflected to the local folder.
    This enables you to maintain your code when stopping the container.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial, we reviewed how to set a dockerized Python environment using
    the command line. While this is neither a practical nor recommended approach to
    develop with Python, it is a great learning experience of Docker core commands
    and basic functionalities. We show how we can easily take a built-in image and
    customize it according to our needs. Last but not least, we saw how to mount a
    local folder to the container with the volume argument to transfer the container
    from an ephemeral mode to a persistent mode.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A full tutorial for setting up a Dockerized Python environment with VScode and
    the Dev Containers — [https://github.com/RamiKrispin/vscode-python](https://github.com/RamiKrispin/vscode-python)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting a dockerized Python development environment with GitHub template — [https://medium.com/@rami.krispin/setting-a-dockerized-python-development-environment-template-de2400c4812b](https://medium.com/@rami.krispin/setting-a-dockerized-python-development-environment-template-de2400c4812b)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker vs. virtual environment — [https://medium.com/@rami.krispin/running-python-r-with-docker-vs-virtual-environment-4a62ed36900f](https://medium.com/@rami.krispin/running-python-r-with-docker-vs-virtual-environment-4a62ed36900f)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dockerfile reference — [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
