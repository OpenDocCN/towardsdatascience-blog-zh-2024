- en: Setting A Dockerized Python Environment — The Hard Way
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置一个Docker化的Python环境——硬方法
- en: 原文：[https://towardsdatascience.com/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0?source=collection_archive---------2-----------------------#2024-02-13](https://towardsdatascience.com/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0?source=collection_archive---------2-----------------------#2024-02-13)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0?source=collection_archive---------2-----------------------#2024-02-13](https://towardsdatascience.com/setting-a-dockerized-python-environment-the-hard-way-e62531bca7a0?source=collection_archive---------2-----------------------#2024-02-13)
- en: '[](https://medium.com/@rami.krispin?source=post_page---byline--e62531bca7a0--------------------------------)[![Rami
    Krispin](../Images/8af28c282d42a2a27c28aa8af4c8d482.png)](https://medium.com/@rami.krispin?source=post_page---byline--e62531bca7a0--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--e62531bca7a0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--e62531bca7a0--------------------------------)
    [Rami Krispin](https://medium.com/@rami.krispin?source=post_page---byline--e62531bca7a0--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@rami.krispin?source=post_page---byline--e62531bca7a0--------------------------------)[![Rami
    Krispin](../Images/8af28c282d42a2a27c28aa8af4c8d482.png)](https://medium.com/@rami.krispin?source=post_page---byline--e62531bca7a0--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--e62531bca7a0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--e62531bca7a0--------------------------------)
    [Rami Krispin](https://medium.com/@rami.krispin?source=post_page---byline--e62531bca7a0--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--e62531bca7a0--------------------------------)
    ·9 min read·Feb 13, 2024
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--e62531bca7a0--------------------------------)
    ·阅读时长9分钟·2024年2月13日
- en: --
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: This post will review different methods to run a dockerized Python environment
    from the command line (CLI). Am I recommending you run your Python environment
    from the CLI? **Absolutely not!**
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将回顾从命令行（CLI）运行Docker化Python环境的不同方法。我是否推荐你从CLI运行Python环境？**绝对不！**
- en: There are better ways to set up a Python development environment, such as using
    [VScode and the Dev Containers extension](https://github.com/RamiKrispin/vscode-python).
    We will use the “hard way” to set up a Python environment from the CLI for learning
    purposes. We will review different approaches to launching a container with the
    run command and see how to customize a built-in image using the Dockerfile.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更好的方式来设置Python开发环境，比如使用[VScode和Dev Containers扩展](https://github.com/RamiKrispin/vscode-python)。但为了学习目的，我们将使用“硬方法”通过CLI来设置Python环境。我们将回顾使用run命令启动容器的不同方法，并了解如何通过Dockerfile定制内置镜像。
- en: '![](../Images/acbfde2cb642aa103b6f28af32df61d0.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/acbfde2cb642aa103b6f28af32df61d0.png)'
- en: A Pixal Python Snake (created by the author with Midjourney)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一只由作者使用Midjourney创建的Pixal Python Snake
- en: Prerequisites
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: 'To follow along with this tutorial, you will need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本教程进行操作，您需要以下内容：
- en: Docker Desktop (or equivalent) if you are using a macOS or Windows OS machine,
    or Docker installed if you are using a Linux OS
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用的是macOS或Windows操作系统的机器，则需要安装Docker Desktop（或等效工具）；如果您使用的是Linux操作系统，则需要安装Docker。
- en: Docker Hub account to pull the image from.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要一个Docker Hub账户来拉取镜像。
- en: Throughout this tutorial, we will use the official Python image — `python:3.1o`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个教程中，我们将使用官方的Python镜像——`python:3.10`。
- en: Getting Started
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'Let’s get started by pulling the official Python 3.10 image from Docker Hub.
    First, let’s log in to Docker Hub by using the `docker login`command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从Docker Hub拉取官方的Python 3.10镜像。首先，使用`docker login`命令登录到Docker Hub：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we will use the `docker pull` command from the terminal:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用终端中的`docker pull`命令：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If this is the first time you pull the image, you should expect the following
    output:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是您第一次拉取镜像，您应该期待以下输出：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can review the image details with the use of the `docker images` command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`docker images`命令查看镜像详细信息：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Before running the container, let’s review the image metadata with the `docker
    inspect` command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行容器之前，让我们使用`docker inspect`命令来查看镜像元数据：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will return the below **JSON** output:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回以下**JSON**输出：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `ispect` command provides a lot of useful information about the image,
    such as the layers information, the image size, the hardware architecture, etc.
    As we want to run the image, the most interesting detail is the [CMD](https://docs.docker.com/engine/reference/builder/#cmd)
    setting. The `CMD`command in the Dockerfile defines what command to execute during
    the container launch time. We can parse from the above output the `CMD` information
    with the [jq](https://jqlang.github.io/jq/) package:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`ispect` 命令提供了有关镜像的很多有用信息，例如层信息、镜像大小、硬件架构等。因为我们想运行该镜像，最有趣的细节是 [CMD](https://docs.docker.com/engine/reference/builder/#cmd)
    设置。Dockerfile 中的 `CMD` 命令定义了容器启动时要执行的命令。我们可以通过上面的输出解析 `CMD` 信息，使用 [jq](https://jqlang.github.io/jq/)
    包：'
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see, the image is set to execute the `python3` command during the
    container run time. Let’s now launch the container using the `run` command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，镜像被设置为在容器运行时执行 `python3` 命令。现在，让我们使用 `run` 命令启动容器：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And… nothing happens. The reason for that, in short, is that we need to give
    Docker access to the terminal. We will use the interactive and TTY arguments to
    run the image in an interactive mode:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后……没有任何反应。简而言之，原因是我们需要给 Docker 终端访问权限。我们将使用交互模式和 TTY 参数来运行镜像：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This will attach the terminal to the container and open Python inside the container:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把终端连接到容器并在容器内打开 Python：
- en: '![](../Images/b066a01e44128424e719f9428d280fc9.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b066a01e44128424e719f9428d280fc9.png)'
- en: Running the Python image in interactive mode (screenshot by the author)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互模式下运行 Python 镜像（截图由作者提供）
- en: 'While we were able to launch Python inside a container, it is not as useful:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们能够在容器内启动 Python，但这样做并不太实用：
- en: We cannot create, edit, and run scripts inside the Python interpreter
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们无法在 Python 解释器内创建、编辑和运行脚本
- en: By default, the Python image comes with a limited number of libraries. In this
    mode, you cannot add additional ones
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，Python 镜像仅包含有限的库。在这种模式下，你无法添加额外的库
- en: Last but not least, the container is ephemeral. Once you stop it, all the work
    is lost
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，容器是短暂的。一旦你停止它，所有的工作都会丢失
- en: 'For example, if we will try to load pandas, we will get the following error:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们尝试加载 pandas，我们将遇到以下错误：
- en: '![](../Images/574f93ea2b2baadd9a6e412773b40e20.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/574f93ea2b2baadd9a6e412773b40e20.png)'
- en: Trying to load the Pandas library (screenshot by the author)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试加载 Pandas 库（截图由作者提供）
- en: 'In the following sections, we will address those issues by creating a Dockerfile
    and customizing the base image functionality. This includes adding the following
    features:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将通过创建 Dockerfile 和自定义基础镜像功能来解决这些问题。这包括添加以下功能：
- en: Set a virtual environment and install packages with a requirements file. For
    simplicity,
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置虚拟环境并使用 requirements 文件安装包。为了简化，
- en: Install a `vim` editor to edit files
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装一个 `vim` 编辑器以编辑文件
- en: Change the `CMD` command to open a shell terminal upon launch (as opposed to
    the Python interpreter). This will enable us to create new scripts, edit, and
    execute from the terminal
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改 `CMD` 命令以在启动时打开一个 shell 终端（而不是 Python 解释器）。这将使我们能够从终端创建新脚本、编辑并执行它们
- en: Customize the Base Image
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义基础镜像
- en: 'To customize the Python environment and make the above changes, we will create
    a Dockerfile with the following functionality:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自定义 Python 环境并进行上述更改，我们将创建一个包含以下功能的 Dockerfile：
- en: Import the Python image — `python:3.10`
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入 Python 镜像 — `python:3.10`
- en: Set a virtual environment
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置虚拟环境
- en: Install required libraries
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装所需的库
- en: Install vim editor
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 vim 编辑器
- en: Expose a bash terminal
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴露一个 bash 终端
- en: Setting a Python Virtual Environment
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Python 虚拟环境
- en: 'To set up a Python virtual environment, we will use the following two helper
    files:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置一个 Python 虚拟环境，我们将使用以下两个辅助文件：
- en: '`requirements.txt`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`requirements.txt`'
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This file defines the list of Python libraries to install in the virtual environment.
    For example, in this case, we will install the Pandas library, version 2.0.3\.
    Generally, I also install the wheels library, which handles C dependencies.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件定义了要在虚拟环境中安装的 Python 库列表。例如，在这种情况下，我们将安装 Pandas 库，版本为 2.0.3。通常，我还会安装 wheels
    库，它处理 C 语言依赖。
- en: The next helper file is the below bash script, which sets the virtual environment
    and installs the required libraries from the `requirements.txt` file.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个辅助文件是下面的 bash 脚本，它设置虚拟环境并从 `requirements.txt` 文件中安装所需的库。
- en: '`set_python_env.sh`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`set_python_env.sh`'
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Note:** We use a variable (marked as `$1`) to define the environment name,
    which will be assigned to the `PYTHON_ENV` variable. Using variables during the
    build is a good practice, as it enables us to modify some of the image characteristics
    without modifying the code. We will assign the variable via the Dockerfile.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 我们使用一个变量（标记为`$1`）来定义环境名称，该名称将被赋值给`PYTHON_ENV`变量。在构建过程中使用变量是一种良好的做法，因为它使我们能够在不修改代码的情况下修改镜像的某些特性。我们将在Dockerfile中为变量赋值。'
- en: 'Let’s explain the following concatenate code from the above bash script that
    sets the virtual environment:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释一下来自上述bash脚本的以下拼接代码，它设置了虚拟环境：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The above three lines of code include three concatenate expressions:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上述三行代码包括三个拼接表达式：
- en: First, the `python3 -m venv /opt/$PYTHON_ENV` set a virtual environment with
    the `venv` command
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一，使用`python3 -m venv /opt/$PYTHON_ENV`命令设置一个虚拟环境。
- en: Second, add the virtual environment path to the `PATH` variable
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二，向`PATH`变量中添加虚拟环境路径。
- en: Third, add to the `.bashrc` file the activate command of the environment. This
    will ensure that whenever we launch the terminal, it will activate this virtual
    environment by default (otherwise, you will have to do it manually upon the launch
    of the environment)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三，向`.bashrc`文件中添加环境激活命令。这将确保每次启动终端时，默认激活这个虚拟环境（否则，你需要在启动环境时手动激活）。
- en: Once the environment is set, we use the `source` command to activate the environment,
    and the `pip3` command to install the libraries inside the environment.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 环境设置完成后，我们使用`source`命令激活环境，并使用`pip3`命令在环境中安装库。
- en: Creating a Dockerfile
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Dockerfile
- en: After we review the helper files, let's see how they are incorporated inside
    the below Dockerfile.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查了辅助文件后，让我们看看它们如何在下面的Dockerfile中被引用。
- en: '`Dockerfile`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dockerfile`'
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As you can see, we are using the same image — `python:3.10`as our base image.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们使用相同的镜像——`python:3.10`作为我们的基础镜像。
- en: Next, we set an argument named `PYTHON_ENV` with the `ARG` command to define
    the virtual environment name. We set`my_env` as the default value, which can be
    modified during the build time using the `arg` argument. We use the `PYTHON_ENV`
    argument to set an environment variable as well.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`ARG`命令设置一个名为`PYTHON_ENV`的参数，用于定义虚拟环境名称。我们将`my_env`设置为默认值，并且可以在构建时使用`arg`参数进行修改。我们还使用`PYTHON_ENV`参数来设置一个环境变量。
- en: Before setting the virtual environment, we will create inside the image a new
    library under the root folder named `requirements` and use the `COPY` command
    to copy the above helper files — `requirements.txt` and `set_my_python.sh` to
    the `requirements` folder.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置虚拟环境之前，我们将在镜像的根目录下创建一个名为`requirements`的新文件夹，并使用`COPY`命令将上述辅助文件——`requirements.txt`和`set_my_python.sh`复制到`requirements`文件夹中。
- en: Next, we call the bash script — `set_my_python.sh` , which sets the virtual
    environment and installs the required libraries. As mentioned above, we use the
    `PYTHON_ENV` variable as an argument with the `set_my_python.sh` file to set the
    virtual environment name dynamically.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们调用bash脚本`set_my_python.sh`，该脚本设置虚拟环境并安装所需的库。如上所述，我们使用`PYTHON_ENV`变量作为参数，配合`set_my_python.sh`文件动态设置虚拟环境名称。
- en: We use the `apt` command to install **vim** — a CLI editor. This will enable
    us to edit code on via the container CLI.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`apt`命令安装**vim**——一个CLI编辑器。这样我们就可以通过容器CLI编辑代码了。
- en: 'Last but not least, use the `CMD` command to launch a shell terminal using
    bash:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，使用`CMD`命令启动一个bash终端：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'At this point, we have the below files in the local folder:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，我们在本地文件夹中有以下文件：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let’s now go ahead and build the image with the `docker build` command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续使用`docker build`命令构建镜像：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let’s run again the docker images command to review the current images:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次运行docker images命令，查看当前镜像：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As you can note, adding the virtual environment and installing the packages
    added about 250 Mb to the image size.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所注意到的，添加虚拟环境并安装包后，镜像大小增加了大约250MB。
- en: Running the Python Environment
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Python环境
- en: 'After we built the image, let’s launch the image with the `docker run` command
    and check if the above properties are defined as expected:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 构建完镜像后，让我们使用`docker run`命令启动镜像，并检查上述属性是否按预期定义：
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This launches the image in interactive mode, and opens a bash terminal as expected:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将以交互模式启动镜像，并按预期打开一个bash终端：
- en: '![](../Images/6898d42a4462a0bbb0ea5a3826cada26.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6898d42a4462a0bbb0ea5a3826cada26.png)'
- en: Launching the container via the shell terminal (screenshot by the author)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 shell 终端启动容器（截图由作者提供）
- en: As you can notice in the above screenshot, it launched the container inside
    the bash terminal, and the virtual environment is set as expected as `my_env`.
    The `pandas` library was installed and can be loaded, and we can now edit files
    from the terminal.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在上面的截图中所看到的，它在 bash 终端内启动了容器，并且虚拟环境已按预期设置为`my_env`。`pandas`库已经安装并可以加载，我们现在可以从终端编辑文件。
- en: One issue to take care of is that the container is still ephemeral. Therefore,
    any code we create inside the image is not exportable and will be lost after we
    stop the container from running.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一个问题是容器仍然是临时的。因此，我们在镜像内创建的任何代码都无法导出，并且在停止容器运行后将会丢失。
- en: 'A simple solution is to mount a volume with the `volume` argument. For simplicity,
    we will go ahead and mount the local folder, where we keep the Dockerfile and
    the helper files, to a new folder inside the container named `my_scripts`:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的解决方案是使用`volume`参数挂载一个卷。为了简便起见，我们将继续挂载本地文件夹，其中包含 Dockerfile 和辅助文件，挂载到容器内一个名为`my_scripts`的新文件夹中：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And here is the output:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![](../Images/a8623245254898dcff248d1bac468805.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a8623245254898dcff248d1bac468805.png)'
- en: Mounting a local volume to the container (screenshot by the author)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 将本地卷挂载到容器中（截图由作者提供）
- en: Once the folder is mounted, any file that is created, modified, or deleted from
    the mounted folder inside the container will be reflected to the local folder.
    This enables you to maintain your code when stopping the container.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦文件夹被挂载，容器内挂载文件夹中创建、修改或删除的任何文件将会反映到本地文件夹。这使得在停止容器时能够保持代码的更新。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this tutorial, we reviewed how to set a dockerized Python environment using
    the command line. While this is neither a practical nor recommended approach to
    develop with Python, it is a great learning experience of Docker core commands
    and basic functionalities. We show how we can easily take a built-in image and
    customize it according to our needs. Last but not least, we saw how to mount a
    local folder to the container with the volume argument to transfer the container
    from an ephemeral mode to a persistent mode.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们回顾了如何使用命令行设置 Docker 化的 Python 环境。虽然这既不是开发 Python 的实用方法，也不是推荐的方法，但它是学习
    Docker 核心命令和基本功能的一个很好的体验。我们展示了如何轻松地使用内置镜像并根据我们的需求对其进行定制。最后但同样重要的是，我们展示了如何使用卷参数将本地文件夹挂载到容器中，将容器从临时模式转为持久模式。
- en: Resources
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: A full tutorial for setting up a Dockerized Python environment with VScode and
    the Dev Containers — [https://github.com/RamiKrispin/vscode-python](https://github.com/RamiKrispin/vscode-python)
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 VScode 和 Dev Containers 设置 Docker 化 Python 环境的完整教程 — [https://github.com/RamiKrispin/vscode-python](https://github.com/RamiKrispin/vscode-python)
- en: Setting a dockerized Python development environment with GitHub template — [https://medium.com/@rami.krispin/setting-a-dockerized-python-development-environment-template-de2400c4812b](https://medium.com/@rami.krispin/setting-a-dockerized-python-development-environment-template-de2400c4812b)
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub 模板设置 Docker 化 Python 开发环境 — [https://medium.com/@rami.krispin/setting-a-dockerized-python-development-environment-template-de2400c4812b](https://medium.com/@rami.krispin/setting-a-dockerized-python-development-environment-template-de2400c4812b)
- en: Docker vs. virtual environment — [https://medium.com/@rami.krispin/running-python-r-with-docker-vs-virtual-environment-4a62ed36900f](https://medium.com/@rami.krispin/running-python-r-with-docker-vs-virtual-environment-4a62ed36900f)
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 与虚拟环境的对比 — [https://medium.com/@rami.krispin/running-python-r-with-docker-vs-virtual-environment-4a62ed36900f](https://medium.com/@rami.krispin/running-python-r-with-docker-vs-virtual-environment-4a62ed36900f)
- en: Dockerfile reference — [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Dockerfile 参考 — [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)
