- en: Building a Custom AI Jira Agent
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个自定义AI Jira代理
- en: 原文：[https://towardsdatascience.com/custom-ai-jira-agent-google-mesop-django-langchain-agent-co-star-chain-of-thought-cot-and-fb903468bff6?source=collection_archive---------0-----------------------#2024-12-25](https://towardsdatascience.com/custom-ai-jira-agent-google-mesop-django-langchain-agent-co-star-chain-of-thought-cot-and-fb903468bff6?source=collection_archive---------0-----------------------#2024-12-25)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/custom-ai-jira-agent-google-mesop-django-langchain-agent-co-star-chain-of-thought-cot-and-fb903468bff6?source=collection_archive---------0-----------------------#2024-12-25](https://towardsdatascience.com/custom-ai-jira-agent-google-mesop-django-langchain-agent-co-star-chain-of-thought-cot-and-fb903468bff6?source=collection_archive---------0-----------------------#2024-12-25)
- en: How I used Google Mesop, Django, LangChain Agents, CO-STAR & Chain-of-Thought
    (CoT) prompting combined with the Jira API to better automate Jira
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我是如何使用Google Mesop、Django、LangChain Agents、CO-STAR以及链式思维（CoT）提示结合Jira API来更好地自动化Jira的。
- en: '[](https://medium.com/@ljamesdatascience?source=post_page---byline--fb903468bff6--------------------------------)[![Lewis
    James | Data Science](../Images/fdbb8a326f6873a9776725ffaa0b4309.png)](https://medium.com/@ljamesdatascience?source=post_page---byline--fb903468bff6--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fb903468bff6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fb903468bff6--------------------------------)
    [Lewis James | Data Science](https://medium.com/@ljamesdatascience?source=post_page---byline--fb903468bff6--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@ljamesdatascience?source=post_page---byline--fb903468bff6--------------------------------)[![Lewis
    James | 数据科学](../Images/fdbb8a326f6873a9776725ffaa0b4309.png)](https://medium.com/@ljamesdatascience?source=post_page---byline--fb903468bff6--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fb903468bff6--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fb903468bff6--------------------------------)
    [Lewis James | 数据科学](https://medium.com/@ljamesdatascience?source=post_page---byline--fb903468bff6--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--fb903468bff6--------------------------------)
    ·19 min read·Dec 25, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--fb903468bff6--------------------------------)
    ·阅读时间19分钟·2024年12月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/3244eeafdbf9aec0882a5238b4395036.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3244eeafdbf9aec0882a5238b4395036.png)'
- en: Photo by [Google DeepMind](https://unsplash.com/@googledeepmind?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/a-bonsai-tree-growing-out-of-a-concrete-block-K2V_fqM2RY8?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Google DeepMind](https://unsplash.com/@googledeepmind?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)提供，来源于[Unsplash](https://unsplash.com/photos/a-bonsai-tree-growing-out-of-a-concrete-block-K2V_fqM2RY8?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
- en: The inspiration for this project came from hosting a Jira ticket creation tool
    on a web application I had developed for internal users. I also added automated
    Jira ticket creation upon system errors.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的灵感来自于我为内部用户开发的一个Web应用程序中托管的Jira工单创建工具。我还在系统错误时加入了自动创建Jira工单的功能。
- en: Users and system errors often create similar tickets, so I wanted to see if
    the reasoning capabilities of LLMs could be used to automatically triage tickets
    by linking related issues, creating user stories, acceptance criteria, and priority.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 用户和系统错误通常会创建类似的工单，因此我想看看LLM的推理能力是否可以用来通过链接相关问题、创建用户故事、验收标准和优先级，自动分流工单。
- en: Additionally, giving users and product/managerial stakeholders easier access
    to interact directly with Jira in natural language without any technical competencies
    was an interesting prospect.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，给用户和产品/管理利益相关者提供更便捷的方式，通过自然语言直接与Jira互动，而无需任何技术能力，也是一个很有趣的前景。
- en: '[Jira](https://www.atlassian.com/software/jira) has become ubiquitous within
    software development and is now a leading tool for project management.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jira](https://www.atlassian.com/software/jira)已经在软件开发中无处不在，现在已成为项目管理的领先工具。'
- en: Concretely, advances in Large Language Model (LLM) and agentic research would
    imply there is an opportunity to make significant productivity gains in this area.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，大型语言模型（LLM）和智能代理研究的进展表明，在这一领域有机会实现显著的生产力提升。
- en: Jira-related tasks are a great candidate for automation since; tasks are in
    the modality of text, are highly repetitive, relatively low risk and low complexity.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与Jira相关的任务非常适合自动化，因为这些任务以文本形式呈现，具有高度重复性，风险较低，复杂性也较低。
- en: 'In the article below, I will present my open-source project — AI Jira Assistant:
    a chat interface to interact with Jira via an AI agent, with a custom AI agent
    tool to triage newly created Jira tickets.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在下文中，我将展示我的开源项目——AI Jira助手：一个与Jira交互的聊天界面，通过自定义AI代理工具来分诊新创建的Jira票据。
- en: All code has been made available via the GitHub repo at the end of the article.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码都已通过文章末尾的GitHub仓库提供。
- en: The project makes use of LangChain agents, served via Django (with PostgreSQL)
    and Google Mesop. Services are provided in Docker to be run locally.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目利用LangChain代理，通过Django（配合PostgreSQL）和Google Mesop提供服务。服务在Docker中运行，以便本地使用。
- en: The prompting strategy includes a CO-STAR system prompt, Chain-of-Thought (CoT)
    reasoning with few-shot prompting.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 提示策略包括CO-STAR系统提示、链式思维（CoT）推理和少量示例提示。
- en: This article will include the following sections.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将包括以下章节。
- en: Definitions
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义
- en: 'Mesop interface: Streamlit or Mesop?'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Mesop接口：Streamlit还是Mesop？
- en: Django REST framework
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Django REST框架
- en: Custom LangChain agent tool and prompting
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自定义LangChain代理工具和提示
- en: Jira API examples
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jira API示例
- en: Next steps
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步
- en: 1\. Definitions
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 定义
- en: Firstly, I wanted to cover some high-level definitions that are central to the
    project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我想介绍一些对项目至关重要的高层定义。
- en: AI Jira Assistant
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AI Jira助手
- en: The open source project presented here, when ran locally looks as the below.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本文展示的开源项目，在本地运行时如下所示。
- en: Including a chat interface for user prompts, example prompts to pre-populate
    the chat interface, a box for displaying model responses and a button to clear
    model responses.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 包括一个用于用户提示的聊天界面，示例提示预填充聊天界面，一个用于显示模型响应的框，以及一个清除模型响应的按钮。
- en: Code snippets for the major technical challenges throughout the project are
    discussed in detail.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论了项目中各个技术难题的代码片段。
- en: '![](../Images/536a02c183e1a1f86064776e5afc3c97.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/536a02c183e1a1f86064776e5afc3c97.png)'
- en: AI Jira Assistant (Image by author)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: AI Jira助手（图像由作者提供）
- en: '**What is Google Mesop?**'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**什么是Google Mesop？**'
- en: Mesop is a relatively recent (2023) Python web framework used at Google for
    rapid AI app development.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Mesop是一个相对较新的（2023年）Python web框架，Google用于快速AI应用程序开发。
- en: “Mesop provides a versatile range of 30 components, from low-level building
    blocks to high-level, AI-focused components. This flexibility lets you rapidly
    prototype ML apps or build custom UIs, all within a single framework that adapts
    to your project’s use case.” — [Mesop Homepage](https://google.github.io/mesop/)
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “Mesop提供30个多功能组件，从低级构建模块到高级AI聚焦组件。这个灵活性使您能够快速原型化机器学习应用程序或构建自定义UI，所有这些都在一个适应您项目用例的单一框架内进行。”
    — [Mesop首页](https://google.github.io/mesop/)
- en: What is an AI Agent?
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是AI代理？
- en: The origins of the Agent software paradigm comes from the word Agency, a software
    program that can observe its environment and act upon it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 代理软件范式的起源来自“代理”一词，指的是一种能够观察其环境并采取行动的软件程序。
- en: “An artificial intelligence (AI) agent is a software program that can interact
    with its environment, collect data, and use the data to perform self-determined
    tasks to meet predetermined goals.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “人工智能（AI）代理是一种能够与其环境交互、收集数据并使用这些数据执行自我决定任务以实现预定目标的软件程序。”
- en: ''
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Humans set goals, but an AI agent independently chooses the best actions it
    needs to perform to achieve those goals.
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “人类设定目标，但AI代理独立选择为实现这些目标所需执行的最佳行动。”
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: AI agents are rational agents. They make rational decisions based on their perceptions
    and data to produce optimal performance and results.
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: AI代理是理性代理。它们基于感知和数据做出理性决策，以产生最佳表现和结果。
- en: ''
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: An AI agent senses its environment with physical or software interfaces.” —
    [AWS Website](https://aws.amazon.com/what-is/ai-agents/)
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “AI代理通过物理或软件接口感知其环境。” — [AWS官网](https://aws.amazon.com/what-is/ai-agents/)
- en: What is CO-STAR prompting?
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是CO-STAR提示？
- en: This is a guide to the formatting of prompts such that the following headers
    are included; context, objective, style, tone, audience and response. This is
    widely accepted to improve model output for LLMs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是一个提示格式指南，要求包含以下标题：上下文、目标、风格、语气、受众和回应。广泛接受这种格式，以提升大型语言模型（LLM）的输出质量。
- en: “The CO-STAR framework, a brainchild of GovTech Singapore’s Data Science & AI
    team, is a handy template for structuring prompts.
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “CO-STAR框架是GovTech新加坡的数据科学与AI团队的创意，是一个便捷的模板，用于构建提示结构。”
- en: ''
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It considers all the key aspects that influence the effectiveness and relevance
    of an LLM’s response, leading to more optimal responses.” — [Sheila Teo’s Medium
    Post](/how-i-won-singapores-gpt-4-prompt-engineering-competition-34c195a93d41)
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它考虑了所有影响LLM响应效果和相关性的关键因素，从而生成更优化的响应。” — [Sheila Teo的Medium文章](/how-i-won-singapores-gpt-4-prompt-engineering-competition-34c195a93d41)
- en: What is Chain-of-Thought (CoT) prompting?
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是链式思维（CoT）提示？
- en: Originally proposed in a Google paper; [Wei et al. (2022).](https://arxiv.org/pdf/2201.11903)
    Chain-of-Thought (CoT) prompting means to provide few-shot prompting examples
    of intermediate reasoning steps. Which was proven to improve common-sense reasoning
    of the model output.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最初由谷歌的一篇论文提出；[Wei等人（2022年）](https://arxiv.org/pdf/2201.11903)，链式思维（CoT）提示意味着提供少量示例的中间推理步骤。这被证明能够改善模型输出的常识推理能力。
- en: What is Django?
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是Django？
- en: Django is one of the more sophisticated widely used Python frameworks.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Django是一个广泛使用的复杂Python框架之一。
- en: “Django is a high-level Python web framework that encourages rapid development
    and clean, pragmatic design. It’s free and open source.” — [Django Homepage](https://www.djangoproject.com/)
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “Django是一个高级Python Web框架，鼓励快速开发和干净、务实的设计。它是免费的，也是开源的。” — [Django官网](https://www.djangoproject.com/)
- en: What is LangChain?
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是LangChain？
- en: LangChain is one of the better know open source libraries for supporting a LLM
    applications, up to and including agents and prompting relevant to this project.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain是支持LLM应用程序的更为知名的开源库之一，包括与本项目相关的代理和提示。
- en: '“LangChain’s flexible abstractions and AI-first toolkit make it the #1 choice
    for developers when building with GenAI.'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “LangChain的灵活抽象和以AI为先的工具包使其成为开发者在构建生成式AI时的首选工具。”
- en: Join 1M+ builders standardizing their LLM app development in LangChain’s Python
    and JavaScript frameworks.” — [LangChain website](https://www.langchain.com/langchain)
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 加入超过1百万的构建者，在LangChain的Python和JavaScript框架中标准化他们的LLM应用开发。” — [LangChain官网](https://www.langchain.com/langchain)
- en: '2\. Mesop interface: Streamlit or Mesop?'
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. Mesop接口：Streamlit还是Mesop？
- en: '![](../Images/f457d98dc5446aeb5960d0d8e95a50c9.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f457d98dc5446aeb5960d0d8e95a50c9.png)'
- en: Photo by [Konsepta Studio](https://unsplash.com/@konseptastudio?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/black-framed-eyeglasses-on-white-surface-DSW79QZtjGM?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Konsepta Studio](https://unsplash.com/@konseptastudio?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)提供，发布于[Unsplash](https://unsplash.com/photos/black-framed-eyeglasses-on-white-surface-DSW79QZtjGM?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
- en: I have used [Streamlit](https://streamlit.io/) extensively professionally for
    hosting Generative AI applications, an example of my work can be found [here](https://wan-ifra.org/2024/10/how-uks-reach-is-using-ai-to-help-produce-more-content-faster/).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我在专业工作中广泛使用了[Streamlit](https://streamlit.io/)来托管生成式AI应用，我的一个工作示例可以在[这里](https://wan-ifra.org/2024/10/how-uks-reach-is-using-ai-to-help-produce-more-content-faster/)找到。
- en: At a high level, Streamlit is a comparable open-source Python web framework
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，Streamlit是一个类似的开源Python Web框架。
- en: For more on Streamlit, please see my other Medium article where it is discussed
    at length.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Streamlit的更多信息，请参见我在Medium上的另一篇文章，那里详细讨论了这一话题。
- en: '[](https://medium.com/@ljamesdatascience/ai-grant-application-writer-autogen-postgresql-rag-langchain-fastapi-and-streamlit-93ba439dcb7d?source=post_page-----fb903468bff6--------------------------------)
    [## AI Grant Application Writer — AutoGen, PostgreSQL RAG, LangChain, FastAPI
    and Streamlit'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@ljamesdatascience/ai-grant-application-writer-autogen-postgresql-rag-langchain-fastapi-and-streamlit-93ba439dcb7d?source=post_page-----fb903468bff6--------------------------------)
    [## AI资助申请写作工具 — AutoGen, PostgreSQL RAG, LangChain, FastAPI和Streamlit]'
- en: Writing grant applications can be time-consuming and tedious, Generative AI
    seems like a natural solution though naive…
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 写资助申请可能是一个既耗时又乏味的工作，生成式AI似乎是一个自然的解决方案，尽管它可能显得有些天真……
- en: medium.com](https://medium.com/@ljamesdatascience/ai-grant-application-writer-autogen-postgresql-rag-langchain-fastapi-and-streamlit-93ba439dcb7d?source=post_page-----fb903468bff6--------------------------------)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@ljamesdatascience/ai-grant-application-writer-autogen-postgresql-rag-langchain-fastapi-and-streamlit-93ba439dcb7d?source=post_page-----fb903468bff6--------------------------------)'
- en: This was the first opportunity to use Mesop in anger — so I thought a comparison
    might be useful.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第一次在实际使用中应用Mesop——所以我认为做个比较可能会很有用。
- en: Mesop is designed to give more fine-grained control over the CSS styling of
    components and natively integrates with JS web comments. Mesop also has useful
    debugging tools when running locally. I would also say from experience that the
    multi-page app functionality is easier to use.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Mesop 旨在提供对组件的 CSS 样式更精细的控制，并且原生集成了 JS Web 评论。Mesop 还提供了有用的调试工具，可以在本地运行时使用。从经验来看，我还想说，多个页面应用功能的使用要更为便捷。
- en: However, this does mean that there is a larger barrier to entry for say machine
    learning practitioners less well-versed in CSS styling (myself included). Streamlit
    also has a larger community for support.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这确实意味着，对于不太精通 CSS 样式的机器学习从业者（包括我自己），存在更大的门槛。Streamlit 也有更大的社区支持。
- en: From the code snippet, we can set up different page routes. The project only
    contains two pages. The main page and an error page.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从代码片段来看，我们可以设置不同的页面路由。项目只包含两个页面：主页面和错误页面。
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The error page includes a button to redirect to the homepage.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 错误页面包含一个按钮，用于重定向到主页。
- en: '![](../Images/a62ff27dc85ddaa92e445800afda8b06.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a62ff27dc85ddaa92e445800afda8b06.png)'
- en: AI Jira Assistant Error Page (Image by author)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: AI Jira 助手错误页面（图片来自作者）
- en: The code to trigger the redirect to the homepage is included here.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 触发重定向到主页的代码在这里包含。
- en: '[PRE1]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We must also create the State class, this allows data to persist within the
    event loop.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须创建 State 类，这样可以在事件循环中保持数据的持久性。
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To clear the model output from the interface, we can then assign the output
    variable to an empty string. There are also different [button supported types](https://google.github.io/mesop/components/button/#overview),
    as of writing are; default, raised, flat and stroked.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要清除界面中的模型输出，我们可以将输出变量赋值为空字符串。也有不同的[按钮支持类型](https://google.github.io/mesop/components/button/#overview)，截至撰写时，包括：默认、提升、平面和带边框。
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To automatically populate the chat interface with the example prompts provided,
    we use the button onclick event, by updating the state.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动填充聊天界面中的示例提示，我们使用按钮的 onclick 事件，通过更新状态来实现。
- en: '[PRE4]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Similarly, to send the request to the Django service we use the code snippet
    below. We use a [Walrus Operator](https://www.geeksforgeeks.org/walrus-operator-in-python-3-8/)
    (:=) to determine if the request has received a valid response as not None (status
    code 200) and append the output to the state so it can be rendered in the UI,
    otherwise we redirect the user to the error page as previously discussed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，要向 Django 服务发送请求，我们使用以下代码片段。我们使用[海象运算符](https://www.geeksforgeeks.org/walrus-operator-in-python-3-8/)
    (:=) 来判断请求是否收到了有效的响应（即状态码为200且非 None），并将输出追加到状态中，以便在 UI 中渲染，否则我们会将用户重定向到前面讨论的错误页面。
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: For completeness, I have provided the request code to the Django endpoint for
    running the AI Jira Agent.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，我提供了向 Django 端点发送请求的代码，用于运行 AI Jira Agent。
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For this to run locally, I have included the relevant Docker and Docker compose
    files.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在本地运行，我已包含了相关的 Docker 和 Docker compose 文件。
- en: This Docker file for running Mesop was provided via the Mesop project homepage.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 Mesop 的 Docker 文件是通过 Mesop 项目主页提供的。
- en: The Docker compose file consists of three services. The back-end Django application,
    the front-end Mesop application and a PostgreSQL database instance to be used
    in conjunction with the Django application.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Docker compose 文件由三个服务组成：后端 Django 应用、前端 Mesop 应用和一个与 Django 应用配合使用的 PostgreSQL
    数据库实例。
- en: I wanted to call out the environment variable being passed into the Mesop Docker
    container, PYTHONUNBUFFERED=1 ensures Python output, stdout, and stderr streams
    are sent to the terminal. Having used the recommended Docker image for Mesop applications
    it took me some time to determine the root cause of not seeing any output from
    the application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我想特别指出传递给 Mesop Docker 容器的环境变量，PYTHONUNBUFFERED=1 确保 Python 的输出、标准输出（stdout）和标准错误输出（stderr）流被发送到终端。在使用
    Mesop 应用程序推荐的 Docker 镜像时，我花了一些时间才找出未能看到应用程序输出的根本原因。
- en: The DOCKER_RUNNING=true environment variable is a convention to simply determine
    if the application is being run within Docker or for example within a virtual
    environment.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: DOCKER_RUNNING=true 环境变量是一种约定，用于简单地判断应用程序是否在 Docker 中运行，或者例如在虚拟环境中运行。
- en: It is important to point out that environment variables will be populated via
    the config file ‘config.ini’ within the config sub-directory referenced by the
    env_file element in the Docker compose file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 需要指出的是，环境变量将通过配置文件 'config.ini' 填充，该文件位于 Docker compose 文件中的 env_file 元素所引用的
    config 子目录中。
- en: To run the project, you must populate this config file with your Open AI and
    Jira credentials.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行该项目，你必须用你的 Open AI 和 Jira 凭证填充这个配置文件。
- en: 3\. Django REST framework
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. Django REST 框架
- en: '![](../Images/e4bf7b8e0f7357749d194a4ed4c9ca64.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e4bf7b8e0f7357749d194a4ed4c9ca64.png)'
- en: Photo by [Faisal](https://unsplash.com/@faisaldada?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/black-and-yellow-box-on-white-table-BI465ksrlWs?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Faisal](https://unsplash.com/@faisaldada?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    提供，来源于 [Unsplash](https://unsplash.com/photos/black-and-yellow-box-on-white-table-BI465ksrlWs?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
- en: Django is a Python web framework with lots of useful functionality out of the
    box.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Django 是一个 Python web 框架，内置了大量有用的功能。
- en: It is comparable to frameworks such as Flask or FastAPI, though does require
    some additional setup and a steeper learning curve to get started.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以与 Flask 或 FastAPI 等框架进行比较，尽管它需要一些额外的配置，并且入门时学习曲线较陡峭。
- en: If you want to learn more about Flask, please see my article below.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 Flask 的内容，请参阅我下面的文章。
- en: '[](https://medium.com/analytics-vidhya/canal-boat-pricing-with-catboost-machine-learning-5b2389999116?source=post_page-----fb903468bff6--------------------------------)
    [## Canal Boat Pricing With Catboost Machine Learning'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/analytics-vidhya/canal-boat-pricing-with-catboost-machine-learning-5b2389999116?source=post_page-----fb903468bff6--------------------------------)
    [## Canal Boat Pricing With Catboost Machine Learning'
- en: One of the more interesting suggestions from the YouTube recommendation engine
    combined with moving to fully remote…
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 来自 YouTube 推荐引擎的一个更有趣的建议，结合了完全远程工作的转变……
- en: medium.com](https://medium.com/analytics-vidhya/canal-boat-pricing-with-catboost-machine-learning-5b2389999116?source=post_page-----fb903468bff6--------------------------------)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/analytics-vidhya/canal-boat-pricing-with-catboost-machine-learning-5b2389999116?source=post_page-----fb903468bff6--------------------------------)
- en: In this article, I will cover apps, models, serializers, views and PostgreSQL
    database integration.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将涵盖应用程序、模型、序列化器、视图以及 PostgreSQL 数据库的集成。
- en: An app is a logically separated web application that has a specific purpose.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一个应用程序是一个逻辑上分离的 web 应用，具有特定的目的。
- en: In our instance, we have named the app “api” and is created by running the following
    command.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的实例中，我们将应用命名为“api”，并通过运行以下命令创建。
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Within the views.py file, we define our API endpoints.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在 views.py 文件中，我们定义了我们的 API 端点。
- en: “A view function, or *view* for short, is a Python function that takes a web
    request and returns a web response. This response can be the HTML contents of
    a web page, or a redirect, or a 404 error, or an XML document, or an image . .
    . or anything, really. The view itself contains whatever arbitrary logic is necessary
    to return that response.” — [Django website](https://docs.djangoproject.com/en/5.1/topics/http/views/)
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “视图函数，简称 *视图*，是一个 Python 函数，它接收一个 web 请求并返回一个 web 响应。这个响应可以是一个网页的 HTML 内容，或者是重定向，或者是
    404 错误，或者是 XML 文档，或者是图片……实际上可以是任何内容。视图本身包含返回该响应所需的任意逻辑。” — [Django 官网](https://docs.djangoproject.com/en/5.1/topics/http/views/)
- en: The endpoint routes to Django views are defined in the app urls.py file as below.
    The urls.py file is created at the initialization of the app. We have three endpoints
    in this project; a health check endpoint, an endpoint for returning all records
    stored within the database and an endpoint for handling the call out to the AI
    agent.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 路由到 Django 视图的端点定义在应用的 urls.py 文件中，如下所示。urls.py 文件是在应用初始化时创建的。我们在这个项目中有三个端点；一个健康检查端点，一个用于返回数据库中所有记录的端点，以及一个用于处理调用
    AI 代理的端点。
- en: The views are declared classes, which is the standard convention within Django.
    Please see the file in its completeness.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是声明为类的，这是 Django 中的标准约定。请查看完整的文件内容。
- en: Most of the code is self-explanatory though this snippet is significant as it
    will saves the models data to the database.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 大部分代码都不言自明，尽管这个代码片段很重要，因为它将把模型的数据保存到数据库中。
- en: '[PRE8]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The snippet below returns all records in the DB from the ModelRequest model,
    I will cover models next.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段返回数据库中 ModelRequest 模型的所有记录，接下来我将介绍模型。
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: “A model is the single, definitive source of information about your data. It
    contains the essential fields and behaviors of the data you’re storing. Generally,
    each model maps to a single database table.” — [Django website](https://docs.djangoproject.com/en/5.1/topics/db/models/#:~:text=A%20model%20is%20the%20single,.db.models.Model%20.)
  id: totrans-116
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “模型是关于你的数据的唯一、权威的信息来源。它包含了你存储的数据的基本字段和行为。通常，每个模型对应一个数据库表。” — [Django官网](https://docs.djangoproject.com/en/5.1/topics/db/models/#:~:text=A%20model%20is%20the%20single,.db.models.Model%20.)
- en: Our model for this project is simple as we only want to store the user request
    and the final model output, both of which are text fields.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模型对于这个项目来说很简单，因为我们只需要存储用户请求和最终模型输出，这两个字段都是文本字段。
- en: The __str__ method is a common Python convention which for example, is called
    by default in the print function. The purpose of this method is to return a human-readable
    string representation of an object.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: __str__ 方法是Python中的一个常见约定，例如，它在print函数中默认被调用。该方法的目的是返回对象的可读字符串表示。
- en: The serializer maps fields from the model to validate inputs and outputs and
    turn more complex data types in Python data types. This can be seen in the views.py
    detailed previously.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化器将模型中的字段映射到验证输入和输出，并将更复杂的数据类型转换为Python数据类型。这可以在之前详细介绍的views.py中看到。
- en: “A ModelSerializer typically refers to a component of the Django REST framework
    (DRF). The Django REST framework is a popular toolkit for building Web APIs in
    Django applications. It provides a set of tools and libraries to simplify the
    process of building APIs, including serializers.
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “ModelSerializer通常指的是Django REST框架(DRF)中的一个组件。Django REST框架是一个用于在Django应用中构建Web
    API的流行工具包。它提供了一组工具和库，以简化构建API的过程，其中包括序列化器。”
- en: ''
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The ModelSerializer class provides a shortcut that lets you automatically create
    a Serializer class with fields that correspond to the Model fields.
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ModelSerializer类提供了一种快捷方式，允许你自动创建一个Serializer类，该类的字段与Model字段相对应。
- en: ''
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The ModelSerializer class is the same as a regular Serializer class, except
    that:'
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ModelSerializer 类与常规的 Serializer 类相同，不同之处在于：
- en: ''
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It will automatically generate a set of fields for you, based on the model.
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它将基于模型自动生成一组字段。
- en: ''
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It will automatically generate validators for the serializer, such as unique_together
    validators.
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它将自动为序列化器生成验证器，如unique_together验证器。
- en: ''
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It includes simple default implementations of .create() and .update().” — [Geeks
    for geeks](https://www.geeksforgeeks.org/serializers-django-rest-framework/)
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 它包括.create()和.update()的简单默认实现。” — [Geeks for geeks](https://www.geeksforgeeks.org/serializers-django-rest-framework/)
- en: The complete serializers.py file for the project is as follows.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的完整serializers.py文件如下所示。
- en: For the PostgreSQL database integration, the config within the settings.py file
    must match the databse.ini file.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于PostgreSQL数据库集成，settings.py文件中的配置必须与database.ini文件匹配。
- en: The default database settings must be changed to point at the PostgreSQL database,
    as this is not the default database integration for Django.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的数据库设置必须更改为指向PostgreSQL数据库，因为这不是Django的默认数据库集成。
- en: '[PRE10]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The database.ini file defines the config for the PostgreSQL database at initialization.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: database.ini 文件在初始化时定义了PostgreSQL数据库的配置。
- en: To ensure database migrations are applied once the Docker container has been
    run, we can use a bash script to apply the migrations and then run the server.
    Running migrations automatically will mean that the database is always modified
    with any change in definitions within source control for Django, which saves time
    in the long run.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保在Docker容器启动后应用数据库迁移，我们可以使用bash脚本来应用迁移，然后启动服务器。自动运行迁移将意味着每当Django源代码中的定义发生变化时，数据库总是会被修改，这从长远来看能节省时间。
- en: The entry point to the Dockerfile is then changed to point at the bash script
    using the CMD instruction.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile的入口点然后通过CMD指令修改为指向bash脚本。
- en: 4\. Custom LangChain agent tool and prompting
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 自定义LangChain代理工具和提示
- en: '![](../Images/8c59bb257dfadce27140c4cfc1f3da92.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c59bb257dfadce27140c4cfc1f3da92.png)'
- en: Photo by [Vlad Tchompalov](https://unsplash.com/@tchompalov?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/green-bird-kuTZUOVRpOo?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Vlad Tchompalov](https://unsplash.com/@tchompalov?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    提供，来源于 [Unsplash](https://unsplash.com/photos/green-bird-kuTZUOVRpOo?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
- en: I’m using the existing LangChain agent functionality combined with the [Jira
    toolkit](https://python.langchain.com/docs/integrations/tools/jira/), which is
    a wrapper around the Atlassian Python API.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用现有的 LangChain 代理功能，并结合 [Jira 工具包](https://python.langchain.com/docs/integrations/tools/jira/)，这是
    Atlassian Python API 的一个封装。
- en: The default library is quite useful out of the box, sometimes requiring some
    trial and error on the prompt though I’d think it should improve over time as
    research into the area progresses.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 默认库开箱即用相当有用，尽管有时需要在提示上进行一些反复试验，不过我认为随着该领域的研究进展，应该会有所改进。
- en: For this project however, I wanted to add some custom tooling to the agent.
    This can be seen as the function ‘triage’ below with the @tool decorator.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于这个项目，我希望在代理中添加一些自定义工具。这可以通过下面的 `triage` 函数与 @tool 装饰器来实现。
- en: The function type hints and comment description of the tool are necessary to
    communicate to the agent what is expected when a call is made. The returned string
    of the function is observed by the agent, in this instance, we simply return “Task
    complete” such that the agent then ceases to conduct another step.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 工具的函数类型提示和注释描述是必要的，以便向代理传达调用时的预期。当返回的字符串被代理观察到时，在这个实例中，我们只是返回“任务完成”，以便代理停止执行下一个步骤。
- en: The custom triage tool performs the following steps;
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义分诊工具执行以下步骤；
- en: Get all unresolved Jira tickets for the project
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取该项目的所有未解决的 Jira 工单
- en: Get the description and summary for the Jira issue key the agent is conducting
    the triage on
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取代理正在进行分诊的 Jira 问题键的描述和摘要
- en: Makes asynchronous LLM-based comparisons with all unresolved tickets and automatically
    tags the ones that appear related from a text-to-text comparison, then uses the
    Jira API to link them
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与所有未解决的工单进行基于异步 LLM 的比较，并通过文本到文本的比较自动标记那些看起来相关的工单，然后使用 Jira API 将它们链接起来
- en: An LLM is then used to generate; user stories, acceptance criteria and priority,
    leaving this model result as a comment on the primary ticket
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，使用 LLM 生成用户故事、验收标准和优先级，并将此模型结果作为注释留在主工单上
- en: '[PRE11]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Both LLM tasks use a CO-STAR system prompt and chain-of-thought few-shot prompting
    strategy. Therefore I have abstracted these tasks into an LLMTask class.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个 LLM 任务都使用了 CO-STAR 系统提示和链式思维的少量示例提示策略。因此，我将这些任务抽象成了一个 LLMTask 类。
- en: They are instantiated in the following code snippet. Arguably, we could experiment
    with different LLMs for each tasks though in the interest of time I have not done
    any experimentation around this — please feel free to comment below if you do
    pull the repo and have any experience to share.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 它们在以下代码片段中被实例化。可以说，我们本可以为每个任务尝试不同的 LLM，尽管出于时间考虑，我并没有进行相关实验——如果你拉取了代码库并有经验分享，请随时在下方评论。
- en: '[PRE12]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For the linking tasks, the CO-STAR system prompt is below. The headings of Context,
    Objective, Style, Tone, Audience and Response are the standard headings for the
    CO-STAR method. We define the context and outputs including the tagging of each
    element of the model results.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于链接任务，CO-STAR 系统提示如下。Context（上下文）、Objective（目标）、Style（风格）、Tone（语气）、Audience（受众）和
    Response（响应）是 CO-STAR 方法的标准标题。我们定义了上下文和输出，包括标记模型结果的每个元素。
- en: Explicitly defining the audience, style and tone helps to ensure the model output
    is appropriate for a business context.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 明确界定受众、风格和语气有助于确保模型输出适合商业环境。
- en: '[PRE13]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: For performing the product style ticket evaluation (user stories, acceptance
    criteria, and priority), the system prompt is below. We explicitly define the
    priority as either LOW, MEDIUM, or HIGH.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 对于执行产品风格的工单评估（用户故事、验收标准和优先级），系统提示如下。我们明确将优先级定义为低（LOW）、中（MEDIUM）或高（HIGH）。
- en: We also dictate that the model has the style of a product owner/ manager for
    which this task would have traditionally been conducted.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还要求模型具有产品负责人/经理的风格，因为这项任务通常由该职位执行。
- en: '[PRE14]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: I will now provide the Chain-of-thought few-shot prompt for linking Jira tickets,
    we append both the summary and description for both tickets in <issue1> and <issue2>
    tags respectively. The thinking of the model is captured in the <thought> tags
    in the model output, this constitutes the Chain-of-Thought element.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将提供用于链接 Jira 工单的链式思维少量示例提示，我们将分别在 `<issue1>` 和 `<issue2>` 标签中附上两个工单的摘要和描述。模型的思考过程通过
    `<thought>` 标签捕获，这就是链式思维元素。
- en: The few-shot designation comes from the point that multiple examples are being
    fed into the model.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 少量示例（few-shot）这个术语来自于向模型输入多个示例的做法。
- en: The <related> tags contain the determination if the two tickets provided are
    related or not, if the model deems them to be related then a value of True is
    returned.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: <related>标签包含判断两个工单是否相关的信息。如果模型认为它们相关，则返回 True 值。
- en: We later regex parse the model output and have a helper function to link the
    related tickets via the Jira API, all Jira API helper functions for this project
    are provided later in the article.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会正则解析模型输出，并使用一个辅助函数通过 Jira API 链接相关工单，所有此项目的 Jira API 辅助函数将在文章后续部分提供。
- en: '[PRE15]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Similarly for ticket evaluation, the user story is provided in <user_stories>
    tags, acceptance criteria in <acceptance_criteria> tags, and priority in <priority>
    tags. The <thought> tags are also used for capturing the reasoning from the model
    specifically in terms of the priority given.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，对于工单评估，用户故事被提供在<user_stories>标签中，验收标准在<acceptance_criteria>标签中，优先级在<priority>标签中。<thought>标签也用于捕捉模型给出优先级时的推理过程。
- en: All of the examples were annotated manually by myself.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 所有示例都由我手动标注。
- en: '[PRE16]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This code snippet uses a muti-threaded approach to linking Jira issues concurrently.
    This will vastly reduce the time it takes to make pair comparisons with all the
    open tickets within a project to determine if they are related.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用了多线程方法来并发链接 Jira 问题。这将大大减少与项目中所有开放工单进行配对比较所需的时间，以确定它们是否相关。
- en: '[PRE17]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: An example workflow of the tool, creating a ticket and triaging it.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 工具的一个示例工作流程：创建工单并进行分诊。
- en: '![](../Images/0f3c81d705a4d1f7191dadb25d8da9e7.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0f3c81d705a4d1f7191dadb25d8da9e7.png)'
- en: Working ticket creation and triage (Image by author)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 工作工单创建和分诊（图片由作者提供）
- en: The result of these actions is captured in Jira ticket. Related tickets have
    been linked automatically, the user stories, acceptance criteria, priority and
    thought have been captured as a Jira comment.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作的结果被记录在 Jira 工单中。相关的工单已被自动链接，用户故事、验收标准、优先级和思考过程已作为 Jira 评论进行记录。
- en: '![](../Images/c890e01fb7882abe71c735539126e3e9.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c890e01fb7882abe71c735539126e3e9.png)'
- en: Linked tickets, user stories, acceptance criteria and priority (Image by author)
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 已链接的工单、用户故事、验收标准和优先级（图片由作者提供）
- en: We can see the agent intermediate steps in the print statements of the Docker
    container.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 Docker 容器的打印语句中看到代理的中间步骤。
- en: '![](../Images/b69b00afcdbde221f214e9a7692fac6c.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b69b00afcdbde221f214e9a7692fac6c.png)'
- en: Agent output for triage step (Image by author)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 代理输出的分诊步骤（图片由作者提供）
- en: 5\. Jira API examples
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5. Jira API 示例
- en: '![](../Images/4a8dc1971040892936d3712169b7fea6.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a8dc1971040892936d3712169b7fea6.png)'
- en: AI Jira Assitant finding in progress tickets (Image by author)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: AI Jira 助手正在寻找进行中的工单（图片由作者提供）
- en: All examples in this project where I have explicitly used the [Jira REST API](https://developer.atlassian.com/server/jira/platform/rest/v10002/intro/#gettingstarted)
    have been included below for visibility.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本项目中，所有我明确使用的[Jira REST API](https://developer.atlassian.com/server/jira/platform/rest/v10002/intro/#gettingstarted)示例都已在下方列出，供参考。
- en: The regex extraction helper function used to parse model results is also included.
    There is also a Python SDK for Jira though I elected to use the requests library
    in this instance such that is more easily translated into other programming languages.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 用于解析模型结果的正则表达式提取辅助函数也包含在内。此外，还有一个 Jira 的 Python SDK，尽管在此示例中我选择使用了 requests 库，以便更容易地转化为其他编程语言。
- en: 6\. Next steps
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6. 下一步
- en: The natural next step would be to include code generation by integrating with
    source control for a near fully automated software development lifecycle, with
    a human in the loop this could be a feasible solution.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 自然的下一步是通过与源代码管理系统集成来实现代码生成，从而实现几乎完全自动化的软件开发生命周期。通过在此过程中加入人工参与，这可能是一个可行的解决方案。
- en: We can already see that AI code generation is making an impact on the enterprise
    — if BAU tasks can be partially automated then software developers/product practitioners
    can focus on more interesting and meaningful work.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经可以看到，AI 代码生成正在对企业产生影响——如果业务日常任务可以部分自动化，那么软件开发人员/产品实践者就可以专注于更有趣和更有意义的工作。
- en: If there is a lot of interest on this article then perhaps I could look into
    this as a follow-up project.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这篇文章引起了广泛的兴趣，或许我可以将其作为后续项目进行研究。
- en: '[](https://uk.pcmag.com/ai/155094/ai-now-writes-over-25-of-code-at-google?source=post_page-----fb903468bff6--------------------------------)
    [## AI Now Writes Over 25% of Code at Google'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://uk.pcmag.com/ai/155094/ai-now-writes-over-25-of-code-at-google?source=post_page-----fb903468bff6--------------------------------)
    [## AI 现在在 Google 写超过 25% 的代码'
- en: Google CEO Sundar Pichai says the company is using AI to write code, which is
    then reviewed by engineers. But will that…
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 谷歌CEO桑达尔·皮查伊表示，公司正在使用AI编写代码，然后由工程师进行审核。但这会如何发展……
- en: uk.pcmag.com](https://uk.pcmag.com/ai/155094/ai-now-writes-over-25-of-code-at-google?source=post_page-----fb903468bff6--------------------------------)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://uk.pcmag.com/ai/155094/ai-now-writes-over-25-of-code-at-google?source=post_page-----fb903468bff6--------------------------------](https://uk.pcmag.com/ai/155094/ai-now-writes-over-25-of-code-at-google?source=post_page-----fb903468bff6--------------------------------)'
- en: I hope you found this article insightful, as promised — you can find all the
    code in the Github repo [here](https://github.com/lewisExternal/Custom-AI-Jira-Agent/tree/main),
    and feel free to connect with me on [LinkedIn](https://www.linkedin.com/in/lewisjames1/)
    also.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你觉得这篇文章有启发性，正如承诺的那样——你可以在Github仓库[这里](https://github.com/lewisExternal/Custom-AI-Jira-Agent/tree/main)找到所有代码，也可以随时在[LinkedIn](https://www.linkedin.com/in/lewisjames1/)上与我联系。
- en: References
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: '[https://google.github.io/mesop/getting-started/quickstart/#starter-kit](https://google.github.io/mesop/getting-started/quickstart/#starter-kit)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://google.github.io/mesop/getting-started/quickstart/#starter-kit](https://google.github.io/mesop/getting-started/quickstart/#starter-kit)'
- en: '[https://www.django-rest-framework.org/#example](https://www.django-rest-framework.org/#example)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.django-rest-framework.org/#example](https://www.django-rest-framework.org/#example)'
- en: '[https://blog.logrocket.com/dockerizing-django-app/](https://blog.logrocket.com/dockerizing-django-app/)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://blog.logrocket.com/dockerizing-django-app/](https://blog.logrocket.com/dockerizing-django-app/)'
- en: '*All images, unless otherwise noted, are by the author.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者提供。*'
