- en: How to Expose Delta Tables via REST APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何通过 REST API 暴露 Delta 表
- en: 原文：[https://towardsdatascience.com/how-to-expose-delta-tables-via-rest-apis-53b4dd7afa4e?source=collection_archive---------0-----------------------#2024-05-06](https://towardsdatascience.com/how-to-expose-delta-tables-via-rest-apis-53b4dd7afa4e?source=collection_archive---------0-----------------------#2024-05-06)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-expose-delta-tables-via-rest-apis-53b4dd7afa4e?source=collection_archive---------0-----------------------#2024-05-06](https://towardsdatascience.com/how-to-expose-delta-tables-via-rest-apis-53b4dd7afa4e?source=collection_archive---------0-----------------------#2024-05-06)
- en: Three architectures discussed and tested to serve delta tables
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三种架构讨论并测试用于服务 Delta 表
- en: '[](https://rebremer.medium.com/?source=post_page---byline--53b4dd7afa4e--------------------------------)[![René
    Bremer](../Images/e422c4b84e225d2a949251ebc24dbd2c.png)](https://rebremer.medium.com/?source=post_page---byline--53b4dd7afa4e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--53b4dd7afa4e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--53b4dd7afa4e--------------------------------)
    [René Bremer](https://rebremer.medium.com/?source=post_page---byline--53b4dd7afa4e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://rebremer.medium.com/?source=post_page---byline--53b4dd7afa4e--------------------------------)[![René
    Bremer](../Images/e422c4b84e225d2a949251ebc24dbd2c.png)](https://rebremer.medium.com/?source=post_page---byline--53b4dd7afa4e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--53b4dd7afa4e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--53b4dd7afa4e--------------------------------)
    [René Bremer](https://rebremer.medium.com/?source=post_page---byline--53b4dd7afa4e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--53b4dd7afa4e--------------------------------)
    ·7 min read·May 6, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--53b4dd7afa4e--------------------------------)
    ·7分钟阅读·2024年5月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/1c9e1d23ea5b1cf0a55e7475f13b53a9.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1c9e1d23ea5b1cf0a55e7475f13b53a9.png)'
- en: Expose data inside out — image by [Joshua Sortino on Unsplash](https://unsplash.com/@sortino)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过内外数据暴露——图片由 [Joshua Sortino on Unsplash](https://unsplash.com/@sortino) 提供
- en: 1\. Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 引言
- en: 'Delta tables in a [medallion architecture](https://www.databricks.com/glossary/medallion-architecture)
    are generally used to create data products. These data products are used for data
    science, data analytics, and reporting. However, a common question is to also
    expose data products via REST APIs. The idea is to embed these APIs in web apps
    with more strict performance requirements. Important questions are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[金奖架构](https://www.databricks.com/glossary/medallion-architecture) 中的 Delta
    表通常用于创建数据产品。这些数据产品用于数据科学、数据分析和报告。然而，一个常见的问题是如何通过 REST API 暴露数据产品。这个想法是将这些 API
    嵌入具有更严格性能要求的 Web 应用程序中。以下是一些重要问题：'
- en: Is reading data from delta tables fast enough to serve web apps?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Delta 表读取数据是否足够快以支持 Web 应用程序？
- en: Is a compute layer needed to make solution more scalable?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否需要计算层以使解决方案更具可扩展性？
- en: Is a storage layer needed to achieve strict performance requirements?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否需要存储层来满足严格的性能要求？
- en: 'To deep-dive on these questions, three architectures are evaluated as follows:
    architecture A — libraries in API, architecture B — compute layer, and architecture
    C — storage layer. See also image below.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了深入探讨这些问题，评估了三种架构，如下所示：架构 A——API 中的库，架构 B——计算层，架构 C——存储层。请参阅下图。
- en: '![](../Images/4660f725419bf5d6260407749ecb8d6f.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4660f725419bf5d6260407749ecb8d6f.png)'
- en: Three architectures to expose delta tables — image by author
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 三种架构用于暴露 Delta 表——图片由作者提供
- en: In the remainder of the blog post, the three architectures are described, deployed
    and tested. Then a conclusion is made.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在博客文章的其余部分中，将描述、部署和测试这三种架构。然后得出结论。
- en: 2\. Architecture description
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 架构描述
- en: '2.1 Architecture A: Libraries in API using DuckDB and PyArrow'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 架构 A：使用 DuckDB 和 PyArrow 的 API 中的库
- en: In this architecture, APIs are directly connecting to delta tables and there
    is no compute layer in between. This implies that data is analyzed by using the
    memory and compute of the API itself. To improve performance, Python libraries
    of [embedded database DuckDB](https://duckdb.org/why_duckdb#simple) and [PyArrow](https://pyarrow.readthedocs.io/en/latest/)
    are used. These libraries make sure that only relevant data is loaded (e.g. only
    columns that are needed by the API).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在此架构中，API 直接连接到 delta 表，中间没有计算层。这意味着数据通过 API 本身的内存和计算进行分析。为了提高性能，使用了[嵌入式数据库
    DuckDB](https://duckdb.org/why_duckdb#simple)和[PyArrow](https://pyarrow.readthedocs.io/en/latest/)的
    Python 库。这些库确保只加载相关的数据（例如，只加载 API 所需的列）。
- en: '![](../Images/60464d2733670c853ce8caa4d24451df.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/60464d2733670c853ce8caa4d24451df.png)'
- en: 'Architecture A: Libraries in API — image by author'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 架构 A：API 中的库 — 作者提供的图像
- en: The pro of this architecture is that data does not have to be duplicated and
    there is no layer needed in between the API and the delta tables. This means less
    moving parts.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构的优点是数据不需要复制，并且 API 和 delta 表之间不需要中间层。这意味着移动部件更少。
- en: The con of this architecture is that it’s harder to scale and all of the work
    needs to be done in the compute and memory of the API itself. This is especially
    challenging if a lot of data needs to be analyzed. This can come from many records,
    large columns and/or a lot of concurrent requests.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构的缺点是它更难扩展，所有的工作都需要在 API 本身的计算和内存中完成。如果需要分析大量数据，这尤其具有挑战性。这些数据可能来自大量记录、大量列和/或大量并发请求。
- en: '2.2 Architecture B: Compute layer using Synapse, Databricks, or Fabric'
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 架构 B：使用 Synapse、Databricks 或 Fabric 的计算层
- en: In this architecture, APIs are connecting to a compute layer and not directly
    to the delta tables. This compute layer fetches data from delta tables and then
    analyzes the data. The compute layer can be [Azure Synapse](https://learn.microsoft.com/en-us/azure/synapse-analytics/overview-what-is),
    [Azure Databricks](https://learn.microsoft.com/en-us/azure/databricks/introduction/),
    or [Microsoft Fabric](https://learn.microsoft.com/en-us/fabric/get-started/microsoft-fabric-overview)
    and typically scales well. The data is not duplicated to the compute layer, though
    caching can be applied in the compute layer. In the remaining of this blog there
    is tested with [Synapse Serverless](https://learn.microsoft.com/en-us/azure/synapse-analytics/sql/on-demand-workspace-overview).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在此架构中，API 连接到计算层，而不是直接连接到 delta 表。计算层从 delta 表中获取数据并进行分析。计算层可以是[Azure Synapse](https://learn.microsoft.com/en-us/azure/synapse-analytics/overview-what-is)、[Azure
    Databricks](https://learn.microsoft.com/en-us/azure/databricks/introduction/)或[Microsoft
    Fabric](https://learn.microsoft.com/en-us/fabric/get-started/microsoft-fabric-overview)，并且通常能够很好地扩展。数据不会复制到计算层，但可以在计算层应用缓存。在本文的剩余部分中，测试使用了[Synapse
    无服务器](https://learn.microsoft.com/en-us/azure/synapse-analytics/sql/on-demand-workspace-overview)。
- en: '![](../Images/dfc98b85a7d99735689388832e72f6e6.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dfc98b85a7d99735689388832e72f6e6.png)'
- en: 'Architecture B: Compute layer — image by author'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 架构 B：计算层 — 作者提供的图像
- en: The pro of this architecture is that the data does not have to be duplicated
    and the architecture scales well. Furthermore, it can be used to crunch large
    datasets.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构的优点是数据不需要复制，架构能够很好地扩展。此外，它可以用于处理大数据集。
- en: The con of this architecture is that an additional layer is needed between the
    API and the delta tables. This means that more moving parts have to be maintained
    and secured.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构的缺点是需要在 API 和 delta 表之间添加一个额外的层。这意味着需要维护和保护更多的移动部件。
- en: '2.3 Architecture C: Optimized storage layer using Azure SQL or Cosmos DB'
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 架构 C：使用 Azure SQL 或 Cosmos DB 的优化存储层
- en: In this architecture, APIs are not connecting to delta tables, but to a different
    storage layer in which the delta tables are duplicated. The different storage
    layer can be Azure SQL or Cosmos DB. The storage layer can be optimized for fast
    retrieval of data. In the remainder of this blog there is tested with Azure SQL.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在此架构中，API 不是连接到 delta 表，而是连接到另一个存储层，在该存储层中，delta 表被复制。不同的存储层可以是 Azure SQL 或
    Cosmos DB。存储层可以针对快速检索数据进行优化。本文的其余部分中，测试使用了 Azure SQL。
- en: '![](../Images/84a687b97eb88e5346449d5e6a4704fb.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/84a687b97eb88e5346449d5e6a4704fb.png)'
- en: 'Architecture C: Optimized storage layer — image by author'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 架构 C：优化存储层 — 作者提供的图像
- en: The pro of this architecture is that the storage layer can be optimized to read
    data fast using indexes, partitioning and materialized views. This is typically
    a requirement in scenarios of request-response web apps.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构的优点是存储层可以通过使用索引、分区和物化视图来优化数据读取速度。这通常是请求-响应型 Web 应用场景中的需求。
- en: The con of this architecture is that data needs to be duplicated and an additional
    layer is needed between the API and the delta tables. This means that more moving
    parts need to be maintained and secured.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这种架构的缺点是需要对数据进行重复存储，并且在 API 和 Delta 表之间需要一个额外的层。这意味着需要维护和保护更多的组件。
- en: In the remainder of the blog the architectures are deployed and tested.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的博客中，将部署和测试这些架构。
- en: 3\. Deployment and testing of architectures
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. 部署和测试架构
- en: 3.1 Deploying architectures
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1 部署架构
- en: 'To deploy the architectures, a GitHub project is created that deploys the three
    solutions as discussed in the previous chapter. The project can be found in the
    link below:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了部署这些架构，创建了一个 GitHub 项目，该项目部署了前一章中讨论的三种解决方案。该项目可以通过以下链接找到：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following will be deployed when the GitHub project is executed:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 GitHub 项目时将部署以下内容：
- en: A delta table originating from standard test dataset [WideWorldImporterdDW full](https://azuresynapsestorage.blob.core.windows.net/sampledata/WideWorldImportersDW/csv/full/WideWorldImportersDW/csv/full/fact_sale_1y_full/).
    The test dataset consists of 50M records and 22 columns with 1 large description
    column. The delta table will be partitioned using year, quarter.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个源自标准测试数据集 [WideWorldImportersDW full](https://azuresynapsestorage.blob.core.windows.net/sampledata/WideWorldImportersDW/csv/full/WideWorldImportersDW/csv/full/fact_sale_1y_full/)
    的 Delta 表。该测试数据集包含 5000 万条记录和 22 个列，其中包含一个大描述列。该 Delta 表将使用年份和季度进行分区。
- en: 'All architectures: [Azure Function](https://learn.microsoft.com/en-us/azure/azure-functions/functions-overview?pivots=programming-language-python)
    acting as API.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有架构： [Azure Function](https://learn.microsoft.com/en-us/azure/azure-functions/functions-overview?pivots=programming-language-python)
    作为 API。
- en: 'Architecture B: Synapse Serverless acting as compute layer.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构 B：Synapse Serverless 作为计算层。
- en: 'Architecture C: Azure SQL acting as optimized storage layer.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 架构 C：Azure SQL 作为优化存储层。
- en: Once deployed, tests can be executed. The tests are described in the next paragraph.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦部署完成，就可以执行测试。测试将在下一个段落中描述。
- en: 3.2 Testing architectures
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2 测试架构
- en: 'To test the architecture, different types of queries and different scaling
    will be applied. The different type of queries can be described as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试架构，将应用不同类型的查询和不同的扩展方式。不同类型的查询可以描述如下：
- en: Look up of 20 records with 11 small columns (char, integer, datetime).
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找 20 条记录，每条记录包含 11 个小列（字符型、整数型、日期时间型）。
- en: Look up of 20 records with 2 columns including a large description column that
    contains more than 500 characters per field.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找 20 条记录，其中 2 列包含一个大描述列，每个字段超过 500 个字符。
- en: Aggregation of data using group by, having, max, average.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 group by、having、max、average 等进行数据聚合。
- en: The queries are depicted below.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是查询的示例。
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The scaling can be described as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展性可以描述如下：
- en: For architecture A, the data processing will be done in the API itself. This
    means that the compute and memory of the API is used via its [app service plan](https://learn.microsoft.com/en-us/azure/app-service/overview-hosting-plans).
    These will be tested with both [SKU Basic](https://azure.microsoft.com/en-us/pricing/details/app-service/windows/#pricing)
    (1 core and 1.75 GB memory) and SKU P1V3 SKU (2 cores, 8 GB memory). For architecture
    B and C, this is not relevant, since the processing is done elsewhere.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于架构 A，数据处理将在 API 本身中完成。这意味着将使用 API 的 [应用服务计划](https://learn.microsoft.com/en-us/azure/app-service/overview-hosting-plans)
    来利用 API 的计算和内存资源。将使用 [SKU Basic](https://azure.microsoft.com/en-us/pricing/details/app-service/windows/#pricing)（1
    核心和 1.75 GB 内存）和 SKU P1V3 SKU（2 核心，8 GB 内存）进行测试。对于架构 B 和 C，这不相关，因为处理是在其他地方进行的。
- en: For architecture B, Synapse Serverless is used. Scaling will be done automatically.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于架构 B，使用 Synapse Serverless。扩展将自动完成。
- en: For architecture C, an Azure SQL database of [standard tier](https://learn.microsoft.com/en-us/azure/azure-sql/database/service-tiers-dtu?view=azuresql)
    is taken with 125 DTUs. There will be tested without an index and with an index
    on CityKey. This index can be applied afterwards and does not require repartitioning
    of the data.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于架构 C，使用 [标准层](https://learn.microsoft.com/en-us/azure/azure-sql/database/service-tiers-dtu?view=azuresql)
    的 Azure SQL 数据库，提供 125 DTU。将分别测试没有索引和在 CityKey 上有索引的情况。这个索引可以在之后应用，并且不需要重新分区数据。
- en: In the next paragraph the results are described.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下一段将描述结果。
- en: 3.3 Results
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3 结果
- en: 'After deployment and testing the architectures, the results can be obtained.
    This is a summary of the results:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 部署并测试架构后，可以获得结果。这是结果的总结：
- en: '![](../Images/0881c24c646ce4ade82355446a0f7a03.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0881c24c646ce4ade82355446a0f7a03.png)'
- en: Test results summary
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 测试结果总结
- en: Architecture A cannot be deployed with SKU B1\. In case it is SKU P1V3 is used,
    then results can be calculated within 15 seconds in case the column size is not
    too big. Notice that all data is analyzed in the API app service plan. If too
    much data is loaded (either via many rows, large columns and/or many concurrent
    requests), this architecture is hard to scale.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 架构 A 不能使用 SKU B1 部署。如果使用 SKU P1V3，则在列大小不太大的情况下，结果可以在 15 秒内计算出来。请注意，所有数据都在 API
    应用服务计划中进行分析。如果加载了过多数据（无论是通过很多行、大列和/或大量并发请求），这个架构将难以扩展。
- en: Architecture B using Synapse Serverless performs within 10–15 seconds. The compute
    is done on Synapse Serverless which is scaled automatically to fetch and analyze
    the data. Performance is consistent for all three types of queries.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Synapse Serverless 的架构 B 在 10 到 15 秒内完成计算。计算在自动扩展的 Synapse Serverless 上进行，用于提取和分析数据。所有三种类型的查询的性能是一致的。
- en: Architecture C using Azure SQL performs best when indexes are created. For look
    up queries 1 and 2, the API responds in around 1 seconds. Query 3 requires a full
    table scan and there performance is more or less equal to other solutions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure SQL 的架构 C 在创建索引时表现最佳。对于查询 1 和查询 2，API 的响应时间大约为 1 秒。查询 3 需要进行全表扫描，其性能与其他解决方案相当。
- en: 3\. Conclusion
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. 结论
- en: Delta tables in a [medallion architecture](https://www.databricks.com/glossary/medallion-architecture)
    are generally used to create data products. These data products are used for data
    science, data analytics, and reporting. However, a common question is to also
    expose delta tables via REST APIs. In this blog post, three architectures are
    described with its pros and cons.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[Medallion 架构](https://www.databricks.com/glossary/medallion-architecture)中的
    Delta 表通常用于创建数据产品。这些数据产品用于数据科学、数据分析和报告。然而，一个常见的问题是如何通过 REST API 暴露 delta 表。在这篇博客中，描述了三种架构及其优缺点。'
- en: '**Architecture A: Libraries in API using DuckDB and PyArrow.** In this architecture,
    APIs are directly connecting to delta tables and there is no layer in between.
    This implies that all data is analyzed in memory and compute of the Azure Function.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**架构 A：使用 DuckDB 和 PyArrow 的 API 中的库**。在这个架构中，API 直接连接到 delta 表，并且中间没有任何层级。这意味着所有的数据都在
    Azure Function 的内存和计算中进行分析。'
- en: The pro of this architecture is that no additional resources are needed. This
    means less moving parts that need to be maintained and secured.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个架构的优点是无需额外的资源。这意味着需要维护和保护的部件更少。
- en: The con of this architecture is that it does not scale well since all data needs
    to be analyzed in the API itself. Therefore, it shall only be used for small amounts
    of data.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个架构的缺点是它的扩展性差，因为所有的数据都必须在 API 本身进行分析。因此，它只能用于少量的数据。
- en: '**Architecture B: Compute layer using Synapse, Databricks or Fabric.** In this
    architecture, APIs are connecting to a compute layer. This compute layer fetches
    and analyzes data from delta tables.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**架构 B：使用 Synapse、Databricks 或 Fabric 的计算层**。在这个架构中，API 连接到计算层。这个计算层从 delta
    表中提取和分析数据。'
- en: The pro of this architecture is that it scales well and data is not duplicated.
    It works well for queries that do aggregations and crunch large datasets.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个架构的优点是它具有良好的扩展性，且数据不会重复。它非常适合需要聚合并处理大数据集的查询。
- en: The con of this architecture is that it is not possible to get responseswithin
    5 seconds for look up queries consistently. Also, additional resources need to
    be secured and maintained.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个架构的缺点是，对于查询操作，无法始终在 5 秒内返回响应。此外，还需要确保和维护额外的资源。
- en: '**Architecture C: Optimized storage layer using Azure SQL or Cosmos DB**.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**架构 C：使用 Azure SQL 或 Cosmos DB 的优化存储层**。'
- en: In this architecture, APIs are connecting to an optimized storage layer. Delta
    tables are duplicated to this storage layer in advance and the storage layer is
    used to fetch and analyze the data.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个架构中，API 连接到一个优化过的存储层。Delta 表预先复制到这个存储层，并且该存储层用于提取和分析数据。
- en: The pro of this architecture is that it can be optimized for fast querying of
    look ups using indexes, partitioning, materialized views. This is often a requirement
    for request-response web apps.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种架构的优点在于，可以通过使用索引、分区和物化视图来优化查询性能。这通常是请求-响应型 Web 应用的要求。
- en: The con of this architecture is that data is duplicated to a different storage
    layer, which needs to be kept in sync. Also, additional resources need to be secured
    and maintained.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种架构的缺点在于，数据需要复制到另一个存储层，并且需要保持同步。此外，还需要保障和维护额外的资源。
- en: Unfortunately, there is no silver bullet solution. This article aimed to give
    guidance in choosing the best architecture to expose delta tables via REST APIs.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，并没有一种“灵丹妙药”式的解决方案。本文旨在为通过 REST API 暴露增量表选择最佳架构提供指导。
