["```py\n@dataclass\nclass GPTConfig:\n    block_size : int = 1024\n    vocab_size : int = 50257\n    n_layer : int = 12\n    n_head : int = 12\n    n_embd : int = 768\n```", "```py\nclass GPT(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.config = config\n\n    # ...\n```", "```py\nclass GPT(nn.Module):\n    def __init__(self, config):\n        # ...\n\n        self.transformer = nn.ModuleDict(dict(\n            wte = nn.Embedding(config.vocab_size, config.n_embd),\n            wpe = nn.Embedding(config.block_size, config.n_embd),\n            h = nn.ModuleList([Block(config) for _ in range(config.n_layer)]),\n            ln_f = nn.LayerNorm(config.n_embd)\n        )) \n```", "```py\nclass GPT(nn.Module):\n    def __init__(self, config):\n        # ...\n        self.lm_head = nn.Linear(config.n_embd, config.vocab_size, bias=False)\n\n        # weight sharing scheme\n        self.transformer.wte.weight = self.lm_head.weight\n\n        # initalize weights\n        self.apply(self._init_weights)\n```", "```py\nclass GPT(nn.Module):\n# ...\n    def forward(self, idx, targets=None):\n        B, T = idx.size() \n        assert T <= self.config.block_size, f\"maximum sequence length breached\"\n        pos = torch.arange(0, T, dtype=torch.long, device=idx.device)\n        pos_emb = self.transformer.wpe(pos)\n        tok_emb = self.transformer.wte(idx)\n\n        x = tok_emb + pos_emb # hidden broadcast\n\n        for block in self.transformer.h:\n            x = block(x)\n        x = self.transformer.ln_f(x)\n        logits = self.lm_head(x)\n        loss = None\n        if targets is not None:\n            loss = F.cross_entropy(logits.view(-1, logits.size(-1)), targets.view(-1))\n        return logits, loss\n```", "```py\nclass Block(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.ln_1 = nn.LayerNorm(config.n_embd)\n        self.attn = CausalSelfAttention(config)\n        self.ln_2 = nn.LayerNorm(config.n_embd)\n        self.mlp = MLP(config)\n# ...\n```", "```py\nclass Block(nn.Module):\n# ...\n    def forward(self, x):\n        x = x + self.attn(self.ln_1(x))\n        x = x + self.mlp(self.ln_2(x))\n        return x\n```", "```py\nclass CausalSelfAttention(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        assert config.n_embd % config.n_head == 0\n        self.c_attn = nn.Linear(config.n_embd, 3*config.n_embd)\n        self.c_proj = nn.Linear(config.n_embd, config.n_embd)\n        self.c_proj.NANOGPT_SCALE_INIT = 1\n        self.n_head = config.n_head\n        self.n_embd = config.n_embd\n        self.register_buffer('bias', torch.tril(torch.ones(config.block_size, config.block_size))\n                                    .view(1,1, config.block_size, config.block_size))\n# ...\n```", "```py\nclass CausalSelfAttention(nn.Module):\n# ...\n    def forward(self, x):\n        B, T, C = x.size() # batch size, sequence length, channels\n        qkv = self.c_attn(x)\n        q, k, v = qkv.split(self.n_embd, dim=2)\n        # transpose is done for efficiency optimization\n        k = k.view(B, T, self.n_head, C // self.n_head).transpose(1, 2)\n        q = q.view(B, T, self.n_head, C // self.n_head).transpose(1, 2)\n        v = v.view(B, T, self.n_head, C // self.n_head).transpose(1, 2)\n\n        att = (q @ k.transpose(-2,-1)) * (1.0 / math.sqrt(k.size(-1)))\n        att = att.masked_fill(self.bias[:, :, :T, :T] == 0, float(\"-inf\"))\n        att = F.softmax(att, dim=-1)\n        y = att @ v\n        y = y.transpose(1,2).contiguous().view(B, T, C)\n\n        y = self.c_proj(y)\n        return y\n```", "```py\nclass MLP(nn.Module):\n    def __init__(self, config):\n        super().__init__()\n        self.c_fc = nn.Linear(config.n_embd, 4 * config.n_embd)\n        self.gelu = nn.GELU(approximate=\"tanh\")\n        self.c_proj = nn.Linear(4 * config.n_embd, config.n_embd)\n        self.c_proj.NANOGPT_SCALE_INIT = 1\n# ...\n```", "```py\nclass MLP(nn.Module):\n# ...\n    def forward(self, x):\n        x = self.c_fc(x)\n        x = self.gelu(x)\n        x = self.c_proj(x)\n        return x\n```", "```py\nclass GPT(nn.Module):\n# ...\n    @classmethod\n    def from_pretrained(cls, model_type):\n        \"\"\"Loads pretrained GPT-2 model weights from huggingface\"\"\"\n        assert model_type in {'gpt2', 'gpt2-medium', 'gpt2-large', 'gpt2-xl'}\n        from transformers import GPT2LMHeadModel\n        print(\"loading weights from pretrained gpt: %s\" % model_type)\n\n        # n_layer, n_head and n_embd are determined from model_type\n        config_args = {\n            'gpt2':         dict(n_layer=12, n_head=12, n_embd=768),  # 124M params\n            'gpt2-medium':  dict(n_layer=24, n_head=16, n_embd=1024), # 350M params\n            'gpt2-large':   dict(n_layer=36, n_head=20, n_embd=1280), # 774M params\n            'gpt2-xl':      dict(n_layer=48, n_head=25, n_embd=1600), # 1558M params\n        }[model_type]\n        config_args['vocab_size'] = 50257 # always 50257 for GPT model checkpoints\n        config_args['block_size'] = 1024 # always 1024 for GPT model checkpoints\n        # create a from-scratch initialized minGPT model\n        config = GPTConfig(**config_args)\n        model = GPT(config)\n        sd = model.state_dict()\n        sd_keys = sd.keys()\n        sd_keys = [k for k in sd_keys if not k.endswith('.attn.bias')] # discard this mask / buffer, not a param\n# ...\n```", "```py\nclass GPT(nn.Module):\n# ...\n    @classmethod\n    def from_pretrained(cls, model_type):\n# ...\n        model_hf = GPT2LMHeadModel.from_pretrained(model_type)\n        sd_hf = model_hf.state_dict()\n\n        # copy while ensuring all of the parameters are aligned and match in names and shapes\n        sd_keys_hf = sd_hf.keys()\n        sd_keys_hf = [k for k in sd_keys_hf if not k.endswith('.attn.masked_bias')] # ignore these, just a buffer\n        sd_keys_hf = [k for k in sd_keys_hf if not k.endswith('.attn.bias')] # same, just the mask (buffer)\n        transposed = ['attn.c_attn.weight', 'attn.c_proj.weight', 'mlp.c_fc.weight', 'mlp.c_proj.weight']\n        # basically the openai checkpoints use a \"Conv1D\" module, but we only want to use a vanilla Linear\n        # this means that we have to transpose these weights when we import them\n        assert len(sd_keys_hf) == len(sd_keys), f\"mismatched keys: {len(sd_keys_hf)} != {len(sd_keys)}\"\n```", "```py\nclass GPT(nn.Module):\n# ...\n    @classmethod\n    def from_pretrained(cls, model_type):\n# ...\n        for k in sd_keys_hf:\n            if any(k.endswith(w) for w in transposed):\n                # special treatment for the Conv1D weights we need to transpose\n                assert sd_hf[k].shape[::-1] == sd[k].shape\n                with torch.no_grad():\n                    sd[k].copy_(sd_hf[k].t())\n            else:\n                # vanilla copy over the other parameters\n                assert sd_hf[k].shape == sd[k].shape\n                with torch.no_grad():\n                    sd[k].copy_(sd_hf[k])\n\n        return model\n```", "```py\ndevice = \"cpu\"\nif torch.cuda.is_available():\n    device = \"cuda\"\nelif hasattr(torch.backends, \"mps\") and torch.backends.mps.is_available():\n    device = \"mps\"\nprint(f\"device {device}\")\n\ntorch.manual_seed(1337)\n\nmodel = GPT(GPTConfig())\nmodel.eval()\nmodel.to(device)\n```", "```py\nimport tiktoken\nenc = tiktoken.get_encoding('gpt2')\ntokens = enc.encode(\"Hello, I'm a language model,\")\ntokens = torch.tensor(tokens, dtype=torch.long)\ntokens = tokens.unsqueeze(0).repeat(num_return_sequences, 1)\nx = tokens.to(device)\n```", "```py\nwhile x.size(1) < max_length:\n    with torch.no_grad():\n        logits, _ = model(x)\n        logits = logits[:, -1, :]\n        probs = F.softmax(logits, dim=-1)\n        topk_probs, topk_indices = torch.topk(probs, 50, dim=-1)\n        ix = torch.multinomial(topk_probs, 1)\n        xcol = torch.gather(topk_indices, -1, ix)\n        x = torch.cat((x, xcol), dim=1)\n```", "```py\nfor i in range(num_return_sequences):\n    tokens = x[i, :max_length].tolist()\n    decoded = enc.decode(tokens)\n    print(f\">> {decoded}\")\n```", "```py\nclass DataLoaderLite:\n    def __init__(self, B, T):\n        self.B = B\n        self.T = T\n\n        with open('shakespeare.txt', \"r\") as f:\n            text = f.read()\n\n        enc = tiktoken.get_encoding('gpt2')\n        tokens = enc.encode(text)\n        self.tokens = torch.tensor(tokens)\n        print(f\"1 epoch = {len(self.tokens) // B * T} batches\")\n\n        self.current_position = 0\n```", "```py\nclass DataLoaderLite:\n# ...\n    def next_batch(self):\n        B, T = self.B, self.T\n        buf = self.tokens[self.current_position: self.current_position+(B*T + 1)]\n        x = (buf[:-1]).view(B, T)\n        y = (buf[1:]).view(B,T)\n\n        self.current_position += B * T\n        if self.current_position + (B*T+1) > len(self.tokens):\n            self.current_position = 0\n        return x,y\n```", "```py\nclass GPT(nn.Module):\n# ...\n    def _init_weights(self, module):\n        # layer norm is by default set to what we want, no need to adjust it\n        if isinstance(module, nn.Linear):\n            std = 0.02\n            if hasattr(module, \"NANOGPT_SCALE_INIT\"):\n                std *= (2 * self.config.n_layer) ** -0.5 # 2 * for 2 additions (attention & mlp)\n            torch.nn.init.normal_(module.weight, mean=0.0, std=std)\n            # reasonable values are set based off a certain equation\n            if module.bias is not None:\n                torch.nn.init.zeros_(module.bias)\n        elif isinstance(module, nn.Embedding):\n            torch.nn.init.normal_(module.weight, mean=0.0, std=0.02 )\n```", "```py\ndevice = \"cpu\"\nif torch.cuda.is_available():\n    device = \"cuda\"\nelif hasattr(torch.backends, \"mps\") and torch.backends.mps.is_available():\n    device = \"mps\"\nprint(f\"device {device}\")\n\nnum_return_sequences = 5\nmax_length = 30\n\ntorch.manual_seed(1337)\n\ntrain_loader = DataLoaderLite(B=4, T=32)\n\nmodel = GPT(GPTConfig())\nmodel.to(device)\n```", "```py\noptimizer = torch.optim.AdamW(model.parameters(), lr=3e-4)\nfor i in range(50):\n    x, y = train_loader.next_batch()\n    x, y = x.to(device), y.to(device)\n    optimizer.zero_grad() #have to start with a zero gradient\n    logits, loss = model(x, y)\n    loss.backward() #adds to the gradient (+=, which is why they must start as 0)\n    optimizer.step()\n    print(f\"loss {loss.item()}, step {i}\")\n```"]