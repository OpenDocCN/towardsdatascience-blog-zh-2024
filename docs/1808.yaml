- en: 'Applied Python Chronicles: A Gentle Intro to Pydantic'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用Python编年史：Pydantic简介
- en: 原文：[https://towardsdatascience.com/applied-python-chronicles-a-gentle-intro-to-pydantic-a630f797e933?source=collection_archive---------2-----------------------#2024-07-25](https://towardsdatascience.com/applied-python-chronicles-a-gentle-intro-to-pydantic-a630f797e933?source=collection_archive---------2-----------------------#2024-07-25)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/applied-python-chronicles-a-gentle-intro-to-pydantic-a630f797e933?source=collection_archive---------2-----------------------#2024-07-25](https://towardsdatascience.com/applied-python-chronicles-a-gentle-intro-to-pydantic-a630f797e933?source=collection_archive---------2-----------------------#2024-07-25)
- en: Whether you are a Data Engineer, Machine Learning Engineer or Web developer,
    you ought to get used to this tool
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无论你是数据工程师、机器学习工程师还是Web开发者，你都应该熟悉这个工具。
- en: '[](https://medium.com/@ilija.lazarevic?source=post_page---byline--a630f797e933--------------------------------)[![Ilija
    Lazarevic](../Images/4a0d84af6d8fa97705ee35444d319b07.png)](https://medium.com/@ilija.lazarevic?source=post_page---byline--a630f797e933--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a630f797e933--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a630f797e933--------------------------------)
    [Ilija Lazarevic](https://medium.com/@ilija.lazarevic?source=post_page---byline--a630f797e933--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@ilija.lazarevic?source=post_page---byline--a630f797e933--------------------------------)[![Ilija
    Lazarevic](../Images/4a0d84af6d8fa97705ee35444d319b07.png)](https://medium.com/@ilija.lazarevic?source=post_page---byline--a630f797e933--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a630f797e933--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a630f797e933--------------------------------)
    [Ilija Lazarevic](https://medium.com/@ilija.lazarevic?source=post_page---byline--a630f797e933--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a630f797e933--------------------------------)
    ·11 min read·Jul 25, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a630f797e933--------------------------------)
    ·阅读时间：11分钟·2024年7月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/63778e7e341a0790bc2b994ab5b0ebc3.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/63778e7e341a0790bc2b994ab5b0ebc3.png)'
- en: How the antic sun shines upon PydAntic users. Image by [Vladimir Timofeev](https://www.istockphoto.com/photo/sunset-above-acropolis-of-lindos-doric-columns-the-ancient-temple-athena-lindia-the-gm1009651096-272195895?clarity=false)
    under license to Ilija Lazarevic.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 夕阳如何照耀Pydantic用户。图片由[弗拉基米尔·季莫费耶夫](https://www.istockphoto.com/photo/sunset-above-acropolis-of-lindos-doric-columns-the-ancient-temple-athena-lindia-the-gm1009651096-272195895?clarity=false)提供，授权给伊利亚·拉扎列维奇。
- en: There are quite a few use cases where Pydantic fits almost seamlessly. Data
    processing, among others, benefits from using Pydantic as well. However, it can
    be used in web development for parsing and structuring data in expected formats.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多使用场景中，Pydantic几乎可以无缝地适配。数据处理等任务也能从使用Pydantic中受益。不过，它也可以在Web开发中用于解析和结构化预期格式的数据。
- en: Today’s idea is to define a couple of pain points and show how Pydantic can
    be used. Let’s start with the most familiar use case, and that is data parsing
    and processing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的主题是定义几个痛点，并展示如何使用Pydantic。我们从最常见的使用场景开始，那就是数据解析和处理。
- en: Let’s say we have a CSV file with a dozen columns and thousands of rows. The
    usual scenario in data analysis is to load this CSV into Pandas DataFrame and
    start fiddling with it. Often you start inspecting the data and types of columns,
    drop some of them, and create new ones. This process is based on your previous
    knowledge of what is in the dataset. Yet, this is not always transparent to the
    others. They either have to go and open a CSV file (or any other source of data)
    or skim through the code to figure out what columns are being used and created.
    This is all good for the initial steps of data analysis and research. However,
    once the data set is analyzed and we are ready to go into creating a data pipeline
    that will load, transform, and use data for analytics or machine learning purposes,
    we need a standardized way of making sure datasets and data types are in expected
    format. This is why we want a library that will give us the ability to declare
    or define this. There are few libraries for this, most of them are open source
    as well, but Pydantic, being open source as well, found its way into different
    frameworks and is universally accepted in different use cases.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个包含十几列和几千行的 CSV 文件。在数据分析中，常见的情况是将这个 CSV 文件加载到 Pandas DataFrame 中，然后开始处理它。通常，你会开始检查数据和列的数据类型，删除其中的一些列，并创建新的列。这个过程是基于你对数据集的先前知识。然而，这对其他人来说并不总是透明的。他们要么需要打开
    CSV 文件（或任何其他数据源），要么需要浏览代码，搞清楚哪些列正在使用或被创建。这对于数据分析和研究的初始步骤是没问题的。然而，一旦数据集被分析完，并且我们准备创建一个数据管道来加载、转换并用于分析或机器学习目的时，我们就需要一种标准化的方法，确保数据集和数据类型符合预期格式。这就是为什么我们需要一个可以声明或定义这些的库。有一些库可以做到这一点，它们大多数是开源的，而
    Pydantic 作为开源库，也已经进入了不同的框架，并在各种用例中得到广泛接受。
- en: Okay, let’s start.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们开始吧。
- en: Python — Type hinting
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python — 类型提示
- en: Before we get into the example I have previously mentioned, I’d like to start
    with some basics in Python.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入我之前提到的示例之前，我想先讲一些 Python 的基础知识。
- en: Through its versions, Python introduced type hinting. What is type hinting,
    and why do we need it? Well, as we all know, Python is a dynamically typed scripting
    language. This means that data types are inferred in runtime. This has its benefits
    in engineers being able to write code faster. The bad part is that you will not
    be alarmed about type mismatches until you run your code. At that time, it may
    be a bit late to fix your error quickly. Because Python still remains a dynamically
    typed language, there was an intent to bridge this gap by introducing so-called
    “type hinting” that engineers can use to notify both readers and IDEs about expected
    data types.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在其各个版本中引入了类型提示。什么是类型提示，为什么我们需要它呢？嗯，正如我们所知，Python 是一种动态类型的脚本语言。这意味着数据类型是在运行时推断的。这在工程师能够更快地编写代码上有其好处。坏处是，直到运行代码时，你才会发现类型不匹配。那时，可能有些晚了，无法迅速修复错误。由于
    Python 仍然是一种动态类型语言，因此引入了所谓的“类型提示”，其目的是弥合这一差距，工程师可以使用它来通知读者和 IDE 预期的数据类型。
- en: 'Example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is a short example of how a defined function may be used in multiple use
    cases, some of which were not envisioned by its writer. For someone persistent
    enough, you will have to introduce many hoops so you can be assured your code
    is used in the intended way.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简短的示例，展示了一个定义好的函数如何在多个用例中使用，其中一些用例并非其编写者所预见。对于那些足够坚持的人，你将不得不引入许多限制条件，以确保代码按预期方式使用。
- en: How does type hinting look?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提示是怎样的呢？
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This one works as well! Why? Well, this is still called “type hinting,” not
    “type enforcing”. As already mentioned, it is used as a way to “notify” readers
    and “users” about the intended way of use. One of the code “users” are IDEs, and
    your IDE of choice should be able to figure out and raise alerts in case you try
    to bypass the data type declarations.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个也有效！为什么？因为这仍然是“类型提示”，而不是“类型强制”。如前所述，它是用来“通知”读者和“用户”预期的使用方式。代码的“用户”之一是 IDE，而你选择的
    IDE 应该能够识别并在你尝试绕过数据类型声明时发出警告。
- en: Why did we go to describe something like this? Well, it is because Pydantic
    is built on top of this type of hinting. It uses type hinting to define data types
    and structures and validate them as well.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们要描述这些内容呢？因为 Pydantic 是建立在这种类型提示基础上的。它使用类型提示来定义数据类型和结构，并进行验证。
- en: Pydantic — First steps
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pydantic — 第一步
- en: 'As I already mentioned, Pydantic is used to validate data structures and data
    types. There are four ways in which you can use it. Today I will go through the
    two most important:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前提到的，Pydantic 用于验证数据结构和数据类型。你可以通过四种方式来使用它。今天我将介绍其中两个最重要的：
- en: '`validate_call` to validate function calls based on type hinting and annotations,'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate_call` 用于基于类型提示和注解来验证函数调用，'
- en: '`BaseModel` to define and validate models through class definitions.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BaseModel` 用于通过类定义来定义和验证模型。'
- en: Pydantic — validate_call
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pydantic — validate_call
- en: So, there is no better way to start with something new than to immerse yourself
    right away. This is how we shall start learning Pydantic.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，没有比直接开始新事物更好的方法了。这就是我们开始学习 Pydantic 的方式。
- en: 'Before you are able to use it, you have to install it:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在你能够使用它之前，你需要先安装它：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For the sake of clarity, let me note both Python and pydantic versions here
    as well:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，我在这里也标注一下 Python 和 Pydantic 的版本：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, you want to create a new Python project, create your first Python script,
    import Pydantic, and start using it. The first example will be to revise our previous
    function and use Pydantic to make sure it is used in the intended way. Example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你需要创建一个新的 Python 项目，创建你的第一个 Python 脚本，导入 Pydantic，并开始使用它。第一个示例是修改我们之前的函数，并使用
    Pydantic 来确保它按预期的方式使用。示例：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A couple of things to clarify:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 需要澄清几点：
- en: '`validate_call` is used as a decorator. This is basically a wrapper around
    the function declared that introduces additional logic that can be run at the
    time the function is defined as well as when you call the function. Here, it is
    used to make sure the data you pass to the function call conforms to the expected
    data types (hints).'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate_call` 被用作装饰器。它本质上是包裹在声明的函数周围，增加了在函数定义时以及调用时可以执行的额外逻辑。在这里，它用于确保传递给函数调用的数据符合预期的数据类型（提示）。'
- en: A validated function call raises `ValidationError` in a case you start using
    your function in an unintended way. This error is verbose and says a lot about
    why it was raised.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证过的函数调用会在你以非预期的方式使用函数时抛出 `ValidationError`。这个错误信息很详细，能说明为什么会抛出这个错误。
- en: By principle of charity, Pydantic tries to figure out what you meant and tries
    to use type coercion. This can result in string values passed to a function call
    being implicitly converted to the expected type.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据慈悲原则，Pydantic 尝试推断你的意思并进行类型强制转换。这可能导致传递给函数调用的字符串值被隐式转换为预期的类型。
- en: Type coercion is not always possible, and in that case, `ValidationError` is
    raised.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型强制转换并不总是可能的，在这种情况下，`ValidationError` 会被抛出。
- en: 'Don’t know what Python *decorator* function is? Read one of my previous articles
    on this subject:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 不知道什么是 Python 的 *decorator* 函数？阅读我之前关于这个主题的文章之一：
- en: '[](/advanced-python-functions-3be6810f92d1?source=post_page-----a630f797e933--------------------------------)
    [## Advanced Python: Functions'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/advanced-python-functions-3be6810f92d1?source=post_page-----a630f797e933--------------------------------)
    [## 高级 Python：函数'
- en: After reading the title, you probably ask yourself something along the lines
    of, “Functions in Python are an advanced…
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读标题后，你可能会问自己：“Python 中的函数是高级...”
- en: towardsdatascience.com](/advanced-python-functions-3be6810f92d1?source=post_page-----a630f797e933--------------------------------)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/advanced-python-functions-3be6810f92d1?source=post_page-----a630f797e933--------------------------------)'
- en: What about default values and argument extractions?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 那么默认值和参数提取呢？
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Takeaways from this example:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子的收获：
- en: You can annotate the type of the variable number of arguments declaration (*args).
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以注解变量的可变参数声明（*args）。
- en: Default values are still an option, even if you are annotating variable data
    types.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使你正在注解变量的数据类型，默认值仍然是一个可选项。
- en: '`validate_call` accepts `validate_return` argument, which makes function return
    value validation as well. Data type coercion is also applied in this case. `validate_return`
    is set to `False` by default. If it is left as it is, the function may not return
    what is declared in type hinting.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate_call` 接受 `validate_return` 参数，它使得函数返回值也进行验证。在这种情况下，也会应用数据类型强制转换。默认情况下，`validate_return`
    设置为 `False`。如果保持默认值不变，函数返回的值可能与类型提示中声明的值不一致。'
- en: 'What about if you want to validate the data type but also constrain the values
    that variable can take? Example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想验证数据类型，但同时也限制该变量可以取的值怎么办？示例：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This example shows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例展示了：
- en: You can use `Annotated` and `pydantic.Field` to not only validate data type
    but also add metadata that Pydantic uses to constrain variable values and formats.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用`Annotated`和`pydantic.Field`不仅验证数据类型，还可以添加 Pydantic 用来约束变量值和格式的元数据。
- en: '`ValidationError` is yet again very verbose about what was wrong with our function
    call. This can be really helpful.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ValidationError`再次非常详细地说明了函数调用中哪里出了问题，这非常有帮助。'
- en: 'Here is one more example of how you can both validate and constrain variable
    values. We will simulate a payload (dictionary) that you want to process in your
    function after it has been validated:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个如何验证并约束变量值的示例。我们将模拟一个 payload（字典），在它被验证后，你希望在函数中处理它：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This was the basics of how to validate function arguments and their return value.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是验证函数参数及其返回值的基本方法。
- en: 'Now, we will go to the second most important way Pydantic can be used to validate
    and process data: through defining models.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将进入 Pydantic 用于验证和处理数据的第二种最重要的方法：通过定义模型。
- en: Pydantic — BaseModel
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pydantic — BaseModel
- en: This part is more interesting for the purposes of data processing, as you will
    see.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分对于数据处理目的来说更为有趣，正如你将看到的那样。
- en: So far, we have used `validate_call` to decorate functions and specified function
    arguments and their corresponding types and constraints.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用`validate_call`装饰器对函数进行了装饰，并指定了函数参数及其对应的类型和约束。
- en: Here, we define models by defining model classes, where we specify fields, their
    types, and constraints. This is very similar to what we did previously. By defining
    a model class that inherits from Pydantic `BaseModel`, we use a hidden mechanism
    that does the data validation, parsing, and serialization. What this gives us
    is the ability to create objects that conform to model specifications.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过定义模型类来定义模型，在模型类中指定字段、字段类型和约束。这与我们之前做的非常相似。通过定义继承自 Pydantic `BaseModel`的模型类，我们使用了一个隐藏的机制来进行数据验证、解析和序列化。这样我们就能创建符合模型规范的对象。
- en: 'Here is an example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can use annotation here as well, and you can also specify default values
    for fields. Let’s see another example:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在这里使用注解，并且还可以为字段指定默认值。我们来看另一个例子：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Things get very interesting when your use case gets a bit complex. Remember
    the `payload` that we defined? I will define another, more complex structure that
    we will go through and validate. To make it more interesting, let’s create a payload
    that we will use to query a service that acts as an intermediary between us and
    LLM providers. Then we will validate it.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的用例变得有些复杂时，事情变得非常有趣。还记得我们定义的`payload`吗？我将定义另一个更复杂的结构，我们将对其进行逐步处理和验证。为了让它更有趣，我们来创建一个
    payload，用于查询一个充当我们与 LLM 提供商之间中介的服务。然后我们会对其进行验证。
- en: 'Here is an example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Some of the important insights from this elaborated example are:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个详细的例子中我们可以得到一些重要的见解：
- en: You can use Enums or `Literal` to define a list of specific values that are
    expected.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用枚举或`Literal`来定义期望的特定值列表。
- en: In case you want to name a model’s field differently from the field name in
    the validated data, you can use `validation_alias`. It specifies the field name
    in the data being validated.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你想将模型字段命名为与验证数据中的字段名不同的名称，可以使用`validation_alias`。它指定验证数据中的字段名。
- en: '`serialization_alias` is used when the model''s internal field name is not
    necessarily the same name you want to use when you serialize the model.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serialization_alias`用于当模型的内部字段名称不一定与序列化模型时你想使用的名称相同时。'
- en: Field can be excluded from serialization with `exclude=True`.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用`exclude=True`将字段排除在序列化之外。
- en: Model fields can be Pydantic models as well. The process of validation in that
    case is done recursively. This part is really awesome, since Pydantic does the
    job of going into depth while validating nested structures.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型字段也可以是 Pydantic 模型。在这种情况下，验证过程是递归进行的。这一部分非常棒，因为 Pydantic 在验证嵌套结构时会深入执行验证。
- en: Fields that are not taken into account in the model definition are not parsed.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模型定义中未考虑的字段不会被解析。
- en: Pydantic — Use cases
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pydantic — 用例
- en: Here I will show you the snippets of code that show where and how you can use
    Pydantic in your day-to-day tasks.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我将展示一些代码片段，展示你如何在日常任务中使用 Pydantic。
- en: Data processing
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据处理
- en: Say you have data you need to validate and process. It can be stored in CSV,
    Parquet files, or, for example, in a NoSQL database in the form of a document.
    Let’s take the example of a CSV file, and let’s say you want to process its content.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有需要验证和处理的数据。这些数据可以存储在 CSV、Parquet 文件中，或者例如在 NoSQL 数据库中以文档的形式存储。让我们以 CSV 文件为例，假设你想处理其内容。
- en: 'Here is the CSV file (`test.csv`) example:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 CSV 文件（`test.csv`）示例：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And here is how it is validated and parsed:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是它如何进行验证和解析的：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: FastAPI request validation
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FastAPI 请求验证
- en: FastAPI is already integrated with Pydantic, so this one is going to be very
    brief. The way FastAPI handles requests is by passing them to a function that
    handles the route. By passing this request to a function, validation is performed
    automatically. Something similar to validate_call that we mentioned at the beginning
    of this article.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 已经与 Pydantic 集成，因此这一部分会非常简短。FastAPI 处理请求的方式是将它们传递给处理路由的函数。通过将请求传递给一个函数，验证会自动进行。类似于我们在本文开头提到的
    `validate_call`。
- en: 'Example of `app.py` that is used to run FastAPI-based service:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 用于运行基于 FastAPI 的服务的 `app.py` 示例：
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Conclusion
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Pydantic is a really powerful library and has a lot of mechanisms for a multitude
    of different use cases and edge cases as well. Today, I explained the most basic
    parts of how you should use it, and I’ll provide references below for those who
    are not faint-hearted.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Pydantic 是一个非常强大的库，具有很多机制，适用于多种不同的使用场景和边缘情况。今天，我讲解了如何使用它的最基础部分，并且在下面提供了参考资料，供那些不畏困难的人查阅。
- en: Go and explore. I’m sure it will serve you well on different fronts.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 去探索一下吧。我相信它会在不同方面对你有所帮助。
- en: References
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[Python type hinting](https://docs.python.org/3/library/typing.html).'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 类型提示](https://docs.python.org/3/library/typing.html)。'
- en: '[Pydantic models](https://docs.pydantic.dev/latest/concepts/models/).'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pydantic 模型](https://docs.pydantic.dev/latest/concepts/models/)。'
- en: '[Validate call decorator](https://docs.pydantic.dev/latest/concepts/validation_decorator/).'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[验证调用装饰器](https://docs.pydantic.dev/latest/concepts/validation_decorator/)。'
- en: '[Pydantic fields](https://docs.pydantic.dev/latest/concepts/fields/).'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pydantic 字段](https://docs.pydantic.dev/latest/concepts/fields/)。'
- en: '[Pydantic validators](https://docs.pydantic.dev/latest/concepts/validators/).'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pydantic 验证器](https://docs.pydantic.dev/latest/concepts/validators/)。'
