- en: Python One Billion Row Challenge — From 10 Minutes to 4 Seconds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/python-one-billion-row-challenge-from-10-minutes-to-4-seconds-0718662b303e?source=collection_archive---------0-----------------------#2024-05-08](https://towardsdatascience.com/python-one-billion-row-challenge-from-10-minutes-to-4-seconds-0718662b303e?source=collection_archive---------0-----------------------#2024-05-08)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The one billion row challenge is exploding in popularity. How well does Python
    stack up?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@radecicdario?source=post_page---byline--0718662b303e--------------------------------)[![Dario
    Radečić](../Images/41882a3b30bab9da43d66a59f1df366b.png)](https://medium.com/@radecicdario?source=post_page---byline--0718662b303e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0718662b303e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0718662b303e--------------------------------)
    [Dario Radečić](https://medium.com/@radecicdario?source=post_page---byline--0718662b303e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0718662b303e--------------------------------)
    ·10 min read·May 8, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5a1a30d771e7c1dbc76b57b76b2635ac.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Alina Grubnyak](https://unsplash.com/@alinnnaaaa?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: The question of how fast a programming language can go through and aggregate
    [1 billion rows](https://1brc.dev) of data has been gaining traction lately. **Python**,
    not being the most performant language out there, naturally **doesn’t stand a
    chance** — especially since the currently [top-performing Java implementation](https://www.morling.dev/blog/1brc-results-are-in/)
    takes only 1.535 seconds!
  prefs: []
  type: TYPE_NORMAL
- en: The fundamental [rule](https://1brc.dev/#rules-and-limits) of the challenge
    is that **no external libraries are allowed**. My goal for today is to start by
    obeying the rules, and then see what happens if you use external libraries and
    better-suited file formats.
  prefs: []
  type: TYPE_NORMAL
- en: '**I’ve run all the scripts 5 times and averaged the results.**'
  prefs: []
  type: TYPE_NORMAL
- en: As for the hardware, I’m using a *16" M3 Pro Macbook Pro with 12 CPU cores and
    36 GB of RAM*. Your results may vary if you decide to run the code, but hopefully,
    you should see similar percentage differences between implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[GitHub Repo — 1 Billion Row Challenge in Python](https://github.com/darioradecic/python-1-billion-row-challenge/blob/main/data/convertToParquet.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the 1 Billion Row Challenge?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The idea behind the 1 Billion Row Challenge (1BRC) is simple — go through a
    `.txt`…
  prefs: []
  type: TYPE_NORMAL
