["```py\nGenerate 5 virtual personas to me. They work on the same project. They should have\n- first name\n- age\n- profession/position at the company\n- a short description of their personalities. \nTheir personalities should have negative sides as well.\nAt least one pair should be in a manager-subordinate relationship.\n```", "```py\nName: Emily\nAge: 29\nProfession/Position: Project Manager\nPersonality Description: Emily is highly organized and decisive, often seen as the backbone of the team. \nShe is empathetic and approachable but can sometimes be overly controlling and resistant to deviating from her planned schedules. \nEmily's insistence on efficiency can occasionally overlook the need for creative freedom.\n\nName: Josh\nAge: 34\nProfession/Position: Lead Software Engineer\nPersonality Description: Josh is tech-savvy and a problem solver with a passion for new technologies. \nHe is introverted and sometimes struggles with communication, which can lead to misunderstandings with teammates. \nHis calm demeanor is an asset, although it sometimes appears as disinterest in team discussions.\n\nName: Leah\nAge: 26\nProfession/Position: Junior Software Engineer \nPersonality Description: Leah is creative and energetic, full of ideas and great at networking. \nHowever, her enthusiasm can sometimes manifest as impatience with slower-paced tasks or details. \nShe can be overly ambitious, pushing the team towards unfeasible goals.\n\nName: Carlos\nAge: 42\nProfession/Position: Financial Analyst\nPersonality Description: Carlos is meticulous and deeply knowledgeable about finances \nbut tends to be pessimistic and overly critical, which can dampen team morale. \nHis cautious nature sometimes slows down decision-making processes, frustrating more dynamic team members.\n\nName: Fiona\nAge: 38\nProfession/Position: UX/UI Designer\nPersonality Description: Fiona is creative and a great listener, making her designs user-friendly. \nHowever, she can be overly sensitive to criticism and sometimes takes feedback personally. \nShe tends to avoid conflict, which can lead to unresolved issues in the team dynamics.\n```", "```py\nYou need to act now like Emily. \nYou are taking part in an online HR assessment. \nHere are some data about your profession, personality, etc:\n\nName: Emily\nAge: 29\nProfession/Position: Project Manager\nPersonality Description: Emily is highly organized and decisive, often seen as the backbone of the team. She is empathetic and approachable but can sometimes be overly controlling and resistant to deviating from her planned schedules. Emily's insistence on efficiency can occasionally overlook the need for creative freedom.\n\nIn this assessment, you, Emily, are asked these three questions:\n- Tell the story of your average workday. Your story needs to be very detailed, including tasks, people - and anything that comes to your mind. There is no good or bad answer. \n- Tell a story where you felt really bad at work. There is no good or bad answer - but please make it as detailed as you can. \n- Tell a story where you felt great and successful at work. There is no good or bad answer - but please make it as detailed as you can.\n\nYour team consists of the following people, if you have any relationship with them, please include in your answers:\n<Description of other teammates>\n```", "```py\n1\\. Average Workday:\nMy typical day starts with a quick review of my to-do list, which I prepare the night before. \nI arrive at the office by 8 AM, settle in, and start with a 30-minute session to review the progress on ongoing projects against their timelines. \nAt 8:30 AM, I hold a brief stand-up meeting with the team, which includes Josh, Leah, Carlos, and Fiona, to catch up on their progress and address any immediate concerns.\n\nAfter the stand-up, I typically meet with Carlos to discuss budget updates or financial issues. \nHis insights are crucial, though I occasionally need to guide the conversation to keep it from veering into \noverly pessimistic territory, which helps us stay focused on solutions rather than problems.\n\nMid-morning is usually reserved for one-on-one sessions with team members needing guidance. \nFor instance, I often spend time with Fiona reviewing design timelines. \nShe appreciates clear, empathetic feedback which I strive to provide, though I must balance this with the need to maintain our project schedule.\n\nLunch is a quick affair, often at my desk, as I catch up on emails and plan for the afternoon. \nPost-lunch, I review Leah's latest marketing initiatives or software developments. Leah's energy is infectious, \nthough her ambition sometimes requires tempering to align with our practical deliverables.\n\nMy afternoons often involve strategic planning sessions, where I work with Josh \nto align our technology needs with business goals. \nHis technical expertise is invaluable, though I sometimes mediate \nto ensure his ideas are clearly communicated to the rest of the team.\n\nI end my day by updating our project management tools, responding to any final emails, \nand preparing the next day’s priority list. Before leaving, \nI always walk around to say a quick goodbye to the team, ensuring I leave on a personal note.\n\n2\\. Negative Experience:\nA particularly challenging day occurred when we were nearing a major project deadline. \nTensions were high, and despite my efforts to keep the team on track, a critical integration flaw was discovered. \nThe error was in a section Josh had worked on; his usual calm demeanor made it difficult to gauge his concern, \nwhich initially seemed like disinterest. This misunderstanding escalated under pressure.\n\nI felt overwhelmed and responsible, fearing the mistake would reflect poorly on my ability to manage. \nIt was a stark reminder that my need for control and perfection could blind me to the team's stress levels. \nThat day ended with us missing a deadline, a first for me, which deeply upset me.\n\n3\\. Positive Experience:\nOne of my proudest moments was leading the team during the launch of a new product that was pivotal to our company’s expansion. \nThe project had complex components, requiring tight coordination between all departments. \nDespite the challenges, including balancing Carlos' cautious financial strategies \nwith Leah's ambitious marketing plans, we executed a flawless launch.\n\nThe success was made sweeter by the positive feedback from upper management and the client’s satisfaction. \nIt reinforced the value of my organizational skills and my ability to gently \nbut effectively guide the team through high-pressure situations. \nThat day, I truly felt accomplished, seeing the tangible results of our hard work and my leadership.\n```", "```py\nYou are a social network extraction tool.\nYou are given an input marked in <input> tag.\n\nExtract the relationships between people mentioned in the <input> text and \nstructure them into a CSV format with columns: \n- source\n- target\n- edge_type\n- interaction_type\n\nThe relationships can be of two types: knowledge and personal. \nThe interaction types for knowledge can be \"gives knowledge\" or \"receives knowledge,\" \nFor personal, the interaction_type can be \"positive interaction\" or \"negative interaction.\"\n\nExample input:\n<input>\nJosh helps Leah with coding challenges, sharing his expertise regularly. \nEmily and Fiona often collaborate creatively and have a positive working relationship.\n</input>\n\nExample output:\nsource,target,edge_type,interaction_type\nJosh,Leah,knowledge,gives knowledge\nEmily,Fiona,personal,positive interaction\n\nThe relationship must be represented only once.\nYou must not represent an edge in the opposite direction.\nBad example:\nsource,target,edge_type,interaction_type\nJosh,Leah,knowledge,gives knowledge\nLeah,Josh,knowledge,receives knowledge\n\nGood example:\nsource,target,edge_type,interaction_type\nJosh,Leah,knowledge,gives knowledge\n\n<input>\nInput comes here\n</input>\n```", "```py\nPlease build a network in Python from this data. \nThere should be two types of edges: \"knowledge\", \"personal\". \nYou can replace the textual interaction_types to numbers, like -1, 1\\. \nI need this graph visualized. \nI want to see the different edge_types with different type of lines and the weights with different colors. \n```", "```py\nimport networkx as nx\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import LinearSegmentedColormap\n\ncleaned_data = pd.read_csv(<file_destination>)\n# For knowledge, we don't punish with negative values if there is no sharing\n# For personal relationships, a negative interaction is valued -1\nfor idx, row in cleaned_data.iterrows():\n    if row[\"edge_type\"] == \"knowledge\":\n        # If the source received knowledge, we want to add credit to the giver, so we swap this\n        if row[\"interaction_type\"] == \"receives knowledge\":\n            swapped_source = row[\"target\"]\n            swapped_target = row[\"source\"]\n            cleaned_data.at[idx, \"target\"] = swapped_target\n            cleaned_data.at[idx, \"source\"] = swapped_source\n        cleaned_data.at[idx, \"interaction_type\"] = 1\n    elif row[\"edge_type\"] == \"personal\":\n        cleaned_data.at[idx, \"interaction_type\"] = -1 if row[\"interaction_type\"] == \"negative interaction\" else 1\n\n# Aggregate weights with a sum\naggregated_weights = cleaned_data.groupby([\"source\", \"target\", \"edge_type\"]).sum().reset_index()\n\n# Filter the data by edge_type\nknowledge_edges = aggregated_weights[aggregated_weights['edge_type'] == 'knowledge']\nknowledge_edges[\"interaction_type\"] = knowledge_edges[\"interaction_type\"].apply(lambda x: x**2)\npersonal_edges = aggregated_weights[aggregated_weights['edge_type'] == 'personal']\npersonal_edges[\"interaction_type\"] = personal_edges[\"interaction_type\"].apply(lambda x: x**2 if x >=0 else -(x**2))\n\n# Normalize the weights for knowledge interactions since it has only >= 0 values, so the viz wouldn't be great\nif not knowledge_edges.empty:\n    min_weight = knowledge_edges['interaction_type'].min()\n    max_weight = knowledge_edges['interaction_type'].max()\n    knowledge_edges['interaction_type'] = knowledge_edges['interaction_type'].apply(\n        lambda x: 2 * ((x - min_weight) / (max_weight - min_weight)) - 1 if max_weight != min_weight else 0)\n\n# Create separate graphs for knowledge and personal interactions\nG_knowledge = nx.DiGraph()\nG_personal = nx.DiGraph()\n\n# Add edges to the knowledge graph\nfor _, row in knowledge_edges.iterrows():\n    G_knowledge.add_edge(row['source'], row['target'], weight=row['interaction_type'])\n\n# Add edges to the personal graph\nfor _, row in personal_edges.iterrows():\n    G_personal.add_edge(row['source'], row['target'], weight=row['interaction_type'])\n\ncustom_cmap = LinearSegmentedColormap.from_list('red_green', ['red', 'yellow', 'green'])\n\n# Find the knowledge center\nknowledge_center = knowledge_edges.groupby(\"source\").sum().idxmax().values[0]\nleast_knowledge_node = knowledge_edges.groupby(\"source\").sum().idxmin().values[0]\n\n# Draw the knowledge interaction graph with arrows\nplt.figure(figsize=(12, 8))\npos = nx.spring_layout(G_knowledge, k=0.5, iterations=50)\nnx.draw_networkx_nodes(G_knowledge, pos, node_size=100, node_color='lightblue')\nknowledge_weights = [d['weight'] for u, v, d in G_knowledge.edges(data=True)]\nnx.draw_networkx_edges(G_knowledge, pos, edgelist=G_knowledge.edges(), edge_color=knowledge_weights, edge_cmap=custom_cmap, edge_vmin=-1, edge_vmax=1, width=2, arrows=True)\nnx.draw_networkx_labels(G_knowledge, pos, font_size=14)\nplt.title('Knowledge Interactions')\nplt.annotate(f'Knowledge Center: {knowledge_center}', xy=(1.05, 0.95), xycoords='axes fraction', fontsize=14, color='darkred')\nplt.annotate(f'Least knowledge sharing: {least_knowledge_node}', xy=(1.0, 0.85), xycoords='axes fraction', fontsize=14, color='darkred')\nplt.axis('off')\nplt.show()\n\n# Find the personal center \npersonal_center = personal_edges.groupby(\"source\").sum().idxmax().values[0]\nleast_personal_center = personal_edges.groupby(\"source\").sum().idxmin().values[0]\n\n# Draw the personal interaction graph\nplt.figure(figsize=(12, 8))\npos = nx.spring_layout(G_personal, k=0.5, iterations=50)\nnx.draw_networkx_nodes(G_personal, pos, node_size=100, node_color='lightblue')\nweights = [d['weight'] for u, v, d in G_personal.edges(data=True)]\nnx.draw_networkx_edges(G_personal, pos, edgelist=G_personal.edges(), edge_color=weights, edge_cmap=custom_cmap, edge_vmin=-1, edge_vmax=4, width=2, arrows=True)\nnx.draw_networkx_labels(G_personal, pos, font_size=14)\nplt.title('Personal Interactions')\nplt.annotate(f'Personal Center: {personal_center}', xy=(1.05, 0.95), xycoords='axes fraction', fontsize=14, color='darkred')\nplt.annotate(f'Least positive person: {least_personal_center}', xy=(1.05, 0.85), xycoords='axes fraction', fontsize=14, color='darkred')\nplt.axis('off')\nplt.show()\n```"]