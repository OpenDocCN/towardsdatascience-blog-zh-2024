- en: Automatic Vectorization in JAX
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JAX中的自动向量化
- en: 原文：[https://towardsdatascience.com/automatic-vectorization-in-jax-801e53dfe99c?source=collection_archive---------8-----------------------#2024-10-24](https://towardsdatascience.com/automatic-vectorization-in-jax-801e53dfe99c?source=collection_archive---------8-----------------------#2024-10-24)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/automatic-vectorization-in-jax-801e53dfe99c?source=collection_archive---------8-----------------------#2024-10-24](https://towardsdatascience.com/automatic-vectorization-in-jax-801e53dfe99c?source=collection_archive---------8-----------------------#2024-10-24)
- en: Let the loops fly away!
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让循环飞走吧！
- en: '[](https://aamir-khan.medium.com/?source=post_page---byline--801e53dfe99c--------------------------------)[![Aamir
    Mushir Khan](../Images/31607cb450fa99cfbefb3b56f2d3a05d.png)](https://aamir-khan.medium.com/?source=post_page---byline--801e53dfe99c--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--801e53dfe99c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--801e53dfe99c--------------------------------)
    [Aamir Mushir Khan](https://aamir-khan.medium.com/?source=post_page---byline--801e53dfe99c--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://aamir-khan.medium.com/?source=post_page---byline--801e53dfe99c--------------------------------)[![Aamir
    Mushir Khan](../Images/31607cb450fa99cfbefb3b56f2d3a05d.png)](https://aamir-khan.medium.com/?source=post_page---byline--801e53dfe99c--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--801e53dfe99c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--801e53dfe99c--------------------------------)
    [Aamir Mushir Khan](https://aamir-khan.medium.com/?source=post_page---byline--801e53dfe99c--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--801e53dfe99c--------------------------------)
    ·8 min read·Oct 24, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--801e53dfe99c--------------------------------)
    ·阅读时间8分钟·2024年10月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: JAX is famous for its speed, efficiency, and flexibility when working with mathematical
    computations and machine learning. But one of its lesser-known superpowers — something
    that can save you from writing endless loops and boilerplate code — is **automatic
    vectorization**.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: JAX因其在数学计算和机器学习中的速度、效率和灵活性而闻名。但它其中一个鲜为人知的超级能力——可以让你摆脱无休止的循环和模板代码——就是**自动向量化**。
- en: '![](../Images/4105381630a03bd37916bbf62f68e894.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4105381630a03bd37916bbf62f68e894.png)'
- en: Photo by [Hamish](https://unsplash.com/@el_ham?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Hamish](https://unsplash.com/@el_ham?utm_source=medium&utm_medium=referral)提供，来自[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: If you’ve ever written code that processes arrays or batched data, you know
    how tedious it can be to optimize for parallelism. But with JAX’s `**vmap**` (vectorization
    map) function, you can say goodbye to ugly loops and hello to concise, efficient,
    and parallelized code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经写过处理数组或批量数据的代码，你就知道优化并行化是多么繁琐。但通过JAX的`**vmap**`（向量化映射）函数，你可以告别丑陋的循环，迎来简洁、高效并行化的代码。
- en: In this article, we’re going to dive deep into automatic vectorization in JAX.
    We’ll explore how vectorization works, why it’s essential for speeding up computations,
    and how you can leverage JAX’s `vmap` to avoid writing explicit loops. Along the
    way, we’ll take some real-world examples and walk through code that will make
    you love JAX even more.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将深入探讨JAX中的自动向量化。我们将探索向量化是如何工作的，为什么它对加速计算至关重要，以及如何利用JAX的`vmap`避免写显式的循环。在此过程中，我们将通过一些真实世界的例子，并通过代码展示如何让你更加喜爱JAX。
- en: Ready? Let’s go!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了吗？我们出发吧！
- en: What’s the Deal with Vectorization?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向量化到底是怎么回事？
- en: Before we get into JAX specifics, let’s talk about **vectorization** in general.
    In traditional programming, you might write code that processes one data point
    at a time in a loop. For example, if you want to apply a function to every element
    of an array, you’d probably use a `for` loop…
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解JAX的具体内容之前，先来谈谈**向量化**的一般概念。在传统编程中，你可能会写出逐一处理每个数据点的循环代码。例如，如果你想对数组中的每个元素应用一个函数，你可能会使用`for`循环……
