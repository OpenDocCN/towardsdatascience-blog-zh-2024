- en: Automatic Vectorization in JAX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/automatic-vectorization-in-jax-801e53dfe99c?source=collection_archive---------8-----------------------#2024-10-24](https://towardsdatascience.com/automatic-vectorization-in-jax-801e53dfe99c?source=collection_archive---------8-----------------------#2024-10-24)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let the loops fly away!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://aamir-khan.medium.com/?source=post_page---byline--801e53dfe99c--------------------------------)[![Aamir
    Mushir Khan](../Images/31607cb450fa99cfbefb3b56f2d3a05d.png)](https://aamir-khan.medium.com/?source=post_page---byline--801e53dfe99c--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--801e53dfe99c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--801e53dfe99c--------------------------------)
    [Aamir Mushir Khan](https://aamir-khan.medium.com/?source=post_page---byline--801e53dfe99c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--801e53dfe99c--------------------------------)
    ·8 min read·Oct 24, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: JAX is famous for its speed, efficiency, and flexibility when working with mathematical
    computations and machine learning. But one of its lesser-known superpowers — something
    that can save you from writing endless loops and boilerplate code — is **automatic
    vectorization**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4105381630a03bd37916bbf62f68e894.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Hamish](https://unsplash.com/@el_ham?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve ever written code that processes arrays or batched data, you know
    how tedious it can be to optimize for parallelism. But with JAX’s `**vmap**` (vectorization
    map) function, you can say goodbye to ugly loops and hello to concise, efficient,
    and parallelized code.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we’re going to dive deep into automatic vectorization in JAX.
    We’ll explore how vectorization works, why it’s essential for speeding up computations,
    and how you can leverage JAX’s `vmap` to avoid writing explicit loops. Along the
    way, we’ll take some real-world examples and walk through code that will make
    you love JAX even more.
  prefs: []
  type: TYPE_NORMAL
- en: Ready? Let’s go!
  prefs: []
  type: TYPE_NORMAL
- en: What’s the Deal with Vectorization?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get into JAX specifics, let’s talk about **vectorization** in general.
    In traditional programming, you might write code that processes one data point
    at a time in a loop. For example, if you want to apply a function to every element
    of an array, you’d probably use a `for` loop…
  prefs: []
  type: TYPE_NORMAL
