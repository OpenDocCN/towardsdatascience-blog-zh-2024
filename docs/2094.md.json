["```py\nimport numpy as np\n\nn = 100_000_000\npoints = np.random.rand(n, 2)\ninside_circle = np.sum(points[:,0]**2 + points[:,1]**2 <= 1)\npi_estimate = (inside_circle / n) * 4\n\nprint(pi_estimate) # prints 3.141x\n```", "```py\ndef _get_best_move(self, board: Board, num_sims: int):\n\n    # Get a list of all viable moves\n    win_counts = {column: 0 for column in range(board.width) if board.is_valid_move(column)}\n    total_counts = {column: 0 for column in range(board.width) if board.is_valid_move(column)}\n\n    valid_moves = list(win_counts.keys())\n    for _ in range(num_sims):\n        column = random.choice(valid_moves) # Pick a move a random\n        result = self._simulate_move(board, column) # Simulate the game after making the random move\n        total_counts[column] += 1\n        if result == self.symbol: # Check whether the AI player won\n            win_counts[column] += 1\n\n    win_rates = {column: win_counts[column] / total_counts[column] if total_counts[column] > 0 else 0 for column in valid_moves}\n    best_move = max(win_rates, key=win_rates.get) # Find the move with the best win rate\n    return best_move\n```"]