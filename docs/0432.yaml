- en: Three Ways to Calculate the Similarity Between Two Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/three-ways-to-calculate-the-similarity-between-two-strings-eb08472ee9be?source=collection_archive---------5-----------------------#2024-02-15](https://towardsdatascience.com/three-ways-to-calculate-the-similarity-between-two-strings-eb08472ee9be?source=collection_archive---------5-----------------------#2024-02-15)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: textPython, Text Analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A tutorial in Python using the jellyfish library to calculate the similarity
    between two strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://alod83.medium.com/?source=post_page---byline--eb08472ee9be--------------------------------)[![Angelica
    Lo Duca](../Images/45aa2e2e504bb3af6d3b8009dc6f030e.png)](https://alod83.medium.com/?source=post_page---byline--eb08472ee9be--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--eb08472ee9be--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--eb08472ee9be--------------------------------)
    [Angelica Lo Duca](https://alod83.medium.com/?source=post_page---byline--eb08472ee9be--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--eb08472ee9be--------------------------------)
    ·7 min read·Feb 15, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cd7bf122ca7a1d589ef6cfde8246bd6c.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Farzad](https://unsplash.com/@euwars?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Lately, I’ve been working on a project for matching surnames. I have a dataset
    of surnames, some of which potentially contain typos. My goal is to identify which
    surnames are potentially incorrect and then correct them. To do this, I thought
    of calculating the similarity between all the surnames and then combining the
    surnames for which the calculated similarity exceeds a certain threshold. But
    what are the criteria with which I can calculate similarity?
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, I present three metrics for calculating the similarity between
    two strings (and therefore between two surnames):'
  prefs: []
  type: TYPE_NORMAL
- en: Levenshtein Distance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jaro Similarity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: American Soundex
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As a case study, we will use a dataset of 30 fictitious surnames, generated
    with ChatGPT using this prompt: *generate a list of 30 surnames with 10 surnames
    containing a typo*. At [this link](https://chat.openai.com/share/a43c5dad-fe0e-4fe2-9fa2-d98217b26a50),
    you can find the entire chat used to generate the dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll implement our surnames matching example, using the jellyfish Python library,
    which you…
  prefs: []
  type: TYPE_NORMAL
