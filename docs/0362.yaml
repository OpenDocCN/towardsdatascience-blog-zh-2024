- en: Everything You Can Do with Pythonâ€™s textwrap Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: åŽŸæ–‡ï¼š[https://towardsdatascience.com/everything-you-can-do-with-pythons-textwrap-module-0d82c377a4c8?source=collection_archive---------2-----------------------#2024-02-07](https://towardsdatascience.com/everything-you-can-do-with-pythons-textwrap-module-0d82c377a4c8?source=collection_archive---------2-----------------------#2024-02-07)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Learn about all the things you can do with Pythonâ€™s `textwrap` module, including
    formatting, text wrapping, trimming and more
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@martin.heinz?source=post_page---byline--0d82c377a4c8--------------------------------)[![Martin
    Heinz](../Images/a8d1540fd32998ee9bda4af0f0232f7d.png)](https://medium.com/@martin.heinz?source=post_page---byline--0d82c377a4c8--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0d82c377a4c8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0d82c377a4c8--------------------------------)
    [Martin Heinz](https://medium.com/@martin.heinz?source=post_page---byline--0d82c377a4c8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: Â·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0d82c377a4c8--------------------------------)
    Â·5 min readÂ·Feb 7, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c3d8bf462ca3ad135cf342ed93cd2b6f.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Hello Sunday](https://unsplash.com/@hello_sunday?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/black-white-blue-and-pink-floral-textile-COFQgC0V4ks?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  prefs: []
  type: TYPE_NORMAL
- en: Python has many options for formatting strings and text, including f-strings,
    `format()` function, templates and more. There's however one module that few people
    know about and it's called `textwrap`.
  prefs: []
  type: TYPE_NORMAL
- en: This module is specifically built to help you with line-wrapping, indentation,
    trimming and more, and in this article we will look at all the things you can
    use it for.
  prefs: []
  type: TYPE_NORMAL
- en: Shorten
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Letâ€™s start with very simple, yet very useful function from the `textwrap`
    module, called `shorten`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As the name suggests, `shorten` allows us to trim text to certain length ( `width`)
    if the specified string is too long. By default, the placeholder for the trimmed
    text is `[...]`, but that can be overridden with the `placeholder` argument.
  prefs: []
  type: TYPE_NORMAL
- en: Wrap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A more interesting function from this module is `wrap`. The obvious use-case
    for it is to split long text into lines of same length, but there are more things
    we can do with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this example we split a string into equal chunks which can be useful for
    batch processing, rather than just formatting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this function however, has some caveats:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You should be careful with whitespaces, when using `wrap` - above you can see
    the behaviour with newline, tab and space characters. You can see that the first
    element ( `12`) *"includes"* newline, and 4th element ( `78`) *"includes"* tab,
    those are however, dropped by default, therefore these elements only have 2 characters
    instead of 3.
  prefs: []
  type: TYPE_NORMAL
- en: We can specify the `drop_whitespace` keyword argument to preserve them and maintain
    the proper length of chunks.
  prefs: []
  type: TYPE_NORMAL
- en: 'It might be obvious, but `wrap` is also great for reformatting whole files
    to certain line width:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can also use the `fill` function which is a shorthand for `"\n".join(wrap(text,
    ...))`. The difference between the 2 is that `wrap` will give us a list of lines
    that we would need to concatenate ourselves, and `fill` gives us a single string
    that's already joined using newlines.
  prefs: []
  type: TYPE_NORMAL
- en: TextWrapper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`textwrap` module also includes a more powerful version `wrap` function, which
    is a `TextWrapper` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This class and its `wrap` method are great if we need to call `wrap` with the
    same parameters multiple times as shown above.
  prefs: []
  type: TYPE_NORMAL
- en: 'And while weâ€™re looking that the `TextWrapper`, let''s also try out some more
    keyword arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here we can see the use of `initial_indent` and `subsequent_indent` for indenting
    the first line of paragraph and subsequent ones, respectively. There are couple
    more options, which you can find in [docs](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper).
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, because `TextWrapper` is a class, we can also extend it and completely
    override some of its methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This is a nice example of changing the `wrap` method to preserve existing line
    breaks and to print them properly.
  prefs: []
  type: TYPE_NORMAL
- en: For a more complete example for handling multiple paragraphs with `TextWrapper`,
    check out [this article](https://code.activestate.com/recipes/358228-extend-textwraptextwrapper-to-handle-multiple-para/).
  prefs: []
  type: TYPE_NORMAL
- en: Indentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, `textwrap` also includes two functions for indentation, first one
    being `dedent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: By default, multiline strings in Python honor any indentation used in the string,
    therefore we need to use the ugly formatting shown in the first variable in the
    snippet above. But we can use the `dedent` function to improve formatting - we
    simply indent the variable value however we like and then call `dedent` on it
    before using it.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we could also use `inspect.cleandoc`, which also strips the leading
    newline. This function however encodes the whitespaces as special characters (`\n`
    and `\t`), so you might need to reformat it again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Naturally, when there is `dedent`, then there needs to be also `indent` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We simply supply the text and the string that each line will be indented with
    (here just 4 spaces, we could â€” for example â€” use `>>>` to make it look like REPL).
    Additionally, we can supply a predicate that will decide whether the line should
    be indented or not. In the example above, the `lambda` function makes it so that
    first line of string (paragraph) is not indented.
  prefs: []
  type: TYPE_NORMAL
- en: Closing Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`textwrap` is a simple module with just a few functions/methods, but it once
    again shows that Python really comes with *"batteries included"* for things that
    don''t necessarily need to be standard library, but they can save you so much
    time when you happen to need them.'
  prefs: []
  type: TYPE_NORMAL
- en: If you happen to do a lot of text processing, then I also recommend checking
    out the [whole docs section](https://docs.python.org/3/library/text.html) dedicated
    to working with text. There are many more modules and little functions that you
    didnâ€™t know you needed. ðŸ˜‰
  prefs: []
  type: TYPE_NORMAL
- en: '*This article was originally posted at* [*martinheinz.dev*](https://martinheinz.dev/blog/108)'
  prefs: []
  type: TYPE_NORMAL
- en: You may also likeâ€¦
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://betterprogramming.pub/everything-you-can-do-with-pythons-bisect-module-40bdaadbc22f?source=post_page-----0d82c377a4c8--------------------------------)
    [## Everything You Can Do With Pythonâ€™s Bisect Module'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to optimize search and keep your data sorted in Python with the "bisect"
    module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: betterprogramming.pub](https://betterprogramming.pub/everything-you-can-do-with-pythons-bisect-module-40bdaadbc22f?source=post_page-----0d82c377a4c8--------------------------------)
  prefs: []
  type: TYPE_NORMAL
