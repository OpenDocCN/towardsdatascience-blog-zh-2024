["```py\ngit clone https://github.com/HamzaG737/rappel-conso-chat-app.git\n```", "```py\npip install -r requirements.txt\n```", "```py\ndocker-compose -f docker-compose-postgres.yaml up -d\n```", "```py\npython database/stream_data.py\n```", "```py\nfrom langchain.agents import create_sql_agent\n\nagent = create_sql_agent(\n        llm=llm_agent,\n        agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n        toolkit=toolkit,\n        verbose=True,\n    )\n```", "```py\nfrom langchain.chat_models import ChatOpenAI\n\nfrom constants import chat_openai_model_kwargs, langchain_chat_kwargs\n\n# Optional: set the API key for OpenAI if it's not set in the environment.\n# os.environ[\"OPENAI_API_KEY\"] = \"xxxxxx\"\n\ndef get_chat_openai(model_name):\n    llm = ChatOpenAI(\n        model_name=model_name,\n        model_kwargs=chat_openai_model_kwargs,\n        **langchain_chat_kwargs\n    )\n    return llm\n```", "```py\nAction: sql_db_query\nAction Input: SELECT reference_fiche, nom_de_la_marque_du_produit, noms_des_modeles_ou_references, date_de_publication, liens_vers_les_images FROM rappel_conso_table WHERE categorie_de_produit = 'Alimentation' ORDER BY date_de_publication DESC LIMIT 1\nObservation: [('2024-01-0125', 'MAITRE COQ', 'Petite Dinde', '2024-01-13', 'https://rappel.conso.gouv.fr/image/ea3257df-7a68-4b49-916b-d6f019672ed2.jpg https://rappel.conso.gouv.fr/image/2a73be1e-b2ae-4a31-ad38-266028c6b219.jpg https://rappel.conso.gouv.fr/image/95bc9aa0-cc75-4246-bf6f-b8e8e35e2a88.jpg')]\nThought:I now know the final answer to the question about the last recalled food item.\n\nFinal Answer: The last recalled food item is \"Petite Dinde\" by the brand \"MAITRE COQ\", which was published on January 13, 2024\\. You can find the images of the recalled food item here: [lien vers l'image](https://rappel.conso.gouv.fr/image/ea3257df-7a68-4b49-916b-d6f019672ed2.jpg), [lien vers l'image](https://rappel.conso.gouv.fr/image/2a73be1e-b2ae-4a31-ad38-266028c6b219.jpg), [lien vers l'image](https://rappel.conso.gouv.fr/image/95bc9aa0-cc75-4246-bf6f-b8e8e35e2a88.jpg).\n```", "```py\nAction: sql_db_query_checker\nAction Input: SELECT reference_fiche, nom_de_la_marque_du_produit, noms_des_modeles_ou_references, date_de_publication, liens_vers_les_images FROM rappel_conso_table WHERE categorie_de_produit = 'Alimentation' ORDER BY date_de_publication DESC LIMIT 1\nObservation: ```", "```py\nThought:The query has been checked and is correct. I will now execute the query to find the last recalled food item.\n```", "```py\nAction: sql_db_schema\nAction Input: rappel_conso_table\nObservation: \nCREATE TABLE rappel_conso_table (\n        reference_fiche TEXT NOT NULL, \n        liens_vers_les_images TEXT, \n        lien_vers_la_liste_des_produits TEXT, \n        lien_vers_la_liste_des_distributeurs TEXT, \n        lien_vers_affichette_pdf TEXT, \n        lien_vers_la_fiche_rappel TEXT, \n        date_de_publication TEXT, \n        date_de_fin_de_la_procedure_de_rappel TEXT, \n        categorie_de_produit TEXT, \n        sous_categorie_de_produit TEXT, \n        nom_de_la_marque_du_produit TEXT, \n        noms_des_modeles_ou_references TEXT, \n        identification_des_produits TEXT, \n        conditionnements TEXT, \n        temperature_de_conservation TEXT, \n        zone_geographique_de_vente TEXT, \n        distributeurs TEXT, \n        motif_du_rappel TEXT, \n        numero_de_contact TEXT, \n        modalites_de_compensation TEXT, \n        risques_pour_le_consommateur TEXT, \n        recommandations_sante TEXT, \n        date_debut_commercialisation TEXT, \n        date_fin_commercialisation TEXT, \n        informations_complementaires TEXT, \n        CONSTRAINT rappel_conso_table_pkey PRIMARY KEY (reference_fiche)\n)\n\n/*\n1 rows from rappel_conso_table table:\nreference_fiche liens_vers_les_images   lien_vers_la_liste_des_produits lien_vers_la_liste_des_distributeurs    lien_vers_affichette_pdf        lien_vers_la_fiche_rappel      date_de_publication     date_de_fin_de_la_procedure_de_rappel   categorie_de_produit    sous_categorie_de_produit       nom_de_la_marque_du_produit     noms_des_modeles_ou_references identification_des_produits     conditionnements        temperature_de_conservation     zone_geographique_de_vente      distributeurs   motif_du_rappel        numero_de_contact       modalites_de_compensation       risques_pour_le_consommateur    recommandations_sante   date_debut_commercialisation    date_fin_commercialisation     informations_complementaires\n2021-04-0165    https://rappel.conso.gouv.fr/image/bd8027eb-ba27-499f-ba07-9a5610ad8856.jpg     None    None    https://rappel.conso.gouv.fr/affichettePDF/225/Internehttps://rappel.conso.gouv.fr/fiche-rappel/225/Interne    2021-04-22      mercredi 5 mai 2021     Alimentation    Cereales et produits de boulangerie     GERBLE BIO    BISCUITS 3 GRAINES BIO   3175681257535 11908141 Date de durabilite minimale 31/03/2022   ETUI CARTON 132 g       Produit a conserver a temperature ambiante      France entiere CASINO  Presence possible d'oxyde d'ethylene superieure a la limite autorisee sur un lot de matiere premiere    0805293032      Remboursement   Produits phytosanitaires non autorises Ne plus consommer Rapporter le produit au point de vente        19/03/2021      02/04/2021      None\n```", "```py\nimport os\n\nfrom langchain.sql_database import SQLDatabase\nfrom .constants_db import port, password, user, host, dbname\n\nurl = f\"postgresql+psycopg2://{user}:{password}@{host}:{port}/{dbname}\"\nTABLE_NAME = \"rappel_conso_table\"\n\ndb = SQLDatabase.from_uri(\n    url,\n    include_tables=[TABLE_NAME],\n    sample_rows_in_table_info=1,\n)\n```", "```py\nfrom langchain.agents.agent_toolkits import SQLDatabaseToolkit\n\ndef get_sql_toolkit(tool_llm_name):\n    llm_tool = get_chat_openai(model_name=tool_llm_name)\n    toolkit = SQLDatabaseToolkit(db=db, llm=llm_tool)\n    return toolkit\n```", "```py\nfrom langchain.tools import tool, Tool\n\nimport ast\nimport json\n\nfrom sql_agent.sql_db import db\n\ndef run_query_save_results(db, query):\n    res = db.run(query)\n    res = [el for sub in ast.literal_eval(res) for el in sub]\n    return res\n\ndef get_categories(query: str) -> str:\n    \"\"\"\n    Useful to get categories and sub_categories. A json is returned where the key can be category or sub_category,\n    and the value is a list of unique itmes for either both.\n    \"\"\"\n    sub_cat = run_query_save_results(\n        db, \"SELECT DISTINCT sous_categorie_de_produit FROM rappel_conso_table\"\n    )\n    cat = run_query_save_results(\n        db, \"SELECT DISTINCT categorie_de_produit FROM rappel_conso_table\"\n    )\n    category_str = (\n        \"List of unique values of the categorie_de_produit column : \\n\"\n        + json.dumps(cat, ensure_ascii=False)\n    )\n    sub_category_str = (\n        \"\\n List of unique values of the sous_categorie_de_produit column : \\n\"\n        + json.dumps(sub_cat, ensure_ascii=False)\n    )\n\n    return category_str + sub_category_str\n```", "```py\n\"reference_fiche\": \"primary key of the database and unique identifier in the database. \",\n\"nom_de_la_marque_du_produit\": \"A string representing the Name of the product brand. Example: Apple, Carrefour, etc ... When you filter by this column,you must use LOWER() function to make the comparison case insensitive and you must use LIKE operator to make the comparison fuzzy.\",\n\"noms_des_modeles_ou_references\": \"Names of the models or references. Can be used to get specific infos about the product. Example: iPhone 12, etc, candy X, product Y, bread, butter ...\",\n\"identification_des_produits\": \"Identification of the products, for example the sales lot.\",\n```", "```py\n def get_columns_descriptions(query: str) -> str:\n    \"\"\"\n    Useful to get the description of the columns in the rappel_conso_table table.\n    \"\"\"\n    return json.dumps(COLUMNS_DESCRIPTIONS)\n```", "```py\nfrom datetime import datetime\n\ndef get_today_date(query: str) -> str:\n    \"\"\"\n    Useful to get the date of today.\n    \"\"\"\n    # Getting today's date in string format\n    today_date_string = datetime.now().strftime(\"%Y-%m-%d\")\n    return today_date_string\n```", "```py\ndef sql_agent_tools():\n    tools = [\n        Tool.from_function(\n            func=get_categories,\n            name=\"get_categories_and_sub_categories\",\n            description=\"\"\"\n            Useful to get categories and sub_categories. A json is returned where the key can be category or sub_category, \n            and the value is a list of unique items for either both.\n            \"\"\",\n        ),\n        Tool.from_function(\n            func=get_columns_descriptions,\n            name=\"get_columns_descriptions\",\n            description=\"\"\"\n            Useful to get the description of the columns in the rappel_conso_table table.\n            \"\"\",\n        ),\n        Tool.from_function(\n            func=get_today_date,\n            name=\"get_today_date\",\n            description=\"\"\"\n            Useful to get the date of today.\n            \"\"\",\n        ),\n    ]\n    return tools\n```", "```py\nextra_tools = sql_agent_tools()\n\nagent = create_sql_agent(\n    llm=llm_agent,\n    toolkit=toolkit,\n    agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    extra_tools=extra_tools,\n    verbose=True,\n)\n```", "```py\nSQL_SUFFIX = \"\"\"Begin!\n\nQuestion: {input}\nThought: I should look at the tables in the database to see what I can query.  Then I should query the schema of the most relevant tables.\n{agent_scratchpad}\"\"\"\n```", "```py\nCUSTOM_SUFFIX = \"\"\"Begin!\n\nQuestion: {input}\nThought Process: It is imperative that I do not fabricate information not present in the database or engage in hallucination; \nmaintaining trustworthiness is crucial. If the user specifies a category, I should attempt to align it with the categories in the `categories_produits` \nor `sous_categorie_de_produit` columns of the `rappel_conso_table` table, utilizing the `get_categories` tool with an empty string as the argument. \nNext, I will acquire the schema of the `rappel_conso_table` table using the `sql_db_schema` tool. \nUtilizing the `get_columns_descriptions` tool is highly advisable for a deeper understanding of the `rappel_conso_table` columns, except for straightforward tasks. \nWhen provided with a product brand, I will search in the `nom_de_la_marque_du_produit` column; for a product type, in the `noms_des_modeles_ou_references` column. \nThe `get_today_date` tool, requiring an empty string as an argument, will provide today's date. \nIn SQL queries involving string or TEXT comparisons, I must use the `LOWER()` function for case-insensitive comparisons and the `LIKE` operator for fuzzy matching. \nQueries for currently recalled products should return rows where `date_de_fin_de_la_procedure_de_rappel` (the recall's ending date) is null or later than today's date. \nWhen presenting products, I will include image links from the `liens_vers_les_images` column, formatted strictly as:  [lien vers l'image] url1, [lien vers l'image] url2 ... Preceded by the mention in the query's language \"here is(are) the image(s) :\"\nAdditionally, the specific recalled product lot will be included from the `identification_des_produits` column. \nMy final response must be delivered in the language of the user's query.\n\n{agent_scratchpad}\n\"\"\"\n```", "```py\nagent = create_sql_agent(\n    llm=llm_agent,\n    toolkit=toolkit,\n    agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    suffix=CUSTOM_SUFFIX,\n    extra_tools=agent_tools,\n    verbose=True,\n)\n```", "```py\nfrom langchain.memory import ConversationBufferMemory\n\nmemory = ConversationBufferMemory(memory_key=\"history\", input_key=\"input\")\n```", "```py\ncustom_suffix = \"\"\"Begin!\n\nRelevant pieces of previous conversation:\n{history}\n(Note: Only reference this information if it is relevant to the current query.)\n\nQuestion: {input}\nThought Process: It is imperative that I do not fabricate information ... (same as previous suffix)\n\n{agent_scratchpad}\n\"\"\"\n```", "```py\nagent = create_sql_agent(\n    llm=llm_agent,\n    toolkit=toolkit,\n    agent_type=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    input_variables=[\"input\", \"agent_scratchpad\", \"history\"],\n    suffix=custom_suffix,\n    agent_executor_kwargs={\"memory\": memory},\n    extra_tools=agent_tools,\n    verbose=True,\n)\n```", "```py\nstreamlit run streamlit_app/app.py\n```"]