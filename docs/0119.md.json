["```py\n# to maximize the objective\n# fitness_weights = 1.0\n# to minimize the objective\nfitness_weights = -1.0\n\n# copy the original dataframes into local copies, once\nX_ga = X.copy()\ny_ga = y.copy()\n\n# 'const' (the first column) is not an actual feature, do not include it\nX_features = X_ga.columns.to_list()[1:]\n\ntry:\n    del creator.FitnessMax\n    del creator.Individual\nexcept Exception as e:\n    pass\n\ncreator.create(\"FitnessMax\", base.Fitness, weights=(fitness_weights,))\ncreator.create(\n    \"Individual\", array.array, typecode='b', fitness=creator.FitnessMax\n)\n\ntry:\n    del toolbox\nexcept Exception as e:\n    pass\n\ntoolbox = base.Toolbox()\n# Attribute generator\ntoolbox.register(\"attr_bool\", random.randint, 0, 1)\n# Structure initializers\ntoolbox.register(\n    \"individual\",\n    tools.initRepeat,\n    creator.Individual,\n    toolbox.attr_bool,\n    len(X_features),\n)\ntoolbox.register(\"population\", tools.initRepeat, list, toolbox.individual)\n\ndef evalOneMax(individual):\n    # objective function\n    # create True/False selector list for features\n    # and add True at the start for 'const'\n    cols_select = [True] + [i == 1 for i in list(individual)]\n    # fit model using the features selected from the individual\n    lin_mod = sm.OLS(y_ga, X_ga.loc[:, cols_select], hasconst=True).fit()\n    return (lin_mod.bic,)\n\ntoolbox.register(\"evaluate\", evalOneMax)\ntoolbox.register(\"mate\", tools.cxTwoPoint)\ntoolbox.register(\"mutate\", tools.mutFlipBit, indpb=0.05)\ntoolbox.register(\"select\", tools.selTournament, tournsize=3)\n\nrandom.seed(0)\npop = toolbox.population(n=300)\nhof = tools.HallOfFame(1)\npop, log = algorithms.eaSimple(\n    pop, toolbox, cxpb=0.5, mutpb=0.2, ngen=10, halloffame=hof, verbose=True\n)\n\nbest_individual_ga_small = list(hof[0])\nbest_features_ga_small = [\n    X_features[i] for i, val in enumerate(best_individual_ga_small) if val == 1\n]\nbest_objective_ga_small = (\n    sm.OLS(y_ga, X_ga[['const'] + best_features_ga_small], hasconst=True)\n    .fit()\n    .bic\n)\nprint(f'best objective: {best_objective_ga_small}')\nprint(f'best features:  {best_features_ga_small}')\n```", "```py\nbest objective:  33705.569572544795\nbest generation: 787\nobjective runs:  600525\ntime to best:    158.027 sec\n```", "```py\nbaseline BIC: 34570.166173470934\n```", "```py\nSFS:    42.448 sec\nGA:     158.027 sec\nCMA-ES: 48.326 sec\n```", "```py\nSFS:    22791\nGA:     600525\nCMA-ES: 20000\n```", "```py\nbaseline BIC: 34570.1662\nSFS:          33708.9860\nGA:           33705.5696\nCMA-ES:       33703.0705\n```"]