- en: How to cross validate your panel data in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-cross-validate-your-panel-data-in-python-9ad981ddd043?source=collection_archive---------5-----------------------#2024-03-08](https://towardsdatascience.com/how-to-cross-validate-your-panel-data-in-python-9ad981ddd043?source=collection_archive---------5-----------------------#2024-03-08)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/9ba98d4b8300f30aeec7177892adf319.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Salinas de Janubio, Lanzarote, Canary Islands, Spain. Credit: [imag3s 4 u](https://www.instagram.com/imag3s_4_u/)'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to panel data cross validation using PanelSplit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@eric.frey?source=post_page---byline--9ad981ddd043--------------------------------)[![Eric
    Frey](../Images/1907ab08a5b30729b4bf71d65e3bb7c4.png)](https://medium.com/@eric.frey?source=post_page---byline--9ad981ddd043--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--9ad981ddd043--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--9ad981ddd043--------------------------------)
    [Eric Frey](https://medium.com/@eric.frey?source=post_page---byline--9ad981ddd043--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--9ad981ddd043--------------------------------)
    ·6 min read·Mar 8, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '**Motivation:** As someone who works with panel data, I often need to perform
    cross validation. This involves training up to a certain point in time, testing
    on a subset of observations, training up to a further point in time, testing on
    a different subset of observations, and iteratively continuing this process on
    a panel data set. Sound familiar? This can be really frustrating to implement
    manually. To make things easier, I’ve created a package called [PanelSplit](https://github.com/4Freye/panelsplit)
    that can help when working with panel data.'
  prefs: []
  type: TYPE_NORMAL
- en: This article shows how you can use PanelSplit when working with panel data;
    from feature engineering, to hyper-parameter tuning, to generating predictions,
    PanelSplit is here to help!
  prefs: []
  type: TYPE_NORMAL
- en: '**What is panel data?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By **panel data**, I mean data where there are multiple entities over time.
    These entities could be countries, people, organizations, or any other unit of
    analysis. Multiple observations are recorded over time for these multiple entities.
  prefs: []
  type: TYPE_NORMAL
- en: What is cross validation?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Say we want to get estimates of how good our predictions are when we use a model.
    How can we do this? The standard approach is **cross validation**, which involves
    splitting the data up into successive folds, each with its unique training and
    testing set. The visualization below shows what this looks like for time series
    data.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/17f39de9360687fc291f49de080a28d0.png)'
  prefs: []
  type: TYPE_IMG
- en: An example of time series cross validation.
  prefs: []
  type: TYPE_NORMAL
- en: While there is already a scikit-learn function to do time series cross validation
    called [**TimeSeriesSplit**](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html),
    it doesn’t work with panel data. Rather than being a single time series for one
    entity, panel data has multiple entities and we need a tool that allows us to
    work with multiple entities.
  prefs: []
  type: TYPE_NORMAL
- en: This is where PanelSplit comes in. **PanelSplit** is a package that allows us
    to generalize TimeSeriesSplit to panel data. It also offers functionality for
    transforming, predicting, and much more, but in this introductory article I’ll
    cover the just basics.
  prefs: []
  type: TYPE_NORMAL
- en: Performing cross validation with PanelSplit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve introduced what panel data is and what cross validation looks
    like in this setting, let’s see how to do cross validation using PanelSplit.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s generate some example data to work with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ae47ac32ee235a6dc360a5ba0a5095db.png)'
  prefs: []
  type: TYPE_IMG
- en: The generated panel data. There are 3 countries observed from 2001–2004.
  prefs: []
  type: TYPE_NORMAL
- en: After generating our panel data set, we can now apply PanelSplit.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing PanelSplit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we initialize PanelSplit, we define the cross validation approach that
    we are going to use.
  prefs: []
  type: TYPE_NORMAL
- en: The **periods** argument takes the time series. In this case the series is the
    year column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**n_splits**, **gap**, and **test_size** are all arguments used by [TimeSeriesSplit](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.TimeSeriesSplit.html)
    to split up the time series.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By specifying **plot=True**, a visualization is produced describing the train
    and test sets within each split.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/46ac5e7af26beffef69e4b1ba42715cc.png)'
  prefs: []
  type: TYPE_IMG
- en: The output of initializing PanelSplit when plot = True. Based on the arguments
    we provided, there are 3 splits, there is no gap between train and test sets,
    and the test size is one period for each split.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how PanelSplit works
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get a better idea of what the splits look like, let’s use the **split()**
    function to return the different train and test sets for each split.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The splits object contains the 3 splits of the cross validation procedure. Within
    each split, there is a list, which consists of the train indices (the first item)
    and test indices (the second item). The indices are True and False values, indicating
    whether or not a row is in a particular train/test set for a particular split.
    These indices can be used to filter for different subsets of the data, as shown
    in the figure below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dcb54e616816b5223fcf3737cbc5acbc.png)'
  prefs: []
  type: TYPE_IMG
- en: Demonstration of the different train and test sets within each split.
  prefs: []
  type: TYPE_NORMAL
- en: Hyper-parameter tuning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we’ve created an instance of PanelSplit, let’s do some **hyper-parameter
    tuning**!
  prefs: []
  type: TYPE_NORMAL
- en: Here we do a basic hyper-parameter search with a Ridge model, specifying the
    cv argument for **GridSearchCV** to be panel_split. During GridSearchCV’s fit
    procedure it calls panel_split’s split() function, returing the indices for each
    train and test for each split. It uses these indices to filter the data that are
    provided as the X and y arguments in the fit() function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a442388e0853686faa7ca8edac110bd3.png)'
  prefs: []
  type: TYPE_IMG
- en: In this search, the optimal alpha for the Ridge model is .5.
  prefs: []
  type: TYPE_NORMAL
- en: Hooray! We’ve found the optimal set of hyper-parameters. Now we can use these
    to predict.
  prefs: []
  type: TYPE_NORMAL
- en: '*Note: In a real setting we’d differentiate between the test set used for hyper-parameter
    tuning and the test set used for evaluating performance, but for this example
    let’s keep the validation set and the test set the same.*'
  prefs: []
  type: TYPE_NORMAL
- en: Generating predictions with cross_val_fit_predict
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generating predictions is really easy with PanelSplit.
  prefs: []
  type: TYPE_NORMAL
- en: Using **cross_val_fit_predict**, we specify that we want to use our best Ridge
    model, our X and y, and PanelSplit will fit on each training set and predict on
    each test set, for each split.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The predictions as well as the fitted models are returned. If we want to include
    the identifiers for the predictions, we can generate labels using **gen_test_labels**
    and then create a new Pandas Series in our predictions_df DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/966f0a4c82ab4dfa922575405633e5cb.png)'
  prefs: []
  type: TYPE_IMG
- en: The DataFrame of predictions.
  prefs: []
  type: TYPE_NORMAL
- en: What else can PanelSplit do?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is just a basic demo, but PanelSplit can do so much more! For example:'
  prefs: []
  type: TYPE_NORMAL
- en: With **cross_val_fit_transform** we can fit on training sets and transform on
    test sets. If we have missing features that need imputation this is really helpful.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What if we want to scale the data and each split needs its own ‘snapshot’ of
    the data in order to keep the scaling transformations separate? We can use **gen_snapshots**
    to do this! Or use a scikit-learn pipeline as the estimator in cross_val_fit_predict
    :)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What if we are missing a time period? By using the **unique periods** argumentwith
    the **drop_splits** argument upon initialization, PanelSplit can handle this and
    drops splits where there aren’t any observations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you’re looking to see some more examples and want to try PanelSplit out for
    yourself, check out the [Jupyter notebook](https://github.com/4Freye/panelsplit/blob/main/examples/An%20introduction%20to%20PanelSplit.ipynb)
    I created where I cover some additional capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: This is the first package I have written, so I learned a lot working on this
    project. Thank you for reading, and I hope PanelSplit helps you in your next panel
    data project!
  prefs: []
  type: TYPE_NORMAL
- en: '*Note: Unless otherwise noted, all images are by the author.*'
  prefs: []
  type: TYPE_NORMAL
