["```py\n# Communication structure\nYou communicate only in instruction lines. The format is: \"Instruction: expected output\". You must only use these instruction lines and must not enter empty lines or anything else between instruction lines.\nYou must skip the instruction lines Function Name, Function Input and Function Output if no function calling is required.\n\nMessage: User's message. You never use this instruction line.\nThought: A single-line plan of how to answer the user's message. It must be immediately followed by Final Answer.\nThought: A single-line step-by-step plan of how to answer the user's message. You can use the available functions defined above. This instruction line must be immediately followed by Function Name if one of the available functions defined above needs to be called, or by Final Answer. Do not provide the answer here.\nFunction Name: Name of the function. This instruction line must be immediately followed by Function Input.\nFunction Input: Function parameters. Empty object is a valid parameter.\nFunction Output: Output of the function in JSON format.\nThought: Continue your thinking process.\nFinal Answer: Answer the user or ask for more information or clarification. It must always be preceded by Thought.\n\n## Examples\nMessage: Can you translate \"How are you\" into French?\nThought: The user wants to translate a text into French. I can do that.\nFinal Answer: Comment vas-tu?\n```", "```py\n# Instructions\nUser can only see the Final Answer, all answers must be provided there.\nYou must always use the communication structure and instructions defined above. Do not forget that Thought must be a single-line immediately followed by Final Answer.\nYou must always use the communication structure and instructions defined above. Do not forget that Thought must be a single-line immediately followed by either Function Name or Final Answer.\nFunctions must be used to retrieve factual or historical information to answer the message.\nIf the user suggests using a function that is not available, answer that the function is not available. You can suggest alternatives if appropriate.\nWhen the message is unclear or you need more information from the user, ask in Final Answer.\n\n# Your capabilities\nPrefer to use these capabilities over functions.\n- You understand these languages: English, Spanish, French.\n- You can translate and summarize, even long documents.\n\n# Notes\n- If you don't know the answer, say that you don't know.\n- The current time and date in ISO format can be found in the last message.\n- When answering the user, use friendly formats for time and date.\n- Use markdown syntax for formatting code snippets, links, JSON, tables, images, files.\n- Sometimes, things don't go as planned. Functions may not provide useful information on the first few tries. You should always try a few different approaches before declaring the problem unsolvable.\n- When the function doesn't give you what you were asking for, you must either use another function or a different function input.\n  - When using search engines, you try different formulations of the query, possibly even in a different language.\n- You cannot do complex calculations, computations, or data manipulations without using functions.m\n```", "```py\nclass ArxivInput(BaseModel):\n    \"\"\"Input for the Arxiv tool.\"\"\"\n\n    query: str = Field(description=\"search query to look up\")\n\nclass ArxivQueryRun(BaseTool):  # type: ignore[override, override]\n    \"\"\"Tool that searches the Arxiv API.\"\"\"\n\n    name: str = \"arxiv\"\n    description: str = (\n        \"A wrapper around Arxiv.org \"\n        \"Useful for when you need to answer questions about Physics, Mathematics, \"\n        \"Computer Science, Quantitative Biology, Quantitative Finance, Statistics, \"\n        \"Electrical Engineering, and Economics \"\n        \"from scientific articles on arxiv.org. \"\n        \"Input should be a search query.\"\n    )\n    api_wrapper: ArxivAPIWrapper = Field(default_factory=ArxivAPIWrapper)  # type: ignore[arg-type]\n    args_schema: Type[BaseModel] = ArxivInput\n\n    def _run(\n        self,\n        query: str,\n        run_manager: Optional[CallbackManagerForToolRun] = None,\n    ) -> str:\n        \"\"\"Use the Arxiv tool.\"\"\"\n        return self.api_wrapper.run(query)p\n```", "```py\nUser Message: Extract key insighs from this dataset\nFiles: bill-of-materials.csv\nThought: First, I need to inspect the columns of the dataset and provide basic data statistics.\nFunction Name: Python\nFunction Input: {\"language\":\"python\",\"code\":\"import pandas as pd\\n\\ndataset = pd.read_csv('bill-of-materials.csv')\\n\\nprint(dataset.columns)\\nprint(dataset.describe())\",\"inputFiles\":[\"bill-of-materials.csv\"]}\nFunction Output:\n```", "```py\ndef orchestrator(llm_agent, llm_output, tools, user_query):\n    \"\"\"\n    Orchestrates the response based on LLM output and iterates if necessary.\n\n    Parameters:\n    - llm_agent (callable): The LLM agent function for processing tool outputs.\n    - llm_output (dict): Initial output from the LLM, specifying the next action.\n    - tools (dict): Dictionary of available tools with their execution methods.\n    - user_query (str): The original user query.\n\n    Returns:\n    - str: The final response to the user.\n    \"\"\"\n    while True:\n        action = llm_output.get(\"action\")\n\n        if action == \"tool_call\":\n            # Extract tool name and parameters\n            tool_name = llm_output.get(\"tool_name\")\n            tool_params = llm_output.get(\"tool_params\", {})\n\n            if tool_name in tools:\n                try:\n                    # Execute the tool\n                    tool_result = tools[tool_name](**tool_params)\n                    # Send tool output back to the LLM agent for further processing\n                    llm_output = llm_agent({\"tool_output\": tool_result})\n                except Exception as e:\n                    return f\"Error executing tool '{tool_name}': {str(e)}\"\n            else:\n                return f\"Error: Tool '{tool_name}' not found.\"\n\n        elif action == \"return_answer\":\n            # Return the final answer to the user\n            return llm_output.get(\"answer\", \"No answer provided.\")\n\n        else:\n            return \"Error: Unrecognized action type from LLM output.\"\n```"]