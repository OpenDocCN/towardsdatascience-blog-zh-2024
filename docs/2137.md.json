["```py\nopenai_key: \"<your key string>\"\n```", "```py\n! pip install openai\n```", "```py\nimport yaml\nfrom openai import OpenAI\n\nfrom pprint import pprint\nimport pandas as pd\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings('ignore')\n```", "```py\nwith open('keys.yaml', 'r') as file:\n    openai_key = yaml.safe_load(file)\n```", "```py\nos.environ[\"OPENAI_API_KEY\"] = openai_key['open_ai_key']\n```", "```py\nclient = OpenAI()\n```", "```py\nresponse = client.chat.completions.create(\n  model=\"gpt-3.5-turbo\",\n  messages=[\n    {\n      \"role\": \"user\",\n      \"content\": \"Create a meal plan for the coming week\"\n    }\n  ]\n)\n\npprint(response.choices[0].message.content)\n```", "```py\n('Monday:\\n'\n '- Breakfast: Greek yogurt with granola and berries\\n'\n '- Lunch: Turkey and avocado wrap with a side salad\\n'\n '- Dinner: Grilled chicken with roasted vegetables\\n'\n '\\n'\n 'Tuesday:\\n'\n '- Breakfast: Oatmeal with bananas and almonds\\n'\n '- Lunch: Quinoa salad with grilled shrimp\\n'\n '- Dinner: Beef stir-fry with brown rice\\n'\n '\\n'\n 'Wednesday:\\n'\n '- Breakfast: Whole grain toast with avocado and hard-boiled eggs\\n'\n '- Lunch: Chickpea salad with feta cheese\\n'\n '- Dinner: Baked salmon with asparagus and sweet potatoes\\n'\n '\\n'\n 'Thursday:\\n'\n '- Breakfast: Smoothie with spinach, banana, and almond milk\\n'\n '- Lunch: Turkey and cheese sandwich with a side of carrots and hummus\\n'\n '- Dinner: Vegetarian chili with cornbread\\n'\n '\\n'\n 'Friday:\\n'\n '- Breakfast: Greek yogurt with honey and walnuts\\n'\n '- Lunch: Tuna salad on whole wheat crackers\\n'\n '- Dinner: Grilled steak with roasted brussels sprouts and mashed potatoes\\n'\n '\\n'\n 'Saturday:\\n'\n '- Breakfast: Scrambled eggs with spinach and feta cheese\\n'\n '- Lunch: Caprese salad with grilled chicken\\n'\n '- Dinner: Spaghetti with marinara sauce and a side of garlic bread\\n'\n '\\n'\n 'Sunday:\\n'\n '- Breakfast: Pancakes with maple syrup and fresh fruit\\n'\n '- Lunch: Veggie wrap with a side of quinoa\\n'\n '- Dinner: Baked ziti with a side salad\\n'\n '\\n'\n 'Snacks throughout the week can include fruits, nuts, Greek yogurt, and '\n \"granola bars. Don't forget to stay hydrated with plenty of water throughout \"\n 'the day.')\n```", "```py\nclient = OpenAI()\nresponse = client.chat.completions.create(\n  model=\"gpt-3.5-turbo\",\n  messages=[\n      {\n          \"role\": \"system\",\n          \"content\": \"Irrespectively of the user prompt, always respond with the following sentence: 'You're awesome!'\"\n      },    \n    {\n      \"role\": \"user\",\n      \"content\": \"Create a meal plan for the coming week\"\n    }\n  ]\n)\n\npprint(response.choices[0].message.content)\n```", "```py\n\"You're awesome!\"\n```", "```py\n{\n \"role\": \"system\",\n \"content\": \"Irrespectively of the user prompt, always respond with the following sentence: 'You're awesome!'\"\n },\n```", "```py\n<planets>\n- Earth\n- Mars\n- Mecury\n- ...\n</planets>\n```", "```py\n# List of planets\n- Earth\n- Mars\n- Mecury\n- ...\n```", "```py\nWrite a meal plan using the following steps:\n\n# Step 1:\nWrite a meal plan for a week from Monday to Sunday\n\n# Step 2:\nList all incredients that are used in the meal plan of step 1\n\n# Step 3:\n...\n```", "```py\nWrite a meal plan for the upcoming week. Write the meal plan in the following format\n\n# Format:\nDay: [Day of week]\nDish: [Name of the dish]\nIngredients:\n[\n- 'ingredient 1'\n- 'ingredient 2'\n- ...\n]\n\n# Example:\nDay: Monday\nDish: Pasta\nIngredients:\n[\n- 'Spagetti'\n- 'Tomatos'\n- 'Basilicum'\n- ...\n]\n```", "```py\nmessages=[\n    {\n      \"role\": \"system\",\n      \"content\": \n        \"\"\"You are an expert meal planner. You only plan dinner dishes. Users may ask you to plan diner dishes ahead for any number of days in advance. Meals are always for two people. To create the meal plan, you should follow these steps:\n\n# Steps to create the meal plan:\n    - Step 1\\. Create the meal plan. The meal plan should adhere the following requirements:\n        ##  Requirements:\n            - The users eats out once a week in a restaurant, usually on a Thursday or Friday.\n            - One of the dinner dishes should be soup.\n            - Each meal has at most 7 ingredients.\n            - The meals should be vegetarian.\n            - It should be possible to prepare the meal in 30 minutes.\n            - The meals should be different each day.\n    - Step 2\\. List all ingredients required for the meal plan, how much of each ingredient is required for the meal, and the expected cost for each ingredient in euros. \n    - Step 3\\. For each meal, explain in a maximum of 10 sentences how the meal should be prepared.\n    - Step 4\\. Provide the expected total cost of the meal plan.  \n        \"\"\"\n    },\n    {  \n       \"role\": \"user\", \"content\": \"Provide me with a meal plan for the upcoming week.\"\n    }\n  ]\n```", "```py\nmessages=[\n    {\n      \"role\": \"system\",\n      \"content\": \n        \"\"\"You are an expert meal planner. You only plan dinner dishes. Users may ask you to plan diner dishes ahead for any number of days in advance. Meals are always for two people. To create the meal plan, you should follow these steps:\n\n# Steps to create the meal plan:\n    - Step 1\\. Create the meal plan. The meal plan should adhere the following requirements:\n        ##  Requirements:\n            - The users eats out once a week in a restaurant, usually on a Thursday or Friday.\n            - One of the dinner dishes should be soup.\n            - Each meal has at most 7 ingredients.\n            - The meals should be vegetarian.\n            - It should be possible to prepare the meal in 30 minutes.\n            - The meals should be different each day.\n    - Step 2\\. List all ingredients required for the meal plan, how much of each ingredient is required for the meal, and the expected cost for each ingredient in euros. \n    - Step 3\\. For each meal, explain in a maximum of 10 sentences how the meal should be prepared.\n    - Step 4\\. Provide the expected total cost of the meal plan.  \n        \"\"\"\n    },\n    {  \n       \"role\": \"user\", \"content\": \"Provide me with a meal plan for the upcoming week.\"\n    }\n  ]\n\nresponse = client.chat.completions.create(\n  model=\"gpt-3.5-turbo\",\n  messages=messages\n)\n\npprint(response.choices[0].message.content)\n```", "```py\nmessages=[\n    {\n      \"role\": \"system\",\n      \"content\": \n        \"\"\"You are an expert in detecting planets mentioned in a user prompt. You're output should be a list of all planets listed in the user prompt. The output should be in the following format\n\n       # Format:\n       \"planets\": [\"first planet\", \"second planet\", ...]}\n\n       # Example:\n       User: \n           Humans live on Earth, but in the future perhaps also on Mars\n\n       Expected output:\n           {\"planets\": [\"Earth\", \"Mars\"]}\n        \"\"\"\n    },\n    {  \n       \"role\": \"user\", \"content\": \"In Roman mythology, adopted from the Greek, there's a love affair between Mars and Venus\"\n    }\n  ]\n\nresponse = client.chat.completions.create(\n  model=\"gpt-3.5-turbo\",\n  messages=messages\n)\n\npprint(response.choices[0].message.content)\n```", "```py\n'{\"planets\": [\"Mars\", \"Venus\"]}'\n```", "```py\nimport json\n\nd = json.loads(response.choices[0].message.content)\n\npprint(d)\n```", "```py\n{'planets': ['Mars', 'Venus']}\n```", "```py\nmessages=[\n    {\n      \"role\": \"system\",\n      \"content\": \n        \"\"\"You are a meal planner. You only plan dinner dishes. Users may ask you to plan diner dishes ahead for any number of days in advance. Meals are always for two people. To create the meal plan, you should follow these steps:\n    - Step 1\\. Create the meal plan. The meal plan should adhere the following requirements:\n        - The users eats out once a week in a restaurant, usually on a Thursday or Friday.\n        - One of the dinner dishes should be soup.\n        - Each meal has at most 7 ingredients.\n        - The meals should be vegetarian.\n        - It should be possible to prepare the meal in 30 minutes.\n        - The meals should be different each day.\n    - Step 2\\. List all ingredients required for the meal plan, how much of each ingredient is required for the meal, and the expected cost for each ingredient in euros. \n    - Step 3\\. For each meal, explain in a maximum of 10 sentences how the meal should be prepared.\n\n    # Formatting\n    Write the meal plan created in steps 1 to 3 for each day in the following json format:\n\n    [{\"day\": \"...\",\n       \"dish_name\": \"...\",\n       \"ingredients\": [\"ingredient 1\", \"ingredient 2\", \"...\"],\n       \"ingredient_cost_euro\": [\"ingredient cost 1\", \"ingredient cost 2\", \"...\"],\n       \"ingredient_quantity\": [\"ingredient quantity 1\", \"ingredient quantity 2\", \"...\"],\n       \"ingredient_unit_of_measurement\": [\"unit of measurement 1\", \"unit of measurement 2\", \"...\"],\n       \"meal_preparation_steps\": [\"preperation step 1\", \"preperation step 1\", \"...\"]\n       },\n     {\"day\": \"...\",\n     ...},\n     ...]\n\nOn days where the user eats in a restaurant, the output should be:\n    {\"day\": \"...\",\n    \"dish_name\": \"Restaurant\",\n    \"ingredients\": [],\n    \"ingredient_cost_euro\": [],\n    \"ingredient_quantity\": [],\n    \"ingredient_unit_of_measurement\": [],\n    \"meal_preparation_steps\": []}\n\nEnsure to write all fractions (1/2, 1/3, 1/4, 1/8) as decimals (0.5, 0.33, 0.25, 0.125) in the \"ingredient_quantity\" field of the meal plan. \n\n# Example output \nuser: Provide me with a meal plan for Monday and Tuesday\n\n    [{\"day\": \"Monday\",\n       \"dish_name\": \"Pasta\",\n       \"ingredients\": [\"Spagetti\", \"Tomato\", \"Olive oil\"],\n       \"ingredient_cost_euro\": [\"0.5\", \"1\", \"0.5\"],\n       \"ingredient_quantity\": [\"50\", \"1\", \"1\"],\n       \"ingredient_unit_of_measurement\": [\"gram\", \"piece\", \"ml\"],\n       \"meal_preparation_steps\": [\"Cook pasta\", \"Add pasta sauce\"]\n       },\n     {\"day\": \"Tuesday\",\n       \"dish_name\": \"Curry\",\n       \"ingredients\": [\"Curry\", \"Tomato\", \"Naan bread\"],\n       \"ingredient_cost_euro\": [\"1.0\", \"1.0\", \"0.5\"],\n       \"ingredient_quantity\": [\"50\", \"1\", \"1\"],\n       \"ingredient_unit_of_measurement\": [\"gram\", \"piece\", \"liters\"],\n       \"meal_preparation_steps\": [\"Cook curry\", \"Bake naan bread\"]\n       }]\n\n        \"\"\"\n    },\n    {  \n       \"role\": \"user\", \"content\": \"Provide me with a meal plan for the upcoming week, Monday to Sunday\"\n    }\n  ]\n\nresponse = client.chat.completions.create(\n  model=\"gpt-3.5-turbo\",\n  messages=messages,\n)\n\npprint(response.choices[0].message.content)\n```", "```py\npd.read_json(response.choices[0].message.content.replace('\\n', ''))\n```", "```py\n# first remove all the \\n characters that are in the response\nmeal_plan = pd.read_json(response.choices[0].message.content.replace('\\n', '')) # for some reason it provides the answer transposed.\n\ningredients = []\ningredients_quantity = []\ningredients_uom = []\ningredients_cost = []\n\nfor i, l in meal_plan.iterrows():\n    ingredients += l[\"ingredients\"]\n    ingredients_quantity += l[\"ingredient_quantity\"]\n    ingredients_uom += l[\"ingredient_unit_of_measurement\"]\n    ingredients_cost += l[\"ingredient_cost_euro\"]\n\nall_ingredients = (pd.DataFrame({\"ingredients\": ingredients,\n             \"ingredients_q\": ingredients_quantity,\n             \"ingredients_uom\": ingredients_uom,\n             \"ingredients_cost\": ingredients_cost})\n                .astype(dtype= {\"ingredients\":\"string\",\n             \"ingredients_q\": \"float64\",\n             \"ingredients_uom\": \"string\",\n             \"ingredients_cost\": \"float64\"}))\n```", "```py\n(all_ingredients\n .groupby([\"ingredients\", \"ingredients_uom\"])\n .agg({'ingredients_q': ['sum', 'count'],\n       'ingredients_cost': 'sum'})\n)\n```"]