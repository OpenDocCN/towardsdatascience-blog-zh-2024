- en: Understand SQL Window Functions Once and For All
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一劳永逸地理解 SQL 窗口函数
- en: 原文：[https://towardsdatascience.com/understand-sql-window-functions-once-and-for-all-4447824c1cb4?source=collection_archive---------1-----------------------#2024-05-01](https://towardsdatascience.com/understand-sql-window-functions-once-and-for-all-4447824c1cb4?source=collection_archive---------1-----------------------#2024-05-01)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/understand-sql-window-functions-once-and-for-all-4447824c1cb4?source=collection_archive---------1-----------------------#2024-05-01](https://towardsdatascience.com/understand-sql-window-functions-once-and-for-all-4447824c1cb4?source=collection_archive---------1-----------------------#2024-05-01)
- en: A step-by-step guide to understanding window functions
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解窗口函数的逐步指南
- en: '[](https://medium.com/@mtrentz?source=post_page---byline--4447824c1cb4--------------------------------)[![Mateus
    Trentz](../Images/8c50ef2bc9726b11094d6fa630015554.png)](https://medium.com/@mtrentz?source=post_page---byline--4447824c1cb4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--4447824c1cb4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--4447824c1cb4--------------------------------)
    [Mateus Trentz](https://medium.com/@mtrentz?source=post_page---byline--4447824c1cb4--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@mtrentz?source=post_page---byline--4447824c1cb4--------------------------------)[![Mateus
    Trentz](../Images/8c50ef2bc9726b11094d6fa630015554.png)](https://medium.com/@mtrentz?source=post_page---byline--4447824c1cb4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--4447824c1cb4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--4447824c1cb4--------------------------------)
    [Mateus Trentz](https://medium.com/@mtrentz?source=post_page---byline--4447824c1cb4--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--4447824c1cb4--------------------------------)
    ·9 min read·May 1, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--4447824c1cb4--------------------------------)
    ·阅读时间：9分钟·2024年5月1日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/4d7e65d387759934b9acf4a61ec24a33.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d7e65d387759934b9acf4a61ec24a33.png)'
- en: Photo by [Yasmina H](https://unsplash.com/@yasmina?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[Yasmina H](https://unsplash.com/@yasmina?utm_source=medium&utm_medium=referral)在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)上的发布
- en: Window functions are key to writing SQL code that is both efficient and easy
    to understand. Knowing how they work and when to use them will unlock new ways
    of solving your reporting problems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数是编写既高效又易于理解的 SQL 代码的关键。了解它们的工作原理以及何时使用它们，将为你打开解决报告问题的新思路。
- en: The objective of this article is to explain window functions in SQL step by
    step in an understandable way so that you don’t need to rely on only memorizing
    the syntax.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的目标是以易于理解的方式逐步解释 SQL 中的窗口函数，让你不必仅仅依赖于死记硬背语法。
- en: 'Here is what we will cover:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将涵盖以下内容：
- en: An explanation on how you should view window functions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于你应该如何看待窗口函数的解释
- en: Go over many examples in increasing difficulty
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过逐渐增加难度的多个例子来进行讲解
- en: Look at one specific real-case scenario to put our learnings into practice
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过一个具体的真实案例将所学知识付诸实践
- en: Review what we’ve learned
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾我们所学的内容
- en: Our dataset is simple, **six rows of revenue data for two regions in the year
    2023.**
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据集很简单，**包含2023年两地区的六行收入数据。**
- en: '![](../Images/0877edc3106b19906797d85e6cf07f76.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0877edc3106b19906797d85e6cf07f76.png)'
- en: Window Functions Are Sub Groups
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 窗口函数是子分组
- en: 'If we took this dataset and ran a `GROUP BY` sum on the revenue of each region,
    it would be clear what happens, right? It would result in only two remaining rows,
    one for each region, and then the sum of the revenues:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对这个数据集运行 `GROUP BY` 并对每个地区的收入进行求和，结果将是显而易见的，对吧？这将只剩下两行数据，每个地区一行，然后是收入的总和：
- en: '![](../Images/1dea1a92f4f1781cd737b55d004a47a4.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1dea1a92f4f1781cd737b55d004a47a4.png)'
- en: The way I want you to view window functions is very similar to this but, **instead
    of reducing the number of rows, the aggregation will run “in the background” and
    the values will be added to our existing rows.**
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你理解窗口函数的方式非常类似于这个例子，但**与其减少行数，聚合操作将在“后台”运行，值将被添加到现有的行中。**
- en: 'First, an example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，一个例子：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/b3b315c4d15c66605f50167b857ebd3d.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3b315c4d15c66605f50167b857ebd3d.png)'
- en: Notice that we don’t have any `GROUP BY` and our dataset is left intact. And
    yet we were able to get the sum of all revenues. Before we go more in depth in
    how this worked let’s just quickly talk about the full syntax before we start
    building up our knowledge.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们没有使用 `GROUP BY`，数据集保持不变。尽管如此，我们还是能够得到所有收入的总和。在我们更深入地理解它是如何工作的之前，让我们先简要谈谈完整的语法，然后再开始构建我们的知识。
- en: The Window Function Syntax
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 窗口函数语法
- en: 'The syntax goes like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Picking apart each section, this is what we have:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 拆解每个部分，得到如下内容：
- en: 'An aggregation or window function: `SUM`, `AVG`, `MAX`, `RANK`, `FIRST_VALUE`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个聚合或窗口函数：`SUM`、`AVG`、`MAX`、`RANK`、`FIRST_VALUE`
- en: The `OVER` keyword which says this is a window function
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OVER` 关键字，表示这是一个窗口函数'
- en: The `PARTITION BY` section, which defines the **groups**
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PARTITION BY` 部分，定义了**分组**'
- en: The `ORDER BY` section which defines if it’s a running function (we will cover
    this later on)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ORDER BY` 部分，定义是否为运行函数（我们稍后会讲解）'
- en: Don’t stress over what each of these means yet, as it will become clear when
    we go over the examples. **For now just know that to define a window function
    we will use the** `**OVER**` **keyword. And as we saw in the first example, that’s
    the only requirement.**
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不要急着理解这些是什么意思，因为当我们通过示例时，这些内容会变得清晰起来。**现在只需要知道，为了定义一个窗口函数，我们将使用** `**OVER**`
    **关键字。正如我们在第一个示例中看到的那样，这就是唯一的要求。**
- en: Building Our Understanding Step By Step
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一步步构建我们的理解
- en: Moving to something actually useful, we will now apply a group in our function.
    The initial calculation will be kept to show you that **we can run more than one
    window function at once**, which means we can do different aggregations at once
    in the same query, without requiring sub-queries.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 进入一些真正有用的内容，我们现在将在函数中应用一个分组。初始计算会被保留下来，向你展示**我们可以同时运行多个窗口函数**，这意味着我们可以在同一个查询中同时进行不同的聚合，而不需要使用子查询。
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/da5c8b809276353b2e95145598e95273.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/da5c8b809276353b2e95145598e95273.png)'
- en: 'As said, **we use the** `**PARTITION BY**` **to define our groups (windows)
    that are used by our aggregation function!** So, keeping our dataset intact we’ve
    got:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，**我们使用** `**PARTITION BY**` **来定义我们的分组（窗口），这些分组将被我们的聚合函数使用！** 所以，在保持数据集不变的情况下，我们得到了：
- en: The total revenue for each region
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个区域的总收入
- en: The total revenue for the whole dataset
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整个数据集的总收入
- en: 'We’re also not restrained to a single group. Similar to `GROUP BY` we can partition
    our data on Region and Quarter, for example:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也不受限于单一分组。类似于 `GROUP BY`，我们可以按区域和季度对数据进行分区，例如：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/8c855d938e778d5a711584e25f15e7f8.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c855d938e778d5a711584e25f15e7f8.png)'
- en: '**In the image we see that the only two data points for the same region and
    quarter got grouped together!**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**在图像中，我们看到同一区域和季度的唯一两个数据点被归为一组！**'
- en: At this point I hope it’s clear how we can view this as doing a `GROUP BY` but
    in-place, without reducing the number of rows in our dataset. Of course, we don’t
    always want that, but it’s not that uncommon to see queries where someone groups
    data and then joins it back in the original dataset, complicating what could be
    a single window function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里，我希望你已经清楚我们如何将其视为执行一个 `GROUP BY` 操作，但在原地进行，而不减少数据集的行数。当然，我们并不总是希望这样做，但并不罕见会看到有人对数据进行分组，然后再将其与原始数据集合并，这样会使本可以是一个简单窗口函数的查询变得复杂。
- en: Moving on to the `ORDER BY` keyword. This one defines a running window function.
    You’ve probably heard of a Running Sum once in your life, but if not, we should
    start with an example to make everything clear.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 继续讲解 `ORDER BY` 关键字。这个关键字定义了一个运行窗口函数。你可能在某一时刻听说过“运行总和”，如果没有，我们应该从一个示例开始，让一切变得清晰。
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/d1441cd881f2d0e95c2b54bb00aea05f.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d1441cd881f2d0e95c2b54bb00aea05f.png)'
- en: What happens here is that we’ve went, row by row, summing the revenue with all
    previous values. This was done following the order of the `id` column, but it
    could’ve been any other column.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的事情是，我们按行逐步累加收入与之前的所有值。这是根据 `id` 列的顺序进行的，但也可以是任何其他列。
- en: This specific example is not particularly useful because we’re summing across
    random months and two regions, but using what we’ve learned we can now find **the
    cumulative revenue per region.** We do that by applying the running sum within
    each group.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个具体的示例并不是特别有用，因为我们在随机月份和两个区域之间进行求和，但运用我们所学的知识，我们现在可以找到**每个区域的累积收入**。我们通过在每个分组内应用运行总和来实现这一点。
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/444b91883903ba7ecabf49479a7c948c.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/444b91883903ba7ecabf49479a7c948c.png)'
- en: 'Take the time to make sure you understand what happened here:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 花些时间确保你理解这里发生了什么：
- en: For each region we’re walking up month by month and summing the revenue
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个区域，我们逐月走过并汇总收入。
- en: Once it’s done for that region we move to the next one, starting from scratch
    and again moving up the months!
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个区域完成时，我们就转到下一个区域，从头开始，再次按照月份逐步计算！
- en: It’s quite interesting to notice here that when we’re writing these running
    functions we have the “context” of other rows. What I mean is that to get the
    running sum at one point, we must know the previous values for the previous rows.
    This becomes more obvious when we learn that we can manually chose how many rows
    before/after we want to aggregate on.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有一点很有趣的是，当我们编写这些运行函数时，我们有其他行的“上下文”。我的意思是，要在某一点获得运行和，必须知道前一行的值。这在我们了解到我们可以手动选择聚合前/后多少行时变得更加明显。
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/5b08b522955119bafaa3e6ece4fcdd07.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5b08b522955119bafaa3e6ece4fcdd07.png)'
- en: For this query we specified that for each row we wanted to look at one row behind
    and two rows ahead, so that means we get the sum of that range! Depending on the
    problem you’re solving this can be extremely powerful as it gives you complete
    control on how you’re grouping your data.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个查询，我们指定了对于每一行，我们希望查看前一行和后两行的数据，也就是说，我们得到那个范围的和！根据你解决的问题，这可以非常强大，因为它让你完全控制如何对数据进行分组。
- en: Finally, one last function I want to mention before we move into a harder example
    is the `RANK` function. This gets asked a lot in interviews and the logic behind
    it is the same as everything we’ve learned so far.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在我们进入更复杂的例子之前，我想提到的最后一个函数是`RANK`函数。这是面试中经常被问到的问题，它背后的逻辑和我们到目前为止所学的所有内容是一样的。
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/1a0f2adb51728b3f8640fb02ed75ac6a.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1a0f2adb51728b3f8640fb02ed75ac6a.png)'
- en: Just as before, we used `ORDER BY` to specify the order which we will walk,
    row by row, and `PARTITION BY` to specify our sub-groups.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 就像之前一样，我们使用了`ORDER BY`来指定我们将逐行遍历的顺序，并使用`PARTITION BY`来指定我们的子组。
- en: The first column ranks each row within each region, meaning that we will have
    multiple “rank one’s” in the dataset. The second calculation is the rank across
    all rows in the dataset.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第一列对每个区域内的每一行进行排名，这意味着在数据集中我们会有多个“排名第一”的值。第二个计算是对数据集中所有行的排名。
- en: Forward Filling Missing Data
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向前填充缺失数据
- en: This is a problem that shows up every now and then and to solve it on SQL it
    takes heavy usage of window functions. To explain this concept we will use a different
    dataset containing timestamps and temperature measurements. **Our goal is to fill
    in the rows missing temperature measurements with the last measured value.**
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个偶尔会出现的问题，要在SQL中解决它需要大量使用窗口函数。为了说明这个概念，我们将使用一个不同的数据集，包含时间戳和温度测量值。**我们的目标是用最后一个测量值填充缺失的温度测量行。**
- en: '![](../Images/264bdecb551419927c9cebfe06e1eef4.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/264bdecb551419927c9cebfe06e1eef4.png)'
- en: 'Here is what we expect to have at the end:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们期望最终得到的结果：
- en: '![](../Images/c1999c3e305edc1c1fbdfadf83226c99.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c1999c3e305edc1c1fbdfadf83226c99.png)'
- en: Before we start I just want to mention that if you’re using Pandas you can solve
    this problem simply by running `df.ffill()` but if you’re on SQL the problem gets
    a bit more tricky.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，我只是想提一下，如果你使用的是Pandas，你可以通过运行`df.ffill()`轻松解决这个问题，但如果你使用SQL，问题会变得有些棘手。
- en: The first step to solve this is to, somehow, group the NULLs with the previous
    non-null value. It might not be clear how we do this but I hope it’s clear that
    this will require a **running function**. Meaning that it’s a function that will
    “walk row by row”, knowing when we hit a null value and when we hit a non-null
    value.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的第一步是，某种方式地将NULL值与前一个非NULL值分组。可能不清楚我们如何做到这一点，但我希望大家明白这将需要一个**运行函数**。也就是说，这是一个会“逐行走过”的函数，知道何时遇到NULL值，何时遇到非NULL值。
- en: The solution is to use `COUNT` and, more specifically, count the values of temperature
    measurements. In the following query I run both a normal running count and also
    a count over the temperature values.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是使用`COUNT`，更具体地说，是计算温度测量值的数量。在以下查询中，我运行了一个普通的运行计数，并且还对温度值进行了计数。
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/93ed3b3f16f72d91b45c04007f370907.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/93ed3b3f16f72d91b45c04007f370907.png)'
- en: In the first calculation we simply counted up each row increasingly
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一个计算中，我们只是简单地对每一行进行递增计数。
- en: On the second one we counted every value of temperature we saw, not counting
    when it was NULL
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二个查询中，我们统计了所有看到的温度值，而没有计算为NULL的值。
- en: The `normal_count` column is useless for us, I just wanted to show what a running
    `COUNT` looked like. **Our second calculation though, the** `**group_count**`
    **moves us closer to solving our problem!**
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`normal_count`列对我们来说没有用，我只是想展示一下运行中的`COUNT`看起来是什么样子。**然而，我们的第二个计算，**`**group_count**`**让我们更接近解决问题！**'
- en: Notice that this way of counting makes sure that the first value, just before
    the NULLs start, is counted and then, every time the function sees a null, nothing
    happens. This makes sure that we’re “tagging” every subsequent null with the same
    count we had when we stopped having measurements.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这种计数方式确保了在NULL值开始之前的第一个值会被计数，然后每当函数遇到NULL时，什么也不会发生。这确保了我们为每个后续的NULL“标记”上我们停止测量时的计数值。
- en: Moving on, we now need to copy over the first value that got tagged into all
    the other rows within that same group. Meaning that for the group `2` needs to
    all be filled with the value `15.0`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将第一个被标记的值复制到同一组中的所有其他行。也就是说，对于组`2`，需要用值`15.0`填充所有数据。
- en: Can you think of a function now that we can use here? There is more than one
    answer for this, but, again, I hope that at least it’s clear that now we’re looking
    at a simple window aggregation with `PARTITION BY` .
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在能想到一个我们可以在这里使用的函数吗？这个问题有不止一个答案，但再次强调，我希望至少现在你能明白，我们正在使用一个简单的窗口聚合，并且有`PARTITION
    BY`。
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/188d89d977ccdb549772bfd3700cd8f0.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/188d89d977ccdb549772bfd3700cd8f0.png)'
- en: We can use both `FIRST_VALUE` or `MAX` to achieve what we want. The only goal
    is that we get the first non-null value. Since we know that each group contains
    one non-null value and a bunch of null values, both of these functions work!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`FIRST_VALUE`或`MAX`来实现我们想要的目标。唯一的目标是得到第一个非NULL值。由于我们知道每个组包含一个非NULL值和一堆NULL值，这两个函数都可以工作！
- en: 'This example is a great way to practice window functions. If you want a similar
    challenge try to add two sensors and then forward fill the values with the previous
    reading of that sensor. Something similar to this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子是练习窗口函数的一个很好的方式。如果你想要类似的挑战，试着添加两个传感器，然后用该传感器的前一个读数进行向前填充。类似于这样：
- en: '![](../Images/abff0d3e5b1c57b048d6bb0e6fed0e84.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/abff0d3e5b1c57b048d6bb0e6fed0e84.png)'
- en: Could you do it? It doesn’t use anything that we haven’t learned here so far.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你能做吗？它没有使用我们到目前为止没有学习过的任何内容。
- en: By now we know everything that we need about how window functions work in SQL,
    so let’s just do a quick recap!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了关于SQL中窗口函数的一切，所以让我们快速回顾一下！
- en: Recap Time
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾时间
- en: 'This is what we’ve learned:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们学到的内容：
- en: We use the `OVER` keyword to write window functions
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`OVER`关键字来编写窗口函数
- en: We use `PARTITION BY` to specify our sub-groups (windows)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用`PARTITION BY`来指定我们的子组（窗口）
- en: If we provide only the `OVER()` keyword our window is the whole dataset
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们仅提供`OVER()`关键字，我们的窗口就是整个数据集
- en: We use `ORDER BY` when we want to have a running function, meaning that our
    calculation walks row by row
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们希望进行逐行计算时，我们使用`ORDER BY`，这意味着我们的计算会逐行执行
- en: Window functions are useful when we want to group data to run an aggregation
    but we want to keep our dataset as is
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们想对数据进行分组以执行聚合操作，但又希望保持数据集原样时，窗口函数非常有用
- en: I hope this helped you understand how window functions work and helps you apply
    it in the problems you need to solve.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这能帮助你理解窗口函数是如何工作的，并帮助你将它应用到你需要解决的问题中。
- en: '*All images by the author unless stated otherwise*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，否则所有图片均由作者提供*'
