["```py\nrustup target add wasm32-wasip1\ncargo install wasmtime-cli\ncargo test --target wasm32-wasip1\n```", "```py\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Line Counter</title>\n</head>\n<body>\n    <h1>Line Counter</h1>\n    <input type=\"file\" id=\"fileInput\" />\n    <p id=\"lineCount\">Lines in file: </p>\n    <script>\n        const output = document.getElementById('lineCount');\n        document.getElementById('fileInput').addEventListener('change', (event) => {\n            const file = event.target.files[0];\n            if (!file) { output.innerHTML = ''; return } // No file selected\n            const reader = new FileReader();\n            // When the file is fully read\n            reader.onload = async (e) => {                \n                const content = e.target.result;\n                const lines = content.split(/\\r\\n|\\n/).length;\n                output.textContent = `Lines in file: ${lines}`;\n            };\n            // Now start to read the file as text\n            reader.readAsText(file);\n        });\n    </script>\n</body>\n</html>\n```", "```py\ncargo install simple-http-server\nsimple-http-server --ip 127.0.0.1 --port 3000 --index\n# then open browser to http://127.0.0.1:3000\n```", "```py\nconst file = event.target.files[0];\nif (!file) { output.innerHTML = ''; return } // No file selected\n```", "```py\nconst reader = new FileReader();\n// ... some setup ...\n// Now start to read the file as text\nreader.readAsText(file);\n```", "```py\n// When the file is fully read\nreader.onload = async (e) => {                \n    const content = e.target.result;\n    const lines = content.split(/\\r\\n|\\n/).length;\n    output.textContent = `Lines in file: ${lines}`;\n    };\n```", "```py\nrustup target add wasm32-unknown-unknown\ncargo install wasm-pack --force\ncargo install wasm-bindgen-cli --force\n```", "```py\ncd ~\nmkdir -p ~/.chrome-for-testing\ncd .chrome-for-testing/\nwget https://storage.googleapis.com/chrome-for-testing-public/129.0.6668.70/linux64/chrome-linux64.zip\nwget https://storage.googleapis.com/chrome-for-testing-public/129.0.6668.70/linux64/chromedriver-linux64.zip\nunzip chrome-linux64.zip\nunzip chromedriver-linux64.zip\n```", "```py\nNew-Item -Path $HOME -Name \".chrome-for-testing\" -ItemType \"Directory\"\nSet-Location -Path $HOME\\.chrome-for-testing\nbitsadmin /transfer \"ChromeDownload\" https://storage.googleapis.com/chrome-for-testing-public/129.0.6668.70/win64/chrome-win64.zip $HOME\\.chrome-for-testing\\chrome-win64.zip\nbitsadmin /transfer \"ChromeDriverDownload\" https://storage.googleapis.com/chrome-for-testing-public/129.0.6668.70/win64/chromedriver-win64.zip $HOME\\.chrome-for-testing\\chromedriver-win64.zip\nExpand-Archive -Path \"$HOME\\.chrome-for-testing\\chrome-win64.zip\" -DestinationPath \"$HOME\\.chrome-for-testing\"\nExpand-Archive -Path \"$HOME\\.chrome-for-testing\\chromedriver-win64.zip\" -DestinationPath \"$HOME\\.chrome-for-testing\"\n```", "```py\nexport PATH=~/.chrome-for-testing/chrome-linux64:~/.chrome-for-testing/chromedriver-linux64:$PATH\n```", "```py\n# PowerShell\n$env:PATH = \"$HOME\\.chrome-for-testing\\chrome-win64;$HOME\\.chrome-for-testing\\chromedriver-win64;$PATH\"\n# or, CMD\nset PATH=%USERPROFILE%\\.chrome-for-testing\\chrome-win64;%USERPROFILE%\\.chrome-for-testing\\chromedriver-win64;%PATH%\n```", "```py\necho 'export PATH=~/.chrome-for-testing/chrome-linux64:~/.chrome-for-testing/chromedriver-linux64:$PATH' >> ~/.bashrc\n```", "```py\n[System.Environment]::SetEnvironmentVariable(\"Path\", \"$HOME\\.chrome-for-testing\\chrome-win64;$HOME\\.chrome-for-testing\\chromedriver-win64;\" + $env:PATH, [System.EnvironmentVariableTarget]::User)\n```", "```py\nchromedriver --version\n```", "```py\n[lib]\ncrate-type = [\"cdylib\", \"rlib\"]\n```", "```py\ncargo add wasm-bindgen\ncargo add wasm-bindgen-test --dev\n```", "```py\n[target.wasm32-unknown-unknown]\nrunner = \"wasm-bindgen-test-runner\"\n```", "```py\nuse wasm_bindgen_test::wasm_bindgen_test;\nwasm_bindgen_test::wasm_bindgen_test_configure!(run_in_browser);\n```", "```py\n# cd to the top of a work directory\ngit clone --branch native_version --single-branch https://github.com/CarlKCarlK/rustconf24-good-turing.git good-turing\ncd good-turing\ncargo test\ncargo run pg100.txt\n```", "```py\n// --- May fail to compile for now. ---\nuse wasm_bindgen::prelude::*;\n// ...\n#[wasm_bindgen]\npub fn good_turing(file_name: &str) -> Result<(u32, u32), io::Error> {\n    let reader = BufReader::new(File::open(file_name)?);\n    // ...\n}\n// fn main() {\n// ...\n// }\n#[cfg(test)]\nmod tests {\n    use wasm_bindgen_test::wasm_bindgen_test;\n    wasm_bindgen_test::wasm_bindgen_test_configure!(run_in_browser);\n    // ...\n    #[test]\n    #[wasm_bindgen_test]\n    fn test_process_file() {\n      let (prediction, actual) = good_turing(\"./pg100.txt\").unwrap();\n      // ...\n    }\n}\n```", "```py\ncargo test --target wasm32-unknown-unknown\n```", "```py\n#[wasm_bindgen]\npub fn good_turing(file_name: &str) -> Result<(u32, u32), io::Error> {\n    let reader = BufReader::new(File::open(file_name)?);\n    // ...\n}\n```", "```py\nfn good_turing<R: BufRead>(reader: R) -> Result<(u32, u32), io::Error> {\n  // delete: let reader = BufReader::new(File::open(file_name)?);\n  // ...\n}\n```", "```py\n#[wasm_bindgen]\npub fn good_turing_byte_slice(data: &[u8]) -> Result<Vec<u32>, String> {\n    let reader = BufReader::new(data);\n    match good_turing(reader) {\n        Ok((prediction, actual)) => Ok(vec![prediction, actual]),\n        Err(e) => Err(format!(\"Error processing data: {e}\")),\n    }\n}\n```", "```py\n#[cfg(test)]\nmod tests {\n    use super::*;\n    use wasm_bindgen_test::wasm_bindgen_test;\n    wasm_bindgen_test::wasm_bindgen_test_configure!(run_in_browser);\n\n    #[test]\n    #[wasm_bindgen_test]\n    fn test_process_file() {\n        let (prediction, actual) = good_turing(\"./pg100.txt\").unwrap();\n        assert_eq!(prediction, 10223);\n        assert_eq!(actual, 7967);\n    }\n}\n```", "```py\n use std::fs::File;\n\n    #[test]\n    fn test_process_file() {\n        let reader = BufReader::new(File::open(\"pg100.txt\").unwrap());\n        let (prediction, actual) = good_turing(reader).unwrap();\n        assert_eq!(prediction, 10223);\n        assert_eq!(actual, 7967);\n    }\n```", "```py\n #[test]\n    #[wasm_bindgen_test]\n    fn test_good_turing_byte_slice() {\n        let data = include_bytes!(\"../pg100.txt\");\n        let result = good_turing_byte_slice(data).unwrap();\n        assert_eq!(result, vec![10223, 7967]);\n    }\n```", "```py\n[target.'cfg(all(target_arch = \"wasm32\", target_os = \"unknown\"))'.dev-dependencies]\ngetrandom = { version = \"0.2\", features = [\"js\"] }\nweb-time = \"1.1.0\"\n```", "```py\ncargo test\ncargo test --target wasm32-unknown-unknown\n```", "```py\nwasm-pack build --target web\n```", "```py\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Good-Turing Estimation</title>\n</head>\n<body>\n    <h1>Good-Turing Estimation</h1>\n    <input type=\"file\" id=\"fileInput\" />\n    <p id=\"lineCount\"></p>\n\n    <script type=\"module\">\n        import init, { good_turing_byte_slice } from './pkg/good_turing.js'; // These files are generated by `wasm-pack build --target web`\n        const output = document.getElementById('lineCount');\n        document.getElementById('fileInput').addEventListener('change', (event) => {\n            const file = event.target.files[0];\n            if (!file) { output.innerHTML = ''; return } // No file selected\n            const reader = new FileReader();\n            // When the file is fully read\n            reader.onload = async (e) => {\n                await init(); // Ensure 'good_turing_byte_slice' is ready\n                // View the memory buffer as a Uint8Array\n                const u8array = new Uint8Array(e.target.result);\n                try { // Actually run the WASM\n                    const [prediction, actual] = good_turing_byte_slice(u8array);\n                    output.innerHTML =\n                        `Prediction (words that appear exactly once on even lines): ${prediction.toLocaleString()}<br>` +\n                        `Actual distinct words that appear only on odd lines: ${actual.toLocaleString()}`;\n                } catch (err) { // Or output an error\n                    output.innerHTML = `Error: ${err}`;\n                }\n            };\n            // Now start to read the file as memory buffer\n            reader.readAsArrayBuffer(file);\n        });\n    </script>\n</body>\n</html>\n```", "```py\nimport init, { good_turing_byte_slice } from './pkg/good_turing.js';\n```", "```py\nconst reader = new FileReader();\n// ... some setup code ...\n// Now start to read the file as bytes.\nreader.readAsArrayBuffer(file);\n```", "```py\nreader.onload = async (e) => {\n//...\n};\n```", "```py\nawait init(); // Ensure 'good_turing_byte_slice' is ready\n```", "```py\n// View the memory buffer as a Uint8Array\nconst u8array = new Uint8Array(e.target.result);\n```", "```py\nconst [prediction, actual] = good_turing_byte_slice(u8array);\n```", "```py\noutput.innerHTML =\n    `Prediction (words that appear exactly once on even lines): ${prediction.toLocaleString()}<br>` +\n    `Actual distinct words that appear only on odd lines: ${actual.toLocaleString()}`;\n```", "```py\ntry { // Actually run the WASM\n    // ...\n} catch (err) { // Or output an error\n    output.innerHTML = `Error: ${err}`;\n}\n```", "```py\n test_wasm_unknown_unknown:\n    name: Test WASM unknown unknown\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Set up Rust\n        uses: dtolnay/rust-toolchain@master\n        with:\n          toolchain: stable\n          target: wasm32-unknown-unknown\n      - name: Install wasm-pack\n        run: |\n          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh\n      - name: Run WASM tests with Chrome\n        run: |\n          rustup target add wasm32-unknown-unknown\n          wasm-pack test --chrome --headless\n```", "```py\n#[test]\n#[wasm_bindgen_test]\n```"]