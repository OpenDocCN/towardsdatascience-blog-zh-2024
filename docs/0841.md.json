["```py\n[\n    {\n       \"entity_type\": \"disaster_type\",\n       \"entity\": \"sudan crises\"\n    }\n]\n```", "```py\n {\n    \"appname\": “<YOUR APP NAME>”,\n    \"query\": {\n        \"value\": \"Sudan crises\",\n        \"operator\": \"AND\"\n    },\n    \"filter\": {\n        \"conditions\": [\n            {\n                \"field\": \"format.name\",\n                \"value\": \"Situation Report\"\n            }\n        ]\n    },\n    \"limit\": 5,\n    \"offset\": 0,\n    \"fields\": {\n        \"include\": [\n            \"title\",\n            \"body\",\n            \"url\",\n            \"source\",\n            \"date\",\n            \"format\",\n            \"status\",\n            \"primary_country\",\n            \"id\"\n        ]\n    },\n    \"preset\": \"latest\",\n    \"profile\": \"list\"\n} \n```", "```py\nsystem:\n\nYou are a humanitarian researcher who needs produces accurate and consise summaries of latest news\n\n========= TEXT BEGIN =========\n\n{{text}}\n\n========= TEXT END =========\n\nUsing the output from reliefweb above, write a summary of the article.\nBe sure to capture any numerical data, and the main points of the article.\nBe sure to capture any organizations or people mentioned in the article.\n```", "```py\nsystem:\n\nArticle:\n\n {{text}}\n\n  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\n  You are an expert in writing rich and dense summaries in broad domains.\n\n  You will generate increasingly concise, entity-dense summaries of the above JSON list of data extracted.\n\n  Repeat the following 2 steps 5 times.\n\n  - Step 1: Identify 1-3 informative Entities from the Article\n  which are missing from the previously generated summary and are the most\n  relevant.\n\n  - Step 2: Write a new, denser summary of identical length which covers\n  every entity and detail from the previous summary plus the missing entities\n\n  A Missing Entity is:\n\n  - Relevant: to the main story\n  - Specific: descriptive yet concise (5 words or fewer)\n  - Novel: not in the previous summary\n  - Faithful: present in the Article\n  - Anywhere: located anywhere in the Article\n\n  Guidelines:\n  - The first summary should be long (5 paragraphs) yet\n  highly non-specific, containing little information beyond the entities\n  marked as missing.\n\n  - Use overly verbose language and fillers (e.g. \"this article discusses\") to\n  reach approx. \n\n  - Make every word count: re-write the previous summary to improve flow and\n  make space for additional entities.\n\n  - Make space with fusion, compression, and removal of uninformative phrases\n  like \"the article discusses\"\n\n  - The summaries should become highly dense and concise yet self-contained,\n  e.g., easily understood without the Article.\n\n  - Missing entities can appear anywhere in the new summary.\n\n  - Never drop entities from the previous summary. If space cannot be made,\n  add fewer new entities.\n\n  > Remember to use the exact same number of words for each summary.\n  Answer in JSON.\n\n  > The JSON in `summaries_per_step` should be a list (length 5) of\n  dictionaries whose keys are \"missing_entities\" and \"denser_summary\".\n```", "```py\nsystem:\nYou are a helpful assistant. Using the output from a query to reliefweb, \nanser the user's question.\nYou always provide your sources when answering a question, providing the \nreport name, link and quote the relevant information.\n\n{{reliefweb_data}}\n\n{% for item in chat_history %}\nuser:\n{{item.inputs.question}}\nassistant:\n{{item.outputs.answer}}\n{% endfor %}\n\nuser:\n{{question}}\n```"]