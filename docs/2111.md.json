["```py\nimport pandas as pd\nfrom causalml.dataset import make_uplift_classification\n\n# Dictionary specifying the number of features that will have a positive effect on retention for each treatment\nn_uplift_increase_dict = {\n    \"email_campaign\": 2,\n    \"in_app_notification\": 3,\n    \"call_campaign\": 3,\n    \"voucher\": 4\n}\n\n# Dictionary specifying the number of features that will have a negative effect on retention for each treatment\nn_uplift_decrease_dict = {\n    \"email_campaign\": 1,\n    \"in_app_notification\": 1,\n    \"call_campaign\": 2,\n    \"voucher\": 1\n}\n\n# Dictionary specifying the magnitude of positive effect on retention for each treatment\ndelta_uplift_increase_dict = {\n    \"email_campaign\": 0.05,  # Email campaign increases retention by 5 percentage points\n    \"in_app_notification\": 0.03,  # In-app notifications have a smaller but still positive effect\n    \"call_campaign\": 0.08,  # Direct calls have a strong positive effect\n    \"voucher\": 0.10  # Vouchers have the strongest positive effect\n}\n\n# Dictionary specifying the magnitude of negative effect on retention for each treatment\ndelta_uplift_decrease_dict = {\n    \"email_campaign\": 0.02,  # Email campaign might slightly decrease retention for some customers\n    \"in_app_notification\": 0.01,  # In-app notifications have minimal negative effect\n    \"call_campaign\": 0.03,  # Calls might annoy some customers more\n    \"voucher\": 0.02  # Vouchers might make some customers think the product is overpriced\n}\n\n# Dictionary specifying the number of mixed features (combination of informative and positive uplift) for each treatment\nn_uplift_increase_mix_informative_dict = {\n    \"email_campaign\": 1,\n    \"in_app_notification\": 2,\n    \"call_campaign\": 1,\n    \"voucher\": 2\n}\n\n# Dictionary specifying the number of mixed features (combination of informative and negative uplift) for each treatment\nn_uplift_decrease_mix_informative_dict = {\n    \"email_campaign\": 1,\n    \"in_app_notification\": 1,\n    \"call_campaign\": 1,\n    \"voucher\": 1\n}\n\npositive_class_proportion = 0.7  # Baseline retention rate\n\n# Generate the dataset\ndf, feature_names = make_uplift_classification(\n    n_samples=20000,  # Increased sample size for more robust results\n    treatment_name=['email_campaign', 'in_app_notification', 'call_campaign', 'voucher'],\n    y_name='retention',\n    n_classification_features=20,  # Increased number of features\n    n_classification_informative=10,\n    n_uplift_increase_dict=n_uplift_increase_dict,\n    n_uplift_decrease_dict=n_uplift_decrease_dict,\n    delta_uplift_increase_dict=delta_uplift_increase_dict,\n    delta_uplift_decrease_dict=delta_uplift_decrease_dict,\n    n_uplift_increase_mix_informative_dict=n_uplift_increase_mix_informative_dict,\n    n_uplift_decrease_mix_informative_dict=n_uplift_decrease_mix_informative_dict,\n    positive_class_proportion=positive_class_proportion,\n    random_seed=42\n)\n\n#Encoding treatments variables\nencoding_dict = {\n    'call_campaign': 3,\n    'email_campaign': 1,\n    'voucher': 4,\n    'in_app_notification':2,\n    'control': 0\n}\n\n# Create a new column with encoded values\ndf['treatment_group_numeric'] = df['treatment_group_key'].map(encoding_dict)\n```", "```py\nfrom sklearn.model_selection import train_test_split\n\ndef prepare_data(df, feature_names, y_name, test_size=0.3, random_state=42):\n    \"\"\"\n    Prepare data for uplift modeling, including splitting into train and test sets,\n    and creating mono-treatment subsets.\n    \"\"\"\n    # Create binary treatment column\n    df['treatment_col'] = np.where(df['treatment_group_key'] == 'control', 0, 1)\n\n    # Split data into train and test sets\n    df_train, df_test = train_test_split(df, test_size=test_size, random_state=random_state)\n\n    # Create mono-treatment subsets\n    df_train_mono = df_train[df_train['treatment_group_key'].isin(['email_campaign', 'control'])]\n    df_test_mono = df_test[df_test['treatment_group_key'].isin(['email_campaign', 'control'])]\n\n    # Prepare features, treatment, and target variables for full dataset\n    X_train = df_train[feature_names].values\n    X_test = df_test[feature_names].values\n    treatment_train = df_train['treatment_group_key'].values\n    treatment_test = df_test['treatment_group_key'].values\n    y_train = df_train[y_name].values\n    y_test = df_test[y_name].values\n\n    # Prepare features, treatment, and target variables for mono-treatment dataset\n    X_train_mono = df_train_mono[feature_names].values\n    X_test_mono = df_test_mono[feature_names].values\n    treatment_train_mono = df_train_mono['treatment_group_key'].values\n    treatment_test_mono = df_test_mono['treatment_group_key'].values\n    y_train_mono = df_train_mono[y_name].values\n    y_test_mono = df_test_mono[y_name].values\n\n    return {\n        'df_train': df_train, 'df_test': df_test,\n        'df_train_mono': df_train_mono, 'df_test_mono': df_test_mono,\n        'X_train': X_train, 'X_test': X_test,\n        'X_train_mono': X_train_mono, 'X_test_mono': X_test_mono,\n        'treatment_train': treatment_train, 'treatment_test': treatment_test,\n        'treatment_train_mono': treatment_train_mono, 'treatment_test_mono': treatment_test_mono,\n        'y_train': y_train, 'y_test': y_test,\n        'y_train_mono': y_train_mono, 'y_test_mono': y_test_mono\n    }\n\n# Usage\ndata = prepare_data(df, feature_names, y_name)\n\n# Print shapes for verification\nprint(f\"Full test set shape: {data['df_test'].shape}\")\nprint(f\"Mono-treatment test set shape: {data['df_test_mono'].shape}\")\n\n# Access prepared data\ndf_train, df_test = data['df_train'], data['df_test']\ndf_train_mono, df_test_mono = data['df_train_mono'], data['df_test_mono']\nX_train, y_train = data['X_train'], data['y_train']\nX_test, y_test = data['X_test'], data['y_test']\nX_train_mono, y_train_mono = data['X_train_mono'], data['y_train_mono']\nX_test_mono, y_test_mono = data['X_test_mono'], data['y_test_mono']\ntreatment_train, treatment_test = data['treatment_train'], data['treatment_test']\ntreatment_train_mono, treatment_test_mono = data['treatment_train_mono'], data['treatment_test_mono']\n```", "```py\nfrom causalml.inference.meta import BaseSRegressor, BaseTRegressor\nfrom causalml.inference.tree import UpliftRandomForestClassifier\nfrom xgboost import XGBRegressor\n\n#save results in a df\ndf_results_mono = df_test_mono.copy()\n\n# Initialize and train a randomForest Classifier\nrfc = UpliftRandomForestClassifier(control_name='control')\nrfc.fit(X_train_mono, treatment_train_mono, y_train_mono)\n\n# Initialize and train S-Learner\nlearner_s = BaseSRegressor(\n    learner=XGBRegressor(\n        n_estimators=100,\n        max_depth=3,\n        learning_rate=0.1,\n        random_state=42\n    ),\n    control_name='control'\n)\n\nlearner_s.fit(X_train_mono, treatment_train_mono, y_train_mono)\n\n# Initialize and train T-Learner\nlearner_t = BaseTRegressor(\n    learner=XGBRegressor(\n        n_estimators=100,\n        max_depth=3,\n        learning_rate=0.1,\n        random_state=42\n    ),\n    control_name='control'\n)\n\nlearner_t.fit(X_train_mono, treatment_train_mono, y_train_mono)\n\n# Predict treatment effects\ndf_results_mono[[\"mono_S_learner\"]] = learner_s.predict(X=X_test_mono)\ndf_results_mono[[\"mono_T_learner\"]] = learner_t.predict(X=X_test_mono)\ndf_results_mono[\"random_forest_learner\"] = rfc.predict(X_test_mono)\n\ndisplay(df_results_mono[[\"mono_S_learner\", \"mono_T_learner\", \"random_forest_learner\"]].mean())\n\ndf_mono_results_plot = df_results_mono[[\"mono_S_learner\",\"mono_T_learner\", \"random_forest_learner\",\"retention\",\"treatment_col\"]].copy()\n```", "```py\nfrom causalml.metrics import plot_gain\nfrom causalml.metrics import auuc_score\n\n#AAUC score\naauc_normalized = auuc_score(df_mono_results_plot, outcome_col='retention', treatment_col='treatment_col', normalize=True, tmle=False)\nprint(f\"AAUC Score Normalized: {aauc_normalized}\")\n\n# Plot Gain Curve\nplot_gain(df_mono_results_plot, outcome_col='retention', treatment_col='treatment_col')\nplt.title('Gain Curve - T-Learner')\nplt.show()\n```", "```py\n#save results in a df\ndf_results_multi = df_test.copy()\n\n# Define treatment actions\nactions = ['call_campaign', 'email_campaign', 'in_app_notification', 'voucher']\n\n# Initialize and train Uplift Random Forest Classifier\nrfc = UpliftRandomForestClassifier(\n    n_estimators=100,\n    max_depth=5,\n    min_samples_leaf=50,\n    min_samples_treatment=10,\n    n_reg=10,\n    control_name='control',\n    random_state=42\n)\nrfc.fit(X_train , treatment_train, y_train)\n\n# Initialize and train S-Learner\nlearner_s = BaseSRegressor(\n    learner=XGBRegressor(\n        n_estimators=100,\n        max_depth=3,\n        learning_rate=0.1,\n        random_state=42\n    ),\n    control_name='control'\n)\n\nlearner_s.fit(X_train , treatment_train, y_train)\n\n# Initialize and train T-Learner\nlearner_t = BaseTRegressor(\n    learner=XGBRegressor(\n        n_estimators=100,\n        max_depth=3,\n        learning_rate=0.1,\n        random_state=42\n    ),\n    control_name='control'\n)\n\nlearner_t.fit(X_train , treatment_train, y_train)\n```", "```py\ndef predict_multi(df, learner, learner_name, X_test):\n    \"\"\"\n    Predict treatment effects for multiple treatments and determine the best treatment.\n    \"\"\"\n\n    # Predict treatment effects\n    cols = [f'{learner_name}_learner_{action}' for action in actions]\n    df[cols] = learner.predict(X=X_test)\n\n    # Determine the best treatment effect\n    df[f'{learner_name}_learner_effect'] = df[cols].max(axis=1)\n\n    # Determine the best treatment\n    df[f\"{learner_name}_best_treatment\"] = df[cols].idxmax(axis=1)\n    df.loc[df[f'{learner_name}_learner_effect'] < 0, f\"{learner_name}_best_treatment\"] = \"control\"\n\n    return df\n\n# Apply predictions for each model\ndf_results_multi = predict_multi(df_results_multi, rfc, 'rf', X_test)\ndf_results_multi = predict_multi(df_results_multi, learner_s, 's', X_test)\ndf_results_multi = predict_multi(df_results_multi, learner_t, 't', X_test)\n```", "```py\n#AAUC score\naauc_normalized = auuc_score(df_t_learner_plot_multi, outcome_col='retention', treatment_col='treatment_col', normalize=True, tmle=False)\naauc_non_normalize = auuc_score(df_t_learner_plot_multi, outcome_col='retention', treatment_col='treatment_col', normalize=False, tmle=False)\nprint(f\"AAUC Score Normalized: {aauc_normalized}\")\nprint(f\"AAUC Score: {aauc_non_normalize}\")\n\n# Plot Gain Curve\nplot_gain(df_t_learner_plot_multi, outcome_col='retention', treatment_col='treatment_col')\nplt.title('Gain Curve - T-Learner')\nplt.show()\n```"]