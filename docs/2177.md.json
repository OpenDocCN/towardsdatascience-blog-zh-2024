["```py\nclass UserAgent(object):\n\n    def __init__(self, llm, userid, user_language):\n        self.llm = llm\n        self.userid = userid\n        self.user_language = user_language\n        self.chat_history = []\n\n        prompt = ChatPromptTemplate.from_template(USER_SYSTEM_PROMPT2)\n\n        self.chain = prompt | llm\n\n    def set_graph(self, graph):\n        self.graph = graph\n\n    def send_text(self,text:str, debug = False):\n\n        message = ChatMessage(message = HumanMessage(content=text), sender = self.userid)\n        inputs = {\"messages\": [message]}\n        output = self.graph.invoke(inputs, debug = debug)\n        return output\n\n    def display_chat_history(self, content_only = False):\n\n        for i in self.chat_history:\n            if content_only == True:\n                print(f\"{i.sender} : {i.content}\")\n            else:\n                print(i)\n\n    def invoke(self, message:BaseMessage) -> AIMessage:\n\n        output = self.chain.invoke({'message':message.content, 'user_language':self.user_language})\n\n        return output\n```", "```py\nclass AyaTranslator(object):\n\n    def __init__(self, llm) -> None:\n        self.llm = llm \n        prompt = ChatPromptTemplate.from_template(AYA_TRANSLATE_PROMPT)\n        self.chain = prompt | llm \n\n    def invoke (self, message: str) -> AIMessage:\n        output = self.chain.invoke({'message':message})\n        return output\n\nclass AyaQuery(object):\n\n    def __init__(self, llm, store, retriever) -> None:\n        self.llm = llm\n        self.retriever = retriever\n        self.store = store\n        qa_prompt = ChatPromptTemplate.from_template(AYA_AGENT_PROMPT)\n        self.chain = qa_prompt | llm\n\n    def invoke(self, question : str) -> AIMessage:\n\n        context = format_docs(self.retriever.invoke(question))\n        rag_output = self.chain.invoke({'question':question, 'context':context})\n        return rag_output\n\nclass AyaSupervisor(object):\n\n    def __init__(self, llm):\n\n        prompt = ChatPromptTemplate.from_template(AYA_SUPERVISOR_PROMPT)\n        self.chain = prompt | llm\n\n    def invoke(self, message : str) -> str:\n        output = self.chain.invoke(message)\n        return output.content\n\nclass AyaSummarizer(object):\n\n    def __init__(self, llm):\n\n        message_length_prompt = ChatPromptTemplate.from_template(AYA_SUMMARIZE_LENGTH_PROMPT)\n        self.length_chain = message_length_prompt | llm \n\n        prompt = ChatPromptTemplate.from_template(AYA_SUMMARIZER_PROMPT)\n        self.chain = prompt | llm\n\n    def invoke(self, message : str, agent : UserAgent) -> str:\n\n        length = self.length_chain.invoke(message)\n\n        try:\n            length = int(length.content.strip())\n        except:\n            length = 0\n\n        chat_history = agent.chat_history\n\n        if length == 0:\n            messages_to_summarize = [chat_history[i].content for i in range(len(chat_history))]\n        else:\n            messages_to_summarize = [chat_history[i].content for i in range(min(len(chat_history), length))]\n\n        print(length)\n        print(messages_to_summarize)\n\n        messages_to_summarize = \"\\n \".join(messages_to_summarize)\n\n        output = self.chain.invoke(messages_to_summarize)\n        output_content = output.content \n\n        print(output_content)\n\n        return output_content\n```", "```py\n[High level task definition] You are an AI assistant that answers user's questions... \n\n[List of specific constraints related to the response]\nObey the following rules : \n1\\. ....\n\n[Providing context/user input]\nMessage : \n```", "```py\nYou are a {user_language} translator, translating a conversation between work colleagues. Translate the message provided by the user into {user_language}. \n\nObey the following rules : \n1\\. Only translate the text thats written after 'Message:' and nothing else\n2\\. If the text is already in {user_language} then return the message as it is.\n3\\. Return only the translated text\n4\\. Ensure that your translation uses formal language\n\nMessage:\n{message}\n```", "```py\nclass ChatMessage(object):\n\n    def __init__(self, message : BaseMessage, sender : str = None):\n        self.message = message\n        self.sender = sender\n        self.content = message.content\n\n    def __repr__(self) -> str:\n        return f\"{self.sender} | {self.content}\"\n```", "```py\ndef reducer(a : list, b : list | str ) -> list:\n\n    if type(b) == list: \n        return a + b\n    else:\n        return a\n\nclass AgentState(TypedDict):\n    messages: Annotated[Sequence[ChatMessage], reducer]\n```"]