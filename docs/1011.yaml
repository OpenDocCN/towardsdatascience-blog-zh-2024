- en: Label Studio Customized Backend for Semiautomatic Image Segmentation Labeling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Label Studio定制化后端用于半自动化图像分割标注
- en: 原文：[https://towardsdatascience.com/label-studio-customized-backend-for-semiautomatic-image-segmentation-labeling-324c2310d756?source=collection_archive---------6-----------------------#2024-04-20](https://towardsdatascience.com/label-studio-customized-backend-for-semiautomatic-image-segmentation-labeling-324c2310d756?source=collection_archive---------6-----------------------#2024-04-20)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/label-studio-customized-backend-for-semiautomatic-image-segmentation-labeling-324c2310d756?source=collection_archive---------6-----------------------#2024-04-20](https://towardsdatascience.com/label-studio-customized-backend-for-semiautomatic-image-segmentation-labeling-324c2310d756?source=collection_archive---------6-----------------------#2024-04-20)
- en: Customized backend; GCP Deployment; Data Versioning with GCS Integration
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定制化后端；GCP部署；通过GCS集成进行数据版本控制
- en: '[](https://medium.com/@AlisonYuhanYao?source=post_page---byline--324c2310d756--------------------------------)[![Alison
    Yuhan Yao](../Images/c862182d1b3c549dcf1906ca04038b2a.png)](https://medium.com/@AlisonYuhanYao?source=post_page---byline--324c2310d756--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--324c2310d756--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--324c2310d756--------------------------------)
    [Alison Yuhan Yao](https://medium.com/@AlisonYuhanYao?source=post_page---byline--324c2310d756--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@AlisonYuhanYao?source=post_page---byline--324c2310d756--------------------------------)[![Alison
    Yuhan Yao](../Images/c862182d1b3c549dcf1906ca04038b2a.png)](https://medium.com/@AlisonYuhanYao?source=post_page---byline--324c2310d756--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--324c2310d756--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--324c2310d756--------------------------------)
    [Alison Yuhan Yao](https://medium.com/@AlisonYuhanYao?source=post_page---byline--324c2310d756--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--324c2310d756--------------------------------)
    ·13 min read·Apr 20, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--324c2310d756--------------------------------)
    ·13分钟阅读·2024年4月20日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/afe12f776d93863b6c22347955c1cdc8.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/afe12f776d93863b6c22347955c1cdc8.png)'
- en: Image by Author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: Table of Contents
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录
- en: · [Introduction](#202a)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: · [介绍](#202a)
- en: · [Overview](#d792)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: · [概览](#d792)
- en: ∘ [Goal](#2329)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [目标](#2329)
- en: ∘ [Why semiautomatic?](#b71f)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [为什么是半自动化？](#b71f)
- en: ∘ [Entering Label Studio](#d3f4)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [进入Label Studio](#d3f4)
- en: ∘ [1 frontend + 2 backends](#5a72)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [1前端 + 2后端](#5a72)
- en: · [Implementation (Local)](#4dc5)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: · [实现（本地）](#4dc5)
- en: ∘ [1\. Install git and docker & download backend code](#e769)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [1. 安装git和docker并下载后端代码](#e769)
- en: ∘ [2\. Set up frontend to get access token](#fa97)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [2. 设置前端以获取访问令牌](#fa97)
- en: ∘ [3\. Set up backend containers](#4cc0)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [3. 设置后端容器](#4cc0)
- en: ∘ [4\. Connect containers](#f7ab)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [4. 连接容器](#f7ab)
- en: ∘ [5\. Happy labeling!](#763a)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [5. 快乐标注！](#763a)
- en: · [GCP Deployment](#8783)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: · [GCP部署](#8783)
- en: ∘ [1\. Select project/Create new project and set up billing account](#8b11)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [1. 选择项目/创建新项目并设置账单账户](#8b11)
- en: ∘ [2\. Create VM instance](#a1b4)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [2. 创建虚拟机实例](#a1b4)
- en: ∘ [3\. Set up VM environment](#cf45)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [3. 设置虚拟机环境](#cf45)
- en: ∘ [4\. Follow previous section & set up everything on VM](#2ea2)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [4. 跟随前一部分，在虚拟机上设置所有内容](#2ea2)
- en: · [GCS Integration](#f815)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: · [GCS集成](#f815)
- en: ∘ [1\. Set up GCS buckets](#4329)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [1. 设置GCS存储桶](#4329)
- en: ∘ [2\. Create & set up service account key](#84f3)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [2. 创建并设置服务账户密钥](#84f3)
- en: ∘ [3\. Rebuild backend containers](#2e13)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [3. 重建后端容器](#2e13)
- en: ∘ [4\. SDK upload images from source bucket](#3d43)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [4. SDK从源存储桶上传图像](#3d43)
- en: ∘ [5\. Set up Target Storage](#165a)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ∘ [5. 设置目标存储](#165a)
- en: · [Acknowledgement](#cc13)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: · [致谢](#cc13)
- en: · [References](#cb81)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: · [参考资料](#cb81)
- en: Introduction
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Creating training data for image segmentation tasks remains a challenge for
    individuals and small teams. And if you are a student researcher like me, finding
    a cost-efficient way is especially important. In this post, I will talk about
    one solution that I used in [my capstone project](https://seas.harvard.edu/news/2024/05/masters-student-capstone-spotlight-ai-fashion)
    where a team of 9 people successfully labeled 400+ images within a week.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为图像分割任务创建训练数据仍然是个人和小团队面临的一大挑战。如果你像我一样是学生研究者，找到一种具有成本效益的方法尤其重要。在这篇文章中，我将分享我在[我的毕业设计项目](https://seas.harvard.edu/news/2024/05/masters-student-capstone-spotlight-ai-fashion)中使用的一种解决方案，我们一个9人团队在一周内成功标注了400+张图像。
- en: 'Thanks to Politecnico di Milano [Gianfranco Ferré Research Center](https://www.centroricercagianfrancoferre.it/home/FGFhome.php?lang=en),
    we obtained thousands of fashion runway show images from Gianfranco Ferré’s archival
    database. To explore, manage, enrich, and analyze the database, I employed *image
    segmentation* forsmarter cataloging and fine-grained research. Image segmentation
    of runway show photos also lays the foundation for creating informative textual
    descriptions for better search engine and text-to-image generative AI approaches.
    Therefore, this blog will detail:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了米兰理工大学的[吉安弗朗科·费雷研究中心](https://www.centroricercagianfrancoferre.it/home/FGFhome.php?lang=en)，我们从吉安弗朗科·费雷的档案数据库中获取了成千上万张时装T台秀的图像。为了探索、管理、丰富和分析这个数据库，我使用了*图像分割*进行更智能的分类和精细化研究。T台秀照片的图像分割也为创建信息丰富的文本描述打下了基础，从而提升搜索引擎和文本生成图像AI的效果。因此，本文将详细介绍：
- en: how to create your own backend with [label studio](https://labelstud.io/), on
    top of the existing [segment anything backend](https://labelstud.io/blog/get-started-using-segment-anything/),
    for semiautomatic image segmentation labeling,
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在现有的[Segment Anything后端](https://labelstud.io/blog/get-started-using-segment-anything/)基础上，使用[label
    studio](https://labelstud.io/)创建您自己的后端，以便进行半自动化图像分割标注，
- en: how to host on Google Cloud Platform for group collaboration, and
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Google Cloud Platform上托管以便进行小组协作，并且
- en: how to employ Google Cloud Storage buckets for data versioning.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Google Cloud Storage存储桶进行数据版本控制。
- en: Code in this post can be found in this [GitHub repo](https://github.com/AlisonYao/label-studio-customized-ml-backend).
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本文中的代码可以在这个[GitHub仓库](https://github.com/AlisonYao/label-studio-customized-ml-backend)找到。
- en: Overview
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Goal
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标
- en: Segment and identify the names and typologies of fashion clothing items in runway
    show images, as shown in the first image.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 分割并识别T台秀图像中时尚服装项目的名称和类型，如第一张图所示。
- en: Why semiautomatic?
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么是半自动化？
- en: Wouldn’t it be nice if a trained segmentation model out there could perfectly
    recognize every piece of clothing in the runway show images? Sadly, there isn’t
    one. There exist trained models tailored to fashion or clothing images but nothing
    can match our dataset perfectly. Each fashion designer has their own style and
    preferences for certain clothing items and their color and texture, so even if
    a segmentation model can be 60% accurate, we call it a win. Then, we still need
    humans in the loop to correct what the segmentation model got wrong.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某个训练好的分割模型能够完美地识别T台秀图像中的每一件服装，那该多好？遗憾的是，目前还没有这样的模型。虽然存在针对时尚或服装图像的训练模型，但没有一个能完美匹配我们的数据集。每个时装设计师都有自己对某些服装款式、颜色和纹理的偏好，因此即使一个分割模型的准确率达到60%，我们也算是胜利了。然后，我们仍然需要人工干预来纠正分割模型的错误。
- en: Entering Label Studio
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进入Label Studio
- en: 'Label Studio provides an open-source, customizable, and free-of-charge community
    version for various types of data labeling. One can create their own backend,
    so I can connect the Label Studio frontend to the trained segmentation model (mentioned
    above) backend for labelers to further improve upon the auto-predictions. Furthermore,
    Label Studio already has an interface that looks somewhat similar to Photoshop
    and a series of segmentation tools that can come in handy for us:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Label Studio 提供了一个开源、可定制并且免费的社区版本，适用于各种类型的数据标注。用户可以创建自己的后端，以便将Label Studio前端与上述提到的训练分割模型后端连接，从而让标注员进一步改进自动预测结果。此外，Label
    Studio已经具备了一个界面，类似于Photoshop，并且拥有一系列分割工具，可以为我们提供很大的帮助：
- en: Brush & eraser
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 刷子与橡皮擦
- en: '[Magic Wand](https://labelstud.io/tags/magicwand) for similar-color pixel selection'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于相似颜色像素选择的[魔法棒](https://labelstud.io/tags/magicwand)
- en: '[Segment Anything](https://labelstud.io/blog/get-started-using-segment-anything/)
    backend which harnesses the power of [Meta’s SAM](https://segment-anything.com/)
    and allows you to recognize the object within a bounding box you draw.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Segment Anything](https://labelstud.io/blog/get-started-using-segment-anything/)后端，利用[Meta的SAM](https://segment-anything.com/)的强大功能，允许你识别你绘制的边界框内的物体。'
- en: 1 frontend + 2 backends
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1个前端 + 2个后端
- en: So far, we want 2 backends to be connected to the frontend. One backend can
    do the segmentation prediction and the second can speed up labelers’ modification
    if the predictions are wrong.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们希望2个后端能够与前端连接。一个后端可以进行分割预测，第二个后端可以在预测错误时加速标注员的修改。
- en: '![](../Images/cd0d4db085c10c9080342331e55af566.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cd0d4db085c10c9080342331e55af566.png)'
- en: Image by Author
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: Implementation (Local)
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现（本地）
- en: Now, let’s fire up the app locally. That is, you will be able to use the app
    on your laptop or local machine completely for free but you are not able to invite
    your labeling team to collaborate on their laptops yet. We will talk about teamwork
    with GCP in the next section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在本地启动应用程序。也就是说，你可以在笔记本电脑或本地机器上完全免费地使用这个应用程序，但目前无法邀请你的标注团队在他们的笔记本上协作。我们将在下一节中讨论如何与GCP进行团队协作。
- en: 1\. Install git and docker & download backend code
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 安装 git 和 docker & 下载后端代码
- en: 'If you don’t have [git](https://git-scm.com/downloads) or [docker](https://www.docker.com/products/docker-desktop/)
    on your laptop or local machine yet, please install them. (Note: you can technically
    bypass the step of installing git if you download the zip file from [this GitHub
    repo](https://github.com/AlisonYao/label-studio-customized-ml-backend). If you
    do so, skip the following.)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的笔记本电脑或本地机器上还没有安装[git](https://git-scm.com/downloads)或[docker](https://www.docker.com/products/docker-desktop/)，请先安装它们。（注意：如果你从[这个
    GitHub 仓库](https://github.com/AlisonYao/label-studio-customized-ml-backend)下载了压缩包，理论上可以跳过安装git这一步。如果你这么做，请跳过下面的步骤。）
- en: Then, open up your terminal and clone [this repo](https://github.com/AlisonYao/label-studio-customized-ml-backend)
    to a directory you want.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开你的终端并将[这个仓库](https://github.com/AlisonYao/label-studio-customized-ml-backend)克隆到你想要的目录。
- en: '[PRE0]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you open up the `label-studio-customized-ml-backend` folder in your code
    editor, you can see the majority are adapted from the [Label Studio ML backend](https://github.com/HumanSignal/label-studio-ml-backend)
    repo, but this directory also contains frontend template code and SDK code adapted
    from [Label Studio SDK](https://github.com/HumanSignal/label-studio-sdk).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在代码编辑器中打开`label-studio-customized-ml-backend`文件夹，你会看到大部分代码都改编自[Label Studio
    ML 后端](https://github.com/HumanSignal/label-studio-ml-backend)仓库，但这个目录还包含了改编自[Label
    Studio SDK](https://github.com/HumanSignal/label-studio-sdk)的前端模板代码和SDK代码。
- en: 2\. Set up frontend to get access token
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 设置前端以获取访问令牌
- en: 'Following the official guidelines of [segment anything](https://labelstud.io/blog/get-started-using-segment-anything/),
    do the following in your terminal:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 按照[segment anything](https://labelstud.io/blog/get-started-using-segment-anything/)的官方指南，在终端中执行以下操作：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then, open your browser and type [http://0.0.0.0:8080/](http://0.0.0.0:8080/)
    and you will see the frontend of Label Studio. Proceed to sign up with your email
    address. Now, there is no project yet so we need to create our first project by
    clicking **Create Project**. Create a name and description (optional) for your
    project.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接着，打开浏览器，输入[http://0.0.0.0:8080/](http://0.0.0.0:8080/)，你将看到Label Studio的前端界面。继续使用你的电子邮件地址注册。现在没有项目，所以我们需要通过点击**创建项目**来创建我们的第一个项目。为你的项目创建一个名称和描述（可选）。
- en: '![](../Images/d88cff94b8c3228e822bd745514700f6.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d88cff94b8c3228e822bd745514700f6.png)'
- en: Image by Author
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: Upload some images locally. (We will talk about how to use cloud storage later.)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 本地上传一些图片。（稍后我们将讨论如何使用云存储。）
- en: '![](../Images/60de7269242fb8747a3f027d848404fe.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/60de7269242fb8747a3f027d848404fe.png)'
- en: Image by Author
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: For Labeling Setup, click on **Custom template** on the left and copy-paste
    the HTML code from the `label-studio-customized-ml-backend/label_studio_frontend/view.html`
    file. You do not need the four lines of Headers if you don’t want to show image
    metadata in the labeling interface. Feel free to modify the code here to your
    need or click **Visual** to add or delete labels.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于标注设置，点击左侧的**自定义模板**，并从`label-studio-customized-ml-backend/label_studio_frontend/view.html`文件中复制粘贴HTML代码。如果你不想在标注界面显示图像元数据，可以不需要那四行Header代码。你可以根据需要修改此代码，或者点击**可视化**来添加或删除标签。
- en: '![](../Images/46b0cded775343e89ccd3183fcff4804.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/46b0cded775343e89ccd3183fcff4804.png)'
- en: Image by Author
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: Now, click **Save** and your labeling interface should be ready.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击**保存**，你的标注界面应该准备好了。
- en: '![](../Images/00078d62a35d98139f516039dd133850.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/00078d62a35d98139f516039dd133850.png)'
- en: Image by Author
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: On the top right, click on the user setting icon and click **Account & Setting**
    and then you should be able to copy your access token.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在右上角，点击用户设置图标，然后点击**账户与设置**，你应该能够复制你的访问令牌。
- en: '![](../Images/7514cd7d8f931d1ea809c810d84ecb77.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7514cd7d8f931d1ea809c810d84ecb77.png)'
- en: Image by Author
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: 3\. Set up backend containers
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 设置后端容器
- en: In the `label-studio-customized-ml-backend` directory, there are many many backends
    thanks to the Label Studio developers. We will be using the customized `./segmentation`
    backend for segmentation prediction (container 1) and the `./label_studio_ml/examples/segment_anything_model`
    for faster labeling (container 2). The former will use port 7070 and the latter
    will use port 9090, making it easy to distinguish from the frontend port 8080.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`label-studio-customized-ml-backend`目录中，感谢Label Studio开发者，里面有许多后端。我们将使用定制的`./segmentation`后端进行分割预测（容器1），以及`./label_studio_ml/examples/segment_anything_model`进行更快速的标注（容器2）。前者将使用7070端口，后者将使用9090端口，这样可以与前端的8080端口区分开来。
- en: Now, paste your access token to the 2 `docker-compose.yml` files in `./segmentation`and
    `./label_studio_ml/examples/segment_anything_model` folders.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将你的访问令牌粘贴到`./segmentation`和`./label_studio_ml/examples/segment_anything_model`文件夹中的2个`docker-compose.yml`文件中。
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open up a new terminal and you cd into the `segment_anything_model` directory
    as you did before. Then, fire up the segment anything container.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个新的终端，像之前那样进入`segment_anything_model`目录，然后启动分割任何物体容器。
- en: '[PRE3]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Then, open up another new terminal cd into the `segmentation` directory and
    fire up the segmentation prediction container.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，打开另一个新的终端，进入`segmentation`目录，并启动分割预测容器。
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As of now, we have successfully started all 3 containers and you can double-check.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经成功启动了所有3个容器，你可以再次检查确认。
- en: '![](../Images/ee9e5a21a35b9de9be3eef35678a6ae0.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ee9e5a21a35b9de9be3eef35678a6ae0.png)'
- en: Image by Author
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: 4\. Connect containers
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 连接容器
- en: Before, what we did with the access token was helping us connect containers
    already, so we are almost done. Now, go to the frontend you started a while back
    and click **Settings** in the top right corner. Click **Machine Learning** on
    the left and click **Add Model**.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们通过访问令牌连接了容器，所以我们已经差不多完成了。现在，去打开你之前启动的前端，并点击右上角的**设置**。在左侧点击**机器学习**，然后点击**添加模型**。
- en: '![](../Images/a0e3b4bdce93b16aac9fd0b492838629.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a0e3b4bdce93b16aac9fd0b492838629.png)'
- en: Image by Author
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: Be sure to use the URL with port 9090 and toggle on interactive preannotation.
    Finish adding by clicking **Validate and Save**.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 确保使用带有9090端口的URL，并启用交互式预标注功能。点击**验证并保存**完成添加。
- en: Similarly, do the same with the segmentation prediction backend.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，执行相同操作来设置分割预测后端。
- en: '![](../Images/08cba82cb7ad1df12a89c296ab642d4d.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/08cba82cb7ad1df12a89c296ab642d4d.png)'
- en: Image by Author
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: Then, I like to toggle on **Retrieve predictions when loading a task automatically**.
    This way, every time we refresh the labeling page, the segmentation predictions
    will be automatically triggered and loaded.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我喜欢启用**加载任务时自动获取预测**。这样，每次刷新标注页面时，分割预测将会自动触发并加载。
- en: '![](../Images/a976abd4d9d05a89e50d3dec222ff5c3.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a976abd4d9d05a89e50d3dec222ff5c3.png)'
- en: Image by Author
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: 5\. Happy labeling!
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 快乐标注！
- en: Here is a demo of what you should see if you follow the steps above.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是按照上述步骤操作后，你应该看到的演示。
- en: Video by Author
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 视频来源：作者
- en: If we are not happy with the predictions of let’s say the skirt, we can delete
    the skirt and use the purple magic (segment anything) to quickly label it.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不满意预测结果，比如说裙子的部分，我们可以删除裙子并使用紫色魔法（分割任何物体）快速标注。
- en: Video By Author
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 视频来源：作者
- en: I’m sure you can figure out how to use the brush, eraser and magic wand on your
    own!
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信你能自己搞定刷子、橡皮擦和魔法棒的使用！
- en: If you are working solo, you are all set. But if you are wondering how to collaborate
    with your team without subscribing to Label Studio Enterprise, we need to host
    everything on cloud.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是单独工作，那就万事俱备。但如果你在考虑如何与团队协作而又不订阅Label Studio Enterprise，我们需要将一切托管到云端。
- en: GCP Deployment
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GCP部署
- en: I chose GCP because of education credits, but you can use any cloud of your
    choice. The point is to host the app on cloud so that anyone in your labeling
    team can access and use your Label Studio app.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择了GCP，因为有教育信用，但你可以使用任何你喜欢的云平台。关键是将应用托管在云端，这样你标注团队中的任何人都可以访问并使用你的Label Studio应用。
- en: '![](../Images/bf6b44162a3ee19a94f92d7803258117.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf6b44162a3ee19a94f92d7803258117.png)'
- en: Image by Author
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: 1\. Select project/Create new project and set up billing account
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 选择项目/创建新项目并设置账单账户
- en: Go to [GCP console](https://console.cloud.google.com/) and create a new project
    if you don’t have an existing one and set up the billing account information as
    required (unfortunately, cloud costs some money). Here, I will use the *Fashion*
    project I created to demonstrate.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有现有项目，可以前往[GCP控制台](https://console.cloud.google.com/)创建一个新项目，并按要求设置计费账户信息（不幸的是，云服务是收费的）。在这里，我将使用我创建的*Fashion*项目来演示。
- en: '![](../Images/322a3e2f68d88aa1a2334299bdecfd7e.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/322a3e2f68d88aa1a2334299bdecfd7e.png)'
- en: Image by Author
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: 2\. Create VM instance
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 创建虚拟机实例
- en: To have a public IP address for labeling teamwork, we need to create a Virtual
    Machine (VM) on GCP and host everything here. After going to the project you created
    or selected, search **compute engine** in the search bar and the first thing that
    pops up should be **VM instances**. Click **CREATE INSTANCE** and choose the setting
    based on your need.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给标注团队提供公共IP地址，我们需要在GCP上创建一个虚拟机（VM）并将一切部署到这里。进入你创建或选择的项目后，在搜索框中搜索**计算引擎**，第一个弹出的选项应该是**VM实例**。点击**创建实例**，根据需要选择设置。
- en: '![](../Images/29fec0320e4591a4fb473093aaadaaa0.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/29fec0320e4591a4fb473093aaadaaa0.png)'
- en: Image by Author
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: The default 10GB persistent disk will give you problems, so bump it up please.
    And more importantly, allow HTTP traffic.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的10GB持久磁盘会给你带来问题，所以请增加磁盘空间。另外，更重要的是，允许HTTP流量。
- en: '![](../Images/4faa2521bf8d60bbe9cbf68c1f90258b.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4faa2521bf8d60bbe9cbf68c1f90258b.png)'
- en: Image by Author
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: It is a bit painful to modify these settings later, so try to think it through
    before clicking CREATE.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后修改这些设置会有点麻烦，所以在点击创建之前，尽量先想清楚。
- en: 3\. Set up VM environment
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 设置虚拟机环境
- en: You can think of a VM as a computer somewhere in the cloud, similar to your
    laptop, but you can only ask it to do things via the terminal or command line.
    So now we need to set up everything on the VM the same way we set up everything
    locally (see previous section).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将虚拟机想象成云端的某台计算机，类似于你的笔记本电脑，但你只能通过终端或命令行要求它做事。所以现在，我们需要在虚拟机上像在本地一样设置所有内容（请参见上一部分）。
- en: Click SSH, authorize and open up the command line interface.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 点击SSH，授权并打开命令行界面。
- en: '![](../Images/d5bbbab654b31fbc557ccfd680ded68f.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d5bbbab654b31fbc557ccfd680ded68f.png)'
- en: Image by Author
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: Do routine update and install docker, docker compose, git and Python.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 进行常规更新，并安装docker、docker compose、git和Python。
- en: '[PRE5]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/edcc4f0fbdb9e232df1cc9de344fd89e.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/edcc4f0fbdb9e232df1cc9de344fd89e.png)'
- en: Image by Author
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: 4\. Follow previous section & set up everything on VM
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 按照上一部分的步骤，在虚拟机上设置所有内容
- en: 'Now, you can follow steps 1–4 in the previous section but there are some changes:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以按照上一部分的步骤1–4进行操作，但有一些变化：
- en: Add **sudo** when you have docker permission denied error.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你遇到docker权限被拒绝错误时，添加**sudo**。
- en: If you have data permission error, modify permission using something like `sudo
    chmod -R 777 mydata`. And then you should be able to run your frontend container.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果遇到数据权限错误，可以使用类似`sudo chmod -R 777 mydata`的命令来修改权限。然后你就应该能够运行前端容器了。
- en: The server is not at [http://0.0.0.0:8080](http://0.0.0.0:8080) anymore. Instead,
    swap 0.0.0.0 with the external IP address of your VM. An example is [http://34.1.1.87:8080/](http://34.1.1.87:8080/).
    You can find the external IP address next to the **SSH** button you clicked before.
    However, you probably still cannot access the frontend just yet. You need to search
    firewall on GCP console and click **Firewall (VPC network)** and then click **default-allow-http.**
    Now, change the setting to the following and you should be able to access the
    frontend.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器不再位于[http://0.0.0.0:8080](http://0.0.0.0:8080)。相反，将0.0.0.0替换为虚拟机的外部IP地址。一个例子是[http://34.1.1.87:8080/](http://34.1.1.87:8080/)。你可以在之前点击的**SSH**按钮旁边找到外部IP地址。然而，你可能仍然无法访问前端。你需要在GCP控制台搜索防火墙，然后点击**防火墙（VPC网络）**，接着点击**default-allow-http**。现在，修改设置如下，你就应该能够访问前端了。
- en: '![](../Images/5e236f1fbdef468fd80638526158c572.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5e236f1fbdef468fd80638526158c572.png)'
- en: Image by Author
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: 4\. When editing `docker-compose.yml` files, apart from copy-pasting access
    token, also modify the `LABEL_STUDIO_HOST`. Again, swap `host.docker.internal`
    with the VM external IP address. An example is [http://34.1.1.87:8080](http://34.1.1.87:8080)
    .
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 编辑`docker-compose.yml`文件时，除了复制粘贴访问令牌，还要修改`LABEL_STUDIO_HOST`。同样，将`host.docker.internal`替换为虚拟机的外部IP地址。一个例子是[http://34.1.1.87:8080](http://34.1.1.87:8080)。
- en: 5\. Similarly, when adding *Machine Learning* in the frontend settings, also
    use [http://34.1.1.87:9090](http://34.1.1.87:9090) and http://34.1.1.87:7070.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 同样，当在前端设置中添加*机器学习*时，也使用[http://34.1.1.87:9090](http://34.1.1.87:9090)和http://34.1.1.87:7070。
- en: You can then export your labeling results and tailor to your uses.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以导出你的标注结果并根据需要进行定制。
- en: If you only have a couple of images to label or you are fine with uploading
    images from local, by all means. But for my project, there are thousands of images,
    so I prefer using Google Cloud Storage to automate data transferring and data
    versioning.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只有几张图片需要标注，或者你愿意从本地上传图片，那完全没问题。但对于我的项目，有成千上万张图片，因此我更倾向于使用Google Cloud Storage来自动化数据传输和数据版本控制。
- en: GCS Integration
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GCS集成
- en: 1\. Set up GCS buckets
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 设置GCS存储桶
- en: 'Search bucket in the GCP console and navigate to Cloud Storage buckets. Create
    2 buckets: one with your images (source) and another empty (target). The second
    one will be populated later when you start labeling.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在GCP控制台中搜索存储桶并导航到Cloud Storage存储桶。创建2个存储桶：一个用于存放图片（源），另一个为空（目标）。第二个存储桶将在开始标注时填充数据。
- en: '![](../Images/e97e77b50ee154b4d579e394380d9b4d.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e97e77b50ee154b4d579e394380d9b4d.png)'
- en: Image by Author
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Then, following the [official documentation](https://labelstud.io/guide/storage.html#Google-Cloud-Storage),
    we need to set up cross-origin resource sharing (CORS) access to the buckets.
    Click **Activate Cloud Shell** on the top right, and run the following commands.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，根据[官方文档](https://labelstud.io/guide/storage.html#Google-Cloud-Storage)，我们需要为存储桶设置跨域资源共享（CORS）访问权限。点击右上角的**激活云终端**，然后运行以下命令。
- en: '[PRE6]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you want to set up data versioning for the labeling results, you can click
    on the bucket and turn on versioning in **PROTECTION**.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望为标注结果设置数据版本控制，可以点击存储桶并在**保护**中开启版本控制。
- en: '![](../Images/6d160e1c091107c4632ee9de5cd7168f.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6d160e1c091107c4632ee9de5cd7168f.png)'
- en: Image by Author
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 2\. Create & set up service account key
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 创建并设置服务账户密钥
- en: Chances are that you do not want your buckets to be public, then label studio
    needs authentication to have access to these images. Click **CREATE SERVICE ACCOUNT**
    and grant the role of **Storage Admin** so that we can read and write to the GCS
    buckets. You should be able to see this service account in the permissions list
    of the buckets as well.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能你不希望你的存储桶是公开的，那么Label Studio需要认证才能访问这些图片。点击**创建服务账户**，并授予**存储管理员**角色，这样我们就可以读写GCS存储桶。你应该能够在存储桶的权限列表中看到这个服务账户。
- en: '![](../Images/0103623a7369a95f066f2fb57f91ddcc.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0103623a7369a95f066f2fb57f91ddcc.png)'
- en: Image by Author
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Now, click on the newly created service account and click **KEYS**. Now add
    a new key and be sure to download the JSON file to somewhere safe.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击新创建的服务账户并点击**密钥**。接着添加一个新密钥，并确保将JSON文件下载到安全的地方。
- en: Now, open up your local terminal and encode the JSON file.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开你的本地终端并编码JSON文件。
- en: '[PRE7]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can see the random character and number string and copy it. We are now pasting
    it as metadata for the VM. Click on your VM, click **EDIT**, and add your custom
    metadata. For example, my key is GOOGLE_APPLICATION_CREDENTIALS_BASE64.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到随机的字符和数字字符串并复制它。现在我们将其作为元数据粘贴到虚拟机中。点击你的虚拟机，点击**编辑**，并添加你的自定义元数据。例如，我的键是GOOGLE_APPLICATION_CREDENTIALS_BASE64。
- en: '![](../Images/4f3dabdc2f3136e2737a1d001d537ecb.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4f3dabdc2f3136e2737a1d001d537ecb.png)'
- en: Image by Author
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: We will then decode the service account key for authentication in our Python
    code.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接着会解码服务账户密钥以便在Python代码中进行认证。
- en: 3\. Rebuild backend containers
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 重新构建后端容器
- en: Since we modified the `docker-compose.yml` files, we need to run the new script
    and rebuild the backend containers.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们修改了`docker-compose.yml`文件，因此需要运行新的脚本并重新构建后端容器。
- en: '[PRE8]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, you should see the new containers.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该能看到新的容器。
- en: '![](../Images/e87147432f7663230f802652dda96587.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e87147432f7663230f802652dda96587.png)'
- en: Image by Author
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 4\. SDK upload images from source bucket
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. SDK从源存储桶上传图片
- en: If you simply want to upload the images without metadata, you can skip this
    section and do the exact same thing as step 5 (see next). By metadata, I mean
    the useful information for each image on the labeling interface that might help
    with labeling more accurately.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是想上传图片而不带元数据，你可以跳过此部分，直接执行与第5步相同的操作（见下文）。所谓元数据，是指每张图片在标注界面上有用的信息，这些信息可能有助于更准确地进行标注。
- en: Based on the example from Label Studio SDK repo, you can modify what metadata
    and how you want to import in the `./label_studio_sdk/annotate_data_from_gcs.ipynb`
    file. After running the python notebook locally, you should be able to see your
    images and metadata on the frontend.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 基于Label Studio SDK仓库中的示例，您可以修改`./label_studio_sdk/annotate_data_from_gcs.ipynb`文件中的元数据内容以及导入方式。运行本地的Python笔记本后，您应该能在前端看到您的图片和元数据。
- en: '![](../Images/22af11b1076eee4891da4a6fda041c7b.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/22af11b1076eee4891da4a6fda041c7b.png)'
- en: Image by Author
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: And you should also see the Source Storage bucket in the settings. Do NOT click
    Sync Storage as it will sync directly from the bucket and mess up the metadata
    we imported.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该查看设置中的源存储桶。请勿点击同步存储（Sync Storage），因为它将直接从存储桶同步，可能会扰乱我们导入的元数据。
- en: '![](../Images/85750b44e221bca140385c71d927e2b8.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85750b44e221bca140385c71d927e2b8.png)'
- en: Image by Author
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: 5\. Set up Target Storage
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 设置目标存储
- en: Click **Add Target Storage**, and filling in the information accordingly. Copy-paste
    your service account key in the Google Application Credentials textbox and you
    are all set.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**添加目标存储**，并根据提示填写信息。将您的服务账户密钥复制粘贴到Google应用凭据文本框中，您就完成设置了。
- en: '![](../Images/0126e2fd1425ec034da10e4476c8780b.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0126e2fd1425ec034da10e4476c8780b.png)'
- en: Image by Author
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: Every time you click **Sync Storage** on the Target Cloud Storage, it will sync
    the labeling outcome in the format of text into the GCS bucket. After clicking
    sync once, the process should be trigger automatically when submitting labeling
    results, but please check if you need to manually sync from time to time just
    in case.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 每次您点击目标云存储中的**同步存储**时，它将把标注结果以文本格式同步到GCS存储桶中。点击同步一次后，提交标注结果时该过程应该会自动触发，但请检查是否需要定期手动同步。
- en: Happy labeling!
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 祝您标注愉快！
- en: Acknowledgement
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: It is my pleasure to be a part of [Data Shack 2024](https://sites.google.com/view/datashack-harvard-polimi/data-shack-2024?authuser=0)
    in collaboration with Politecnico di Milano [Gianfranco Ferré Research Center](https://www.centroricercagianfrancoferre.it/home/FGFhome.php?lang=en).
    I would like to thank Prof. [Pavlos Protopapas](https://medium.com/u/69c7cfe8dc8e?source=post_page---user_mention--324c2310d756--------------------------------)
    and Prof. Paola Bertola for your guidance and for making this project happen in
    the first place. I would like to thank [Chris Gumb](https://medium.com/u/afb3db007f0b?source=post_page---user_mention--324c2310d756--------------------------------)
    and Prof. [Marco Brambilla](https://medium.com/u/88b92e077317?source=post_page---user_mention--324c2310d756--------------------------------)
    for technical support and Prof. Federica Vacca and Dr. [Angelica Vandi](https://medium.com/u/e391affa9647?source=post_page---user_mention--324c2310d756--------------------------------)
    for domain knowledge expertise in fashion. Finally, I would like to thank my teammates
    [Luis Henrique Simplicio Ribeiro](https://medium.com/u/48b7440feb38?source=post_page---user_mention--324c2310d756--------------------------------),
    [Lorenzo Campana](https://medium.com/u/10478e152ee4?source=post_page---user_mention--324c2310d756--------------------------------)
    and Vittoria Corvetti for your help and for figuring things out with me along
    the way. I also want to give a round of applause to Emanuela Di Stefano, Jacopo
    Sileo, Bruna Pio Da Silva Rigato, Martino Fois, Xinxi Liu, and Ilaria Trame for
    your continued support and hard work.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 很高兴能作为一部分参与[Data Shack 2024](https://sites.google.com/view/datashack-harvard-polimi/data-shack-2024?authuser=0)，与米兰理工大学[Gianfranco
    Ferré研究中心](https://www.centroricercagianfrancoferre.it/home/FGFhome.php?lang=en)合作。我要感谢[Pavlos
    Protopapas教授](https://medium.com/u/69c7cfe8dc8e?source=post_page---user_mention--324c2310d756--------------------------------)和Paola
    Bertola教授的指导，以及感谢您们使这个项目得以启动。我要感谢[Chris Gumb](https://medium.com/u/afb3db007f0b?source=post_page---user_mention--324c2310d756--------------------------------)和Marco
    Brambilla教授的技术支持，以及Federica Vacca教授和[Angelica Vandi博士](https://medium.com/u/e391affa9647?source=post_page---user_mention--324c2310d756--------------------------------)在时尚领域的专业知识支持。最后，我要感谢我的队友[Luis
    Henrique Simplicio Ribeiro](https://medium.com/u/48b7440feb38?source=post_page---user_mention--324c2310d756--------------------------------)、[Lorenzo
    Campana](https://medium.com/u/10478e152ee4?source=post_page---user_mention--324c2310d756--------------------------------)和Vittoria
    Corvetti在过程中给予的帮助以及与我一起解决问题。还要特别感谢Emanuela Di Stefano、Jacopo Sileo、Bruna Pio Da
    Silva Rigato、Martino Fois、Xinxi Liu和Ilaria Trame的持续支持和辛勤工作。
- en: References
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 11655 Gianfranco Ferré, Ready-To-Wear Collection, Fall-Winter 2004\. Courtesy
    of Gianfranco Ferré Research Center
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 11655 Gianfranco Ferré，成衣系列，2004年秋冬季。由Gianfranco Ferré研究中心提供。
- en: 13215 Gianfranco Ferré, Ready-To-Wear Collection, Spring-Summer 1991\. Courtesy
    of Gianfranco Ferré Research Center
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13215 Gianfranco Ferré，成衣系列，春夏 1991\. 感谢 Gianfranco Ferré 研究中心提供。
- en: Thank you for reading! I hope this blog has been helpful to you.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！希望这篇博客对你有所帮助。
- en: Code in this post can be found in this [GitHub repo](https://github.com/AlisonYao/label-studio-customized-ml-backend).
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本文中的代码可以在这个[GitHub 仓库](https://github.com/AlisonYao/label-studio-customized-ml-backend)找到。
