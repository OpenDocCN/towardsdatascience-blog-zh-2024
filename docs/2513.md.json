["```py\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nproduct_df= pd.read_csv('product_data.csv') # This is a set of artificially generated data\nproduct_df.head()\n```", "```py\n# Select numeric columns and create corresponding scaled column names\nnumeric_cols = product_df.select_dtypes(include=['float64', 'int64']).columns\nscaled_cols = ['scaled_' + col for col in numeric_cols]\n\n# Apply Z-Score Normalisation and then Min-Max scaling in one go\nscaler = MinMaxScaler(feature_range=(-1, 1))\nproduct_df[scaled_cols] = scaler.fit_transform(StandardScaler().fit_transform(product_df[numeric_cols]))\n\nproduct_df.head()\n```", "```py\n# Example user-provided weights (this can be dynamic based on user input)\nuser_weights = {\n    'scaled_conversion_rate': 0.14,\n    'scaled_sales_gross_amount': 0.14,\n    'scaled_gross_margin': 0.14,\n    'scaled_customer_acquisition_cost': -0.14, #notice negative weight here\n    'scaled_fulfillment_costs_per_unit': -0.14, #notice negative weight here\n    'scaled_return_rate': -0.14, #notice negative weight here\n    'scaled_repeat_purchase_rate': 0.14\n}\n\n# Calculate weighted composite score\nproduct_df['weighted_composite_score'] = sum(product_df[col] * weight for col, weight in user_weights.items()) / sum(user_weights.values())\n```"]