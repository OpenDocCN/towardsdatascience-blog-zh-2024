["```py\npip install crewai\npip install 'crewai[tools]'\n```", "```py\nollama run llama3\n```", "```py\nFROM llama3\n\n# set parameters\nPARAMETER temperature 0.5\nPARAMETER stop Result\n```", "```py\n#!/bin/zsh\n\n# define variables\nmodel_name=\"llama3\"\ncustom_model_name=\"crewai-llama3\"\n\n# load the base model\nollama pull $model_name\n\n# create the model file\nollama create $custom_model_name -f ./Llama3ModelFile\n```", "```py\nchmod +x ./llama3_setup.sh\n./llama3_setup.sh\n```", "```py\nos.environ[\"OPENAI_API_BASE\"]='http://localhost:11434/v1'\n\nos.environ[\"OPENAI_MODEL_NAME\"]='crewai-llama3' \n# custom_model_name from the bash script\n\nos.environ[\"OPENAI_API_KEY\"] = \"NA\"\n```", "```py\ndatabase_specialist_agent = Agent(\n  role = \"Database specialist\",\n  goal = \"Provide data to answer business questions using SQL\",\n  backstory = '''You are an expert in SQL, so you can help the team \n  to gather needed data to power their decisions. \n  You are very accurate and take into account all the nuances in data.''',\n  allow_delegation = False,\n  verbose = True\n)\n\ntech_writer_agent = Agent(\n  role = \"Technical writer\",\n  goal = '''Write engaging and factually accurate technical documentation \n    for data sources or tools''',\n  backstory = ''' \n  You are an expert in both technology and communications, so you can easily explain even sophisticated concepts.\n  You base your work on the factual information provided by your colleagues.\n  Your texts are concise and can be easily understood by a wide audience. \n  You use professional but rather an informal style in your communication.\n  ''',\n  allow_delegation = False,\n  verbose = True\n)\n```", "```py\nCH_HOST = 'http://localhost:8123' # default address \n\ndef get_clickhouse_data(query, host = CH_HOST, connection_timeout = 1500):\n  r = requests.post(host, params = {'query': query}, \n    timeout = connection_timeout)\n  if r.status_code == 200:\n      return r.text\n  else: \n      return 'Database returned the following error:\\n' + r.text \n```", "```py\nfrom crewai_tools import BaseTool\n\nclass DatabaseQuery(BaseTool):\n  name: str = \"Database Query\"\n  description: str = \"Returns the result of SQL query execution\"\n\n  def _run(self, sql_query: str) -> str:\n      # Implementation goes here\n      return get_clickhouse_data(sql_query)\n\ndatabase_query_tool = DatabaseQuery()\n```", "```py\ntable_description_task = Task(\n  description = '''Provide the comprehensive overview for the data \n  in table {table}, so that it's easy to understand the structure \n  of the data. This task is crucial to put together the documentation \n  for our database''',\n  expected_output = '''The comprehensive overview of {table} in the md format. \n  Include 2 sections: columns (list of columns with their types) \n  and examples (the first 30 rows from table).''',\n  tools = [database_query_tool],\n  agent = database_specialist_agent\n)\n\ntable_documentation_task = Task(\n  description = '''Using provided information about the table, \n  put together the detailed documentation for this table so that \n  people can use it in practice''',\n  expected_output = '''Well-written detailed documentation describing \n  the data scheme for the table {table} in markdown format, \n  that gives the table overview in 1-2 sentences then then \n  describes each columm. Structure the columns description \n  as a markdown table with column name, type and description.''',\n  tools = [],\n  output_file=\"table_documentation.md\",\n  agent = tech_writer_agent\n)\n```", "```py\ncrew = Crew(\n  agents = [database_specialist_agent, tech_writer_agent],\n  tasks = [table_description_task,  table_documentation_task],\n  verbose = 2\n)\n\nresult = crew.kickoff({'table': 'ecommerce_db.users'})\n```", "```py\nfrom IPython.display import Markdown\nMarkdown(result)\n```", "```py\nCH_HOST = 'http://localhost:8123' # default address \n\ndef get_clickhouse_data(query, host = CH_HOST, connection_timeout = 1500):\n  r = requests.post(host, params = {'query': query.strip('\"').strip(\"'\")}, \n    timeout = connection_timeout)\n  if r.status_code == 200:\n    return r.text\n  else: \n    return 'Database returned the following error:\\n' + r.text\n```", "```py\n tech_writer_agent = Agent(\n  role = \"Technical writer\",\n  goal = '''Write engaging and factually accurate technical documentation \n  for data sources or tools''',\n  backstory = ''' \n  You are an expert in both technology and communications, so you \n  can easily explain even sophisticated concepts.\n  Your texts are concise and can be easily understood by wide audience. \n  You use professional but rather informal style in your communication.\n  You base your work on the factual information provided by your colleagues. \n  You stick to the facts in the documentation and use ONLY \n  information provided by the colleagues not adding anything.''',\n  allow_delegation = False,\n  verbose = True\n)\n\ntable_documentation_task = Task(\n  description = '''Using provided information about the table, \n  put together the detailed documentation for this table so that \n  people can use it in practice''',\n  expected_output = '''Well-written detailed documentation describing \n  the data scheme for the table {table} in markdown format, \n  that gives the table overview in 1-2 sentences then then \n  describes each columm. Structure the columns description \n  as a markdown table with column name, type and description.\n  The documentation is based ONLY on the information provided \n  by the database specialist without any additions.''',\n  tools = [],\n  output_file = \"table_documentation.md\",\n  agent = tech_writer_agent\n)\n```", "```py\nSELECT column_name \nFROM information_schema.columns \nWHERE table_name = 'users'\n```", "```py\nclass TableStructure(BaseTool):\n  name: str = \"Table structure\"\n  description: str = \"Returns the list of columns and their types\"\n\n  def _run(self, table: str) -> str:\n    table = table.strip('\"').strip(\"'\")\n    return get_clickhouse_data(\n      'describe {table} format TabSeparatedWithNames'\\\n        .format(table = table)\n    )\n\nclass TableExamples(BaseTool):\n  name: str = \"Table examples\"\n  description: str = \"Returns the first N rows from the table\"\n\n  def _run(self, table: str, n: int = 30) -> str:\n    table = table.strip('\"').strip(\"'\")\n    return get_clickhouse_data(\n      'select * from {table} limit {n} format TabSeparatedWithNames'\n        \\.format(table = table, n = n)\n    )\n\ntable_structure_tool = TableStructure()\ntable_examples_tool = TableExamples()\n```", "```py\nTask output: This final answer provides a detailed and factual description \nof the ecommerce_db.users table structure, including column names, types, \nand descriptions. The documentation adheres to the provided information \nfrom the database specialist without any additions or modifications.\n```", "```py\nqa_specialist_agent = Agent(\n  role = \"Quality Assurance specialist\",\n  goal = \"\"\"Ensure the highest quality of the documentation we provide \n  (that it's correct and easy to understand)\"\"\",\n  backstory = '''\n  You work as a Quality Assurance specialist, checking the work \n  from the technical writer and ensuring that it's inline \n  with our highest standards.\n  You need to check that the technical writer provides the full complete \n  answers and make no assumptions. \n  Also, you need to make sure that the documentation addresses \n  all the questions and is easy to understand.\n  ''',\n  allow_delegation = False,\n  verbose = True\n)\n```", "```py\nqa_review_task = Task(\n  description = '''\n  Review the draft documentation provided by the technical writer.\n  Ensure that the documentation fully answers all the questions: \n  the purpose of the table and its structure in the form of table. \n  Make sure that the documentation is consistent with the information \n  provided by the database specialist. \n  Double check that there are no irrelevant comments in the final version \n  of documentation.\n  ''',\n  expected_output = '''\n  The final version of the documentation in markdown format \n  that can be published. \n  The documentation should fully address all the questions, be consistent \n  and follow our professional but informal tone of voice.\n  ''',\n  tools = [],\n  context = [table_description_task, table_documentation_task],\n  output_file=\"checked_table_documentation.md\",\n  agent = qa_specialist_agent\n)\n```", "```py\nfull_crew = Crew(\n  agents=[database_specialist_agent, tech_writer_agent, qa_specialist_agent],\n  tasks=[table_description_task,  table_documentation_task, qa_review_task],\n  verbose = 2,\n  memory = False # don't work with Llama\n)\n\nfull_result = full_crew.kickoff({'table': 'ecommerce_db.users'})\n```", "```py\nos.environ[\"OPENAI_MODEL_NAME\"] = 'gpt-4o'  \nos.environ[\"OPENAI_API_KEY\"] = config['OPENAI_API_KEY'] # your OpenAI key\n```", "```py\nfull_crew = Crew(\n  agents = [database_specialist_agent, tech_writer_agent, qa_specialist_agent],\n  tasks = [table_description_task,  table_documentation_task, qa_review_task],\n  verbose = 2,\n  memory = True \n)\n\nfull_result = full_crew.kickoff({'table': 'ecommerce_db.users'})\n```", "```py\nThought: I need to review the provided draft documentation to ensure it \nfully answers all the questions and is complete, correct, and easy \nto understand. Specifically, I need to ensure that it explains the purpose \nof the table, its structure, and includes relevant examples without \nany irrelevant comments.\n\nFirst, I will compare the two drafts to identify any discrepancies and \nmissing information. Then, I will verify the accuracy and completeness of \nthe information provided.\n\n**Comparison:**\n1\\. **Introduction:**\n   - First draft: Includes an introduction and examples.\n   - Second draft: Adds a more detailed introduction about the purpose and importance of the table.\n\n2\\. **Columns:**\n   - Both drafts have the same column structure and descriptions.\n\n3\\. **Additional Information:**\n   - Both drafts include similar additional information, but the second draft is more concise.\n\n4\\. **Examples:**\n   - The first draft includes examples, which are missing in the second draft.\n\n5\\. **Final Checks:**\n   - Ensure there are no irrelevant comments.\n   - Verify consistency with information provided by the database specialist.\n\nAction: Ask question to co-worker\nAction Input: {\n\"question\": \"Can you confirm the accuracy of the provided column descriptions \n  and examples for the `ecommerce_db.users` table?\", \n\"context\": \"We are finalizing the documentation for the `ecommerce_db.users`\n table. The table includes columns `user_id`, `country`, `is_active`, and \n  `age`. Here are the examples provided:\n\n  | user_id | country        | is_active | age |\n  |---------|----------------|-----------|-----|\n  | 1000001 | United Kingdom | 0         | 70  |\n  | 1000002 | France         | 1         | 87  |\n  | 1000003 | France         | 1         | 88  |\n  | 1000004 | Germany        | 1         | 25  |\n  | 1000005 | Germany        | 1         | 48  |\n  | 1000006 | France         | 1         | 78  |\n  | 1000007 | Netherlands    | 1         | 65  |\n  | 1000008 | Germany        | 1         | 31  |\n  | 1000009 | Germany        | 1         | 66  |\n  | 1000010 | Germany        | 1         | 73  |\", \n\"coworker\": \"database specialist\"}\n\n<-- omitted logs from the database specialist -->\n\nBased on the provided context and examples for the `ecommerce_db.users` table, \nthe column descriptions and examples appear accurate. Here are the details:\n- `user_id`: This column contains a unique identifier for each user. \n  The provided examples (e.g., 1000001, 1000002) align with this description \n  as they are unique numeric identifiers.\n\n- `country`: This column specifies the country of the user. The provided \n  examples (e.g., United Kingdom, France, Germany, Netherlands) are \n  all valid country names.\n\n- `is_active`: This column indicates whether the user is active (1) or not (0). The provided examples (e.g., 0, 1) correctly represent this binary status.\n\n- `age`: This column shows the age of the user. The provided examples (e.g., 70, \n  87, 88, 25, 48, 78, 65, 31, 66, 73) are all valid ages.\n\nTherefore, the column descriptions and examples provided for the \n `ecommerce_db.users` table are accurate and meet the expected criteria.\n\nThought: Based on the observation from the database specialist, \nthe column descriptions and examples provided for the `ecommerce_db.users` \ntable are accurate. Now, I will consolidate the best elements from both drafts,\n ensuring the documentation is complete, clear, and free of irrelevant comments.\n\nAction: Finalize the documentation in markdown format, incorporating \nthe detailed introduction, examples, and ensuring the tone is professional \nbut informal.\n```", "```py\nfrom crewai_tools import DirectoryReadTool, FileReadTool\n\ndocumentation_directory_tool = DirectoryReadTool(\n    directory = '~/crewai_project/ecommerce_documentation')\n\nbase_file_read_tool = FileReadTool()\n```", "```py\nfrom crewai_tools import BaseTool\n\nclass FileReadToolUPD(BaseTool):\n    name: str = \"Read a file's content\"\n    description: str = \"A tool that can be used to read a file's content.\"\n\n    def _run(self, file_path: str) -> str:\n        # Implementation goes here\n        return base_file_read_tool._run(file_path = file_path.strip('\"').strip(\"'\"))\n\nfile_read_tool = FileReadToolUPD()\n```", "```py\ndata_support_agent = Agent(\n  role = \"Senior Data Support Agent\",\n  goal = \"Be the most helpful support for you colleagues\",\n  backstory = '''You work as a support for data-related questions \n  in the company. \n  Even though you're a big expert in our data warehouse, you double check \n  all the facts in documentation. \n  Our documentation is absolutely up-to-date, so you can fully rely on it \n  when answering questions (you don't need to check the actual data \n  in database).\n  Your work is very important for the team success. However, remember \n  that examples of table rows don't show all the possible values. \n  You need to ensure that you provide the best possible support: answering \n  all the questions, making no assumptions and sharing only the factual data.\n  Be creative try your best to solve the customer problem. \n  ''',\n  allow_delegation = False,\n  verbose = True\n)\n\nqa_support_agent = Agent(\n  role = \"Support Quality Assurance Agent\",\n  goal = \"\"\"Ensure the highest quality of the answers we provide \n  to the customers\"\"\",\n  backstory = '''You work as a Quality Assurance specialist, checking the work \n  from support agents and ensuring that it's inline with our highest standards.\n  You need to check that the agent provides the full complete answers \n  and make no assumptions. \n  Also, you need to make sure that the documentation addresses all \n  the questions and is easy to understand.\n  ''',\n  allow_delegation = False,\n  verbose = True\n)\n\ndraft_data_answer = Task(\n  description = '''Very important customer {customer} reached out to you \n  with the following question:\n  ```", "```py\n\n  Your task is to provide the best answer to all the points in the question \n  using all available information and not making any assumprions. \n  If you don't have enough information to answer the question, just say \n  that you don't know.''',\n  expected_output = '''The detailed informative answer to the customer's \n  question that addresses all the point mentioned. \n  Make sure that answer is complete and stict to facts \n  (without any additional information not based on the factual data)''',\n  tools = [documentation_directory_tool, file_read_tool], \n  agent = data_support_agent\n)\n\nanswer_review = Task(\n  description = '''\n  Review the draft answer provided by the support agent.\n  Ensure that the it fully answers all the questions mentioned \n  in the initial inquiry. \n  Make sure that the answer is consistent and doesn't include any assumptions.\n  ''',\n  expected_output = '''\n  The final version of the answer in markdown format that can be shared \n  with the customer. \n  The answer should fully address all the questions, be consistent \n  and follow our professional but informal tone of voice. \n  We are very chill and friendly company, so don't forget to include \n  all the polite phrases.\n  ''',\n  tools = [], \n  agent = qa_support_agent\n)\n\nqna_crew = Crew(\n  agents = [data_support_agent, qa_support_agent],\n  tasks = [draft_data_answer,  answer_review],\n  verbose = 2,\n  memory = False # don't work with Llama\n)\n```", "```py\nresult = qna_crew.kickoff(\n  {'customer': \"Max\", \n   'question': \"\"\"Hey team, I hope you're doing well. I need to find \n    the numbers before our CEO presentation tomorrow, so I will really \n    appreciate your help.\n    I need to calculate the number of sessions from our Windows users in 2023\\. I've tried to find the table with such data in our data warehouse, but wasn't able to. \n    Do you have any ideas whether we store the needed data somewhere, \n    so that I can query it? \"\"\"\n  }\n)\n```", "```py\n**Hello Max,**\n\nThank you for reaching out with your question! I'm happy to help you \nfind the number of sessions from Windows users in 2023\\. \nAfter reviewing our documentation, I found that we do store data \nrelated to sessions and users in our ecommerce database, specifically in \nthe `ecommerce_db.sessions` table.\n\nTo answer your question, I can provide you with a step-by-step guide \non how to query this table using SQL. First, you can use the `session_id` \ncolumn along with the `os` column filtering for \"Windows\" and \nthe `action_date` column filtering for dates in 2023\\. \nThen, you can group the results by `os` using the `GROUP BY` clause \nto count the number of sessions that meet these conditions.\n\nHere's a sample SQL query that should give you the desired output:\n\n```", "```py\n\nThis query will return the total number of sessions from Windows \nusers in 2023\\. I hope this helps! If you have any further questions or \nneed more assistance, please don't hesitate to ask.\n```", "```py\nfrom crewai_tools import ScrapeWebsiteTool, WebsiteSearchTool\nch_documenation_tool = ScrapeWebsiteTool(\n  'https://clickhouse.com/docs/en/guides/creating-tables')\n```", "```py\nfrom langchain_openai import ChatOpenAI\nfrom crewai import Process\n\ncomplext_qna_crew = Crew(\n  agents = [ch_support_agent, data_support_agent, qa_support_agent],\n  tasks = [draft_ch_answer, draft_data_answer, answer_review],\n  verbose = 2,\n  manager_llm = ChatOpenAI(model='gpt-4o', temperature=0),  \n  process = Process.hierarchical,  \n  memory = False \n)\n```", "```py\nch_result = complext_qna_crew.kickoff(\n  {'customer': \"Maria\", \n   'question': \"\"\"Good morning, team. I'm using ClickHouse to calculate \n   the number of customers. \n   Could you please remind whether there's an option to add totals \n   in ClickHouse?\"\"\"\n  }\n)\n\ndoc_result = complext_qna_crew.kickoff(\n  {'customer': \"Max\", \n   'question': \"\"\"Hey team, I hope you're doing well. I need to find \n    the numbers before our CEO presentation tomorrow, so I will really \n    appreciate your help.\n    I need to calculate the number of sessions from our Windows users \n    in 2023\\. I've tried to find the table with such data \n    in our data warehouse, but wasn't able to. \n    Do you have any ideas whether we store the needed data somewhere, \n    so that I can query it. \"\"\"\n  }\n)\n```"]