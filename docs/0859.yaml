- en: Explore All Ways to Implement Data Security in Power BI with RLS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/explore-all-ways-to-implement-rls-rules-ee4a402db39a?source=collection_archive---------4-----------------------#2024-04-03](https://towardsdatascience.com/explore-all-ways-to-implement-rls-rules-ee4a402db39a?source=collection_archive---------4-----------------------#2024-04-03)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Implementing row-level security in Power BI is a recurring task for* developers.
    We use various techniques to do so*. Let’s look at some of them.*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari?source=post_page---byline--ee4a402db39a--------------------------------)[![Salvatore
    Cagliari](../Images/a24b0cefab6e707cfee06cde9e857559.png)](https://medium.com/@salvatorecagliari?source=post_page---byline--ee4a402db39a--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--ee4a402db39a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--ee4a402db39a--------------------------------)
    [Salvatore Cagliari](https://medium.com/@salvatorecagliari?source=post_page---byline--ee4a402db39a--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--ee4a402db39a--------------------------------)
    ·12 min read·Apr 3, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/60d3dfeaaf055fa3c953ebabf3927744.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [David Clode](https://unsplash.com/@davidclode?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we regulate data access in Power BI solutions, we must implement RLS (Row-level
    security).
  prefs: []
  type: TYPE_NORMAL
- en: RLS works through the implementation of RLS Roles, which contain the access
    logic to control data access.
  prefs: []
  type: TYPE_NORMAL
- en: This logic is defined by DAX expressions and can be very simple and all the
    way to very complex.
  prefs: []
  type: TYPE_NORMAL
- en: As I already wrote a few articles about this topic here on Medium, I decided
    to collect the different methods into one guide instead of having different places
    where you must search for information.
  prefs: []
  type: TYPE_NORMAL
- en: In the end, I will analyze them side-by-side and recommend which approach is
    the best.
  prefs: []
  type: TYPE_NORMAL
- en: I will reference my other pieces if available. You can find the links to them
    in the References section at the end of this piece.
  prefs: []
  type: TYPE_NORMAL
- en: Variants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have the following variants to implement RLS:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple Lookup table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Hierarchies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex DAX Expressions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bonus: Using SCD2 Dimensions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to identify the users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can jump to the next section if you are familiar with building RLS roles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each RLS role uses one of the two basic approaches:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying the user
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Applying an access-logic
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first approach is based on a list of the users mapped to the data they have
    access to.
  prefs: []
  type: TYPE_NORMAL
- en: So, when you have a table with a list of users (in the form of Mail Addresses),
    you can compare the current user using the [USERPRINCIPALNAME()](https://dax.guide/userprincipalname/)
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following Measure uses this Function to show the current user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, I can add it to a Card Visual to get the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dc3c8b2adfe42e7d386e7529805def5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1 — Result of simple Measure for the current User (Domain hidden for
    Data protection) (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: I can use this function in my RLS role(s) to check the data against the current
    user.
  prefs: []
  type: TYPE_NORMAL
- en: This is the basic principle of the first approach.
  prefs: []
  type: TYPE_NORMAL
- en: The other approach is to use DAX logic to implement an access logic. This logic
    can be simple or as complicated as needed.
  prefs: []
  type: TYPE_NORMAL
- en: You will see two examples of this approach later on.
  prefs: []
  type: TYPE_NORMAL
- en: Simple Lookup table
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the simplest approach.
  prefs: []
  type: TYPE_NORMAL
- en: I need a list of users with a reference to the user who needs access to the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Each user has a reference to a subset of data within my data model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following table with the Sales Channels:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/01688dffc52de40b790b123fdb9b2481.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2 — Channel table, which will be restricted by a lookup table (Figure
    by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: I want to limit my users’ access to one or more defined channels.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, I need a table with the user mapping of the Channels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e9c55d82669724e2e1f25ee24a4cb441.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3 — User-Mapping for the Channels (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: I import this table into my Power BI file and add a Relationship to the Channel
    table.
  prefs: []
  type: TYPE_NORMAL
- en: 'But, in this case, I must change the Default Relationship between the two tables
    to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/abc3e0b19edae5a895a7f5e1a26d529b.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4- Relationship between the Channel and the Channel-Accesslist tables
    (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: These settings are necessary because Power BI would create a Many-to-One relationship,
    where the Channel table (on the one side) would filter the Channel-Accesslist
    table (on the Many side).
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, I must change the Relationship settings to ensure that the Filter
    moves from the Channel-Accesslist to the Channel table and applies the security
    filter to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, I must create an RLS role for the Channel-Accesslist table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/661a4cd2079636128ad09b7c11fa2356.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5 — Create an RLS-Role for the Channel-Accesslist (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to click the Save button to save the role addition before closing
    the dialog.
  prefs: []
  type: TYPE_NORMAL
- en: This DAX expression must return either TRUE or FALSE, regardless of complexity.
    Returning a resultset or a value is not permitted.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the Access for John Doe, I can click on the “View as” button, select
    the RLS role I want to test and enter a Mail Address (which is the Principalusername)
    to apply the selected role to the given user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dfd572293fe3eaf0646370646cc0f31f.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6 — Test the RLS role for John Doe (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'When I test the Access, I will get this for John Doe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c144e774ef9fc2f52a3dd74b2172e1aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7 — Result of RLS test for John Doe (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: This is the expected result.
  prefs: []
  type: TYPE_NORMAL
- en: Using Hierarchies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using hierarchies with RLS is a slightly different story.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/90942588cda99b3b13cf5d3b924b69c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8 — Example with product hierarchy (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s assume we have Salespeople responsible for single Product Categories.
    Therefore, they must see only the Subcategories and the Products assigned to them.
  prefs: []
  type: TYPE_NORMAL
- en: To set the permissions, we leverage Power BI possibilities to filter one column
    in a table and Cross-filter all other columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following picture from the source database, which explains filter
    propagation for a Hierarchy (The Data is the same as in Power BI, but I renamed
    to columns in Power BI):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ba5528001ad02becc33bae1fe47a8ddb.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9 — Filter propagation for a hierarchy (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, when a Filter is applied to the Category column, it is automatically
    applied to the other columns, which define the hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we only need a filter on the Category column.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this only applies to hierarchies in this form.
  prefs: []
  type: TYPE_NORMAL
- en: If you have parent-child hierarchies, this doesn’t work anymore.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read this article to get a hint on how to solve this challenge:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/microsoft-power-bi/finding-managers-in-organizational-hierarchies-f3911a5f3e22?source=post_page-----ee4a402db39a--------------------------------)
    [## Finding managers in organizational hierarchies'
  prefs: []
  type: TYPE_NORMAL
- en: Organizational hierarchies are one of the most common hierarchies in data. But,
    finding managers can be challenging…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/microsoft-power-bi/finding-managers-in-organizational-hierarchies-f3911a5f3e22?source=post_page-----ee4a402db39a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: However, as Power BI doesn’t support parent-child hierarchies, we must flatten
    (Convert from parent-child to column-oriented) them in any case to use them meaningfully.
    I added a link to a helpful article showing how to do it in the References section
    at the end of this article.
  prefs: []
  type: TYPE_NORMAL
- en: Now, back to the flattened hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: We have two possibilities now.
  prefs: []
  type: TYPE_NORMAL
- en: Create a table like in the first approach, assigning users to each Category.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create roles for each Category and assign the users to the role.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As mentioned, the first approach is the same as above.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, I will show you the second approach.
  prefs: []
  type: TYPE_NORMAL
- en: Like before, I create an RLS role. But this time, the expression directly filters
    the Product Category.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2cc0a6b0af93f937a7ddf9cd8ccf929c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10 — Define RLS-Role for Product-Category “Computers” (Figure by the
    Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'When I test the RLS-Role, this time without entering a User Mail-Address, I
    get this result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/321467d9ba7ee8ef1acc6ea79ca47473.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11 — Result of testing the RLS-Role for the “Computers” Category (Figure
    by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Again, this is the expected result.
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, I need to create one RLS-Role for each product category.
  prefs: []
  type: TYPE_NORMAL
- en: This allows me to segregate the user access or give one user access to multiple
    product categories.
  prefs: []
  type: TYPE_NORMAL
- en: However, as new Categories can be added to the data, I must add new RLS roles
    to cover access to them. Without a new role (Or roles), the new Category will
    not be visible to anyone.
  prefs: []
  type: TYPE_NORMAL
- en: Complex DAX expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever the access rules are too complicated to implement with a classic data
    model, I need a more sophisticated method to control access to the data.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we need complex DAX expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e0088284f119fe3264e977115deea301.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12 — Access list per user and Category and Brand (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: Each listed user must have access only to the products in the assigned combination
    of category and brand.
  prefs: []
  type: TYPE_NORMAL
- en: For example, John Doe has access to the Product categories “TV and Video” and
    “Computers” but only to the Brands “Contoso” and “Adventureworks”. And Sam Sample
    has access only to the Products Category “Home Appliances” from “Northwind Traders,
    “Litware” and “Proseware”, even though there are four more Brands for “Home Appliances”.
  prefs: []
  type: TYPE_NORMAL
- en: As Power BI (like any other Tabular Model with Microsoft products) doesn’t allow
    creating Relationships between tables based on more than one column, I cannot
    integrate this table into the data model and use the standard method.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, I must create an RLS role using DAX.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find the matching rows between two tables, I use the [LOOKUPVALUES()](https://dax.guide/lookupvalue/)
    function to apply an RLS role on the Product table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As stated above, I must return either TRUE or FALSE. Therefore, I use [NOT](https://dax.guide/op/not/)
    [ISBLANK()](https://dax.guide/isblank/) to get the needed result. When I find
    a matching row, I get a non-blank result, and NOT ISBLANK() returns TRUE.
  prefs: []
  type: TYPE_NORMAL
- en: 'When testing the RLS role with John Doe, I get the needed result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f9f513b1cf0211202cdf24b77525ccbc.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 13 — Result when applying the RLS role for the Category and the Brand
    to John Doe (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: As this is a very simple expression, I wanted to find another way to do it to
    show you the possibilities of complex expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the DAX expression I came up with as an RLS role on the Product table
    to show off my DAX skills:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This approach shows that more complex expressions are possible as RLS roles
    and how to construct them in Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: I use the approach in my article on developing and testing RLS Rules (Link in
    the References section below) to get the correct approach for the Expression.
  prefs: []
  type: TYPE_NORMAL
- en: Then, I use the approach in the DAX query to find the correct solution for the
    RLS editor.
  prefs: []
  type: TYPE_NORMAL
- en: In my approach, I use the [CONTAINS()](https://dax.guide/contains/) function
    to compare the Access List with the Product table.
  prefs: []
  type: TYPE_NORMAL
- en: The CONTAINS() function allows me to compare multiple columns from two tables
    and find the matching rows.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the Comments in the expression, I construct the table from
    the AccessList table while filtering it with the USERPRINCIPALNAME() for the Input
    of CONTAINS().
  prefs: []
  type: TYPE_NORMAL
- en: Afterward, I compare the columns one by one to find the matching rows for the
    current user.
  prefs: []
  type: TYPE_NORMAL
- en: However, both RLS roles have a significant effect on performance.
  prefs: []
  type: TYPE_NORMAL
- en: I observed a three times longer execution time than without the RLS role applied.
  prefs: []
  type: TYPE_NORMAL
- en: The rule is applied to each row of the Product table to determine whether the
    combination of Category and Brand is allowed in the result set.
  prefs: []
  type: TYPE_NORMAL
- en: OK, the DAX engine works more efficiently than explained here, but the principle
    is correct.
  prefs: []
  type: TYPE_NORMAL
- en: What can be a more efficient alternative?
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, I can add calculated columns as an artificial key to be able to
    add a Relationship between these two tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cad7af1ae4f0dfb4f8aa4fb96362a6d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14 — Composite Keys with concatenated Category and Brand (Figure by the
    Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'I used Power Query to add a calculated column to both tables (“Product” & “Accesslist
    by Category and Brand”). Now I have a key column on both tables, which I can use
    for the Relationship:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b7a5d7be5928870eaaefd4d7e70985d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15 — Relationship using the CompositeKey columns (Figure by the Author)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I can use the first approach (RLS role expression: [UserMailaddress] =
    USERPRINCIPALNAME()) to implement the access control.'
  prefs: []
  type: TYPE_NORMAL
- en: The result is the same with all three approaches. But the last uses a much simpler
    and more efficient approach.
  prefs: []
  type: TYPE_NORMAL
- en: Anyway, the example shown here is based on the limited possibilities in the
    Contoso data model.
  prefs: []
  type: TYPE_NORMAL
- en: You might find much more complex situations in your data that cannot be solved
    with the first approach. You must develop a DAX expression to implement the rule
    in such cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus: Using SCD2 Dimensions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The dimension tables will likely be historized when we access a classic Data
    warehouse.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that you, as a customer, are registered in a database of a company with
    multiple stores, which assigns you to a store based on your geographic location.
  prefs: []
  type: TYPE_NORMAL
- en: Over time, you might change your address. This might change the assignment to
    the geographic assignment.
  prefs: []
  type: TYPE_NORMAL
- en: 'In such a case, two rows exist in the Data warehouse for you:'
  prefs: []
  type: TYPE_NORMAL
- en: One with the old Address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One with the new address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each row has a validity time (Valid-From and -To).
  prefs: []
  type: TYPE_NORMAL
- en: This means we must take extra care when defining the RLS role, considering which
    data we must allow access to and which we must not.
  prefs: []
  type: TYPE_NORMAL
- en: This is necessary to ensure that the right salesperson can access your data
    for the correct validity window.
  prefs: []
  type: TYPE_NORMAL
- en: 'I already wrote an article on this topic, and I invite you to read it to learn
    more about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/handling-historisations-in-power-bi-30dc43e9e6f?source=post_page-----ee4a402db39a--------------------------------)
    [## Handling historisations in Power BI'
  prefs: []
  type: TYPE_NORMAL
- en: In reporting, historisation is everything. But besides the usual time series
    data, we need to look at the historisation…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/handling-historisations-in-power-bi-30dc43e9e6f?source=post_page-----ee4a402db39a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What I haven’t mentioned yet is that as soon as you publish the Power BI file
    to the Power BI Service, you must assign the users to the RLS roles to ensure
    that the rules are applied to them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Read this for more guidance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://learn.microsoft.com/en-us/power-bi/enterprise/service-admin-rls?source=post_page-----ee4a402db39a--------------------------------#working-with-members)
    [## Row-level security (RLS) with Power BI - Power BI'
  prefs: []
  type: TYPE_NORMAL
- en: How to configure row-level security for imported semantic models, and DirectQuery,
    within the Power BI service.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: learn.microsoft.com](https://learn.microsoft.com/en-us/power-bi/enterprise/service-admin-rls?source=post_page-----ee4a402db39a--------------------------------#working-with-members)
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, the most straightforward approach is the most efficient way
    to implement RLS roles.
  prefs: []
  type: TYPE_NORMAL
- en: In cases where complex rules must be applied, I try to translate them into an
    Access List that is as simple as possible. In an optimal case, this list resembles
    the example shown in the first approach.
  prefs: []
  type: TYPE_NORMAL
- en: This way, I avoid writing complicated DAX expressions in the RLS role and losing
    efficiency and performance.
  prefs: []
  type: TYPE_NORMAL
- en: In one of my projects, I was challenged to restrict two separate tables with
    the same List of permissions.
  prefs: []
  type: TYPE_NORMAL
- en: In that case, I duplicated the table with the User-/Access-List and filtered
    both tables with it.
  prefs: []
  type: TYPE_NORMAL
- en: Then, I added the same DAX-Expression as an RLS role to both tables, and the
    magic worked.
  prefs: []
  type: TYPE_NORMAL
- en: One of my colleagues once said, “I can make your Data model slow with little
    effort by implementing a complicated or inefficient RLS role.”
  prefs: []
  type: TYPE_NORMAL
- en: This is very true, and we have to be careful not to be tempted to fall into
    the trap of being too ambitious and stuck to the idea of writing a cool DAX expression
    to show off our DAX competency.
  prefs: []
  type: TYPE_NORMAL
- en: The user will not be very grateful for a slow Report.
  prefs: []
  type: TYPE_NORMAL
- en: 'One more note when implementing RLS roles:'
  prefs: []
  type: TYPE_NORMAL
- en: 'SQLBI created an interesting video about limitations in DAX when RLS is in
    place:'
  prefs: []
  type: TYPE_NORMAL
- en: It is essential to know these restrictions to avoid error messages or wrong
    results when writing DAX Measures.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b05cf17aece3197f9296e2bca5b553e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Aaron Burden](https://unsplash.com/@aaronburden?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Microsoft documentation on Row-level security in Power BI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://learn.microsoft.com/en-us/power-bi/enterprise/service-admin-rls?source=post_page-----ee4a402db39a--------------------------------)
    [## Row-level security (RLS) with Power BI - Power BI'
  prefs: []
  type: TYPE_NORMAL
- en: How to configure row-level security for imported semantic models, and DirectQuery,
    within the Power BI service.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: learn.microsoft.com](https://learn.microsoft.com/en-us/power-bi/enterprise/service-admin-rls?source=post_page-----ee4a402db39a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'To transform the parent-child hierarchy into a classic hierarchy, I follow
    the methods described by Data Mozart:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://data-mozart.com/finding-the-right-path-understanding-parent-child-hierarchies-in-power-bi/?source=post_page-----ee4a402db39a--------------------------------)
    [## Finding the right PATH - Understanding parent-child hierarchies in Power BI!
    - Data Mozart'
  prefs: []
  type: TYPE_NORMAL
- en: Different data source systems store the data in different ways! Parent-child
    hierarchies may be a decent challenge to…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: data-mozart.com](https://data-mozart.com/finding-the-right-path-understanding-parent-child-hierarchies-in-power-bi/?source=post_page-----ee4a402db39a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'This Article by RADACAD explains how to implement RLS with an organizational
    hierarchy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://radacad.com/dynamic-row-level-security-in-power-bi-with-organizational-hierarchy-and-multiple-positions-in-many-to-many-relationship-part-1?source=post_page-----ee4a402db39a--------------------------------)
    [## Dynamic Row Level Security in Power BI with Organizational Hierarchy and Multiple
    Positions in…'
  prefs: []
  type: TYPE_NORMAL
- en: I have written previously about Dynamic Row Level Security, and some of the
    patterns of it. Two of the most common…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: radacad.com](https://radacad.com/dynamic-row-level-security-in-power-bi-with-organizational-hierarchy-and-multiple-positions-in-many-to-many-relationship-part-1?source=post_page-----ee4a402db39a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Here are the links to all the articles I wrote about implementing RLS Rules
    and all other related topics.
  prefs: []
  type: TYPE_NORMAL
- en: '[](/handling-historisations-in-power-bi-30dc43e9e6f?source=post_page-----ee4a402db39a--------------------------------)
    [## Handling historisations in Power BI'
  prefs: []
  type: TYPE_NORMAL
- en: In reporting, historisation is everything. But besides the usual time series
    data, we need to look at the historisation…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/handling-historisations-in-power-bi-30dc43e9e6f?source=post_page-----ee4a402db39a--------------------------------)
    [](/develop-and-test-rls-rules-in-power-bi-9dc705945feb?source=post_page-----ee4a402db39a--------------------------------)
    [## Develop and test RLS Rules in Power BI
  prefs: []
  type: TYPE_NORMAL
- en: Very often, not all Users should have permission to access all data in a Report.
    Here I will explain how to develop RLS…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/develop-and-test-rls-rules-in-power-bi-9dc705945feb?source=post_page-----ee4a402db39a--------------------------------)
    [](/how-to-get-performance-data-from-power-bi-with-dax-studio-b7f11b9dd9f9?source=post_page-----ee4a402db39a--------------------------------)
    [## How to get performance data from Power BI with DAX Studio
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes we have a slow Report, and we need to figure out why. We will see
    how to collect performance data and the…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/how-to-get-performance-data-from-power-bi-with-dax-studio-b7f11b9dd9f9?source=post_page-----ee4a402db39a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I use the Contoso sample dataset, as I did in my previous articles. You can
    download the ContosoRetailDW Dataset for free from Microsoft [here](https://www.microsoft.com/en-us/download/details.aspx?id=18279).
  prefs: []
  type: TYPE_NORMAL
- en: The Contoso Data can be freely used under the MIT License, as described [here](https://github.com/microsoft/Power-BI-Embedded-Contoso-Sales-Demo).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/@salvatorecagliari/subscribe?source=post_page-----ee4a402db39a--------------------------------)
    [## Get an email whenever Salvatore Cagliari publishes.'
  prefs: []
  type: TYPE_NORMAL
- en: Get an email whenever Salvatore Cagliari publishes. By signing up, you will
    create a Medium account if you don't…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/@salvatorecagliari/subscribe?source=post_page-----ee4a402db39a--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: I make my articles accessible to everyone, even though Medium has a paywall.
    This allows me to earn a little for each reader, but I turn it off so you can
    read my pieces without cost.
  prefs: []
  type: TYPE_NORMAL
- en: You can support my work, which I do during my free time, through
  prefs: []
  type: TYPE_NORMAL
- en: '[https://buymeacoffee.com/salvatorecagliari](https://buymeacoffee.com/salvatorecagliari)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Or scan this QR Code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e7ac062070dcd7a00dcf995ad7e95434.png)'
  prefs: []
  type: TYPE_IMG
- en: Any support is greatly appreciated and helps me find more time to create more
    content for you.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you a lot.
  prefs: []
  type: TYPE_NORMAL
