["```py\npip install pandas\npip install pandera\n```", "```py\ndata = {\n    'dob': pd.to_datetime(['1990-05-15', '1988-11-22', '1995-03-10', '1993-07-30', '1992-01-18', '1994-09-05', '1991-12-03', '1989-06-20', '1996-02-14', '1987-08-08']),\n    'age': [34, 35, 29, 31, 32, 30, 32, 35, 28, 37],\n    'country': ['England', 'Spain', 'Germany', 'France', 'Italy', 'Brazil', 'Argentina', 'Netherlands', 'Portugal', 'England'],\n    'current_club': ['Manchester United', 'Chelsea', 'Bayern Munich', 'Paris Saint-Germain', 'Juventus', 'Liverpool', 'Barcelona', 'Ajax', 'Benfica', 'Real Madrid'],\n    'height': pd.array([185, 178, None, 176, 188, 182, 170, None, 179, 300], dtype='Int16'),\n    'name': ['John Smith', 'Carlos Rodriguez', 'Hans Mueller', 'Pierre Dubois', 'Marco Rossi', 'Felipe Santos', 'Diego Fernandez', 'Jan de Jong', 'Rui Silva', 'Gavin Harris'],\n    'position': ['Forward', 'Midfielder', 'Defender', 'Goalkeeper', 'Defender', 'Forward', 'Midfielder', 'Defender', 'Forward', 'Midfielder'],\n    'value_euro_m': [75.5, 90.2, 55.8, 40.0, 62.3, 88.7, 70.1, 35.5, 45.9, 95.0],\n    'joined_date': pd.to_datetime(['2018-07-01', '2015-08-15', None, '2017-06-30', '2016-09-01', None, '2021-07-15', '2014-08-01', '2022-01-05', '2019-06-01']),\n    'number': [9, 10, 4, 1, 3, 11, 8, 5, 7, 17],\n    'signed_from': ['Everton', 'Atletico Madrid', 'Borussia Dortmund', None, 'AC Milan', 'Santos', None, 'PSV Eindhoven', 'Sporting CP', 'Newcastle United'],\n    'signing_fee_euro_m': [65.0, 80.5, 45.0, None, 55.0, 75.2, 60.8, None, 40.5, 85.0],\n    'foot': ['right', 'left', 'right', 'both', 'right', 'left', 'left', 'right', 'both', 'right'],\n}\n\ndf = pd.DataFrame(data)\n```", "```py\ndata.types\n```", "```py\nclass PlayerSchema(pa.DataFrameModel):\n\n    dob: Series[pd.Timestamp] = pa.Field(nullable=False, ge=pd.Timestamp('1975-01-01'))\n    age: Series[pa.Int64] = pa.Field(ge=0, le=50, nullable=False)\n    country: Series[pa.String] = pa.Field(nullable=False)\n    current_club: Series[pa.String] = pa.Field(nullable=False)\n    height: Series[pa.Int16] = pa.Field(ge=120, le=210, nullable=True)\n    name: Series[pa.String] = pa.Field(nullable=False)\n    position: Series[pa.String] = pa.Field(nullable=False)\n    value_euro_m: Series[pa.Float64] = pa.Field(ge=0, le=200)\n    joined_date: Series[pd.Timestamp] = pa.Field(nullable=True, ge=pd.Timestamp('2000-01-01'))\n    number: Series[pa.Int64] = pa.Field(ge=0, le=99)\n    signed_from: Series[pa.String] = pa.Field(nullable=True)\n    signing_fee_euro_m: Series[pa.Float64] = pa.Field(ge=0, le=300, nullable=True)\n    foot: Series[pa.String] = pa.Field(nullable=False, isin=['right', 'left', 'both', 'unknown'])\n```", "```py\nfrom functools import partial\n\nNullableField = partial(pa.Field, nullable=True)\nNotNullableField = partial(pa.Field, nullable=False)\n```", "```py\nclass PlayerSchema(pa.DataFrameModel):\n\n    dob: Series[pd.Timestamp] = pa.Field(nullable=False, ge=pd.Timestamp('1975-01-01'))\n    age: Series[pa.Int64] = pa.Field(ge=0, le=50, nullable=False)\n    country: Series[pa.String] = NotNullableField()\n    current_club: Series[pa.String] = NotNullableField()\n    height: Series[pa.Int16] = pa.Field(ge=120, le=250, nullable=True)\n    name: Series[pa.String] = NotNullableField()\n    position: Series[pa.String] = NotNullableField()\n    value_euro_m: Series[pa.Float64] = pa.Field(ge=0, le=200)\n    joined_date: Series[pd.Timestamp] = pa.Field(nullable=True, ge=pd.Timestamp('2000-01-01'))\n    number: Series[pa.Int64] = pa.Field(ge=0, le=99)\n    signed_from: Series[pa.String] = NullableField() \n    signing_fee_euro_m: Series[pa.Float64] = pa.Field(ge=0, le=300, nullable=True)\n    foot: Series[pa.String] = pa.Field(nullable=False, isin=['right', 'left', 'both', 'unknown'])\n```", "```py\n@pa.check_types\ndef load_data() -> DataFrame[PlayerSchema]:\n    return pd.read_parquet('../data/player_info_cleaned.parquet')\n```", "```py\n@pa.check_types\ndef validate_data(df: DataFrame) -> DataFrame[PlayerSchema]:\n    try:\n        return df\n    except pa.errors.SchemaError as e:\n        print(e)\n\nvalidate_data(df)\n# error in check_types decorator of function 'load_data': Column 'height' failed element-wise validator number 1: less_than_or_equal_to(210) failure cases: 300\n```", "```py\ndef clean_height(df: DataFrame) -> DataFrame[PlayerSchema]:\n    data = df.copy()\n    data.loc[data[PlayerSchema.height] > 210, PlayerSchema.height] = round(data[PlayerSchema.height].median())\n    return data\n\ndf = clean_height(df) \n```", "```py\nvalidate_data_2(df)\n\n# if there are no errors, the dataframe is the output. \n```"]