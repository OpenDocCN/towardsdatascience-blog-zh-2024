- en: 'Generative AI: Synthetic Data Generation with GANs using Pytorch'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/generative-ai-synthetic-data-generation-with-gans-using-pytorch-2e4dde8a17dd?source=collection_archive---------1-----------------------#2024-01-15](https://towardsdatascience.com/generative-ai-synthetic-data-generation-with-gans-using-pytorch-2e4dde8a17dd?source=collection_archive---------1-----------------------#2024-01-15)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Demystifying complexity: beyond images and language models**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@ns650?source=post_page---byline--2e4dde8a17dd--------------------------------)[![Najib
    Sharifi, Ph.D.](../Images/d94932c5e3633e32247d98a3c221b181.png)](https://medium.com/@ns650?source=post_page---byline--2e4dde8a17dd--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--2e4dde8a17dd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--2e4dde8a17dd--------------------------------)
    [Najib Sharifi, Ph.D.](https://medium.com/@ns650?source=post_page---byline--2e4dde8a17dd--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--2e4dde8a17dd--------------------------------)
    ·7 min read·Jan 15, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Generative models have become hugely popular for their abilities to generate
    both beautiful and realistic images, and language models (e.g. ChatGPT) that are
    increasingly rising in their use across every sector. These generative models
    models are arguably the reason AI/Machine learning have gotten the excitement
    (or fear) the world holds for the field right now; because it has shown everyone
    (especially those outside the field) the immense potential that machine learning
    holds. There are already a lot of resources on GANs models online but most of
    these focus on image generation. These image generation and language models require
    complex spatial or temporal intricacies which adds additional complexities that
    make it more challenging for readers to understand the true essence of GANs.
  prefs: []
  type: TYPE_NORMAL
- en: In an effort to remedy this and make GANs more accessible to a broader audience,
    in this short discussion and GAN model example, we’ll take a different and more
    practical approach that focuses on generating synthetic data of mathematical functions.
    Beyond being a simplification for learning purposes, synthetic data generation
    is becoming increasingly more important in its own right. Data is not only playing
    a central role in business decision-making but also there are an increasing number
    of uses where a data driven approach is becoming more popular than first principle
    models. An exciting example of this is weather forecast, the first principle model
    included simplified versions of the Navier-Stokes equation that was solved numerically
    (with significant computational costs I should add). However, recent attempts
    of weather forecast with deep learning (e.g. check out Nvidia’s FourCastNet [1])
    have been very successful in capture weather patterns and once trained, it is
    easier and much faster to run.
  prefs: []
  type: TYPE_NORMAL
- en: '**Generative Models vs. Discriminative Models**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In machine learning, it is important to understand the distinction between
    discriminative and generative models as they are the key components in a GAN.
    Let’s unravel these terms (very briefly):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Discriminative Models:'
  prefs: []
  type: TYPE_NORMAL
- en: Discriminative models focus on classifying data into predefined classes for
    example classing images of dogs and cats into their respective classes. Rather
    than capturing the entire distribution, these models discern the boundaries that
    separate different classes. They output P(y|x) (probability of class, y given
    the input data, x) i.e. they answer the question of what category a given data
    point belongs to?
  prefs: []
  type: TYPE_NORMAL
- en: 'Generative Models:'
  prefs: []
  type: TYPE_NORMAL
- en: Generative models aim to understand the underlying structure of the data. Unlike
    discriminative models that discern between classes, generative models learn the
    entire distribution of the data. These models output p(x|y) i.e. they answer the
    question of what is the likelihood of generating this specific data point given
    specified the class?
  prefs: []
  type: TYPE_NORMAL
- en: The interplay between these two models forms the very foundation of GANs.
  prefs: []
  type: TYPE_NORMAL
- en: '**GANs — Structure and Components**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1fa83d74ad0c8fcc4dcca0381c8f8226.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A schematic of the anatomy of GANs. Image credit: [Tingting Zhu](https://www.researchgate.net/publication/376301143_A_Survey_of_Generative_Adversarial_Networks_for_Synthesizing_Structured_Electronic_Health_Records)
    [2]'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now explore how these concepts come together in a GAN model. The key components
    of a GAN include the noise vector, the generator, and the discriminator.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Generator: Generating Realistic Data'
  prefs: []
  type: TYPE_NORMAL
- en: To generate synthetic data the generator uses a random noise vector as an input.
    In it’s bid to fool the discriminator, the generator aims to learn the distribution
    of the real data and produce synthetic data that cannot be distinguished from
    the real data. A problem here is that for the same input, it would always produce
    the same output (imagine an image generator that produced a realistic image but
    always the same image, that is not very useful). The random noise vector injects
    randomness into the process, providing diversity in the generated output.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Discriminator: Discerning Real from Fake'
  prefs: []
  type: TYPE_NORMAL
- en: The discriminator is like an art critic trained to differentiate between real
    and fake data. It’s role is to scrutinize the data it receives and assign a probability
    score of the work being real. If the synthetic data seems similar to the real
    data, the discriminator assigns a high probability, otherwise assign a low probability
    score.
  prefs: []
  type: TYPE_NORMAL
- en: 'Adversarial Training: A Dynamic Duel'
  prefs: []
  type: TYPE_NORMAL
- en: The generator strives to learn to produce synthetic data that the discriminator
    can not differentiate from the real data. Simultaneously, the discriminator also
    learning and improving its ability to differentiate the real from the synthetic.
    This dynamic training process pushes both models to refine their skills. The two
    models are always competing with one another (hence why it is called Adversarial)
    and through this competition both models become excellent at their roles.
  prefs: []
  type: TYPE_NORMAL
- en: '**Implementing a GAN with Pytorch**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s move forward by looking at an example of creating a GAN. In this example,
    we implement a model in pytorch that can generate synthetic data. For the training,
    we have a 6-parameters dataset with the following shapes (all parameters are plotted
    as a function of parameter 1). Each parameter has been deliberately chosen with
    a significantly different distribution and shape to increase the complexity of
    the dataset and mimic real-world data. However, it is worth mentioning that there
    is significant room for optimising both the discriminator and generator architectures
    but we won’t focus for this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, I am assuming you already have an understanding normal ANN
    model architectures and python. I have provided comments in the code to help you
    follow the code.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9dca607323f861b859fe959578580dd0.png)'
  prefs: []
  type: TYPE_IMG
- en: The training data — all 6 parameters are plotted as function of parameter 1
  prefs: []
  type: TYPE_NORMAL
- en: Defining the GAN model components (Generator and Discriminator)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Model Initialisation and Data Processing
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Model Training
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Evaluating and visualising the results
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/dc6dbaad057f7434bcbb3812ed77ae2c.png)![](../Images/66571da2455b2846c32dd5a59fda6ba8.png)'
  prefs: []
  type: TYPE_IMG
- en: Despite the simplicity of our model, the distribution and mathematical shape
    of the synthetic data and real data look very similar! The training process and
    model architecture could be changed for improved accuracy, something we didn’t
    focus on here. This model could very easily be adjusted to produce synthetic data
    for other applications with larger number parameters and more complexity for real
    phyical systems. Thank you for taking the time to read, I hope you found this
    an informative read. There are so much one can do with GANs, it is a very exciting
    topic at the moment, definitely play around with this code to get the overall
    idea of GANs and then start experimenting with other ideas! best of luck!
  prefs: []
  type: TYPE_NORMAL
- en: '*Unless otherwise noted, all images are by the author*'
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs: []
  type: TYPE_NORMAL
- en: '[1] Jaideep Pathak, Shashank Subramanian, Peter Harrington, Sanjeev Raja, Ashesh
    Chattopadhyay, Morteza Mardani, Thorsten Kurth, David Hall, Zongyi Li, Kamyar
    Azizzadenesheli, Pedram Hassanzadeh, Karthik Kashinath, Animashree Anandkumar.
    (2022). FourCastNet: A Global Data-driven High-resolution Weather Model using
    Adaptive Fourier Neural Operators. arXiv:2202.11214\. [https://doi.org/10.48550/arXiv.2202.11214](https://doi.org/10.48550/arXiv.2202.11214)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] Ghosheh, Ghadeer & Jin, Li & Zhu, Tingting. (2023). A Survey of Generative
    Adversarial Networks for Synthesizing Structured Electronic Health Records. ACM
    Computing Surveys. 10.1145/3636424.'
  prefs: []
  type: TYPE_NORMAL
