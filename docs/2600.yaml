- en: The Curse of Conway and the Data Space
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 康威定律与数据空间
- en: 原文：[https://towardsdatascience.com/the-curse-of-conway-and-the-data-space-e3cba689a915?source=collection_archive---------4-----------------------#2024-10-25](https://towardsdatascience.com/the-curse-of-conway-and-the-data-space-e3cba689a915?source=collection_archive---------4-----------------------#2024-10-25)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-curse-of-conway-and-the-data-space-e3cba689a915?source=collection_archive---------4-----------------------#2024-10-25](https://towardsdatascience.com/the-curse-of-conway-and-the-data-space-e3cba689a915?source=collection_archive---------4-----------------------#2024-10-25)
- en: How modern trends can be traced back to Conway’s Law
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 现代趋势如何追溯到康威定律
- en: '[](https://medium.com/@jvanlightly?source=post_page---byline--e3cba689a915--------------------------------)[![Jack
    Vanlightly](../Images/dd91c920e40d90e160874521757efeb6.png)](https://medium.com/@jvanlightly?source=post_page---byline--e3cba689a915--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--e3cba689a915--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--e3cba689a915--------------------------------)
    [Jack Vanlightly](https://medium.com/@jvanlightly?source=post_page---byline--e3cba689a915--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@jvanlightly?source=post_page---byline--e3cba689a915--------------------------------)[![Jack
    Vanlightly](../Images/dd91c920e40d90e160874521757efeb6.png)](https://medium.com/@jvanlightly?source=post_page---byline--e3cba689a915--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--e3cba689a915--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--e3cba689a915--------------------------------)
    [Jack Vanlightly](https://medium.com/@jvanlightly?source=post_page---byline--e3cba689a915--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--e3cba689a915--------------------------------)
    ·12 min read·Oct 25, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--e3cba689a915--------------------------------)
    ·12分钟阅读·2024年10月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/c0fe5540e797849545f2f267be1b70b9.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c0fe5540e797849545f2f267be1b70b9.png)'
- en: Image by the author. (Generated by Midjourney, touched up with Krita)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。（由Midjourney生成，并用Krita进行修饰）
- en: '*This article was originally* [*posted*](https://jack-vanlightly.com/blog/2024/10/21/the-curse-of-conway-and-the-data-space)
    *on my blog* [*https://jack-vanlightly.com*](https://jack-vanlightly.com)*.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文最初发表于* [*我的博客*](https://jack-vanlightly.com/blog/2024/10/21/the-curse-of-conway-and-the-data-space)
    *上* [*https://jack-vanlightly.com*](https://jack-vanlightly.com)*。*'
- en: '*The article was triggered by and riffs on the “Beware of silo specialisation”
    section of Bernd Wessely’s post* [*Data Architecture: Lessons Learned*](/data-architecture-lessons-learned-3589b152a8a6)*.
    It brings together a few trends I am seeing plus my own opinions after twenty
    years experience working on both sides of the software / data team divide.*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文的灵感来源并延伸了Bernd Wessely在《数据架构：经验教训》一文中的“警惕孤岛化专业化”部分* [*Data Architecture:
    Lessons Learned*](/data-architecture-lessons-learned-3589b152a8a6)*。它汇集了我观察到的几个趋势，以及我在软件与数据团队分割两边工作二十年的经验所形成的个人看法。*'
- en: 'Conway’s Law:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 康威定律：
- en: '*“Any organization that designs a system (defined broadly) will produce a design
    whose structure is a copy of the organization’s communication structure.”* — Melvin
    Conway'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“任何设计系统的组织（广义定义）都会产生一个结构，其结构是该组织沟通结构的复制。”* — Melvin Conway'
- en: This is playing out worldwide across hundreds of thousands of organizations,
    and it is no more evident than in the split between software development and data
    analytics teams. These two groups usually have a different reporting structure,
    right up to, or immediately below, the executive team.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这一现象在全球范围内的数十万家组织中都有上演，尤其在软件开发与数据分析团队之间的分裂中体现得尤为明显。这两组通常有不同的汇报结构，直到或紧接着高层管理团队。
- en: This is a problem now and is only growing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题如今已经存在，并且只会不断加剧。
- en: 'Jay Kreps [remarked five years ago](https://www.confluent.io/blog/every-company-is-becoming-software/)
    that organizations are becoming software:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Jay Kreps [五年前提到](https://www.confluent.io/blog/every-company-is-becoming-software/)组织正在变成软件：
- en: “It isn’t just that businesses use more software, but that, increasingly, a
    business is defined in software. That is, the core processes a business executes
    — from how it produces a product, to how it interacts with customers, to how it
    delivers services — are increasingly specified, monitored, and executed in software.”
    — Jay Kreps
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “问题不仅仅在于企业使用更多的软件，而是越来越多的企业在软件中得以定义。也就是说，一个企业执行的核心流程——从它如何生产产品，到它如何与客户互动，再到它如何提供服务——越来越多地在软件中被明确、监控和执行。”
    — Jay Kreps
- en: The effectiveness of this software is directly tied to the organization’s success.
    If the software is dysfunctional, the organization is dysfunctional. The same
    can play out in reverse, as organizational structure dysfunction plays out in
    the software. All this means that a company that wants to win in its category
    can end up executing poorly compared to its competitors and being too slow to
    respond to market conditions. This kind of thing has been said umpteen times,
    but it is a fundamental truth.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这一软件的有效性与组织的成功直接相关。如果软件存在功能障碍，组织也会出现问题。反过来，组织结构上的问题也会在软件中体现出来。这意味着，一个想要在其领域中脱颖而出的公司，可能会在执行上落后于竞争对手，反应市场条件的速度也太慢。这样的情况已经被说了无数次，但这依然是一个基本的真理。
- en: When “software engineering” teams and the “data” teams operate in their own
    bubbles within their own reporting structures, a kind of tragic comedy ensues
    where the biggest loser is the business as a whole.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当“软件工程”团队和“数据”团队在各自的汇报结构中各自为政时，就会产生一种悲剧性的喜剧局面，最终最大输家是整个企业。
- en: The winds of change are blowing
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变革的风正在吹起
- en: '![](../Images/0d2c8bdf201a3416e9b1fea510171c54.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0d2c8bdf201a3416e9b1fea510171c54.png)'
- en: Image by the author. (Generated by Midjourney, touched up with Krita)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。（由Midjourney生成，使用Krita进行了修饰）
- en: 'There are more and more signs that point to a change in attitudes to the current
    status quo of “us and them”, of software and data teams working at cross purposes
    or completely oblivious to each other’s needs, incentives, and contributions to
    the business’s success. There are three key trends that have emerged over the
    last two years in the data analytics space that have the potential to make real
    improvements. Each is still quite nascent but gaining momentum:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的迹象表明，当前“我们与他们”的态度正发生变化，软件和数据团队之间的目标对立或完全忽视彼此的需求、激励和对企业成功的贡献的状况正在被改变。在过去两年中，数据分析领域出现了三大关键趋势，这些趋势有潜力带来真正的改进。每一个趋势仍然处于初步阶段，但正在获得动力：
- en: Data engineering is a discipline of software engineering.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据工程是软件工程的一个学科。
- en: Data contracts and data products.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据契约和数据产品。
- en: Shift Left.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向左移动（Shift Left）。
- en: After reading this article, I think you’ll agree that all three are tightly
    interwoven.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本文后，我相信你会同意这三者紧密相连。
- en: Data engineering is a discipline of software engineering
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据工程是软件工程的一个学科。
- en: 'Data engineering has evolved as a separate discipline from that of software
    engineering for numerous reasons:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数据工程已经发展成为与软件工程分开的学科，原因有很多：
- en: Data analytics / BI, where data engineering is practiced, has historically been
    a separate business function from software development. This has caused a cultural
    divergence where the two sides don’t listen to or learn from each other.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据分析/商业智能（BI）领域，其中实践数据工程的地方，历来是与软件开发分开的业务职能。这导致了文化上的分歧，双方没有互相倾听或学习。
- en: Data engineering solves a different set of problems from traditional software
    development and thus has different tools.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据工程解决的问题与传统的软件开发有所不同，因此使用的工具也不同。
- en: Data engineering has changed dramatically over the last 25 years. Many new problems
    arose that required rethinking the technologies from the ground up, which resulted
    in a long, chaotic period of experimentation and innovation.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据工程在过去25年中发生了巨大变化。许多新问题出现，需要从根本上重新思考技术，这导致了一段漫长的、混乱的实验和创新期。
- en: The dust has largely settled, though technologies are still evolving. We’ve
    had time to consolidate and take stock of where we are. The data community is
    starting to realize that many of the current problems are not actually so different
    from the problems of the software development side. Data teams are writing software
    and interacting with software systems just as software engineers do.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管技术仍在发展，但尘埃大致已经落定。我们有时间整合并审视我们所处的状态。数据社区开始意识到，许多当前的问题实际上与软件开发领域的问题并没有本质区别。数据团队像软件工程师一样编写软件并与软件系统互动。
- en: 'The types of software can look different, but many of the practices from software
    engineering apply to data and analytics engineering as well:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 软件的类型可能不同，但许多来自软件工程的实践同样适用于数据和分析工程：
- en: Testing.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试。
- en: Good stable APIs.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 良好的稳定API。
- en: Observability/monitoring.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可观察性/监控。
- en: Modularity and reuse.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化与重用。
- en: Fixing bugs late in the development process is more costly than addressing them
    early on.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发过程中后期修复错误的成本比在早期解决它们的成本更高。
- en: It’s time for data and analytics engineers to identify as software engineers
    and regularly apply the practices of the wider software engineering discipline
    to their own sub-discipline.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候让数据和分析工程师认同自己是软件工程师，并定期将更广泛的软件工程学科的实践应用到自己的子学科中。
- en: Data Contracts and Data Products
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据合同与数据产品
- en: 'Data contracts exploded onto the data scene in 2022/2023 as a response to the
    frustration of the constant break-fix work of broken pipelines and underperforming
    data teams. It went viral and everyone was talking about data contracts, though
    the concrete details of how one would implement them were scarce. But the objective
    was clear: fix the broken pipelines problem.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 数据合同在2022/2023年间因应对数据管道不断崩溃修复和数据团队表现不佳的挫败感而迅速兴起。它迅速传播开来，大家纷纷讨论数据合同，尽管具体如何实现数据合同的细节并不多见。但目标是明确的：解决数据管道崩溃的问题。
- en: 'Broken pipelines for many reasons:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于多种原因，数据管道崩溃：
- en: Software engineers had no idea what data engineers were building on top of their
    application databases and therefore provided no guarantees around table schema
    changes nor even warned of impending changes that would break the pipelines (usually
    because they had no idea).
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件工程师并不知道数据工程师在他们的应用数据库之上构建了什么，因此没有对表格模式的变更提供任何保证，甚至没有警告即将发生的可能破坏数据管道的变化（通常是因为他们根本不知道）。
- en: Data engineers had been largely unable (due to organizational dysfunction or
    organizational isolation) to develop healthy peer relationships with the software
    teams they depend on. Or if relationships could be built, there wasn’t buy-in
    from software team leaders to help data teams get the data they needed beyond
    giving them database credentials. The result was to just reach in and grab the
    data at the source, breaking the age-old software engineering practice of encapsulation
    in the process (and suffering the results).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据工程师由于组织功能失调或孤立，通常无法与他们依赖的软件团队建立健康的同行关系。或者即使能够建立关系，软件团队领导也没有支持数据团队获取所需数据的意愿，除了提供数据库凭证。结果就是直接从数据源中获取数据，破坏了长期以来软件工程中封装的实践（并因此遭受后果）。
- en: 'I recently listened to [Super Data Science E825](https://youtu.be/yNLVmhKp8wM?t=303)
    with Chad Sanderson, a big proponent of data contracts. I loved how he defined
    the term:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最近我听了[Super Data Science E825](https://youtu.be/yNLVmhKp8wM?t=303)这一期节目，嘉宾是数据合同的倡导者Chad
    Sanderson。我非常喜欢他对这一术语的定义：
- en: My definition of data quality is a bit different from other people’s. In the
    software world, people think about quality as, it’s very deterministic. So I am
    writing a feature, I am building an application, I have a set of requirements
    for that application and if the software no longer meets those requirements that
    is known as a bug, it’s a quality issue. But in the data space you might have
    a producer of data that is emitting data or collecting data in some way, that
    makes a change which is totally sensible for their use case. As an example, maybe
    I have a column called timestamp that is being recorded in local time, but I decide
    to change that to UTC format. Totally fine, makes complete sense, probably exactly
    what you should do. But if there’s someone downstream of me that’s expecting local
    time, they’re going to experience a data quality issue. So my perspective is that
    data quality is actually a result of mismanaged expectations between the data
    producers and data consumers, and that is the function of the data contract. It’s
    to help these two sides actually collaborate better with each other.— Chad Sanderson
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我对数据质量的定义与其他人的有些不同。在软件领域，人们通常将质量视为非常确定的东西。比如，我在写一个功能，构建一个应用程序，我有一套该应用的需求，如果软件不再满足这些需求，那就叫做一个bug，属于质量问题。但在数据领域，可能有一个数据生产者在以某种方式生成或收集数据，这种改变对他们的用例是完全合理的。举个例子，也许我有一个名为timestamp的列，它以本地时间记录，但我决定将其更改为UTC格式。这完全没有问题，也完全合理，可能是你应该做的事情。但是，如果我下游的某个使用者预期的是本地时间，那么他们就会遇到数据质量问题。因此，我的观点是，数据质量实际上是数据生产者与数据消费者之间管理不当的预期的结果，而数据合同的作用正是帮助这两方更好地协作。——Chad
    Sanderson
- en: 'What constitutes a data contract is still somewhat open to interpretation and
    implementation regarding actual concrete technology and patterns. Schema management
    is a central theme, though only one part of the solution. A data contract is not
    only about specifying the shape of the data (its schema); it’s also about trust
    and dependability, and we can look to the REST API community to understand this
    point:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 数据合同的构成仍然在一定程度上开放解释和实现，涉及具体的技术和模式。架构管理是一个核心主题，但仅是解决方案的一部分。数据合同不仅仅是指定数据的形状（其架构）；它还涉及信任和可靠性，我们可以从
    REST API 社区中理解这一点：
- en: REST APIs are regularly documented via [OpenAPI](https://www.openapis.org/),
    a REST API specification tool. This is essentially the schema of the request and
    the response, as well as the security schemes.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST API 通常通过 [OpenAPI](https://www.openapis.org/) 来进行文档编制，这是一个 REST API 规范工具。它本质上是请求和响应的架构，以及安全方案。
- en: REST APIs are versioned, and great care is taken to version them without making
    breaking changes. When breaking changes do occur, the API releases a new major
    version. The topic of API versioning is deep, with a long history of debate about
    which options are best. But the point is that the software engineering community
    has thought long and hard about how to evolve APIs.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: REST API 是有版本的，并且非常小心地对其进行版本管理，以避免引入破坏性变化。当发生破坏性变化时，API 会发布一个新的主版本。API 版本控制是一个深入的话题，关于最佳选项的讨论历史悠久。但重点是，软件工程社区已经经过深思熟虑，思考如何演化
    API。
- en: A REST API that is constantly changing and releasing new major versions due
    to breaking changes is a poor API. Organizations that publish APIs for their customers
    must ensure that not only do they create a well-modeled and specified API, but
    a stable one that does not change too frequently.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个不断变化并因破坏性变化而发布新主版本的 REST API 是一个糟糕的 API。发布 API 给客户的组织必须确保他们不仅要创建一个设计良好并且指定清晰的
    API，还要确保其稳定，不会频繁变化。
- en: 'In software engineering, when Service A needs the data of Service B, what Service
    A absolutely doesn’t do is just access the private database of Service B. What
    happens is the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程中，当 Service A 需要 Service B 的数据时，Service A 完全不会直接访问 Service B 的私有数据库。发生的情况是：
- en: The engineering leaders/teams of the two services open a line of communication,
    likely a physical conversation to begin with.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个服务的工程领导/团队建立了沟通渠道，最初可能是面对面的对话。
- en: The team of Service A arranges for a well-designed interface for Service B that
    doesn’t break the encapsulation of Service A. This may result in a REST API, or
    perhaps an event stream or queue that Service B can consume.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Service A 团队为 Service B 安排了一个精心设计的接口，确保不会破坏 Service A 的封装。这可能会导致一个 REST API，或者是一个事件流或队列，供
    Service B 消费。
- en: The team of Service A commits to maintaining this API/stream/queue going forward.
    This involves the discipline of evolving it over time, providing a stable and
    predictable interface for Service B to use. Some of this maintenance can fall
    on a platform team whose responsibility is to provide building block infrastructure
    for development teams to use.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Service A 团队承诺将继续维护这个 API/流/队列。这涉及到随着时间推移不断演化它，为 Service B 提供一个稳定且可预测的接口。部分维护工作可能会由一个平台团队承担，平台团队的责任是为开发团队提供基础设施构件。
- en: 'Why does the team of Service A do this for the team of Service B? Is it out
    of altruism? No. They collaborate because it is valuable for the business for
    them to do so. A well-run organization is run with the mantra of #OneTeam, and
    the organization does what is necessary to operate efficiently and effectively.
    That means that team Service A sometimes has to do work for the benefit of another
    team. It happens because of alignment of incentives going up the management chain.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '为什么 Service A 团队要为 Service B 团队做这些工作？是出于无私吗？不是。他们之所以合作，是因为这样做对业务有价值。一个管理得当的组织秉持着
    #OneTeam 的座右铭，组织会做出必要的事情，以高效和有效的方式运作。这意味着，Service A 团队有时必须为其他团队的利益做工作。这是因为上层管理层的激励目标对齐。'
- en: 'It is also well known in software engineering that fixing bugs late in the
    development cycle, or worse, in production, is significantly more expensive than
    addressing them early on. It is disruptive to the software process to go back
    to previous work from a week or a month before, and bugs in production can lead
    to all manner of ills. A little upfront work on producing well-modeled, stable
    APIs makes life easier for everyone. There is a saying for this: *an ounce of
    prevention is worth a pound of cure*.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程中也有一个众所周知的事实，那就是在开发周期的后期，或者更糟糕的是在生产环境中修复漏洞，远比在早期解决这些问题要昂贵得多。回到一周或一个月前的工作去修改问题，严重干扰了软件过程，而生产环境中的漏洞可能引发各种不良后果。提前做些工作，生产出设计良好、稳定的API会让每个人的生活更轻松。对此有一句话：“*一盎司的预防胜过一磅的治疗*。”
- en: These APIs are contracts. They are established by opening communication between
    software teams and implemented when it is clear that the ROI makes it worth it.
    It really comes down to that. It generally works like this inside a software engineering
    department due to the aligned incentives of software leadership.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些API是契约。它们通过在软件团队之间建立沟通来达成，并在明确ROI（投资回报率）足够时进行实现。其实就这么简单。由于软件领导层的激励一致，通常在软件工程部门内部是这样运作的。
- en: Data products
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据产品
- en: The term API (or Application Programming Interface) doesn’t quite fit “data”.
    Because the product is the data itself, rather than interface over some business
    logic, the term “data product” fits better. The word product also implies that
    there is some kind of quality attached, some level of professionalism and dependability.
    That is why data contracts are intimately related to data products, with data
    products being a materialization of the more abstract data contract.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: API（或应用程序编程接口）这个术语并不完全适用于“数据”。因为产品本身是数据，而不是某些业务逻辑之上的接口，所以“数据产品”这个术语更为恰当。单词“产品”也暗示着某种质量附带，某种程度的专业性和可靠性。这就是为什么数据契约与数据产品密切相关，数据产品是更抽象的数据契约的具象化体现。
- en: Data products are very similar to the REST APIs on the software side. It comes
    down to the opening up of communication channels between teams, the rigorous specification
    of the shape of the data (including the time zone from Chad’s words earlier),
    careful evolution as inevitable changes occur, and the commitment of the data
    producers to maintain stable data APIs for the consumers. The difference is that
    a data product will typically be a table or a stream (the data itself), rather
    than an HTTP REST API, which typically drives some logic or retrieves a single
    entity per call.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 数据产品与软件端的REST API非常相似。它归结为团队之间开启沟通渠道、严格规范数据形状（包括从查德的言论中提到的时区）、随着不可避免的变化小心演进，以及数据生产者承诺为消费者维护稳定的数据API。不同之处在于，数据产品通常是表格或流（数据本身），而不是HTTP
    REST API，后者通常驱动某些逻辑或每次调用时检索一个实体。
- en: Another key insight is that just as APIs make services reusable in a predictable
    way, data products make data processing work more reusable. In the software world,
    once the Orders API has been released, all downstream services that need to interact
    with the orders sub-system do so via that API. There aren’t a handful of single-use
    interfaces set up for each downstream use case. Yet that is exactly what we often
    see in data engineering, with single-use pipelines and multiple copies of the
    source data for different use cases.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关键的见解是，正如API使得服务以可预测的方式可重用，数据产品则使得数据处理工作更具可重用性。在软件领域，一旦“订单API”发布，所有需要与订单子系统交互的下游服务都会通过该API进行操作。并不会为每个下游使用场景建立一堆一次性接口。然而，这正是我们在数据工程中常见的现象，即单次使用的管道和为不同使用场景复制的源数据。
- en: Simply put, software engineering promotes reusability in software through modularity
    (be it actual software modules or APIs). Data products do the same for data.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，软件工程通过模块化（无论是实际的软件模块还是API）促进了软件的可重用性。数据产品在数据方面也做到了这一点。
- en: Shift Left
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向左移
- en: Shift Left came out of the cybersecurity space. Security has also historically
    been another silo where software and security teams operate under different reporting
    structures, use different tools, have different incentives, and share little common
    vocabulary. The result has been a growing security crisis that we’ve become so
    used to now that the next multi-million record breach barely gets reported. We’re
    so used to it that we might not even consider it a crisis, but when you look at
    the trail of destruction left by ransomware gangs, information stealers, and extortionists,
    it’s hard to argue that this should be business as usual.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Shift Left 概念源于网络安全领域。安全 historically 也是另一个孤岛，软件团队和安全团队各自有不同的报告结构、工具、激励措施，并且共享的词汇极少。结果是，我们已习惯了日益严重的安全危机，以至于下一个百万级数据泄露事件几乎没有被报道。我们已对它麻木，以至于可能不会认为这是个危机，但当你看到勒索软件团伙、信息窃取者和勒索者留下的破坏痕迹时，很难说这应该当作日常业务来处理。
- en: The idea of Shift Left is to shift the security focus left to where software
    is being developed, rather than being applied after the fact, by a separate team
    with little knowledge of the software being developed, modified, and deployed.
    Not only is it about integrating security earlier in the development process,
    it’s also about improving the quality of cyber telemetry. The heterogeneity and
    general “messiness” of cyber telemetry drive this movement of shifting processing,
    clean up, and contextualization to the left where the data production is. Reasoning
    about this data becomes so challenging once provenance is lost. While cyber data
    is unusually challenging, the lessons learned in this space are generalizable
    to other domains, such as data analytics.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Shift Left 的理念是将安全关注点向左移，即将安全措施嵌入到软件开发的过程中，而不是由一个与正在开发、修改和部署的软件几乎没有关联的独立团队在事后应用。它不仅仅是将安全集成到开发过程中，更是关于提高网络遥测数据的质量。网络遥测的异质性和普遍的“混乱”促使了这一将处理、清理和上下文化工作移到数据产生源头的运动。一旦失去来源信息，推理这些数据就变得异常具有挑战性。虽然网络数据异常具有挑战性，但在这一领域的经验教训是可以推广到其他领域的，例如数据分析。
- en: The similarity of the silos of cybersecurity and data analytics is striking.
    Silos assume that the silo function can operate as a discrete unit, separated
    from other business functions. However, both cybersecurity and data analytics
    are cross-functional and must interact with many different areas of a business.
    Cross-functional teams can’t operate to the side, behind the scenes, or after
    the fact. Silos don’t work, and shift-left is about toppling the silos and replacing
    them with something less centralized and more embedded in the process of software
    development.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 网络安全孤岛与数据分析孤岛的相似性令人震惊。孤岛假设孤岛功能可以作为一个独立的单元运作，与其他业务功能分离。然而，网络安全和数据分析都是跨职能的，它们必须与企业中的许多不同领域互动。跨职能团队不能在幕后、事后或者旁边运作。孤岛行不通，而Shift
    Left则是要推翻这些孤岛，并用一些更加嵌入在软件开发过程中、不那么集中化的方式替代它们。
- en: Bernd Wessely wrote a [fantastic article](/data-architecture-lessons-learned-3589b152a8a6)
    on [TowardsDataScience](https://towardsdatascience.com/) about the silo problem.
    In it he argues that the data analytics silo can be so engrained that the current
    practices are not questioned. That the silo comprised of an ingest-then-process
    paradigm is “*only a workaround for inappropriate data management. A workaround
    necessary because of the completely inadequate way of dealing with data in the
    enterprise today.*”
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Bernd Wessely 在 [TowardsDataScience](https://towardsdatascience.com/) 上写了一篇关于“信息孤岛”问题的[精彩文章](/data-architecture-lessons-learned-3589b152a8a6)。他在文中指出，数据分析孤岛问题已经根深蒂固，以至于当前的实践几乎没有受到质疑。他认为，由“先接收再处理”组成的数据孤岛，“*只是一个不合适的数据管理方式的临时解决方案。这个临时解决方案是因为当前企业在处理数据时的方式完全不适当所必需的*。”
- en: The sad thing is that none of this is new. I’ve been reading articles about
    breaking silos all my career, and yet here we are in 2024, still talking about
    the need to break them! But break them we must!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 可悲的是，这一切并不新鲜。我从职业生涯开始就一直在阅读关于打破信息孤岛的文章，然而我们依然在2024年讨论打破孤岛的必要性！但我们必须打破它们！
- en: If the data silo is the centralized monolith, separated from the rest of an
    organization’s software, then shifting left is about integrating the data infrastructure
    into where the software lives, is developed, and operated.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据孤岛是那个与组织其他软件分离的集中式庞然大物，那么Shift Left 就是要将数据基础设施集成到软件开发、运营所在的环境中。
- en: Service B didn’t just reach into the private internals of Service A; instead,
    an interface was created that allowed Service A to get data from Service B without
    violating encapsulation. This interface, an API, queue, or stream, became a stable
    method of data consumption that didn’t break every time Service A needed to change
    its hidden internals. The burden of providing that interface was placed on the
    team of Service A because it was the right solution, but there was also a business
    case to do so. The same applies with Shift Left; instead of placing the ownership
    of making data available on the person who wants to use the data, you place that
    ownership upstream to where the data is produced and maintained.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 服务 B 不仅仅是直接访问服务 A 的私有内部；相反，创建了一个接口，允许服务 A 在不违反封装的情况下从服务 B 获取数据。这个接口——无论是 API、队列还是流——成为了一种稳定的数据消费方式，不会因为每次服务
    A 需要更改其隐藏的内部结构时而中断。提供该接口的责任落在了服务 A 的团队上，因为这是正确的解决方案，但这背后也有商业理由。同样的原则适用于 Shift
    Left；与其将使数据可用的责任放在需要使用数据的人身上，不如将这个责任上游，交给数据产生和维护的地方。
- en: At the center of this shift to the left is the data product. The data product,
    be it an event stream or an Iceberg table, is often best managed by the team that
    owns the underlying data. This way, we avoid the kludges, the rushed, jerry-rigged
    solutions that bypass good practices.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个向左转变的核心是数据产品。无论是事件流还是 Iceberg 表格，数据产品通常最好由拥有底层数据的团队来管理。这样，我们就避免了那些临时的、仓促的解决方案，这些解决方案绕过了良好的实践。
- en: 'To make this a reality, we need the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，我们需要以下条件：
- en: Communication and alignment between the parties involved. It takes a level of
    business maturity to get there, but until we do, we’ll be talking about breaking
    the silos in ten or twenty years’ time or until AI replaces us all.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各方之间的沟通与协调。这需要一定的业务成熟度才能实现，但在我们做到之前，我们会在未来十年或二十年内继续谈论打破孤岛，或者直到人工智能取代我们为止。
- en: Technological solutions to make it easier to produce, maintain, and support
    data products.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使生产、维护和支持数据产品更加容易的技术解决方案。
- en: We see a lot happening in this space, from catalogs, governance tooling, table
    formats such as Apache Iceberg, and a wealth of event streaming options. There
    is a lot of open source here but also a large number of vendors. The technologies
    and practices for building data products are still early in their evolution, but
    expect this space to develop rapidly.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到这个领域正在发生许多变化，从目录、治理工具、表格格式（如 Apache Iceberg）到丰富的事件流选项。这里有大量的开源项目，也有大量的供应商。构建数据产品的技术和实践仍处于早期阶段，但预计这个领域将迅速发展。
- en: Conclusions
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: You’d think that the majority of data platform engineering is solving tech problems
    at large scale. Unfortunately it’s once again the people problem that’s all-consuming.
    — [Birdy](https://x.com/CorvusCrypto/status/1844665780522106893)
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可能会认为大多数数据平台工程是在解决大规模的技术问题。不幸的是，再次是人与人之间的问题占据了主导地位。— [Birdy](https://x.com/CorvusCrypto/status/1844665780522106893)
- en: Organizations are becoming software, and software is organized according to
    the communication structure of the business; ergo, if we want to fix the software/data/security
    silo problem, then the solution is in the communication structure.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 组织正在变成软件，而软件则根据业务的沟通结构进行组织；因此，如果我们想要解决软件/数据/安全孤岛问题，那么解决方案就在沟通结构中。
- en: The most effective way to make data analytics more impactful in the enterprise
    is to fix the Conway’s Law problem. It has led to both a cultural and technological
    separation of data teams from the wider software engineering discipline, as well
    as weak communication structures and a lack of common understanding.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让数据分析在企业中更具影响力的最有效方法是解决康威定律问题。它导致了数据团队与更广泛的软件工程学科的文化和技术分离，以及沟通结构薄弱和缺乏共同理解。
- en: 'The result has been:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是：
- en: 'Poor cooperation and coordination between the two sides, leading to:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双方之间的合作与协调不良，导致了：
- en: – Kludgey integrations between the operational plane (the software services)
    and the data analytics plane.
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: – 在操作层面（软件服务）和数据分析层面之间的混乱集成。
- en: – Constant break-fix work in the analytics plane in response to changes made
    in the operational plane.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: – 针对操作层面所做的更改，数据分析层面不断进行修复工作。
- en: The huge number of great practices that software engineers use to make software
    development less costly and more reliable is overlooked.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件工程师用来使软件开发更具成本效益和可靠性的众多优秀实践往往被忽视。
- en: 'The barriers to achieving the vision of a more integrated software and data
    analytics world are the continued isolation of data teams and the misalignment
    of incentives that impede the cooperation between software and data teams. I believe
    that organizations that embrace #OneTeam, and get these two sides talking, collaborating,
    and perhaps even merging to some extent will see the greatest ROI. Some organizations
    may already have done so, but it is by no means widespread.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 实现更为一体化的软件和数据分析世界的障碍在于数据团队的持续孤立，以及激励机制的不对齐，这阻碍了软件团队和数据团队之间的合作。我相信，拥抱#OneTeam的组织，能够让这两个团队进行对话、合作，甚至在某些程度上融合，将会看到最大的投资回报。一些组织可能已经这样做了，但这还远未普及。
- en: Things are changing; attitudes are changing. *Data engineering is software engineering*,
    *data contracts/products*, and the emergence of *Shift Left* are all leading indicators.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 事物在变化，态度也在变化。*数据工程就是软件工程*，*数据契约/产品*，以及*向左转*的兴起，都是重要的领先指标。
