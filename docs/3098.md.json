["```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.dates as mdates\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\nfrom matplotlib import rcParams\nfrom matplotlib.path import Path\nfrom matplotlib.patches import PathPatch\n\nnp.random.seed(38)\n```", "```py\ndates = pd.date_range(start='2024-02-01', periods=100, freq='D')\ninitial_rate = 75\ndrift = 0.003\nvolatility = 0.1\nreturns = np.random.normal(drift, volatility, len(dates))\nrates = initial_rate * np.cumprod(1 + returns)\n\nx, y = dates, rates\n```", "```py\nfix, ax = plt.subplots(figsize=(8, 4))\nax.plot(dates, rates)\nax.xaxis.set_major_locator(mdates.DayLocator(interval=30))\nplt.show()\n```", "```py\n# General parameters\nfig, ax = plt.subplots(figsize=(10, 6))\nplt.title(\"Daily visitors\", fontsize=18, color=\"black\")\nrcParams['font.family'] = 'DejaVu Sans'\nrcParams['font.size'] = 14\n\n# Axis Y to the right\nax.yaxis.tick_right()\nax.yaxis.set_label_position(\"right\")\n\n# Plotting main line\nax.plot(dates, rates, color='#268358', linewidth=2)\n```", "```py\n# Grid\nax.grid(color=\"gray\", linestyle=(0, (10, 10)), linewidth=0.5, alpha=0.6)\nax.tick_params(axis=\"x\", colors=\"black\")\nax.tick_params(axis=\"y\", left=False, labelleft=False) \n\n# Borders\nax.spines[\"top\"].set_visible(False)\nax.spines['right'].set_visible(False)\nax.spines[\"bottom\"].set_color(\"black\")\nax.spines['left'].set_color('white')\nax.spines['left'].set_linewidth(1)\n\n# Remove ticks from axis Y\nax.tick_params(axis='y', length=0)\n```", "```py\n# Add year to the first date on the axis\ndef custom_date_formatter(t, pos, dates, x_interval):\n    date = dates[pos*x_interval]\n    if pos == 0:\n        return date.strftime('%d %b \\'%y')  \n    else:\n        return date.strftime('%d %b')  \nax.xaxis.set_major_formatter(ticker.FuncFormatter((lambda x, pos: custom_date_formatter(x, pos, dates=dates, x_interval=x_interval))))\n\n# Ticks label color\n[t.set_color('#808079') for t in ax.yaxis.get_ticklabels()]\n[t.set_color('#808079') for t in ax.xaxis.get_ticklabels()]\n```", "```py\n# Gradient\nnumeric_x = np.array([i for i in range(len(x))])\nnumeric_x_patch = np.append(numeric_x, max(numeric_x))\nnumeric_x_patch = np.append(numeric_x_patch[0], numeric_x_patch)\ny_patch = np.append(y, 0)\ny_patch = np.append(0, y_patch)\n\npath = Path(np.array([numeric_x_patch, y_patch]).transpose())\npatch = PathPatch(path, facecolor='none')\nplt.gca().add_patch(patch)\n\nax.imshow(numeric_x.reshape(len(numeric_x), 1),  interpolation=\"bicubic\",\n                cmap=plt.cm.Greens, \n                origin='lower',\n                alpha=0.3,\n                extent=[min(numeric_x), max(numeric_x), min(y_patch), max(y_patch) * 1.2], \n                aspect=\"auto\", clip_path=patch, clip_on=True)\n```"]