- en: 'A Graph Too Far: Graph RAG Doesn’t Require Every Graph Tool'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 《走得太远：图形RAG并不需要每个图形工具》
- en: 原文：[https://towardsdatascience.com/a-graph-too-far-graph-rag-doesnt-require-every-graph-tool-5f9adb227bdf?source=collection_archive---------2-----------------------#2024-10-18](https://towardsdatascience.com/a-graph-too-far-graph-rag-doesnt-require-every-graph-tool-5f9adb227bdf?source=collection_archive---------2-----------------------#2024-10-18)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-graph-too-far-graph-rag-doesnt-require-every-graph-tool-5f9adb227bdf?source=collection_archive---------2-----------------------#2024-10-18](https://towardsdatascience.com/a-graph-too-far-graph-rag-doesnt-require-every-graph-tool-5f9adb227bdf?source=collection_archive---------2-----------------------#2024-10-18)
- en: Don’t complicate things with graph DBs, QLs, or graph analytics.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要用图形数据库（DBs）、图形查询语言（QLs）或图形分析来让事情变得复杂。
- en: '[](https://medium.com/@briangodsey?source=post_page---byline--5f9adb227bdf--------------------------------)[![Brian
    Godsey](../Images/1a657e68741618b79bf470f34f9f3b26.png)](https://medium.com/@briangodsey?source=post_page---byline--5f9adb227bdf--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--5f9adb227bdf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--5f9adb227bdf--------------------------------)
    [Brian Godsey](https://medium.com/@briangodsey?source=post_page---byline--5f9adb227bdf--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@briangodsey?source=post_page---byline--5f9adb227bdf--------------------------------)[![Brian
    Godsey](../Images/1a657e68741618b79bf470f34f9f3b26.png)](https://medium.com/@briangodsey?source=post_page---byline--5f9adb227bdf--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--5f9adb227bdf--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--5f9adb227bdf--------------------------------)
    [Brian Godsey](https://medium.com/@briangodsey?source=post_page---byline--5f9adb227bdf--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--5f9adb227bdf--------------------------------)
    ·12 min read·Oct 18, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--5f9adb227bdf--------------------------------)
    ·12分钟阅读·2024年10月18日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/fbb333412bda0047d5d7d41a8c08eb97.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fbb333412bda0047d5d7d41a8c08eb97.png)'
- en: 'Adventures in the Knowledge Graph: Lost in Endless Documents. Generated by
    Brian Godsey using DALL-E.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱的冒险：迷失在无尽的文档中。由Brian Godsey使用DALL-E生成。
- en: 'When RAG developers decide to try graph RAG — that is, to build a knowledge
    graph and integrate it into their RAG (retrieval-augmented generation) system
    — they have a lot of options and choices to make, according to the internet. There
    are lots of articles, guides, and how-to’s presenting different tools for working
    with graph RAG and graphs in general. So some developers dive right in, thinking
    they need to integrate and configure a laundry list of graph tools and techniques
    in order to do graph RAG properly. When searching how to get started, you would
    typically find articles suggesting that you need some or all of the following:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当RAG开发者决定尝试图形RAG——即构建一个知识图谱并将其集成到他们的RAG（检索增强生成）系统中时，根据互联网的信息，他们面临着大量的选择和决策。有很多文章、指南和操作手册介绍了如何使用图形RAG以及图形的其他工具。所以，一些开发者直接跳入其中，认为他们需要集成和配置一长串图形工具和技术，才能正确实现图形RAG。在寻找如何入门时，通常会找到一些文章，建议你需要以下的一些或所有内容：
- en: '**knowledge graphs** — to connect key terms and concepts that semantic search
    doesn’t capture'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**知识图谱**——连接语义搜索无法捕获的关键术语和概念'
- en: '**keyword and entity extraction tools** — for building the knowledge graph'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**关键词和实体提取工具**——用于构建知识图谱'
- en: '**graph traversal algorithms** — for exploring connections in the graph'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**图形遍历算法**——用于探索图中的连接'
- en: '**property graph implementations** — for enriching graph structure and traversal
    methods'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**属性图实现**——用于丰富图形结构和遍历方法'
- en: '**graph databases (DBs)** — for storing and interacting with graphs, and advanced
    graph analytics'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**图形数据库（DBs）**——用于存储和交互图形，以及高级图形分析'
- en: '**graph query languages (QLs)** — for sophisticated querying of graph nodes
    and edges'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**图形查询语言（QLs）**——用于对图形节点和边进行复杂查询'
- en: '**graph node embedding algorithms** — for embedding graph objects into searchable
    vector spaces'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**图形节点嵌入算法**——用于将图形对象嵌入可搜索的向量空间'
- en: '**vector stores** — for storing and searching documents embedded in semantic
    vector space'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**向量存储**——用于存储和搜索嵌入语义向量空间中的文档'
- en: 'Certainly, a case can be made that each of these tools and implementations
    can be very helpful for specific graph use cases. But for any developer starting
    a typical graph RAG use case, the simple fact remains: **most “graph” tools were
    designed and built long before the generative AI revolution.** GenAI use cases
    are fundamentally different from traditional graph use cases, and requires a different
    approach, even if some tools can be shared between the two.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，可以说这些工具和实现对特定的图形使用案例非常有帮助。但对于任何开始典型图形RAG使用案例的开发者来说，简单的事实仍然是：**大多数“图形”工具在生成式AI革命之前就已经设计和构建完成了。**
    生成式AI使用案例与传统的图形使用案例在本质上是不同的，需要一种不同的方法，即使某些工具可以在两者之间共享。
- en: The above list of suggested tools for graph RAG includes some that are generally
    unnecessary for typical GenAI use cases. And, beyond being unnecessary, adding
    some of these tools can over-complicate things — leading to increased development
    time, higher costs, and additional maintenance overhead that could have been avoided.
    Keeping the tech stack simple by focusing on the essentials enhances efficiency
    and lets you leverage the power of graph RAG without the bloat.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上述建议的图形RAG工具清单中包含一些对于典型生成式AI（GenAI）使用案例来说通常不必要的工具。而且，除了不必要之外，加入这些工具可能会使事情变得过于复杂——导致开发时间增加、成本提高，并且产生额外的维护开销，这些本可以避免。通过专注于基本要素来保持技术栈的简洁，可以提高效率，并让你在不增加负担的情况下充分发挥图形RAG的优势。
- en: '**One popular misconception is that you need a graph DB to do graph RAG.**
    Graph DBs and graph query languages (graph QLs) are powerful tools for graph analytics
    and deep graph algorithms, but graph RAG and GenAI applications don’t typically
    benefit from these types of traditional graph analytics. Graph DBs can support
    graph RAG, but they also add unnecessary complexity to the stack. We dive into
    this topic more below.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个常见的误解是，进行图形RAG需要图形数据库（Graph DB）。** 图形数据库和图形查询语言（Graph QL）是强大的图形分析工具和深度图形算法，但图形RAG和生成式AI应用通常并不从这些传统的图形分析中受益。图形数据库可以支持图形RAG，但它们也会给技术栈带来不必要的复杂性。我们将在下面深入探讨这个话题。'
- en: In this article, we discuss the software needs of various use cases involving
    graphs, focusing on GenAI use cases and applications, and minimizing additional
    effort and complexity when moving from plain RAG to graph RAG. In most cases,
    we don’t need an extensive list of tools; adopting a few key technologies aligned
    with our goals not only simplifies our work but often achieves better results.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们讨论了涉及图形的各种使用案例的软件需求，重点讨论了生成式AI使用案例和应用，并在从普通RAG转向图形RAG时尽量减少额外的努力和复杂性。在大多数情况下，我们不需要一个庞大的工具清单；采用与我们目标一致的几个关键技术，不仅能简化我们的工作，还能通常取得更好的结果。
- en: GenAI use cases for graphs
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成式AI图形使用案例
- en: 'Semantic vector search is powerful for finding documents that are contextually
    similar to a query. However, there are situations where this method falls short,
    especially when the required information is non-semantic or when deeper insights
    into the data are necessary. Graph RAG technologies can complement the capabilities
    of vector search by leveraging non-semantic information — such as in the following
    common use cases:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 语义向量搜索在查找与查询上下文相似的文档时非常强大。然而，仍然存在一些情况，这种方法表现不佳，尤其是当所需信息是非语义的，或者需要更深入的数据洞察时。图形RAG技术可以通过利用非语义信息来补充向量搜索的能力——例如在以下常见的使用场景中：
- en: Leveraging non-semantic information in documents
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用文档中的非语义信息
- en: While semantic search excels in identifying documents based on contextual similarity,
    it often misses non-semantic cues crucial for comprehensive data analysis. Graphs
    can [incorporate and utilize non-semantic information such as metadata](https://thenewstack.io/boost-llm-results-when-to-use-knowledge-graph-rag/),
    which can include links, specialized terms and definitions, cross-references,
    glossaries, and document structure such as titles, headings, and sub-section content..
    Additionally, graphs can connect entities, keywords, and concepts that have been
    extracted or inferred from texts.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然语义搜索在根据上下文相似性识别文档方面表现出色，但它通常忽略了非语义线索，而这些线索对于全面的数据分析至关重要。图形可以[结合和利用非语义信息，如元数据](https://thenewstack.io/boost-llm-results-when-to-use-knowledge-graph-rag/)，这些信息可以包括链接、专有术语和定义、交叉引用、词汇表以及文档结构，如标题、章节标题和子部分内容。此外，图形还可以连接从文本中提取或推断出的实体、关键词和概念。
- en: Community summarization
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区总结
- en: When the goal is to summarize the content from a community or a specific group
    of interconnected entities, graph-based approaches can be indispensable. Graphs
    can identify clusters or communities within the data, summarizing prevalent themes
    or discussions across multiple documents or contributors.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当目标是总结来自某个社区或特定群体的内容时，基于图形的方法可以发挥不可或缺的作用。图形可以识别数据中的簇或社区，总结跨多个文档或贡献者的流行主题或讨论。
- en: Neighborhood exploration
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 邻域探索
- en: Exploring the “neighborhood” or immediate connections of a particular node or
    query in a graph can reveal relationships and insights that are not evident through
    semantic search alone. Contextual exploration allows for traversing from a starting
    node to explore adjacent nodes (documents, terms, or concepts) to discover related
    information that adds depth to the initial query.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 探索图形中某个特定节点或查询的“邻域”或直接连接可以揭示通过语义搜索无法显现的关系和洞察。上下文探索允许从起始节点出发，探索相邻节点（文档、术语或概念），以发现相关信息，从而为初始查询增加深度。
- en: '![](../Images/66b59f0da4f47b226a9647b5bc919d1c.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66b59f0da4f47b226a9647b5bc919d1c.png)'
- en: 'Adventures in the Knowledge Graph: Graphs in Toyland. Generated by Brian Godsey
    using DALL-E.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱中的冒险：玩具世界中的图形。由Brian Godsey使用DALL-E生成。
- en: Why GenAI is different from traditional graph use cases
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么生成性人工智能与传统图形使用案例不同
- en: Before there was generative AI, there were knowledge graphs and graph DBs. These
    graph tools pre-date GenAI by many years, and some associated technologies were
    designed for very different use cases. These technologies were primarily aimed
    at structured data exploration, not the unstructured text processing and semantic
    understanding that GenAI excels at.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成性人工智能出现之前，有知识图谱和图数据库。这些图形工具早于生成性人工智能很多年，部分相关技术是为非常不同的使用案例设计的。这些技术主要用于结构化数据的探索，而不是生成性人工智能擅长的非结构化文本处理和语义理解。
- en: The shift from traditional graph use cases to generative AI is a significant
    change in data handling techniques. Traditional graphs are excellent for clear,
    defined relationships, but they often lack the flexibility needed for the nuanced
    demands of generative AI.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从传统图形使用案例到生成性人工智能的转变，是数据处理技术中的一个重要变化。传统图形非常适合清晰、明确的关系，但它们通常缺乏应对生成性人工智能细微需求所需的灵活性。
- en: Traditional graph tools were built for huge, complex graphs
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传统图形工具是为处理庞大、复杂的图形而构建的
- en: Knowledge graphs are often the aggregation of large amounts of data from various
    sources, linking complex and interdependent relationships across a wide spectrum
    of data points. A huge number of nodes and edges, coupled with the complexity
    of their connections, can make data processing and analysis tasks computationally
    intensive and time-consuming.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱通常是来自多个来源的大量数据的聚合，连接了跨多个数据点的复杂且相互依赖的关系。节点和边的巨大数量，加上它们连接的复杂性，会使得数据处理和分析任务在计算上变得密集且耗时。
- en: This is why graph databases (graph DBs) were originally created. They provide
    optimized storage solutions and processing capabilities designed to manage extensive
    networks of nodes and edges efficiently. Alongside graph DBs, graph query languages
    (graph QLs) have been designed to facilitate sophisticated query operations on
    these large graphs and their subgraphs. These tools excel at executing operations
    that involve deep traversals, pattern matching, and dynamic data aggregation,
    which are typical in graph analytics. Common use cases for graph DBs and graph
    analytics include social network analysis, recommendation systems, fraud detection,
    and complex network management. In these scenarios, the ability to quickly and
    efficiently analyze complex relationships within large sets of data is crucial.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是图数据库（graph DBs）最初创建的原因。它们提供了优化的存储解决方案和处理能力，旨在高效地管理庞大的节点和边的网络。与图数据库一起，图查询语言（graph
    QLs）被设计用来便捷地对这些大型图形及其子图执行复杂的查询操作。这些工具擅长执行涉及深度遍历、模式匹配和动态数据聚合的操作，这些操作在图形分析中很常见。图数据库和图形分析的常见使用案例包括社交网络分析、推荐系统、欺诈检测和复杂网络管理。在这些场景中，快速高效地分析大数据集中的复杂关系至关重要。
- en: 'Some canonical use cases for graph DBs and QLs:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图数据库（graph DBs）和图查询语言（graph QLs）的某些经典使用案例：
- en: '**Centrality analysis** — Identify the most influential people within a social
    network. Involves centrality measures such as Degree Centrality, Betweenness Centrality,
    and Eigenvector Centrality'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中心性分析** — 识别社交网络中最具影响力的人物。涉及中心性度量，如度数中心性、介数中心性和特征向量中心性'
- en: '**Community detection** — Segment the network into communities or clusters
    where members are more densely connected internally than with the rest of the
    network. Involves graph clustering algorithms and edge-betweenness community detection.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区检测** — 将网络划分为社区或簇，其中成员之间的内部连接比与网络其他部分的连接更为紧密。涉及图聚类算法和边缘介入度社区检测。'
- en: '**Pathfinding** — Find the shortest path between two nodes to understand the
    degrees of separation between individuals. Involves algorithms like Dijkstra’s
    or A* (A-star) for shortest path calculations.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径寻找** — 找到两个节点之间的最短路径，以了解个体之间的分离度。涉及诸如 Dijkstra 算法或 A*（A-star）算法等最短路径计算算法。'
- en: Of course, there are many other use cases of sophisticated graph querying and
    graph analytics that traditional graph tools were designed for and excel at. But,
    the examples given here, as well as many others, are very different from the graph
    use cases we see today in GenAI applications.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有许多其他复杂的图查询和图分析用例，这是传统图工具所设计并擅长的。但这里给出的例子，以及许多其他例子，与我们今天在生成式 AI 应用中看到的图用例有很大的不同。
- en: Knowing all of this, why would we start building a graph RAG system using a
    graph DB that added vector storage and search as a secondary feature… when modern
    vector stores are perfectly capable of supporting all of the graph operations
    that we need for graph RAG? We shouldn’t, and we dig more into how vector stores
    work with graph operations in the next section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 知道了这些，为什么我们要使用图数据库来构建图 RAG 系统，而将向量存储和搜索作为附加功能，**当现代向量存储完全能够支持我们需要的所有图操作**时呢？我们不应该这么做，接下来我们将深入探讨向量存储如何与图操作配合工作。
- en: Both graph RAG and vector search operate locally
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图 RAG 和向量搜索都在本地操作
- en: Previously, I listed “neighborhood exploration” as one application for graphs
    in GenAI use cases, but conceptually speaking, it can be considered a broad umbrella
    term under which you can find virtually all graph use cases within GenAI. In other
    words, when we use graphs with GenAI, we are almost certainly exploring only neighborhoods
    — and very rarely a whole graph or large parts of graphs. At most, we explore
    subgraphs that are quite small relative to the whole graph.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我将“邻域探索”列为生成式 AI 用例中图的一种应用，但从概念上讲，它可以被视为一个广义的术语，几乎可以涵盖生成式 AI 中所有的图用例。换句话说，当我们在生成式
    AI 中使用图时，我们几乎肯定只是在探索邻域——很少会探索整个图或图的大部分。最多，我们会探索相对于整个图而言相当小的子图。
- en: In graph theory, a “neighborhood” refers to the set of nodes adjacent to a given
    node within a graph, as defined by direct links or edges. So, retrieving neighbors
    of a node in a knowledge graph should result in a set of items or concepts that
    are directly related to the starting node. Similarly, in vector search, standard
    implementations return “approximate nearest neighbors” (ANN) in semantic vector
    space, meaning that the documents in the results set are those most closely related
    to the query, in a semantic sense. (ANN is “approximate” because making it exact
    is much slower and more expensive.)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在图论中，“邻域”指的是一个图中与给定节点相邻的一组节点，这些节点通过直接链接或边缘相连。因此，从知识图中检索节点的邻居应该返回一组与起始节点直接相关的项目或概念。类似地，在向量搜索中，标准实现返回“近似最近邻”（ANN），即在语义向量空间中与查询最相关的文档。
    （ANN之所以是“近似的”，是因为要使其精确会更慢且更昂贵。）
- en: So, both vector search and graph traversal a few steps from a starting node
    are both looking for “nearest neighbors”, where “nearest” has a different meaning
    in each of the two cases. Vector search finds the nearest semantic neighbors and
    graph traversal finds graph neighbors — which, if integrated well, can pull together
    documents that are related in both semantic ways and a wide variety of non-semantic
    ways that are limited only by how you construct your knowledge graph.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，向量搜索和从起始节点开始的图遍历都在寻找“最近邻”，其中“最近”在两种情况下的含义不同。向量搜索寻找最近的语义邻居，而图遍历则寻找图的邻居——如果集成得当，可以将语义上和多种非语义方式相关的文档汇聚在一起，这些方式的限制仅受你如何构建知识图的影响。
- en: The important point here is to note that graph RAG is entirely concerned with
    exploring local neighborhoods, whether graph or vector — just like RAG always
    has on the purely vector side.The implication is that our graph RAG software stack
    should be built on a foundation that excels at local neighborhood search and retrieval,
    because all of our queries in GenAI apps are focused on specific areas of knowledge
    that do not require comprehensive explorations or analytics of the entire knowledge
    graph.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的重点是，图形 RAG 完全关注于探索局部邻域，无论是图形还是向量 —— 就像 RAG 始终专注于纯向量侧面一样。其含义是，我们的图形 RAG
    软件栈应建立在擅长局部邻域搜索和检索的基础上，因为我们在生成型人工智能（GenAI）应用中的所有查询都聚焦于特定领域的知识，这些领域不需要对整个知识图谱进行全面的探索或分析。
- en: '![](../Images/d69c9cdab654149171a029bcaf575151.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d69c9cdab654149171a029bcaf575151.png)'
- en: 'Adventures in the Knowledge Graph: Graphs in Reality. Generated by Brian Godsey
    using DALL-E.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱的冒险：现实中的图谱。由 Brian Godsey 使用 DALL-E 生成。
- en: 'A-la-carte graph tools: adopt only what you need'
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单点选择图形工具：只采纳你所需要的
- en: Returning to the “laundry list” of graph tools from the beginning of this article,
    let’s have a closer look at when you might want to adopt them as part of your
    graph RAG stack, or not.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 回到本文开头提到的“图形工具清单”，让我们更仔细地看看，何时你可能希望将它们作为图形 RAG 堆栈的一部分，或者选择不使用它们。
- en: Knowledge graphs
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 知识图谱
- en: '**When to adopt** — Always, in some form. A knowledge graph is a core part
    of graph RAG.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时采用** — 永远以某种形式采用。知识图谱是图形 RAG 的核心部分。'
- en: '**When to avoid —** Never, unless getting rid of graph RAG in favor of plain
    RAG.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时避免 —** 永远不要，除非是为了替换图形 RAG，改用普通的 RAG。'
- en: Entity and keyword extraction tools
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实体和关键词提取工具
- en: '**When to adopt** — When building a knowledge graph directly from textual content
    where automated extraction can efficiently populate your graph with relevant entities
    and keywords.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时采用** — 当直接从文本内容构建知识图谱时，通过自动化提取能够高效地将相关实体和关键词填充到你的图谱中。'
- en: '**When to avoid** — If your data doesn’t lend itself well to automated extraction
    or when alternative methods like [document linking](/your-documents-are-trying-to-tell-you-whats-relevant-better-rag-using-links-386b7433d0f2),
    manual curation, or specialized parsers better suit your data and use case.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时避免** — 如果你的数据不适合自动化提取，或者当像[文档链接](/your-documents-are-trying-to-tell-you-whats-relevant-better-rag-using-links-386b7433d0f2)、手动策划或专门的解析器等替代方法更适合你的数据和用例时。'
- en: Graph traversal algorithms
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形遍历算法
- en: '**When to adopt** — Always. A simple graph traversal algorithm is necessary
    for graph RAG, e.g. typically a simple walk of depth 1–3 from the starting node.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时采用** — 永远。一个简单的图形遍历算法是图形 RAG 必需的，例如通常从起始节点进行深度为 1–3 的简单遍历。'
- en: '**When to avoid —** While basic traversal is necessary, avoid overly complex
    algorithms unless your use case specifically demands advanced graph navigational
    capabilities.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时避免 —** 尽管基本的遍历是必要的，但除非你的应用场景特别需要高级的图形导航功能，否则应避免使用过于复杂的算法。'
- en: Property graph implementations
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性图实现
- en: '**When to adopt —** When your project requires sophisticated modeling of complex
    relationships and properties within edges that go well beyond basic linkage.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时采用 —** 当你的项目需要对边缘内复杂关系和属性进行精密建模，而这些内容远超基本的连接时。'
- en: '**When to avoid —** For most standard graph RAG implementations where such
    complexity in relationship modeling isn’t required. Simpler graph models typically
    suffice.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时避免 —** 对于大多数标准的图形 RAG 实现，在不需要进行复杂关系建模的情况下，通常简单的图形模型就足够了。'
- en: Graph databases
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形数据库
- en: '**When to adopt** — When dealing with extensive, complex queries and needing
    to perform advanced graph analytics and traversals that surpass the capabilities
    of standard systems.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时采用** — 当需要处理广泛复杂的查询，并且需要执行超出标准系统能力的高级图形分析和遍历时。'
- en: '**When to avoid** — If your graph RAG system does not engage in complex, extensive,
    graph-specific operations. Adopting a graph database in such scenarios can lead
    to unnecessary system complexity and resource allocation.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时避免** — 如果你的图形 RAG 系统不涉及复杂、广泛的图形特定操作。在这种情况下采用图形数据库可能会导致不必要的系统复杂性和资源分配。'
- en: Graph query languages (Graph QLs)
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图形查询语言（Graph QLs）
- en: '**When to adopt** — If adopting graph DBs. When complex querying of graph data
    is critical for your application, allowing sophisticated manipulation and retrieval
    of interconnected data.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时采用** — 如果采用图形数据库。当图形数据的复杂查询对你的应用至关重要时，这将允许你对互联数据进行复杂的操作和检索。'
- en: '**When to avoid** — For simpler graph RAG setups where basic retrieval methods
    suffice, incorporating a graph QL might over-complicate the architecture.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时避免** — 对于简单的图RAG设置，当基本的检索方法足够时，加入图QL可能会使架构过于复杂。'
- en: Graph node embedding algorithms
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图节点嵌入算法
- en: '**When to adopt** — When you have a graph, and want to convert graph nodes
    into vectors. This is a specialized use case with advantages and disadvantages.
    See [the popular algorithm node2vec](https://cs.stanford.edu/~jure/pubs/node2vec-kdd16.pdf).'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时采用** — 当你有一个图，并且想要将图节点转换为向量时。这是一个具有优缺点的专业用例。请参见[流行算法node2vec](https://cs.stanford.edu/~jure/pubs/node2vec-kdd16.pdf)。'
- en: '**When to avoid** — If your system does not require searching graph nodes as
    vectors.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时避免** — 如果你的系统不需要将图节点作为向量进行搜索。'
- en: Vector stores
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量存储
- en: '**When to adopt:** Always. Necessary, as they serve as the foundation for storing
    and searching high-dimensional vector representations crucial for RAG systems.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时采用**：始终需要。它们是必需的，因为它们作为存储和搜索对RAG系统至关重要的高维向量表示的基础。'
- en: '**When to avoid** — Never.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时避免** — 永远不要。'
- en: Each component’s inclusion should align with the specific needs and complexities
    of your graph RAG system, ensuring that every adopted technology adds value and
    enhances system performance without unnecessary complexity.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 每个组件的引入应与图RAG系统的具体需求和复杂性相匹配，确保每项采用的技术都能增加价值并提高系统性能，而不会增加不必要的复杂性。
- en: '![](../Images/86e3d22e148e9530f7e28bfa58506c86.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/86e3d22e148e9530f7e28bfa58506c86.png)'
- en: 'Adventures in the Knowledge Graph: Pop-Art Traversal. Generated by Brian Godsey
    using DALL-E.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱中的冒险：波普艺术遍历。由Brian Godsey使用DALL-E生成。
- en: Requirements of a minimal graph RAG system
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最小化图RAG系统的要求
- en: 'Considering the above notes on graph tools and techniques, these are the core
    components required for any graph RAG system:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到上述关于图工具和技术的说明，以下是任何图RAG系统所需的核心组件：
- en: '**Vector store** — Essential for any RAG framework, the vector store is even
    more crucial in graph RAG for maintaining the scalability and efficiency of document
    retrieval. Vector stores provide the infrastructure for storing and searching
    through documents embedded in a semantic vector space, which is fundamental to
    the retrieval process in RAG systems.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**向量存储** — 对任何RAG框架至关重要，在图RAG中，向量存储对维持文档检索的可扩展性和效率更为关键。向量存储提供了存储和搜索嵌入语义向量空间中文档的基础设施，这是RAG系统检索过程的基础。'
- en: '**Knowledge graph** — The defining concept of graph RAG vs plain RAG, the knowledge
    graph links key terms and concepts that semantic vector search might miss. This
    graph is vital for expanding the context and enhancing the relational data available
    to the RAG system, thus justifying its central role in graph RAG.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**知识图谱** — 图RAG与普通RAG的定义性概念，知识图谱连接了语义向量搜索可能遗漏的关键术语和概念。这个图对于扩展上下文和增强RAG系统可用的关联数据至关重要，从而证明了它在图RAG中的核心作用。'
- en: '**Graph traversal** — A simple graph traversal algorithm is necessary to navigate
    the knowledge graph. This component doesn’t need to be overly complex, as graph
    RAG primarily requires exploring local neighborhoods or small subgraphs directly
    related to the query, rather than deep or wide-ranging graph navigations.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**图遍历** — 一个简单的图遍历算法对于导航知识图谱是必要的。这个组件不需要过于复杂，因为图RAG主要需要探索与查询直接相关的局部邻域或小子图，而不是深度或广泛的图遍历。'
- en: For specialized use cases, or if the minimal implementation isn’t performing
    well enough, more graph tools and capabilities can be added — some important considerations
    are outlined in the next section.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于专业化的用例，或者如果最小化的实现性能不足时，可以添加更多的图工具和功能 — 一些重要的考虑因素将在下一节中概述。
- en: Start with vector, add “graph” as needed — not the other way around
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从向量开始，根据需要添加“图” — 而不是反过来
- en: 'When working with GenAI use cases, the foundations of knowledge are in vector
    space. We use vector-optimized tools like vector stores because they operate directly
    with the language of LLMs and other GenAI models — vectors. Our implementations
    of GenAI applications should be vector-first, because the most important vector
    operations (e.g. approximate nearest neighbor search) are expensive in both time
    and money, so we should optimize these for performance and efficiency. Adding
    graph to a GenAI application should be just that: adding graph capabilities to
    your existing vector-optimized infrastructure. Moving from vector-optimized to
    graph-native infrastructure may be needed in some specific use cases, but in the
    vast majority of cases it complicates the tech stack and makes deployment more
    challenging.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理 GenAI 用例时，知识的基础在于向量空间。我们使用像向量存储这样的向量优化工具，因为它们直接与 LLM 和其他 GenAI 模型的语言——向量——进行操作。我们的
    GenAI 应用实现应当以向量为先，因为最重要的向量操作（例如近似最近邻搜索）既耗时又昂贵，因此我们应优化这些操作的性能和效率。将图功能添加到 GenAI
    应用中，应该仅仅是将图能力添加到现有的向量优化基础设施中。在某些特定的使用案例中，可能需要从向量优化的基础设施迁移到图本地的基础设施，但在绝大多数情况下，这会使技术栈变得复杂，增加部署难度。
- en: When starting with a typical graph RAG implementation and considering the addition
    of more complex graph tools and capabilities, it is important to carefully evaluate
    the particular challenges and requirements of the use cases, rather than the common
    notion that more sophisticated or complex graph tools are inherently better for
    any graph use case.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始实施典型的图 RAG，并考虑增加更复杂的图工具和功能时，重要的是要仔细评估具体的挑战和使用案例的需求，而不是简单地认为更复杂或精密的图工具对任何图用例都是更好的。
- en: 'Here some some key considerations:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些关键考虑因素：
- en: '**Locality of graph operations** — In graph RAG, graph operations are predominantly
    local, involving only simple traversals within immediate neighborhoods and small
    subgraphs. This approach typically does not benefit from complex graph algorithms
    that might overcomplicate the retrieval process.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图操作的局部性** — 在图 RAG 中，图操作主要是局部的，只涉及在直接邻域和小子图中的简单遍历。这种方法通常不会从复杂的图算法中获益，因为这些算法可能会使检索过程过于复杂。'
- en: '**Capability of vector stores for graph operations** — Modern vector stores
    are quite capable of performing necessary graph operations, especially when the
    operations are not overly complex. This allows for a seamless integration where
    vector and graph technologies complement each other without the need for a separate
    graph database.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向量存储在图操作中的能力** — 现代向量存储在执行必要的图操作方面非常强大，尤其是当操作不太复杂时。这使得向量技术和图技术能够无缝集成，彼此互补，无需单独的图数据库。'
- en: '**Scalability and efficiency of modern vector stores** — Vector stores are
    designed to handle large-scale document data sets with high efficiency, making
    them ideal for the backbone of a RAG system where quick retrieval is paramount.
    Using graph capabilities directly within the vector store can also accommodate
    necessary graph operations without sacrificing performance.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**现代向量存储的可扩展性和效率** — 向量存储被设计用于高效处理大规模文档数据集，使其成为 RAG 系统的核心，特别是在快速检索至关重要的情况下。直接在向量存储中使用图能力也能满足必要的图操作而不牺牲性能。'
- en: '**Complexity of graph DBs, QLs, and analytics** — Introducing a graph database
    into the stack can complicate the software architecture unnecessarily. Given that
    the graph requirements in graph RAG typically do not require sophisticated large-graph
    operations, leveraging the existing capabilities of vector stores to handle these
    needs can be more efficient and keeps the system architecture simpler.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图数据库、查询语言和分析的复杂性** — 在技术栈中引入图数据库可能会不必要地复杂化软件架构。鉴于图 RAG 中的图需求通常不需要复杂的大规模图操作，利用现有的向量存储能力来处理这些需求可能更高效，并且能保持系统架构的简洁。'
- en: Each addition should be considered carefully to ensure it directly addresses
    a specific need without introducing undue complexity or overhead. This strategic
    approach ensures that enhancements are justified by tangible improvements in functionality
    or performance.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 每个新增功能都应谨慎考虑，确保它能够直接解决特定需求，而不引入不必要的复杂性或开销。这种战略方法确保增强功能能通过功能或性能的切实改进得到合理的支持。
- en: Simple ways to start doing graph RAG
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始进行图 RAG 的简单方法
- en: For a straight-forward and illustrative example of how to do graph RAG without
    any specialized graph tools beyond an open-source graph vector store implementation
    in LangChain, [see my previous article in Towards Data Science](https://bit.ly/3BKZAJv).
    Or, for a broader view of how to get started, see the [this guide to graph RAG](https://bit.ly/4862Lrl).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要一个简单明了的示例，了解如何在没有任何专业图形工具的情况下，仅通过 LangChain 中开源的图形向量存储实现图形 RAG，[请查看我在《Towards
    Data Science》上的上一篇文章](https://bit.ly/3BKZAJv)。或者，如果你想了解如何入门的更广泛视角，请参阅[这篇图形 RAG
    指南](https://bit.ly/4862Lrl)。
- en: '*by Brian Godsey, Ph.D. (*[*LinkedIn*](https://bit.ly/4enqFRa)*) — mathematician,
    data scientist and engineer // AI and ML products at* [*DataStax*](https://bit.ly/3NpPujA)
    *// Wrote the book* [*Think Like a Data Scientist*](https://bit.ly/4f5uVES)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*布莱恩·戈茨博士（*[*LinkedIn*](https://bit.ly/4enqFRa)*) — 数学家、数据科学家和工程师 // AI 和 ML
    产品在* [*DataStax*](https://bit.ly/3NpPujA) *// 编写了《* [*像数据科学家一样思考*](https://bit.ly/4f5uVES)》'
- en: '![](../Images/5c21236700300010387ff37b6e2e4962.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5c21236700300010387ff37b6e2e4962.png)'
- en: 'Adventures in the Knowledge Graph: Exploring Impressionism. Generated by Brian
    Godsey using DALL-E.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱中的冒险：探索印象主义。由布莱恩·戈茨使用 DALL-E 生成。
- en: '![](../Images/8eab316d73b764260438944967b6aaac.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8eab316d73b764260438944967b6aaac.png)'
- en: Adventures in the Knowledge Graph. Exploring Expressionism. Generated by Brian
    Godsey using DALL-E.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱中的冒险：探索表现主义。由布莱恩·戈茨使用 DALL-E 生成。
