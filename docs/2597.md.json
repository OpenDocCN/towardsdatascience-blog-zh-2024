["```py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import accuracy_score\n\n# Create our simple 2D dataset\ndf = pd.DataFrame({\n    'ðŸŒž': [0, 1, 1, 2, 3, 3, 2, 3, 0, 0, 1, 2, 3],\n    'ðŸ’§': [0, 0, 1, 0, 1, 2, 3, 3, 1, 2, 3, 2, 1],\n    'y': [1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1]\n}, index=range(1, 14))\n\n# Split into training and test sets\ntrain_df, test_df = df.iloc[:8].copy(), df.iloc[8:].copy()\nX_train, y_train = train_df[['ðŸŒž', 'ðŸ’§']], train_df['y']\nX_test, y_test = test_df[['ðŸŒž', 'ðŸ’§']], test_df['y']\n\n# Create and configure our neural network\nmlp = MLPClassifier(\n    hidden_layer_sizes=(3, 2), # Creates a 2-3-2-1 architecture as discussed\n    activation='relu',         # ReLU activation for hidden layers\n    solver='sgd',              # Stochastic Gradient Descent optimizer\n    learning_rate_init=0.1,    # Step size for weight updates\n    max_iter=1000,             # Maximum number of epochs\n    momentum=0,                # Disable momentum for pure SGD as discussed\n    random_state=42            # For reproducible results\n)\n\n# Train the model\nmlp.fit(X_train, y_train)\n\n# Make predictions and evaluate\ny_pred = mlp.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Accuracy: {accuracy:.2f}\")\n```"]