- en: Numpy’s random choice in GoLang
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Numpy 的随机选择在 Go 语言中的实现
- en: 原文：[https://towardsdatascience.com/numpys-random-choice-in-go-d65bc2838191?source=collection_archive---------12-----------------------#2024-01-23](https://towardsdatascience.com/numpys-random-choice-in-go-d65bc2838191?source=collection_archive---------12-----------------------#2024-01-23)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/numpys-random-choice-in-go-d65bc2838191?source=collection_archive---------12-----------------------#2024-01-23](https://towardsdatascience.com/numpys-random-choice-in-go-d65bc2838191?source=collection_archive---------12-----------------------#2024-01-23)
- en: '[](https://mlefarov.medium.com/?source=post_page---byline--d65bc2838191--------------------------------)[![Max
    Lefarov](../Images/cb8c4df2e894bf4957f0206ee3df7e5f.png)](https://mlefarov.medium.com/?source=post_page---byline--d65bc2838191--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d65bc2838191--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d65bc2838191--------------------------------)
    [Max Lefarov](https://mlefarov.medium.com/?source=post_page---byline--d65bc2838191--------------------------------)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mlefarov.medium.com/?source=post_page---byline--d65bc2838191--------------------------------)[![Max
    Lefarov](../Images/cb8c4df2e894bf4957f0206ee3df7e5f.png)](https://mlefarov.medium.com/?source=post_page---byline--d65bc2838191--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d65bc2838191--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d65bc2838191--------------------------------)
    [Max Lefarov](https://mlefarov.medium.com/?source=post_page---byline--d65bc2838191--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d65bc2838191--------------------------------)
    ·5 min read·Jan 23, 2024
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d65bc2838191--------------------------------)
    ·阅读时间 5 分钟·2024年1月23日
- en: --
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a8b5ef60ccf65bdd8b82b5bb8edf3698.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a8b5ef60ccf65bdd8b82b5bb8edf3698.png)'
- en: Generated with ChatGPT
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 由 ChatGPT 生成
- en: Recently I’ve assisted with implementing some logic in Java that could easily
    be achieved with a single call of Numpy’s `random.choice`. It ended up being one
    of those tasks that allow looking into things you’re using every day but never
    have time to fully understand how they work. Also for quite some time I wanted
    to start learning Go, so why not kill two birds with one stone and reimplement
    `random.choice` once again this time in Go?
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最近我帮助实现了一些 Java 逻辑，这些逻辑本可以通过简单调用 Numpy 的`random.choice`来实现。这最终成了一个任务，让我有机会去深入了解那些你每天都在使用，但从未真正有时间完全理解其工作原理的东西。同时，我也有一段时间想开始学习
    Go，那么为什么不一举两得，再次用 Go 实现 `random.choice` 呢？
- en: '`random.choice` allows us to sample N elements from a provided collection according
    to the specified probabilities. Importantly (for the use case that motivated this
    work), it allows us to sample these elements without replacements. I.e. if an
    element of collection was already sampled it won’t be sampled again. For example,
    if we have a collection [A, B, C] with associated probabilities [0.1, 0.7, 0.2]
    and we want to sample 3 elements without replacements, most of the time we’ll
    get [B, C, A] as an output. If we sample with replacement, the expected output
    would be [B, B, B].'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '`random.choice` 允许我们根据指定的概率从提供的集合中采样 N 个元素。重要的是（对于激励这项工作的使用案例），它允许我们进行无重复的采样。也就是说，如果集合中的一个元素已经被采样，它将不会再次被采样。例如，如果我们有一个集合
    [A, B, C]，其对应的概率为 [0.1, 0.7, 0.2]，并且我们想无重复地采样 3 个元素，那么大多数时候我们会得到 [B, C, A] 作为输出。如果我们进行有重复的采样，预期的输出将是
    [B, B, B]。'
- en: First, let’s define the signature of the Go function. We want to keep it as
    close to Numpy’s counterpart as possible.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们定义 Go 函数的签名。我们希望它尽可能与 Numpy 的对应函数保持一致。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A few things to notice about the function signature:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 关于函数签名，有几点需要注意：
- en: We’re using the generic type T. It allows calling this function for arrays of
    different types (as long as it satisfies the type constraint, which is none in
    our case). This should mimic the Pythonic semantics of `random.choice`, i.e. it
    doesn’t care about the type of elements stored in the input array.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用了泛型类型 T。这允许我们对不同类型的数组调用该函数（只要它满足类型约束，而在我们这个例子中并没有类型约束）。这应该模仿 Python 中 `random.choice`
    的语义，也就是说，它不关心输入数组中元素的类型。
- en: We also pass the pointer to a random number generator (rng) object that we’ll
    use for sampling. I’ve picked up this style of defining random functions (compared
    to accessing the global instance of rng) from Jax. In my experience, it simplifies
    testing and reproducibility.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还传递了一个指向随机数生成器（rng）对象的指针，供我们在抽样时使用。我从Jax中学到了这种定义随机函数的风格（与直接访问全局rng实例相比）。根据我的经验，这简化了测试和可重复性。
- en: The function has two returns, one is the array of samples, and the second one
    of the type `error` . That’s the way to handle the “exception” execution flow
    in Go (Go doesn’t have assertions or exceptions).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个函数有两个返回值，一个是样本数组，另一个是`error`类型。这是Go语言中处理“异常”执行流的方式（Go没有断言或异常）。
- en: Now we need to figure out how to sample elements from the discrete probability
    distribution defined by the `probs` argument using only float random numbers sampled
    uniformly between [0, 1] returned by the rng. Luckily there’s a method for doing
    exactly that.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要弄清楚如何使用仅在[0, 1]之间均匀抽样的浮动随机数（由rng返回）从由`probs`参数定义的离散概率分布中抽取元素。幸运的是，有一种方法可以完美解决这个问题。
- en: CDF Inversion Method
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CDF反演法
- en: First of, CDF stands for cumulative distribution function. In the discrete case,
    it can be represented as the array where an element at index `i` is equal to the
    sum of all input probabilities up to and including the position `i`. Let’s materialize
    this formulation in a simple helper function.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，CDF代表累积分布函数。在离散情况下，它可以表示为一个数组，其中索引`i`处的元素等于所有输入概率在位置`i`及之前的累计和。让我们用一个简单的帮助函数来实现这个公式。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With CDF of the discrete probability distribution and the random number generator,
    we can sample elements from the input collection by:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过离散概率分布的CDF和随机数生成器，我们可以通过以下方式从输入集合中抽取元素：
- en: Sample a random float between [0, 1] from the Unirofrm distribution.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从统一分布中随机抽取一个介于[0, 1]之间的浮动数值。
- en: Find the first index where the CDF value is ≥ to the random float.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到第一个CDF值大于等于随机浮动数的索引。
- en: Return the element of the original collection at this index.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回原集合中该索引位置的元素。
- en: To understand why it works, we can do a simple visual experiment. We can think
    about values in the CDF array being the right borders of the bins placed on the
    interval between [0, 1]. The width of a bin is proportional to the input probability.
    When generating the uniform random float between [0, 1] we can think about randomly
    throwing the ball on the interval and choosing the bin that we hit. The probability
    of hitting the bin is then proportional to the input probability (exactly what
    we need). Here’s the visual demonstration for our last example of collection [A,
    B, C] with associated probabilities [0.1, 0.7, 0.2].
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解它为何有效，我们可以进行一个简单的视觉实验。我们可以把CDF数组中的值看作是放置在区间[0, 1]上每个箱子的右边界。每个箱子的宽度与输入的概率成正比。当生成介于[0,
    1]之间的均匀随机浮动数时，我们可以把它看作是将球随机投掷到这个区间，并选择我们撞到的箱子。撞到箱子的概率正好与输入概率成正比（这正是我们需要的）。下面是我们最后一个例子——集合[A,
    B, C]及其相关概率[0.1, 0.7, 0.2]的视觉示范。
- en: '![](../Images/9a22c4e1bb87c7c5af9188bff8d5a420.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9a22c4e1bb87c7c5af9188bff8d5a420.png)'
- en: Created by the author in Excalidraw
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者在Excalidraw中创建
- en: 'To get the index of the bin we can return the index of the first right border
    that is greater or equal to the sampled value. Again, a simple helper function
    for doing exactly this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要获得箱子的索引，我们可以返回第一个右边界大于或等于抽样值的索引。同样，这里有一个简单的帮助函数来实现这个功能：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Putting everything together
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: 'With that, we have everything to implement `random.choice` with repetitions.
    Sampling without repetitions requires one more trick. To ensure that we don’t
    draw the element that was already sampled, we can mask its probability with 0
    after sampling. This, however, will invalidate our discrete probability distribution
    because its sum will no longer amount to 1\. To correct for that we need to re-normalize
    the probabilities by dividing them by the new total sum. As a bonus, we can perform
    re-normalization directly on CDF instead of re-normalizing input probabilities
    and then computing CDF. Putting everything together:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就具备了实现带有重复的`random.choice`所需的一切。无重复抽样则需要多一个技巧。为了确保我们不会抽取已经被抽取过的元素，可以在抽样后将其概率置为0。然而，这样会使我们的离散概率分布失效，因为其总和将不再等于1。为了修正这一点，我们需要通过将概率除以新的总和来重新归一化概率。作为额外的优化，我们可以直接对CDF进行重新归一化，而不需要先重新归一化输入概率再计算CDF。将所有内容整合在一起：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Again, a few things to pay attention to:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒几个需要注意的事项：
- en: If we sample without replacement we can’t sample more than the initial size
    of an input collection.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们进行不放回抽样，就无法抽取超过输入集合初始大小的样本。
- en: Go passes “slices” (arrays without defined size) as mutable arguments. Thus,
    we make a copy the of input probabilities for not to mess up the original array
    with masking.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Go 传递“切片”（没有定义大小的数组）作为可变参数。因此，我们复制输入的概率，以避免用掩码修改原始数组。
- en: 'And the driver code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动代码如下：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That’s it, feel free to drop a question in the comments.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，随时可以在评论区提问。
