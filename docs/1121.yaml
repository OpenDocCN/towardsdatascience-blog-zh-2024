- en: Get Underlined Text from Any PDF with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python从任何PDF中提取带下划线的文本
- en: 原文：[https://towardsdatascience.com/get-underlined-text-from-any-pdf-b7b068ca3d64?source=collection_archive---------8-----------------------#2024-05-03](https://towardsdatascience.com/get-underlined-text-from-any-pdf-b7b068ca3d64?source=collection_archive---------8-----------------------#2024-05-03)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/get-underlined-text-from-any-pdf-b7b068ca3d64?source=collection_archive---------8-----------------------#2024-05-03](https://towardsdatascience.com/get-underlined-text-from-any-pdf-b7b068ca3d64?source=collection_archive---------8-----------------------#2024-05-03)
- en: A step-by-step guide to get underlined text as an array from PDF files.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一步步指南，教你如何从PDF文件中提取带下划线的文本并将其作为数组处理。
- en: '[](https://medium.com/@sasha.korovkina2003?source=post_page---byline--b7b068ca3d64--------------------------------)[![Sasha
    Korovkina](../Images/14eac2bafa3c5b417b8aecdef61e6ac3.png)](https://medium.com/@sasha.korovkina2003?source=post_page---byline--b7b068ca3d64--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b7b068ca3d64--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b7b068ca3d64--------------------------------)
    [Sasha Korovkina](https://medium.com/@sasha.korovkina2003?source=post_page---byline--b7b068ca3d64--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@sasha.korovkina2003?source=post_page---byline--b7b068ca3d64--------------------------------)[![Sasha
    Korovkina](../Images/14eac2bafa3c5b417b8aecdef61e6ac3.png)](https://medium.com/@sasha.korovkina2003?source=post_page---byline--b7b068ca3d64--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b7b068ca3d64--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b7b068ca3d64--------------------------------)
    [Sasha Korovkina](https://medium.com/@sasha.korovkina2003?source=post_page---byline--b7b068ca3d64--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b7b068ca3d64--------------------------------)
    ·5 min read·May 3, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b7b068ca3d64--------------------------------)
    ·阅读时间：5分钟·2024年5月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '*💡 If you want to see the code for this project, check out my repository:*
    [***https://github.com/sasha-korovkina/pdfUnderlinedExtractor***](https://github.com/sasha-korovkina/pdfUnderlinedExtractor)'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*💡 如果你想查看这个项目的代码，可以访问我的仓库：* [***https://github.com/sasha-korovkina/pdfUnderlinedExtractor***](https://github.com/sasha-korovkina/pdfUnderlinedExtractor)'
- en: PDF data extraction can be a real headache, and it gets even trickier when you’re
    trying to snag underlined text — believe it or not, there aren’t any go-to solutions
    or libraries that handle this out of the box. But don’t worry, I’m here to show
    you how to tackle this.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: PDF数据提取可能是一个真正的难题，尤其是在你尝试提取带下划线的文本时——信不信由你，目前没有现成的解决方案或库可以直接处理这个问题。不过别担心，我会教你如何解决这个问题。
- en: '![](../Images/285d98ef8529f8e087521cbade385672.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/285d98ef8529f8e087521cbade385672.png)'
- en: Photo by [dlxmedia.hu](https://unsplash.com/@dlxmedia?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[dlxmedia.hu](https://unsplash.com/@dlxmedia?utm_source=medium&utm_medium=referral)
    于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: The Theory
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理论
- en: Extracting underlined text from PDFs can take a few different paths. You might
    consider using OCR to detect text components with bottom lines or delve into PyMuPDF’s
    markup capabilities. However, I’ve found that OCR tends to falter, suffering from
    inconsistency and low accuracy. PyMuPDF isn’t my favorite either — it demands
    finicky parameter tuning, which is time-consuming. Plus, one wrong setting and
    you could lose a bunch of data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 从PDF中提取带下划线的文本有几种不同的方法。你可以考虑使用OCR来检测带底线的文本组件，或者深入研究PyMuPDF的标记功能。然而，我发现OCR往往会出现问题，表现为不一致和低精度。PyMuPDF我也不太喜欢——它需要细致的参数调优，非常耗时。而且，如果设置错误，你可能会丢失大量数据。
- en: 'It is important to remember that PDFs are:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 需要记住的是，PDF文件是：
- en: '**Non-Structured Data:** PDF elements often lack grouping or categorization,
    which complicates efforts to search through the content systematically.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非结构化数据：** PDF元素通常缺乏分组或分类，这使得系统地搜索内容变得更加复杂。'
- en: '**Text Formatting Recognition:** Detecting specific text formats such as bold
    or underlined is notoriously difficult in PDFs, as most Python libraries do not
    support this capability effectively.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本格式识别：** 在PDF中检测特定的文本格式，如粗体或下划线，通常非常困难，因为大多数Python库并未有效支持这一功能。'
- en: But fear not, as we have a strategy to resolve this.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但别怕，我们有一个策略来解决这个问题。
- en: The Strategy
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 策略
- en: 'Convert the PDF to Structured XML: Start by transforming the PDF document into
    a structured XML format to facilitate easier data manipulation.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将PDF转换为结构化XML：首先将PDF文档转换为结构化XML格式，以便于数据处理。
- en: 'Extract Desired Components: Identify and isolate the specific components from
    the XML that are relevant to our needs.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取所需组件：从XML中识别并隔离出与我们需求相关的特定组件。
- en: Use OCR (Optical Character Recognition) on the extracted coordinates to get
    the underlined text data as an array.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用OCR（光学字符识别）技术处理提取的坐标，获取下划线文本数据作为数组。
- en: 'Extract and Output Underlined Text: Finally, extract the underlined text from
    the document and display or print the results.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取并输出下划线文本：最后，从文档中提取下划线文本并显示或打印结果。
- en: The Code
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码
- en: '**PDF to XML**'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**PDF转XML**'
- en: We will use the **pdfquery** library, the most comprehensive PDF to XML converter
    which I have come across.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用**pdfquery**库，这是我遇到的最全面的PDF转XML转换器。
- en: 2\. **Studying the XML**
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **研究XML**
- en: 'The XML has a few key components which we are interested in:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: XML中有几个关键组件是我们感兴趣的：
- en: '*LTRect —* sometimes, the library would parse the underlined text as a rectangle
    of minimal width under the text'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*LTRect —* 有时，库会将下划线文本解析为文本下方的一个最小宽度矩形'
- en: '*LTLine —* other times, it would recognise the outline as a separate line component.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*LTLine —* 有时，它会将轮廓识别为一个独立的线条组件。'
- en: '![](../Images/8608bd7c5289acf9d2f7d11e47b21416.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8608bd7c5289acf9d2f7d11e47b21416.png)'
- en: This is what your output XML will look like. Image created by author.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您的输出XML的样子。图像由作者创建。
- en: 'LTRect component example:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: LTRect组件示例：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Therefore, by converting the whole document into XML format, we can replicate
    it’s structure as XML components, let’s do just that!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过将整个文档转换为XML格式，我们可以将其结构作为XML组件进行复制，接下来我们就这么做！
- en: Structure Replication
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构复制
- en: Now, we will re-create the structure of our document as bounding box coordinates.
    To do this, we will parse the XML to define the page, component boxes, lines and
    rectangles, and then draw them all on our canvas in 3 different colors.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将重新创建文档的结构作为边界框坐标。为此，我们将解析XML，定义页面、组件框、线条和矩形，然后用三种不同的颜色将它们全部绘制在我们的画布上。
- en: PDF object visualization.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: PDF对象可视化。
- en: 'Here is our inital PDF, it has been generated in Microsoft Word, by exporting
    a document with some underlines to the PDF file format:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的初始PDF，它是通过在Microsoft Word中生成的，通过导出包含一些下划线的文档为PDF文件格式：
- en: '![](../Images/a80e9d4b25647cc24bf887bd82a7167b.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a80e9d4b25647cc24bf887bd82a7167b.png)'
- en: Initial document with sample text. Image created by author.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 初始文档，包含示例文本。图像由作者创建。
- en: 'After applying the algorithm above, here is the visual representation we get:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 应用上述算法后，这就是我们得到的视觉表示：
- en: '![](../Images/457a9ed2f8f94ae00805ad5a5400450f.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/457a9ed2f8f94ae00805ad5a5400450f.png)'
- en: The box outline of the document Black — all document components, blue — underlined
    text. Image created by author.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 文档的框架轮廓：黑色—所有文档组件，蓝色—下划线文本。图像由作者创建。
- en: This image represents the structure of our document, where the black box is
    used to describe all components on the page, and the blue is used to describe
    the LTRect elements, hence the underlined text.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图片展示了我们文档的结构，其中黑色框用于描述页面上的所有组件，蓝色框用于描述LTRect元素，因此出现了下划线文本。
- en: Text Overlay
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本叠加
- en: 'Now, let’s visualize all of the text within the PDF in it’s respective positions,
    with the following line of code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过以下代码行将PDF中的所有文本可视化，显示在各自的位置上：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here is the output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '![](../Images/5a5d3f146599aa71accb262a8f815427.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a5d3f146599aa71accb262a8f815427.png)'
- en: PDF re-creation based on text location and underlines. Image created by author.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 基于文本位置和下划线的PDF重新创建。图像由作者创建。
- en: Note that the text is not exactly where it was in the original document, due
    to the difference in size and font of the mark-up language in the pdfquery library.
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，由于pdfquery库中标记语言的大小和字体差异，文本的位置与原始文档中的位置不完全一致。
- en: Co-Ordinate Extraction
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 坐标提取
- en: As the result of our XML, we will have an array of coordinates of underlined
    regions, in my case I have called it underline_text.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 作为XML结果，我们将得到一组下划线区域的坐标数组，在我的案例中，我将其命名为underline_text。
- en: A piece of code which forms an array of coordinates of underlined text within
    the PDF file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一段形成PDF文件中下划线文本坐标数组的代码。
- en: Text Extraction
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本提取
- en: 'Here’s the process:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 过程如下：
- en: We identify the coordinate rectangles as previously determined.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们识别出先前确定的坐标矩形。
- en: We extract these sections from the PDF.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从PDF中提取这些部分。
- en: We apply Tesseract OCR to extract text from each extracted section.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应用 Tesseract OCR 从每个提取的部分中提取文本。
- en: 'This method of extracting text from PDFs using coordinate rectangles and Tesseract
    OCR is effective for several reasons:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 使用坐标矩形和 Tesseract OCR 从 PDF 中提取文本的方法之所以有效，有几个原因：
- en: '**Precision in Text Extraction**: By identifying specific coordinate rectangles,
    the process targets only relevant areas of the PDF. This focused approach avoids
    unnecessary processing of the entire document and reduces errors related to extracting
    unwanted text.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文本提取的精度**：通过识别特定的坐标矩形，处理过程仅针对 PDF 中的相关区域。这种聚焦的方法避免了对整个文档的无谓处理，并减少了提取不需要的文本时出现的错误。'
- en: '**Efficiency**: Extracting predefined sections directly from the PDF is much
    faster than processing the entire document. This method saves computational resources
    and time, particularly useful when dealing with large documents.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**效率**：直接从 PDF 中提取预定义部分比处理整个文档要快得多。这种方法节省了计算资源和时间，尤其在处理大型文档时特别有用。'
- en: '**Accuracy with OCR**: Tesseract OCR is a robust optical character recognition
    tool that can convert images of text into machine-readable text. By feeding it
    precise sections of text, it can perform more accurately as it deals with less
    background noise and formatting issues that might confuse the OCR process in larger,
    unsegmented documents.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**OCR 精度**：Tesseract OCR 是一个强大的光学字符识别工具，能够将文本图像转换为机器可读的文本。通过向其提供精确的文本部分，它可以更准确地执行任务，因为它处理的文本背景噪声和格式问题较少，这能避免在较大、未分割的文档中混淆
    OCR 过程。'
- en: 'And this is the code:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是代码：
- en: Code to extract underlined text from the PDF sections.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从 PDF 部分提取下划线文本的代码。
- en: 'Make sure that you have tesseract installed on your system before running this
    function. For in-depth instructions, check out their official installation guide
    here: [https://github.com/tesseract-ocr/tessdoc/blob/main/Installation.md](https://github.com/tesseract-ocr/tessdoc/blob/main/Installation.md)
    or in my GitHub repository here: [https://github.com/sasha-korovkina/pdfUnderlinedExtractor](https://github.com/sasha-korovkina/pdfUnderlinedExtractor).'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行此功能之前，请确保你的系统上已安装 tesseract。有关详细说明，请查看他们的官方安装指南：[https://github.com/tesseract-ocr/tessdoc/blob/main/Installation.md](https://github.com/tesseract-ocr/tessdoc/blob/main/Installation.md)
    或者在我的 GitHub 仓库中查看：[https://github.com/sasha-korovkina/pdfUnderlinedExtractor](https://github.com/sasha-korovkina/pdfUnderlinedExtractor)。
- en: Putting It All Together…
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 整合所有内容…
- en: 'Now, If we take any PDF file, like this example file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们取任何 PDF 文件，例如这个示例文件：
- en: '![](../Images/b9c573eeffa8a19dd77c3dd3138bafec.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b9c573eeffa8a19dd77c3dd3138bafec.png)'
- en: The whole text of the test file. Image created by author.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 测试文件的完整文本。图片由作者创建。
- en: 'We have some underlined words in this file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个文件中有一些下划线的词语：
- en: '![](../Images/60fb741f57fc777ffca8bcb4160942ab.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/60fb741f57fc777ffca8bcb4160942ab.png)'
- en: ipsum and laboris are underlined here. Image created by author.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这里下划线的内容是“ipsum”和“laboris”。图片由作者创建。
- en: 'After running the code described above, here is what we get:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行上述代码后，得到的结果是：
- en: '![](../Images/7ad6d67e67f7828203225fedc39034eb.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ad6d67e67f7828203225fedc39034eb.png)'
- en: An array of all underlined words in the document. Image created by author.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 文档中所有下划线词语的数组。图片由作者创建。
- en: After getting this array, you can use these words for further processing!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 得到这个数组后，你可以将这些词语用于进一步处理！
- en: Enjoy using this script! I’d love to hear about any creative applications you
    come up with or if you’d like to contribute. Let me know! ❤️
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 享受使用这个脚本的过程吧！我很乐意听听你想到的任何创造性应用，或者如果你想贡献一些内容，请告诉我！❤️
