- en: Get Underlined Text from Any PDF with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/get-underlined-text-from-any-pdf-b7b068ca3d64?source=collection_archive---------8-----------------------#2024-05-03](https://towardsdatascience.com/get-underlined-text-from-any-pdf-b7b068ca3d64?source=collection_archive---------8-----------------------#2024-05-03)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A step-by-step guide to get underlined text as an array from PDF files.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@sasha.korovkina2003?source=post_page---byline--b7b068ca3d64--------------------------------)[![Sasha
    Korovkina](../Images/14eac2bafa3c5b417b8aecdef61e6ac3.png)](https://medium.com/@sasha.korovkina2003?source=post_page---byline--b7b068ca3d64--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b7b068ca3d64--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b7b068ca3d64--------------------------------)
    [Sasha Korovkina](https://medium.com/@sasha.korovkina2003?source=post_page---byline--b7b068ca3d64--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b7b068ca3d64--------------------------------)
    ·5 min read·May 3, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '*💡 If you want to see the code for this project, check out my repository:*
    [***https://github.com/sasha-korovkina/pdfUnderlinedExtractor***](https://github.com/sasha-korovkina/pdfUnderlinedExtractor)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PDF data extraction can be a real headache, and it gets even trickier when you’re
    trying to snag underlined text — believe it or not, there aren’t any go-to solutions
    or libraries that handle this out of the box. But don’t worry, I’m here to show
    you how to tackle this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/285d98ef8529f8e087521cbade385672.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [dlxmedia.hu](https://unsplash.com/@dlxmedia?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: The Theory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extracting underlined text from PDFs can take a few different paths. You might
    consider using OCR to detect text components with bottom lines or delve into PyMuPDF’s
    markup capabilities. However, I’ve found that OCR tends to falter, suffering from
    inconsistency and low accuracy. PyMuPDF isn’t my favorite either — it demands
    finicky parameter tuning, which is time-consuming. Plus, one wrong setting and
    you could lose a bunch of data.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is important to remember that PDFs are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Non-Structured Data:** PDF elements often lack grouping or categorization,
    which complicates efforts to search through the content systematically.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text Formatting Recognition:** Detecting specific text formats such as bold
    or underlined is notoriously difficult in PDFs, as most Python libraries do not
    support this capability effectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But fear not, as we have a strategy to resolve this.
  prefs: []
  type: TYPE_NORMAL
- en: The Strategy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Convert the PDF to Structured XML: Start by transforming the PDF document into
    a structured XML format to facilitate easier data manipulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extract Desired Components: Identify and isolate the specific components from
    the XML that are relevant to our needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use OCR (Optical Character Recognition) on the extracted coordinates to get
    the underlined text data as an array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Extract and Output Underlined Text: Finally, extract the underlined text from
    the document and display or print the results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**PDF to XML**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will use the **pdfquery** library, the most comprehensive PDF to XML converter
    which I have come across.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. **Studying the XML**
  prefs: []
  type: TYPE_NORMAL
- en: 'The XML has a few key components which we are interested in:'
  prefs: []
  type: TYPE_NORMAL
- en: '*LTRect —* sometimes, the library would parse the underlined text as a rectangle
    of minimal width under the text'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*LTLine —* other times, it would recognise the outline as a separate line component.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/8608bd7c5289acf9d2f7d11e47b21416.png)'
  prefs: []
  type: TYPE_IMG
- en: This is what your output XML will look like. Image created by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'LTRect component example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Therefore, by converting the whole document into XML format, we can replicate
    it’s structure as XML components, let’s do just that!
  prefs: []
  type: TYPE_NORMAL
- en: Structure Replication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we will re-create the structure of our document as bounding box coordinates.
    To do this, we will parse the XML to define the page, component boxes, lines and
    rectangles, and then draw them all on our canvas in 3 different colors.
  prefs: []
  type: TYPE_NORMAL
- en: PDF object visualization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is our inital PDF, it has been generated in Microsoft Word, by exporting
    a document with some underlines to the PDF file format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a80e9d4b25647cc24bf887bd82a7167b.png)'
  prefs: []
  type: TYPE_IMG
- en: Initial document with sample text. Image created by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'After applying the algorithm above, here is the visual representation we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/457a9ed2f8f94ae00805ad5a5400450f.png)'
  prefs: []
  type: TYPE_IMG
- en: The box outline of the document Black — all document components, blue — underlined
    text. Image created by author.
  prefs: []
  type: TYPE_NORMAL
- en: This image represents the structure of our document, where the black box is
    used to describe all components on the page, and the blue is used to describe
    the LTRect elements, hence the underlined text.
  prefs: []
  type: TYPE_NORMAL
- en: Text Overlay
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s visualize all of the text within the PDF in it’s respective positions,
    with the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5a5d3f146599aa71accb262a8f815427.png)'
  prefs: []
  type: TYPE_IMG
- en: PDF re-creation based on text location and underlines. Image created by author.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the text is not exactly where it was in the original document, due
    to the difference in size and font of the mark-up language in the pdfquery library.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Co-Ordinate Extraction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the result of our XML, we will have an array of coordinates of underlined
    regions, in my case I have called it underline_text.
  prefs: []
  type: TYPE_NORMAL
- en: A piece of code which forms an array of coordinates of underlined text within
    the PDF file.
  prefs: []
  type: TYPE_NORMAL
- en: Text Extraction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s the process:'
  prefs: []
  type: TYPE_NORMAL
- en: We identify the coordinate rectangles as previously determined.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We extract these sections from the PDF.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We apply Tesseract OCR to extract text from each extracted section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This method of extracting text from PDFs using coordinate rectangles and Tesseract
    OCR is effective for several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Precision in Text Extraction**: By identifying specific coordinate rectangles,
    the process targets only relevant areas of the PDF. This focused approach avoids
    unnecessary processing of the entire document and reduces errors related to extracting
    unwanted text.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Efficiency**: Extracting predefined sections directly from the PDF is much
    faster than processing the entire document. This method saves computational resources
    and time, particularly useful when dealing with large documents.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Accuracy with OCR**: Tesseract OCR is a robust optical character recognition
    tool that can convert images of text into machine-readable text. By feeding it
    precise sections of text, it can perform more accurately as it deals with less
    background noise and formatting issues that might confuse the OCR process in larger,
    unsegmented documents.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And this is the code:'
  prefs: []
  type: TYPE_NORMAL
- en: Code to extract underlined text from the PDF sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that you have tesseract installed on your system before running this
    function. For in-depth instructions, check out their official installation guide
    here: [https://github.com/tesseract-ocr/tessdoc/blob/main/Installation.md](https://github.com/tesseract-ocr/tessdoc/blob/main/Installation.md)
    or in my GitHub repository here: [https://github.com/sasha-korovkina/pdfUnderlinedExtractor](https://github.com/sasha-korovkina/pdfUnderlinedExtractor).'
  prefs: []
  type: TYPE_NORMAL
- en: Putting It All Together…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, If we take any PDF file, like this example file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b9c573eeffa8a19dd77c3dd3138bafec.png)'
  prefs: []
  type: TYPE_IMG
- en: The whole text of the test file. Image created by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have some underlined words in this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/60fb741f57fc777ffca8bcb4160942ab.png)'
  prefs: []
  type: TYPE_IMG
- en: ipsum and laboris are underlined here. Image created by author.
  prefs: []
  type: TYPE_NORMAL
- en: 'After running the code described above, here is what we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7ad6d67e67f7828203225fedc39034eb.png)'
  prefs: []
  type: TYPE_IMG
- en: An array of all underlined words in the document. Image created by author.
  prefs: []
  type: TYPE_NORMAL
- en: After getting this array, you can use these words for further processing!
  prefs: []
  type: TYPE_NORMAL
- en: Enjoy using this script! I’d love to hear about any creative applications you
    come up with or if you’d like to contribute. Let me know! ❤️
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
