["```py\npip install knowledge-graph-maker\n```", "```py\nontology = Ontology(\n# labels of the entities to be extracted. Can be a string or an object, like the following.\nlabels=[\n{\"Person\": \"Person name without any adjectives, Remember a person may be referenced by their name or using a pronoun\"},\n{\"Object\": \"Do not add the definite article 'the' in the object name\"},\n{\"Event\": \"Event event involving multiple people. Do not include qualifiers or verbs like gives, leaves, works etc.\"},\n\"Place\",\n\"Document\",\n\"Organisation\",\n\"Action\",\n{\"Miscellaneous\": \"Any important concept can not be categorised with any other given label\"},\n],\n# Relationships that are important for your application.\n# These are more like instructions for the LLM to nudge it to focus on specific relationships.\n# There is no guarantee that only these relationships will be extracted, but some models do a good job overall at sticking to these relations.\nrelationships=[\n\"Relation between any pair of Entities\",\n],\n)\n```", "```py\n## Pydantic document model\nclass Document(BaseModel):\n  text: str\n  metadata: dict\n```", "```py\n from knowledge_graph_maker import GraphMaker, Ontology, GroqClient\n\n## -> Select a groq supported model\nmodel = \"mixtral-8x7b-32768\"\n# model =\"llama3–8b-8192\"\n# model = \"llama3–70b-8192\"\n# model=\"gemma-7b-it\" ## This is probably the fastest of all models, though a tad inaccurate.\n\n## -> Initiate the Groq Client.\nllm = GroqClient(model=model, temperature=0.1, top_p=0.5)\ngraph_maker = GraphMaker(ontology=ontology, llm_client=llm, verbose=False)\n\n## -> Create a graph out of a list of Documents.\ngraph = graph_maker.from_documents(docs)\n## result: a list of Edges.\n\nprint(\"Total number of Edges\", len(graph))\n## 1503\n```", "```py\nclass Node(BaseModel):\n  label: str\n  name: str\n\nclass Edge(BaseModel):\n  node_1: Node\n  node_2: Node\n  relationship: str\n  metadata: dict = {}\n  order: Union[int, None] = None\n```", "```py\nfrom knowledge_graph_maker import Neo4jGraphModel\ncreate_indices = False\nneo4j_graph = Neo4jGraphModel(edges=graph, create_indices=create_indices)\nneo4j_graph.save()\n```"]