- en: A Comprehensive Guide to Inset Axes in Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/a-comprehensive-guide-to-inset-axes-in-matplotlib-87400e00a4e5?source=collection_archive---------9-----------------------#2024-01-30](https://towardsdatascience.com/a-comprehensive-guide-to-inset-axes-in-matplotlib-87400e00a4e5?source=collection_archive---------9-----------------------#2024-01-30)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: including 4 ways to make them and 2 ways to style them
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@mmore500?source=post_page---byline--87400e00a4e5--------------------------------)[![Matthew
    Andres Moreno](../Images/ca7da9fd9e5c744ee0ebd2aa5d979eb5.png)](https://medium.com/@mmore500?source=post_page---byline--87400e00a4e5--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--87400e00a4e5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--87400e00a4e5--------------------------------)
    [Matthew Andres Moreno](https://medium.com/@mmore500?source=post_page---byline--87400e00a4e5--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--87400e00a4e5--------------------------------)
    ·8 min read·Jan 30, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c3c99ec05194828d72a5d44982ef711f.png)'
  prefs: []
  type: TYPE_IMG
- en: example plot with four inset axes
  prefs: []
  type: TYPE_NORMAL
- en: Inset axes are a powerful data visualization technique to highlight specific
    plot regions or add detailed subplots. They are a great way to make effective
    use of otherwise-emtpy figure space.
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial shows **4 methods to create inset axes in *matplotlib***, which
    let you position insets relative to an axes, to an overall, figure, in absolute
    units (i.e., inches), or using a grid system — the latter useful in particular
    when working with multiple insets.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll also cover **2 ways to style zoom insets**: with classic leader lines
    and with color-coded overlays.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/58d7ae54c96c03ad4ab62d5ec2122004.png)'
  prefs: []
  type: TYPE_IMG
- en: inset axes with color-coded overlays
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this tutorial, you will be able to determine which approach best
    meets your needs —and have some code you can copy/paste to make it happen.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s what we’ll cover.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '***Creating inset axes:***'
  prefs: []
  type: TYPE_NORMAL
- en: '*predefined axes-level location codes:* `mpl_toolkits.axes_grid1.inset_axes`,'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*manual placement with axes-level coordinates:* `Axes.inset_axes`, and'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*manual placement with figure-level coordinates:* `Figure.add_axes`;'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*multi-inset auto-layout:*`Axes.inset_axes` with `outset.layout_corner_insets`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***Adding zoom indicators:***'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. *leader lines:* `Axes.indicate_inset_zoom` and
  prefs: []
  type: TYPE_NORMAL
- en: 6\. *color-coded overlays:* `OutsetGrid.marqueeplot`.
  prefs: []
  type: TYPE_NORMAL
- en: Sections 4 and 6 make use new tools from the open source *outset* library for
    multi-scale data visualization, which I recently released and am excited to share
    with the community.
  prefs: []
  type: TYPE_NORMAL
- en: 'Method 1: Using ``*`mpl_toolkits.axes_grid1.inset_axes`*``'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function simplifies adding insets. Here’s how to use it, including an
    explanation of the `loc` parameter for positioning:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note that axes size can be specified *relative to parent axes* or in *inches*,
    as shown here with `width` and `height`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98d9003e021750c68c7cb49d03c2a352.png)'
  prefs: []
  type: TYPE_IMG
- en: Supported location codes for `loc` are as follows,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Method 2: Using `Axes.inset_axes`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Matplotlib’s `Axes` class provides the `inset_axes` member function, which
    is a straightforward way to create insets relative to the parent axes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fe04a108b514e4df745817db1060d4ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Coordinates are specified relative to the parent axes, so — for example — (0,
    0, 0.5, 0.2) will create an axes in the lower left-hand corner with width that
    takes up half of axes width and height that takes up 0.2 of axes height.
  prefs: []
  type: TYPE_NORMAL
- en: To position an inset relative to a parent axes `ax` in terms of inches, we must
    first calculate the size of the parent axes in inches.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Then, pass your `x`, `y`, `w`, and `h` in inches to `Axes.inset_axes` as follows
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Method 3: Using `Figure.add_axes`'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Matplotlib’s `Figure` class provides an analogous `add_axes` member function,
    which lets you position insets relative to the overall figure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a9c336fd223df3d47c7dd933c78ccfa2.png)'
  prefs: []
  type: TYPE_IMG
- en: Similarly to before, coordinates will be specified relative to the parent axes,
    so — for example — (0.5, 0.5, 0.3, 0.2) will create an axes 2/10ths the height
    of the overall figure and 3/10ths the width with the lower left corner centered
    within the figure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Method 4: `` `Axes.inset_axes [PRE6]'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: import matplotlib.pyplot as plt
  prefs: []
  type: TYPE_NORMAL
- en: import outset
  prefs: []
  type: TYPE_NORMAL
- en: 'fig, ax = plt.subplots(); ax.set_box_aspect(0.5)  # main figure and axes'
  prefs: []
  type: TYPE_NORMAL
- en: 'ax.plot([0, 9], [0, 9])  # example plot'
  prefs: []
  type: TYPE_NORMAL
- en: '------ pick inset axes positions: 3 in upper left, one in lower right'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'inset_positions = outset.util.layout_corner_insets(  # upper left positions'
  prefs: []
  type: TYPE_NORMAL
- en: '3, "NW", # number insets and corner to position in'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: optional layout tweaks...
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: inset_pad_ratio=(.2,.35), inset_grid_size=(.6,.65), inset_margin_size=.05)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'inset_positions.append(  # generate lower right position & tack on to list'
  prefs: []
  type: TYPE_NORMAL
- en: outset.util.layout_corner_insets(1, "SE", inset_grid_size=.4))
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '----- create inset axes & plot on them'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'inset_axes = [*map(ax.inset_axes, inset_positions)]  # create inset axes'
  prefs: []
  type: TYPE_NORMAL
- en: 'for iax in inset_axes:  # example plot'
  prefs: []
  type: TYPE_NORMAL
- en: iax.plot([9, 0], [0, 9], color="r")
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: from math import isclose; import matplotlib.pyplot as plt
  prefs: []
  type: TYPE_NORMAL
- en: set up main fig/axes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: fig, main_ax = plt.subplots(); main_ax.set_box_aspect(0.5)
  prefs: []
  type: TYPE_NORMAL
- en: inset_ax = main_ax.inset_axes(
  prefs: []
  type: TYPE_NORMAL
- en: '[0.05, 0.65, 0.3, 0.3],  # [x, y, width, height] w.r.t. axes'
  prefs: []
  type: TYPE_NORMAL
- en: 'xlim=[4, 5], ylim=[4, 5], # sets viewport & tells relation to main axes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: xticklabels=[], yticklabels=[]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: add plot content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'for ax in main_ax, inset_ax:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ax.plot([0, 9], [0, 9])  # first example line'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ax.plot([0, 9], [1, 8])  # second example line'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: add zoom leaders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: main_ax.indicate_inset_zoom(inset_ax, edgecolor="blue")
  prefs: []
  type: TYPE_NORMAL
- en: careful! warn if aspect ratio of inset axes doesn't match main axes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'if not isclose(inset_ax._get_aspect_ratio(), main_ax._get_aspect_ratio()):'
  prefs: []
  type: TYPE_NORMAL
- en: print("chosen inset x/ylim & width/height skew aspect w.r.t. main axes!")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: from matplotlib import pyplot as plt
  prefs: []
  type: TYPE_NORMAL
- en: import numpy as np
  prefs: []
  type: TYPE_NORMAL
- en: import outset
  prefs: []
  type: TYPE_NORMAL
- en: example adapted from https://matplotlib.org/stable/gallery/
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: i, a, b, c, d = np.arange(0.0, 2 * np.pi, 0.01), 1, 7, 3, 11
  prefs: []
  type: TYPE_NORMAL
- en: '3 axes grid: source plot and two zoom frames'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'grid = outset.OutsetGrid([  # data coords for zoom sections...'
  prefs: []
  type: TYPE_NORMAL
- en: '(-10, 8, -8, 9), (-1.6, 5, -0.5, 3)])  # ...as (x0, y0, x1, y1)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'grid.broadcast(plt.plot,  # run plotter over all axes'
  prefs: []
  type: TYPE_NORMAL
- en: subsequent kwargs go to the plotter
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: 'np.sin(i * a) * np.cos(i * b) * 20,  # line coords'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'np.sin(i * c) * np.cos(i * d) * 20,  # line coords'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'c="mediumblue",  zorder=-1,  # line styling'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: position insets over the source plot into lower/left ("SW") corner
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: outset.inset_outsets(grid, insets="SW")
  prefs: []
  type: TYPE_NORMAL
- en: 'grid.marqueeplot()  # render overlay annotations'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '...  # as before'
  prefs: []
  type: TYPE_NORMAL
- en: customized_placements = outset.util.layout_corner_insets(
  prefs: []
  type: TYPE_NORMAL
- en: '2, "SW",  # 2 insets into the lower left corner'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'inset_margin_size=0.05, inset_grid_size=(0.8, 0.55)  # layout params'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: outset.inset_outsets(grid, insets=customized_placements)
  prefs: []
  type: TYPE_NORMAL
- en: 'grid.marqueeplot()  # render overlay annotations'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '...  # as before'
  prefs: []
  type: TYPE_NORMAL
- en: outset.inset_outsets(grid, insets=[
  prefs: []
  type: TYPE_NORMAL
- en: '(0.05, 0.05, 0.25, 0.25),  # two insets, with axes-relative coords...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '(0.7, 0.7, 0.3, 0.3),    # ...specified (x0, y0, width, height)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '])'
  prefs: []
  type: TYPE_NORMAL
- en: 'grid.marqueeplot()  # render overlay annotations'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: python3 -m pip install \
  prefs: []
  type: TYPE_NORMAL
- en: matplotlib `# ==3.8.2`\
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: numpy `# ==1.26.2` \
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: outset `# ==0.1.8`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: '*All images are works of the author.*'
  prefs: []
  type: TYPE_NORMAL
