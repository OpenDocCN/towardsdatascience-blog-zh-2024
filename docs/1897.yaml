- en: Productionizing a RAG App with Prefect, Weave, and RAGAS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Prefect、Weave和RAGAS实现RAG应用的生产化
- en: 原文：[https://towardsdatascience.com/productionizing-a-rag-app-04c857e0966e?source=collection_archive---------7-----------------------#2024-08-03](https://towardsdatascience.com/productionizing-a-rag-app-04c857e0966e?source=collection_archive---------7-----------------------#2024-08-03)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/productionizing-a-rag-app-04c857e0966e?source=collection_archive---------7-----------------------#2024-08-03](https://towardsdatascience.com/productionizing-a-rag-app-04c857e0966e?source=collection_archive---------7-----------------------#2024-08-03)
- en: Adding evaluation, automated data pulling, and other improvements.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加评估、自动化数据提取及其他改进。
- en: '[](https://medium.com/@ed.izaguirre?source=post_page---byline--04c857e0966e--------------------------------)[![Ed
    Izaguirre](../Images/c9eded1f06c47571baa662107428483f.png)](https://medium.com/@ed.izaguirre?source=post_page---byline--04c857e0966e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--04c857e0966e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--04c857e0966e--------------------------------)
    [Ed Izaguirre](https://medium.com/@ed.izaguirre?source=post_page---byline--04c857e0966e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@ed.izaguirre?source=post_page---byline--04c857e0966e--------------------------------)[![Ed
    Izaguirre](../Images/c9eded1f06c47571baa662107428483f.png)](https://medium.com/@ed.izaguirre?source=post_page---byline--04c857e0966e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--04c857e0966e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--04c857e0966e--------------------------------)
    [Ed Izaguirre](https://medium.com/@ed.izaguirre?source=post_page---byline--04c857e0966e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--04c857e0966e--------------------------------)
    ·12 min read·Aug 3, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--04c857e0966e--------------------------------)
    ·阅读时长12分钟·2024年8月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/105f6f4816994872796a36639b99148d.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/105f6f4816994872796a36639b99148d.png)'
- en: From Film Search to Rosebud 🌹. Image from Unsplash.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 从电影搜索到“玫瑰bud”🌹。图片来自Unsplash。
- en: '**Table of Contents**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**目录**'
- en: '[Introduction](#d4f8)'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[介绍](#d4f8)'
- en: '[Offline Evaluation](#fdde)'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[离线评估](#fdde)'
- en: '[Online Evaluation](#9988)'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[在线评估](#9988)'
- en: '[Automated Data Pulling with Prefect](#690c)'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[使用Prefect进行自动化数据提取](#690c)'
- en: '[Summary](#0875)'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[摘要](#0875)'
- en: '**Relevant Links**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关链接**'
- en: '[GitHub repo](https://github.com/EdIzaguirre/Rosebud)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub仓库](https://github.com/EdIzaguirre/Rosebud)'
- en: '[Link to earlier article discussing Film Search, a dev version of this project](https://medium.com/towards-data-science/how-to-build-a-rag-system-with-a-self-querying-retriever-in-langchain-16b4fa23e9ad)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[链接到之前讨论电影搜索的文章，这是该项目的开发版](https://medium.com/towards-data-science/how-to-build-a-rag-system-with-a-self-querying-retriever-in-langchain-16b4fa23e9ad)'
- en: '[Try out the app](https://filmsearch.azurewebsites.net/) (now 100% free! 🤑)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[尝试该应用](https://filmsearch.azurewebsites.net/)（现在100%免费！🤑）'
- en: Introduction
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'A few months ago, I released the *Film Search* app, a Retrieval-Augmented Generation
    (RAG) application designed to recommend films based on user queries. For example,
    a user may ask: *“Find me drama movies in English that are less than 2 hours long
    and feature dogs.”* and receive a recommendation like:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 几个月前，我发布了*电影搜索*应用，这是一个基于用户查询推荐电影的检索增强生成（RAG）应用程序。例如，用户可能会问：“*帮我找到少于2小时、英语电影并且有狗的剧情片*。”然后会收到类似的推荐：
- en: 'Title of Film: Hachi: A Dog’s Tale'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 电影标题：《忠犬八公的故事》
- en: ''
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Runtime: 93 minutes'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 运行时：93分钟
- en: 'Release Year: 2009'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 发行年份：2009
- en: 'Streaming: Not available for streaming'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 流媒体：无法在线观看
- en: This film tells the poignant true story of Hachiko, an Akita dog known for his
    remarkable loyalty to his owner. The emotional depth and the themes of friendship
    and loyalty resonate strongly, making it a touching drama that showcases the profound
    bond between humans and dogs. It’s perfect for anyone looking for a heartfelt
    story that highlights the importance of companionship.
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这部电影讲述了忠诚于主人的秋田犬八公的感人真实故事。电影深刻的情感表达以及友谊和忠诚的主题产生了强烈共鸣，使其成为一部感人的剧作，展现了人类与狗之间深厚的纽带。对于任何寻求一段突显陪伴重要性的真挚故事的人来说，这部电影都是完美的选择。
- en: ''
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: …
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: …
- en: This was not just a simple RAG app, however. It included what is known as **self-querying
    retrieval**. This means that the bot takes the user’s query and transforms it
    by adding metadata filters. This ensures any documents pulled into the chat model’s
    context respects the constraints set by the user’s query. For more information,
    I recommend checking out my earlier article linked above.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这不仅仅是一个简单的 RAG 应用。它包括了被称为 **自查询检索** 的功能。这意味着机器人会获取用户的查询，并通过添加元数据过滤器来转换它。这确保了任何拉取到聊天模型上下文中的文档都遵守用户查询设置的约束条件。有关更多信息，建议查阅我之前的文章链接。
- en: 'Unfortunately, there were some issues with the app:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，应用程序存在一些问题：
- en: There was no offline evaluation done, besides passing the ‘eye test’. This test
    is necessary, but not sufficient.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了通过“眼睛测试”之外，没有进行离线评估。这个测试是必要的，但不足够。
- en: Observability was non-existent. If a query went poorly, you had to manually
    pull up the project and run some ad-hoc scripts in an attempt to see what went
    wrong.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可观察性几乎不存在。如果查询失败，你必须手动打开项目并运行一些临时脚本，试图查看出了什么问题。
- en: The Pinecone vector database had to be pulled manually. This meant the documents
    would quickly be out of date if, say, a film got pulled from a streaming service.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pinecone 向量数据库必须手动拉取。这意味着如果某部电影被从流媒体服务中下架，文档会迅速过时。
- en: 'In this article, I will briefly cover some of the improvements made to the
    Film Search app. This will cover:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将简要介绍一些对电影搜索应用程序所做的改进。内容包括：
- en: '**Offline Evaluation using RAGAS and Weave**'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 RAGAS 和 Weave 的离线评估**'
- en: '**Online Evaluation and Observability**'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在线评估与可观察性**'
- en: '**Automated Data Pulling using Prefect**'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Prefect 的自动化数据拉取**'
- en: 'One thing before we jump in: I found the name *Film Search* to be a bit generic,
    so I rebranded the app as *Rosebud* 🌹*,* hence the image shown above. Real film
    geeks will [understand the reference](https://www.youtube.com/watch?v=O4mQqVqRB7I).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入讨论之前，我发现“电影搜索”这个名字有些普通，因此我将应用重新命名为 *Rosebud* 🌹，因此上面显示的是该图像。真正的电影迷会 [理解这个引用](https://www.youtube.com/watch?v=O4mQqVqRB7I)。
- en: Offline Evaluation
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离线评估
- en: It is important to be able to judge if a change made to your LLM application
    improves or degrades its performance. Unfortunately, evaluation of LLM apps is
    a difficult and novel space. There is simply not much agreement on what constitutes
    a good evaluation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 能够判断对 LLM 应用所做的更改是提升了性能还是降低了性能非常重要。不幸的是，LLM 应用的评估是一个复杂且全新的领域。对于什么构成一个好的评估，目前几乎没有一致的意见。
- en: For Rosebud🌹, I decided to tackle what is known as the [RAG triad](https://www.trulens.org/trulens_eval/getting_started/core_concepts/rag_triad/).
    This approach is promoted by TruLens, a platform to evaluate and track LLM applications.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Rosebud🌹，我决定处理被称为 [RAG 三合一方法](https://www.trulens.org/trulens_eval/getting_started/core_concepts/rag_triad/)
    的问题。这种方法是由 TruLens 推广的，这是一个评估和跟踪 LLM 应用的平台。
- en: '![](../Images/d536e3e20215d54bdf6e350f4f06a994.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d536e3e20215d54bdf6e350f4f06a994.png)'
- en: The RAG Triad. Image by author.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: RAG 三合一方法。图片由作者提供。
- en: 'The triad covers three aspects of a RAG app:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 三合一方法涵盖了 RAG 应用的三个方面：
- en: '**Context Relevancy**: When a query is made by the user, documents fill the
    context of the chat model. Is the retrieved context actually useful? If not, you
    may need to tweak things like document embedding, chunking, or metadata filtering.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文相关性**：当用户发出查询时，文档填充了聊天模型的上下文。检索到的上下文实际上有用吗？如果没有，可能需要调整文档嵌入、分块或元数据过滤等方面。'
- en: '**Faithfulness:** Is the model’s response actually grounded in the retrieved
    documents? You don’t want the model making up facts; the whole point of RAG is
    to help reduce hallucinations by using retrieved documents.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**准确性**：模型的回答是否确实基于检索到的文档？你不希望模型编造事实；RAG 的关键就在于通过使用检索到的文档来减少幻觉。'
- en: '**Answer Relevancy:** Does the model’s response actually answer the user’s
    query? If the user asks for “*Comedy films made in the 1990s?*”, the model’s answer
    better contain only comedy films made in the 1990s.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回答相关性**：模型的回答是否真的解答了用户的查询？如果用户询问“*1990年代的喜剧电影*”，模型的回答最好只包含1990年代的喜剧电影。'
- en: 'There are a few ways to attempt to assess these three functions of a RAG app.
    One way would be to use human expert evaluators. Unfortunately, this would be
    expensive and wouldn’t scale. For Rosebud🌹 I decided to use **LLMs-as-a-judges**.
    This means using a chat model to look at each of the three criteria above and
    assigning a score of 0 to 1 for each. This method has the advantage of being cheap
    and scaling well. To accomplish this, I used [RAGAS](https://github.com/explodinggradients/ragas),
    a popular framework that helps you evaluate your RAG applications. The RAGAS framework
    includes the three metrics mentioned above and makes it fairly easy to use them
    to evaluate your apps. Below is a code snippet demonstrating how I conducted this
    offline evaluation:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 评估 RAG 应用的这三个功能有几种方式。一种方法是使用人类专家评估员。不幸的是，这样做会很昂贵，并且难以扩展。对于 Rosebud🌹，我决定使用 **LLMs
    作为评审员**。这意味着使用聊天模型来查看上述三个标准中的每一个，并为每个标准打分，范围从 0 到 1。这种方法的优点是成本低且易于扩展。为此，我使用了 [RAGAS](https://github.com/explodinggradients/ragas)，这是一个流行的框架，帮助你评估
    RAG 应用。RAGAS 框架包括上面提到的三个指标，并使你能够相对容易地使用它们来评估应用。下面是我进行离线评估时使用的代码片段：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A few notes:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 几点说明：
- en: 'With twenty questions and three criteria to judge across, you’re looking at
    sixty LLM calls for a single evaluation! It gets even worse though; with the `rosebud_chat_model`
    , there are two calls for every query: one to construct the metadata filter and
    another to provide the answer, so really this is 120 calls for a single eval!
    All models used in this evaluation are the new `gpt-4o-mini`, which I strongly
    recommend. In my experience the calls cost $0.05 per evaluation.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有二十个问题和三个评判标准，你需要进行六十次 LLM 调用来完成一次评估！不过情况更糟；使用 `rosebud_chat_model` 时，每个查询需要两次调用：一次构建元数据过滤器，另一次提供答案，因此一次评估实际上需要
    120 次调用！本次评估中使用的所有模型都是新的 `gpt-4o-mini`，我强烈推荐使用。在我的经验中，每次评估的调用费用为 $0.05。
- en: Note that we are using `asyncio.run` to run the evals. It is ideal to use asynchronous
    calls because you don’t want to evaluate each question sequentially one after
    the other. Instead, with `asyncio` we can begin evaluating other questions as
    we wait for previous I/O operations to finish.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请注意，我们使用了 `asyncio.run` 来运行评估。使用异步调用是理想的，因为你不想让每个问题按顺序一个接一个地评估。相反，使用 `asyncio`
    时，我们可以在等待前一个 I/O 操作完成时，开始评估其他问题。
- en: There are a total of twenty questions for a single evaluation. These span a
    variety of typical film queries a user may ask. I mostly came up with these myself,
    but in practice it would be better to use queries actually asked by users in production.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次评估共有二十个问题。这些问题涵盖了用户可能提出的各种典型电影查询。我大部分是自己想出来的，但在实际应用中，最好使用生产环境中实际由用户提出的查询。
- en: Notice the `weave.init` and the `@weave.op` decorator that are being used. These
    are part of the new [Weave library](https://wandb.ai/site/weave/) from Weights
    & Biases (W&B). Weave is a complement to the traditional W&B library, with a focus
    on LLM applications. It allows you to capture inputs and outputs of LLMs by using
    a the simple `@weave.op` decorator. It also allows you to capture the results
    of evaluations using `weave.Evaluation(…)` . By integrating RAGAS to perform evaluations
    and Weave to capture and log them, we get a powerful duo that helps GenAI developers
    iteratively improve their applications. You also get to log the model latency,
    cost, and more.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注意使用的 `weave.init` 和 `@weave.op` 装饰器。这些是来自 Weights & Biases (W&B) 的新 [Weave
    库](https://wandb.ai/site/weave/) 的一部分。Weave 是传统 W&B 库的补充，专注于 LLM 应用。它通过简单的 `@weave.op`
    装饰器，允许你捕获 LLM 的输入和输出。它还允许你使用 `weave.Evaluation(…)` 捕获评估结果。通过集成 RAGAS 进行评估，并使用
    Weave 捕获和记录这些评估，我们得到了一个强大的组合，帮助 GenAI 开发者逐步改进他们的应用。你还可以记录模型的延迟、成本等信息。
- en: '![](../Images/ec7f61849ae276bbcc97508920e22e5b.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec7f61849ae276bbcc97508920e22e5b.png)'
- en: Example of Weave + RAGAS integration. Image by author.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Weave + RAGAS 集成示例。图片由作者提供。
- en: In theory, one can now tweak a hyperparameter (e.g. temperature), re-run the
    evaluation, and see if the adjustment has a positive or negative impact. Unfortunately,
    in practice I found the LLM judging to be finicky, and I am [not the only one](https://x.com/aparnadhinak/status/1748368364395721128).
    LLM judges seem to be fairly bad at using a floating point value to assess these
    metrics. Instead, it appears they seem to do better at classification e.g. a thumbs
    up/thumbs down. RAGAS doesn’t yet support LLM judges performing classification.
    Writing it by hand doesn’t seem too difficult, and perhaps in a future update
    I may attempt this myself.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，现在可以调整一个超参数（例如温度），重新运行评估，然后查看调整是否产生正面或负面影响。不幸的是，实际操作中我发现LLM判断有些挑剔，我[并非唯一一个](https://x.com/aparnadhinak/status/1748368364395721128)。LLM评判似乎很难使用浮点值来评估这些指标。相反，它们似乎在分类任务上表现得更好，例如赞或踩。RAGAS尚不支持LLM评判进行分类。手动编写这个功能似乎不难，也许在未来的更新中，我会尝试自己实现。
- en: '**Online Evaluation**'
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**在线评估**'
- en: Offline evaluation is good for seeing how tweaking hyperparameters affects performance,
    but in my opinion online evaluation is far more useful. In Rosebud🌹 I have now
    incorporated the use of 👍/👎 buttons at the bottom of every response to provide
    feedback.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 离线评估有助于查看调整超参数如何影响性能，但在我看来，在线评估要更有用。在Rosebud🌹中，我现在已经在每个响应的底部加入了👍/👎按钮来提供反馈。
- en: '![](../Images/c9351c7a2914be0e13e6295426c304fd.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c9351c7a2914be0e13e6295426c304fd.png)'
- en: Example of online feedback. Image by author.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在线反馈示例。图像由作者提供。
- en: 'When a user clicks on either button they are told that their feedback was logged.
    Below is a snippet of how this was accomplished in the Streamlit interface:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击任一按钮时，他们会被告知反馈已记录。以下是如何在 Streamlit 界面中实现这一功能的代码片段：
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that the process of sending the feedback to W&B runs on a separate thread
    rather than on the main thread. This is to prevent the user from getting stuck
    for a few seconds waiting for the logging to complete.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，发送反馈到W&B的过程是通过一个独立的线程执行的，而不是在主线程上运行。这是为了避免用户在等待日志完成时被卡住。
- en: 'A W&B table is used to store the feedback. Five quantities are logged in the
    table:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用W&B表格来存储反馈。表格中记录了五个数量：
- en: '**Sentiment:** Whether the user clicked thumbs up or thumbs down'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**情感:** 用户点击了赞还是踩'
- en: '**Query:** The user’s query, e.g. *Find me drama movies in English that are
    less than 2 hours long and feature dogs.*'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询:** 用户的查询，例如 *找我一些英文的狗狗题材的剧情片，时长不到2小时。*'
- en: '**Query_Constructor:** The results of the query constructor, which rewrites
    the user’s query and includes metadata filtering if necessary, e.g.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**查询构造器:** 查询构造器的结果，它重写了用户的查询，并在必要时包括元数据过滤，例如'
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Context:** The retrieved context based on the reconstructed query, e.g. *Title:
    Hachi: A Dog’s Tale. Overview: A drama based on the true story of a college professor’s…*'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上下文:** 基于重构后的查询检索到的上下文，例如 *标题: 哈奇：一只狗的故事。概述: 基于一位大学教授真实故事的剧情片……*'
- en: '**Response:** The model’s response'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应:** 模型的响应'
- en: All of this is logged conveniently in the same project as the Weave evaluations
    shown earlier. Now, when a query goes south it is as simple as hitting the thumbs
    down button to see exactly what happened. This will allow much faster iteration
    and improvement of the Rosebud🌹 recommendation application.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都方便地记录在与先前展示的Weave评估相同的项目中。现在，当查询出错时，只需点击踩按钮，就可以看到具体发生了什么。这将大大加速Rosebud🌹推荐应用的迭代和改进。
- en: '![](../Images/f1ec5605b853d379a932d40b1012a4c2.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f1ec5605b853d379a932d40b1012a4c2.png)'
- en: Image showing observability of the model’s response. Note on the left-hand side
    how it is seamless to transition between W&B and Weave. Image by author.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 显示模型响应可观察性的图像。注意左侧如何在W&B和Weave之间无缝切换。图像由作者提供。
- en: '**Automated Data Pulling using Prefect**'
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**使用Prefect自动化数据拉取**'
- en: To ensure recommendations from Rosebud🌹 continue to stay accurate it was important
    to automate the process of pulling data and uploading them to Pinecone. For this
    task, I chose [Prefect](https://www.prefect.io/). Prefect is a popular workflow
    orchestration tool. I was looking for something lightweight, easy to learn, and
    Pythonic. I found all of this in Prefect.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保Rosebud🌹的推荐持续准确，自动化拉取数据并上传到Pinecone的过程变得尤为重要。为此，我选择了[Prefect](https://www.prefect.io/)。Prefect是一个流行的工作流编排工具。我正在寻找一个轻量、易学且符合Python风格的工具，而Prefect正符合这些要求。
- en: '![](../Images/74bf21e667d7580aa0f0a410a2ac3d9f.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74bf21e667d7580aa0f0a410a2ac3d9f.png)'
- en: Automated flow for pulling and updating Pinecone vector store provided by Prefect.
    Image by author.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Prefect 提供的自动化流程用于拉取和更新 Pinecone 向量存储。图片由作者提供。
- en: 'Prefect offers a variety of ways to schedule your workflows. I decided to use
    the [push work pools with automatic infrastructure provisioning](https://docs.prefect.io/latest/tutorial/work-pools/#push-work-pools-with-automatic-infrastructure-provisioning).
    I found that this setup balances simplicity with configurability. It allows the
    user to task Prefect with automatically provisioning all of the infrastructure
    needed to run your flow in your cloud provider of choice. I chose to deploy on
    Azure, but deploying on GCP or AWS only requires changing a few lines of code.
    Refer to the `pinecone_flow.py` file for more details. A simplified flow is provided
    below:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Prefect 提供多种方式来调度您的工作流。我决定使用[带自动基础设施配置的推送工作池](https://docs.prefect.io/latest/tutorial/work-pools/#push-work-pools-with-automatic-infrastructure-provisioning)。我发现这种设置在简易性与可配置性之间达到了平衡。它允许用户将
    Prefect 任务委托给自动配置运行您工作流所需的所有基础设施，部署到您选择的云提供商。我选择了在 Azure 上进行部署，但在 GCP 或 AWS 上部署只需更改几行代码。更多详细信息请参考
    `pinecone_flow.py` 文件。以下是简化后的流程：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice how simple it is to turn Python functions into a Prefect flow. All you
    need are some sub-functions styled with `@task` decorators and a `@flow` decorator
    on the main function. Also note that after uploading the documents to Pinecone,
    the last step of our flow publishes the dataset to Weave. This is important for
    reproducibility purposes. To learn the basics of Prefect I recommend going through
    the tutorials [on their website](https://docs.prefect.io/latest/tutorial/).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意将 Python 函数转换为 Prefect 流程是多么简单。您只需要一些使用 `@task` 装饰器的子函数，以及在主函数上使用 `@flow`
    装饰器。还要注意，在将文档上传到 Pinecone 后，我们的流程的最后一步会将数据集发布到 Weave。这对于可重复性非常重要。要了解 Prefect 的基本知识，建议浏览[他们网站上的教程](https://docs.prefect.io/latest/tutorial/)。
- en: At the bottom of the script we see how deployment is done in Prefect.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本的底部，我们可以看到如何在 Prefect 中进行部署。
- en: We need to provide a `name` for the deployment. This is arbitrary.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要为部署提供一个 `name` 。这个名称可以随意。
- en: We also need to specify a `work_pool_name` . Push work pools in Prefect automatically
    send tasks to serverless computers without needing a middleman. This name needs
    to match the name used to create the pool, which we’ll see below.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还需要指定一个 `work_pool_name` 。Prefect 中的推送工作池会自动将任务发送到无服务器计算机，而无需中介。这个名称需要与创建池时使用的名称匹配，下面我们将看到这一点。
- en: You also need to specify a `cron` , which is short for chronograph. This allows
    you to specify how often to repeat a workflow. The value `“0 0 * * 0”` means repeat
    this workflow every week. Check out [this website](https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules)
    for details on how the `cron` syntax works.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还需要指定一个 `cron` ，即计时器的简写。它允许您指定重复工作流的频率。值为 `"0 0 * * 0"` 意味着每周重复此工作流。有关 `cron`
    语法如何工作的详细信息，请查看[这个网站](https://cloud.google.com/scheduler/docs/configuring/cron-job-schedules)。
- en: Finally, you need to specify a `DeploymentImage` . Here you specify both a `name`
    and a `platform` . The name is arbitrary, but the platform is not. Since I want
    to deploy to Azure compute instances, and these instances run Linux, it’s important
    I specify that in the `DeploymentImage` .
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，您需要指定一个 `DeploymentImage` 。在此处，您需要指定 `name` 和 `platform` 。名称可以随意，但平台不行。因为我想部署到
    Azure 计算实例，并且这些实例运行 Linux，所以在 `DeploymentImage` 中指定这一点非常重要。
- en: 'To deploy this flow on Azure using the CLI, run the following commands:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 CLI 在 Azure 上部署此工作流，请运行以下命令：
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'These commands will automatically provision all of the necessary infrastructure
    on Azure. This includes an Azure Container Registry (ACR) that will hold a Docker
    image containing all files in your directory as well as any necessary libraries
    listed in a `requirements.txt` . It will also include an Azure Container Instance
    (ACI) Identity that will have permissions necessary to deploy a container with
    the aforementioned Docker image. Finally, the `deployment run` command will schedule
    the code to be run every week. You can check the Prefect dashboard to see your
    flow get run:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令将自动配置 Azure 上所需的所有基础设施。其中包括一个 Azure 容器注册表 (ACR)，它将保存包含您目录中所有文件的 Docker 镜像以及在
    `requirements.txt` 中列出的任何必要库。它还将包括一个 Azure 容器实例 (ACI) 身份，该身份将具有部署上述 Docker 镜像容器所需的权限。最后，`deployment
    run` 命令将每周调度一次代码运行。您可以查看 Prefect 仪表板，查看您的工作流运行情况：
- en: '![](../Images/fd1b54cdc71bbf012184a5f21cddd770.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd1b54cdc71bbf012184a5f21cddd770.png)'
- en: Image of a flow in Prefect being successfully run. Image by author.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Prefect流程成功运行的图像。图像由作者提供。
- en: By updating my Pinecone vector store weekly, I can ensure that the recommendations
    from Rosebud 🌹 remain accurate.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过每周更新我的Pinecone向量存储，我可以确保Rosebud 🌹的推荐结果保持准确。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this article, I discussed my experience improving the Rosebud 🌹 app. This
    included the process of incorporating offline and online evaluation, as well as
    automating the update of my Pinecone vector store.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我讨论了我在改进Rosebud 🌹应用程序方面的经验。这包括了整合离线和在线评估的过程，以及自动更新我的Pinecone向量存储。
- en: 'Some other improvements not mentioned in this article:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 其他一些未在本文中提及的改进：
- en: Including ratings from [The Movie Database](https://www.themoviedb.org/?language=en-US)
    in the film data. You can now ask for “*highly rated films*” and the chat model
    will filter for films above a 7/10.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在电影数据中加入了[电影数据库](https://www.themoviedb.org/?language=en-US)的评分。现在你可以要求“*高评分电影*”，聊天模型将筛选出评分高于7/10的电影。
- en: Upgraded chat models. Now the query and summary models are using `gpt-4o-mini`
    . Recall that the LLM judge model is also using `gpt-4o-mini` .
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 升级版聊天模型。现在查询和摘要模型使用的是`gpt-4o-mini`。请记住，LLM 判断模型也在使用`gpt-4o-mini`。
- en: Embedding model upgraded to `text-embedding-3-small` from `text-embedding-ada-002`
    .
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入模型已从`text-embedding-ada-002`升级为`text-embedding-3-small`。
- en: Years now span 1950–2023, instead of starting at 1920\. Film data from 1920–1950
    was not high quality, and only messed up recommendations.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在的年份跨度为1950–2023年，而不是从1920年开始。1920–1950年的电影数据质量较差，只会导致推荐结果混乱。
- en: UI is cleaner, with all details regarding the project relegated to a sidebar.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户界面更加简洁，所有项目相关的细节都被移到了侧边栏。
- en: Vastly improved documentation on GitHub.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub上的文档大幅改进。
- en: Bug fixes.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 错误修复。
- en: As mentioned at the top of the article, the app is now 100% free to use! I will
    foot the bill for queries for the foreseeable future (hence the choice of `gpt-4o-mini`
    instead of the more expensive `gpt-4o`). I really want to get the experience of
    running an app in production, and having my readers test out Rosebud🌹 is a great
    way to do this. In the unlikely event that the app really blows up, I will have
    to come up with some other model of funding. But that would a great problem to
    have.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如本文开头所述，该应用现在完全免费使用！我将在可预见的未来承担查询费用（因此选择了`gpt-4o-mini`而不是更昂贵的`gpt-4o`）。我非常希望能够获得运营一个生产环境应用的经验，让读者们试用Rosebud🌹是一个很好的方式。如果应用真的爆火，尽管这不太可能，我将需要找到其他的资金模式。但如果真有这种问题，那将是一个很好的问题。
- en: Enjoy discovering awesome films! 🎥
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 享受发现精彩电影的乐趣！🎥
