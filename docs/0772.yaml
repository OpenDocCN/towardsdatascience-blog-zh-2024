- en: Evolving Chess Puzzles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进化国际象棋难题
- en: 原文：[https://towardsdatascience.com/evolving-chess-puzzles-e23e6a58963a?source=collection_archive---------2-----------------------#2024-03-23](https://towardsdatascience.com/evolving-chess-puzzles-e23e6a58963a?source=collection_archive---------2-----------------------#2024-03-23)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/evolving-chess-puzzles-e23e6a58963a?source=collection_archive---------2-----------------------#2024-03-23](https://towardsdatascience.com/evolving-chess-puzzles-e23e6a58963a?source=collection_archive---------2-----------------------#2024-03-23)
- en: An exploration of Evolutionary AI
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进化人工智能的探索
- en: '[](https://medium.com/@bobby.elmes?source=post_page---byline--e23e6a58963a--------------------------------)[![Robert
    Elmes](../Images/a18f0f3f6edfdb7e4ec23712f3620ab7.png)](https://medium.com/@bobby.elmes?source=post_page---byline--e23e6a58963a--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--e23e6a58963a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--e23e6a58963a--------------------------------)
    [Robert Elmes](https://medium.com/@bobby.elmes?source=post_page---byline--e23e6a58963a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@bobby.elmes?source=post_page---byline--e23e6a58963a--------------------------------)[![Robert
    Elmes](../Images/a18f0f3f6edfdb7e4ec23712f3620ab7.png)](https://medium.com/@bobby.elmes?source=post_page---byline--e23e6a58963a--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--e23e6a58963a--------------------------------)[![数据科学探索](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--e23e6a58963a--------------------------------)
    [Robert Elmes](https://medium.com/@bobby.elmes?source=post_page---byline--e23e6a58963a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--e23e6a58963a--------------------------------)
    ·7 min read·Mar 23, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[数据科学探索](https://towardsdatascience.com/?source=post_page---byline--e23e6a58963a--------------------------------)
    ·阅读时长：7分钟·2024年3月23日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/9cbdc030208655c6a92be84f77c5e81f.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9cbdc030208655c6a92be84f77c5e81f.png)'
- en: A chess puzzle, generated using the theory of evolution. [Checkmate in 2 moves
    for white…](https://www.chesspuzzler.com/Daily?date=21%2F11%2F2023)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个国际象棋难题，采用进化理论生成。[白方两步将死…](https://www.chesspuzzler.com/Daily?date=21%2F11%2F2023)
- en: '**Evolutionary Algorithms** (EAs) are a subset of AI that solve problems using
    methods inspired by biological evolution. From optimizing neural networks to resource
    scheduling, they have a stunning range of applications in the real world. Their
    beauty emerges through a shift in focus in what’s required to solve a problem.
    Instead of describing the steps required to reach a goal, EAs describe what the
    goal looks like.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**进化算法**（EAs）是人工智能的一个子集，通过模仿生物进化的方法来解决问题。从优化神经网络到资源调度，它们在现实世界中有着广泛的应用。它们的魅力在于解决问题的方式发生了转变，重点不再是描述达到目标的步骤，而是描述目标的样貌。'
- en: In this article I will explore how we can utilize this fantastic AI to generate
    chess puzzles, the benefits it provides, and the drawbacks we need to consider.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将探讨如何利用这一出色的人工智能生成国际象棋难题、它带来的好处以及我们需要考虑的缺点。
- en: A chess puzzle is a legal chess position, where one unique combination of moves
    results in a win, often ending in a checkmate. They are typically found by analysing
    databases of competitive games between human players.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 国际象棋难题是一个合法的棋盘位置，其中一个独特的走法组合会导致胜利，通常以将死结束。它们通常通过分析人类玩家之间竞争性游戏的数据库来发现。
- en: By generating my own puzzles using nothing but code, randomness, and a sprinkle
    of biology, an interesting, diverse database of puzzles can be created. Lets explore
    how.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仅使用代码、随机性和一点生物学知识生成自己的难题，可以创建一个有趣且多样的难题数据库。让我们探索一下如何实现。
- en: Evolutionary Algorithms typically work by randomly generating a large population
    of results, then picking the ‘fittest’ results using a heuristic and finally taking
    those ‘fittest’ results and generating subsequent random populations. They are
    inspired by Darwin’s theory of natural selection, where the animals in a population
    which are more likely to survive are also more likely to pass on their traits
    to the next generation. After many generations, sometimes hundreds of thousands,
    the population converges on an optimal result. So how can we apply this to chess?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 进化算法通常通过随机生成大量结果的种群，然后使用启发式方法选择“最适合”的结果，最后将这些“最适合”的结果用于生成后续的随机种群。它们的灵感来自达尔文的自然选择理论，在一个种群中，那些更可能生存的动物也更可能将其特征传递给下一代。经过多代的演化，有时甚至是成千上万代，种群会收敛到一个最优解。那么，我们如何将这一原理应用于国际象棋呢？
- en: Population Generation
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 种群生成
- en: With chess, we can create a population of random legal positions by simulating
    games where the program takes it in turns to play random moves for black and white
    a random number of times. By repeating this process tens of thousands of times,
    large samples of random positions can be analyzed for fitness.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在国际象棋中，我们可以通过模拟比赛来创建一个随机合法位置的群体，其中程序轮流进行随机的黑白双方移动若干次。通过重复这一过程成千上万次，可以分析大量的随机位置的适应性。
- en: '*Below, you can see a function from my* ***Board*** *class, which returns a
    list of moves.*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*以下是我的* ***Board*** *类中的一个函数，它返回一个棋步列表。*'
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Survival of the Fittest
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 适者生存
- en: Once a population of positions has been generated, the real tricky bit starts.
    The key to any Evolutionary Algorithm is how you evaluate your heuristic. In my
    case, only positions where a single solution leading to a checkmate were considered
    for a puzzle. After narrowing those results down, heuristic is a measure of how
    difficult it is to choose the correct moves to win the game. But how can a computer
    program estimate how difficult it is for a human to interpret a chess position?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦生成了一个位置群体，真正棘手的部分开始了。任何进化算法的关键在于如何评估你的启发式。在我的案例中，只有那些有单一解法并导致将军的位置才会被考虑为谜题。在筛选这些结果后，启发式是衡量选择正确棋步以赢得比赛的难度。但计算机程序如何评估一个人类解读国际象棋位置的难度呢？
- en: '![](../Images/0f9a1b46ce55996898c8f74f8da59b2c.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0f9a1b46ce55996898c8f74f8da59b2c.png)'
- en: A puzzle generated using a heuristic favoring knights on the board. [Checkmate
    in 2 moves.](https://www.chesspuzzler.com/Daily?date=01%2F11%2F2023)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一种偏向棋盘上骑士的启发式生成的谜题。[2步将军](https://www.chesspuzzler.com/Daily?date=01%2F11%2F2023)
- en: One option is to look at the structure of the puzzle. Is the king safe? Are
    there moves that don’t solve the puzzle, but look good? Do we sacrifice any material?
    What pieces are we moving? By evaluating many factors, we can create a measure
    of difficulty. The issue with this approach is it’s really hard to decide how
    to create a final score from so many factors. Rigid rules also completely ignore
    biases in human perception. It might be that even subtle changes to a chess position
    make it much harder for some individuals to pick the correct move.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是考察谜题的结构。国王安全吗？是否有那些不解决谜题但看起来很不错的棋步？我们是否牺牲了任何棋子？我们移动的是什么棋子？通过评估多个因素，我们可以创建一个难度衡量标准。这个方法的问题是，很难根据这么多因素来决定如何创建最终得分。僵化的规则也完全忽视了人类感知中的偏差。可能甚至是微小的棋盘变化，使得某些人更难选出正确的棋步。
- en: So, how can we get a better idea of human performance? By utilizing large databases
    filled with real games, machine learning models have been trained to play chess
    like players of certain levels. Through these models we can get a better idea
    how players of different abilities might attempt a puzzle. Can an AI trained on
    1200 rated players solve the puzzle? What about 1600, 1900? The benefit of this
    approach is it delves deeper into the minds of real players. However, machine
    learning models are not without their drawbacks. These AIs don’t play like a real
    player, they play like an approximation of a player. They’re also trained on real,
    regular games, meaning they might be unreliable evaluating randomized chess positions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何更好地了解人类的表现呢？通过利用充满真实比赛的大型数据库，机器学习模型已经训练成能够像某一等级的玩家一样下棋。通过这些模型，我们可以更好地理解不同能力的玩家可能如何尝试解谜。一个经过1200等级训练的AI能解开这个谜题吗？1600、1900呢？这种方法的好处在于它能更深入地探究真实玩家的思维。然而，机器学习模型也不是没有缺点。这些AI并不像真实玩家那样下棋，它们更像是玩家的近似模型。它们还在真实、常规的比赛中训练，这意味着它们在评估随机的国际象棋位置时可能不可靠。
- en: By combining the machine learning models with complex and detailed rule based
    evaluation, I created a best of both worlds type scenario. A heuristic that both
    understands the composition of the puzzle, whilst at the same time considering
    how humans might approach it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将机器学习模型与复杂且详细的基于规则的评估相结合，我创造了一种“两全其美”的场景。这是一种启发式方法，既能理解谜题的构成，又能考虑人类可能如何解决它。
- en: The Next Generation
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下一代
- en: Once the best puzzles in a population have been found, the next step is to create
    new generations. This can be done through many evolution inspired techniques.
    I chose to use crossover and mutation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦找到一组最佳谜题，下一步就是创建新一代谜题。这可以通过许多受进化启发的技术来实现。我选择使用交叉和变异。
- en: Crossover involves randomly merging the features of two results in the hope
    you might end up with the best features of both. We can cross over similar chess
    positions by going back a number of moves to a shared starting place, then picking
    legal moves used to reach each result. Perhaps moving the queen gave one puzzle
    a really good property, and moving the knight made another puzzle interesting.
    By combining both of these features we create an even more compelling problem.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 交叉涉及随机合并两个结果的特征，希望能够得到两者的最佳特征。我们可以通过回溯到某个共享的起始点，然后选择用来到达每个结果的合法棋步，来交叉相似的国际象棋位置。也许移动皇后使得一个谜题具有了非常好的特性，而移动骑士则让另一个谜题变得有趣。通过结合这两种特性，我们可以创建出更具吸引力的问题。
- en: Similarly, we can mutate puzzles by backtracking and then going forwards a number
    of moves. Depending on the number of moves you go backwards and forwards it can
    change the puzzle subtly or massively. Too much mutation and you can find the
    algorithm never improving, too little and your best result could converge on a
    single value too quickly.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以通过回溯然后向前走若干步来改变谜题。根据你回溯和前进的步数，谜题可能会发生细微或巨大的变化。突变过多可能会导致算法永远无法改进，而突变过少则可能使你的最佳结果过快地收敛到一个单一的值。
- en: So… What’s the Catch?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么……问题是什么呢？
- en: The most common issue with Evolutionary Algorithms is converging too fast. Initially,
    the puzzles I was generating stopped improving after only a few generations. In
    the real world, physical boundaries such as mountains, deserts and seas have prevented
    populations from crossing over their DNA, allowing genetic diversity to be preserved.
    Without enough genetic diversity, a population won’t evolve vary far. By running
    smaller populations of chess puzzles in parallel for a little while, I gave them
    breathing room enough to maintain some diversity and avoid converging too early.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 进化算法最常见的问题是收敛太快。最初，我生成的谜题在仅仅经过几代后就停止了改进。在现实世界中，山脉、沙漠和海洋等物理边界阻止了种群之间的基因交换，保持了遗传多样性。没有足够的遗传多样性，种群的进化就会受到限制。通过将较小的国际象棋谜题种群并行运行一段时间，我为它们提供了足够的“呼吸空间”，以保持一些多样性并避免过早收敛。
- en: Evolutionary Algorithms can also be very slow. Chess is certainly no exception.
    Running heuristic evaluation on millions of chess positions requires a considerable
    amount of processing. Generally, the longer you run a chess engine on a position
    the more accurate it can predict the next best move. By finding the sweet spot
    in time spent analysing each position, picking out the most promising ones and
    looking at them in much more detail, I could optimise the time a reasonable amount.
    Deciding when to stop generating is also crucial. If a sample has stopped improving
    for several generations then perhaps it’s best to start again with a new random
    population, as it may be unable to improve much further. After countless optimisations,
    my home PC is able to generate over 1000 challenging puzzles per day using evolution.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 进化算法也可能非常缓慢。国际象棋当然也不例外。在数百万个棋盘位置上进行启发式评估需要大量的处理能力。通常，你运行国际象棋引擎的时间越长，它预测下一步最佳棋着的准确性就越高。通过找到分析每个位置所需时间的最佳平衡点，挑选出最有前景的棋局，并更详细地分析它们，我可以在合理的范围内优化时间。决定何时停止生成也至关重要。如果一个样本在经过几代之后停止改进，那么也许最好从新的随机种群开始，因为它可能无法进一步改进。在经过无数次优化后，我的家用电脑能够每天使用进化算法生成超过1000个具有挑战性的谜题。
- en: Finally, diagnosing errors can be incredibly difficult. With many programs you
    can expect certain outputs given certain inputs. With evolution it’s a different
    kettle of fish. I spent a lot of time scratching my head wondering why my population
    was converging too quickly. Was it position generation? Was it the evolutionary
    methods, perhaps the heuristic? It can be easy to not even notice if some things
    aren’t working as intended when the expected output of a program can not be clearly
    defined.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，诊断错误可能是极其困难的。对于许多程序，你可以根据特定的输入预期得到某些输出。而在进化算法中情况则不同。我花了很多时间琢磨为什么我的种群会过快收敛。是位置生成的问题吗？是进化方法的问题，可能是启发式方法的问题？当程序的预期输出无法明确界定时，很容易忽略某些地方没有按预期工作。
- en: Results
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果
- en: However, issues aside, the power and potential of this AI technique shines bright
    for all to see. Using just my old PC I’ve been able to generate almost 50,000
    chess puzzles in 3 months, containing an abundance of weird and wonderful positions.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管存在一些问题，这种AI技术的强大力量和潜力依然光芒四射，人人可见。仅凭我那台旧电脑，我在3个月内就生成了近50,000个国际象棋难题，涵盖了大量奇特而美妙的棋局。
- en: The random nature of the algorithm means that it creates an incredibly colourful
    and diverse set of puzzles. Interesting tactical problems we rarely see in chess
    such as queen sacrifices, knight promotions and en passant are easy to find using
    evolution, but difficult using databases of real games. However, the nonsensical
    nature of the puzzles makes them less applicable to real world scenarios. Although
    great fun, an argument could be made that puzzles based on real games are better
    for learning common patterns in chess games.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 算法的随机性意味着它能够创造出极其丰富多彩、千变万化的难题。在国际象棋中，我们很少见到一些有趣的战术问题，比如皇后牺牲、骑士升变和“过路兵”吃子，而通过进化算法这些问题很容易生成，而用真实棋局的数据库则难以找到。然而，这些难题的荒诞性质使它们对实际场景的适用性较差。虽然非常有趣，但也可以说，基于真实棋局的难题更适合学习国际象棋中的常见模式。
- en: As well as being incredibly productive, the algorithm is also exceptionally
    flexible. Shatranj, lopsided chess boards, it’s easy to extend the EA to work
    with any derivative of chess. This extendable nature is where the evolutionary
    technique really excels. You just can’t do this with databases of games, as they
    simply don’t exist!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 除了极具生产力外，这个算法还异常灵活。沙特兰奇、倾斜棋盘等，扩展进化算法以适应任何衍生版的国际象棋都非常简单。正是这种可扩展性，使得进化技术在这里表现得尤为出色。你无法通过游戏数据库来实现这一点，因为这些数据库根本不存在！
- en: '![](../Images/417016acc765c96534d12c67bd0acc31.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/417016acc765c96534d12c67bd0acc31.png)'
- en: A Shatranj puzzle generated by the algorithm. [Can you checkmate the white king
    in 2 moves?](https://www.chesspuzzler.com/Shatranj?puzzleId=2865)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由算法生成的沙特兰奇（Shatranj）难题。[你能在2步内将白方国王将死吗？](https://www.chesspuzzler.com/Shatranj?puzzleId=2865)
- en: To Conclude
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结语
- en: Although a forgotten corner of AI to many, I’ve shown how evolution can be used
    to create a novel solution to a real world problem. There’s much unexplored potential
    with this technology. With generative AI on the rise, I wonder what other funky
    applications people will find for EAs in the future…
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管对于许多人来说，AI的这一领域可能已经被遗忘，但我展示了如何利用进化算法为现实世界的问题创造出新颖的解决方案。这个技术仍有许多未开发的潜力。随着生成式AI的崛起，我不禁想知道，未来人们还会为进化算法发现哪些有趣的应用…
- en: You can experience the puzzles for yourself on my website, [chesspuzzler.com](https://www.chesspuzzler.com/).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我的网站上亲自体验这些难题，[chesspuzzler.com](https://www.chesspuzzler.com/)。
- en: '*Unless otherwise noted, all images are by the author.*'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者提供。*'
