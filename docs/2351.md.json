["```py\n# Import libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\n# Create dataset\ndataset_dict = {\n    'Outlook': ['sunny', 'sunny', 'overcast', 'rain', 'rain', 'rain', 'overcast', 'sunny', 'sunny', 'rain', 'sunny', 'overcast', 'overcast', 'rain', 'sunny', 'overcast', 'rain', 'sunny', 'sunny', 'rain', 'overcast', 'rain', 'sunny', 'overcast', 'sunny', 'overcast', 'rain', 'overcast'],\n    'Temperature': [85.0, 80.0, 83.0, 70.0, 68.0, 65.0, 64.0, 72.0, 69.0, 75.0, 75.0, 72.0, 81.0, 71.0, 81.0, 74.0, 76.0, 78.0, 82.0, 67.0, 85.0, 73.0, 88.0, 77.0, 79.0, 80.0, 66.0, 84.0],\n    'Humidity': [85.0, 90.0, 78.0, 96.0, 80.0, 70.0, 65.0, 95.0, 70.0, 80.0, 70.0, 90.0, 75.0, 80.0, 88.0, 92.0, 85.0, 75.0, 92.0, 90.0, 85.0, 88.0, 65.0, 70.0, 60.0, 95.0, 70.0, 78.0],\n    'Wind': [False, True, False, False, False, True, True, False, False, False, True, True, False, True, True, False, False, True, False, True, True, False, True, False, False, True, False, False],\n    'Num_Players': [52,39,43,37,28,19,43,47,56,33,49,23,42,13,33,29,25,51,41,14,34,29,49,36,57,21,23,41]\n}\ndf = pd.DataFrame(dataset_dict)\n\n# One-hot encode 'Outlook' column\ndf = pd.get_dummies(df, columns=['Outlook'], prefix='', prefix_sep='', dtype=int)\n\n# Convert 'Wind' column to binary\ndf['Wind'] = df['Wind'].astype(int)\n\n# Split data into features and target, then into training and test sets\nX, y = df.drop(columns='Num_Players'), df['Num_Players']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.5, shuffle=False)\n```", "```py\nfrom sklearn.metrics import mean_squared_error\n\ny_true = np.array([10, 15, 20, 15, 10]) # True labels\ny_pred = np.array([15, 11, 18, 14, 10]) # Predicted values\n\n# Calculate RMSE using scikit-learn\nrmse = mean_squared_error(y_true, y_pred, squared=False)\n\nprint(f\"RMSE = {rmse:.2f}\")\n```", "```py\nfrom sklearn.dummy import DummyRegressor\n\n# Choose a strategy for your DummyRegressor ('mean', 'median', 'constant')\nstrategy = 'median'\n```", "```py\n# Initialize the DummyRegressor\ndummy_reg = DummyRegressor(strategy=strategy)\n\n# \"Train\" the DummyRegressor (although no real training happens)\ndummy_reg.fit(X_train, y_train)\n```", "```py\n# Use the DummyRegressor to make predictions\ny_pred = dummy_reg.predict(X_test)\nprint(\"Label     :\",list(y_test))\nprint(\"Prediction:\",list(y_pred))\n```", "```py\n# Evaluate the Dummy Regressor's error\nfrom sklearn.metrics import mean_squared_error\n\nrmse = mean_squared_error(y_test, y_pred, squared=False)\nprint(f\"Dummy Regression Error: {rmse.round(2)}\")\n```", "```py\n# Import libraries\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.dummy import DummyRegressor\n\n# Create dataset\ndataset_dict = {\n    'Outlook': ['sunny', 'sunny', 'overcast', 'rain', 'rain', 'rain', 'overcast', 'sunny', 'sunny', 'rain', 'sunny', 'overcast', 'overcast', 'rain', 'sunny', 'overcast', 'rain', 'sunny', 'sunny', 'rain', 'overcast', 'rain', 'sunny', 'overcast', 'sunny', 'overcast', 'rain', 'overcast'],\n    'Temperature': [85.0, 80.0, 83.0, 70.0, 68.0, 65.0, 64.0, 72.0, 69.0, 75.0, 75.0, 72.0, 81.0, 71.0, 81.0, 74.0, 76.0, 78.0, 82.0, 67.0, 85.0, 73.0, 88.0, 77.0, 79.0, 80.0, 66.0, 84.0],\n    'Humidity': [85.0, 90.0, 78.0, 96.0, 80.0, 70.0, 65.0, 95.0, 70.0, 80.0, 70.0, 90.0, 75.0, 80.0, 88.0, 92.0, 85.0, 75.0, 92.0, 90.0, 85.0, 88.0, 65.0, 70.0, 60.0, 95.0, 70.0, 78.0],\n    'Wind': [False, True, False, False, False, True, True, False, False, False, True, True, False, True, True, False, False, True, False, True, True, False, True, False, False, True, False, False],\n    'Num_Players': [52,39,43,37,28,19,43,47,56,33,49,23,42,13,33,29,25,51,41,14,34,29,49,36,57,21,23,41]\n}\ndf = pd.DataFrame(dataset_dict)\n\n# One-hot encode 'Outlook' column\ndf = pd.get_dummies(df, columns=['Outlook'], prefix='', prefix_sep='', dtype=int)\n\n# Convert 'Wind' column to binary\ndf['Wind'] = df['Wind'].astype(int)\n\n# Split data into features and target, then into training and test sets\nX, y = df.drop(columns='Num_Players'), df['Num_Players']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.5, shuffle=False)\n\n# Initialize and train the model\ndummy_reg = DummyRegressor(strategy='median')\ndummy_reg.fit(X_train, y_train)\n\n# Make predictions\ny_pred = dummy_reg.predict(X_test)\n\n# Calculate and print RMSE\nprint(f\"RMSE: {mean_squared_error(y_test, y_pred, squared=False)}\")\n```"]