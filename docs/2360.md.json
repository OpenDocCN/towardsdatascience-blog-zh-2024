["```py\nvotacoes = pd.concat([pd.read_csv('votacoes-2023.csv', header=0, sep=';'),  pd.read_csv('votacoes-2024.csv', header=0, sep=';')])\nvotacoes_votos_dep = pd.concat([pd.read_csv('votacoesVotos-2023.csv', sep=';', quoting=1) ,  pd.read_csv('votacoesVotos-2024.csv', sep=';', on_bad_lines='warn', quoting=1, encoding='utf-8')])\n```", "```py\nplen = votacoes[votacoes['idOrgao'] == 180]\nvotacoes_ids = plen['id'].unique()\nvotacoes_votos_dep = votacoes_votos_dep[votacoes_votos_dep['idVotacao'].isin(votacoes_ids)]\n```", "```py\nvotacoes_votos_dep['voto_numerico'] = votacoes_votos_dep['voto'].map({'Sim': 1, 'NÃ£o':0})\nvotes_pivot = votacoes_votos_dep.pivot_table(index='deputado_nome', columns='idVotacao', values='voto_numerico').dropna(axis=1, thresh=280)\n```", "```py\nfrom sklearn.metrics.pairwise import cosine_similarity\nsimilarity_matrix = cosine_similarity(votes_pivot)\nsimilarity_df = pd.DataFrame(similarity_matrix, index=votes_pivot.index, columns=votes_pivot.index)\n```", "```py\nimport networkx as nx\n\nnames = similarity_df.columns\n# Create the graph as before\nG = nx.Graph()\nfor i, name in enumerate(names):\n    G.add_node(name)\n```", "```py\nthreshold = 0.75\nfor i in range(len(similarity_matrix)):\n    for j in range(i + 1, len(similarity_matrix)):\n        if similarity_matrix[i][j] > threshold:\n            # G.add_edge(names[i], names[j], weight=similarity_matrix[i][j])\n            counter[names[i]].append((names[j], similarity_matrix[i][j]))\nfor source, target in counter.items():\n    selected_targets = sorted(target, key=lambda x: x[1], reverse=True)[:26]\n    for target, weight in selected_targets:\n        G.add_edge(source, target, weight=weight)\n```", "```py\npos = nx.spring_layout(G, k=0.1,  iterations=50, seed=29)\n```", "```py\n # Create Edges\nedge_x = []\nedge_y = []\nfor edge in G.edges():\n    x0, y0 = pos[edge[0]]\n    x1, y1 = pos[edge[1]]\n    edge_x.extend([x0, x1, None])\n    edge_y.extend([y0, y1, None])\n\n# Add edges as a scatter plot\nedge_trace = go.Scatter(x=edge_x, y=edge_y, line=dict(width=0.5, color='#888'), hoverinfo='none', mode='lines')\n# Create Nodes\nnode_x = []\nnode_y = []\nfor node in G.nodes():\n    x, y = pos[node]\n    node_x.append(x)\n    node_y.append(y)\n\n# Add nodes as a scatter plot\nnode_trace = go.Scatter(x=node_x, y=node_y, mode='markers+text', hoverinfo='text', marker=dict(showscale=True, colorscale='YlGnBu', size=10, color=[], line_width=2))\n\n# Add text to the nodes\nnode_trace.text = list(G.nodes())\n\n# Create a figure\nfig = go.Figure(data=[edge_trace, node_trace],\n                layout=go.Layout(showlegend=False, hovermode='closest', margin=dict(b=0,l=0,r=0,t=0), xaxis=dict(showgrid=False, zeroline=False, showticklabels=False), yaxis=dict(showgrid=False, zeroline=False, showticklabels=False)))\n\nfig.show()\n```"]