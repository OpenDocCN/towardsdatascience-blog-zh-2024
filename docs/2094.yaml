- en: Beating Connect Four with AI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用人工智能击败四子连珠
- en: 原文：[https://towardsdatascience.com/beating-connect-four-with-ai-b88b220ff0f0?source=collection_archive---------5-----------------------#2024-08-28](https://towardsdatascience.com/beating-connect-four-with-ai-b88b220ff0f0?source=collection_archive---------5-----------------------#2024-08-28)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/beating-connect-four-with-ai-b88b220ff0f0?source=collection_archive---------5-----------------------#2024-08-28](https://towardsdatascience.com/beating-connect-four-with-ai-b88b220ff0f0?source=collection_archive---------5-----------------------#2024-08-28)
- en: A simple approach using Monte Carlo simulations
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用蒙特卡罗模拟的简单方法
- en: '[](https://medium.com/@rhyscook92?source=post_page---byline--b88b220ff0f0--------------------------------)[![Rhys
    Cook](../Images/64a85864c63ab4d2d15249e1d0d28fbd.png)](https://medium.com/@rhyscook92?source=post_page---byline--b88b220ff0f0--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b88b220ff0f0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b88b220ff0f0--------------------------------)
    [Rhys Cook](https://medium.com/@rhyscook92?source=post_page---byline--b88b220ff0f0--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@rhyscook92?source=post_page---byline--b88b220ff0f0--------------------------------)[![Rhys
    Cook](../Images/64a85864c63ab4d2d15249e1d0d28fbd.png)](https://medium.com/@rhyscook92?source=post_page---byline--b88b220ff0f0--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b88b220ff0f0--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b88b220ff0f0--------------------------------)
    [Rhys Cook](https://medium.com/@rhyscook92?source=post_page---byline--b88b220ff0f0--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b88b220ff0f0--------------------------------)
    ·8 min read·Aug 28, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b88b220ff0f0--------------------------------)
    ·阅读时间8分钟·2024年8月28日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: I love games. Chess, Scrabble, you name it. However one that I’m embarrassingly
    bad at is the very simple game of Connect Four. For some reason, that, and a desire
    to try my hand at the more practical side of data science, gave me the idea of
    building a simple AI capable of playing the game of Connect Four at a high skill
    level.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢游戏。国际象棋、拼字游戏，你能想到的都喜欢。然而，我非常糟糕的游戏之一就是简单的四子连珠。出于某种原因，再加上我想尝试数据科学更实际的一面，这让我萌生了构建一个能够高水平玩四子连珠游戏的简单人工智能的想法。
- en: The obvious problem here is, if I’m terrible at Connect Four, how on Earth can
    I build an AI capable of playing it? Enter Monte Carlo simulations. Monte Carlo
    simulations are a powerful tool in data science that use random sampling to estimate
    complex outcomes. This robust approach has a surprisingly wide array of applications
    from numerical integration, to financial modelling, and as we’ll explore, playing
    the game of Connect Four.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显而易见的问题是，如果我在四子连珠游戏中表现很糟糕，那我怎么能构建一个能玩好这个游戏的人工智能呢？这就引出了蒙特卡罗模拟。蒙特卡罗模拟是数据科学中的一种强大工具，使用随机采样来估算复杂的结果。这种稳健的方法有着出乎意料的广泛应用，从数值积分到金融建模，甚至我们将要探讨的四子连珠游戏。
- en: In this article I’ll cover a brief introduction to Monte Carlo simulations,
    then dive into the specifics of making that work for Connect Four, before putting
    it all together and sharing some code. And if you want, I’ll give you a chance
    to play the AI yourself and see how you fare.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将简要介绍蒙特卡罗模拟，然后深入探讨如何将其应用于四子连珠游戏，最后将所有内容整合并分享一些代码。如果你愿意，我还会给你一个机会亲自与人工智能对战，看看你的表现如何。
- en: Let’s go!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 出发吧！
- en: '![](../Images/1d61fa9c8a400a4181b60d3d80019e59.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1d61fa9c8a400a4181b60d3d80019e59.png)'
- en: Image by the author. (AI generated)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。（AI生成）
- en: 'Introduction to Monte-Carlo Methods:'
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 蒙特卡罗方法介绍：
- en: That idea of Monte-Carlo sampling is pretty simple — if you have a problem that
    you cannot solve analytically why not run random experiments and try to estimate
    a numerical answer? If that does not make sense just yet don’t worry, we’ll look
    at an example in just a moment. But first, let’s get our history straight.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 蒙特卡罗采样法的想法其实很简单——如果你有一个无法通过解析方法解决的问题，为什么不进行随机实验并尝试估算一个数值答案呢？如果现在这还不太理解，别担心，我们很快就会看一个例子。但在此之前，让我们先把历史搞清楚。
- en: The backstory of Monte Carlo methods is quite interesting. The primary developer
    of the method was Stanislaw Ulam, a physicist so prominent he worked on the Manhattan
    project developing the atomic bomb. Important to our story though was Stanislaw’s
    uncle, who had an unfortunate gambling habit that led to Stanislaw naming the
    new calculation method after the famous Monte Carlo casino in Monaco.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 蒙特卡罗方法的背景故事相当有趣。该方法的主要开发者是物理学家斯坦尼斯瓦夫·乌拉姆，他非常著名，曾参与曼哈顿计划开发原子弹。与我们故事相关的是斯坦尼斯瓦夫的叔叔，他有一个不幸的赌博习惯，这导致斯坦尼斯瓦夫将这种新计算方法命名为“蒙特卡罗”，以此纪念摩纳哥著名的蒙特卡罗赌场。
- en: Now, back to that example I promised you on just what it means to generate random
    samples.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到我之前承诺给你们的关于生成随机样本的例子。
- en: A worked example
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个实际示例
- en: Suppose we want to find the area inside a circle of radius 1\. The actual area
    of such a circle is of course our friend πr² and since r is 1, the area is simply
    π. But what if we don’t know π - How can we arrive at this answer by generating
    random experiments as the Monte Carlo method prescribes?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要找到半径为1的圆内的面积。这个圆的实际面积当然是我们熟悉的公式πr²，由于r是1，面积就是π。但如果我们不知道π呢？我们如何通过生成随机实验来按照蒙特卡罗方法得到这个答案？
- en: First, simulate random points in the region -1 < x < 1, and -1 < y < 1\. Then
    for each point note whether or not it falls inside or outside the circle. Below
    I’ve created such simulations for 10, 100, 1000 and 10,000 random coordinates.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在区域 -1 < x < 1 和 -1 < y < 1 中模拟随机点。然后，对于每个点，记录它是否在圆内或圆外。下面我为10个、100个、1000个和10,000个随机坐标创建了这样的模拟。
- en: What you can see is with only 10 points, the area of the circle (or the proportion
    that it takes up) is very rough, but as we add more and more points, the proportion
    of points lying in the circle becomes more consistent.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，只有10个点时，圆的面积（或其占据的比例）非常粗略，但随着我们添加更多的点，位于圆内的点的比例变得越来越一致。
- en: '![](../Images/e4883160c6f08cb621abb87a8456df8a.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e4883160c6f08cb621abb87a8456df8a.png)'
- en: Image by the author. As we increase the number of points, we get a more accurate
    measurement of the proportion of total space occupied by the circle.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。随着点数的增加，我们得到的圆占据的总空间比例测量值更加精确。
- en: Now you’re probably asking, well, these charts are pretty and all, but what’s
    the real takeaway? A very fair question.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会问，好吧，这些图表都很漂亮，但是实际的收获是什么呢？这是一个很好的问题。
- en: Notice we end up with an estimate for the proportion of simulations that results
    in a point within the circle? Well, we know the area of the square is going to
    be 2 x 2 = 4, we can then estimate π by multiplying this proportion by 4, because
    the area is the circle is simply π.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们最终得到的是在圆内的模拟比例的估算吗？好吧，我们知道正方形的面积将是2 x 2 = 4，接下来我们可以通过将这个比例乘以4来估算π，因为圆的面积就是π。
- en: The table below summarises the results. Notice how the π estimate gets closer
    and closer to the true value as the number of simulations increases.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下表总结了结果。注意，随着模拟次数的增加，π的估算值越来越接近真实值。
- en: '![](../Images/8c59f8030bfe738698f878bafd3dbfb1.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c59f8030bfe738698f878bafd3dbfb1.png)'
- en: Image by the author
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'We can do even better with more simulations of course. The following code snippet
    that runs one hundred million samples generally gives a number correct to three
    decimal places:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然可以通过更多的模拟做得更好。以下代码片段运行一亿个样本，通常能给出一个精确到小数点后三位的结果：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The key takeaway here is that by generating random simulations (our coordinate
    pairs), we can achieve a surprisingly precise estimate for a known quantity! Our
    first example of the Monte Carlo method in action.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键收获是，通过生成随机模拟（我们的坐标对），我们可以为一个已知的量得到一个出奇精确的估算！这是我们第一个关于蒙特卡罗方法的实际示例。
- en: Translating the Approach to Games
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏方法的翻译
- en: This is great and all, but we don’t want to calculate π, we want to make an
    AI capable of playing Connect Four! Fortunately, the logic we just used to calculate
    π can also be applied to the game of Connect Four.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法很棒，但我们并不想计算π，我们想制作一个能够玩“四子棋”的AI！幸运的是，我们刚刚用来计算π的逻辑也可以应用于四子棋游戏。
- en: In the above example we did two things, firstly we generated random samples
    (coordinate pairs), and then secondly we approximated a quantity (π).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，我们做了两件事，首先我们生成了随机样本（坐标对），然后第二，我们近似了一个量（π）。
- en: Well here we will do the same. First, we generate random samples as before,
    but this time those random samples will be choosing random moves, which will simulate
    entire games of Connect Four.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们将在这里做同样的事情。首先，我们像之前那样生成随机样本，但这次这些随机样本将选择随机行动，从而模拟整个四子棋游戏。
- en: Then, secondly, we will again approximate a quantity, but the quantity we are
    chasing is the probability of winning with each move.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，第二步，我们将再次近似一个数量，但我们追求的数量是每个行动的获胜概率。
- en: A brief refresher of the rules
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 规则简要回顾
- en: Before we jump into creating simulations, let’s quickly review the rules of
    Connect Four. Players take turns dropping their coloured tiles into any unfilled
    columns on a 7 x 6 game board. The game ends when a player lines up four tiles
    in any direction, or when the board is full and a draw is reached.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始创建模拟之前，先快速回顾一下四子棋的规则。玩家轮流将彩色棋子放入7x6棋盘上任何未填充的列中。游戏在任意一方玩家的棋子连续排成四个时结束，或者当棋盘填满且未分胜负时，游戏以平局结束。
- en: The Monte Carlo method for Connect Four
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 四子棋的蒙特卡罗方法
- en: 'Okay, now that we are on top of the theory, it’s time to put it into practice
    and teach an AI to play Connect Four. In order to find the right move in the game
    of Connect Four we:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们已经掌握了理论，是时候将其付诸实践，教AI玩四子棋了。为了在四子棋游戏中找到正确的行动，我们：
- en: Randomly sample each of the possible legal moves. (What column to drop a tile
    into).
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随机抽取每一个可能的合法行动。（选择将棋子放入哪一列）。
- en: then simulate the entire game from this point assuming both players make their
    moves *completely at random.*
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，从这个位置模拟整个游戏，假设双方玩家的行动*完全随机*。
- en: Track the outcome of each of the random games to calculate win probabilities
    for each move.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 跟踪每场随机游戏的结果，以计算每个行动的胜率。
- en: Finally, select the move with the highest win probability.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最终，选择胜率最高的行动。
- en: That sounds quite simple, and in reality it is!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很简单，实际上也是如此！
- en: To see this method in action, here is a python implementation of this logic
    that I have written to play the game of Connect Four. There’s a bit going on,
    but don’t stress if it doesn’t all make sense — the actual implementation details
    are less important than the concept!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实际展示这个方法，以下是我编写的四子棋游戏Python实现。这里有些复杂的部分，但不用担心，如果一时没弄明白——实际的实现细节并不如概念本身重要！
- en: That said, for those interest the approach makes use of object oriented programming,
    with a Player class capable of making moves on a Board class.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 话说回来，对于那些感兴趣的人，这种方法利用了面向对象编程，包含一个能够在棋盘类（Board class）上执行行动的玩家类（Player class）。
- en: 'Here’s how it works in practice: we start with a list of possible valid moves,
    and we draw from them at random. For each move, we call the `_simulate_move` function,
    which will simulate an entire game from that point onward and return the winning
    symbol. If that symbol matches that of the AI player, we increment the wins. After
    running numerous simulations, we calculate the win rates for each move, and finally
    return the move corresponding to the highest win rate.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 实际操作是这样的：我们从一系列可能的有效行动开始，并从中随机选择。对于每一个行动，我们调用`_simulate_move`函数，它将从该点开始模拟整局游戏并返回获胜符号。如果该符号与AI玩家的符号匹配，我们便增加胜利次数。在进行大量模拟后，我们计算每个行动的胜率，最终返回胜率最高的行动。
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In summary, by simulating random moves and tracking the game from that point,
    this Monte Carlo approach helps the AI start to make much smarter moves than if
    it were just guessing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，通过模拟随机行动并跟踪游戏进程，这种蒙特卡罗方法帮助AI开始做出比单纯猜测更聪明的决策。
- en: 'Some Practical Examples:'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些实际示例：
- en: Okay enough code! Let’s put the AI to the test and see how it will perform in
    a couple of positions. Below we will go through two different positions, and show
    the outcome of the above block of code. The first situation is quite simple, and
    the second a bit more nuanced.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，代码说完了！让我们来测试一下AI，看看它在几种不同的局面下会表现如何。接下来我们将通过两个不同的局面，展示上述代码块的结果。第一个局面非常简单，第二个则稍微复杂一些。
- en: '![](../Images/8427445ef01a37643cd7a6a475699b0f.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8427445ef01a37643cd7a6a475699b0f.png)'
- en: Image by the author
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作者插图
- en: It’s red turn, and the obvious best move is to play a move in the 5th column.
    If we simulate 1000 random games from this position using the method above, the
    AI player creates the following win rates. Placing a tile in column 5 results
    in a win every time (as it should!), and is chosen.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在轮到红方了，显而易见最好的行动是将棋子放在第5列。如果我们使用上述方法从这个位置模拟1000场随机游戏，AI玩家得到了以下胜率。将棋子放在第5列每次都能获胜（正如预期的那样！），因此选择了这个行动。
- en: '![](../Images/ace860d7ea3c15f444d37f5a1e03c230.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ace860d7ea3c15f444d37f5a1e03c230.png)'
- en: Table of results by the author. This shows the win rate of random games based
    on the sampled move. The bolded move is that chosen by the AI player.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的结果表格。此表显示了基于采样走法的随机游戏的胜率。加粗的走法是由人工智能玩家选择的。
- en: Fantastic! Our AI can identify a winning move when one is available. A simple
    scenario yes, but to be honest I’ve missed plenty of wins in the game before…
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们的人工智能可以在有机会时识别出获胜的走法。这个场景很简单，是的，但老实说，我之前在游戏中错过了很多获胜的机会……
- en: Now, let’s look at another position. This one is a little more tricky. Have
    you got an idea of what Red should play to prevent Yellow gaining a winning advantage?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看另一个局面。这一局稍微复杂一点。你能想到红方该如何下棋，才能防止黄方获得获胜的优势吗？
- en: '![](../Images/c82a436ff2f2d3f743b35345fa99c516.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c82a436ff2f2d3f743b35345fa99c516.png)'
- en: Image by the author.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: The key here is to prevent yellow from creating an open-sided 3 in a row set
    up, which would lead to a win. Red needs to block this by playing in either the
    3rd or 6th column! Simulating 1000 games from this position we get the below win-rates.
    Note the AI correctly identifies the two blocking moves (column 3 and 6) as having
    the highest win rates. Further it realised column 6 has the highest chance of
    winning and selects that.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的关键是要防止黄方形成一个有开放边的三连排布局，因为那样会导致胜利。红方需要通过在第3列或第6列下棋来阻挡这一点！我们从这个位置模拟1000局游戏，得到了如下的胜率。注意，人工智能正确地识别出这两种阻挡走法（第3列和第6列）具有最高的胜率。而且，它还意识到第6列的获胜机会最大，因此选择了第6列。
- en: '![](../Images/4cfd2cff67d8a4c3a65b5987c3e67067.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4cfd2cff67d8a4c3a65b5987c3e67067.png)'
- en: Table of results by the author. This shows the win rate of random games based
    on the sampled move. The bolded move is that chosen by the AI player.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的结果表格。此表显示了基于采样走法的随机游戏的胜率。加粗的走法是由人工智能玩家选择的。
- en: How does it fair in practice?
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实际效果如何呢？
- en: 'See for yourself! You can challenge the AI here: [https://fourinarowgame.online/](https://fourinarowgame.online/)
    . The difficulty is based on adjusting the number of simulations. Easy simulates
    50 games, moderate simulates 500 games, and hard simulates 1500 games. Personally
    I can beat the easy mode pretty consistently, but that’s about it!'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 亲自体验一下吧！你可以在这里挑战人工智能：[https://fourinarowgame.online/](https://fourinarowgame.online/)。难度是根据模拟次数来调整的。简单模式模拟50局，中等模式模拟500局，困难模式模拟1500局。就个人而言，我通常能够在简单模式下获胜，但仅此而已！
- en: Conclusion
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Okay, let’s bring it all together. In writing this article I really wanted to
    do two things. First, I wanted to demonstrate the power of the Monte Carlo method
    for a straight forward calculation like estimating π by simulating random coordinates.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们将这些内容综合起来。在写这篇文章时，我真的想做两件事。首先，我想展示蒙特卡洛方法在像通过模拟随机坐标来估算π这样直接计算中的强大能力。
- en: Next, and more interestingly, I wanted to show the strength of the same approach
    to board games. What’s fascinating is that despite knowing nothing of Connect
    Four strategy, it’s entirely possible to just simulate random games, and end up
    with an AI opponent capable of playing at quite a high level!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，更有趣的是，我想展示相同方法在棋盘游戏中的强大效果。有趣的是，尽管对四连棋的策略一无所知，完全可以通过模拟随机游戏，最终得到一个能够以相当高水平进行对弈的人工智能对手！
- en: As always, thanks for reading and see you next time.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，感谢阅读，下次见。
