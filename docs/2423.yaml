- en: Dynamic GitHub Pages - Panel (pyodide-worker)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/dynamic-github-pages-panel-pyodide-worker-17c56ca88455?source=collection_archive---------8-----------------------#2024-10-04](https://towardsdatascience.com/dynamic-github-pages-panel-pyodide-worker-17c56ca88455?source=collection_archive---------8-----------------------#2024-10-04)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How do you create interactive and client-side GitHub Pages ? The first stone
    in an ambitious edifice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@petoulemonde?source=post_page---byline--17c56ca88455--------------------------------)[![Pierre-Etienne
    Toulemonde](../Images/95fdda47e79e3c194fc96ef29f3a2188.png)](https://medium.com/@petoulemonde?source=post_page---byline--17c56ca88455--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--17c56ca88455--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--17c56ca88455--------------------------------)
    [Pierre-Etienne Toulemonde](https://medium.com/@petoulemonde?source=post_page---byline--17c56ca88455--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--17c56ca88455--------------------------------)
    ·10 min read·Oct 4, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/462c2466e934eadb68aada8cc91dbecb.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Joshua Sortino](https://unsplash.com/@sortino?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '**Index**:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Discussion
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 1\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For several years now, I’ve been dreaming of having a nice portfolio to showcase
    my projects as a budding data scientist. After almost 1 year of reflection, trials,
    failures and a few successes, I created my first portfolio on GitHub Pages. Happy
    with this personal achievement, I wrote an article about it to share the fruit
    of my research with the community, available [here](/full-guide-to-build-a-professionnal-portfolio-with-python-markdown-git-and-github-page-for-66d12f7859f0).
  prefs: []
  type: TYPE_NORMAL
- en: This portfolio was created using the mkdocs python package. Mkdocs is a wonderful
    package for this kind of project, but with a few shortcomings, the main one being
    the total lack of interactivity with the reader. The further I got into creating
    my portfolio, the more frustrated I became by the lack of interactivity. My constraints
    at the time (still true today) were to have everything executed free of charge
    and client-side, so the GitHub Pages solution was perfectly suited to my needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The further I got into my static portfolio, the more the idea of having a dynamic
    portfolio system popped into my head. My goal was clear: find a solution to create
    a reader-interactive portfolio hosted on GitHub Pages. In my research, I found
    almost no articles dealing with this subject, so I started looking for software,
    packages and code snippets to address this problem.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The research question guiding this article is: how do I create a dynamic, full-client-side
    website? My technical constraints are as follows: Use GitHub Pages.'
  prefs: []
  type: TYPE_NORMAL
- en: About dashboarding package, I choose to limit myself to Panel from the holoviz
    suite, because it’s a great package and I’d like to improve my skills with it.
  prefs: []
  type: TYPE_NORMAL
- en: For the purposes of this article, I’ve searched for and found many more or less
    similar solutions. This article is therefore the first in a series of articles,
    the aim of which will be to present different solutions to the same research question.
  prefs: []
  type: TYPE_NORMAL
- en: But what’s the point of having dynamic Github pages? GitHub Pages is a very
    interesting solution for organization/project presentation, 100% hosted by GitHub,
    free of charge, with minimal configuration and no server maintenance. The ability
    to include dynamic content is a powerful way of communicating about your organization
    or project. For data professionals, it’s a very useful solution for quickly generating
    a dynamic and interesting portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: Holoviz is an exciting and extremely rich set of pacakges. It’s a complete visualization
    and dashboarding solution, powerful on reasonably sized data and big data. This
    solution supports all major input data manipulation packages (polars, pandas,
    dask, X-ray, …), and offers high-level syntax for generating interactive visualizations
    with a minimum of code. This package also allows you to customize the output and,
    in particular, to choose your visualization back-end such as pandas (I’ve written
    [an article](https://medium.com/towards-data-science/the-power-of-pandas-plots-backends-6a08d52071d2)
    about it if you’d like to find out more). To find out more about this great suite
    of packages, I suggest [this article](/3-ways-to-build-a-panel-visualization-dashboard-6e14148f529d).
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this job, my technical background imposes a few contingencies:'
  prefs: []
  type: TYPE_NORMAL
- en: I don’t yet know how to code well enough in JavaScript to make complete scripts
    and write pieces of code directly in JavaScript,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: the dashboarding package will be Panel in order to improve my skills. If the
    need arises, I won’t rule out repeating the exercise with other dasbhoarding packages
    (such as Dash, strealint, NiceGUI, etc.). However, this is not my priority.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this article, my technical environment is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'python packages: Panel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I use conda and VSCode for my scripts and environment management. Don’t worry
    if you use other solutions, it won’t have any impact on the rest.
  prefs: []
  type: TYPE_NORMAL
- en: 'During my research, I identified 3 scripts of varying complexity and visual
    appeal from my researches, which will serve as good test standards:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple application called ‘simple app’:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[Source](https://awesome-panel.github.io/holoviz-quarto/getting-started.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A more complex application called ‘big app’:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]python\n{explorer.plot_code()}\n[PRE2]'
  prefs: []
  type: TYPE_NORMAL
- en: '[Source](https://panel.holoviz.org/getting_started/build_app.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'A dashboard using the ‘Material’ Panel Template, which I call ‘material dasbhoard’:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[Source](https://panel.holoviz.org/getting_started/build_app.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To meet my goal of deploying both web and GitHub Pages, I will test the deployment
    of each of the :'
  prefs: []
  type: TYPE_NORMAL
- en: on a local python server, generated using `python -m http.server`,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub Pages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visualize the optimal operation that dasbhoard should have**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before I start testing, I need to have a benchmark of how each application
    should work in a perfect world. To do this, I use the local emulation function
    of the :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`panel serve simple_app.py` : visualiaze the dashboard'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '` — dev` : reload the dashboard each time the underlying files are modified
    (may require installation of one or more other packages, in particular to track
    whether or not the underlying files have been modified)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is the expected result:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The simple app :'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/f01f08fb29001d1607a287353acda296.png)'
  prefs: []
  type: TYPE_IMG
- en: Simple app visualization, Image is by the author
  prefs: []
  type: TYPE_NORMAL
- en: 'The big app :'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/3451016c654c5ae9a8506c4249b3a130.png)'
  prefs: []
  type: TYPE_IMG
- en: Big app visualization, Image is by the author
  prefs: []
  type: TYPE_NORMAL
- en: 'The material dasbhoard :'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/51fbe807607905dd269a0725744af1f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Material dashboard visualization, Image is by the author
  prefs: []
  type: TYPE_NORMAL
- en: These visualizations will enable me to see if everything is running smoothly
    and within reasonable timescales during my deployment tests.
  prefs: []
  type: TYPE_NORMAL
- en: '**Results**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**First step : transform python script to HTML interactive script**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Panel package transforms a panel application python script into an HTML
    application in 1 line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`panel convert` : python script conversion panel package command'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`simple_app.py` : python script to convert'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '` — to pyodide-worker` : Panel can transcribe the Python application into several
    types of support that can be integrated into HTML productions. In this article,
    I focus on the output `pyodide-worker`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '` — out docs` : output folder for the 2 files (HTML and JavaScript) generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the docs folder (‘ — to docs’ part of the line of code), 2 files with the
    same name as the python script and the extensions ‘html’ and ‘js’ should appear.
    These scripts will enable us to integrate our application into web content. This
    code conversion (from python to HTML to JavaScript) is made possible by WebAssembly.
    Pyodide is a port of CPython to WebAssembly/Emscripte (more info here: [https://pyodide.org/en/stable/).](https://pyodide.org/en/stable/).)'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not familiar with WebAssembly, I invite you to devour [Mozilla’s article](https://developer.mozilla.org/en-US/docs/WebAssembly)
    on the subject. I’ll be doing an article on the history, scope and potential impact
    of WebAssembly, which I think will be a real game changer in the years to come.
  prefs: []
  type: TYPE_NORMAL
- en: '**First test: local web server deployment**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '1\. Emulate the local web server with python: `python -m http.server`. This
    command will return a local URL for your browser to connect to (URL like: 127.0.0.1:8000).'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Click on the HTML script of our python application
  prefs: []
  type: TYPE_NORMAL
- en: '*Information*: when browsing our files via the HTML server, to automatically
    launch the desired application when we open its folder, title the HTML and JavaScript
    files ‘index.html’ and ‘index.js’. Example :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When the app folder is opened in the local HTML server, index.html is automatically
    launched.
  prefs: []
  type: TYPE_NORMAL
- en: 'Test report for deployment on local html server:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple app:✅
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Big app:✅
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Material Dashboard:✅
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After testing each of the 3 applications listed above, this solution works perfectly
    with all of them, with no loss of speed in loading and using the applications.
  prefs: []
  type: TYPE_NORMAL
- en: '**Second test: GitHub Pages deployment**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, I’ll quickly go over the configuration part of GitHub Pages
    on GitHub, as I described it in detail in my [previous article](/full-guide-to-build-a-professionnal-portfolio-with-python-markdown-git-and-github-page-for-66d12f7859f0).
  prefs: []
  type: TYPE_NORMAL
- en: 'Warning from step 1: the ‘docs’ file hosting the HTML and JavaScript scripts
    must be named ‘docs’ and placed at the root of the git repository. These are 2
    prerequisites for deploying applications on GitHub Pages. Neither the folder name
    nor its location can be changed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '2 possibilities :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 2.a. Rename the app files ‘index.html’ and ‘index.js’, and place them directly
    in ‘docs’. This solution will open the GitHub Pages of your repository directly
    on the app,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 2.b. Create an ‘index.html’ file directly in ‘docs’, and add a path to your
    application’s HTML file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Here is the content of ‘index.html’ that I created during my deployment tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://petoulemonde.github.io/`: URL of my portfolio'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`article_dynamic_webpages/`: my working repo for this article'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`simple_app_pyodide/simple_app.html`: HTML folder/application to open. In the
    repo, the file is stored in **docs**/simple_app_pyodide/simple_app.html, but don’t
    mention ‘docs’ in the absolute path. Why this difference between the file explorer
    and the link? GitHub deploys from the docs folder, ‘docs’ is its working root.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3\. Push in the remote repo (in my previous example, the ‘article_dynamic_webpages’
    repo).
  prefs: []
  type: TYPE_NORMAL
- en: '4\. In the repo, enable the creation of a github project page. In the configuration
    page, here’s how to configure the GitHub page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0a1c760fffbea7c6d821c578de2c7436.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuration for deployment on GitHub Pages, Image is by the author
  prefs: []
  type: TYPE_NORMAL
- en: This is where the ‘docs’ folder is essential if we want to deploy our application,
    otherwise we won’t be able to enter any deployment branches in ‘master’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Test report: Deployment on GitHub pages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Simple app: ✅'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Big app: ✅'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Material dashboard: ✅'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Concerning solution 2.b. : This is a particularly interesting solution, as
    it allows us to have a static home page for our website or portfolio, and then
    distribute it to special dynamic project pages. It opens the door to both static
    and dynamic GitHub Pages, using mkdocs for the static aspect and its pretty design,
    and Panel for the interactive pages. I’ll probably do my next article on this
    mkdocs + Panel (pyodide-worker) deployment solution, and I’ll be delighted to
    count you among my readers once again.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Problems encountered**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The dashboards tested so far don’t distribute to other pages on the site/portfolio,
    so the only alternative identified is to create a static home page, which redistributes
    to dashboards within the site. Is it possible to have a site with several pages
    without using a static page? The answer is yes, because dasbhaords can themselves
    integrate links, including links to other dashboards on the same site.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve modified the Material app code to add a link (adding `pn.pane.HTML(…)`
    ):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This adds a link to the application’s side bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aefbb332533fce49f06f2b038e7884a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Material dashboard with link visualization, Image is by the author
  prefs: []
  type: TYPE_NORMAL
- en: While the proof here isn’t pretty, it show that a dashboard can integrate links
    to other pages, so it’s possible to create a site with several pages using Panel
    alone — brilliant! In fact, I’m concentrating here on the dasbhoarding part of
    Panel, but Panel can also be used to create static pages, so without even mastering
    mkdocs, you can create sites with several pages combining static and dynamic elements.
  prefs: []
  type: TYPE_NORMAL
- en: '**Discussion**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Panel is a very interesting and powerful package that lets you create dynamic
    websites easily and hosted on GitHub Pages, thanks in particular to the magic
    of WebAssembly. The package really lets you concentrate on creating the dasbhoard,
    then in just a few lines convert that dasbhoard into web content. Coupled with
    the ease of use of GitHub Pages, Panel makes it possible to rapidly deploy data
    dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: This solution, while brilliant, has several limitations that I’ve come across
    in the course of my testing. The first is that it’s not possible to integrate
    user-editable and executable code. I’d like to be able to let users explore the
    data in their own way, by sharing the code I’ve written with them so that they
    can modify it and explore the data in their own way.
  prefs: []
  type: TYPE_NORMAL
- en: The second and final limitation is that customizing dashboards is not as easy
    as creating them. Hvplot offers, via the *explorer* tool, a visual solution for
    exploring data and creating charts. But once in the code, I find customization
    a little difficult. The packge is awesome in terms of power and functionality,
    and I’m probably still lacking a bit of skill on it, so I think it’s mainly due
    to my lack of practice on this package rather than the package itself.
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve made it this far, thank you for your attention! Your comments on my
    previous article were very helpful. Thanks to you, I’ve discovered Quarto and
    got some ideas on how to make my articles more interesting for you, the reader.
    Please leave me a comment to tell me how I could improve my article, both technically
    and visually, so that I can write an even more interesting article for you next
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Good luck on your Pythonic adventure!
  prefs: []
  type: TYPE_NORMAL
- en: Pierre-Etienne
  prefs: []
  type: TYPE_NORMAL
