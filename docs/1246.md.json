["```py\nlibrary(dplyr)\n\n#Create some variables:\n# Simulate data for 100 individuals\nn <- 5000\n\n# Generate age between 20 and 60\nage <- round(runif(n, min = 20, max = 60))\n\n# Define education levels\neducation_levels <- c(\"High School\", \"Bachelor's\", \"Master's\")\n\n# Simulate education level probabilities\neducation_probs <- c(0.4, 0.4, 0.2)\n\n# Sample education level based on probabilities\neducation <- sample(education_levels, n, replace = TRUE, prob = education_probs)\n\n# Simulate experience correlated with age with some random error\nexperience <- age - 20 + round(rnorm(n, mean = 0, sd = 3)) \n\n# Define a non-linear function for wage\nwage <- exp((age * 0.1) + (case_when(education == \"High School\" ~ 1,\n                                 education == \"Bachelor's\" ~ 1.5,\n                                 TRUE ~ 2)) + (experience * 0.05) + rnorm(n, mean = 0, sd = 0.5))\n\nhist(wage)\n```", "```py\nageDave<-30\neducationDave<-\"Bachelor's\"\nexperienceDave <- 10\n\nwageDave <- exp((ageDave * 0.1) + (case_when(educationDave == \"High School\" ~ 1,\n                                     educationDave == \"Bachelor's\" ~ 1.5,\n                                     TRUE ~ 2)) + (experienceDave * 0.05) + rnorm(n, mean = 0, sd = 0.5))\n\nhist(wageDave, main=\"Wage Distribution for Dave\", xlab=\"Wage\")\n```", "```py\n ## Generate test set\nntest<-1000\n\n# Generate age between 20 and 60\nagetest <- round(runif(ntest, min = 20, max = 60))\n\n# Sample education level based on probabilities\neducationtest <- sample(education_levels, ntest, replace = TRUE, prob = education_probs)\n\n# Simulate experience correlated with age with some random error\nexperiencetest <- agetest - 20 + round(rnorm(ntest, mean = 0, sd = 3))\n\n## Generate ytest that we try to predict:\n\nwagetest <- exp((agetest * 0.1) + (case_when(educationtest == \"High School\" ~ 1,\n                                             educationtest == \"Bachelor's\" ~ 1.5,\n                                             TRUE ~ 2)) + (experiencetest * 0.05) + rnorm(ntest, mean = 0, sd = 0.5))\n```", "```py\nconditionalmeanest <-\n  function(age, education, experience, N = 1000) {\n    mean(exp((age * 0.1) + (\n      case_when(\n        education == \"High School\" ~ 1,\n        education == \"Bachelor's\" ~ 1.5,\n        TRUE ~ 2\n      )\n    ) + (experience * 0.05) + rnorm(N, mean = 0, sd = 0.5)\n    ))\n  }\n\nconditionalmedianest <-\n  function(age, education, experience, N = 1000) {\n    median(exp((age * 0.1) + (\n      case_when(\n        education == \"High School\" ~ 1,\n        education == \"Bachelor's\" ~ 1.5,\n        TRUE ~ 2\n      )\n    ) + (experience * 0.05) + rnorm(N, mean = 0, sd = 0.5)\n    ))\n  }\n```", "```py\n hist(wageDave, main=\"Wage Distribution for Dave\", xlab=\"Wage\")\nabline(v=conditionalmeanest(ageDave, educationDave, experienceDave), col=\"darkred\", cex=1.2)\nabline(v=conditionalmedianest(ageDave, educationDave, experienceDave), col=\"darkblue\", cex=1.2) \n```", "```py\nXtest<-data.frame(age=agetest, education=educationtest, experience=experiencetest)\n\nmeanest<-sapply(1:nrow(Xtest), function(j)  conditionalmeanest(Xtest$age[j], Xtest$education[j], Xtest$experience[j])  )\nmedian<-sapply(1:nrow(Xtest), function(j)  conditionalmedianest(Xtest$age[j], Xtest$education[j], Xtest$experience[j])  ) \n```", "```py\n(MSE1<-mean((meanest-wagetest)^2))\n(MSE2<-mean((median-wagetest)^2))\n\nMSE1 < MSE2\n### Method 1 (the true mean estimator) is better than method 2!\n\n# but the MAE is actually worse of method 1!\n(MAE1<-mean(abs(meanest-wagetest)) )\n(MAE2<-mean( abs(median-wagetest)))\n\nMAE1 < MAE2\n### Method 2 (the true median estimator) is better than method 1!\n```", "```py\nlibrary(scoringutils)\n\n## Define conditional quantile estimation\nconditionalquantileest <-\n  function(probs, age, education, experience, N = 1000) {\n    quantile(exp((age * 0.1) + (\n      case_when(\n        education == \"High School\" ~ 1,\n        education == \"Bachelor's\" ~ 1.5,\n        TRUE ~ 2\n      )\n    ) + (experience * 0.05) + rnorm(N, mean = 0, sd = 0.5)\n    )\n    , probs =\n      probs)\n  }\n\n## Define a very naive estimator that will still have the required coverage\nlowernaive <- 0\nuppernaive <- max(wage)\n\n# Define the quantile of interest\nalpha <- 0.05\n\nlower <-\n  sapply(1:nrow(Xtest), function(j)\n    conditionalquantileest(alpha / 2, Xtest$age[j], Xtest$education[j], Xtest$experience[j]))\nupper <-\n  sapply(1:nrow(Xtest), function(j)\n    conditionalquantileest(1 - alpha / 2, Xtest$age[j], Xtest$education[j], Xtest$experience[j]))\n\n## Calculate the scores for both estimators\n\n# 1\\. Score the alpha/2 quantile estimate\nqs_lower <- mean(quantile_score(wagetest,\n                           predictions = lower,\n                           quantiles = alpha / 2))\n# 2\\. Score the alpha/2 quantile estimate\nqs_upper <- mean(quantile_score(wagetest,\n                           predictions = upper,\n                           quantiles = 1 - alpha / 2))\n\n# 1\\. Score the alpha/2 quantile estimate\nqs_lowernaive <- mean(quantile_score(wagetest,\n                                predictions = rep(lowernaive, ntest),\n                                quantiles = alpha / 2))\n# 2\\. Score the alpha/2 quantile estimate\nqs_uppernaive <- mean(quantile_score(wagetest,\n                                predictions = rep(uppernaive, ntest),\n                                quantiles = 1 - alpha / 2))\n\n# Construct the interval score by taking the average\n(interval_score <- (qs_lower + qs_upper) / 2)\n# Score of the ideal estimator: 187.8337\n\n# Construct the interval score by taking the average\n(interval_scorenaive <- (qs_lowernaive + qs_uppernaive) / 2)\n# Score of the naive estimator: 1451.464\n```", "```py\nalpha <- 0.05\nmean(interval_score(\n  wagetest,\n  lower=lower,\n  upper=upper,\n  interval_range=(1-alpha)*100,\n  weigh = T,\n  separate_results = FALSE\n))\n#Score of the ideal estimator: 187.8337\n```", "```py\nlibrary(scoringRules)\n\n## Ideal \"estimate\": Simply sample from the true conditional distribution \n## P(Y | X=x) for each sample point x\ndistributionestimate <-\n  function(age, education, experience, N = 100) {\n    exp((age * 0.1) + (\n      case_when(\n        education == \"High School\" ~ 1,\n        education == \"Bachelor's\" ~ 1.5,\n        TRUE ~ 2\n      )\n    ) + (experience * 0.05) + rnorm(N, mean = 0, sd = 0.5))\n  }\n\n## Naive Estimate: Only sample from the error distribution, without including the \n## information of each person.\ndistributionestimatenaive <-\n  function(age, education, experience, N = 100) {\n    exp(rnorm(N, mean = 0, sd = 0.5))\n  }\n\nscoretrue <- mean(sapply(1:nrow(Xtest), function(j)  {\n  wageest <-\n    distributionestimate(Xtest$age[j], Xtest$education[j], Xtest$experience[j])\n  return(scoringRules::es_sample(y = wagetest[j], dat = matrix(wageest, nrow=1)))\n}))\n\nscorenaive <- mean(sapply(1:nrow(Xtest), function(j)  {\n  wageest <-\n    distributionestimatenaive(Xtest$age[j], Xtest$education[j], Xtest$experience[j])\n  return(scoringRules::es_sample(y = wagetest[j], dat = matrix(wageest, nrow=1)))\n}))\n\n## scoretrue: 761.026\n## scorenaive: 2624.713\n```", "```py\nlibrary(dplyr)\n\n#Create some variables:\n# Simulate data for 100 individuals\nn <- 5000\n\n# Generate age between 20 and 60\nage <- round(runif(n, min = 20, max = 60))\n\n# Define education levels\neducation_levels <- c(\"High School\", \"Bachelor's\", \"Master's\")\n\n# Simulate education level probabilities\neducation_probs <- c(0.4, 0.4, 0.2)\n\n# Sample education level based on probabilities\neducation <- sample(education_levels, n, replace = TRUE, prob = education_probs)\n\n# Simulate experience correlated with age with some random error\nexperience <- age - 20 + round(rnorm(n, mean = 0, sd = 3)) \n\n# Define a non-linear function for wage\nwage <- exp((age * 0.1) + (case_when(education == \"High School\" ~ 1,\n                                     education == \"Bachelor's\" ~ 1.5,\n                                     TRUE ~ 2)) + (experience * 0.05) + rnorm(n, mean = 0, sd = 0.5))\n\nhist(wage)\n\nageDave<-30\neducationDave<-\"Bachelor's\"\nexperienceDave <- 10\n\nwageDave <- exp((ageDave * 0.1) + (case_when(educationDave == \"High School\" ~ 1,\n                                             educationDave == \"Bachelor's\" ~ 1.5,\n                                             TRUE ~ 2)) + (experienceDave * 0.05) + rnorm(n, mean = 0, sd = 0.5))\n\nhist(wageDave, main=\"Wage Distribution for Dave\", xlab=\"Wage\")\n\n## Generate test set\nntest<-1000\n\n# Generate age between 20 and 60\nagetest <- round(runif(ntest, min = 20, max = 60))\n\n# Sample education level based on probabilities\neducationtest <- sample(education_levels, ntest, replace = TRUE, prob = education_probs)\n\n# Simulate experience correlated with age with some random error\nexperiencetest <- agetest - 20 + round(rnorm(ntest, mean = 0, sd = 3))\n\n## Generate ytest that we try to predict:\n\nwagetest <- exp((agetest * 0.1) + (case_when(educationtest == \"High School\" ~ 1,\n                                             educationtest == \"Bachelor's\" ~ 1.5,\n                                             TRUE ~ 2)) + (experiencetest * 0.05) + rnorm(ntest, mean = 0, sd = 0.5))\n\nconditionalmeanest <-\n  function(age, education, experience, N = 1000) {\n    mean(exp((age * 0.1) + (\n      case_when(\n        education == \"High School\" ~ 1,\n        education == \"Bachelor's\" ~ 1.5,\n        TRUE ~ 2\n      )\n    ) + (experience * 0.05) + rnorm(N, mean = 0, sd = 0.5)\n    ))\n  }\n\nconditionalmedianest <-\n  function(age, education, experience, N = 1000) {\n    median(exp((age * 0.1) + (\n      case_when(\n        education == \"High School\" ~ 1,\n        education == \"Bachelor's\" ~ 1.5,\n        TRUE ~ 2\n      )\n    ) + (experience * 0.05) + rnorm(N, mean = 0, sd = 0.5)\n    ))\n  }\n\nhist(wageDave, main=\"Wage Distribution for Dave\", xlab=\"Wage\")\nabline(v=conditionalmeanest(ageDave, educationDave, experienceDave), col=\"darkred\", cex=1.2)\nabline(v=conditionalmedianest(ageDave, educationDave, experienceDave), col=\"darkblue\", cex=1.2)\n\nXtest<-data.frame(age=agetest, education=educationtest, experience=experiencetest)\n\nmeanest<-sapply(1:nrow(Xtest), function(j)  conditionalmeanest(Xtest$age[j], Xtest$education[j], Xtest$experience[j])  )\nmedian<-sapply(1:nrow(Xtest), function(j)  conditionalmedianest(Xtest$age[j], Xtest$education[j], Xtest$experience[j])  )\n\n(MSE1<-mean((meanest-wagetest)^2))\n(MSE2<-mean((median-wagetest)^2))\n\nMSE1 < MSE2\n### Method 1 (the true mean estimator) is better than method 2!\n\n# but the MAE is actually worse of method 1!\n(MAE1<-mean(abs(meanest-wagetest)) )\n(MAE2<-mean( abs(median-wagetest)))\n\nMAE1 < MAE2\n### Method 2 (the true median estimator) is better than method 1!\n\nlibrary(scoringutils)\n\n## Define conditional quantile estimation\nconditionalquantileest <-\n  function(probs, age, education, experience, N = 1000) {\n    quantile(exp((age * 0.1) + (\n      case_when(\n        education == \"High School\" ~ 1,\n        education == \"Bachelor's\" ~ 1.5,\n        TRUE ~ 2\n      )\n    ) + (experience * 0.05) + rnorm(N, mean = 0, sd = 0.5)\n    )\n    , probs =\n      probs)\n  }\n\n## Define a very naive estimator that will still have the required coverage\nlowernaive <- 0\nuppernaive <- max(wage)\n\n# Define the quantile of interest\nalpha <- 0.05\n\nlower <-\n  sapply(1:nrow(Xtest), function(j)\n    conditionalquantileest(alpha / 2, Xtest$age[j], Xtest$education[j], Xtest$experience[j]))\nupper <-\n  sapply(1:nrow(Xtest), function(j)\n    conditionalquantileest(1 - alpha / 2, Xtest$age[j], Xtest$education[j], Xtest$experience[j]))\n\n## Calculate the scores for both estimators\n\n# 1\\. Score the alpha/2 quantile estimate\nqs_lower <- mean(quantile_score(wagetest,\n                                predictions = lower,\n                                quantiles = alpha / 2))\n# 2\\. Score the alpha/2 quantile estimate\nqs_upper <- mean(quantile_score(wagetest,\n                                predictions = upper,\n                                quantiles = 1 - alpha / 2))\n\n# 1\\. Score the alpha/2 quantile estimate\nqs_lowernaive <- mean(quantile_score(wagetest,\n                                     predictions = rep(lowernaive, ntest),\n                                     quantiles = alpha / 2))\n# 2\\. Score the alpha/2 quantile estimate\nqs_uppernaive <- mean(quantile_score(wagetest,\n                                     predictions = rep(uppernaive, ntest),\n                                     quantiles = 1 - alpha / 2))\n\n# Construct the interval score by taking the average\n(interval_score <- (qs_lower + qs_upper) / 2)\n# Score of the ideal estimator: 187.8337\n\n# Construct the interval score by taking the average\n(interval_scorenaive <- (qs_lowernaive + qs_uppernaive) / 2)\n# Score of the naive estimator: 1451.464\n\nlibrary(scoringRules)\n\n## Ideal \"estimate\": Simply sample from the true conditional distribution \n## P(Y | X=x) for each sample point x\ndistributionestimate <-\n  function(age, education, experience, N = 100) {\n    exp((age * 0.1) + (\n      case_when(\n        education == \"High School\" ~ 1,\n        education == \"Bachelor's\" ~ 1.5,\n        TRUE ~ 2\n      )\n    ) + (experience * 0.05) + rnorm(N, mean = 0, sd = 0.5))\n  }\n\n## Naive Estimate: Only sample from the error distribution, without including the \n## information of each person.\ndistributionestimatenaive <-\n  function(age, education, experience, N = 100) {\n    exp(rnorm(N, mean = 0, sd = 0.5))\n  }\n\nscoretrue <- mean(sapply(1:nrow(Xtest), function(j)  {\n  wageest <-\n    distributionestimate(Xtest$age[j], Xtest$education[j], Xtest$experience[j])\n  return(scoringRules::es_sample(y = wagetest[j], dat = matrix(wageest, nrow=1)))\n}))\n\nscorenaive <- mean(sapply(1:nrow(Xtest), function(j)  {\n  wageest <-\n    distributionestimatenaive(Xtest$age[j], Xtest$education[j], Xtest$experience[j])\n  return(scoringRules::es_sample(y = wagetest[j], dat = matrix(wageest, nrow=1)))\n}))\n\n## scoretrue: 761.026\n## scorenaive: 2624.713 \n```"]