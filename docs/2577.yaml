- en: 'The AWS Bedrock Tutorial I Wish I Had: Everything You Need to Know to Prepare
    Your Machine for AWS Infrastructure'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ÂéüÊñáÔºö[https://towardsdatascience.com/getting-started-how-to-set-up-a-full-stack-app-with-aws-and-bedrock-2b1b158724b8?source=collection_archive---------7-----------------------#2024-10-22](https://towardsdatascience.com/getting-started-how-to-set-up-a-full-stack-app-with-aws-and-bedrock-2b1b158724b8?source=collection_archive---------7-----------------------#2024-10-22)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Part 1: Save countless hours of dealing with fragmented and incomplete documentation
    and have your environment ready in less than one hour*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@minda?source=post_page---byline--2b1b158724b8--------------------------------)[![Minda
    Myers](../Images/055f60b2c07d3a812b5d2b42fc363260.png)](https://medium.com/@minda?source=post_page---byline--2b1b158724b8--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--2b1b158724b8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--2b1b158724b8--------------------------------)
    [Minda Myers](https://medium.com/@minda?source=post_page---byline--2b1b158724b8--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ¬∑Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--2b1b158724b8--------------------------------)
    ¬∑9 min read¬∑Oct 22, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3fe2ea60a6c195a0c4214993c5e19b37.png)'
  prefs: []
  type: TYPE_IMG
- en: Image generated using [Midjourne](https://www.midjourney.com/)y by the author
  prefs: []
  type: TYPE_NORMAL
- en: How can you take a nifty little machine-learning prototype in your notebook
    and develop it into a powerful full-stack web application? While this process
    might seem daunting, this multi-part series will help you tackle the learning
    curve one step at a time, guiding you through even the most tricky permissions
    issues (for which AWS is infamous). By the end of this series, you will have a
    fully functional language translation app to tinker with and have built the conceptual
    knowledge required to scale your own GenAI pipeline quickly.
  prefs: []
  type: TYPE_NORMAL
- en: This is part 1 of our new multi-part series on üåä An Extensive Starting Guide
    To Building Full-Stack GenAI Apps Powered by Amazon Bedrock.
  prefs: []
  type: TYPE_NORMAL
- en: '*This article series has been written in collaboration with* [*Vlad Seredniy*](https://www.linkedin.com/in/vladyslav-seredniy-6b636b52/)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: What is this series about?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing a full-stack application with Amazon Bedrock can present a fairly
    intense learning curve. A new developer is dealing with the complexities of AWS
    infrastructure and all of the intricacies of integrating an AI pipeline. Trying
    to learn the AWS tech stack can easily become quite frustrating, especially when
    dealing with fragmented documentation and the time-consuming process of customizing
    data flow between front-end and back-end systems. It‚Äôs not uncommon for developers
    to spend hours watching conceptual videos about the AWS stack with only limited
    practical applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this series, we‚Äôre tackling these challenges head-on. We will teach you how
    to build a full-stack AI app using AWS infrastructure with React, Node JS, and
    Amazon Bedrock ‚Äî step by step, with full understanding and (hopefully) minimal
    overwhelm.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using [this tutorial](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock/)
    as a starting point. We will fill in all the gaps to help get you running, starting
    from how to set up the stack (in this tutorial) and then moving on to understanding
    the app codebase and adding new features like audio transcription, translation,
    and generation ‚Äî essentially implementing custom AI pipelines. From simplifying
    the AWS setup and demystifying permissions to offering a comprehensive code overview
    of how the front end, back end, and Lambda functions work together, we aim to
    reduce friction and lower the barriers to full-stack integration. Along the way,
    we will try to thoroughly answer all the ‚Äúsilly‚Äù questions one could be afraid
    to ask in a work setting. At the end of this process, we hope to provide you with
    all the tools and confidence to pursue your own AI ideas and creations!
  prefs: []
  type: TYPE_NORMAL
- en: '*This series is based off of* this project*:* [***AWS AppSync AI Agent Playground***](https://github.com/aws-samples/appsync-bedrock-sample-with-ai-agent)*and*this
    tutorial*:* [***Create a Fullstack, Sample Web App powered by Amazon Bedrock***](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**In Part 1** (this part) of this series, we‚Äôll walk through **the essential
    steps to set up your AWS infrastructure and get a sample full-stack app running
    using Amazon Bedrock**. We will cover how to create your AWS account, offer a
    video on configuring IAM users and getting secret keys, and install tools like
    Node.js and AWS CDK. By completing this first part, you‚Äôll have a **fully configured
    environment ready for customization.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**In Part 2**, we‚Äôll address one of the biggest challenges new developers face
    when getting started with the AWS stack: the lack of clear documentation. We will
    show you around the project''s frontend codebase and detail how we created components
    in React to **capture and upload an audio file to an s3 bucket** for processing.'
  prefs: []
  type: TYPE_NORMAL
- en: When we talk with developers, they will cite permissions as of the most challenging
    aspects of using AWS infrastructure. In this part of the series, we will cover
    tricky AWS configuration details, such as setting up IAM roles and policies and
    configuring CORS for your s3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 3** is where the fun really begins! We will hack into one of the agents
    in the sample project‚Äôs back-end Python files to integrate our GenAI tools. Specifically,
    we will utilize **AWS Transcribe** to **transcribe audio** and **Bedrock‚Äôs** capabilities
    to query **Anthropic‚Äôs Claude API** to **translate** the text from the transcription
    process.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the series' conclusion, in Part 4, we will interface with Deepgram‚Äôs
    AI-powered voice generation API to **produce a translated audio file that can
    be played in the app‚Äôs interface**.
  prefs: []
  type: TYPE_NORMAL
- en: When you complete this series, you can expect a working full-stack AI-powered
    language translation application and an understanding of how to customize it with
    your own GenAI tools.
  prefs: []
  type: TYPE_NORMAL
- en: '**When is AWS Infrastructure the Right Choice for Your Project?**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Obviously, the answer to this question goes beyond the scope of this article.
    However, we want to touch on the topic briefly by distinguishing between prototyping,
    testing an app, and deploying it at scale.
  prefs: []
  type: TYPE_NORMAL
- en: From our experience, when we are starting, during the learning or tinkering
    phase, it‚Äôs often a lot quicker to use tools like [Jupyter Notebook](https://jupyter.org/),
    [Google Colab](https://colab.research.google.com), or even [Lightning AI](https://lightning.ai/)
    to test and iterate ideas in real time. Once we have chosen the technology stack
    we want to use and have the core functionality in place (and technical issues
    resolved), we build a bare-bones prototype. At this stage, we might use a more
    straightforward system (than AWS) such as [Flutterflow](https://www.flutterflow.io/)
    or [Streamlit](https://streamlit.io/).
  prefs: []
  type: TYPE_NORMAL
- en: However, when an app needs to handle increased traffic or robust security features,
    AWS has an enormous advantage as it can scale seamlessly as infrastructure needs
    grow.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlined AWS Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The remainder of this article will focus on setting up the sample AWS Bedrock
    app properly and getting it to run locally on your development machine. This part
    can be particularly tricky due to the fragmentation of documentation on Amazon‚Äôs
    website. We will expand upon the instructions from the [Prerequisites](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock/#:~:text=Kit%20(CDK)%20construct.-,Prerequisites,-To%20follow%20this)
    section of the original tutorial and flesh out the steps to get all the requirements
    installed correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '[Prerequisites](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock/#:~:text=Kit%20(CDK)%20construct.-,Prerequisites,-To%20follow%20this)'
  prefs: []
  type: TYPE_NORMAL
- en: 'üìå ***Note: sudo and Command Line Usage***'
  prefs: []
  type: TYPE_NORMAL
- en: '*Many of the upcoming sections require extensive use of your command line /
    terminal. If you happen to encounter permission errors, try prefixing your command
    with* `***sudo***`*.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*For example, instead of using*`***npm install -g aws-cdk***`*, give* `***sudo
    npm install -g aws-cdk***` *a try.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Create your AWS IAM User
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the first (and honestly most frustrating) parts for a beginner can be
    getting your AWS account set up with the right credentials. Below is a step-by-step
    process so you don‚Äôt have to spend hours bouncing around AWS‚Äôs website and documentation
    in an effort to piece together the correct sequence of actions.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sign up for an** [**AWS account**](http://aws.amazon.com)**.**'
  prefs: []
  type: TYPE_NORMAL
- en: Then log in and navigate to IAM in your console. Click on Users -> **Create
    User**
  prefs: []
  type: TYPE_NORMAL
- en: Now, you‚Äôll need to customize the following details as you step through the
    Create User flow.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 1: Specify User Details**'
  prefs: []
  type: TYPE_NORMAL
- en: Check the box for **Provide user access to the AWS Management Console**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select **I want to create an IAM user**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Console password section**,** select **Custom password**. *Enter a secure
    and memorable password.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uncheck **Users must require a new password at next login** so the user doesn‚Äôt
    have to reset the password upon first login.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 2: Set Permissions**'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Attach policies directly**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the search bar, type **AdministratorAccess**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check the box next to the **AdministratorAccess** policy in the search results.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, click **Create user** in **Step 3** and click **Return to users list**
    in **Step 4**. *Remember to save your password in a secure location.*
  prefs: []
  type: TYPE_NORMAL
- en: After setting up your IAM user, you‚Äôll need to install the required software
    tools, starting with Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Install Node and NPM (Node Package Manager)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You must already have NPM (Node Package Manager) installed to set up any of
    Amazon‚Äôs developer tools on your local machine. Our next step will be to install
    Node.js, which includes NPM. The sample project requires Node.js v18 or higher,
    so we will install the latest version to cover this dependency.
  prefs: []
  type: TYPE_NORMAL
- en: '**For Mac:**'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [the official Node.js website](https://nodejs.org/en/download/package-manager).
    You can either copy and paste commands into your terminal to download and install
    via the command line, or simply download the installer for Mac.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**For Linux (Ubuntu):**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With Node.js installed, the next step is setting up the AWS Cloud Development
    Kit (CDK) with NPM.
  prefs: []
  type: TYPE_NORMAL
- en: Configure your AWS account on your dev machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will show you how to use NPM to install [AWS CDK](https://docs.aws.amazon.com/cdk/v2/guide/getting_started.html).
    The sample app requires AWS CDK 2.103 or later so we will download the most recent
    version (which ensures this requirement is met).
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following command to install AWS CDK globally:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo npm install -g aws-cdk`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs verify the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cdk --version`'
  prefs: []
  type: TYPE_NORMAL
- en: With CDK installed, we can install AWS CLI (Command Line Interface), which will
    allow you to configure your AWS account credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and Configuring AWS CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Setting up your account credentials is essential to correctly setting up the
    sample app, so let‚Äôs cover how to install AWS CLI and set up your account correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Installing AWS CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The method to install AWS CLI differs slightly depending on your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: '**For Linux,** download and run an installer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**For Mac,** download the *.pkg file from the [AWS CLI website](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)
    and follow the instructions in the installation wizard.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs wrap up this step by verifying that the installation worked:'
  prefs: []
  type: TYPE_NORMAL
- en: '`aws --version`'
  prefs: []
  type: TYPE_NORMAL
- en: Creating Access Keys
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have AWS CLI installed, we can move on to creating access keys.
    If you followed the instructions in the video from Step 1, you already have your
    access keys created. If not, go ahead and review the end of the video again or
    follow these directions:'
  prefs: []
  type: TYPE_NORMAL
- en: In the IAM dashboard, look for the user you want to create access keys for.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the user Summary section, click on ‚ÄúCreate access key‚Äù
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check ‚ÄúI understand the above recommendation and want to proceed to create an
    access key‚Äù
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy and paste your access key and secret access key in a safe location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring AWS CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are almost there! With one last step, your account will be configured correctly
    on your development machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run this command to launch the configuration process:'
  prefs: []
  type: TYPE_NORMAL
- en: '`aws configure`'
  prefs: []
  type: TYPE_NORMAL
- en: 'You‚Äôll be asked to enter the following:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS Access Key ID (copy / paste from your secure location)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWS Secret Access Key (copy / paste from your secure location)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default region name (we used `*us-east-1*`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default output format (use `*json*`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once this step is complete, your account details will be configured, and you
    can move on to getting ready to deploy AWS CDK infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping the CDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will show you how to bootstrap your CDK in the region you wish to deploy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, you will need to use your 12 digit account number (you can find this at
    the top right of your screen on the AWS console) for **ACCOUNT-NUMBER** and your
    region (we use `*us-east-1*`) for **REGION.**
  prefs: []
  type: TYPE_NORMAL
- en: You‚Äôre almost there! Now you just need to install the additional tools for the
    project and you will have the sample app setup.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Yarn, Git, and Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This project uses yarn to manage dependencies. You can install it with NPM:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo npm install -g yarn`'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can verify that yarn installed correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '`yarn --version`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Git:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Git comes pre-installed on Mac and most Linux distributions. You can verify
    that it‚Äôs installed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If it‚Äôs not already installed, on Ubuntu you can use apt-get `sudo apt-get install
    git` and on Mac it can be downloaded from the official Git website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**On Mac**, you can [download Docker Desktop for Mac](https://www.docker.com/get-started/)
    from the official Docker website and then just follow the installation wizard.'
  prefs: []
  type: TYPE_NORMAL
- en: '**For Linux (Ubuntu),** you can follow the official [Docker installation guide
    for Ubuntu](https://docs.docker.com/desktop/install/linux/).'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You‚Äôve completed Part 1 of this series and should now have
    your development environment with all the dependencies set up so that you can
    deploy this AWS sample app. You can now pick up from the original tutorial's [Setup](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock/#:~:text=Docker-,Setup,-Cloning%20the%20repository)
    section and download the project code using Git.
  prefs: []
  type: TYPE_NORMAL
- en: '**Next Steps**:'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: AWS services and setup processes can always change, so even though we‚Äôve tried
    to make these instructions as current as possible, you can always check the AWS
    documentation for the most up-to-date information if something isn't working.
  prefs: []
  type: TYPE_NORMAL
- en: We will follow up in the coming weeks to discuss in depth the juicy implementation
    details for adding all the custom functionality to make an interactive translation
    app. This will give you a chance to engage with the concepts and build an understanding
    of the tech stack.
  prefs: []
  type: TYPE_NORMAL
- en: üëâ ***What you will find in part 2:***
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In Part 2, we will be zooming out and give you an overview of the sample app‚Äôs
    architecture. We will show you how we customized the front-end to capture and
    store a voice recording, and how to pass it through the API to the backend.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
