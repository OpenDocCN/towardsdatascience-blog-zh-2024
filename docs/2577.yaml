- en: 'The AWS Bedrock Tutorial I Wish I Had: Everything You Need to Know to Prepare
    Your Machine for AWS Infrastructure'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我希望我早就学到的 AWS Bedrock 教程：你需要了解的一切，以便为 AWS 基础设施准备你的机器
- en: 原文：[https://towardsdatascience.com/getting-started-how-to-set-up-a-full-stack-app-with-aws-and-bedrock-2b1b158724b8?source=collection_archive---------7-----------------------#2024-10-22](https://towardsdatascience.com/getting-started-how-to-set-up-a-full-stack-app-with-aws-and-bedrock-2b1b158724b8?source=collection_archive---------7-----------------------#2024-10-22)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/getting-started-how-to-set-up-a-full-stack-app-with-aws-and-bedrock-2b1b158724b8?source=collection_archive---------7-----------------------#2024-10-22](https://towardsdatascience.com/getting-started-how-to-set-up-a-full-stack-app-with-aws-and-bedrock-2b1b158724b8?source=collection_archive---------7-----------------------#2024-10-22)
- en: '*Part 1: Save countless hours of dealing with fragmented and incomplete documentation
    and have your environment ready in less than one hour*'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*第1部分：节省大量处理碎片化和不完整文档的时间，并在不到一小时内准备好你的开发环境*'
- en: '[](https://medium.com/@minda?source=post_page---byline--2b1b158724b8--------------------------------)[![Minda
    Myers](../Images/055f60b2c07d3a812b5d2b42fc363260.png)](https://medium.com/@minda?source=post_page---byline--2b1b158724b8--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--2b1b158724b8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--2b1b158724b8--------------------------------)
    [Minda Myers](https://medium.com/@minda?source=post_page---byline--2b1b158724b8--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@minda?source=post_page---byline--2b1b158724b8--------------------------------)[![Minda
    Myers](../Images/055f60b2c07d3a812b5d2b42fc363260.png)](https://medium.com/@minda?source=post_page---byline--2b1b158724b8--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--2b1b158724b8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--2b1b158724b8--------------------------------)
    [Minda Myers](https://medium.com/@minda?source=post_page---byline--2b1b158724b8--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--2b1b158724b8--------------------------------)
    ·9 min read·Oct 22, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--2b1b158724b8--------------------------------)
    ·阅读时间 9 分钟·2024 年 10 月 22 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/3fe2ea60a6c195a0c4214993c5e19b37.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3fe2ea60a6c195a0c4214993c5e19b37.png)'
- en: Image generated using [Midjourne](https://www.midjourney.com/)y by the author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者使用 [Midjourney](https://www.midjourney.com/) 生成
- en: How can you take a nifty little machine-learning prototype in your notebook
    and develop it into a powerful full-stack web application? While this process
    might seem daunting, this multi-part series will help you tackle the learning
    curve one step at a time, guiding you through even the most tricky permissions
    issues (for which AWS is infamous). By the end of this series, you will have a
    fully functional language translation app to tinker with and have built the conceptual
    knowledge required to scale your own GenAI pipeline quickly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如何将笔记本中的一个巧妙的小型机器学习原型，开发成一个强大的全栈 Web 应用程序？虽然这个过程看起来可能令人望而生畏，但这系列多篇文章将帮助你一步一步地应对学习曲线，带你解决即使是最棘手的权限问题（AWS
    就是以此而闻名）。通过本系列的学习，你将拥有一个完全功能的语言翻译应用程序可以进行实验，并掌握快速扩展自己的 GenAI 流水线所需的概念性知识。
- en: This is part 1 of our new multi-part series on 🌊 An Extensive Starting Guide
    To Building Full-Stack GenAI Apps Powered by Amazon Bedrock.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们新系列的第一部分，主题是 🌊 《构建由 Amazon Bedrock 支持的全栈 GenAI 应用程序的广泛入门指南》。
- en: '*This article series has been written in collaboration with* [*Vlad Seredniy*](https://www.linkedin.com/in/vladyslav-seredniy-6b636b52/)*.*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*本系列文章与* [*Vlad Seredniy*](https://www.linkedin.com/in/vladyslav-seredniy-6b636b52/)*
    合作撰写。*'
- en: What is this series about?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本系列的内容是什么？
- en: Developing a full-stack application with Amazon Bedrock can present a fairly
    intense learning curve. A new developer is dealing with the complexities of AWS
    infrastructure and all of the intricacies of integrating an AI pipeline. Trying
    to learn the AWS tech stack can easily become quite frustrating, especially when
    dealing with fragmented documentation and the time-consuming process of customizing
    data flow between front-end and back-end systems. It’s not uncommon for developers
    to spend hours watching conceptual videos about the AWS stack with only limited
    practical applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Amazon Bedrock 开发全栈应用程序可能会带来相当陡峭的学习曲线。新开发者需要应对 AWS 基础设施的复杂性以及集成 AI 流程的各种细节。试图学习
    AWS 技术栈很容易变得非常沮丧，尤其是当面对零散的文档和在前端与后端系统之间定制数据流的耗时过程时。开发者常常会花费数小时观看关于 AWS 技术栈的概念视频，但这些视频的实际应用往往非常有限。
- en: In this series, we’re tackling these challenges head-on. We will teach you how
    to build a full-stack AI app using AWS infrastructure with React, Node JS, and
    Amazon Bedrock — step by step, with full understanding and (hopefully) minimal
    overwhelm.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本系列中，我们将直接面对这些挑战。我们将一步一步地教你如何使用 AWS 基础设施、React、Node.js 和 Amazon Bedrock 构建一个全栈
    AI 应用，帮助你全面理解并（希望）最小化困惑。
- en: We will be using [this tutorial](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock/)
    as a starting point. We will fill in all the gaps to help get you running, starting
    from how to set up the stack (in this tutorial) and then moving on to understanding
    the app codebase and adding new features like audio transcription, translation,
    and generation — essentially implementing custom AI pipelines. From simplifying
    the AWS setup and demystifying permissions to offering a comprehensive code overview
    of how the front end, back end, and Lambda functions work together, we aim to
    reduce friction and lower the barriers to full-stack integration. Along the way,
    we will try to thoroughly answer all the “silly” questions one could be afraid
    to ask in a work setting. At the end of this process, we hope to provide you with
    all the tools and confidence to pursue your own AI ideas and creations!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用[这个教程](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock/)作为起点。我们将填补所有空白，帮助你启动，从如何设置技术栈（在本教程中）开始，然后继续理解应用程序代码库，并添加新的功能，比如音频转录、翻译和生成——本质上是实现自定义的
    AI 流程。从简化 AWS 设置和揭开权限的神秘面纱，到提供前端、后端和 Lambda 函数如何协同工作的全面代码概述，我们旨在减少摩擦，降低全栈集成的门槛。在这个过程中，我们将尽力彻底回答任何在工作环境中可能不敢提问的“傻问题”。在整个过程中结束时，我们希望能为你提供所有工具和信心，去追寻你自己的
    AI 想法和创作！
- en: '*This series is based off of* this project*:* [***AWS AppSync AI Agent Playground***](https://github.com/aws-samples/appsync-bedrock-sample-with-ai-agent)*and*this
    tutorial*:* [***Create a Fullstack, Sample Web App powered by Amazon Bedrock***](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock)'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*本系列基于*这个项目*：* [***AWS AppSync AI Agent Playground***](https://github.com/aws-samples/appsync-bedrock-sample-with-ai-agent)*和*本教程*：*
    [***创建一个由 Amazon Bedrock 提供支持的全栈示例 Web 应用***](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock)'
- en: '**In Part 1** (this part) of this series, we’ll walk through **the essential
    steps to set up your AWS infrastructure and get a sample full-stack app running
    using Amazon Bedrock**. We will cover how to create your AWS account, offer a
    video on configuring IAM users and getting secret keys, and install tools like
    Node.js and AWS CDK. By completing this first part, you’ll have a **fully configured
    environment ready for customization.**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**在第一部分**（本部分）中，我们将详细讲解**设置 AWS 基础设施并使用 Amazon Bedrock 启动一个示例全栈应用的必要步骤**。我们将介绍如何创建你的
    AWS 账户，提供关于配置 IAM 用户和获取密钥的教程视频，并安装 Node.js 和 AWS CDK 等工具。完成第一部分后，你将拥有一个**完全配置的环境，准备进行定制**。'
- en: '**In Part 2**, we’ll address one of the biggest challenges new developers face
    when getting started with the AWS stack: the lack of clear documentation. We will
    show you around the project''s frontend codebase and detail how we created components
    in React to **capture and upload an audio file to an s3 bucket** for processing.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**在第二部分**，我们将解决新开发者在开始使用 AWS 技术栈时面临的最大挑战之一：缺乏清晰的文档。我们将带你浏览项目的前端代码库，并详细介绍如何在
    React 中创建组件，以**捕获并上传音频文件到 S3 存储桶**进行处理。'
- en: When we talk with developers, they will cite permissions as of the most challenging
    aspects of using AWS infrastructure. In this part of the series, we will cover
    tricky AWS configuration details, such as setting up IAM roles and policies and
    configuring CORS for your s3 bucket.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们与开发者交流时，他们会提到权限管理是使用AWS基础设施时最具挑战性的方面。在这一部分，我们将介绍一些复杂的AWS配置细节，如设置IAM角色和策略，以及为你的S3存储桶配置CORS。
- en: '**Part 3** is where the fun really begins! We will hack into one of the agents
    in the sample project’s back-end Python files to integrate our GenAI tools. Specifically,
    we will utilize **AWS Transcribe** to **transcribe audio** and **Bedrock’s** capabilities
    to query **Anthropic’s Claude API** to **translate** the text from the transcription
    process.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**第三部分**是最有趣的部分！我们将破解示例项目后端Python文件中的一个代理，集成我们的GenAI工具。具体来说，我们将利用**AWS Transcribe**来**转录音频**，并利用**Bedrock**的能力查询**Anthropic的Claude
    API**来**翻译**转录过程中的文本。'
- en: Finally, in the series' conclusion, in Part 4, we will interface with Deepgram’s
    AI-powered voice generation API to **produce a translated audio file that can
    be played in the app’s interface**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在系列的结论部分，在第四部分，我们将与Deepgram的AI驱动语音生成API对接，**生成一个可以在应用界面中播放的翻译音频文件**。
- en: When you complete this series, you can expect a working full-stack AI-powered
    language translation application and an understanding of how to customize it with
    your own GenAI tools.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成这一系列内容时，你可以期待一个完整的、由AI驱动的语言翻译应用，并且能够理解如何用你自己的GenAI工具定制它。
- en: '**When is AWS Infrastructure the Right Choice for Your Project?**'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**什么时候AWS基础设施是你项目的正确选择？**'
- en: Obviously, the answer to this question goes beyond the scope of this article.
    However, we want to touch on the topic briefly by distinguishing between prototyping,
    testing an app, and deploying it at scale.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，回答这个问题超出了本文的范围。然而，我们希望简要地讨论一下这个话题，区分原型制作、测试应用和大规模部署。
- en: From our experience, when we are starting, during the learning or tinkering
    phase, it’s often a lot quicker to use tools like [Jupyter Notebook](https://jupyter.org/),
    [Google Colab](https://colab.research.google.com), or even [Lightning AI](https://lightning.ai/)
    to test and iterate ideas in real time. Once we have chosen the technology stack
    we want to use and have the core functionality in place (and technical issues
    resolved), we build a bare-bones prototype. At this stage, we might use a more
    straightforward system (than AWS) such as [Flutterflow](https://www.flutterflow.io/)
    or [Streamlit](https://streamlit.io/).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们的经验，在我们刚开始时，在学习或尝试阶段，使用像[Jupyter Notebook](https://jupyter.org/)、[Google
    Colab](https://colab.research.google.com)甚至[Lightning AI](https://lightning.ai/)这样的工具来实时测试和迭代想法往往要快得多。一旦我们选择了要使用的技术栈并具备了核心功能（并解决了技术问题），我们会构建一个简易的原型。在这个阶段，我们可能会使用一个比AWS更简单的系统，比如[Flutterflow](https://www.flutterflow.io/)或[Streamlit](https://streamlit.io/)。
- en: However, when an app needs to handle increased traffic or robust security features,
    AWS has an enormous advantage as it can scale seamlessly as infrastructure needs
    grow.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当一个应用需要处理增加的流量或强大的安全功能时，AWS具有巨大的优势，因为它可以在基础设施需求增长时无缝扩展。
- en: Streamlined AWS Configuration
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精简的AWS配置
- en: The remainder of this article will focus on setting up the sample AWS Bedrock
    app properly and getting it to run locally on your development machine. This part
    can be particularly tricky due to the fragmentation of documentation on Amazon’s
    website. We will expand upon the instructions from the [Prerequisites](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock/#:~:text=Kit%20(CDK)%20construct.-,Prerequisites,-To%20follow%20this)
    section of the original tutorial and flesh out the steps to get all the requirements
    installed correctly.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的剩余部分将专注于正确设置示例AWS Bedrock应用，并使其能够在你的开发机器上本地运行。由于亚马逊网站上的文档碎片化，这一部分可能特别棘手。我们将扩展原教程[前提条件](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock/#:~:text=Kit%20(CDK)%20construct.-,Prerequisites,-To%20follow%20this)部分的说明，并详细描述正确安装所有要求的步骤。
- en: '[Prerequisites](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock/#:~:text=Kit%20(CDK)%20construct.-,Prerequisites,-To%20follow%20this)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[前提条件](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock/#:~:text=Kit%20(CDK)%20construct.-,Prerequisites,-To%20follow%20this)'
- en: '📌 ***Note: sudo and Command Line Usage***'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 📌 ***注意：sudo和命令行使用***
- en: '*Many of the upcoming sections require extensive use of your command line /
    terminal. If you happen to encounter permission errors, try prefixing your command
    with* `***sudo***`*.*'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*接下来的很多部分都需要大量使用命令行 / 终端。如果你遇到权限错误，可以尝试在命令前加上* `***sudo***`*。*'
- en: ''
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*For example, instead of using*`***npm install -g aws-cdk***`*, give* `***sudo
    npm install -g aws-cdk***` *a try.*'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*例如，不要使用* `***npm install -g aws-cdk***` *，可以试试* `***sudo npm install -g aws-cdk***`*。*'
- en: Create your AWS IAM User
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建你的 AWS IAM 用户
- en: One of the first (and honestly most frustrating) parts for a beginner can be
    getting your AWS account set up with the right credentials. Below is a step-by-step
    process so you don’t have to spend hours bouncing around AWS’s website and documentation
    in an effort to piece together the correct sequence of actions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对初学者来说，设置 AWS 账户并配置正确的凭证可能是最初的（也是最让人沮丧的）部分。下面是一个逐步的过程，让你不必花费数小时在 AWS 网站和文档中来回搜索，拼凑正确的操作顺序。
- en: '**Sign up for an** [**AWS account**](http://aws.amazon.com)**.**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**注册一个** [**AWS 账户**](http://aws.amazon.com)**。**'
- en: Then log in and navigate to IAM in your console. Click on Users -> **Create
    User**
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后登录并在控制台中导航到 IAM。点击用户 -> **创建用户**
- en: Now, you’ll need to customize the following details as you step through the
    Create User flow.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要在创建用户流程中自定义以下详细信息。
- en: '**Step 1: Specify User Details**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1：指定用户详细信息**'
- en: Check the box for **Provide user access to the AWS Management Console**
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 勾选 **为用户提供 AWS 管理控制台访问权限**
- en: Select **I want to create an IAM user**
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择 **我想创建一个 IAM 用户**
- en: In the Console password section**,** select **Custom password**. *Enter a secure
    and memorable password.*
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制台密码部分，选择 **自定义密码**。*输入一个安全且易于记住的密码。*
- en: Uncheck **Users must require a new password at next login** so the user doesn’t
    have to reset the password upon first login.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消勾选 **用户首次登录时必须重置密码**，这样用户就不需要在第一次登录时重置密码。
- en: '**Step 2: Set Permissions**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2：设置权限**'
- en: Select **Attach policies directly**.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择 **直接附加策略**。
- en: In the search bar, type **AdministratorAccess**
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在搜索栏中，输入 **AdministratorAccess**
- en: Check the box next to the **AdministratorAccess** policy in the search results.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在搜索结果中勾选 **AdministratorAccess** 策略旁的复选框。
- en: Next, click **Create user** in **Step 3** and click **Return to users list**
    in **Step 4**. *Remember to save your password in a secure location.*
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在 **步骤 3** 中点击 **创建用户**，然后在 **步骤 4** 中点击 **返回用户列表**。*记得将你的密码保存在安全的地方。*
- en: After setting up your IAM user, you’ll need to install the required software
    tools, starting with Node.js.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好 IAM 用户后，你需要安装所需的软件工具，从 Node.js 开始。
- en: Install Node and NPM (Node Package Manager)
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Node 和 NPM（Node 包管理器）
- en: You must already have NPM (Node Package Manager) installed to set up any of
    Amazon’s developer tools on your local machine. Our next step will be to install
    Node.js, which includes NPM. The sample project requires Node.js v18 or higher,
    so we will install the latest version to cover this dependency.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地机器上设置任何 Amazon 开发工具之前，你必须已经安装了 NPM（Node 包管理器）。我们的下一步将是安装 Node.js，它包含了 NPM。示例项目要求
    Node.js v18 或更高版本，因此我们将安装最新版本以满足这个依赖。
- en: '**For Mac:**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于 Mac：**'
- en: Visit [the official Node.js website](https://nodejs.org/en/download/package-manager).
    You can either copy and paste commands into your terminal to download and install
    via the command line, or simply download the installer for Mac.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问 [Node.js 官方网站](https://nodejs.org/en/download/package-manager)。你可以将命令复制粘贴到终端中，通过命令行下载并安装，或者直接下载
    Mac 版本的安装程序。
- en: '**For Linux (Ubuntu):**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于 Linux（Ubuntu）：**'
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Verify the installation:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 验证安装：
- en: '[PRE1]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With Node.js installed, the next step is setting up the AWS Cloud Development
    Kit (CDK) with NPM.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 安装好 Node.js 后，下一步是使用 NPM 设置 AWS 云开发工具包（CDK）。
- en: Configure your AWS account on your dev machine
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在开发机器上配置你的 AWS 账户
- en: Now, we will show you how to use NPM to install [AWS CDK](https://docs.aws.amazon.com/cdk/v2/guide/getting_started.html).
    The sample app requires AWS CDK 2.103 or later so we will download the most recent
    version (which ensures this requirement is met).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将向你展示如何使用 NPM 安装 [AWS CDK](https://docs.aws.amazon.com/cdk/v2/guide/getting_started.html)。示例应用需要
    AWS CDK 2.103 或更高版本，因此我们将下载最新版本（以确保满足此要求）。
- en: 'Enter the following command to install AWS CDK globally:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输入以下命令来全局安装 AWS CDK：
- en: '`sudo npm install -g aws-cdk`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo npm install -g aws-cdk`'
- en: 'Let’s verify the installation:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证一下安装：
- en: '`cdk --version`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`cdk --version`'
- en: With CDK installed, we can install AWS CLI (Command Line Interface), which will
    allow you to configure your AWS account credentials.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 安装好 CDK 后，我们可以安装 AWS CLI（命令行界面），它将帮助你配置 AWS 账户凭证。
- en: Installing and Configuring AWS CLI
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和配置 AWS CLI
- en: Setting up your account credentials is essential to correctly setting up the
    sample app, so let’s cover how to install AWS CLI and set up your account correctly.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 设置账户凭证对正确设置示例应用程序至关重要，因此我们来介绍如何安装 AWS CLI 并正确设置你的账户。
- en: Installing AWS CLI
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 AWS CLI
- en: The method to install AWS CLI differs slightly depending on your operating system.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 AWS CLI 的方法在不同操作系统上稍有不同。
- en: '**For Linux,** download and run an installer:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于 Linux**，下载并运行安装程序：'
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**For Mac,** download the *.pkg file from the [AWS CLI website](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)
    and follow the instructions in the installation wizard.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于 Mac**，从[AWS CLI 网站](https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html)下载
    *.pkg 文件，并按照安装向导中的指示进行操作。'
- en: 'Let’s wrap up this step by verifying that the installation worked:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过验证安装是否成功来完成这一步：
- en: '`aws --version`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`aws --version`'
- en: Creating Access Keys
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建访问密钥
- en: 'Now that we have AWS CLI installed, we can move on to creating access keys.
    If you followed the instructions in the video from Step 1, you already have your
    access keys created. If not, go ahead and review the end of the video again or
    follow these directions:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 AWS CLI，可以继续创建访问密钥。如果你已经按照视频中的步骤 1 创建了访问密钥，那就跳过这一步。如果没有，请回顾视频结尾部分或按照以下指示操作：
- en: In the IAM dashboard, look for the user you want to create access keys for.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 IAM 控制台中，查找你想要创建访问密钥的用户。
- en: In the user Summary section, click on “Create access key”
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在用户摘要部分，点击“创建访问密钥”
- en: Check “I understand the above recommendation and want to proceed to create an
    access key”
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 勾选“我理解上述推荐，并希望继续创建访问密钥”
- en: Copy and paste your access key and secret access key in a safe location.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的访问密钥和秘密访问密钥保存在安全的位置。
- en: Configuring AWS CLI
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 AWS CLI
- en: We are almost there! With one last step, your account will be configured correctly
    on your development machine.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快完成了！只需最后一步，你的账户就能在开发机器上正确配置。
- en: 'Run this command to launch the configuration process:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令启动配置过程：
- en: '`aws configure`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`aws configure`'
- en: 'You’ll be asked to enter the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 系统将要求你输入以下内容：
- en: AWS Access Key ID (copy / paste from your secure location)
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 访问密钥 ID（从你的安全位置复制/粘贴）
- en: AWS Secret Access Key (copy / paste from your secure location)
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 秘密访问密钥（从你的安全位置复制/粘贴）
- en: Default region name (we used `*us-east-1*`)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认区域名称（我们使用了`*us-east-1*`）
- en: Default output format (use `*json*`)
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认输出格式（使用`*json*`）
- en: Once this step is complete, your account details will be configured, and you
    can move on to getting ready to deploy AWS CDK infrastructure.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，你的账户信息将已配置完毕，可以继续准备部署 AWS CDK 基础设施。
- en: Bootstrapping the CDK
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动 CDK
- en: Next, we will show you how to bootstrap your CDK in the region you wish to deploy.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将展示如何在你希望部署的区域中启动 CDK。
- en: '[PRE3]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, you will need to use your 12 digit account number (you can find this at
    the top right of your screen on the AWS console) for **ACCOUNT-NUMBER** and your
    region (we use `*us-east-1*`) for **REGION.**
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你需要使用你的 12 位账户号码（可以在 AWS 控制台屏幕右上角找到）作为 **ACCOUNT-NUMBER**，以及你的区域（我们使用`*us-east-1*`）作为
    **REGION**。
- en: You’re almost there! Now you just need to install the additional tools for the
    project and you will have the sample app setup.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你快完成了！现在只需安装项目所需的其他工具，就能设置好示例应用程序。
- en: Installing Yarn, Git, and Docker
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Yarn、Git 和 Docker
- en: 'This project uses yarn to manage dependencies. You can install it with NPM:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目使用 yarn 来管理依赖项。你可以通过 NPM 安装它：
- en: '`sudo npm install -g yarn`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo npm install -g yarn`'
- en: 'You can verify that yarn installed correctly:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以验证 yarn 是否正确安装：
- en: '`yarn --version`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`yarn --version`'
- en: 'Git:'
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'Git:'
- en: Git comes pre-installed on Mac and most Linux distributions. You can verify
    that it’s installed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Git 在 Mac 和大多数 Linux 发行版上是预装的。你可以验证它是否已安装。
- en: '[PRE4]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If it’s not already installed, on Ubuntu you can use apt-get `sudo apt-get install
    git` and on Mac it can be downloaded from the official Git website.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未安装，在 Ubuntu 上你可以使用 apt-get `sudo apt-get install git`，而在 Mac 上可以从官方 Git
    网站下载。
- en: 'Docker:'
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 'Docker:'
- en: '**On Mac**, you can [download Docker Desktop for Mac](https://www.docker.com/get-started/)
    from the official Docker website and then just follow the installation wizard.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**在 Mac 上**，你可以从[官方 Docker 网站](https://www.docker.com/get-started/)下载 Docker
    Desktop for Mac，然后只需按照安装向导进行操作。'
- en: '**For Linux (Ubuntu),** you can follow the official [Docker installation guide
    for Ubuntu](https://docs.docker.com/desktop/install/linux/).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于 Linux（Ubuntu）**，你可以参考官方的[Ubuntu 上的 Docker 安装指南](https://docs.docker.com/desktop/install/linux/)。'
- en: Conclusion
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Congratulations! You’ve completed Part 1 of this series and should now have
    your development environment with all the dependencies set up so that you can
    deploy this AWS sample app. You can now pick up from the original tutorial's [Setup](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock/#:~:text=Docker-,Setup,-Cloning%20the%20repository)
    section and download the project code using Git.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你！你已完成本系列的第一部分，现在应该已经设置好开发环境并安装了所有依赖项，以便你可以部署这个 AWS 示例应用。你现在可以从原始教程的[设置](https://aws.amazon.com/blogs/mobile/create-a-fullstack-sample-web-app-powered-by-amazon-bedrock/#:~:text=Docker-,Setup,-Cloning%20the%20repository)部分继续，使用
    Git 下载项目代码。
- en: '**Next Steps**:'
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**下一步**：'
- en: AWS services and setup processes can always change, so even though we’ve tried
    to make these instructions as current as possible, you can always check the AWS
    documentation for the most up-to-date information if something isn't working.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 服务和设置过程可能会有所变化，因此尽管我们已经尽力使这些说明保持最新，但如果遇到问题，你可以随时查阅 AWS 文档以获取最新信息。
- en: We will follow up in the coming weeks to discuss in depth the juicy implementation
    details for adding all the custom functionality to make an interactive translation
    app. This will give you a chance to engage with the concepts and build an understanding
    of the tech stack.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的几周内深入讨论为交互式翻译应用添加所有自定义功能的实现细节。这将为你提供机会，深入理解相关概念，并构建对技术栈的理解。
- en: 👉 ***What you will find in part 2:***
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 👉 ***你将在第二部分找到的内容：***
- en: ''
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In Part 2, we will be zooming out and give you an overview of the sample app’s
    architecture. We will show you how we customized the front-end to capture and
    store a voice recording, and how to pass it through the API to the backend.
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在第二部分，我们将放大视角，概述示例应用的架构。我们将展示如何自定义前端以捕获并存储语音录音，以及如何通过 API 将其传递到后台。
