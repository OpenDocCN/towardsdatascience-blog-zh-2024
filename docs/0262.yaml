- en: Using Poetry and Docker to Package Your Model for AWS Lambda
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Poetry 和 Docker 将你的模型打包为 AWS Lambda 适用格式
- en: 原文：[https://towardsdatascience.com/using-poetry-and-docker-to-package-your-model-for-aws-lambda-cd6d448eb88f?source=collection_archive---------1-----------------------#2024-01-29](https://towardsdatascience.com/using-poetry-and-docker-to-package-your-model-for-aws-lambda-cd6d448eb88f?source=collection_archive---------1-----------------------#2024-01-29)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/using-poetry-and-docker-to-package-your-model-for-aws-lambda-cd6d448eb88f?source=collection_archive---------1-----------------------#2024-01-29](https://towardsdatascience.com/using-poetry-and-docker-to-package-your-model-for-aws-lambda-cd6d448eb88f?source=collection_archive---------1-----------------------#2024-01-29)
- en: An accessible tutorial for one way to put a model into production, with special
    focus on troubleshooting and hiccups you might encounter along the way
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这是一个可访问的教程，介绍了一种将模型投入生产的方法，特别关注过程中可能遇到的故障排除和问题。
- en: '[](https://medium.com/@s.kirmer?source=post_page---byline--cd6d448eb88f--------------------------------)[![Stephanie
    Kirmer](../Images/f9d9ef9167febde974c223dd4d8d6293.png)](https://medium.com/@s.kirmer?source=post_page---byline--cd6d448eb88f--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--cd6d448eb88f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--cd6d448eb88f--------------------------------)
    [Stephanie Kirmer](https://medium.com/@s.kirmer?source=post_page---byline--cd6d448eb88f--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@s.kirmer?source=post_page---byline--cd6d448eb88f--------------------------------)[![Stephanie
    Kirmer](../Images/f9d9ef9167febde974c223dd4d8d6293.png)](https://medium.com/@s.kirmer?source=post_page---byline--cd6d448eb88f--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--cd6d448eb88f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--cd6d448eb88f--------------------------------)
    [Stephanie Kirmer](https://medium.com/@s.kirmer?source=post_page---byline--cd6d448eb88f--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--cd6d448eb88f--------------------------------)
    ·10 min read·Jan 29, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--cd6d448eb88f--------------------------------)
    ·阅读时间 10 分钟·2024年1月29日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b8ca1c71ddc8ebed25afbc74ed0a12b1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8ca1c71ddc8ebed25afbc74ed0a12b1.png)'
- en: I like to think of models as little critters. Photo by [Jiawei Zhao](https://unsplash.com/@jiaweizhao?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢把模型看作是小小的生物。照片由 [Jiawei Zhao](https://unsplash.com/@jiaweizhao?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: As promised, this week I’m coming with a more technical topic and taking a little
    break from all the discussions of business. I recently had an opportunity to deploy
    a new model using AWS Lambda, and I learned a few things when combining my usual
    development tooling (Poetry) with the infrastructure of Lambda. (Big hat tip to
    my teammate Aaron for teaching me new stuff!) I’m going to walk through the less
    obvious steps to getting a locally trained model deployed to Lambda successfully.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正如承诺的，这一周我将带来一个更为技术性的主题，稍微休息一下之前讨论的商业话题。我最近有机会使用 AWS Lambda 部署一个新模型，并且在将我常用的开发工具（Poetry）与
    Lambda 基础设施结合时学到了一些东西。（特别感谢我的队友 Aaron 教我新知识！）我将逐步讲解如何将一个本地训练的模型成功部署到 Lambda，尤其是那些不太明显的步骤。
- en: For my regular readers who are not interested in the nuts and bolts of model
    development, fear not, I’ll be back to commenting on social issues and machine
    learning next time!
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于那些对模型开发的细节不感兴趣的常读者，不用担心，下次我会回到关于社会问题和机器学习的讨论！
- en: Setting up your model architecture
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的模型架构
- en: If you don’t already have a preferred package manager/environment manager tool
    in Python, let me make a case for Poetry. It took me a while to get started and
    get the hang of it, but I’ve been using it for a couple of years now and have
    become a real fan. Some folks prefer venv or other more bare bones tooling, which
    is fine, but Poetry has some nice extra features that I think are worth it. (If
    you don’t have any experience with Poetry, please visit the official docs at [https://python-poetry.org/](https://python-poetry.org/)
    and they can get you set up.)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有选择偏好的 Python 包管理器/环境管理器工具，那么让我推荐一下 Poetry。我花了一些时间才入门并掌握它，但现在已经使用了几年，成了它的忠实粉丝。有些人偏好
    venv 或其他更简洁的工具，这也是可以的，但我认为 Poetry 有一些很不错的附加功能，值得一试。（如果你对 Poetry 没有任何经验，请访问官方文档
    [https://python-poetry.org/](https://python-poetry.org/)，它们可以帮助你进行设置。）
- en: One of the selling points I’d like to emphasize is that Poetry makes it quite
    easy to package your project so that internal modules you create are callable
    without a lot of fuss. This means that you don’t have to fight the “Python says
    that module doesn’t exist” battle that I’m sure many of us are familiar with.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我想强调的一个卖点是，Poetry使得将项目打包变得非常容易，这样你创建的内部模块就可以不需要太多麻烦地被调用。这意味着你不需要再和“Python说那个模块不存在”的问题作斗争，我敢肯定我们许多人都对这种情况感到熟悉。
- en: The example embedded here is just the head of the pyproject.toml file for a
    project like this one — notice the line starting with `packages` telling this
    env to include the package I’m creating in its imports. This is what lets me call
    things like `from new_package.tools import stuff` anywhere inside this project,
    even if those things are not in the immediate parent directory or whatever.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这里嵌入的示例仅仅是一个类似于这个项目的`pyproject.toml`文件的头部——请注意那行以`packages`开头的内容，它告诉这个环境包含我正在创建的包并将其导入。这使得我可以在项目内部的任何地方调用类似`from
    new_package.tools import stuff`的内容，即使这些内容不在直接的父目录中或其他地方。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Assuming you’re sold on Poetry, then you can use this to define your environment
    and manage all your dependencies, and you’ll be developing your model and its
    pipelines inside that project. Go ahead and build and train your model, and come
    back when that bit is done. I’ll wait.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经被Poetry说服，那么你可以用它来定义你的环境并管理所有的依赖项，你将在这个项目内部开发模型及其管道。去吧，构建并训练你的模型，等那部分完成后再回来。我等你。
- en: Ok, welcome back! Because you know you’re going to be deploying this model through
    Docker in Lambda, that dictates how your inference pipeline should be structured.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，欢迎回来！因为你知道你将通过Docker在Lambda中部署这个模型，这决定了你的推理管道应该如何构建。
- en: You need to construct a “handler”. What is that, exactly? It’s just a function
    that accepts the JSON object that is passed to the Lambda, and it returns whatever
    your model’s results are, again in a JSON payload. So, everything your inference
    pipeline is going to do needs to be called inside this function.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要构建一个“处理器”。这究竟是什么？它只是一个接受传递给Lambda的JSON对象的函数，并返回你模型的结果，仍然是一个JSON负载。因此，你的推理管道将要做的所有事情都需要在这个函数内部调用。
- en: 'In the case of my project, I’ve got a whole codebase of feature engineering
    functions: mountains of stuff involving semantic embeddings, a bunch of aggregations,
    regexes, and more. I’ve consolidated them into a `FeatureEngineering` class, which
    has a bunch of private methods but just one public one, `feature_eng`. So starting
    from the JSON that is being passed to the model, that method can run all the steps
    required to get the data from “raw” to “features”. I like setting up this way
    because it abstracts away a lot of complexity from the handler function itself.
    I can literally just call:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的项目，我有一个完整的特征工程函数代码库：包括语义嵌入、大量聚合、正则表达式等等。我已经将它们整合到了一个`FeatureEngineering`类中，这个类有许多私有方法，但只有一个公共方法，`feature_eng`。因此，从传递给模型的JSON开始，这个方法可以运行所有步骤，将数据从“原始”转换为“特征”。我喜欢以这种方式设置，因为它将很多复杂性从处理函数本身抽象了出来。我实际上可以这样调用：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And I’m off to the races, my features come out clean and ready to go.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我就开始工作了，我的特征数据整洁且准备好使用。
- en: 'Be advised: I have written exhaustive unit tests on all the inner guts of this
    class because while it is neat to write it this way, I still need to be extremely
    conscious of any changes that might occur under the hood. Write your unit tests!
    If you make one small change, you may not be able to immediately tell you’ve broken
    something in the pipeline until it’s already causing problems.'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意：我已经对这个类的所有内部实现编写了详尽的单元测试，因为虽然以这种方式编写代码很整洁，但我仍然需要非常小心任何可能在后台发生的变化。编写单元测试！如果你做了一个小小的改变，你可能无法立即发现你破坏了管道中的某些内容，直到它已经开始引发问题。
- en: The second half is the inference work, and this is a separate class in my case.
    I’ve gone for a very similar approach, which just takes in a few arguments.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 后半部分是推理工作，在我的情况下这是一个单独的类。我采用了一个非常类似的方法，它只需要几个参数。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The class initialization accepts the result of the feature engineering class’s
    method, so that handshake is clearly defined. Then the prediction method takes
    two items: the feature set (a JSON file listing all the feature names) and the
    model object, in my case a CatBoost classifier I’ve already trained and saved.
    I’m using the native CatBoost save method, but whatever you use and whatever model
    algorithm you use is fine. The point is that this method abstracts away a bunch
    of underlying stuff, and neatly returns the `predictions` object, which is what
    my Lambda is going to give you when it runs.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 类初始化接受特征工程类方法的结果，从而清晰地定义了握手过程。接着，预测方法接受两个参数：特征集（一个列出所有特征名称的 JSON 文件）和模型对象，在我的案例中是我已经训练并保存的
    CatBoost 分类器。我使用的是原生的 CatBoost 保存方法，但无论你使用什么方法和模型算法都可以。关键是这个方法抽象了大量底层操作，整洁地返回了`predictions`对象，这就是我的
    Lambda 在运行时会返回给你的内容。
- en: 'So, to recap, my “handler” function is essentially just this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我的“处理函数”基本上就是这样：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Nothing more to it! You might want to add some controls for malformed inputs,
    so that if your Lambda gets an empty JSON, or a list, or some other weird stuff
    it’s ready, but that’s not required. Do make sure your output is in JSON or similar
    format, however (here I’m giving back a dict).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单！你可能需要为格式错误的输入添加一些控制措施，以防你的 Lambda 收到空 JSON、列表或其他奇怪的数据，但这不是必需的。然而，确保输出是
    JSON 或类似格式的（在这里我返回的是一个字典）。
- en: Building your Docker image
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建你的 Docker 镜像
- en: This is all great, we have a Poetry project with a fully defined environment
    and all the dependencies, as well as the ability to load the modules we create,
    etc. Good stuff. But now we need to translate that into a Docker image that we
    can put on AWS.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都很棒，我们有一个带有完全定义的环境和所有依赖项的 Poetry 项目，还能够加载我们创建的模块等。很不错。但现在我们需要将其转换成一个 Docker
    镜像，以便可以放到 AWS 上。
- en: Here I’m showing you a skeleton of the dockerfile for this situation. First,
    we’re pulling from AWS to get the right base image for Lambda. Next, we need to
    set up the file structure that will be used inside the Docker image. This may
    or may not be exactly like what you’ve got in your Poetry project — mine is not,
    because I’ve got a bunch of extra junk here and there that isn’t necessary for
    the prod inference pipeline, including my training code. I just need to put the
    inference stuff in this image, that’s all.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我展示了适用于此情况的 dockerfile 框架。首先，我们从 AWS 拉取正确的 Lambda 基础镜像。接着，我们需要设置 Docker
    镜像内部将使用的文件结构。这可能与您在 Poetry 项目中的结构完全相同——但我这里的结构并不完全一样，因为我这里有一些额外的无关代码，包括我的训练代码。我只需要将推理相关的内容放入该镜像即可。
- en: '*The beginning of the dockerfile*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*dockerfile 的开始部分*'
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this project, anything you copy over is going to live in a `/tmp` folder,
    so if you have packages in your project that are going to try and save data at
    any point, you need to direct them to the right place.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，任何你复制过来的内容都会存放在 `/tmp` 文件夹中，因此如果你的项目中有包会在任何时刻尝试保存数据，你需要确保它们保存到正确的位置。
- en: You also need to make sure that Poetry gets installed right in your Docker image-
    that’s what will make all your carefully curated dependencies work right. Here
    I’m setting the version and telling `pip` to install Poetry before we go any further.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要确保 Poetry 在你的 Docker 镜像中正确安装——这将使你精心挑选的所有依赖项正常工作。在这里，我设置了版本并告诉 `pip` 在继续之前安装
    Poetry。
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The next issue is making sure all the files and folders your project uses locally
    get added to this new image correctly — Docker copy will irritatingly flatten
    directories sometimes, so if you get this built and start seeing “module not found”
    issues, check to make sure that isn’t happening to you. Hint: add `RUN ls -R`
    to the dockerfile once it’s all copied to see what the directory is looking like.
    You’ll be able to view those logs in Docker and it might reveal any issues.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的问题是确保你的项目在本地使用的所有文件和文件夹都被正确地添加到这个新镜像中——Docker 的复制操作有时会将目录扁平化，所以如果你构建完成后遇到“找不到模块”的问题，检查一下是否发生了这种情况。提示：在所有内容复制到镜像后，可以在
    dockerfile 中添加 `RUN ls -R` 来查看目录结构。你可以在 Docker 中查看这些日志，可能会揭示任何问题。
- en: Also, make sure you copy everything you need! That includes the Lambda file,
    your Poetry files, your feature list file, and your model. All of this is going
    to be needed unless you store these elsewhere, like on S3, and make the Lambda
    download them on the fly. (That’s a perfectly reasonable strategy for developing
    something like this, but not what we’re doing today.)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，确保你复制了所有需要的文件！这包括Lambda文件、Poetry文件、特征列表文件和模型。除非你将这些文件存储在其他地方，比如S3，并让Lambda动态下载它们，否则这些都是必需的。（这对于开发像这样的东西来说是完全合理的策略，但不是我们今天要做的事情。）
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We’re almost done! The last thing you should do is actually install your Poetry
    environment and then set up your handler to run. There are a couple of important
    flags here, including `--no-dev` , which tells Poetry not to add any developer
    tools you have in your environment, perhaps like pytest or black.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快完成了！最后你需要做的就是安装你的Poetry环境，然后设置处理程序以便运行。这里有几个重要的标志，包括`--no-dev`，它告诉Poetry不要添加你环境中的任何开发者工具，比如pytest或black。
- en: '*The end of the dockerfile*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*dockerfile的结尾*'
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That’s it, you’ve got your dockerfile! Now it’s time to build it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，你已经有了dockerfile！现在是时候构建它了。
- en: Make sure Docker is installed and running on your computer. This may take a
    second but it won’t be too difficult.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Docker已安装并在你的电脑上运行。这可能需要一些时间，但不会太难。
- en: Go to the directory where your dockerfile is, which should be the the top level
    of your project, and run `docker build .` Let Docker do its thing and then when
    it’s completed the build, it will stop returning messages. You can see in the
    Docker application console if it’s built successfully.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入你的dockerfile所在的目录，这应该是你项目的顶层目录，然后运行`docker build .`让Docker进行构建，完成后它会停止返回信息。你可以在Docker应用的控制台中查看构建是否成功。
- en: Go back to the terminal and run `docker image ls` and you’ll see the new image
    you’ve just built, and it’ll have an ID number attached.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回终端并运行`docker image ls`，你会看到刚刚构建的新镜像，并且会附带一个ID号。
- en: From the terminal once again, run `docker run -p 9000:8080 IMAGE ID NUMBER`
    with your ID number from step 3 filled in. Now your Docker image will start to
    run!
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次从终端运行`docker run -p 9000:8080 IMAGE ID NUMBER`，并填入第3步中的ID号。现在你的Docker镜像将开始运行！
- en: 'Open a new terminal (Docker is attached to your old window, just leave it there),
    and you can pass something to your Lambda, now running via Docker. I personally
    like to put my inputs into a JSON file, such as `lambda_cases.json` , and run
    them like so:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端（Docker已经连接到你原来的窗口，保持在那里），你可以向正在通过Docker运行的Lambda传递数据。我个人喜欢将输入数据放在一个JSON文件中，比如`lambda_cases.json`，然后像这样运行：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If the result at the terminal is the model’s predictions, then you’re ready
    to rock. If not, check out the errors and see what might be amiss. Odds are, you’ll
    have to debug a little and work out some kinks before this is all running smoothly,
    but that’s all part of the process.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果终端的结果是模型的预测结果，那么你已经准备好开始了。如果不是，检查错误并看看可能出了什么问题。很可能你需要调试一下，解决一些小问题，才能让一切顺利运行，但这只是过程的一部分。
- en: Deploying to AWS and testing
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到AWS并进行测试
- en: The next stage will depend a lot on your organization’s setup, and I’m not a
    devops expert, so I’ll have to be a little bit vague. Our system uses the AWS
    Elastic Container Registry (ECR) to store the built Docker image and Lambda accesses
    it from there.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下一阶段将很大程度上取决于你所在组织的设置，而我并不是一个devops专家，所以我只能稍微模糊一点描述。我们的系统使用AWS弹性容器注册表（ECR）来存储构建好的Docker镜像，Lambda从那里访问它。
- en: When you are fully satisfied with the Docker image from the previous step, you’ll
    need to build one more time, using the format below. The first flag indicates
    the platform you’re using for Lambda. (Put a pin in that, it’s going to come up
    again later.) The item after the -t flag is the path to where your AWS ECR images
    go- fill in your correct account number, region, and project name.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完全满意上一步的Docker镜像时，你需要再构建一次，使用以下格式。第一个标志指示你为Lambda使用的平台。（先记住它，稍后还会再次提到。）-t标志后的项目是你AWS
    ECR镜像的路径——填入你的正确账户编号、区域和项目名称。
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After this, you should authenticate to an Amazon ECR registry in your terminal,
    probably using the command `aws ecr get-login-password` and using the appropriate
    flags.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你应该在终端认证到一个Amazon ECR注册表，可能需要使用命令`aws ecr get-login-password`并使用适当的标志。
- en: 'Finally, you can push your new Docker image up to ECR:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以将新的Docker镜像推送到ECR：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If you’ve authenticated correctly, this should only take a moment.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经正确认证，这应该只需要片刻。
- en: There’s one more step before you’re ready to go, and that is setting up the
    Lambda in the AWS UI. Go log in to your AWS account, and find the “Lambda” product.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一步，你就准备好出发了，那就是在 AWS 用户界面中设置 Lambda。登录到你的 AWS 账户，找到“Lambda”产品。
- en: '![](../Images/a8aceb40567bd62e48f5f1e4c3ead919.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a8aceb40567bd62e48f5f1e4c3ead919.png)'
- en: This is what the header will look like, more or less.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是标题的展示效果，大致如此。
- en: Pop open the lefthand menu, and find “Functions”.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 打开左侧菜单，找到“功能”。
- en: '![](../Images/0c7f02a7e00298f337b81be7f5f4231e.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c7f02a7e00298f337b81be7f5f4231e.png)'
- en: This is where you’ll go to find your specific project. If you have not set up
    a Lambda yet, hit “Create Function” and follow the instructions to create a new
    function based on your container image.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是你可以找到特定项目的地方。如果你还没有设置 Lambda，点击“创建功能”并根据指示创建一个基于容器镜像的新功能。
- en: '![](../Images/453e48f74497877e8ccac974650a246a.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/453e48f74497877e8ccac974650a246a.png)'
- en: If you’ve already created a function, go find that one. From there, all you
    need to do is hit “Deploy New Image”. Regardless of whether it’s a whole new function
    or just a new image, make sure you select the platform that matches what you did
    in your Docker build! (Remember that pin?)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经创建了一个功能，去找到它。从那里，你只需要点击“部署新镜像”。无论是全新的功能还是仅仅是新镜像，确保你选择与 Docker 构建时所用平台相匹配的选项！（记得那个钉子吗？）
- en: '![](../Images/d2f098b237ed6bda29063376158629d8.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d2f098b237ed6bda29063376158629d8.png)'
- en: The last task, and the reason I’ve carried on explaining up to this stage, is
    to test your image in the actual Lambda environment. This can turn up bugs you
    didn’t encounter in your local tests! Flip to the Test tab and create a new test
    by inputting a JSON body that reflects what your model is going to be seeing in
    production. Run the test, and make sure your model does what is intended.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个任务，也是我一直解释到这个阶段的原因，就是在实际的 Lambda 环境中测试你的图像。这可能会暴露你在本地测试时没有遇到的错误！切换到测试标签页，通过输入一个
    JSON 请求体，模拟模型在生产环境中的输入。运行测试，并确保你的模型按预期工作。
- en: '![](../Images/8b58fe5e55653bc190ed6c0194b318d6.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8b58fe5e55653bc190ed6c0194b318d6.png)'
- en: If it works, then you did it! You’ve deployed your model. Congratulations!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，那就说明你成功了！你已经成功部署了模型。恭喜！
- en: Troubleshooting
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: There are a number of possible hiccups that may show up here, however. But don’t
    panic, if you have an error! There are solutions.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，可能会有一些问题出现在这里。但不要慌张，如果出现错误！总是有解决办法的。
- en: If your Lambda runs out of memory, go to the Configurations tab and increase
    the memory.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你的 Lambda 内存不足，进入配置标签页并增加内存。
- en: If the image didn’t work because it’s too large (10GB is the max), go back to
    the Docker building stage and try to cut down the size of the contents. Don’t
    package up extremely large files if the model can do without them. At worst, you
    may need to save your model to S3 and have the function load it.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果图像无法显示是因为文件过大（最大为10GB），请返回到 Docker 构建阶段并尝试减少内容的大小。如果模型可以不依赖于某些文件，就不要将极大文件打包。最坏的情况下，你可能需要将模型保存到
    S3 并让函数加载它。
- en: If you have trouble navigating AWS, you’re not the first. Consult with your
    IT or Devops team to get help. Don’t make a mistake that will cost your company
    lots of money!
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你在 AWS 上导航时遇到困难，你不是第一个。请咨询你的 IT 或 DevOps 团队以获得帮助。不要犯让公司损失大量资金的错误！
- en: If you have another issue not mentioned, please post a comment and I’ll do my
    best to advise.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你遇到其他未提及的问题，请留言，我会尽力提供建议。
- en: Good luck, happy modeling!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你好运，建模愉快！
- en: 'Upcoming talks: I will be speaking remotely about data science career trajectories
    to the [Overseas Chinese Association for Institutional Research (OCAIR)](https://ocair.org/)
    on Friday, April 12, at 1 pm US Central Time. Check with OCAIR about how to join
    if you’d like to tune in.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 即将举行的演讲：我将于美国中部时间4月12日星期五下午1点，通过远程方式为[海外华人高等教育研究协会（OCAIR）](https://ocair.org/)讲解数据科学职业发展路径。如果你有兴趣收听，可以向
    OCAIR 查询如何参与。
- en: (All images in this post except the header photo are created by the author.)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: （本文中除标题图片外的所有图片均由作者创建。）
- en: See more of my work at [www.stephaniekirmer.com](http://www.stephaniekirmer.com/).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我的更多作品，请访问 [www.stephaniekirmer.com](http://www.stephaniekirmer.com/)。
