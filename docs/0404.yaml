- en: Intersect two 3D Rays (Closest Point)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/3d-ray-intersection-closest-point-dc8c72122224?source=collection_archive---------8-----------------------#2024-02-12](https://towardsdatascience.com/3d-ray-intersection-closest-point-dc8c72122224?source=collection_archive---------8-----------------------#2024-02-12)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Let’s unravel the math behind 3D rays and demonstrate that it’s not significantly
    more challenging than the conventional 2D case.*'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@thom01.rouch?source=post_page---byline--dc8c72122224--------------------------------)[![Thomas
    Rouch](../Images/a8440bbed59cd8d9cdd752cf1fea2831.png)](https://medium.com/@thom01.rouch?source=post_page---byline--dc8c72122224--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--dc8c72122224--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--dc8c72122224--------------------------------)
    [Thomas Rouch](https://medium.com/@thom01.rouch?source=post_page---byline--dc8c72122224--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--dc8c72122224--------------------------------)
    ·7 min read·Feb 12, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2e951c331eed729eaafe73a0d22c9723.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Tobias Cornille](https://unsplash.com/@tobiasc?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In fields like computer graphics, autonomous vehicle navigation or augmented
    reality, where immersive experiences are created through the manipulation of 3D
    environments, a deep understanding of ray intersection and triangulation algorithms
    empowers data scientists to craft lifelike simulations and interactive virtual
    worlds.
  prefs: []
  type: TYPE_NORMAL
- en: It also demonstrates that mathematical principles such as pseudo-inverse matrices,
    least squares optimization, Cramer’s rule or triple scalar products aren’t just
    theoretical; they’re practical tools for solving real-world problems!
  prefs: []
  type: TYPE_NORMAL
- en: Ray Definition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Ray starts from a given position and extends infinitely in a given direction,
    just like a laser beam or a ray of light.
  prefs: []
  type: TYPE_NORMAL
- en: Think of a ray as a one-way street with a fixed starting point, while a line
    is like a two-way street that stretches endlessly in both directions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Mathematically, a ray is defined by its origin `o` and direction `d`. Since
    it’s a 1D space, any point along the ray is parametrized by its positive distance
    (or time) `t` with respect to the origin.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b203aab18b69d9958f77df43a81e9975.png)'
  prefs: []
  type: TYPE_IMG
- en: Ray Intersection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finding the intersection of two rays `r1` and `r2` means finding the two parameters
    `t1` and `t2`, respectively on the first and second ray, that result in the exact
    same point in space.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fa6b317505532185f1eb8b32ccdf6611.png)'
  prefs: []
  type: TYPE_IMG
- en: An interesting point to note is that we haven’t specified the dimension of the
    space in which our ray lives. It could be 2D, like a line drawn on a piece of
    paper, 3D like a laser beam, or even exist in higher dimensions!
  prefs: []
  type: TYPE_NORMAL
- en: Since we’re looking for the values of `t1` and `t2`, let’s concatenate them
    in a colum vector `x`. It allows us to vectorize this equation into the canonical
    linear system `Ax=b`. For better clarity, there’s an annotation below each term
    indicating the shape of the matrix or vector, with `n` being the dimension of
    the space in which the ray is defined.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3c2ddf4a94f00d44736eae162b06d844.png)'
  prefs: []
  type: TYPE_IMG
- en: N.B. The matrix A is built by concatenating side by side the two directions
    as column vectors, with the second one being flipped.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Solving `Ax=b` gives us `t1` and `t2`. However, if either of these parameters
    is negative, it indicates that the intersection point lies behind one of the ray
    origins, meaning there’s no intersection between both rays.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8fb70caa8ddffaa0cae50ec66ecc0fc9.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Mehdi MeSSrro](https://unsplash.com/@messrro?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. 2D Ray Intersection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The 2D case is the easiest one. Typically, unless they’re exactly parallel,
    two 2D lines will always converge at a unique common point.
  prefs: []
  type: TYPE_NORMAL
- en: In the image below, `r1` and `r2` intersect. However, `r3` doesn’t intersect
    any ray because it’s parallel to `r2` and meets `r1` behind its origin.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/df05979d9169ef6e2dcab4efa40e235f.png)'
  prefs: []
  type: TYPE_IMG
- en: 2D Ray intersection — Diagram by the author
  prefs: []
  type: TYPE_NORMAL
- en: Solving the linear system
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The linear system of equations `Ax=b` introduced above has `n` equations and
    2 unknowns. Thus, in the 2D case we end up with a system of 2 equations and 2
    unknowns, meaning we just have to invert the matrix `A`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7524335da956aea1d4916fa9e6155511.png)'
  prefs: []
  type: TYPE_IMG
- en: If the rays are parallel, the matrix `A` won’t be invertible because its two
    columns, `d1` and `-d2`, will be collinear.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not interesting in `t1` and `t2` and just want to know if there’s
    an intersection, computing the determinant of `A` and comparing it against 0 is
    all you need.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not interesting in having both `t1` and `t2`, e.g. if you’re looking
    for the actual 2D position of the intersection point, using Cramer’s rule is a
    smart trick. It expresses the solution using determinants of `A` and modified
    matrices, where one column of `A` is replaced by `b`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f0408dbffe70f7d8077ce6d0bd328742.png)'
  prefs: []
  type: TYPE_IMG
- en: Cramer’s rule to identify t1 and t2\. Operator |.| is the determinant. Commas
    separate matrix columns.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7915c7a151b0da57ffde63bd3b2a1c73.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Vince Fleming](https://unsplash.com/@vincefleming?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 3D Ray Intersection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike the 2D case, it’s highly unlikely for two 3D rays to intersect. For instance,
    trying to make two laser pointers held by two different people intersect is very
    challenging.
  prefs: []
  type: TYPE_NORMAL
- en: The linear system `Ax=b` ends up having 3 equations for 2 unknowns, making it
    unsolvable unless there’s redundancy within the equations.
  prefs: []
  type: TYPE_NORMAL
- en: Least-Squares
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Given the absence of a solution in most cases, the shortest line segment between
    both rays can be viewed as their intersection. Let’s denote `p1` and `p2` as the
    endpoints of this optimal segment, located on `r1` and `r2` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4894170beb6c75c51efbae2d6f75a13a.png)'
  prefs: []
  type: TYPE_IMG
- en: 3D Ray Intersection — Diagram by the author
  prefs: []
  type: TYPE_NORMAL
- en: Our task now transforms into a least-squares minimization problem. Its formulation
    is straightforward given that `Ax-b` already represents the vector between `p2`
    and `p1`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6d39d07af994d5b66dbde274fe1eb9fe.png)'
  prefs: []
  type: TYPE_IMG
- en: It’s a well-known problem. Zeroing the gradient at the optimum gives us the
    solution using the pseudo-inverse matrix, which is a convenient way to build a
    square and thus invertible matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1ced4f49ef7b4ff584077985aa5387e8.png)![](../Images/a6ec95ccf0a2d28401791aef1556ebac.png)'
  prefs: []
  type: TYPE_IMG
- en: Orthogonality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While it appears on the diagram above that the shortest segment is perpendicular
    to both rays, we have yet to formally prove this, even-though it sounds intuitive.
  prefs: []
  type: TYPE_NORMAL
- en: The zero gradient also implies that the dot product between the segment defined
    by `p1` and `p2` and both ray directions `d1` and `d2` is zero, which proves the
    orthogonality.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e2faa09fa96ff1eec553d68ebe4d10a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Alternative Linear System
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Least-Squares approach works perfectly fine, but we can also introduce a
    third unknown variable to make our linear system solvable.
  prefs: []
  type: TYPE_NORMAL
- en: Given that the vectors `d1`, `d2` and `p2-p1` constitute an orthogonal basis,
    we can build an orthogonal frame with `o1` as the origin. The points `p1` and
    `p2` can then be derived by expressing the local coordinates of `o2` with respect
    to this frame.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the direction of the segment `p2-p1` is given by the cross product
    between both ray directions. We’ll introduce the signed scale δ along this direction
    in the orthogonal basis. The actual distance between the two rays can be obtained
    by multiplying |δ| by the norm of the cross product.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa98e49dbef95149487fb995fd4046b9.png)'
  prefs: []
  type: TYPE_IMG
- en: t1, δ and t2 can then be retrieved using a linear system of equations.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4d7b7ddccdaff497a2b02f78cd18d4aa.png)'
  prefs: []
  type: TYPE_IMG
- en: The determinant of a 3x3 matrix can be derived via the scalar triple product,
    which involves the dot product of one column with the cross product of the other
    two.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b20e72c430c427bae012dfff6fa8e9bc.png)'
  prefs: []
  type: TYPE_IMG
- en: In our case, simplifying the determinant equation is straightforward as the
    second column is already a cross product. Note that inserting the cross product
    as the final column would have resulted in the negation of the norm instead.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8fe3951f383fdbfd31267ff4acd218a9.png)'
  prefs: []
  type: TYPE_IMG
- en: Solving with Cramer’s rule gives us the optimal `t1` and `t2` , but also the
    signed scale δ.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/01a30c132c755c622503cb50496ebbe2.png)'
  prefs: []
  type: TYPE_IMG
- en: If you love clean equations, you can re-order and swap columns to remove minus
    signs and make it look better!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/168bcd7adb3da59d325b4d21709a8d84.png)'
  prefs: []
  type: TYPE_IMG
- en: Intersection Point
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The intersection point can be defined as the middle of the shortest segment,
    i.e. `0.5(p1+p2)`.
  prefs: []
  type: TYPE_NORMAL
- en: Distance between rays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As said previously, the signed scale δ must be multiplied by the norm of the
    cross product of both rays to retrieve the true distance between the rays.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/89088b762943928dfe2be9d4f8d8b6c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you enjoyed reading this article and that it gave you more insights on
    how to intersect 2D or 3D rays!
  prefs: []
  type: TYPE_NORMAL
