- en: Intuitive Explanation of Async / Await in JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/intuitive-explanation-of-async-await-in-javascript-730174c000bd?source=collection_archive---------1-----------------------#2024-09-08](https://towardsdatascience.com/intuitive-explanation-of-async-await-in-javascript-730174c000bd?source=collection_archive---------1-----------------------#2024-09-08)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Designing asynchronous pipelines for efficient data processing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@slavahead?source=post_page---byline--730174c000bd--------------------------------)[![Vyacheslav
    Efimov](../Images/441e600862b2b93564c6cd81abb0092d.png)](https://medium.com/@slavahead?source=post_page---byline--730174c000bd--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--730174c000bd--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--730174c000bd--------------------------------)
    [Vyacheslav Efimov](https://medium.com/@slavahead?source=post_page---byline--730174c000bd--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--730174c000bd--------------------------------)
    ·10 min read·Sep 8, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b5cfe111c12bf37450e018b376f9c41b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Note.** This article already assumes that you are familiar with callbacks,
    promises, and have a basic understanding of the asynchronous paradigm in JavaScript.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The asynchronous mechanism is one of the most important concepts in JavaScript
    and programming in general. It allows a program to separately execute secondary
    tasks in the background without blocking the current thread from executing primary
    tasks. When a secondary task is completed, its result is returned and the program
    continues to run normally. In this context, such secondary tasks are called **asynchronous**.
  prefs: []
  type: TYPE_NORMAL
- en: '**Asynchronous tasks typically include making requests to external environments
    like databases, web APIs or operating systems**. If the result of an asynchronous
    operation does not affect the logic of the main program, then instead of just
    waiting before the task will have completed, it is much better not to waste this
    time and continue executing primary tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, sometimes the result of an asynchronous operation is used immediately
    in the next code lines. In such cases, the succeeding code lines should not be
    executed until the asynchronous operation is…
  prefs: []
  type: TYPE_NORMAL
