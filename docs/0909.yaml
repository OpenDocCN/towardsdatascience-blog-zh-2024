- en: How to build your own AI assistant for bookmark searching?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何构建自己的书签搜索AI助手？
- en: 原文：[https://towardsdatascience.com/how-to-build-your-own-ai-assistant-for-bookmark-searching-7e3dcc17e3fc?source=collection_archive---------11-----------------------#2024-04-09](https://towardsdatascience.com/how-to-build-your-own-ai-assistant-for-bookmark-searching-7e3dcc17e3fc?source=collection_archive---------11-----------------------#2024-04-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-build-your-own-ai-assistant-for-bookmark-searching-7e3dcc17e3fc?source=collection_archive---------11-----------------------#2024-04-09](https://towardsdatascience.com/how-to-build-your-own-ai-assistant-for-bookmark-searching-7e3dcc17e3fc?source=collection_archive---------11-----------------------#2024-04-09)
- en: A step-by-step guide for an automated GPT-based bookmark searching pipeline
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化基于GPT的书签搜索管道逐步指南
- en: '[](https://medium.com/@swsychen?source=post_page---byline--7e3dcc17e3fc--------------------------------)[![Jiaqi
    Chen](../Images/c2ed8f7ef6f52e96081dab5fa88aa883.png)](https://medium.com/@swsychen?source=post_page---byline--7e3dcc17e3fc--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--7e3dcc17e3fc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--7e3dcc17e3fc--------------------------------)
    [Jiaqi Chen](https://medium.com/@swsychen?source=post_page---byline--7e3dcc17e3fc--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@swsychen?source=post_page---byline--7e3dcc17e3fc--------------------------------)[![Jiaqi
    Chen](../Images/c2ed8f7ef6f52e96081dab5fa88aa883.png)](https://medium.com/@swsychen?source=post_page---byline--7e3dcc17e3fc--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--7e3dcc17e3fc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--7e3dcc17e3fc--------------------------------)
    [Jiaqi Chen](https://medium.com/@swsychen?source=post_page---byline--7e3dcc17e3fc--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--7e3dcc17e3fc--------------------------------)
    ·9 min read·Apr 9, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--7e3dcc17e3fc--------------------------------)
    ·阅读时长9分钟·2024年4月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/fa51dbd9b13fac628bfb7ab78a40b999.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fa51dbd9b13fac628bfb7ab78a40b999.png)'
- en: Image by Author.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图像来自作者。
- en: Have you encountered moments when searching for a specific bookmark in your
    Chrome browser only to find that you’re overwhelmed by their sheer number? It
    becomes quite tedious and draining to sift through your extensive collection of
    bookmarks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾在Chrome浏览器中搜索特定书签时，发现自己被数量庞大的书签淹没？在面对庞大的书签收藏时，逐一筛选变得相当繁琐且消耗精力。
- en: '![](../Images/8bba0292c8e8539ffd68eae911cfc8a6.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8bba0292c8e8539ffd68eae911cfc8a6.png)'
- en: Bookmark ocean. — Snapshot from author’s Google Chrome bookmark.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 书签海洋 — 来自作者Google Chrome书签的快照。
- en: 'Actually, we can simply leave it to ChatGPT which is currently the most popular
    AI model that can basically answer everything we ask. Imagine, if it can gain
    access to the bookmarks we have, then bingo! Problem solved! We can then ask it
    to give us the specific link we want from the entire bookmark storage, like the
    following GIF:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们可以简单地把这件事交给ChatGPT，它是目前最流行的AI模型，几乎能回答我们所问的一切。试想一下，如果它能够访问我们拥有的书签，那么问题就解决了！我们可以要求它从整个书签存储中提供我们想要的特定链接，就像下面的GIF一样：
- en: '![](../Images/93760a5cdc9e192d916a66a097ceac30.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/93760a5cdc9e192d916a66a097ceac30.png)'
- en: Showcasing the usage of the AI assistant. — GIF from screen recording.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 展示AI助手的使用 — 来自屏幕录制的GIF。
- en: To achieve this, I built a real-time pipeline to update the Chrome bookmarks
    into a vector database that ChatGPT will use as the context for our questions.
    I will explain in this article step by step how to build such a pipeline and you
    will eventually have your own one too!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一目标，我建立了一个实时管道，将Chrome书签更新到一个向量数据库中，ChatGPT将使用这个数据库作为我们提问时的上下文。本文将逐步解释如何构建这样的管道，最终你也将拥有自己的管道！
- en: Features
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特性
- en: 'Before we begin, let’s count the advantages of it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，让我们先总结一下它的优势：
- en: Unlike traditional search engines (like the one in Chrome bookmark manager),
    AI models can have a good semantic understanding of each title. If you forget
    the exact keyword when searching bookmarks, you can simply draw a rough outline
    and ChatGPT can get it! It can even understand titles in a different language.
    Truly remarkable.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与传统的搜索引擎（如Chrome书签管理器中的搜索）不同，AI模型可以很好地理解每个标题的语义。如果你在搜索书签时忘记了确切的关键词，你只需提供一个大致的框架，ChatGPT就能找到它！它甚至可以理解不同语言的标题，真是令人惊叹。
- en: '![](../Images/4aaecd3196df8144fa60fc47788bfe60.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4aaecd3196df8144fa60fc47788bfe60.png)'
- en: What ChatGPT can do. — Snapshot from the AI assistant interface
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT能做什么 — 来自AI助手界面的快照。
- en: '![](../Images/91b1fe29a7c7382ee111bf263df0b22f.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/91b1fe29a7c7382ee111bf263df0b22f.png)'
- en: When the Chrome bookmark search engine fails. — Snapshot from author’s Google
    Chrome bookmark manager
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Chrome 书签搜索引擎失败时。 — 来自作者的 Google Chrome 书签管理器截图
- en: 2\. Everything is automatically up-to-date. Each newly added bookmark will be
    automatically reflected in the AI knowledge database simply within a few minutes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 一切都自动保持最新。每个新添加的书签将在几分钟内自动反映在 AI 知识数据库中。
- en: Pipeline Overview
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管道概览
- en: '![](../Images/72b7336d53b94b2b896d47f6f91348c4.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/72b7336d53b94b2b896d47f6f91348c4.png)'
- en: All the components in the pipeline. — Image by Author.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 管道中的所有组件。 — 图片由作者提供。
- en: 'Here you can see the role of each component in our pipeline. The Chrome bookmarks
    are extracted into rows of a Google Sheet using our customized Chrome plugin.
    The Estuary Flow gets (or captures) all the sheet data which will then be vectorized
    (or materialized) by an embedding model using OpenAI API. All the embeddings (each
    vector corresponds to each row of the sheet — i.e. each single bookmark) will
    be retrieved and stored in the Pinecone vector database. After that, the user
    can give prompts to the built app using Streamlit and LangChain (e.g. “Are there
    links for dinov2?”). It will first retrieve some similar embeddings from Pinecone
    (getting a context/several potential bookmark options) and combine them with the
    user’s question as input to ChatGPT. Then ChatGPT will consider every possible
    bookmark and give a final answer to you. This process is also called RAG: Retrieval
    Augmented Generation.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到我们管道中每个组件的作用。Chrome 书签通过我们定制的 Chrome 插件提取到 Google 表格的行中。Estuary Flow
    获取（或捕获）所有的表格数据，然后通过 OpenAI API 使用嵌入模型将其向量化（或物化）。所有嵌入（每个向量对应表格中的一行——即每个单独的书签）将被检索并存储在
    Pinecone 向量数据库中。之后，用户可以使用 Streamlit 和 LangChain 向构建的应用程序发出提示（例如：“dinov2 的链接是什么？”）。它将首先从
    Pinecone 中检索一些相似的嵌入（获取上下文/几个潜在的书签选项），并将它们与用户的问题一起作为输入提供给 ChatGPT。然后 ChatGPT 将考虑每个可能的书签，并给出最终的答案。这一过程也被称为
    RAG：检索增强生成。
- en: In the following parts, we will see how to build such a pipeline step by step.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将逐步展示如何构建这样的管道。
- en: Chrome Plugin for bookmark retrieval
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于书签检索的 Chrome 插件
- en: 'Code: [https://github.com/swsychen/Boomark2Sheet_Chromeplugin](https://github.com/swsychen/Boomark2Sheet_Chromeplugin)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 代码：[https://github.com/swsychen/Boomark2Sheet_Chromeplugin](https://github.com/swsychen/Boomark2Sheet_Chromeplugin)
- en: To transport bookmarks into a Google Sheet for further processing, we need to
    build a customized Chrome plugin (or extension) first.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将书签传输到 Google 表格中以供进一步处理，我们首先需要构建一个定制的 Chrome 插件（或扩展）。
- en: '![](../Images/5af65140f3085e012598b1b553994783.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5af65140f3085e012598b1b553994783.png)'
- en: Code structure overview for a Chrome plugin. — Snapshot from author’s vscode.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 插件的代码结构概览。 — 来自作者的 vscode 截图。
- en: 'The most important file for a Chrome extension is the *manifest.json*, which
    defines the high-level structure and behavior of the plugin. Here we add the necessary
    *permissions* to use the bookmark API from Google Chrome and track the changes
    in the bookmarks. We also have a field for *oauth2* authentication because we
    will use the Google Sheet API. You will need to put your own *client_id* in this
    field. You can mainly follow the **Set up your environment** sectionin this [link](https://developers.google.com/sheets/api/quickstart/js)
    to get the *client_id* and a Google Sheet API key (we will use it later). Something
    you should notice is:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome 扩展的最重要文件是*manifest.json*，它定义了插件的高级结构和行为。在这里，我们添加了必要的*权限*来使用 Google Chrome
    的书签 API，并跟踪书签的变化。我们还设置了一个*oauth2* 认证字段，因为我们将使用 Google 表格 API。您需要在此字段中填写自己的*client_id*。您可以主要参考此[链接](https://developers.google.com/sheets/api/quickstart/js)中的**设置您的环境**部分来获取*client_id*和
    Google 表格 API 密钥（稍后我们会使用它）。有一点需要注意的是：
- en: In **OAuth consent screen**, you need to add yourself (Gmail address) as the
    test user. Otherwise, you will not be allowed to use the APIs.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**OAuth 同意屏幕**中，您需要将自己（Gmail 地址）添加为测试用户。否则，您将无法使用这些 API。
- en: In **Create OAuth client ID**, the application type you should choose is *Chrome
    extension* (not the Web application as in the quickstart link). The *Item ID*
    needed to be specified is the plugin ID (we will have it when we load our plugin
    and you can find it in the extension manager).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建 OAuth 客户端 ID**时，您应该选择的应用类型是*Chrome 扩展*（而不是快速入门链接中的 Web 应用）。需要指定的*项目 ID*是插件
    ID（我们在加载插件时会获得它，您可以在扩展管理器中找到它）。
- en: '![](../Images/47ee7d50d430edb20cdc70fde8b3ce99.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/47ee7d50d430edb20cdc70fde8b3ce99.png)'
- en: The blurred part is the Item ID. — Snapshot from author’s Google Chrome extension
    manager.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 模糊的部分是项目 ID。— 来自作者的 Google Chrome 扩展管理器截图。
- en: 'The core functional file is *background.js*, which can do all the syncs in
    the background. I’ve prepared the code for you in the GitHub link, the only thing
    you need to change is the *spreadsheetId* at the start of the javascript file.
    This id you can identify it in the sharing link of your created Google Sheet (after
    d/ and before /edit, and yes you need to manually create a Google Sheet first!):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 核心功能文件是 *background.js*，它可以在后台执行所有的同步操作。我已经为您准备了 GitHub 链接中的代码，您需要做的唯一修改是在 JavaScript
    文件的开头更改 *spreadsheetId*。这个 ID 您可以通过创建的 Google 表格的分享链接来识别（位于 d/ 和 /edit 之间，是的，您需要先手动创建一个
    Google 表格！）：
- en: '[https://docs.google.com/spreadsheets/d/{**spreadsheetId}**/edit#gid=](https://docs.google.com/spreadsheets/d/spreadsheetId/edit#gid=)0'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.google.com/spreadsheets/d/{**spreadsheetId}**/edit#gid=](https://docs.google.com/spreadsheets/d/spreadsheetId/edit#gid=)0'
- en: The main logic of the code is to listen to any change in your bookmarks and
    refresh (clear + write) your Sheet file with all the bookmarks you have when the
    plugin is triggered (e.g. when you add a new bookmark). It writes the id, title,
    and URL of each bookmark into a separate row in your specified Google Sheet.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的主要逻辑是监听书签中的任何更改，并在插件触发时（例如，当您添加新的书签时），刷新（清除 + 写入）您的 Google 表格，更新所有书签。它将每个书签的
    ID、标题和 URL 写入您指定的 Google 表格中的单独一行。
- en: '![](../Images/8372d2161ec199c9907d2f69d57b0ec7.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8372d2161ec199c9907d2f69d57b0ec7.png)'
- en: What it looks like in your Google Sheet. — Snapshot from author’s Google Sheet.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在您的 Google 表格中的样子。— 来自作者的 Google 表格截图。
- en: The last file *popup.html* is basically not that useful as it only defines the
    content it shows in the popup window when you click the plugin button in your
    Chrome browser.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的文件 *popup.html* 基本上并不太有用，因为它只是定义了在您点击浏览器插件按钮时，弹出窗口显示的内容。
- en: 'After you make sure all the files are in a single folder, now you are ready
    to upload your plugin:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在确保所有文件都在同一个文件夹后，现在您可以准备上传您的插件：
- en: Go to the **Extensions>Manage Extensions** of your Chrome browser, and turn
    on the **Developer mode** on the top right of the page.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Chrome 浏览器，进入 **Extensions>Manage Extensions**，并在页面右上角启用 **Developer mode**。
- en: Click the **Load unpacked** and choose the code folder. Then your plugin will
    be uploaded and running. Click the hyperlink *service worker* to see the printed
    log info from the code.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Load unpacked** 并选择代码文件夹。然后您的插件将上传并开始运行。点击超链接 *service worker* 来查看代码打印的日志信息。
- en: Once uploaded, the plugin will stay operational as long as the Chrome browser
    is open. And it’ll also automatically start running when you re-open the browser.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 上传后，只要 Chrome 浏览器处于打开状态，插件就会保持运行。而且当您重新打开浏览器时，它也会自动启动。
- en: Setting up Estuary Flow and Pinecone
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Estuary Flow 和 Pinecone
- en: Estuary Flow is basically a connector that syncs the database with the data
    source you provided. In our case, when Estuary Flow syncs data from a Google Sheet
    into a vector database — Pinecone, it will also call an embedding model to transform
    the data into embedding vectors which will then be stored in the Pinecone database.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Estuary Flow 本质上是一个连接器，用于将数据库与您提供的数据源进行同步。在我们的案例中，当 Estuary Flow 将数据从 Google
    表格同步到向量数据库 Pinecone 时，它还会调用嵌入模型，将数据转换为嵌入向量，然后将其存储在 Pinecone 数据库中。
- en: 'For setting up Estuary Flow and Pinecone, there is already a quite comprehensive
    video tutorial on YouTube: [https://youtu.be/qyUmVW88L_A?si=xZ-atgJortObxDi-](https://youtu.be/qyUmVW88L_A?si=xZ-atgJortObxDi-)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Estuary Flow 和 Pinecone 的设置，YouTube 上已经有一个相当全面的视频教程：[https://youtu.be/qyUmVW88L_A?si=xZ-atgJortObxDi-](https://youtu.be/qyUmVW88L_A?si=xZ-atgJortObxDi-)
- en: 'But please pay attention! Because the Estuary Flow and Pinecone are in fast
    development. Some points in the video have changed by now, which may cause confusion.
    Here I list some updates to the video so that you can replicate everything easily:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意！由于 Estuary Flow 和 Pinecone 正在快速开发中，视频中的一些内容已经发生了变化，这可能会导致一些困惑。在这里，我列出了一些视频更新，以便您可以轻松地复制所有操作：
- en: 1.**(Estuary Flow>create Capture)** In row batch size, you may set some larger
    numbers according to the total row numbers in your Google Sheet for bookmarks.
    (e.g. set it to 600 if you’ve already got 400+ rows of bookmarks)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 1. **(Estuary Flow>create Capture)** 在行批量大小中，您可以根据 Google 表格中书签的总行数设置较大的数字。（例如，如果您已经有
    400 多行书签，可以设置为 600）
- en: 2\. **(Estuary Flow>create Capture)** When setting **Target Collections**, delete
    the cursor field “row_id” and add a new one “ID” like the following screenshot.
    You can keep the namespace empty.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **(Estuary Flow>创建捕获)** 设置**目标集合**时，删除光标字段“row_id”，并像以下截图一样添加一个新的“ID”。你可以将命名空间保持为空。
- en: '![](../Images/9c2c5c18089c72a0f3abf3e4c2a0d6e7.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9c2c5c18089c72a0f3abf3e4c2a0d6e7.png)'
- en: Change Cursor Field. — Snapshot from the [Sources](https://dashboard.estuary.dev/captures)
    on Estuary Flow (April 2024)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 更改光标字段。— 来自[Sources](https://dashboard.estuary.dev/captures)的快照，拍摄于Estuary Flow（2024年4月）
- en: '3\. **(Estuary Flow>create Capture)** Then switch to the **COLLECTION** subtab,
    press **EDIT** to change the Key from /row_id to /ID. And you should also change
    the “required” field of the schema code to “ID” like the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **(Estuary Flow>创建捕获)** 然后切换到**COLLECTION**子标签，点击**编辑**将Key从/row_id更改为/ID。同时，你还应该像下面这样将架构代码中的“required”字段更改为“ID”：
- en: '![](../Images/613a64c56a48bbc4e7aef58be94d7ed3.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/613a64c56a48bbc4e7aef58be94d7ed3.png)'
- en: Change Key and Schema. — Snapshot from the [Sources](https://dashboard.estuary.dev/captures)
    on Estuary Flow (April 2024)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 更改密钥和架构。— 来自[Sources](https://dashboard.estuary.dev/captures)的快照，拍摄于Estuary
    Flow（2024年4月）
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After “SAVE AND PUBLISH”, you can see that **Collections>{your collection name}>Overview>Data
    Preview** will show the correct ID of each bookmark.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在“保存并发布”后，你可以看到**Collections>{你的集合名称}>概览>数据预览**会显示每个书签的正确ID。
- en: '4\. **(Estuary Flow>create Capture)** In the last step, you can see an **Advanced
    Specification Editor (**in the bottom of the page). Here you can add a field “interval”:
    10m to decrease the refresh rate to per 10 minutes (default setting is per 5 minutes
    if not specified). Each refresh will call the OpenAI embedding model to redo all
    the embedding which will cost some money. Decreasing the rate is to save half
    of the money. You can ignore the “backfill” field.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. **(Estuary Flow>创建捕获)** 在最后一步，你可以看到一个**高级规格编辑器**（在页面底部）。在这里，你可以添加一个字段“interval”：10m，将刷新频率降至每10分钟一次（如果未指定，默认设置为每5分钟一次）。每次刷新都会调用OpenAI嵌入模型重新做所有嵌入，这会产生一些费用。降低刷新频率可以节省一半的费用。你可以忽略“backfill”字段。
- en: '![](../Images/28d40518a945a1f33da7e255ec17d38f.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/28d40518a945a1f33da7e255ec17d38f.png)'
- en: Specify the interval. — Snapshot from the [Sources](https://dashboard.estuary.dev/captures)
    on Estuary Flow (April 2024)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 指定间隔。— 来自[Sources](https://dashboard.estuary.dev/captures)的快照，拍摄于Estuary Flow（2024年4月）
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 5\. **(Estuary Flow>create Materialization)** The Pinecone environment is typically
    “gcp-starter” for a free-tier Pinecone index or like “us-east-1-aws” for standard-plan
    users (I don’t use serverless mode in Pinecone because the Estuary Flow has not
    yet provided a connector for the Pinecone serverless mode). The Pinecone index
    is the index name when you create the index in Pinecone.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. **(Estuary Flow>创建物化)** 对于免费的Pinecone索引，Pinecone环境通常是“gcp-starter”，或者对于标准计划用户是“us-east-1-aws”（我不使用Pinecone的无服务器模式，因为Estuary
    Flow尚未为Pinecone无服务器模式提供连接器）。Pinecone索引是你在Pinecone中创建索引时指定的索引名称。
- en: 6\. **(Estuary Flow>create Materialization)** Here are some tricky parts.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. **(Estuary Flow>创建物化)** 这里有一些难点。
- en: First, you should select the source capture using the blue button “SOURCE FROM
    CAPTURE” and then leave the Pinecone namespace in “CONFIG” **EMPTY** (the free
    tier of Pinecone must have an empty namespace).
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，你应该使用蓝色按钮“从捕获中选择源”来选择源捕获，然后在“配置”中将Pinecone命名空间保持**为空**（Pinecone的免费层必须使用空命名空间）。
- en: Second, after pressing “NEXT”, in the emerged **Advanced Specification Editor**
    of the materialization, you must make sure that the “bindings” field is NOT EMPTY.
    Fill in the content as in the following screenshot if it is empty or the field
    does not exist, otherwise, it won’t send anything to Pinecone. Also, you need
    to change the “source” field using your own Collection path (same as the “target”
    in the previous screenshot). If some errors pop up after you press “NEXT” and
    before you can see the editor, press “NEXT” again, and you will see the **Advanced
    Specification Editor**. Then you can specify the “bindings” and press “SAVE AND
    PUBLISH”. Everything should be ok after this step. The errors occur because we
    didn’t specify the “bindings” before.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二步，在点击“下一步”后，在弹出的**高级规格编辑器**中，必须确保“bindings”字段不是空的。如果为空或该字段不存在，请根据以下截图填写内容，否则将无法发送任何数据到Pinecone。此外，还需要使用你自己的集合路径更改“source”字段（与前面截图中的“target”相同）。如果点击“下一步”后出现错误，在看到编辑器之前，请再次点击“下一步”，你将看到**高级规格编辑器**。然后你可以指定“bindings”并点击“保存并发布”。这一步完成后，一切应该没问题。错误出现的原因是我们之前没有指定“bindings”。
- en: If there is another error message coming up after you have published everything
    and just returned to the Destination page telling you that you have not added
    a collection, simply ignore it as long as you see the usage is not zero in the
    OVERVIEW histogram (see the following screenshots). The histogram basically means
    how much data it has sent to Pinecone.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在你发布一切并返回到 Destination 页面后，出现另一个错误信息，告诉你没有添加集合，只要你看到 OVERVIEW 的直方图中使用量不为零，就可以忽略它（见下图）。这个直方图基本上表示它向
    Pinecone 发送了多少数据。
- en: '![](../Images/2d10fb5774747c57bb9acf84fa704f72.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2d10fb5774747c57bb9acf84fa704f72.png)'
- en: Make sure the “bindings” field is filled in like this. — Snapshot from the [Destinations](https://dashboard.estuary.dev/materializations)
    on Estuary Flow (April 2024)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 确保“bindings”字段像这样填写。— 来自[Destinations](https://dashboard.estuary.dev/materializations)的快照，来自
    Estuary Flow（2024年4月）
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/fb9052853ee79c9353c16a636eb6d27b.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fb9052853ee79c9353c16a636eb6d27b.png)'
- en: Don’t panic about the error, press “NEXT” again. — Snapshot from the [Destinations](https://dashboard.estuary.dev/materializations)
    on Estuary Flow (April 2024)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 不要因错误而慌张，再次点击“下一步”。— 来自[Destinations](https://dashboard.estuary.dev/materializations)的快照，来自
    Estuary Flow（2024年4月）
- en: '![](../Images/7152326e44aec06f9b8ce43eb9ed77a7.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7152326e44aec06f9b8ce43eb9ed77a7.png)'
- en: Make sure the usage in OVERVIEW is not empty. — Snapshot from the [Destinations](https://dashboard.estuary.dev/materializations)
    on Estuary Flow (April 2024)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 OVERVIEW 中的使用量不是空的。— 来自[Destinations](https://dashboard.estuary.dev/materializations)的快照，来自
    Estuary Flow（2024年4月）
- en: 7\. **(Pinecone>create index)** Pinecone has come up with serverless index mode
    (free but not supported by Estuary Flow yet) but I don’t use it in this project.
    Here we still use the pod-based option (not free anymore since last checked on
    April 14, 2024) which is well enough for our bookmark embedding storage. When
    creating an index, all you need is to set the index name and dimensions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. **(Pinecone>创建索引)** Pinecone 已推出无服务器索引模式（免费，但 Estuary Flow 目前尚不支持），但我在这个项目中没有使用它。这里我们仍然使用基于
    pod 的选项（自2024年4月14日以来不再免费），但它足以满足我们书签嵌入存储的需求。创建索引时，你只需要设置索引名称和维度。
- en: 8\. (**Pinecone>Indexes>{Your index}**) After you finish the creation of the
    Pinecone index and make sure the index name and environment are filled in correctly
    in the materialization of Estuary Flow, you are set. In the Pincone console, go
    to **Indexes>{Your index}** and you should see the vector count showing the total
    number of your bookmarks. It may take a few minutes until the Pinecone receives
    information from Estuary Flow and shows the correct vector count.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. (**Pinecone>索引>{你的索引}**) 完成 Pinecone 索引的创建后，并确保 Estuary Flow 中的物化（materialization）中正确填写了索引名称和环境，你就完成了。在
    Pinecone 控制台中，转到 **索引>{你的索引}**，你应该能看到显示你书签总数的向量数量。可能需要几分钟，直到 Pinecone 从 Estuary
    Flow 接收信息并显示正确的向量数量。
- en: '![](../Images/b21c7612899595cb92a6eb5730e40388.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b21c7612899595cb92a6eb5730e40388.png)'
- en: Here I have 402 bookmarks, so the vector count shows 402\. — Snapshot from [Pinecone](https://app.pinecone.io/organizations)
    (April 2024)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我有 402 个书签，因此向量数量显示为 402。— 来自[Pinecone](https://app.pinecone.io/organizations)的快照（2024年4月）
- en: Building your own App with Streamlit and Langchain
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Streamlit 和 Langchain 构建你自己的应用
- en: 'Code: [https://github.com/swsychen/BookmarkAI_App](https://github.com/swsychen/BookmarkAI_App)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 代码：[https://github.com/swsychen/BookmarkAI_App](https://github.com/swsychen/BookmarkAI_App)
- en: We are almost there! The last step is to build a beautiful interface just like
    the original ChatGPT. Here we use a very convenient framework called Streamlit,
    with which we can build an app in only a few lines of code. Langchain is also
    a user-friendly framework for using any large language model with minimum code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快到了！最后一步是构建一个漂亮的界面，就像原版的 ChatGPT 一样。在这里，我们使用了一个非常方便的框架，叫做 Streamlit，利用它我们可以用几行代码就构建一个应用。Langchain
    也是一个非常易于使用的框架，可以用最少的代码来操作任何大型语言模型。
- en: I’ve also prepared the code for this App for you. Follow the installation and
    usage guide in the GitHub link and enjoy!
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我也为这个应用准备了代码。请按照 GitHub 链接中的安装和使用指南进行操作，享受吧！
- en: 'The main logic of the code is:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的主要逻辑是：
- en: get user prompt → create a retriever chain with ChatGPT and Pinecone → input
    the prompt to the chain and get a response → stream the result to the UI
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 获取用户提示 → 创建一个包含 ChatGPT 和 Pinecone 的检索链 → 将提示输入到链中并获取响应 → 将结果流式传输到 UI
- en: '![](../Images/0ba3ea98dfef6f6b6c6e309e7a90e10a.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ba3ea98dfef6f6b6c6e309e7a90e10a.png)'
- en: The core part of the code. — Snapshot from author’s vscode.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的核心部分。— 来自作者的 vscode 快照。
- en: Please notice, that because the Langchain is in development, the code may be
    deprecated if you use a newer version other than the stated one in requirements.txt.
    If you want to dig deeper into Langchain and use another LLM for this bookmark
    searching, feel free to look into the [official documents](https://python.langchain.com/docs/get_started/introduction/)
    of Langchain.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于 Langchain 仍在开发中，如果您使用的版本与 requirements.txt 中指定的版本不同，代码可能会被弃用。如果您想深入了解
    Langchain 并使用其他 LLM 进行书签搜索，可以随时查看 Langchain的[官方文档](https://python.langchain.com/docs/get_started/introduction/)。
- en: Outro
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结语
- en: This is the first tutorial post I’ve ever written. If there is anything unclear
    that needs to be improved or clarified, feel free to leave messages.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我写的第一篇教程文章。如果有任何不清楚的地方需要改进或澄清，欢迎留言。
