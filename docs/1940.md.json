["```py\n# Define the dataframe \nchurn_df=pd.DataFrame(\n    {\n        \"occupancy_rate\":occupancy_rates,\n        \"reported_problem_rate\": reported_problem_rates,\n        \"churn_rate\":churn_rates,\n    }\n)\nX=churn_df.drop([\"churn_rate\"],axis=1)\ny=churn_df[\"churn_rate\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 42)\n# append one speical point\nX_test=pd.concat(objs=[X_test, pd.DataFrame({\"occupancy_rate\":[0.8], \"reported_problem_rate\":[0.64]})])\n\n# Define the prediction\ndef predict_fn(data):\n    occupancy_rates = data[:, 0]\n    reported_problem_rates = data[:, 1]\n\n    churn_rate= C_base +C_churn*(C_occ* occupancy_rates-reported_problem_rates-0.6)**2 +C_problem*reported_problem_rates\n    return churn_rate\n\n# Create the SHAP KernelExplainer using the correct prediction function\nbackground_data = shap.sample(X_train,100)\nexplainer = shap.KernelExplainer(predict_fn, background_data)\nshap_values = explainer(X_test)\n```"]