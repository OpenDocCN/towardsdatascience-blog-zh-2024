- en: Implementing “Modular RAG” with Haystack and Hypster
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现“模块化RAG”与Haystack和Hypster
- en: 原文：[https://towardsdatascience.com/implementing-modular-rag-with-haystack-and-hypster-d2f0ecc88b8f?source=collection_archive---------3-----------------------#2024-10-18](https://towardsdatascience.com/implementing-modular-rag-with-haystack-and-hypster-d2f0ecc88b8f?source=collection_archive---------3-----------------------#2024-10-18)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/implementing-modular-rag-with-haystack-and-hypster-d2f0ecc88b8f?source=collection_archive---------3-----------------------#2024-10-18](https://towardsdatascience.com/implementing-modular-rag-with-haystack-and-hypster-d2f0ecc88b8f?source=collection_archive---------3-----------------------#2024-10-18)
- en: Transforming RAG systems into LEGO-like reconfigurable frameworks
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将RAG系统转变为类似乐高的可重构框架
- en: '[](https://medium.com/@giladrubin?source=post_page---byline--d2f0ecc88b8f--------------------------------)[![Gilad
    Rubin](../Images/e98728582365c22c2803d5db0a0f3ca6.png)](https://medium.com/@giladrubin?source=post_page---byline--d2f0ecc88b8f--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d2f0ecc88b8f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d2f0ecc88b8f--------------------------------)
    [Gilad Rubin](https://medium.com/@giladrubin?source=post_page---byline--d2f0ecc88b8f--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@giladrubin?source=post_page---byline--d2f0ecc88b8f--------------------------------)[![Gilad
    Rubin](../Images/e98728582365c22c2803d5db0a0f3ca6.png)](https://medium.com/@giladrubin?source=post_page---byline--d2f0ecc88b8f--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d2f0ecc88b8f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d2f0ecc88b8f--------------------------------)
    [Gilad Rubin](https://medium.com/@giladrubin?source=post_page---byline--d2f0ecc88b8f--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d2f0ecc88b8f--------------------------------)
    ·11 min read·Oct 18, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d2f0ecc88b8f--------------------------------)
    ·11分钟阅读·2024年10月18日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/665f1ebb6e484102c452f4295f32035a.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/665f1ebb6e484102c452f4295f32035a.png)'
- en: Image Generated using [Midjourney AI](https://www.midjourney.com/), Prompted
    by the author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[Midjourney AI](https://www.midjourney.com/)生成的图像，提示由作者提供
- en: Intro
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Keeping up with the latest in AI can be a challenge, especially when it comes
    to an increasingly evolving field like Retrieval Augmented Generation (RAG). With
    so many different solutions and implementations, one can easily feel lost.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 跟上人工智能的最新动态可能是一个挑战，特别是当涉及到像检索增强生成（RAG）这样日新月异的领域时。面对如此多的不同解决方案和实现方式，人们很容易感到迷失。
- en: I struggled with this myself for a long time, trying to wrap my head around
    every new article or “trick” to make RAG systems better in one way or another.
    Every new paper, tutorial or blogpost felt like something completely new and it
    became increasingly difficult to keep up with all the acronyms for all the newest
    fancy methods - HyDE, RAPTOR, CRAG, FLARE — they started to sound like Pokémon
    character names to me.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我自己也为此困扰了很长时间，试图理解每篇新文章或“技巧”，以便以某种方式提升RAG系统的表现。每一篇新论文、教程或博客文章都像是完全崭新的内容，且越来越难以跟上所有最新方法的缩写——HyDE、RAPTOR、CRAG、FLARE——它们开始听起来像是宝可梦角色的名字。
- en: 'Then I came across this paper by Gao et al. (2024) “[**Modular RAG: Transforming
    RAG Systems into LEGO-like Reconfigurable Frameworks”**](https://arxiv.org/abs/2407.21059)**.**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我遇到了高等人（2024年）的这篇论文《[**模块化RAG：将RAG系统转变为类似乐高的可重构框架**](https://arxiv.org/abs/2407.21059)**》。
- en: '![](../Images/c9f2768a8d8fb903c8fa98e34bd40d0c.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c9f2768a8d8fb903c8fa98e34bd40d0c.png)'
- en: 'The main figure from the paper that shows the components from which the authors
    construct RAG solutions. Source: [Modular RAG](https://arxiv.org/abs/2407.21059)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 论文中的主要图示展示了作者构建RAG解决方案的组件。来源：[模块化RAG](https://arxiv.org/abs/2407.21059)
- en: Modular RAG
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块化RAG
- en: 'This paper provides a structured approach for breaking down RAG systems into
    a unified framework that can encompass diverse solutions and approaches. They
    proposed six main components:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本文提供了一种结构化方法，将RAG系统分解为一个统一的框架，以涵盖多种解决方案和方法。作者提出了六个主要组件：
- en: '**Indexing:** Organize your data for efficient search.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**索引：** 为高效检索组织数据。'
- en: '**Pre-Retrieval:** Process the user’s query before searching.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预检索：** 在搜索前处理用户的查询。'
- en: '**Retrieval:** Find the most relevant information.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检索：** 找到最相关的信息。'
- en: '**Post-Retrieval:** Refine the retrieved information.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**后检索：** 精炼检索到的信息。'
- en: '**Generation:** Use an LLM to generate a response.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成：** 使用LLM生成响应。'
- en: '**Orchestration:** Control the overall flow of the system.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编排：** 控制系统的整体流程。'
- en: The key insight from this paper is that a wide range of existing RAG solutions
    can be described using these components in a LEGO-like manner. This modularity
    provides a framework for understanding, designing, and navigating the process
    of building a RAG system with greater flexibility and clarity.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇论文的关键见解是，许多现有的 RAG 解决方案可以通过这些组件以类似 LEGO 的方式进行描述。这种模块化为理解、设计和导航构建 RAG 系统的过程提供了一个框架，使其更加灵活和清晰。
- en: 'In the paper, the authors showcase how this is possible by taking examples
    of existing RAG solutions and expressing them using the same building blocks.
    For example:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇论文中，作者展示了如何通过举例现有的 RAG 解决方案，并使用相同的构建模块来表达它们。例如：
- en: '![](../Images/d41279dd94909e693a0427b0faab823b.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d41279dd94909e693a0427b0faab823b.png)'
- en: '**Adaptive RAG flow** - where the “judge” decides whether or not to use retrieval.
    Source: [Modular RAG](https://arxiv.org/abs/2407.21059)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**自适应 RAG 流程** —— “判断者”决定是否使用检索。来源：[模块化 RAG](https://arxiv.org/abs/2407.21059)'
- en: '![](../Images/818a2c6d61007b364397301bf777d21f.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/818a2c6d61007b364397301bf777d21f.png)'
- en: '**FLARE - F**orward-**L**ooking **A**ctive **RE**trieval where each sentence
    can trigger a retrieval step. Source: [Modular RAG](https://arxiv.org/abs/2407.21059)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**FLARE - 前向**（**F**orward）**主动检索**（**L**ooking **A**ctive **RE**trieval），每个句子都可以触发一次检索步骤。来源：[模块化
    RAG](https://arxiv.org/abs/2407.21059)'
- en: 'I highly recommend reading this paper and the set of blog-posts by the author
    of the paper, Yunfan Gao: Modular RAG and RAG Flow: [Part I](https://medium.com/@yufan1602/modular-rag-and-rag-flow-part-%E2%85%B0-e69b32dc13a3),
    [Part II](https://medium.com/@yufan1602/modular-rag-and-rag-flow-part-ii-77b62bf8a5d3).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我强烈推荐阅读这篇论文以及作者高云帆的博客系列文章：模块化 RAG 和 RAG 流程：[第一部分](https://medium.com/@yufan1602/modular-rag-and-rag-flow-part-%E2%85%B0-e69b32dc13a3)、[第二部分](https://medium.com/@yufan1602/modular-rag-and-rag-flow-part-ii-77b62bf8a5d3)。
- en: Personally, this framework helped me understand how different RAG approaches
    relate to each other, and now I can easily make sense of new papers and implementations.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 个人而言，这个框架帮助我理解了不同的 RAG 方法之间的关系，现在我可以轻松理解新的论文和实现。
- en: Implementing Modular RAG
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现模块化 RAG
- en: So, how can we actually implement this “Modular RAG” framework?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何实际实现这个“模块化 RAG”框架呢？
- en: Since it’s more of a meta-framework — what does that mean in practical terms?
    Does it mean that we need to implement *all* the possible combinations of components?
    Or do we just build the individual components and let developers figure out how
    to put them together?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它更像是一个元框架——这在实际操作中意味着什么？是否意味着我们需要实现*所有*可能的组件组合？还是我们只需构建单独的组件，让开发人员自己决定如何将它们组合起来？
- en: I believe that in most real-life situations — it’s not necessary to try to cover
    *every* possible RAG configuration, but to narrow down the space of relevant configurations
    based on the requirements and constraints of each project.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信，在大多数现实情况中——并不需要尝试覆盖*每一个*可能的 RAG 配置，而是根据每个项目的需求和约束，缩小相关配置的范围。
- en: In this tutorial, I’ll show you a concrete example of how to build a configurable
    system using a small set of options. Hopefully, this will give you the right perspective
    and tools to create your own version of a Modular RAG that contains the set of
    relevant configurations for your specific use-case.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我将向你展示一个如何使用少量选项构建可配置系统的具体示例。希望这能为你提供正确的视角和工具，帮助你创建适合特定用例的模块化 RAG 版本，并包含相关配置集。
- en: 'Let’s go on to explore the two main tools we’ll be using:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续探索我们将使用的两个主要工具：
- en: Haystack — The Main Components Library
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Haystack — 主要组件库
- en: '`haystack` is an open-source framework for building production-ready LLM applications,
    retrieval-augmented generative pipelines and state-of-the-art search systems that
    work intelligently over large document collections.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`haystack` 是一个开源框架，用于构建生产就绪的 LLM 应用、增强检索的生成管道以及在大型文档集合上智能工作的最先进搜索系统。'
- en: '[](https://haystack.deepset.ai/?source=post_page-----d2f0ecc88b8f--------------------------------)
    [## Haystack | Haystack'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://haystack.deepset.ai/?source=post_page-----d2f0ecc88b8f--------------------------------)
    [## Haystack | Haystack'
- en: Haystack, the composable open-source AI framework
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Haystack，Composable 开源 AI 框架
- en: haystack.deepset.ai](https://haystack.deepset.ai/?source=post_page-----d2f0ecc88b8f--------------------------------)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: haystack.deepset.ai](https://haystack.deepset.ai/?source=post_page-----d2f0ecc88b8f--------------------------------)
- en: '**Pros:**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**优点：**'
- en: Great component design
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出色的组件设计
- en: The pipeline is very flexible and allows for dynamic configurations
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个管道非常灵活，允许动态配置
- en: Extremely (!) well documented
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极其（！）完善的文档
- en: The framework includes many existing implementations and integrations with Generative
    AI providers.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该框架包含许多现有的实现和与生成式 AI 提供者的集成。
- en: '**Cons:**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**缺点：**'
- en: The pipeline interface can be a bit verbose
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管道接口可能会有些冗长
- en: Using components outside of a pipeline is not very ergonomic.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在管道外使用组件不是很符合人体工程学。
- en: I’ve played around with a few different Generative AI frameworks, and Haystack
    was by far the easiest for me to understand, use and customize.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我尝试过一些不同的生成式 AI 框架，而 Haystack 是我理解、使用和定制最简单的框架。
- en: Hypster — Managing Configuration Spaces
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hypster — 管理配置空间
- en: '`**hypster**` is a lightweight pythonic configuration system for AI & Machine
    Learning projects. It offers minimal, intuitive pythonic syntax, supporting hierarchical
    and swappable configurations.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`**hypster**` 是一个轻量级的 Pythonic 配置系统，适用于 AI 和机器学习项目。它提供了简洁、直观的 Pythonic 语法，支持层次化和可交换的配置。'
- en: '[](https://medium.com/@giladrubin/introducing-hypster-a-pythonic-framework-for-managing-configurations-to-build-highly-optimized-ai-5ee004dbd6a5?source=post_page-----d2f0ecc88b8f--------------------------------)
    [## Introducing HyPSTER: A Pythonic Framework for Managing Configurations to Build
    Highly Optimized AI…'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@giladrubin/introducing-hypster-a-pythonic-framework-for-managing-configurations-to-build-highly-optimized-ai-5ee004dbd6a5?source=post_page-----d2f0ecc88b8f--------------------------------)
    [## 介绍 HyPSTER：一个用于构建高度优化 AI 的 Pythonic 配置管理框架…'
- en: Image by the Author
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: medium.com](https://medium.com/@giladrubin/introducing-hypster-a-pythonic-framework-for-managing-configurations-to-build-highly-optimized-ai-5ee004dbd6a5?source=post_page-----d2f0ecc88b8f--------------------------------)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[medium.com](https://medium.com/@giladrubin/introducing-hypster-a-pythonic-framework-for-managing-configurations-to-build-highly-optimized-ai-5ee004dbd6a5?source=post_page-----d2f0ecc88b8f--------------------------------)'
- en: Hypster is a new open-source project that I’ve developed to enable a new kind
    of programming paradigm for AI & ML workflows — one that moves beyond single solutions
    towards a “superposition of workflows” or a “hyper-workflow.”
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Hypster 是一个新开源项目，我开发它是为了实现一种新的编程范式，用于 AI 和 ML 工作流 —— 这种范式不仅仅依赖单一的解决方案，而是朝着“工作流的叠加”或“超工作流”的方向发展。
- en: Hypster allows you to define a range of possible configurations and easily switch
    between them for experimentation and optimization. This makes it simple to add
    and customize your own configuration spaces, instantiate them with different settings,
    and ultimately select the optimal configuration for your production environment.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Hypster 允许你定义一系列可能的配置，并轻松在它们之间切换以进行实验和优化。这使得添加和定制你自己的配置空间变得简单，你可以使用不同的设置实例化它们，最终为你的生产环境选择最佳配置。
- en: '**Note:** Hypster is currently under active development. It is not yet recommended
    for production environments.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** Hypster 当前处于活跃开发中。暂时不建议在生产环境中使用。'
- en: Codebase
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码库
- en: '**This is an advanced tutorial.** It assumes you’re already familiar with the
    main components of RAG.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是一个高级教程。** 它假设你已经熟悉 RAG 的主要组件。'
- en: I’ll break down the main parts of the codebase and provide my insights as we
    go.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我会在接下来的过程中逐步讲解代码库的主要部分，并分享我的一些见解。
- en: The full and updated code is in the following repository. Don’t forget to add
    your ⭐️
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 完整且更新的代码在以下代码库中。别忘了添加你的⭐️
- en: '[](https://github.com/gilad-rubin/modular-rag?source=post_page-----d2f0ecc88b8f--------------------------------)
    [## GitHub - gilad-rubin/modular-rag'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/gilad-rubin/modular-rag?source=post_page-----d2f0ecc88b8f--------------------------------)
    [## GitHub - gilad-rubin/modular-rag'
- en: Contribute to gilad-rubin/modular-rag development by creating an account on
    GitHub.
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过在 GitHub 上创建帐户，参与 gilad-rubin/modular-rag 的开发。
- en: github.com](https://github.com/gilad-rubin/modular-rag?source=post_page-----d2f0ecc88b8f--------------------------------)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/gilad-rubin/modular-rag?source=post_page-----d2f0ecc88b8f--------------------------------)'
- en: LLM
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LLM
- en: 'Let’s start with our LLM configuration-space definition:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从我们的 LLM 配置空间定义开始：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code snippet demonstrates a basic example of Hypster and Haystack. Using
    the `@config` decorator, we define a function called `llm_config` that encapsulates
    the configuration space for our LLM. This space includes options for selecting
    different LLM providers (Anthropic or OpenAI) and their corresponding models,
    as well as a parameter for controlling the temperature.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段演示了一个 Hypster 和 Haystack 的基础示例。通过使用 `@config` 装饰器，我们定义了一个名为 `llm_config`
    的函数，封装了我们 LLM 的配置空间。这个空间包括选择不同 LLM 提供者（Anthropic 或 OpenAI）及其相应模型的选项，还有一个控制温度的参数。
- en: Within the `llm_config` function, we use conditional logic to instantiate the
    appropriate Haystack component based on the selected model. This allows us to
    seamlessly switch between different LLMs using a selection without modifying the
    structure of our code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`llm_config`函数中，我们使用条件逻辑来实例化适当的Haystack组件，具体取决于所选的模型。这使得我们能够在不修改代码结构的情况下，轻松地在不同的LLM之间切换。
- en: 'For example, to create an Anthropic generator with the “haiku” model and a
    temperature of 0.5, we can instantiate the configuration as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要创建一个Anthropic生成器，使用“haiku”模型和温度为0.5，我们可以如下实例化配置：
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Indexing pipeline
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 索引管道
- en: Let’s move on to create our indexing pipeline, where we’ll define how to process
    our input files. In our case — PDF files.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建索引管道，在那里我们将定义如何处理输入文件。在我们的例子中——是PDF文件。
- en: '[PRE3]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we’ll add an optional functionality — enriching the document with an LLM
    summary based on the first 1000 characters of the document.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个可选功能——根据文档的前1000个字符通过LLM摘要来增强文档。
- en: This is a nice trick where we use the first `n` characters of a document and
    then, upon splitting the document into chunks, each chunk "inherits" this enriched
    information for its embeddings and response generation.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种很棒的技巧，我们使用文档的前`n`个字符，然后，在将文档分割成块后，每个块都会“继承”这些增强信息，用于其嵌入和响应生成。
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here we can see Haystack’s pipeline in action. If the user selects `enrich_doc_w_llm==True`
    we go on to add components and connections that enable this enrichment. In our
    case: PromptBuilder → LLM → AddLLMMetadata.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到Haystack的管道在运行。如果用户选择`enrich_doc_w_llm==True`，我们继续添加组件和连接，以实现这种增强功能。在我们的例子中：PromptBuilder
    → LLM → AddLLMMetadata。
- en: As you can see — it’s very flexible and we can construct it on-the-fly using
    conditional logic. This is extremely powerful.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的——它非常灵活，我们可以使用条件逻辑动态构建它。这非常强大。
- en: 'Now we can instantiate the configuration object in a couple of ways. For example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以通过几种方式实例化配置对象。例如：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here we get a simple pipeline with a loader and a splitter, with the selected
    splitter configurations
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们得到了一个简单的管道，包含加载器和分割器，以及选定的分割器配置。
- en: '![](../Images/fd78f82144e6a23775f181cf847f5c26.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd78f82144e6a23775f181cf847f5c26.png)'
- en: 'Otherwise, we can select to enrich the document with an LLM summary:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，我们可以选择通过LLM摘要来增强文档：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Notice that Hypster takes on default values that are defined in each parameter,
    so there’s no need to specify all the parameter selections every time. Here’s
    an illustration of the resulting pipeline:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，Hypster采用了在每个参数中定义的默认值，因此无需每次都指定所有的参数选择。下面是生成的管道示例：
- en: '![](../Images/424c4b7586fb3b12cf3330291cca6f42.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/424c4b7586fb3b12cf3330291cca6f42.png)'
- en: 'Notice how we casually inserted the `llm_config` inside our indexing pipeline
    using `hp.nest(“configs/llm_config.py")`. This nesting ability lets us create
    nested configurations in a hierarchical way. We can define parameters values within
    the nested `llm_config` using dot notation. For example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们是如何巧妙地将`llm_config`插入到索引管道中的，使用了`hp.nest(“configs/llm_config.py")`。这种嵌套能力使我们能够以层级方式创建嵌套配置。我们可以使用点符号在嵌套的`llm_config`中定义参数值。例如：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will result in instantiating an indexing pipeline with the LLM enrichment
    task using the OpenAI `gpt-4o-2024–08` model.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致使用OpenAI的`gpt-4o-2024–08`模型实例化一个带有LLM增强任务的索引管道。
- en: So far, we’ve built a compact configuration space for many potential indexing
    pipelines.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经为许多潜在的索引管道构建了一个紧凑的配置空间。
- en: For the sake of brevity, I will skip over the embedding configuration, where
    I incorporated `fastembed` and `jina` embeddings. If you're curious, please check
    out the [full implementation](https://github.com/gilad-rubin/modular-rag).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，我将跳过嵌入配置部分，其中我使用了`fastembed`和`jina`嵌入。如果你感兴趣，请查看[完整实现](https://github.com/gilad-rubin/modular-rag)。
- en: Let’s move on to the retrieval pipeline.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续查看检索管道。
- en: Retrieval
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索
- en: Haystack comes with an in-memory document store for fast experimentation. It
    includes an embedding retriever and a BM25 retriever. In this section — we’ll
    build a configuration space that enables using either a BM25, an embedding retriever
    or both.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Haystack提供了一个内存中的文档存储，便于快速实验。它包括一个嵌入检索器和一个BM25检索器。在这一部分——我们将构建一个配置空间，允许使用BM25、嵌入检索器或两者结合。
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we’re using a couple of “tricks” to make it work. First of all, we use
    `hp.multi_select` which allows us to select multiple options from the options.
    Second, we add “helper” components from the start and end of the pipeline (PassThroughText,
    PassThroughDocuments) to make sure that any selection will start with `query`and
    end with `retrieved_documents` and the rest is relatively straightforward.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了一些“技巧”来使它工作。首先，我们使用`hp.multi_select`，它允许我们从选项中选择多个选项。其次，我们在管道的开始和结束部分添加了“助手”组件（PassThroughText，PassThroughDocuments），以确保任何选择都会以`query`开始，以`retrieved_documents`结束，其余部分相对简单。
- en: 'A couple of example instantiations would be:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一些示例实例化的代码如下：
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/b0c0e300e43b6f5eb2180093b5aec6f5.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0c0e300e43b6f5eb2180093b5aec6f5.png)'
- en: Image by the author
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'And:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 并且：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/7a2b2312dbc0d40475e14fe896db9c3c.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7a2b2312dbc0d40475e14fe896db9c3c.png)'
- en: In the full implementation, I’ve added a Qdrant vector store, an optional reranking
    step, and a final generation pipeline. These are all meant as examples to show
    the possibilities of adding and customizing the different components in these
    pipelines and you can find them as well in the full repository.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在完整的实现中，我添加了一个Qdrant向量存储，一个可选的重排序步骤，以及一个最终的生成管道。这些都作为示例，展示了如何在这些管道中添加和自定义不同的组件，你也可以在完整的代码库中找到它们。
- en: 'Eventually, we have the main config that binds all of these settings together:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们得到了一个主配置，它将所有这些设置绑定在一起：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'from here we can define pretty much anything we want inside any of the sub-components.
    For example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，我们几乎可以在任何子组件内部定义任何我们想要的内容。例如：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And we’ve instantiated a concrete set of working pipelines:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经实例化了一组具体的工作管道：
- en: '![](../Images/e6833095970f9a1928cfc184f1db1d83.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e6833095970f9a1928cfc184f1db1d83.png)'
- en: 'We can now execute them sequentially:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以顺序执行它们：
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Great Response! 👏
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒的反馈！👏
- en: Summary
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: For some of you, this might be a lot to take in at once. You might be new to
    Haystack, and this is probably your first encounter with Hypster. That’s perfectly
    understandable!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你们中的一些人来说，这可能一下子接受的信息量有点大。你可能是第一次接触Haystack，可能也是第一次遇到Hypster。这完全可以理解！
- en: The code is complex, but I believe that this comes from the inherent complexity
    of building a modular system like this. In addition, defining the exact routings
    of a workflow is a visual task and it’s sometimes harder to read via text.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 代码很复杂，但我相信这来自于构建这样一个模块化系统本身的复杂性。此外，定义工作流的精确路由是一个视觉任务，有时候通过文本来阅读它会更困难。
- en: That being said, this is the first time I’ve seen a fully configurable, modular
    RAG system. It’s exciting for me, and I hope for you as well!
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，这是我第一次看到一个完全可配置、模块化的RAG系统。对我来说，这很令人兴奋，我也希望对你来说同样如此！
- en: I believe this represents a fundamentally different approach to AI/ML projects.
    Instead of building a codebase for a single solution, we’re building a codebase
    that accommodates multiple potential workflows — a “superposition of workflows”
    or a “hyper-workflow.”
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信这代表了一种根本不同的AI/ML项目方法。我们不是为单一的解决方案构建代码库，而是构建一个可以容纳多种潜在工作流的代码库——一种“工作流叠加”或“超工作流”。
- en: 'Once you get into this kind of programming — you immediately unlock incredible
    benefits:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你进入这种编程方式——你将立即解锁难以置信的好处：
- en: '**Hyperparameter Optimization** is easily available (more on that in future
    posts)'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**超参数优化** 很容易实现（关于这一点将在未来的文章中详细讨论）'
- en: '**Utilizing different configurations for diverse scenarios**. For example,
    queries of type X can use a RAG system with a high weight assigned to the BM25
    retriever and queries of type Y focus mainly on dense embedding techniques.'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**为不同场景利用不同配置**。例如，X类型的查询可以使用一个将BM25检索器权重设置得很高的RAG系统，而Y类型的查询则主要聚焦于密集嵌入技术。'
- en: '**Agentic Tool Use -** It’s relatively straightforward to wrap this as a tool
    that can be instantiated and used in different scenarios, which means that… Yes!
    We can turn this intoa tool that an AI Agent uses. Think of the possibilities
    there.'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**工具性使用 -** 将其封装成一个可以在不同场景下实例化和使用的工具是相对简单的，这意味着……是的！我们可以将其变成一个AI代理使用的工具。想象一下那里的可能性。'
- en: '**A/B testing in Production -** we can deploy this RAG hyperspace to production
    and perform A/B testing just by specifying configurations for each individual
    API request.'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生产环境中的A/B测试 -** 我们可以将这个RAG超空间部署到生产环境中，并仅通过为每个单独的API请求指定配置来执行A/B测试。'
- en: '**Outro**'
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结束语**'
- en: So, how was it for you?
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你觉得怎么样？
- en: Making this knowledge accessible is important to me, so your inputs are valuable.
    If you have any questions or comments on this implementation or the overall approach,
    please feel free to add your comments to this article.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 使这些知识变得易于获取对我来说非常重要，因此你的意见对我很有价值。如果你对这个实现或整体方法有任何问题或意见，欢迎随时在本文中添加你的评论。
- en: I also offer consultation and freelance services to companies looking for a
    structured, common-sense approach to solving business problems using state-of-the-art
    Generative AI and Machine Learning tools.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我还为需要使用最先进的生成性人工智能和机器学习工具解决商业问题、寻找结构化且符合常理方法的公司提供咨询和自由职业服务。
- en: Feel free to contact me via [**E-Mail**](mailto:me@giladrubin.com), [**LinkedIn**](https://www.linkedin.com/in/gilad-rubin-2b72b3218/)
    or my [**Website**](http://www.giladrubin.com) **🌟**
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 随时可以通过[**电子邮件**](mailto:me@giladrubin.com)、[**LinkedIn**](https://www.linkedin.com/in/gilad-rubin-2b72b3218/)或我的[**个人网站**](http://www.giladrubin.com)联系我
    **🌟**
- en: Resources
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: 'Gao, Y., Xiong, Y., Wang, M., & Wang, H. (2024). [Modular RAG: Transforming
    RAG Systems into LEGO-like Reconfigurable Frameworks](https://arxiv.org/abs/2407.21059).
    arXiv preprint arXiv:2407.21059.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Gao, Y., Xiong, Y., Wang, M., & Wang, H. (2024). [Modular RAG: 将RAG系统转化为类似乐高的可重配置框架](https://arxiv.org/abs/2407.21059)。arXiv预印本
    arXiv:2407.21059。'
- en: '**Further Reading**'
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**进一步阅读**'
- en: '**Haystack’s** [Documentation](https://docs.haystack.deepset.ai/docs/intro)
    | [DeepLearning.ai Course](https://www.deeplearning.ai/short-courses/building-ai-applications-with-haystack/)
    | [Github Repo](https://github.com/deepset-ai/haystack)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Haystack**的[文档](https://docs.haystack.deepset.ai/docs/intro) | [DeepLearning.ai课程](https://www.deeplearning.ai/short-courses/building-ai-applications-with-haystack/)
    | [Github仓库](https://github.com/deepset-ai/haystack)'
- en: '**Hypster’s** [Introduction](https://medium.com/@giladrubin/introducing-hypster-a-pythonic-framework-for-managing-configurations-to-build-highly-optimized-ai-5ee004dbd6a5)
    | [Documentation](https://gilad-rubin.gitbook.io/hypster) | [Github Repo](https://github.com/gilad-rubin/hypster)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hypster**的[介绍](https://medium.com/@giladrubin/introducing-hypster-a-pythonic-framework-for-managing-configurations-to-build-highly-optimized-ai-5ee004dbd6a5)
    | [文档](https://gilad-rubin.gitbook.io/hypster) | [Github仓库](https://github.com/gilad-rubin/hypster)'
- en: '**Modular-RAG** [Github Repo](https://github.com/gilad-rubin/modular-rag)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Modular-RAG** [Github仓库](https://github.com/gilad-rubin/modular-rag)'
- en: Notes
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备注
- en: All images without a caption were created by the author
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有没有说明文字的图片均由作者创作
- en: I’m not affiliated with Deepset/Haystack in any way.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我与Deepset/Haystack没有任何关联。
