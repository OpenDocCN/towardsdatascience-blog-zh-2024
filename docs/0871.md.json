["```py\n# Create node lookup variables\nnode_lookup = {0: 'Confounder',\n               1: 'Treatment',\n               2: 'Outcome'                                                                                       \n }\n\ntotal_nodes = len(node_lookup)\n\n# Create adjacency matrix - this is the base for our graph\ngraph_actual = np.zeros((total_nodes, total_nodes))\n\n# Create graph using expert domain knowledge\ngraph_actual[0, 1] = 1.0 # Confounder -> Treatment\ngraph_actual[0, 2] = 1.0 # Confounder -> Outcome\ngraph_actual[1, 2] = 1.0 # Treatment -> Outcome\n\nplot_graph(input_graph=graph_actual, node_lookup=node_lookup)\n```", "```py\nnp.random.seed(123)\n\n# Create dataframe with a confounder, treatment and outcome\ndf = pd.DataFrame(columns=['Confounder', 'Treatment', 'Outcome'])\ndf['Confounder'] = np.random.normal(loc=100, scale=25, size=1000)\ndf['Treatment'] = np.random.normal(loc=50, scale=10, size=1000) + 0.50 * df['Confounder']\ndf['Outcome'] = 0.25 * df['Confounder'] + 0.75 * df['Treatment'] + np.random.normal(loc=0, scale=5, size=1000)\n\nsns.pairplot(df, corner=True)\n```", "```py\n# Set target and features\ny = df['Outcome']\nX = df[['Confounder', 'Treatment']]\n\n# Train model \nmodel = RidgeCV()\nmodel = model.fit(X, y)\n\n# Extract the treatment coefficient\nate_lr = round(model.coef_[1], 2)\n\nprint(f'The average treatment effect using Linear Regression is: {ate_lr}')\n```", "```py\n# Set treatment, outcome and confounder samples\ntreatment = df['Treatment'].to_numpy().reshape(-1,1)\noutcome = df['Outcome'].to_numpy().reshape(-1,1)\nconfounder = df['Confounder'].to_numpy().reshape(-1,1)\n\n# Train treatment model and calculate residuals\ntreatment_model = RidgeCV()\ntreatment_model = treatment_model.fit(confounder, treatment)\ntreatment_pred = treatment_model.predict(confounder)\ntreatment_residuals = treatment - treatment_pred\n\n# Train outcome model and calculate residuals\noutcome_model = RidgeCV()\noutcome_model = outcome_model.fit(confounder, outcome)\noutcome_pred = outcome_model.predict(confounder)\noutcome_residuals = outcome - outcome_pred\n\n# Train residual model and calculate average treatment effect\nfinal_model = RidgeCV()\nfinal_model = final_model.fit(treatment_residuals, outcome_residuals)\nate_dml = round(final_model.coef_[0][0], 2)\n\nprint(f'The average treatment effect is: {ate_fwl}')\n```", "```py\n# Train DML model\ndml = LinearDML(discrete_treatment=False)\ndml.fit(df['Outcome'].to_numpy().reshape(-1,1), T=df['Treatment'].to_numpy().reshape(-1,1), X=None, W=df['Confounder'].to_numpy().reshape(-1,1))\n\n# Calculate average treatment effect\nate_dml = round(dml.ate()[0], 2)\n\nprint(f'The average treatment effect using the DML is: {ate_dml}')\n```", "```py\nnp.random.seed(123)\n\n# Set number of observations\nn=100000\n\n# Set number of features\np=10\n\n# Create features\nX = np.random.uniform(size=n * p).reshape((n, -1))\n\n# Nuisance parameters\nb = (\n    np.sin(np.pi * X[:, 0] * X[:, 1])\n    + 2 * (X[:, 2] - 0.5) ** 2\n    + X[:, 3]\n    + 0.5 * X[:, 4]\n    + X[:, 5] * X[:, 6]\n    + X[:, 7] ** 3\n    + np.sin(np.pi * X[:, 8] * X[:, 9])\n)\n\n# Create binary treatment\nT = np.random.binomial(1, expit(b))\n\n# Set treatment effect\ntau = 0.75\n\n# Calculate outcome\ny = b + T * tau + np.random.normal(size=n)\n```", "```py\n# Append features and treatment\nX_T = np.append(X, T.reshape(-1, 1), axis=1)\n\n# Train linear regression model \nmodel = RidgeCV()\nmodel = model.fit(X_T, y)\ny_pred = model.predict(X_T)\n\n# Extract the treatment coefficient\nate_lr = round(model.coef_[-1], 2)\n\nprint(f'The average treatment effect using Linear Regression is: {ate_lr}')\n```", "```py\nnp.random.seed(123)\n\n# Train DML model using flexible stage 1 models\ndml = LinearDML(model_y=LGBMRegressor(), model_t=LGBMClassifier(), discrete_treatment=True)\ndml.fit(y, T=T, X=None, W=X)\n\n# Calculate average treatment effect\nate_dml = round(dml.ate(), 2)\n\nprint(f'The average treatment effect using the DML is: {ate_dml}')\n```", "```py\n# Plot comparison of results\ncategories = ['Ground truth', 'DML', 'Linear Regression']\nsns.barplot(x=categories, y=[tau, ate_dml, ate_lr])\nplt.ylabel('ATE')\nplt.title('Average Treatment Effect comparison')\nplt.show()\n```"]