["```py\nimport numpy as np\nimport pandas as pd\nimport xarray as xr\nimport geopandas as gpd\nimport random\nimport math\n\nimport matplotlib.pyplot as plt\nfrom shapely import Point\n\nimport cartopy\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nrecent = pd.read_csv('./LA Crimes/Crime_Data_from_2020_to_Present.csv')[['LAT', 'LON']]\nold = pd.read_csv('./LA Crimes/Crime_Data_from_2010_to_2019.csv')[['LAT', 'LON']]\ndf = pd.concat([old, recent])\ndf = df[(df.LON!=0) & (df.LAT!=0)] #zeros are Nans according to meta info\n```", "```py\ndef coords(x,y, base=0.01):\n x, y = round(base * math.ceil(abs(x)/base),2), round(base * math.ceil(y/base),2)\n return (y,x)\n\ndef NN(data, LAT, LON):\n  array = np.zeros((LAT.shape[0], LON.shape[0]),dtype=int)\n  onGrid = data.apply(lambda row: coords(row.LAT, row.LON, 0.01), axis = 1).value_counts()\n  for coor in onGrid.index:\n    lon_idx, lat_idx = np.where(LON==coor[0]), np.where(LAT==coor[1])\n    array[lat_idx,lon_idx] = int(onGrid[coor])\n  return array\n```", "```py\nLAT, LON = np.arange(round(df.LAT.min()), round(df.LAT.max()), 0.01).astype(np.float32), np.arange(round(df.LON.min()), round(df.LON.max()), 0.01).astype(np.float32)\ncrimes = NN(df, LAT, LON)\nds = xr.Dataset(\n    {'Crimes': (['lat', 'lon'], crimes)},\n    coords={'lat': LAT, 'lon': LON})\n\nfig, ax = plt.subplots(subplot_kw=dict(projection=ccrs.PlateCarree()), figsize=(16, 9))\n\nds.Crimes.plot(ax=ax, cmap='Reds')\nax.set_extent([-118.9, -118.1, 33.6, 34.5 ], crs=ccrs.PlateCarree())\nax.gridlines(draw_labels=True,linewidth=2, color='black', alpha=0.5, linestyle='--')\nax.add_feature(cfeature.BORDERS, edgecolor='black', linewidth=1)\n\nax.add_feature(cfeature.COASTLINE, edgecolor='black', linewidth=1)\nax.add_feature(cartopy.feature.RIVERS, edgecolor='blue', linewidth=0.5)\nstates_provinces = cfeature.NaturalEarthFeature(\n            category='cultural',  name='admin_1_states_provinces',\n            scale='10m', facecolor='none')\n\nplt.show()\n```", "```py\nlayer = pdk.Layer(\n    'HexagonLayer',\n    df,\n    get_position=['LON', 'LAT'],\n    radius=500, #bin radius\n    auto_highlight=True,\n    elevation_scale=50, #scale factor for bins (the greater - the higher)\n    elevation_range=[0, 3000],\n    pickable=True,\n    extruded=True,#cell elevation\n    )\n```", "```py\nview_state = pdk.ViewState(\n    longitude=-118.3,\n    latitude=34.4,\n    zoom=8,\n    min_zoom=6,\n    max_zoom=15,\n    bearing=-20,#left/right angle\n    pitch=20, #up/down angle\n    )\n```", "```py\nlayer = pdk.Layer(\n    'ColumnLayer',\n    ds.to_dataframe().reset_index(),\n    get_position=['lon', 'lat'],\n    get_elevation='Crimes',\n    elevation_scale=10,\n    radius=200,\n    get_fill_color=['Crimes', 220],\n    pickable=True,\n    extruded=True,\n    )\n```", "```py\nlayer = pdk.Layer(\n    'ColumnLayer',\n    df[:15000],\n    get_position=['LON', 'LAT'],\n    auto_highlight=True,\n    get_radius=200,          # Radius is given in meters\n    get_fill_color=[180, 0, 200, 140],  # Set an RGBA value for fill\n    pickable=True)\n```", "```py\nr = pdk.Deck(layers=[layer],\n             initial_view_state=view_state,\n             map_style=pdk.map_styles.LIGHT, # ‘light’, ‘dark’, ‘road’, ‘satellite’, ‘dark_no_labels’, and ‘light_no_labels\n             )\n```", "```py\nr = pdk.Deck(layers=[layer],\n             initial_view_state=view_state,\n                  \"html\": \"<b>Number of crimes:</b> {elevationValue}\",\n                  \"style\": {\n                        \"backgroundColor\": \"yellow\",\n                        \"color\": \"black\"\n                  }\n                },\n             )\n```", "```py\nfrom ipywidgets import HTML\n\ntext = HTML(value='Move the viewpoint')\n\ndef filter_by_bbox(row, west_lng, east_lng, north_lat, south_lat):\n    return west_lng < row['lng'] < east_lng and south_lat < row['lat'] < north_lat\n\ndef filter_by_viewport(widget_instance, payload):\n    west_lng, north_lat = payload['data']['nw']\n    east_lng, south_lat = payload['data']['se']\n    filtered_df = df[df.apply(lambda row: filter_by_bbox(row, west_lng, east_lng, north_lat, south_lat), axis=1)]\n\nr.deck_widget.on_click(filter_by_viewport)\n```"]