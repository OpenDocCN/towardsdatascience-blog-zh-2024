["```py\nimport pandas as pd\n\n# Loading and preprocessing steps\ndf = pd.read_csv('../input/hourly-energy-consumption/PJME_hourly.csv')\ndf = df.set_index('Datetime')\ndf.index = pd.to_datetime(df.index)\n\ndf.describe()\n```", "```py\nimport matplotlib.pyplot as plt\n\n# Set pyplot style\nplt.style.use(\"seaborn\")\n\n# Plot\ndf['PJME_MW'].plot(title='PJME - Time Plot', figsize=(10,6))\nplt.ylabel('Consumption [MW]')\nplt.xlabel('Date')\n```", "```py\n# Defining required fields\ndf['year'] = [x for x in df.index.year]\ndf['month'] = [x for x in df.index.month]\ndf = df.reset_index()\ndf['week'] = df['Datetime'].apply(lambda x:x.week)\ndf = df.set_index('Datetime')\ndf['hour'] = [x for x in df.index.hour]\ndf['day'] = [x for x in df.index.day_of_week]\ndf['day_str'] = [x.strftime('%a') for x in df.index]\ndf['year_month'] = [str(x.year) + '_' + str(x.month) for x in df.index]\n```", "```py\nimport numpy as np\n\n# Defining colors palette\nnp.random.seed(42)\ndf_plot = df[['month', 'year', 'PJME_MW']].dropna().groupby(['month', 'year']).mean()[['PJME_MW']].reset_index()\nyears = df_plot['year'].unique()\ncolors = np.random.choice(list(mpl.colors.XKCD_COLORS.keys()), len(years), replace=False)\n\n# Plot\nplt.figure(figsize=(16,12))\nfor i, y in enumerate(years):\n    if i > 0:        \n        plt.plot('month', 'PJME_MW', data=df_plot[df_plot['year'] == y], color=colors[i], label=y)\n        if y == 2018:\n            plt.text(df_plot.loc[df_plot.year==y, :].shape[0]+0.3, df_plot.loc[df_plot.year==y, 'PJME_MW'][-1:].values[0], y, fontsize=12, color=colors[i])\n        else:\n            plt.text(df_plot.loc[df_plot.year==y, :].shape[0]+0.1, df_plot.loc[df_plot.year==y, 'PJME_MW'][-1:].values[0], y, fontsize=12, color=colors[i])\n\n# Setting labels\nplt.gca().set(ylabel= 'PJME_MW', xlabel = 'Month')\nplt.yticks(fontsize=12, alpha=.7)\nplt.title(\"Seasonal Plot - Monthly Consumption\", fontsize=20)\nplt.ylabel('Consumption [MW]')\nplt.xlabel('Month')\nplt.show()\n```", "```py\n# Defining colors palette\nnp.random.seed(42)\ndf_plot = df[['month', 'day_str', 'PJME_MW', 'day']].dropna().groupby(['day_str', 'month', 'day']).mean()[['PJME_MW']].reset_index()\ndf_plot = df_plot.sort_values(by='day', ascending=True)\n\nmonths = df_plot['month'].unique()\ncolors = np.random.choice(list(mpl.colors.XKCD_COLORS.keys()), len(months), replace=False)\n\n# Plot\nplt.figure(figsize=(16,12))\nfor i, y in enumerate(months):\n    if i > 0:        \n        plt.plot('day_str', 'PJME_MW', data=df_plot[df_plot['month'] == y], color=colors[i], label=y)\n        if y == 2018:\n            plt.text(df_plot.loc[df_plot.month==y, :].shape[0]-.9, df_plot.loc[df_plot.month==y, 'PJME_MW'][-1:].values[0], y, fontsize=12, color=colors[i])\n        else:\n            plt.text(df_plot.loc[df_plot.month==y, :].shape[0]-.9, df_plot.loc[df_plot.month==y, 'PJME_MW'][-1:].values[0], y, fontsize=12, color=colors[i])\n\n# Setting Labels\nplt.gca().set(ylabel= 'PJME_MW', xlabel = 'Month')\nplt.yticks(fontsize=12, alpha=.7)\nplt.title(\"Seasonal Plot - Weekly Consumption\", fontsize=20)\nplt.ylabel('Consumption [MW]')\nplt.xlabel('Month')\nplt.show()\n```", "```py\nimport seaborn as sns\n\n# Defining the dataframe\ndf_plot = df[['hour', 'day_str', 'PJME_MW']].dropna().groupby(['hour', 'day_str']).mean()[['PJME_MW']].reset_index()\n\n# Plot using Seaborn\nplt.figure(figsize=(10,8))\nsns.lineplot(data = df_plot, x='hour', y='PJME_MW', hue='day_str', legend=True)\nplt.locator_params(axis='x', nbins=24)\nplt.title(\"Seasonal Plot - Daily Consumption\", fontsize=20)\nplt.ylabel('Consumption [MW]')\nplt.xlabel('Hour')\nplt.legend()\n```", "```py\nplt.figure(figsize=(8,5))\nsns.boxplot(data=df, x='PJME_MW')\nplt.xlabel('Consumption [MW]')\nplt.title(f'Boxplot - Consumption Distribution');\n```", "```py\ndf['year'] = [x for x in df.index.year]\ndf['month'] = [x for x in df.index.month]\ndf['year_month'] = [str(x.year) + '_' + str(x.month) for x in df.index]\n\ndf_plot = df[df['year'] >= 2017].reset_index().sort_values(by='Datetime').set_index('Datetime')\nplt.title(f'Boxplot Year Month Distribution');\nplt.xticks(rotation=90)\nplt.xlabel('Year Month')\nplt.ylabel('MW')\n\nsns.boxplot(x='year_month', y='PJME_MW', data=df_plot)\nplt.ylabel('Consumption [MW]')\nplt.xlabel('Year Month')\n```", "```py\ndf_plot = df[['day_str', 'day', 'PJME_MW']].sort_values(by='day')\nplt.title(f'Boxplot Day Distribution')\nplt.xlabel('Day of week')\nplt.ylabel('MW')\nsns.boxplot(x='day_str', y='PJME_MW', data=df_plot)\nplt.ylabel('Consumption [MW]')\nplt.xlabel('Day of week')\n```", "```py\nplt.title(f'Boxplot Hour Distribution');\nplt.xlabel('Hour')\nplt.ylabel('MW')\nsns.boxplot(x='hour', y='PJME_MW', data=df)\nplt.ylabel('Consumption [MW]')\nplt.xlabel('Hour')\n```", "```py\ndf_plot = df[df['year'] == 2017].reset_index()\ndf_plot = df_plot.drop_duplicates(subset=['Datetime']).sort_values(by='Datetime')\ndf_plot = df_plot.set_index('Datetime')\ndf_plot['PJME_MW - Multiplicative Decompose'] = df_plot['PJME_MW']\ndf_plot['PJME_MW - Additive Decompose'] = df_plot['PJME_MW']\n\n# Additive Decomposition\nresult_add = seasonal_decompose(df_plot['PJME_MW - Additive Decompose'], model='additive', period=24*7)\n\n# Multiplicative Decomposition \nresult_mul = seasonal_decompose(df_plot['PJME_MW - Multiplicative Decompose'], model='multiplicative', period=24*7)\n\n# Plot\nresult_add.plot().suptitle('', fontsize=22)\nplt.xticks(rotation=45)\nresult_mul.plot().suptitle('', fontsize=22)\nplt.xticks(rotation=45)\nplt.show()\n```", "```py\ndf_plot = df[(df['year'] == 2017)].reset_index()\ndf_plot = df_plot[df_plot['month'] == 1]\ndf_plot['PJME_MW - Multiplicative Decompose'] = df_plot['PJME_MW']\ndf_plot['PJME_MW - Additive Decompose'] = df_plot['PJME_MW']\n\ndf_plot = df_plot.drop_duplicates(subset=['Datetime']).sort_values(by='Datetime')\ndf_plot = df_plot.set_index('Datetime')\n\n# Additive Decomposition\nresult_add = seasonal_decompose(df_plot['PJME_MW - Additive Decompose'], model='additive', period=24*7)\n\n# Multiplicative Decomposition \nresult_mul = seasonal_decompose(df_plot['PJME_MW - Multiplicative Decompose'], model='multiplicative', period=24*7)\n\n# Plot\nresult_add.plot().suptitle('', fontsize=22)\nplt.xticks(rotation=45)\nresult_mul.plot().suptitle('', fontsize=22)\nplt.xticks(rotation=45)\nplt.show()\n```", "```py\nfrom statsmodels.graphics.tsaplots import plot_pacf\n\nactual = df['PJME_MW']\nhours = range(0, 24, 4)\n\nfor hour in hours:\n    plot_pacf(actual[actual.index.hour == hour].diff().dropna(), lags=30, alpha=0.01)\n    plt.title(f'PACF - h = {hour}')\n    plt.ylabel('Correlation')\n    plt.xlabel('Lags')\n    plt.show()\n```"]