["```py\nrustup target add x86_64-unknown-linux-gnu\ncargo check --target x86_64-unknown-linux-gnu\n```", "```py\nrustc --print target-list\n```", "```py\nrustup target add wasm32-wasip1\ncargo install wasmtime-cli\n```", "```py\ncargo new hello_wasi\ncd hello_wasi\n```", "```py\nfn main() {\n    #[cfg(not(target_arch = \"wasm32\"))]\n    println!(\"Hello, world!\");\n    #[cfg(target_arch = \"wasm32\")]\n    println!(\"Hello, WebAssembly!\");\n}\n```", "```py\n[target.wasm32-wasip1]\nrunner = \"wasmtime run --dir .\"\n```", "```py\ncargo run --target wasm32-wasip1\n```", "```py\nfn main() {\n    #[cfg(not(target_arch = \"wasm32\"))]\n    println!(\"Hello, world!\");\n    #[cfg(target_arch = \"wasm32\")]\n    println!(\"Hello, WebAssembly!\");\n}\n```", "```py\nfn main() {\n    println!(\"Hello, WebAssembly!\");\n}\n```", "```py\n#[cfg(not(target_arch = \"wasm32\"))]\n...\n#[cfg(target_arch = \"wasm32\")]\n...\n```", "```py\n[target.'cfg(not(target_arch = \"wasm32\"))'.dev-dependencies]\ncriterion = { version = \"0.5.1\", features = [\"rayon\"] }\n```", "```py\n[target.wasm32-wasip1]\nrunner = \"wasmtime run --dir .\"\n```", "```py\n#[test]\nfn insert_255u8() {\n    let range_set_blaze = RangeSetBlaze::<u8>::from_iter([255]);\n    assert!(range_set_blaze.to_string() == \"255..=255\");\n}\n```", "```py\ncargo test --target wasm32-wasip1\n```", "```py\n error: Rayon cannot be used when targeting wasi32\\. Try disabling default features.\n  --> C:\\Users\\carlk\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\criterion-0.5.1\\src\\lib.rs:31:1\n   |\n31 | compile_error!(\"Rayon cannot be used when targeting wasi32\\. Try disabling default features.\");\n```", "```py\n[features]\ndefault = [\"rayon\", \"plotters\", \"cargo_bench_support\"]\nrayon = [\"dep:rayon\"]\nplotters = [\"dep:plotters\"]\nhtml_reports = []\ncargo_bench_support = []\n\n[dependencies]\n#...\n# Optional dependencies\nrayon = { version = \"1.3\", optional = true }\nplotters = { version = \"^0.3.1\", optional = true, default-features = false, features = [\n    \"svg_backend\",\n    \"area_series\",\n    \"line_series\",\n] }\n```", "```py\ncargo check --no-default-features --features html_reports\n```", "```py\n#[cfg(feature = \"html_reports\")]\nSOME_CODE_ITEM\n```", "```py\n[dev-dependencies]\ncriterion = { version = \"0.5.1\", features = [\"html_reports\"] }\n```", "```py\n[dev-dependencies]\ncriterion = { version = \"0.5.1\", features = [\n        \"html_reports\",\n        \"plotters\",\n        \"cargo_bench_support\"],\n      default-features = false }\n```", "```py\n[target.'cfg(not(target_arch = \"wasm32\"))'.dev-dependencies]\ncriterion = { version = \"0.5.1\", features = [\"rayon\"] }\n```", "```py\n#[test]\nfn test_demo_i32_len() {\n    assert_eq!(demo_i32_len(i32::MIN..=i32::MAX), u32::MAX as usize + 1);\n                                                  ^^^^^^^^^^^^^^^^^^^^^ attempt to compute \n`usize::MAX + 1_usize`, which would overflow\n}\n```", "```py\ntest_wasip1:\n      name: Test WASI P1\n      runs-on: ubuntu-latest\n      steps:\n        - name: Checkout\n          uses: actions/checkout@v4\n        - name: Set up Rust\n          uses: dtolnay/rust-toolchain@master\n          with:\n            toolchain: stable\n            targets: wasm32-wasip1\n        - name: Install Wasmtime\n          run: |\n            curl https://wasmtime.dev/install.sh -sSf | bash\n            echo \"${HOME}/.wasmtime/bin\" >> $GITHUB_PATH\n        - name: Run WASI tests\n          run: cargo test --verbose --target wasm32-wasip1\n```", "```py\nuse std::net::TcpStream;\n\nfn main() {\n    match TcpStream::connect(\"crates.io:80\") {\n        Ok(_) => println!(\"Successfully connected.\"),\n        Err(e) => println!(\"Failed to connect: {e}\"),\n    }\n}\n```"]