- en: 'GraphMuse: A Python Library for Symbolic Music Graph Processing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GraphMuse：一个用于符号音乐图形处理的Python库
- en: 原文：[https://towardsdatascience.com/graphmuse-a-python-library-for-symbolic-music-graph-processing-40dbd9baf319?source=collection_archive---------3-----------------------#2024-10-17](https://towardsdatascience.com/graphmuse-a-python-library-for-symbolic-music-graph-processing-40dbd9baf319?source=collection_archive---------3-----------------------#2024-10-17)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/graphmuse-a-python-library-for-symbolic-music-graph-processing-40dbd9baf319?source=collection_archive---------3-----------------------#2024-10-17](https://towardsdatascience.com/graphmuse-a-python-library-for-symbolic-music-graph-processing-40dbd9baf319?source=collection_archive---------3-----------------------#2024-10-17)
- en: Yes, music and graphs do mix!
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 是的，音乐和图形确实能结合！
- en: '[](https://manoskary.medium.com/?source=post_page---byline--40dbd9baf319--------------------------------)[![Emmanouil
    Karystinaios](../Images/120d889f330aa7b433a0668a1224e1c8.png)](https://manoskary.medium.com/?source=post_page---byline--40dbd9baf319--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--40dbd9baf319--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--40dbd9baf319--------------------------------)
    [Emmanouil Karystinaios](https://manoskary.medium.com/?source=post_page---byline--40dbd9baf319--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://manoskary.medium.com/?source=post_page---byline--40dbd9baf319--------------------------------)[![Emmanouil
    Karystinaios](../Images/120d889f330aa7b433a0668a1224e1c8.png)](https://manoskary.medium.com/?source=post_page---byline--40dbd9baf319--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--40dbd9baf319--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--40dbd9baf319--------------------------------)
    [Emmanouil Karystinaios](https://manoskary.medium.com/?source=post_page---byline--40dbd9baf319--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--40dbd9baf319--------------------------------)
    ·11 min read·Oct 17, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--40dbd9baf319--------------------------------)
    ·11分钟阅读·2024年10月17日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/1bdf8b9613e922ca5924dc48c06da0bd.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1bdf8b9613e922ca5924dc48c06da0bd.png)'
- en: Image generated with Dall-E 3
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由Dall-E 3生成
- en: 'In this post, we take a look at one of my latest papers and open-source software:
    the GraphMuse Python library.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将介绍我最近的一篇论文和开源软件：GraphMuse Python库。
- en: But before we dive in, let me introduce you to some basics of symbolic music
    processing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但在深入讨论之前，让我向你介绍一些符号音乐处理的基础知识。
- en: '**And the story goes…**'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**故事继续...**'
- en: Symbolic music processing mainly refers to extracting information from musical
    scores. The term symbolic refers to the symbols present in any form of musical
    score or notation. A musical score can contain a variety of elements other than
    notes. Such elements may include time signature, key signature, articulation markings,
    dynamic markings, and many others. Music scores can exist in many formats such
    as MIDI, MusicXML, MEI, Kern, ABC, and others.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 符号音乐处理主要是指从乐谱中提取信息。符号一词指的是任何形式的乐谱或记谱法中所包含的符号。乐谱可以包含多种元素，除了音符外，还可能包括拍号、调号、演奏标记、力度标记等。乐谱可以存在于多种格式中，如MIDI、MusicXML、MEI、Kern、ABC等。
- en: In recent years, Graph Neural Networks (GNNs) have become increasingly popular
    and have seen success in many domains from biology networks to recommender systems
    to music analysis. In the music analysis field, GNNs have been used to solve tasks
    such as harmonic analysis, phrase segmentation, and voice separation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，图神经网络（GNNs）变得越来越流行，并在许多领域取得了成功，从生物网络到推荐系统，再到音乐分析。在音乐分析领域，GNNs已被用于解决和声分析、乐句分割和声部分离等任务。
- en: 'The idea is simple: every note in a score is a vertex in the graph and edges
    are defined by the temporal relations between the notes as shown in the figure
    below.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法很简单：乐谱中的每个音符是图中的一个顶点，边则由音符之间的时间关系定义，如下图所示。
- en: '![](../Images/48885482c9c9d223613524bad345738a.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48885482c9c9d223613524bad345738a.png)'
- en: 'The edges are separated into 4 categories:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些边分为4类：
- en: Notes that start at the same time are connected by the “onset” edge (blue)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同时开始的音符通过“起始”边（蓝色）连接
- en: Notes that start of at the end of some other note are connected by the “consecutive”
    edge (red)
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在另一个音符的开始或结束处开始的音符通过“连续”边（红色）连接
- en: Notes that start in between the start and end of another note are connected
    the “during” edge (green)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在另一个音符的开始和结束之间开始的音符通过“期间”边（绿色）连接
- en: Finally, whenever there is silence all last note endings are connected to the
    first upcoming notes by the “silent” edge (yellow)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，每当有静音时，所有的最后音符结尾都会通过“静音”边（黄色）连接到接下来的第一个音符。
- en: This minimal modeling of the graph guarantees that a score will be continuously
    connected from start to finish without any disconnected subgraphs.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种最小化的图建模保证了乐谱从头到尾始终连通，不会出现任何断开的子图。
- en: What is GraphMuse
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 GraphMuse
- en: GraphMuse is a Python Library for training and applying deep graph models for
    music analysis on musical scores.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: GraphMuse 是一个用于训练和应用深度图模型进行音乐分析的 Python 库，专门针对乐谱。
- en: GraphMuse contains loaders, models, and utils for symbolic music processing
    with GNNs. It is built on top of *PyTorch* and *PyTorch Geometric* for more flexibility
    and interoperability.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: GraphMuse 包含用于符号音乐处理的加载器、模型和工具，基于图神经网络（GNNs）。它建立在 *PyTorch* 和 *PyTorch Geometric*
    之上，提供更多的灵活性和互操作性。
- en: PyTorch is an open-source machine learning library that enables efficient deep
    learning model building and supports GPU acceleration. *PyTorch Geometric* is
    a library built upon PyTorch to easily write and train Graph Neural Networks (GNNs)
    for a wide range of applications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: PyTorch 是一个开源的机器学习库，可以高效地构建深度学习模型，并支持 GPU 加速。*PyTorch Geometric* 是一个基于 PyTorch
    的库，旨在轻松编写和训练图神经网络（GNNs），并应用于广泛的领域。
- en: Finally, GraphMuse provides functionalities to transform musical scores into
    graphs. Graph creation is implemented in C code with Python bindings to speedup
    the graph building, up to x300 faster than the previous numpy-based implementation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，GraphMuse 提供了将乐谱转化为图形的功能。图形创建通过 C 语言实现，并提供 Python 绑定，以加速图形构建，比之前基于 numpy
    的实现速度提高了最多 300 倍。
- en: The Scientific Foundations
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 科学基础
- en: Graphs have been frequently used to analyze and represent music. To cite a few
    examples, the Tonnetz, Schenkerian analysis, and treelike form analysis are some
    notable mentions. The advantage of graphs is that they can capture both the hierarchical
    and the sequential nature of music with the same representation simply by the
    design of the edges.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图形已经被频繁用于分析和表示音乐。举几个例子，Tonnetz、Schenkerian 分析以及树形结构分析是一些著名的例子。图形的优势在于，它们可以通过边的设计，使用相同的表示法同时捕捉音乐的层次性和顺序性。
- en: Graph-based symbolic music processing using GNNs came about in 2021 with a performance
    generation model from the score. Since then many graph models have been introduced
    with some being the state-of-the-art for music analysis tasks up to the date of
    this post.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 基于图形的符号音乐处理使用 GNNs 是在 2021 年随着从乐谱生成表现模型而出现的。从那时起，许多图形模型相继问世，其中一些已经成为音乐分析任务的最先进方法，直到本文发布为止。
- en: So, now that I argued for the necessity of graphs let’s face the complexities
    of designing and training graph models for symbolic music.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，既然我已经阐明了图形的必要性，让我们面对设计和训练符号音乐图模型的复杂性。
- en: 'The main complexity of graphs and of course, music is that musical pieces are
    not always of the same length and the graphs that are created from them are not
    the same size either. Their size might vary considerably: for example, a Bach
    chorale might have only 200 notes whereas a Beethoven sonata can have well over
    5000\. In our graphs, the number of notes corresponds directly to the number of
    vertices in each score graph.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图形和音乐的主要复杂性在于，音乐作品的长度并不总是相同的，而由它们生成的图形大小也不相同。它们的大小可能会有显著差异：例如，一首巴赫的圣歌可能只有200个音符，而一首贝多芬的奏鸣曲可能有超过5000个音符。在我们的图形中，音符的数量与每个乐谱图中顶点的数量直接对应。
- en: Training efficiently and fast on score graphs is not a trivial task and would
    require a sampling method that can maximize the computational resources in terms
    of both memory and time without deteriorating the performance of the model and
    sometimes even improving it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在乐谱图上高效快速地训练并非易事，它需要一种采样方法，可以最大化计算资源的使用，既包括内存，也包括时间，同时不降低模型的性能，有时甚至能提高性能。
- en: In the training process, sampling involves combining graphs from different scores
    to create a new graph, often referred to as a “batch” in computer science. Each
    batch is then fed into the GNN model, where a loss is calculated. This loss is
    used to backpropagate and update the model’s parameters. This single iteration
    is called a training step. To optimize the model, this process is repeated many
    times until the training converges and ideally the model performs optimally.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练过程中，采样涉及将来自不同得分的图组合成一个新图，计算机科学中通常称之为“批次”。然后将每个批次输入到GNN模型中，计算损失。这个损失用于反向传播并更新模型的参数。这一单次迭代称为一个训练步骤。为了优化模型，这个过程会重复多次，直到训练收敛，理想情况下模型达到最佳性能。
- en: This all sounds complicated but do not despair because GraphMuse can handle
    this part for you!!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切听起来很复杂，但不要绝望，因为GraphMuse可以为你处理这一部分！！
- en: The Inner Workings of GraphMuse
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GraphMuse的内部工作原理
- en: '![](../Images/912423daa5f3dedfeb944cd7093845bd.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/912423daa5f3dedfeb944cd7093845bd.png)'
- en: 'The general graph processing/training pipeline for symbolic music scores within
    GraphMuse involves the following steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: GraphMuse中符号化音乐得分的图处理/训练管道一般包括以下步骤：
- en: Preprocess the database of scores to generate input graphs, GraphMuse can do
    this for you fast and easy;
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预处理得分数据库以生成输入图，GraphMuse可以为你快速且轻松地完成这一步；
- en: Sample the input graphs to create memory-efficient batches, again GraphMuse
    got your back;
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对输入图进行采样以创建内存高效的批次，再次强调，GraphMuse会为你处理这一切；
- en: Form a batch as a new graph with nodes and edges from various sampled input
    graphs; For each graph, a set of nodes is selected which we call *target nodes.*
    The neighbors of the target nodes can also be fetched by demand in a process called
    node-wise sampling.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将多个采样输入图中的节点和边组合形成一个新图作为一个批次；对于每个图，选择一组节点，我们称之为*目标节点*。目标节点的邻居也可以按需获取，这一过程叫做按节点采样。
- en: Update the target nodes’ representations through graph convolution to create
    node embeddings. GraphMuse provides some models that you can use, otherwise PyTorch
    Geometric can also be your friend;
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过图卷积更新目标节点的表示，以创建节点嵌入。GraphMuse提供了一些可以使用的模型，另外PyTorch Geometric也可以是你的好帮手；
- en: Use these embeddings for task-specific applications. This part is on you but
    I am sure you can make it!
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这些嵌入用于特定任务的应用。这个部分由你来处理，但我相信你一定能做得很好！
- en: Note that target nodes may include all or a subset of batch nodes depending
    on the sampling strategy.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，目标节点可能包括所有或部分批次节点，具体取决于采样策略。
- en: Now that the process is graphically explained let’s take a closer look at how
    GraphMuse handles sampling notes from each score.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然这个过程已经图示化解释了，我们来更仔细地看看GraphMuse如何处理从每个得分中采样音符。
- en: '![](../Images/bd9eb450636f4f2dc08991ca19ba827a.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bd9eb450636f4f2dc08991ca19ba827a.png)'
- en: 'Top: sampled notes and their neighbors; Middle: score graph and sampling process;
    Bottom: sampling process for beats and measures.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 上图：采样音符及其邻居；中图：得分图和采样过程；下图：节拍和小节的采样过程。
- en: '**Sampling process per score.**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**每个得分的采样过程。**'
- en: A randomly selected note (in yellow) is first sampled.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先随机选择一个音符（黄色）进行采样。
- en: The boundaries of the target notes are then computed with a budget of 15 notes
    in this example (pink and yellow notes).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后计算目标音符的边界，在这个示例中，预算为15个音符（粉色和黄色音符）。
- en: Then the k-hop neighbors are fetched for the targets (light blue for 1-hop and
    darker blue for 2-hop). The k-hop neighbors are computed with respect to the input
    graph (depicted with colored edges connecting noteheads in the figure above).
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后为目标节点获取k-hop邻居（浅蓝色为1-hop，深蓝色为2-hop）。k-hop邻居是相对于输入图计算的（如上图所示，颜色边连接音符头）。
- en: We can also extend the sampling process for the beat and measure elements. Note
    that the k-hop neighbors need not be strictly related to a time window.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以扩展采样过程，以包括节拍和小节元素。请注意，k-hop邻居不一定与时间窗口严格相关。
- en: To maximize the computational resources (i.e. memory) the above process is repeated
    for many scores at once to create one batch. Using this process, GraphMuse asserts
    that every sampled segment is going to have the same size of target notes. Every
    sampled segment can be combined to a new graph which will be of size at most *#_scores*
    x *#_target_notes.* This new graph constitutes the batch for the current training
    step.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了最大化计算资源（即内存），上述过程会对多个得分同时重复，以创建一个批次。使用这个过程，GraphMuse确保每个采样段都将具有相同大小的目标音符。每个采样段可以组合成一个新的图，其大小最多为*#_scores*
    x *#_target_notes*。这个新图构成当前训练步骤的批次。
- en: Hands-on with GraphMuse
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GraphMuse的实践
- en: 'For the hands-on part let’s try to use GraphMuse and use a model for pitch
    spelling. The pitch spelling task is about inferring the note name and accidentals
    when they are absent from the score. An example of this application is when we
    have a quantized midi and want to create a score such as the example in the figure
    below:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在动手操作部分，让我们尝试使用GraphMuse并应用一个音高拼写模型。音高拼写任务是指当乐谱中缺少音符名称和变音符时推断出它们的正确拼写。一个应用实例是，当我们拥有量化的MIDI文件并希望生成像下图中的乐谱时：
- en: '![](../Images/46ae97eb1f61b6bc624882d6353af232.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/46ae97eb1f61b6bc624882d6353af232.png)'
- en: Midi file is the input (top) and the music score is the desired output (bottom)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: MIDI文件是输入（顶部），而音乐乐谱是期望的输出（底部）。
- en: Before installing GraphMuse you will need to install PyTorch and PyTorch Geometric.
    Check out the appropriate version for your system [***here***](https://pytorch.org/get-started/locally/)
    and [***here***](https://pytorch-geometric.readthedocs.io/en/latest/install/installation.html).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装GraphMuse之前，你需要先安装PyTorch和PyTorch Geometric。请查看适合你系统的版本，链接在[***这里***](https://pytorch.org/get-started/locally/)和[***这里***](https://pytorch-geometric.readthedocs.io/en/latest/install/installation.html)。
- en: 'After this step, to install GraphMuse open your preferred terminal and type:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此步骤后，打开你喜欢的终端并输入以下命令来安装GraphMuse：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After installation, let's read a MIDI file from a URL and create the score graph
    with GraphMuse.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，让我们从URL读取一个MIDI文件并使用GraphMuse创建乐谱图。
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The underlying process reads the file with Partitura and then feeds it through
    GraphMuse.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 底层过程使用Partitura读取文件，然后将其传递给GraphMuse。
- en: 'To train our model to handle Pitch Spelling, we first need a dataset of musical
    scores where the pitch spelling has already been annotated. For this, we’ll be
    using the ASAP Dataset (licenced under [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)),
    which will serve as the foundation for our model’s learning. To get the ASAP Dataset
    you can download it using git or [directly from github](https://github.com/cpjku/asap-dataset):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了训练我们的模型处理音高拼写，我们首先需要一个已标注音高拼写的音乐乐谱数据集。为此，我们将使用ASAP数据集（遵循[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/)许可协议），它将作为我们模型学习的基础。要获取ASAP数据集，你可以通过git下载或[直接从github下载](https://github.com/cpjku/asap-dataset)：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The ASAP dataset includes scores and performances of various classical piano
    pieces. For our use-case we will use only the scores which end in `.musicxml`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ASAP数据集包括各种古典钢琴曲目的乐谱和演奏数据。对于我们的用例，我们将仅使用以`.musicxml`结尾的乐谱文件。
- en: 'As we load this dataset, we’ll need two essential utilities: one to encode
    pitch spelling and another to handle key signature information, both of which
    will be converted into numerical labels. Fortunately, these utilities are available
    within the pre-built pitch spelling model in GraphMuse. Let’s begin by importing
    all the necessary packages and loading the first score to get started.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载此数据集时，我们需要两个必要的工具：一个用于编码音高拼写，另一个用于处理调号信息，这两个工具将被转换为数字标签。幸运的是，这些工具可以在GraphMuse中预构建的音高拼写模型中找到。让我们开始导入所有必需的包，并加载第一个乐谱文件以开始。
- en: '[PRE3]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we’ll load the remaining score files from the dataset to continue preparing
    our data for model training.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将从数据集中加载剩余的乐谱文件，以继续为模型训练准备数据。
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once the graph structures are ready, we can move on to creating the data loader,
    which is conveniently provided by GraphMuse. At this stage, we’ll also define
    standard training components like the loss function and optimizer to guide the
    learning process.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦图结构准备好，我们就可以继续创建数据加载器，GraphMuse已经方便地提供了这一功能。在此阶段，我们还将定义标准的训练组件，如损失函数和优化器，以引导学习过程。
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Let me comment a bit more on the *gm.loader.MuseNeighborLoader.* This is the
    core dataloader in GraphMuse and it contains the sampling that was explained in
    the previous section. *subgraph_size* refers to the number of target nodes per
    input graph, *batch_size* is the number of sampled graphs per batch, and finally,
    *num_neighbors* refers to the number of neighbors sampled per sampled node in
    each layer.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我再多说一点关于*gm.loader.MuseNeighborLoader*的内容。它是GraphMuse中的核心数据加载器，包含了前一节中提到的采样方法。*subgraph_size*指的是每个输入图的目标节点数量，*batch_size*是每批次采样的图的数量，最后，*num_neighbors*指的是每一层中每个采样节点的邻居数。
- en: With everything in place, we are finally ready to train the model. So, let’s
    dive in and start the training process!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一切就绪后，我们终于可以开始训练模型了。让我们深入并开始训练过程吧！
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Hopefully, we’ll soon see the loss function decreasing, a positive sign that
    our model is effectively learning how to perform pitch spelling. Fingers crossed!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 希望我们很快能看到损失函数下降，这是模型有效学习音高拼写的积极信号。希望一切顺利！
- en: '![](../Images/f267c41b5f58259804aa4c0806642c6b.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f267c41b5f58259804aa4c0806642c6b.png)'
- en: Why GraphMuse?
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择GraphMuse？
- en: GraphMuse is a framework that tries to make the training and deployment of graph
    models for symbolic music processing easier.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: GraphMuse是一个框架，旨在简化符号音乐处理中的图形模型训练和部署。
- en: For those who want to retrain, deploy, or finetune previous state-of-the-art
    models for symbolic music analysis, GraphMuse contains some of the necessary components
    to re-build and re-train your model faster and more efficiently.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些想要重新训练、部署或微调先前最先进的符号音乐分析模型的人，GraphMuse包含了一些必要的组件，可以帮助你更快速、更高效地重建和重新训练模型。
- en: GraphMuse retains its flexibility through its simplicity, for those who want
    to prototype, innovate, and design new models. It aims to provide a simple set
    of utilities rather than including complex chained pipelines that can block the
    innovation process.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: GraphMuse通过其简单性保持灵活性，适合那些希望原型设计、创新和设计新模型的人。它旨在提供一套简单的工具，而不是包含复杂的链式流程，以避免阻碍创新过程。
- en: For those who want to learn, visualize, and get hands-on experience, GraphMuse
    is good to get you started. It offers an easy introduction to basic functions
    and pipelines with a few lines of code. GraphMuse is also linked with [MusGViz](https://github.com/fosfrancesco/musgviz/),
    which allows graphs and scores to be easily visualized together.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些想要学习、可视化并获得实践经验的人，GraphMuse非常适合入门。它提供了一个简洁的介绍，通过几行代码就能掌握基本功能和流程。GraphMuse还与[MusGViz](https://github.com/fosfrancesco/musgviz/)相连接，可以轻松地将图形和乐谱一起可视化。
- en: Limitations and Future Plans
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制与未来计划
- en: We cannot talk about the positive aspects of any project without discussing
    the negative ones as well.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们无法谈论任何项目的积极方面而不讨论其消极方面。
- en: GraphMuse is a newborn project and in its current state, it is pretty simple.
    It is focused on covering the essential parts of graph learning rather than being
    a holistic framework that covers all possibilities. Therefore it still focuses
    a lot on user-based implementation on many parts of the aforementioned pipeline.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: GraphMuse是一个新兴的项目，目前仍相当简单。它专注于覆盖图形学习的核心部分，而不是成为一个涵盖所有可能性的完整框架。因此，它仍然在许多上述流程的部分中，更多地关注基于用户的实现。
- en: Like every open-source project in development GraphMuse needs help to grow.
    So please, if you find bugs or want more features do not hesitate to report, request,
    or contribute to the GraphMuse GitHub project.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 像所有开发中的开源项目一样，GraphMuse需要帮助才能成长。因此，如果你发现漏洞或想要更多功能，请随时报告、请求或贡献到GraphMuse的GitHub项目中。
- en: Last but not least, GraphMuse uses C libraries such as torch-sparse and torch-scatter
    and has its own C-bindings to accelerate graph creation therefore installation
    is not always straightforward. The windows installation is more challenging judging
    from our user testing and user interaction reports, although not impossible (I
    am running it on Windows myself).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，GraphMuse使用了如torch-sparse和torch-scatter等C库，并拥有自己的C绑定，以加速图形创建，因此安装并非总是很简单。根据我们的用户测试和交互报告，Windows的安装相对更具挑战性，但并非不可能（我自己就是在Windows上运行的）。
- en: 'Future plans include:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 未来计划包括：
- en: Making installation easier;
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化安装过程；
- en: Add more support for models and dataloaders for precise tasks;
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为精确任务增加更多对模型和数据加载器的支持；
- en: Grow the open-source community around GraphMuse to keep graph coding for music
    growing.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩大GraphMuse的开源社区，让图形编码在音乐领域持续增长。
- en: Conclusion
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: GraphMuse is a Python library that makes working with music graphs a little
    bit easier. It focuses on the training aspect of graph-based models for music
    but aims to retain flexibility when research-based projects require it.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: GraphMuse是一个Python库，使得处理音乐图形变得更加容易。它专注于基于图形的音乐模型的训练，但也旨在在研究项目需要时保持灵活性。
- en: If you would like to support the development and future growth of GraphMuse
    please star the repo [here](https://github.com/manoskary/graphmuse) .
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想支持GraphMuse的开发和未来成长，请在[这里](https://github.com/manoskary/graphmuse)给这个仓库点个星。
- en: Happy graph coding !!!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你愉快地进行图形编码！！
- en: '[](https://github.com/manoskary/graphmuse?source=post_page-----40dbd9baf319--------------------------------)
    [## GitHub - manoskary/graphmuse: A Graph Deep Learning Library for Music.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/manoskary/graphmuse?source=post_page-----40dbd9baf319--------------------------------)
    [## GitHub - manoskary/graphmuse: A Graph Deep Learning Library for Music.'
- en: A Graph Deep Learning Library for Music. Contribute to manoskary/graphmuse development
    by creating an account on…
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一款用于音乐的图谱深度学习库。通过创建一个账户来为manoskary/graphmuse的开发做出贡献…
- en: github.com](https://github.com/manoskary/graphmuse?source=post_page-----40dbd9baf319--------------------------------)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/manoskary/graphmuse?source=post_page-----40dbd9baf319--------------------------------)
- en: '[all images are by the author]'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[所有图片均由作者提供]'
