- en: Create Your Own Meal Planner Using ChatGPT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/create-your-own-meal-planner-using-chatgpt-1dc4dfe3af7e?source=collection_archive---------4-----------------------#2024-09-02](https://towardsdatascience.com/create-your-own-meal-planner-using-chatgpt-1dc4dfe3af7e?source=collection_archive---------4-----------------------#2024-09-02)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A brief guide to prompt engineering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@cornederuijt?source=post_page---byline--1dc4dfe3af7e--------------------------------)[![Corné
    de Ruijt](../Images/0e2b618b404bc65a8b4c8acc1c9c3d69.png)](https://medium.com/@cornederuijt?source=post_page---byline--1dc4dfe3af7e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--1dc4dfe3af7e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--1dc4dfe3af7e--------------------------------)
    [Corné de Ruijt](https://medium.com/@cornederuijt?source=post_page---byline--1dc4dfe3af7e--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--1dc4dfe3af7e--------------------------------)
    ·16 min read·Sep 2, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2be06bae37516bbfff869c7ec305a2fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Generated via DALL-E 3 using the prompt “a pizza calzone on a set table as cartoon”.
    Generated on 2024-05–10.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We all know the feeling. You come home late from work; your mind feels like
    a tightly squeezed sponge. You walk into the kitchen and are reminded of yet another
    cognitive task: deciding what to eat this evening. But you know that you’re already
    too late to make that decision, as you’ve unconsciously grabbed the cookie jar
    and put one in your mouth.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Luckily, there’s a solution: meal planning. Deciding up front what to eat the
    whole week, getting groceries for the whole week, and already preparing (parts
    of) some meals before the week starts helps to eat healthier. But this still requires
    a lot of work: deciding what to eat, compiling the grocery list, deciding whether
    ordering groceries or heading to the supermarket is the best thing to do. Well,
    thankfully, we now have a magic wand for such tasks: ChatGPT.'
  prefs: []
  type: TYPE_NORMAL
- en: In short, in this tutorial we will guide you towards creating your own meal
    planner using ChatGPT. You will get some familiarity with common prompt engineering
    techniques (techniques that steer ChatGPT’s response) and how to use this in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Ready? Let’s get started! In case you want to use/download the notebook version
    of this tutorial, this is available on Github:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/cornederuijt/LLM-workshop/blob/main/scripts/%5BJNB_11_03_24_04_01_e_a_04_a%5D%20Create%20you%20own%20meal%20planner%2C%20using%20ChatGPT.ipynb?source=post_page-----1dc4dfe3af7e--------------------------------)
    [## LLM-workshop/scripts/[JNB_11_03_24_04_01_e_a_04_a] Create you own meal planner,
    using ChatGPT.ipynb…'
  prefs: []
  type: TYPE_NORMAL
- en: github.com](https://github.com/cornederuijt/LLM-workshop/blob/main/scripts/%5BJNB_11_03_24_04_01_e_a_04_a%5D%20Create%20you%20own%20meal%20planner%2C%20using%20ChatGPT.ipynb?source=post_page-----1dc4dfe3af7e--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 1.2\. Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, we will use some Python and the OpenAI API to make calls to
    ChatGPT. In theory, one could follow the tutorial without Python coding, by directly
    prompting on the ChatGPT website. However, when moving beyond the basics explained
    in this tutorial, using prompts in combination with Python, or Python LLM packages
    such as LangChain [1], becomes very powerful.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you just read “LLM” and thought: “What is ‘LLM’?”, no worries. LLM stands
    for Large Language Model, and it is basically a larger class of models that work
    similarly to ChatGPT. So, whenever in this tutorial you may read LLM, just think
    “ChatGPT, or something similar”, and you’ll be good to go.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started, we require the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Some basic understanding of Python. I’ll take the first three Chapters of
    the [“Introduction to Python”](https://app.datacamp.com/learn/courses/intro-to-python-for-data-science)
    (Python Basics, Python Lists, Functions and Packages) DataCamp tutorial as a reference
    point [2].
  prefs: []
  type: TYPE_NORMAL
- en: 2\. An OpenAI account. If you don’t have one, go to the [ChatGPT website](https://chatgpt.com)
    [3], select “log-in”, at the upper-right and select “sign-up” to create an account.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. An API key for OpenAI, which we will briefly guide you through next.
  prefs: []
  type: TYPE_NORMAL
- en: '**1.2.1 Requesting an OpenAI key**'
  prefs: []
  type: TYPE_NORMAL
- en: '*To use the OpenAI API you are required to add some credit card information,
    and depending on how OpenAI computes your free credits, you may be billed for
    the API usage. The cost of following this tutorial should be minimal (a few cents)
    [4].*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To programatically interact with OpenAI, we need to request an API key, which
    we can do following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Go to [https://platform.openai.com](https://platform.openai.com) and log-in
    using your account.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Go to [https://platform.openai.com/account/billing/overview](https://platform.openai.com/account/billing/overview)
    and add your creditcard information.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Go to API keys: [https://platform.openai.com/api-keys](https://platform.openai.com/api-keys).'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Select “Create new secret key”, OpenAI will create a long text (string)
    that will act as your API key. **Be aware not to share the API key!**
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Save the key in some convenient location.
  prefs: []
  type: TYPE_NORMAL
- en: 'For simplicity, we’ll assume that you have stored your API key in a keys.yaml
    file on the working directory. The keys.yaml then has the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**1.2.2 Installing packages**'
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we will work with the OpenAI API, for which there is a Python
    package. This can be installed via pip.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Apart from OpenAI, we assume common data packages (pandas, numpy) are already
    installed.
  prefs: []
  type: TYPE_NORMAL
- en: '**1.2.3 Some safety guardrails**'
  prefs: []
  type: TYPE_NORMAL
- en: Before moving on, we should be aware of some of the risks of using ChatGPT,
    or any AI platform we find online. Even though something as simple as creating
    a meal planner seems benign, there are still some risks we should take into account.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sharing data with OpenAI —** When we interact with ChatGPT, or any other
    LLM/AI-Agent we find on the web, we share our data with that platform. We should
    be aware of this, and avoid sharing privacy-related and/or sensitive information
    with the platform. For example, when creating a meal planner, ChatGPT doesn’t
    need to know that I’m creating this for my friend Alexander William, who lives
    on the Nieuwezijds Voorburgwal (pardon my Dutch) 147 in Amsterdam (spoiler: he
    likes pancakes [10]).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Be aware of the probabilistic nature of LLMs —** In essence, LLMs *predict*
    the most likely word based on the context you provide. Therefore, its output may
    be illogical. A common example is asking ChatGPT how frequent the letter ‘r’ is
    in strawberry, which it may fail to recognize [11]. Although OpenAI and other
    LLM providers are making significant efforts to enhance LLMs’ logical reasoning
    [12], we must remain mindful of potential errors they may produce. I.a.w., be
    wary that if you ask ChatGPT to create a meal plan for your lactose intolerant
    friend, and you explicitly state that the meal plan cannot contain any dairy products,
    ChatGPT might still include dairy products in the meal plan.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2\. The Meal Planner exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After a hard day’s work, nothing is more degrading than having to solve that
    impossible puzzle of what to eat for dinner. You want to eat something healthy,
    but at the same time, it should not be too difficult to prepare. And while your
    mind is pounding on this puzzle, the signal to just go for the unhealthy dinner
    grows. Why torture ourselves with this puzzle? Let’s just let ChatGPT decide what
    to have for dinner.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s load the required packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Let’s load the API key we created in Section 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Next, we set an environmental parameter to the OpenAI key. This is just to make
    our lives somewhat easier. After this, we don’t have to care too much about the
    API key anymore.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s create the ChatGPT client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'And let’s make a call to the ChatGPT API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'GPT response:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The answer does feel a bit like a quote I found in a Medium post a little while
    ago by Maximilian Vogel [5]:'
  prefs: []
  type: TYPE_NORMAL
- en: '*”AI models are like eager office interns, tireless and enthusiastic but desperately
    in need of guidance.”*'
  prefs: []
  type: TYPE_NORMAL
- en: It could work if you have a full-time cook working for you and unlimited time
    and budget for preparing meals, but otherwise…
  prefs: []
  type: TYPE_NORMAL
- en: Now to think of it, since I’m Dutch, I usually only care about my dinners, since
    for breakfast and lunch I eat the same boring meal every day (oatmeal and a sandwich),
    or occasionally I eat yesterday’s leftovers. So I really only care about diner.
  prefs: []
  type: TYPE_NORMAL
- en: So, how to steer ChatGPT’s response in that direction? Let’s find out.
  prefs: []
  type: TYPE_NORMAL
- en: '***Exercise 1***Adjust the user prompt in the code that was used to create
    the meal plan. Try to steer the meal plan more to your own liking. How does this
    change ChatGPT’s response?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3\. Prompting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 3.1 User and system prompts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Perhaps the most important technique to steer ChatGPT’s response in our direction
    is by using prompting. Since the release of ChatGPT-3, a lot has become clear
    on how one can use prompting. An extensive guide is given by [OpenAI itself](https://platform.openai.com/docs/guides/prompt-engineering/prompt-engineering)
    [6], and for some specific tasks, like generating texts for specific purposes
    (like social media posts), additional references exist (e.g., [[7]](https://medium.com/towards-data-science/how-i-won-singapores-gpt-4-prompt-engineering-competition-34c195a93d41)).
  prefs: []
  type: TYPE_NORMAL
- en: 'One useful element in prompting is the distinction between two types of messages
    that are sent to ChatGPT: *system prompts* and *user prompts*. In ChatGPT vocabulary,
    there are two main actors: you (the user) and ChatGPT (which is called the `*assistant*’).
    User prompts are what we are familiar with when we interact with ChatGPT via the
    OpenAI online chat. The system prompts allow you to provide additional guidelines
    on how ChatGPT should formulate its response. In that sense, how ChatGPT should
    behave.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ed51c0a07d68b4591824acec41dafc47.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig. 2\. System vs assistant vs user prompts
  prefs: []
  type: TYPE_NORMAL
- en: One simple way to illustrate this, is by sending the following prompt to ChatGPT.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'GPT response:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So what happens here? We’ve added a system prompt by adding the message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Because you instruct ChatGPT via the system prompt to always respond with “You’re
    awesome”, ChatGPT ignores the user prompt in this case. Congrats, you’ve steered
    ChatGPT’s response to your own liking!
  prefs: []
  type: TYPE_NORMAL
- en: '**Exercise 2**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Adjust the system prompt in the code above to something of your own liking.
    How does ChatGPT’s response change because of it?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3.2 Prompting tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As briefly mentioned before, OpenAI provides a great resource on how to use
    different prompting techniques, which I can strongly recommend reading [[6]](https://platform.openai.com/docs/guides/prompt-engineering/prompt-engineering).
    Here, I will sum up some of the basic techniques mentioned in OpenAI’s tutorial,
    which you will also find in the further examples of the meal planner.
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Be specific**'
  prefs: []
  type: TYPE_NORMAL
- en: Try to include as many details as you can into the prompt. Does the meal plan
    have to be vegetarian? Perhaps pescatarian? Do you want to eat pizza at least
    once a week? Do you normally eat deserts? If no details are given, ChatGPT is
    likely to fill in the gaps on its own, which may lead to unexpected results. So,
    be specific, but do be wary about sharing personal or sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Ask ChatGPT to adopt a persona**'
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps my favorite research on ChatGPT so far is that by telling ChatGPT it’s
    an expert, it apparently provides better results [8]. So why not tell ChatGPT
    that it’s an expert meal planner? Or perhaps it’s an expert in planning Italian
    dishes?
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Use delimiters**'
  prefs: []
  type: TYPE_NORMAL
- en: Just like headers help people read and understand text, so do delimiters help
    ChatGPT to understand different parts of a prompt. Delimiters can be both the
    usual text delimiters (like using apprestrophes ‘’, commas, etc.), but also including
    text markup can be useful. Since ChatGPT is trained on, among other training data,
    HTML pages [13], it can easily recognize things like
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: as a list of planets. Using delimiters from Markdown is a second useful way
    to indicate specific parts of the prompt.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**4\. Split the task into different steps**'
  prefs: []
  type: TYPE_NORMAL
- en: For more complex tasks, it is helpful to split the task into multiple smaller
    tasks. To indicate the individual task, we can again use delimiters.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**5\. Give examples and a format for the output**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, it can be useful to provide an example of how the output of ChatGPT
    should look like. For example, one could add the following prompt to the meal
    planner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Exercise 3**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Consider the following prompt:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: a. Explain the difference here between the User role and the System role.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: b. Reflect on the prompt using the five prompting tips. Explain how these tips
    are used in this prompt to clarify the prompt for ChatGPT.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: c. Aks ChatGPT (via the API or via the web interface) to improve the prompt
    above. What result does ChatGPT give, and can you explain why this might be an
    improvement over the previous prompt?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'd. In the cell below you find a full code example. Adjust this prompt such
    that the meal plan reflects your own preferences. Use the prompting tips to tailor
    ChatGPT’s output to your needs. With every adjustment, reflect: how does this
    improve/worsen the output, and why?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Bonus: Also check other prompting guidelines from [[6]](https://platform.openai.com/docs/guides/prompt-engineering/prompt-engineering).
    How could certain guidelines help to improve the prompt?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Parsing ChatGPT results to structured formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 4.1 Parsing to json
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: My first encounter with the ChatGPT API was during a talk at Pydata Amsterdam
    2023, where the speaker explained how he used ChatGPT to classify his to-do list.
    For example, to-do items like ‘cleaning’, ‘laundry’, or ‘vacuum cleaning’ would
    be classified as ‘household jobs’. Although classifying the list wasn’t that difficult,
    parsing the classified list was. Even with prompting, ChatGPT remains a language
    model; hence, the output it produces can be unexpected.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, ChatGPT has improved since this talk, and new Python packages are simplifying
    the parsing process [[9]](https://python.langchain.com/v0.1/docs/modules/model_io/output_parsers/).
    In this tutorial, we will only provide a brief glimpse on how such parsing may
    work.
  prefs: []
  type: TYPE_NORMAL
- en: ChatGPT generates text, but it is trained on not only ‘plain’ text but also
    many texts that include addition markup, such as HTML and Markdown, or on texts
    that are in structured formats, such as json or yaml. Therefore, it is not only
    capable of understanding such markup (as we have seen in the delimiters section),
    but can also produce it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the example above, ChatGPT has successfully parsed the output (Mars and
    Venus) to a structured format that can be read into a dictionary in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 4.2 Parsing the meal planner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s take this a step further. In this example, we first generate a meal plan
    for the entire week. From the meal plan, we then try to extract a shopping list
    that we can use to buy all ingredients. The example is given below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: And let’s try to parse the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c03a45d518be4aef82b94e99da8453da.png)'
  prefs: []
  type: TYPE_IMG
- en: And let’s structure it into a more convenient format.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, let’s sum up the ingredients and quantities.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/aef750a1eb8fe229956698c229595798.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Exercise 4**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Try to convert your meal plan created in exercise 3 into a shopping list using
    the same procedure.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 6\. Eet smakelijk (enjoy your meal)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, there you are; you can go shopping or order the ingredients online. But
    perhaps the meal plan is not yet completely to your liking. Perhaps you would
    like it to be more spicy, or the ingredient costs are off, or you like to measure
    ginger in cm rather than inches. Just like any form of programming, prompting
    is another iterative process, and iteratively improving your prompts helps to
    better understand how ChatGPT (or any large language model) behaves and how to
    steer it to your own liking.
  prefs: []
  type: TYPE_NORMAL
- en: References & notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All dates are in dd-mm-YYYY format.
  prefs: []
  type: TYPE_NORMAL
- en: '[1] [https://langchain.com](https://langchain.com/). Last accessed: 10–05–2024.'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] [https://app.datacamp.com/learn/courses/intro-to-python-for-data-science](https://app.datacamp.com/learn/courses/intro-to-python-for-data-science).
    Last accessed: 10–05–2024.'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] [https://chatgpt.com](https://chatgpt.com/). Last accessed: 10–05–2024.'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] The author of this article takes no responsibility for any cost (expected
    or unexpected) the reader might have when following the steps in this tutorial.'
  prefs: []
  type: TYPE_NORMAL
- en: '[5] Maximilian Vogel. (2023). ChatGPT, Next Level: Meet 10 Autonomous AI Agents:
    Auto-GPT, BabyAGI, AgentGPT, Microsoft Jarvis, ChaosGPT & friends. [https://medium.com/the-generator/chatgpts-next-level-is-agent-ai-auto-gpt-babyagi-agentgpt-microsoft-jarvis-friends-d354aa18f21](https://medium.com/the-generator/chatgpts-next-level-is-agent-ai-auto-gpt-babyagi-agentgpt-microsoft-jarvis-friends-d354aa18f21)
    Last accessed: 11–07–2024.'
  prefs: []
  type: TYPE_NORMAL
- en: '[6] [https://platform.openai.com/docs/guides/prompt-engineering/prompt-engineering](https://platform.openai.com/docs/guides/prompt-engineering/prompt-engineering).
    Last accessed: 10–05–2024.'
  prefs: []
  type: TYPE_NORMAL
- en: '[7] Teo S. (2023). How I Won Singapore’s GPT-4 Prompt Engineering Competition.
    [https://medium.com/towards-data-science/how-i-won-singapores-gpt-4-prompt-engineering-competition-34c195a93d41](https://medium.com/towards-data-science/how-i-won-singapores-gpt-4-prompt-engineering-competition-34c195a93d41).
    Last accessed: 10–05–2024'
  prefs: []
  type: TYPE_NORMAL
- en: '[8] Xu, Benfeng, et al. (2023). Expertprompting: Instructing large language
    models to be distinguished experts. *arXiv preprint arXiv:2305.14688*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[9] [https://python.langchain.com/v0.1/docs/modules/model_io/output_parsers/](https://python.langchain.com/v0.1/docs/modules/model_io/output_parsers/).
    Last accessed: 12–07–2024.'
  prefs: []
  type: TYPE_NORMAL
- en: '[10] [https://nos.nl/artikel/2221580-willem-alexander-en-maxima-in-de-keuken-wie-bakt-de-beste-pannenkoeken](https://nos.nl/artikel/2221580-willem-alexander-en-maxima-in-de-keuken-wie-bakt-de-beste-pannenkoeken).
    Last accessed: 19–09–2024'
  prefs: []
  type: TYPE_NORMAL
- en: '[11] [https://community.openai.com/t/incorrect-count-of-r-characters-in-the-word-strawberry/829618](https://community.openai.com/t/incorrect-count-of-r-characters-in-the-word-strawberry/829618).
    Last accessed: 20–09–2024'
  prefs: []
  type: TYPE_NORMAL
- en: '[12] Such as the recent o1-models: [https://openai.com/o1/](https://openai.com/o1/).
    Last accessed: 23–09–2024'
  prefs: []
  type: TYPE_NORMAL
- en: '[13] Brown, Tom B. et al. (2020)“Language models are few-shot learners.” *arXiv
    preprint arXiv:2005.14165*.'
  prefs: []
  type: TYPE_NORMAL
