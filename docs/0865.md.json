["```py\nwith tf.GradientTape() as g:\n    g.watch(x)\n    u = neural_net(x)\ndu_dtx = g.batch_jacobian(u, x)\ndu_dt = du_dtx[..., 0]\ndu_dx = du_dtx[..., 1]\n```", "```py\nu_eqn = du_dt+ u*du_dt # (1)\n```", "```py\ndelta = 1e-3\nxl = x - delta\nxr= x  + delta\nwith tf.GradientTape() as g:\n   g.watch(x)\n    u = neural_net(x)\n    ul = neural_net(xl)\n    ur = neural_net(xr)\n\ndu_dtx = g.batch_jacobian(u, x)\ndu_dt = du_dtx[..., 0]\ndu_dx = du_dtx[..., 1]\n```", "```py\n term1 = du_dt + u * du_dx\n   term2 = (ul + ur) / 2\n   condition = tf.less(du_dt, 1e3)\n   u_eqn = tf.where(condition, term1, term2) # (2)\n```"]