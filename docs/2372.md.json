["```py\n## R ##\njames_stein_estimator <- function(Xbar, sigma2 = 1) {\n  p <- length(Xbar)\n  norm_X2 <- sum(Xbar^2)\n  shrinkage_factor <- max(0, 1 - (p - 2) * mean(sigma2) / norm_X2)\n  return(shrinkage_factor * Xbar)\n}\n\n## Python ##\nimport numpy as np\n\ndef james_stein_estimator(Xbar, sigma2=1):\n    p = len(Xbar)\n    norm_X2 = np.sum(Xbar**2)\n    shrinkage_factor = max(0, 1 - (p - 2) * np.mean(sigma2) / norm_X2)\n    return shrinkage_factor * Xbar\n\n## Julia ##\nfunction james_stein_estimator(Xbar, sigma2=1)\n    p = length(Xbar)\n    norm_X2 = sum(Xbar.^2)\n    shrinkage_factor = max(0, 1 - (p - 2) * mean(sigma2) / norm_X2)\n    return shrinkage_factor * Xbar\nend\n```", "```py\nset.seed(42)\n## Function to calculate Mean Squared Error ##\nmse <- function(x, true_value)\n  return( mean( (x - true_value)^2 ) )\n## True Average ##\nmu <- c(0, 4, 1.5, 0.5, 0.02, 2)\n## Store Average and J.S. Estimator Errors ##\nXbar.MSE <- list(); JS.MSE <- list()\nfor(n in c(5, 50, 500, 5000)){ # Testing sample sizes of 5, 30, 200, and 5,000\n  for(i in 1:1e4){ # Performing 10,000 iterations\n\n    ## Six Random Variables ##\n    X1 <- rt(n, df = 3)\n    X2 <- rbinom(n, size = 10, prob = 0.4)\n    X3 <- rgamma(n, shape = 3, rate = 2)\n    X4 <- runif(n)\n    X5 <- rexp(n, rate = 50)\n    X6 <- rpois(n, lambda = 2)\n\n    X <- cbind(X1, X2, X3, X4, X5, X6)\n\n    ## Estimating Std. Dev. of Each and Standardizing Data ##\n    sigma <- apply(X, MARGIN = 2, FUN = sd)\n\n    ## Sample Mean ##\n    Xbar <- colMeans(X)\n\n    ## J.S. Estimator ##\n    JS.Xbar <- james_stein_estimator(Xbar=Xbar, sigma2=sigma/n)\n\n    Xbar.MSE[[as.character(n)]][i] <- mse(Xbar, mu)\n    JS.MSE[[as.character(n)]][i] <- mse(JS.Xbar, mu)\n\n  }\n}\nsapply(Xbar.MSE, mean) # Avg. Sample Mean MSE\nsapply(JS.MSE, mean) # Avg. James-Stein MSE\n```"]