["```py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n# Create and prepare dataset\ndataset_dict = {\n    'Outlook': ['sunny', 'sunny', 'overcast', 'rainy', 'rainy', 'rainy', 'overcast', \n                'sunny', 'sunny', 'rainy', 'sunny', 'overcast', 'overcast', 'rainy',\n                'sunny', 'overcast', 'rainy', 'sunny', 'sunny', 'rainy', 'overcast',\n                'rainy', 'sunny', 'overcast', 'sunny', 'overcast', 'rainy', 'overcast'],\n    'Temperature': [85.0, 80.0, 83.0, 70.0, 68.0, 65.0, 64.0, 72.0, 69.0, 75.0, 75.0,\n                   72.0, 81.0, 71.0, 81.0, 74.0, 76.0, 78.0, 82.0, 67.0, 85.0, 73.0,\n                   88.0, 77.0, 79.0, 80.0, 66.0, 84.0],\n    'Humidity': [85.0, 90.0, 78.0, 96.0, 80.0, 70.0, 65.0, 95.0, 70.0, 80.0, 70.0,\n                 90.0, 75.0, 80.0, 88.0, 92.0, 85.0, 75.0, 92.0, 90.0, 85.0, 88.0,\n                 65.0, 70.0, 60.0, 95.0, 70.0, 78.0],\n    'Wind': [False, True, False, False, False, True, True, False, False, False, True,\n             True, False, True, True, False, False, True, False, True, True, False,\n             True, False, False, True, False, False],\n    'Play': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes',\n             'Yes', 'Yes', 'No', 'No', 'Yes', 'Yes', 'No', 'No', 'No', 'Yes', 'Yes',\n             'Yes', 'Yes', 'Yes', 'Yes', 'No', 'Yes']\n}\n# Prepare data\ndf = pd.DataFrame(dataset_dict)\ndf = pd.get_dummies(df, columns=['Outlook'], prefix='', prefix_sep='', dtype=int)\ndf['Wind'] = df['Wind'].astype(int)\ndf['Play'] = (df['Play'] == 'Yes').astype(int)\n\n# Rearrange columns\ncolumn_order = ['sunny', 'overcast', 'rainy', 'Temperature', 'Humidity', 'Wind', 'Play']\ndf = df[column_order]\n\n# Prepare features and target\nX,y = df.drop('Play', axis=1), df['Play']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.5, shuffle=False)Main Mechanism\n```", "```py\nfrom sklearn.tree import plot_tree\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import plot_tree\nimport matplotlib.pyplot as plt\n\n# Train AdaBoost\nnp.random.seed(42)  # For reproducibility\nclf = AdaBoostClassifier(algorithm='SAMME', n_estimators=50, random_state=42)\nclf.fit(X_train, y_train)\n\n# Create visualizations for trees 1, 2, and 50\ntrees_to_show = [0, 1, 49]\nfeature_names = X_train.columns.tolist()\nclass_names = ['No', 'Yes']\n\n# Set up the plot\nfig, axes = plt.subplots(1, 3, figsize=(14,4), dpi=300)\nfig.suptitle('Decision Stumps from AdaBoost', fontsize=16)\n\n# Plot each tree\nfor idx, tree_idx in enumerate(trees_to_show):\n    plot_tree(clf.estimators_[tree_idx],\n              feature_names=feature_names,\n              class_names=class_names,\n              filled=True,\n              rounded=True,\n              ax=axes[idx],\n              fontsize=12)  # Increased font size\n    axes[idx].set_title(f'Tree {tree_idx + 1}', fontsize=12)\n\nplt.tight_layout(rect=[0, 0.03, 1, 0.95])\n```", "```py\n# Get predictions\ny_pred = clf.predict(X_test)\n\n# Create DataFrame with actual and predicted values\nresults_df = pd.DataFrame({\n    'Actual': y_test,\n    'Predicted': y_pred\n})\nprint(results_df) # Display results DataFrame\n\n# Calculate and display accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"\\nModel Accuracy: {accuracy:.4f}\")\n```", "```py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Create dataset\ndataset_dict = {\n    'Outlook': ['sunny', 'sunny', 'overcast', 'rainy', 'rainy', 'rainy', 'overcast', \n                'sunny', 'sunny', 'rainy', 'sunny', 'overcast', 'overcast', 'rainy',\n                'sunny', 'overcast', 'rainy', 'sunny', 'sunny', 'rainy', 'overcast',\n                'rainy', 'sunny', 'overcast', 'sunny', 'overcast', 'rainy', 'overcast'],\n    'Temperature': [85.0, 80.0, 83.0, 70.0, 68.0, 65.0, 64.0, 72.0, 69.0, 75.0, 75.0,\n                   72.0, 81.0, 71.0, 81.0, 74.0, 76.0, 78.0, 82.0, 67.0, 85.0, 73.0,\n                   88.0, 77.0, 79.0, 80.0, 66.0, 84.0],\n    'Humidity': [85.0, 90.0, 78.0, 96.0, 80.0, 70.0, 65.0, 95.0, 70.0, 80.0, 70.0,\n                 90.0, 75.0, 80.0, 88.0, 92.0, 85.0, 75.0, 92.0, 90.0, 85.0, 88.0,\n                 65.0, 70.0, 60.0, 95.0, 70.0, 78.0],\n    'Wind': [False, True, False, False, False, True, True, False, False, False, True,\n             True, False, True, True, False, False, True, False, True, True, False,\n             True, False, False, True, False, False],\n    'Play': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes',\n             'Yes', 'Yes', 'No', 'No', 'Yes', 'Yes', 'No', 'No', 'No', 'Yes', 'Yes',\n             'Yes', 'Yes', 'Yes', 'Yes', 'No', 'Yes']\n}\ndf = pd.DataFrame(dataset_dict)\n\n# Prepare data\ndf = pd.get_dummies(df, columns=['Outlook'], prefix='', prefix_sep='', dtype=int)\ndf['Wind'] = df['Wind'].astype(int)\ndf['Play'] = (df['Play'] == 'Yes').astype(int)\n\n# Split features and target\nX, y = df.drop('Play', axis=1), df['Play']\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.5, shuffle=False)\n\n# Train AdaBoost\nada = AdaBoostClassifier(\n    estimator=DecisionTreeClassifier(max_depth=1), # Create base estimator (decision stump)\n    n_estimators=50,        # Typically fewer trees than Random Forest\n    learning_rate=1.0,      # Default learning rate\n    algorithm='SAMME',      # The only currently available algorithm (will be removed in future scikit-learn updates)\n    random_state=42\n)\nada.fit(X_train, y_train)\n\n# Predict and evaluate\ny_pred = ada.predict(X_test)\nprint(f\"Accuracy: {accuracy_score(y_test, y_pred)}\")\n```"]