- en: A Guide to Python’s Weak References Using the weakref Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 weakref 模块深入了解 Python 的弱引用
- en: 原文：[https://towardsdatascience.com/a-guide-to-pythons-weak-references-using-weakref-module-d3381b01db99?source=collection_archive---------6-----------------------#2024-06-25](https://towardsdatascience.com/a-guide-to-pythons-weak-references-using-weakref-module-d3381b01db99?source=collection_archive---------6-----------------------#2024-06-25)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-guide-to-pythons-weak-references-using-weakref-module-d3381b01db99?source=collection_archive---------6-----------------------#2024-06-25](https://towardsdatascience.com/a-guide-to-pythons-weak-references-using-weakref-module-d3381b01db99?source=collection_archive---------6-----------------------#2024-06-25)
- en: 'Learn all about weak references in Python: reference counting, garbage collection,
    and practical uses of the `weakref` module'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解 Python 中弱引用的所有内容：引用计数、垃圾回收以及 `weakref` 模块的实际应用
- en: '[](https://medium.com/@martin.heinz?source=post_page---byline--d3381b01db99--------------------------------)[![Martin
    Heinz](../Images/a8d1540fd32998ee9bda4af0f0232f7d.png)](https://medium.com/@martin.heinz?source=post_page---byline--d3381b01db99--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d3381b01db99--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d3381b01db99--------------------------------)
    [Martin Heinz](https://medium.com/@martin.heinz?source=post_page---byline--d3381b01db99--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@martin.heinz?source=post_page---byline--d3381b01db99--------------------------------)[![Martin
    Heinz](../Images/a8d1540fd32998ee9bda4af0f0232f7d.png)](https://medium.com/@martin.heinz?source=post_page---byline--d3381b01db99--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d3381b01db99--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d3381b01db99--------------------------------)
    [Martin Heinz](https://medium.com/@martin.heinz?source=post_page---byline--d3381b01db99--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d3381b01db99--------------------------------)
    ·6 min read·Jun 25, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d3381b01db99--------------------------------)
    ·阅读时间：6分钟·2024年6月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/85fbf17d8afe2376e51b58139e0a9847.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85fbf17d8afe2376e51b58139e0a9847.png)'
- en: Photo by [Dan Cristian Pădureț](https://unsplash.com/@dancristianpaduret?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/blue-and-white-abstract-painting-SMSLyc9FHl0?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Dan Cristian Pădureț](https://unsplash.com/@dancristianpaduret?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    在 [Unsplash](https://unsplash.com/photos/blue-and-white-abstract-painting-SMSLyc9FHl0?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
- en: Chances are that you never touched and maybe haven’t even heard about Python’s
    `weakref` module. While it might not be commonly used in your code, it's fundamental
    to the inner workings of many libraries, frameworks and even Python itself. So,
    in this article we will explore what it is, how it is helpful, and how you could
    incorporate it into your code as well.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能从未接触过，甚至可能没听说过 Python 的 `weakref` 模块。尽管它在你的代码中可能不常用，但它对许多库、框架甚至 Python 本身的内部工作至关重要。因此，在这篇文章中，我们将探索它是什么，它如何有用，以及你如何将它应用到你的代码中。
- en: The Basics
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础知识
- en: To understand `weakref` module and *weak references*, we first need a little
    intro to garbage collection in Python.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解 `weakref` 模块和*弱引用*，我们首先需要简单了解 Python 中的垃圾回收机制。
- en: Python uses *reference counting* as a mechanism for garbage collection — in
    simple terms — Python keeps a reference count for each object we create and the
    reference count is incremented whenever the object is referenced in code; and
    it’s decremented when an object is de-referenced (e.g. variable set to `None`).
    If the reference count ever drop to zero, the memory for the object is deallocated
    (garbage-collected).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 使用 *引用计数* 作为垃圾回收的机制——简单来说——Python 为我们创建的每个对象保持一个引用计数，当代码中引用该对象时，引用计数会增加；当对象被取消引用时（例如变量设置为
    `None`），引用计数会减少。如果引用计数降到零，内存将被回收（垃圾回收）。
- en: 'Let’s look at some code to understand it a little more:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些代码来更好地理解它：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we define a class that only implements a `__del__` method, which is called
    when object is garbage-collected (GC'ed) - we do this so that we can see when
    the garbage collection happens.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个只实现 `__del__` 方法的类，该方法在对象被垃圾回收（GC）时调用——我们这样做是为了看到垃圾回收发生的时刻。
- en: After creating an instance of this class, we use `sys.getrefcount` to get current
    number of references to this object. We would expect to get `1` here, but the
    count returned by `getrefcount` is generally one higher than you might expect,
    that's because when we call `getrefcount`, the reference is copied by value into
    the function's argument, temporarily bumping up the object's reference count.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了这个类的实例后，我们使用`sys.getrefcount`来获取当前对该对象的引用数。我们本来会期望得到`1`，但`getrefcount`返回的计数通常比预期的要高1，因为当我们调用`getrefcount`时，引用会按值复制到函数的参数中，从而暂时增加对象的引用计数。
- en: Next, if we declare `obj2 = obj` and call `getrefcount` again, we get `3` because
    it's now referenced by both `obj` and `obj2`. Conversely, if we assign `None`
    to these variables, the reference count will decrease to zero, and eventually
    we will get the message from `__del__` method telling us that the object got garbage-collected.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，如果我们声明`obj2 = obj`并再次调用`getrefcount`，我们会得到`3`，因为它现在被`obj`和`obj2`两个变量引用。相反，如果我们将`None`赋值给这些变量，引用计数将减少到零，最终我们将通过`__del__`方法收到对象被垃圾回收的消息。
- en: 'Well, and how do weak references fit into this? If only remaining references
    to an object are *weak references*, then Python interpreter is free to garbage-collect
    this object. In other words — a weak reference to an object is not enough to keep
    the object alive:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，弱引用如何适应这一点呢？如果对象的唯一剩余引用是*弱引用*，那么Python解释器就可以自由地回收这个对象。换句话说——对一个对象的弱引用不足以保持该对象的存活：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we again declare a variable `obj` of our class, but this time instead of
    creating second strong reference to this object, we create weak reference in `reference`
    variable.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们再次声明了一个`obj`变量，作为我们类的实例，但这次我们并没有为这个对象创建第二个强引用，而是在`reference`变量中创建了弱引用。
- en: If we then check the reference count, we can see that it did not increase, and
    if we set the `obj` variable to `None`, we can see that it immediately gets garbage-collected
    even though the weak reference still exist.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们检查引用计数，我们可以看到它没有增加，并且如果我们将`obj`变量设置为`None`，我们可以看到它会立即被垃圾回收，尽管弱引用仍然存在。
- en: Finally, if try to access the weak reference to the already garbage-collected
    object, we get a *“dead”* reference and `None` respectively.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果尝试访问已经被垃圾回收的对象的弱引用，我们将得到一个*“死”*引用，返回值为`None`。
- en: 'Also notice that when we used the weak reference to access the object, we had
    to call it as a function ( `reference()`) to retrieve to object. Therefore, it
    is often more convenient to use a *proxy* instead, especially if you need to access
    object attributes:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 同时请注意，当我们使用弱引用访问对象时，必须将其作为函数调用（`reference()`）来检索对象。因此，通常使用*代理*会更加方便，特别是当你需要访问对象属性时：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When To Use It
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用弱引用
- en: Now that we know how weak references work, let’s look at some examples of how
    they could be useful.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了弱引用是如何工作的，接下来我们来看看它们如何能派上用场。
- en: 'A common use-case for weak references is tree-like data structures:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 弱引用的一个常见用例是树状数据结构：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here we implement a tree using a `Node` class where child nodes have weak reference
    to their parent. In this relation, the child `Node` can live without parent `Node`,
    which allows parent to be silently removed/garbage-collected.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`Node`类实现了一个树，其中子节点对父节点有弱引用。在这种关系中，子`Node`可以在没有父`Node`的情况下存在，这允许父节点在没有任何警告的情况下被删除/垃圾回收。
- en: 'Alternatively, we can flip this around:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以反过来做：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here instead, the parent keeps a dictionary of weak references to its children.
    This uses `WeakValueDictionary` — whenever an element (weak reference) referenced
    from the dictionary gets dereferenced elsewhere in the program, it automatically
    gets removed from the dictionary too, so we don't have manage lifecycle of dictionary
    items.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，相反地，父节点维护了一个子节点的弱引用字典。这使用了`WeakValueDictionary`——每当字典中引用的元素（弱引用）在程序的其他地方被取消引用时，它会自动从字典中移除，因此我们不需要管理字典项的生命周期。
- en: 'Another use of `weakref` is in [*Observer* design pattern](https://en.wikipedia.org/wiki/Observer_pattern):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`weakref`的另一个用途是在[*观察者*设计模式](https://en.wikipedia.org/wiki/Observer_pattern)中：'
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `Observable` class keeps weak references to its observers, because it doesn't
    care if they get removed. As with previous examples, this avoids having to manage
    the lifecycle of dependant objects. As you probably noticed, in this example we
    used `WeakSet` which is another class from `weakref` module, it behaves just like
    the `WeakValueDictionary` but is implemented using `Set`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`Observable`类保持对其观察者的弱引用，因为它不关心它们是否被移除。和之前的例子一样，这避免了管理依赖对象生命周期的需要。正如你可能注意到的，在这个例子中我们使用了`WeakSet`，它是`weakref`模块中的另一个类，行为与`WeakValueDictionary`类似，但它是通过`Set`实现的。'
- en: 'Final example for this section is borrowed from `[weakref](https://docs.python.org/3/library/weakref.html#comparing-finalizers-with-del-methods)`
    [docs](https://docs.python.org/3/library/weakref.html#comparing-finalizers-with-del-methods):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分的最后一个例子来自于`[weakref](https://docs.python.org/3/library/weakref.html#comparing-finalizers-with-del-methods)`文档：[docs](https://docs.python.org/3/library/weakref.html#comparing-finalizers-with-del-methods)：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This showcases one more feature of `weakref` module, which is `weakref.finalize`.
    As the name suggest it allows executing a finalizer function/callback when the
    dependant object is garbage-collected. In this case we implement a `TempDir` class
    which can be used to create a temporary directory - in ideal case we would always
    remember to clean up the `TempDir` when we don't need it anymore, but if we forget,
    we have the finalizer that will automatically run `rmtree` on the directory when
    the `TempDir` object is GC'ed, which includes when program exits completely.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了`weakref`模块的另一个特性，即`weakref.finalize`。顾名思义，它允许在相关对象被垃圾回收时执行一个终结函数/回调。在这个例子中，我们实现了一个`TempDir`类，用于创建临时目录——理想情况下，我们总是会记得在不需要`TempDir`时清理它，但如果忘记了，终结器会在`TempDir`对象被垃圾回收时自动执行`rmtree`，这包括程序完全退出时。
- en: Real-World Examples
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现实世界中的例子
- en: 'The previous section has shown couple practical usages for `weakref`, but let''s
    also take a look at real-world examples—one of them being creating a cached instance:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 前一部分展示了几个`weakref`的实际用途，但我们也来看看一些现实世界中的例子——其中之一是创建缓存实例：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The above is basic usage of Python’s builtin `logging` module - we can see that
    it allows to only associate a single logger instance with a given name - meaning
    that when we retrieve same logger multiple times, it always returns the same cached
    logger instance.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上面展示的是Python内建`logging`模块的基本用法——我们可以看到，它允许只将一个日志实例与给定名称关联——这意味着当我们多次获取相同的日志器时，它始终返回相同的缓存日志实例。
- en: 'If we wanted to implement this, it could look something like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想实现这一点，可能会是这样的：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And finally, Python itself uses weak references, e.g. in implementation of
    `OrderedDict`:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Python本身也使用了弱引用，例如在`OrderedDict`的实现中：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The above is snippet from [CPython’s](https://github.com/python/cpython/blob/0c0348adbfca991f78b3aaa6790e5c26606a1c0f/Lib/collections/__init__.py#L103)
    `[collections](https://github.com/python/cpython/blob/0c0348adbfca991f78b3aaa6790e5c26606a1c0f/Lib/collections/__init__.py#L103)`
    [module](https://github.com/python/cpython/blob/0c0348adbfca991f78b3aaa6790e5c26606a1c0f/Lib/collections/__init__.py#L103).
    Here, the `weakref.proxy` is used to prevent circular references (see the doc-strings
    for more details).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上面是来自[CPython](https://github.com/python/cpython/blob/0c0348adbfca991f78b3aaa6790e5c26606a1c0f/Lib/collections/__init__.py#L103)的`[collections](https://github.com/python/cpython/blob/0c0348adbfca991f78b3aaa6790e5c26606a1c0f/Lib/collections/__init__.py#L103)`[模块](https://github.com/python/cpython/blob/0c0348adbfca991f78b3aaa6790e5c26606a1c0f/Lib/collections/__init__.py#L103)的代码片段。在这里，`weakref.proxy`用于防止循环引用（更多细节请参见文档字符串）。
- en: Conclusion
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: '`weakref` is fairly obscure, but at times very useful tool that you should
    keep in your toolbox. It can be very helpful when implementing caches or data
    structures that have reference loops in them, such as doubly linked lists.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`weakref`是一个相当晦涩但在某些时候非常有用的工具，你应该将其保留在你的工具箱中。当实现缓存或包含引用循环的数据结构时，它非常有帮助，比如双向链表。'
- en: With that said, one should be aware of `weakref` support — everything said here
    and in the docs is CPython specific and different Python implementations will
    have different `weakref` behavior. Also, many of the builtin types don't support
    weak references, such as `list`, `tuple` or `int`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，应该注意到`weakref`的支持——这里以及文档中提到的内容是针对CPython的，其他Python实现会有不同的`weakref`行为。此外，许多内建类型不支持弱引用，例如`list`、`tuple`或`int`。
- en: '*This article was originally posted at* [*martinheinz.dev*](https://martinheinz.dev/blog/112)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文最初发布于* [*martinheinz.dev*](https://martinheinz.dev/blog/112)'
- en: You may also like…
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还会喜欢……
- en: '[](/everything-you-can-do-with-pythons-textwrap-module-0d82c377a4c8?source=post_page-----d3381b01db99--------------------------------)
    [## Everything You Can Do with Python’s textwrap Module'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/everything-you-can-do-with-pythons-textwrap-module-0d82c377a4c8?source=post_page-----d3381b01db99--------------------------------)
    [## 你可以用 Python 的 textwrap 模块做什么'
- en: Learn about all the things you can do with Python’s textwrap module, including
    formatting, text wrapping, trimming and…
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解你可以使用 Python 的 textwrap 模块完成的所有操作，包括格式化、文本换行、修剪等…
- en: towardsdatascience.com](/everything-you-can-do-with-pythons-textwrap-module-0d82c377a4c8?source=post_page-----d3381b01db99--------------------------------)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/everything-you-can-do-with-pythons-textwrap-module-0d82c377a4c8?source=post_page-----d3381b01db99--------------------------------)
