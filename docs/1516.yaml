- en: Creating an Assistant with OpenAI Assistant API and Streamlit
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenAI 助理 API 和 Streamlit 创建助理
- en: 原文：[https://towardsdatascience.com/creating-an-assistant-with-openai-assistant-api-and-streamlit-282d9be9f03e?source=collection_archive---------4-----------------------#2024-06-18](https://towardsdatascience.com/creating-an-assistant-with-openai-assistant-api-and-streamlit-282d9be9f03e?source=collection_archive---------4-----------------------#2024-06-18)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/creating-an-assistant-with-openai-assistant-api-and-streamlit-282d9be9f03e?source=collection_archive---------4-----------------------#2024-06-18](https://towardsdatascience.com/creating-an-assistant-with-openai-assistant-api-and-streamlit-282d9be9f03e?source=collection_archive---------4-----------------------#2024-06-18)
- en: A step-by-step guide
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一步步的指南
- en: '[](https://medium.com/@vanillaxiangshuyang?source=post_page---byline--282d9be9f03e--------------------------------)[![Shuyang
    Xiang](../Images/36a5fd18fd9b7b88cb41094f09b83882.png)](https://medium.com/@vanillaxiangshuyang?source=post_page---byline--282d9be9f03e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--282d9be9f03e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--282d9be9f03e--------------------------------)
    [Shuyang Xiang](https://medium.com/@vanillaxiangshuyang?source=post_page---byline--282d9be9f03e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@vanillaxiangshuyang?source=post_page---byline--282d9be9f03e--------------------------------)[![Shuyang
    Xiang](../Images/36a5fd18fd9b7b88cb41094f09b83882.png)](https://medium.com/@vanillaxiangshuyang?source=post_page---byline--282d9be9f03e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--282d9be9f03e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--282d9be9f03e--------------------------------)
    [Shuyang Xiang](https://medium.com/@vanillaxiangshuyang?source=post_page---byline--282d9be9f03e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--282d9be9f03e--------------------------------)
    ·6 min read·Jun 18, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--282d9be9f03e--------------------------------)
    ·6分钟阅读·2024年6月18日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/c668f6173825f0585d7ec25aca505ba6.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c668f6173825f0585d7ec25aca505ba6.png)'
- en: 'Image by author: assistant done with assistant api and streamlit'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片：使用助理 API 和 Streamlit 完成的助理
- en: OpenAI Assistant API
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenAI 助理 API
- en: 'OpenAI has recently introduced new features that showcase an agent-like architecture,
    such as the Assistant API. According to OpenAI:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAI 最近推出了展示代理架构的新功能，例如助理 API。根据 OpenAI 的介绍：
- en: 'The Assistants API allows you to build AI assistants within your own applications.
    An Assistant has instructions and can leverage models, tools, and files to respond
    to user queries. The Assistants API currently supports three types of tools: Code
    Interpreter, File Search, and Function calling.'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 助理 API 允许你在自己的应用程序中构建 AI 助理。一个助理有指令，并可以利用模型、工具和文件来响应用户的查询。助理 API 当前支持三种类型的工具：代码解释器、文件搜索和函数调用。
- en: While these advancements are promising, they still lag behind LangChain. LangChain
    enables the creation of agent-like systems powered by LLMs with greater flexibility
    in processing natural language input and executing context-based actions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些进展充满了前景，但它们仍然落后于 LangChain。LangChain 使得创建由 LLM 支持的类似代理的系统成为可能，且在处理自然语言输入和执行基于上下文的操作时更加灵活。
- en: However, this is only the beginning.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这仅仅是开始。
- en: 'At a high level, interaction with the Assistant API can be envisioned as a
    loop:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，与助理 API 的交互可以被视为一个循环：
- en: Given a user input, an LLM is called to determine whether to provide a response
    or take specific actions.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定用户输入，调用 LLM 来决定是否提供响应或采取特定行动。
- en: If the LLM’s decision suffices to answer the query, the loop ends.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 LLM 的决定足以回答查询，则循环结束。
- en: If an action leads to a new observation, this observation is included in the
    prompt, and the LLM is called again.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个动作导致了新的观察结果，那么这个观察结果将被包含在提示中，并且 LLM 会再次被调用。
- en: The loop then restarts.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后循环重新开始。
- en: '![](../Images/070f496f4c9531b9c9a982299f110bdf.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/070f496f4c9531b9c9a982299f110bdf.png)'
- en: 'Image by author: LLM agent loop'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片：LLM 代理循环
- en: Unfortunately, despite the announced advantages, I found the documentation for
    the API to be poorly done, especially regarding interactions with custom function
    calls and building apps using frameworks like Streamlit.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，尽管有宣布的优势，我发现 API 的文档做得很差，尤其是在与自定义函数调用的交互以及使用如 Streamlit 等框架构建应用时。
- en: In this blog post, I will guide you through building an AI assistant using the
    OpenAI Assistant API with custom function calls, paired with a Streamlit interface,
    to help those interested in effectively using the Assistant API.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博文中，我将引导你通过使用OpenAI助手API和自定义函数调用来构建一个AI助手，结合Streamlit界面，帮助那些有兴趣有效使用助手API的人。
- en: 'Use case: Tax Computation Assistant'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用案例：税费计算助手
- en: 'In this blog post, I will demonstrate a simple example: an AI assistant capable
    of calculating tax based on a given revenue. Langchain users can easily come into
    mind implementing this by creating an [agent](https://python.langchain.com/v0.1/docs/modules/agents/)
    with a “tax computation” tool.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博文中，我将展示一个简单的示例：一个能够根据给定收入计算税费的AI助手。Langchain 用户可以轻松地通过创建一个带有“税费计算”工具的[代理](https://python.langchain.com/v0.1/docs/modules/agents/)来实现这一点。
- en: This tool would include the necessary computation steps and a well-designed
    prompt to ensure the LLM knows when to call the tool whenever a question involves
    revenue or tax.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具将包括必要的计算步骤和一个设计良好的提示，以确保LLM在任何涉及收入或税费的问题中都知道何时调用该工具。
- en: However, this process is not exactly the same with the OpenAI Assistant API.
    While the code interpreter and file search tools can be used directly in a straightforward
    manner according to [OpenAI’s documentation](https://platform.openai.com/docs/assistants/how-it-works/creating-assistants),
    custom tools require a slightly different approach.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这一过程与OpenAI助手API的工作方式并不完全相同。虽然代码解释器和文件搜索工具可以直接按照[OpenAI的文档](https://platform.openai.com/docs/assistants/how-it-works/creating-assistants)以直接的方式使用，但自定义工具则需要稍微不同的方法。
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s break it down step by step. We aim to:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步步来解析。我们的目标是：
- en: Define a function that computes tax based on given revenue.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个根据给定收入计算税费的函数。
- en: Develop a tool using this function.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这个函数开发一个工具。
- en: Create an assistant that can access this tool and call it whenever tax computation
    is needed.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个可以访问此工具的助手，并在需要计算税费时调用它。
- en: Tax Computation Function for Assistant Integration
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 助手集成的税费计算功能
- en: Please note that the tax computation tool described in the following paragraph
    is designed as a toy example to demonstrate how to use the API discussed in the
    post. It should not be used for actual tax calculations.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，下面段落中描述的税费计算工具仅作为一个示例，用于展示如何使用本文讨论的API。它不应当用于实际的税费计算。
- en: 'Consider the following piecewise function, which returns the tax value for
    a given revenue. Note that the input is set as a string for simpler parsing:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下分段函数，它返回给定收入的税费值。请注意，输入被设置为字符串，以便更简单地解析：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we define the assistant:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义助手：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, the essential point:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，关键点：
- en: How does the assistant use the function when “calculate_tax” is called? This
    part is poorly documented in the OpenAI assistant, and many users might get confused
    the first time using it. To handle this, we need to define an `EventHandler` to
    manage different events in the response stream, specifically how to handle the
    event when the "calculate_tax" tool is called.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当“calculate_tax”被调用时，助手如何使用该函数？这一部分在OpenAI助手文档中说明得不够清楚，许多用户在第一次使用时可能会感到困惑。为了解决这个问题，我们需要定义一个`EventHandler`来管理响应流中的不同事件，特别是如何处理当“calculate_tax”工具被调用时的事件。
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The code above works as follows: For each tool call that requires action:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码如下工作：对于每个需要操作的工具调用：
- en: Check if the function name is “calculate_tax”.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查函数名是否为“calculate_tax”。
- en: Extract the revenue value from the tool parameters.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从工具参数中提取收入值。
- en: Call the `calculate_tax` function with the revenue to compute the tax. (This
    is where the real interaction happens.)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`calculate_tax`函数并传入收入值来计算税费。（这就是实际交互发生的地方。）
- en: After processing all tool calls, submit the collected results.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在处理完所有工具调用后，提交收集到的结果。
- en: Talking to the assistant
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与助手对话
- en: 'You can now interact with the assistant following these standard steps documented
    by OpenAI (for that reason, I will not provide many details in this section):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以按照OpenAI文档中的标准步骤与助手互动（因此我不会在这一部分提供过多细节）：
- en: '**Create a thread:** This represents a conversation between a user and the
    assistant.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建一个线程：** 这代表了用户与助手之间的对话。'
- en: '**Add user messages:** These can include both text and files, which are added
    to the thread.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**添加用户消息：** 这些可以包括文本和文件，都会被添加到对话线程中。'
- en: '**Create a run:** Utilize the model and tools associated with the assistant
    to generate a response. This response is then added back to the thread.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建运行：** 利用与助手关联的模型和工具生成回应，然后将该回应添加回线程中。'
- en: 'The code snippet below demonstrates how to run the assistant in my specific
    use case: The code sets up a streaming interaction with an assistant using specific
    parameters, including a thread ID and an assistant ID. An `EventHandler` instance
    manages events during the stream. The `stream.until_done()` method keeps the stream
    active until all interactions are complete. The `with` statement ensures that
    the stream is properly closed afterward.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段演示了如何在我的特定用例中运行助手：代码设置了与助手的流式交互，使用了特定的参数，包括线程 ID 和助手 ID。一个`EventHandler`实例在流期间管理事件。`stream.until_done()`方法保持流式传输，直到所有交互完成。`with`语句确保流结束后能够正确关闭。
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Streamlit interface
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Streamlit 界面
- en: While my post could end here, I’ve noticed numerous inquiries on the Streamlit
    forum ([like this one](https://discuss.streamlit.io/t/openai-assistants-api-streaming/64690/3))
    where users struggle to get streaming to work on the interface, even though it
    functions perfectly in the terminal. This prompted me to delve deeper.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我的文章可以在这里结束，但我注意到在 Streamlit 论坛上有许多类似的询问（[像这个](https://discuss.streamlit.io/t/openai-assistants-api-streaming/64690/3)），用户在界面上无法使流式传输正常工作，尽管它在终端中运行良好。这促使我深入探讨。
- en: 'To successfully integrate streaming into your app, you’ll need to extend the
    functionality of the EventHandler class mentioned earlier, specifically focusing
    on handling text creation, text deltas, and text completion. Here are the three
    key steps required to display text in the Streamlit interface while managing chat
    history:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功将流式传输集成到您的应用中，您需要扩展前面提到的`EventHandler`类的功能，特别是处理文本创建、文本增量和文本完成。以下是显示文本到
    Streamlit 界面并管理聊天历史记录的三个关键步骤：
- en: '**Handling Text Creation (**`**on_text_created**`**):** Initiates and displays
    a new text box for each response from the assistant, updating the UI to reflect
    the status of preceding actions.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**处理文本创建（**`**on_text_created**`**）：** 为每个助手的回应初始化并显示一个新的文本框，更新用户界面以反映前面操作的状态。'
- en: '**Handling Text Delta (**`**on_text_delta**`**):** Dynamically updates the
    current text box as the assistant generates text, enabling incremental changes
    without refreshing the entire UI.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**处理文本增量（**`**on_text_delta**`**）：** 当助手生成文本时，动态更新当前文本框，使增量更改得以实现，而无需刷新整个界面。'
- en: '**Handling Text Completion (**`**on_text_done**`**):** Finalizes each interaction
    segment by adding a new empty text box, preparing for the next interaction. Additionally,
    it records completed conversation segments in `chat_history`.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**处理文本完成（**`**on_text_done**`**）：** 通过添加一个新的空文本框来完成每个交互片段，为下一个交互做准备。此外，它会将已完成的对话片段记录在`chat_history`中。'
- en: 'For instance, consider the following code snippet for managing text deltas:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下代码片段来管理文本增量：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This code accomplishes three main tasks:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码完成了三个主要任务：
- en: '**Clearing the Latest Text Box:** Empties the content of the most recent text
    box (`st.session_state.text_boxes[-1]`) to prepare it for new input.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清除最新的文本框：** 清空最近的文本框内容（`st.session_state.text_boxes[-1]`），以便为新输入做好准备。'
- en: '**Appending Delta Value to Assistant Text:** If new text (`delta.value`) is
    present, it appends this to the ongoing assistant text stored in `st.session_state.assistant_text[-1]`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将增量值追加到助手文本中：** 如果有新文本（`delta.value`），它会将该文本追加到存储在`st.session_state.assistant_text[-1]`中的助手文本。'
- en: '**Re-displaying Updated Assistant Text:** Updates the content of the latest
    text box to reflect the combined content of all assistant text accumulated so
    far (`st.session_state["assistant_text"][-1]`).'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新显示更新后的助手文本：** 更新最新文本框的内容，反映到目前为止所有助手文本的合并内容（`st.session_state["assistant_text"][-1]`）。'
- en: 'Video by author: the assistant done in this post'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 作者视频：这篇文章中的助手
- en: Conclusion
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This blog post demonstrated how to use the OpenAI Assistant API and Streamlit
    to build an AI assistant capable of calculating tax.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本文演示了如何使用 OpenAI Assistant API 和 Streamlit 构建一个能够计算税收的 AI 助手。
- en: I did this simple project to highlight the capabilities of the Assistant API,
    despite its less-than-clear documentation. My goal was to clarify ambiguities
    and provide some guidance for those interested in using the Assistant API. I hope
    this post has been helpful and encourages you to explore further possibilities
    with this powerful tool.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我做了这个简单的项目，旨在突出**Assistant API**的功能，尽管它的文档不够清晰。我的目标是澄清一些模糊之处，并为那些有兴趣使用Assistant
    API的人提供一些指导。希望这篇文章对你有所帮助，并鼓励你进一步探索这个强大工具的其他可能性。
- en: Due to space constraints, I have tried to avoid including unnecessary code snippets.
    However, if needed, please visit my [Github repository](https://github.com/ShuyangenFrance/openai_assistant)
    to view the complete implementation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 由于空间限制，我尽量避免包含不必要的代码片段。不过，如果需要，请访问我的[Github仓库](https://github.com/ShuyangenFrance/openai_assistant)查看完整实现。
