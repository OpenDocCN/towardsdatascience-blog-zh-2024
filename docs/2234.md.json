["```py\nshape = gpd.read_file('YOUR_FILE.shp')\nshape = shape[(shape['NAME_1']=='Kiev') | (shape['NAME_1']=='Kiev City') | (shape['NAME_1']=='?') | (shape['NAME_1']=='Kharkiv')|\\\n              (shape['NAME_1']=='Odessa')]\nshape.plot(color='grey', edgecolor='black')\n\nplt.axis('off')\nplt.text(35,48, 'Kharkov', fontsize=20)\nplt.text(31,46, 'Odessa', fontsize=20)\nplt.text(31,49, 'Kiev', fontsize=20)\nplt.savefig('UKR_shape.png')\nplt.show()\n```", "```py\nimport json\nimport ee\n\njs = json.loads(shape.to_json())\nroi = ee.Geometry(ee.FeatureCollection(js).geometry())\n```", "```py\nstartDate = pd.to_datetime('2012-01-01')\nendDate = pd.to_datetime('2024-04-01')\ndata = ee.ImageCollection(\"NOAA/VIIRS/DNB/MONTHLY_V1/VCMSLCFG\")\\\n                  .filterBounds(roi)\\\n                  .filterDate(start = startDate, end=endDate)\n```", "```py\narrays, dates, rads = [], [], []\n  if data.size().getInfo()!=0:\n      data_list = data.toList(data.size())\n      for i in range(data_list.size().getInfo()):\n          array, date = to_array(data_list,i, roi)\n\n          rads.append(array['avg_rad'][np.where(array['cf_cvg']>1)].mean())\n          dates.append(date)\n          if date>=pd.to_datetime('2022-01-01'):\n            arrays.append(array['avg_rad'])\n          print(f'Index: {i+1}/{data_list.size().getInfo()+1}')\n  df = pd.DataFrame({'date': dates, 'avg_rad':rads})\n  np.save(f'{city}.npy', arrays, allow_pickle=True)\n  df.to_csv(f'{city}.csv', index=None)\n```", "```py\ndf = pd.read_csv(f'{city}.csv')\ndf.date = pd.to_datetime(df.date)\nts_lon = df[df.date<pd.to_datetime('2022-01-01')].set_index('date')\nmeans = ts_lon.groupby(ts_lon.index.month).mean()\n\nts_short = df[df.date>=pd.to_datetime('2022-01-01')].set_index('date')\nts_short['month'] = ts_short.index.month\nanomaly = ts_short['avg_rad']-ts_short['month'].map(means['avg_rad'])\n```", "```py\ndef plot(city, arrays, dates, rads):\n  def update(frame):\n    im1.set_data(arrays[frame])\n\n    info_text = (\n        f\"Date: {pd.to_datetime(dates[frame]).strftime(format='%Y-%m-%d')}\\n\"\n    )\n    text.set_text(info_text)\n    ax[0].axis('off')\n\n    im2.set_data(dates[0:frame+1], rads[0:frame+1])\n\n    ax[1].relim()\n    return [im1, im2]\n\n  colors = [(0, 0, 0), (1, 1, 0)]\n  cmap_name = 'black_yellow'\n  black_yellow_cmap = LinearSegmentedColormap.from_list(cmap_name, colors)\n\n  llim = -1 \n\n  fig, ax = plt.subplots(1,2,figsize=(12,8), frameon=False)\n  im1 = ax[0].imshow(arrays[0], vmax=10, cmap=black_yellow_cmap)\n  text = ax[0].text(20, 520, \"\", ha='left', fontsize=14, fontname='monospace', color='white')\n\n  im2, = ax[1].plot(dates[0], rads[0], marker='o',color='black', lw=2)\n  plt.xticks(rotation=45)\n  ax[1].axhline(0, lw=3, color='black')\n  ax[1].axhline(0, lw=1.5, ls='--', color='yellow')\n  ax[1].grid(False)\n  ax[1].spines[['right', 'top']].set_visible(False)\n  ax[1].set_xlabel('Date', fontsize=14, fontname='monospace')\n  ax[1].set_ylabel('Average DNB radiance', fontsize=14, fontname='monospace')\n  ax[1].set_ylim(llim, max(rads)+0.1)\n  ax[1].set_xlim(min(dates), max(dates))\n\n  ani = animation.FuncAnimation(fig, update, frames=27, interval=40)\n  ani.save(f'{city}.gif', fps=0.5, savefig_kwargs={'pad_inches':0, 'bbox_inches': 'tight'})\n  plt.show()\n```"]