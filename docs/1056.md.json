["```py\nimport pandas as pd\n\n# Creating the training_data DataFrame in Python\ntraining_data = pd.DataFrame({\n    'numerical_1': [1, 2, 3, 4, 5, 6, 7, 8],\n    'color_1_': ['black', 'black', 'red', 'green', \n                'green', 'black', 'red', 'blue'],\n    'color_2_': ['black', 'blue', 'pink', 'purple', \n                'black', 'blue', 'pink', 'purple']\n})\n```", "```py\n# Creating the inference_data DataFrame in Python\ninference_data = pd.DataFrame({\n    'numerical_1': [11, 12, 13, 14, 15, 16, 17, 18],\n    'color_1_': ['black', 'blue', 'black', 'green', \n                'green', 'black', 'black', 'blue'],\n    'color_2_': ['orange', 'orange', 'black', 'orange', \n                'black', 'orange', 'orange', 'orange']\n})\n```", "```py\n# Converting categorical columns in inference_data to \n# Dummy variables with integers\ninference_data_dummies = pd.get_dummies(inference_data, \n  columns=['color_1_', 'color_2_']).astype(int)\n```", "```py\nmissing_colmns =['color_1__red', 'color_2__pink', \n  'color_2__blue', 'color_2__purple']\n```", "```py\nfrom sklearn.preprocessing import OneHotEncoder\n\n# Initialize the encoder\nenc = OneHotEncoder(handle_unknown='ignore')\n\n# Define columns to transform\ntrans_columns = ['color_1_', 'color_2_']\n\n# Fit and transform the data\nenc_data = enc.fit_transform(training_data[trans_columns])\n\n# Get feature names\nfeature_names = enc.get_feature_names_out(trans_columns)\n\n# Convert to DataFrame\nenc_df = pd.DataFrame(enc_data.toarray(), \n                          columns=feature_names)\n\n# Concatenate with the numerical data\nfinal_df = pd.concat([training_data[['numerical_1']], \n                      enc_df], axis=1)\n```", "```py\n# Transform inference data\ninference_encoded = enc.transform(inference_data[trans_columns])\n\ninference_feature_names = enc.get_feature_names_out(trans_columns)\n\ninference_encoded_df = pd.DataFrame(inference_encoded.toarray(), \n                                    columns=inference_feature_names)\n\nfinal_inference_df = pd.concat([inference_data[['numerical_1']], \n                                inference_encoded_df], axis=1)\n```", "```py\nRUN R -e \"install.packages('recipes', dependencies=TRUE, repos='https://cran.rstudio.com/')\"\n```", "```py\nlibrary(data.table)\n\nOneHotEncoder <- function() {\n  # Local variables\n  categories <- list()\n\n  # Method to fit data and extract categories\n  fit <- function(dt, columns) {\n    for (column in columns) {\n      categories[[column]] <<- unique(dt[[column]])\n    }\n  }\n\n  # Method to turn columns into factors and \n  factorize <- function(dt) {\n    for (column_name in names(categories)) {\n        set(dt, j = column_name, \n        value = factor(dt[[column_name]], \n        levels = categories[[column_name]]))\n    }\n    return(dt)\n  }\n\n  # Method to transform columns in categories list to \n  # dummy variables\n  transform <- function(dt) {\n    dt = factorize(dt)\n    # add row number for joins later\n    dt[, rn := .I]\n    for (col in names(categories)) {\n      print(col)\n      # Construct the formula dynamically\n      formula_str <- paste(\"~\", col, \"- 1\")\n      formula_obj <- as.formula(formula_str)\n      # Create a model model.matrix object\n      mm = model.matrix(formula_obj, dt)\n      mm_dt <- as.data.table(mm, keep.rownames = \"rn\")\n      mm_dt[, rn := as.integer(rn)]\n\n      # Perform a merge based on these row numbers\n      dt <- merge(dt, mm_dt, by = \"rn\", all = TRUE)\n\n       # remove the original column\n      dt[, (col) := NULL]\n\n      # set any new NAs to 0\n      for (ncol in names(mm_dt)) {\n        set(dt, which(is.na(dt[[ncol]])), ncol, 0)\n      }\n    }\n    dt[, rn := NULL]\n    return(dt)\n  }\n\n  # Method to get categories\n  get_categories <- function() {\n    return(categories)\n  }\n\n  # Return a list of methods\n  list(\n    get_categories = get_categories,\n    fit = fit,\n    transform = transform\n  )\n}\n```", "```py\n encoder = OneHotEncoder()\n```", "```py\n# Columns to one-hot encode\nfit_columns = c(\"color_1_\", \"color_2\")\n# Use the fit method\nencoder$fit(dt=training_data, columns=fit_columns)\n```", "```py\nsaveRDS(encoder, \"~/my_encoder.RDS\")\n```", "```py\ntransformed_training_data = encoder$transform(training_data)\n```", "```py\ntransformed_inference_data = encoder$transform(inference_data)\n```"]