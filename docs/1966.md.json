["```py\nclass LLMManager():\n    def __init__(self, model: str = 'gpt-4o'):\n        self.model = model\n\n        load_dotenv(\"secrets.env\")\n        openai_api_key = os.getenv(\"OPENAI_API_KEY\")\n        self.client = OpenAI(api_key=openai_api_key)\n\n    def call_llm(self, system_prompt: str, user_prompt: str, temperature: float) -> str:\n        print(f\"Calling LLM with system prompt: {system_prompt}\\n\\nUser prompt: {user_prompt}\")\n        response: ChatCompletion = self.client.chat.completions.create(\n            messages=[\n                {\"role\": \"system\", \"content\": system_prompt},\n                {\"role\": \"user\", \"content\": user_prompt}\n            ],\n            model=self.model,\n            temperature=temperature\n        )\n        message = response.choices[0].message.content\n        print(response)\n        return message\n```", "```py\nSYSTEM_TEMPLATE = \"\"\"You are a senior staff data analyst at a world class tech company.\nYou are designing a data analysis interview for hiring candidates.\"\"\"\n\nDATA_GENERATION_USER_TEMPLATE = \"\"\"Create a dataset for a data analysis interview that contains interesting insights.\nSpecifically, generate comma delimited csv output with the following characteristics:\n- Relevant to company: {company}\n- Dataset description: {description}\n- Number of rows: 100\n- Number of columns: 5\nOnly include csv data in your response. Do not include any other information.\nStart your output with the first header of the csv: \"id,\".\nOutput: \"\"\"\n```", "```py\n def generate_interview_dataset(self, company: str, description: str, mock_data: bool) -> str:\n        if not mock_data:\n            data_generation_user_prompt = DATA_GENERATION_USER_TEMPLATE.format(company=company, description=description)\n            dataset = self.llm_manager.call_llm(\n                system_prompt=SYSTEM_TEMPLATE,\n                user_prompt=data_generation_user_prompt,\n                temperature=0\n            )\n\n            dataset = self.clean_llm_dataset_output(dataset)\n            return dataset\n\n        return MOCK_DATASET\n\n    def clean_llm_dataset_output(self, dataset: str) -> str:\n        cleaned_dataset = dataset[dataset.index(\"id,\"):]\n        return cleaned_dataset\n```", "```py\n def convert_str_to_df(self, dataset: str) -> pd.DataFrame:\n        csv_data = StringIO(dataset)\n\n        try:\n            df = pd.read_csv(csv_data)\n        except Exception as e:\n            raise ValueError(f\"Error in converting LLM csv output to DataFrame: {e}\")\n\n        return df\n```", "```py\nQUESTION_GENERATION_USER_TEMPLATE = \"\"\"Generate 3 data analysis interview questions that can be solved with Python pandas code based on the dataset below:\n\nDataset:\n{dataset}\n\nOutput the questions in a Python list where each element is a question. Start your output with [\".\nDo not include question indexes like \"1.\" in your output.\nOutput: \"\"\"\n```", "```py\n def generate_interview_questions(self, dataset: str) -> InterviewQuestions:\n\n        question_generation_user_prompt = QUESTION_GENERATION_USER_TEMPLATE.format(dataset=dataset)\n        questions = self.llm_manager.call_llm(\n            system_prompt=SYSTEM_TEMPLATE,\n            user_prompt=question_generation_user_prompt,\n            temperature=0\n        )\n\n        try:\n            questions_list = literal_eval(questions)\n        except Exception as e:\n            raise ValueError(f\"Error in converting LLM questions output to list: {e}\")\n\n        questions_structured = InterviewQuestions(\n            question_1=questions_list[0],\n            question_2=questions_list[1],\n            question_3=questions_list[2]\n        )\n\n        return questions_structured\n```", "```py\nANSWER_GENERATION_USER_TEMPLATE = \"\"\"Generate an answer to the following data analysis interview Question based on the Dataset.\n\nDataset:\n{dataset}\n\nQuestion: {question}\n\nThe answer should be executable Pandas Python code where df refers to the Dataset above.\nAlways start your answer with a comment explaining what the following code does.\nDO NOT DEFINE df IN YOUR RESPONSE.\nAnswer: \"\"\"\n```", "```py\nclass CodeExecutor():\n\n    def execute_code(self, df: pd.DataFrame, input_code: str):\n\n        local_vars = {'df': df}\n        code_prefix = \"\"\"import pandas as pd\\nresult = \"\"\"\n        try:\n            exec(code_prefix + input_code, {}, local_vars)\n        except Exception as e:\n            return f\"Error in code execution: {e}\\nCompiled code: {code_prefix + input_code}\"\n\n        execution_result = local_vars.get('result', None)\n\n        if isinstance(execution_result, pd.DataFrame):\n            return execution_result.to_html()\n\n        return execution_result\n```"]