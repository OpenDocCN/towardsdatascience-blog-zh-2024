["```py\nimport reflex as rx\nfrom reflex_ag_grid import ag_grid\nimport yfinance as yf\nfrom datetime import datetime, timedelta\nimport pandas as pd\n```", "```py\n# The list of companies to fetch data for\ncompanies = [\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"META\"]\n\nclass State(rx.State):\n    # The data fetched from Yahoo Finance\n    data: pd.DataFrame\n    # The data to be displayed in the AG Grid\n    dict_data: list[dict] = [\\{}]\n    # The datetime of the current fetched data\n    datetime_now: datetime = datetime.now()\n\n    def fetch_stock_data(self):\n        self.datetime_now = datetime.now()\n        start_date = self.datetime_now - timedelta(days=180)\n\n        # Fetch data for all tickers in a single download\n        self.data = yf.download(companies, start=start_date, end=self.datetime_now, group_by='ticker')\n        rows = []\n        for ticker in companies:\n            # Check if the DataFrame has a multi-level column index (for multiple tickers)\n            if isinstance(self.data.columns, pd.MultiIndex):\n                ticker_data = self.data[ticker]  # Select the data for the current ticker\n            else:\n                ticker_data = self.data  # If only one ticker, no multi-level index exists\n\n            for date, row in ticker_data.iterrows():\n                rows.append({\n                    \"ticker\": ticker,\n                    \"date\": date.strftime(\"%Y-%m-%d\"),\n                    \"open\": round(row[\"Open\"], 2),\n                    \"high\": round(row[\"High\"], 2),\n                    \"mid\": round((row[\"High\"] + row[\"Low\"]) / 2, 2),\n                    \"low\": round(row[\"Low\"], 2),\n                    \"close\": round(row[\"Close\"], 2),\n                    \"volume\": int(row[\"Volume\"]),\n                })\n\n        self.dict_data = sorted(rows, key=lambda x: (x[\"date\"], x[\"ticker\"]), reverse=True)\n```", "```py\nrx.button(\n    \"Fetch Latest Data\", \n    on_click=State.fetch_stock_data, \n)\n```", "```py\ncolumn_defs = [\n    ag_grid.column_def(field=\"ticker\", header_name=\"Ticker\", filter=ag_grid.filters.text, checkbox_selection=True),\n    ag_grid.column_def(field=\"date\", header_name=\"Date\", filter=ag_grid.filters.date),\n    ag_grid.column_def(field=\"open\", header_name=\"Open\", filter=ag_grid.filters.number),\n    ag_grid.column_def(field=\"high\", header_name=\"High\", filter=ag_grid.filters.number),\n    ag_grid.column_def(field=\"low\", header_name=\"Low\", filter=ag_grid.filters.number),\n    ag_grid.column_def(field=\"close\", header_name=\"Close\", filter=ag_grid.filters.number),\n    ag_grid.column_def(field=\"volume\", header_name=\"Volume\", filter=ag_grid.filters.number),\n]\n```", "```py\nag_grid(\n    id=\"myAgGrid\",\n    column_defs=column_defs,\n    row_data=State.dict_data,\n    pagination=True,\n    pagination_page_size=20,\n    pagination_page_size_selector=[10, 20, 50, 100],\n    theme=State.grid_theme,\n    on_selection_changed=State.handle_selection,\n    width=\"100%\",\n    height=\"60vh\",\n)\n```", "```py\nclass State(rx.State):\n    ...\n    # The theme of the AG Grid\n    grid_theme: str = \"quartz\"\n    # The list of themes for the AG Grid\n    themes: list[str] = [\"quartz\", \"balham\", \"alpine\", \"material\"]\n\nrx.select(\n    State.themes,\n    value=State.grid_theme,\n    on_change=State.set_grid_theme,\n    size=\"1\",\n)\n```", "```py\nclass State(rx.State):\n    ...\n    # The selected rows in the AG Grid\n    selected_rows: list[dict] = None\n    # The currently selected company in AG Grid\n    company: str\n    # The data fetched from Yahoo Finance\n    data: pd.DataFrame\n    # The data to be displayed in the line graph\n    dff_ticker_hist: list[dict] = None\n\n    def handle_selection(self, selected_rows, _, __):\n        self.selected_rows = selected_rows\n        self.update_line_graph()\n\n    def update_line_graph(self):\n        if self.selected_rows:\n            ticker = self.selected_rows[0][\"ticker\"]\n        else:\n            self.dff_ticker_hist = None\n            return\n        self.company = ticker\n\n        dff_ticker_hist = self.data[ticker].reset_index()\n        dff_ticker_hist[\"Date\"] = pd.to_datetime(dff_ticker_hist[\"Date\"]).dt.strftime(\"%Y-%m-%d\")\n\n        dff_ticker_hist[\"Mid\"] = (dff_ticker_hist[\"Open\"] + dff_ticker_hist[\"Close\"]) / 2\n        dff_ticker_hist[\"DayDifference\"] = dff_ticker_hist.apply(\n            lambda row: [row[\"High\"] - row[\"Mid\"], row[\"Mid\"] - row[\"Low\"]], axis=1\n        )\n\n        self.dff_ticker_hist = dff_ticker_hist.to_dict(orient=\"records\")\n\nrx.recharts.line_chart(\n    rx.recharts.line(\n        rx.recharts.error_bar(\n            data_key=\"DayDifference\",\n            direction=\"y\",\n            width=4,\n            stroke_width=2,\n            stroke=\"red\",\n        ),\n        data_key=\"Mid\",\n    ),\n    rx.recharts.x_axis(data_key=\"Date\"),\n    rx.recharts.y_axis(domain=[\"auto\", \"auto\"]),\n    data=State.dff_ticker_hist,\n    width=\"100%\",\n    height=300,\n)\n```"]