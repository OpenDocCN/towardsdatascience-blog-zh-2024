["```py\n// Partitions sequence A[0..N) with pivot value 'p' \n// upon Hoare scheme, and returns index of the first value \n// of the resulting right part.\nfunction partition_hoare( A[0..N) : Array of Integers, p: Integer ) : Integer\n    i := 0\n    j := N-1\n    while true\n        // Move left index 'i', as much as needed\n        while i < j and A[i] < p\n            i := i+1\n        // Move right index 'j', as much as needed\n        while i < j and A[j] >= p\n            j := j-1\n        // Check for completion\n        if i >= j\n            if i == j and A[i] < p\n                return i+1  // \"A[i]\" also refers to left part\n            else\n                return i  // \"A[i]\" refers to right part\n        // Swap \"A[i]\" and \"A[j]\"\n        tmp := A[i]\n        A[i] := A[j]\n        A[j] := tmp\n        // Advance by one both 'i' and 'j'\n        i := i+1\n        j := j-1\n```", "```py\ntmp := a\na := b\nb := tmp\n```", "```py\ntmp := A[0]\nA[0] := A[1]\nA[1] := A[2]\n...\nA[9] := A[10]\nA[10] := A[11]\nA[11] := tmp\n```", "```py\ntmp := A[0]\nA[0] := A[3]\nA[3] := A[6]\nA[6] := A[9]\nA[9] := tmp\n```", "```py\ntmp := A[0]    // Cycle 1\nA[0] := A[11]\nA[11] := tmp\ntmp := A[1]    // Cycle 2\nA[1] := A[10]\nA[10] := tmp\n\n...\n\ntmp := A[5]    // Cycle 6\nA[5] := A[6]\nA[6] := tmp\n```", "```py\n// Partitions sequence A[0..N) with pivot value 'p' \n// by \"cyclic partition\" scheme, and returns index of \n// the first value of the resulting right part.\nfunction partition_cyclic( A[0..N) : Array of Integers, p: Integer ) : Integer\n    i := 0\n    j := N-1\n    // Find the first value from left, which is not on its place\n    while i < N and A[i] < p\n        i := i+1\n    if i == N\n        return N  // All N values go to the left part\n    // The cycle of assignments starts here\n    tmp := A[i]  // The only write to 'tmp' variable\n    while true\n        // Move right index 'j', as much as needed\n        while i < j and A[j] >= p\n            j := j-1\n        if i == j  // Check for completion of scans\n            break\n        // The next assignment in the cycle\n        A[i] := A[j]\n        i := i+1\n        // Move left index 'i', as much as needed\n        while i < j and A[i] < p\n            i := i+1\n        if i == j  // Check for completion of scans\n            break\n        // The next assignment in the cycle\n        A[j] := A[i]\n        j := j-1\n    // The scans have completed\n    A[j] := tmp  // The only read from 'tmp' variable\n    return j\n```"]