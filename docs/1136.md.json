["```py\n|   token    | logit |\n|------------|-------|\n| day        |    40 |\n| space      |     4 |\n| furniture  |     2 |\n| experience |    35 |\n| problem    |    25 |\n| challenge  |    15 |\n```", "```py\nimport numpy as np\nimport seaborn as sns\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom ipywidgets import interactive, FloatSlider\n\ndef softmax(logits):\n    exps = np.exp(logits)\n    return exps / np.sum(exps)\n\ndata = {\n    \"tokens\": [\"day\", \"space\", \"furniture\", \"experience\", \"problem\", \"challenge\"],\n    \"logits\": [5, 2.2, 2.0, 4.5, 3.0, 2.7]\n}\ndf = pd.DataFrame(data)\ndf['probabilities'] = softmax(df['logits'].values)\ndf\n```", "```py\n| No. |   tokens   | logits | probabilities |\n|-----|------------|--------|---------------|\n|   0 | day        |    5.0 |      0.512106 |\n|   1 | space      |    2.2 |      0.031141 |\n|   2 | furniture  |    2.0 |      0.025496 |\n|   3 | experience |    4.5 |      0.310608 |\n|   4 | problem    |    3.0 |      0.069306 |\n|   5 | challenge  |    2.7 |      0.051343 |\n```", "```py\nax = sns.barplot(x=\"tokens\", y=\"probabilities\", data=df)\nax.set_title('Softmax Probability Estimates')\nax.set_ylabel('Probability')\nax.set_xlabel('Tokens')\nplt.xticks(rotation=45)\nfor bar in ax.patches:\n    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height(), f'{bar.get_height():.2f}',\n            ha='center', va='bottom', fontsize=10, rotation=0)\nplt.show()\n```", "```py\ndef softmax_with_temperature(logits, temperature):\n    if temperature <= 0:\n        temperature = 1e-10  # Prevent division by zero or negative temperatures\n    scaled_logits = logits / temperature\n    exps = np.exp(scaled_logits - np.max(scaled_logits))  # Numerical stability improvement\n    return exps / np.sum(exps)\n\ndef plot_interactive_softmax(temperature):\n    probabilities = softmax_with_temperature(df['logits'], temperature)\n    plt.figure(figsize=(10, 5))\n    bars = plt.bar(df['tokens'], probabilities, color='blue')\n    plt.ylim(0, 1)\n    plt.title(f'Softmax Probabilities at Temperature = {temperature:.2f}')\n    plt.ylabel('Probability')\n    plt.xlabel('Tokens')\n    # Add text annotations\n    for bar, probability in zip(bars, probabilities):\n        yval = bar.get_height()\n        plt.text(bar.get_x() + bar.get_width()/2, yval, f\"{probability:.2f}\", ha='center', va='bottom', fontsize=10)\n    plt.show()\n\ninteractive_plot = interactive(plot_interactive_softmax, temperature=FloatSlider(value=1, min=0, max=2, step=0.01, description='Temperature'))\ninteractive_plot\n```"]