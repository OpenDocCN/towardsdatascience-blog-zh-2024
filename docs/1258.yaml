- en: Generating Map Tiles with Rust
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Rust 生成地图瓦片
- en: 原文：[https://towardsdatascience.com/generating-map-tiles-with-rust-dbdb0eb09b6b?source=collection_archive---------3-----------------------#2024-05-19](https://towardsdatascience.com/generating-map-tiles-with-rust-dbdb0eb09b6b?source=collection_archive---------3-----------------------#2024-05-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/generating-map-tiles-with-rust-dbdb0eb09b6b?source=collection_archive---------3-----------------------#2024-05-19](https://towardsdatascience.com/generating-map-tiles-with-rust-dbdb0eb09b6b?source=collection_archive---------3-----------------------#2024-05-19)
- en: How easy is it to transition from Python to Rust?
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 Python 转向 Rust 有多容易？
- en: '[](https://medium.com/@joao.figueira?source=post_page---byline--dbdb0eb09b6b--------------------------------)[![João
    Paulo Figueira](../Images/54e4176f66e4ab0324d86ec71d8b033d.png)](https://medium.com/@joao.figueira?source=post_page---byline--dbdb0eb09b6b--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--dbdb0eb09b6b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--dbdb0eb09b6b--------------------------------)
    [João Paulo Figueira](https://medium.com/@joao.figueira?source=post_page---byline--dbdb0eb09b6b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@joao.figueira?source=post_page---byline--dbdb0eb09b6b--------------------------------)[![João
    Paulo Figueira](../Images/54e4176f66e4ab0324d86ec71d8b033d.png)](https://medium.com/@joao.figueira?source=post_page---byline--dbdb0eb09b6b--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--dbdb0eb09b6b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--dbdb0eb09b6b--------------------------------)
    [João Paulo Figueira](https://medium.com/@joao.figueira?source=post_page---byline--dbdb0eb09b6b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--dbdb0eb09b6b--------------------------------)
    ·6 min read·May 19, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--dbdb0eb09b6b--------------------------------)
    ·阅读时间：6 分钟 ·2024年5月19日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/b583922b0a97dcbb9e258d7e6538ecf4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b583922b0a97dcbb9e258d7e6538ecf4.png)'
- en: Photo by [Diego García](https://unsplash.com/@diegogarcia?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自 [Diego García](https://unsplash.com/@diegogarcia?utm_source=medium&utm_medium=referral)
    于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Sometimes, you must display vast amounts of data on an interactive map while
    keeping it usable and responsive. Interactive online maps are implemented in HTML,
    and adding many visual elements to the map display generally degrades performance
    and usability. A possible alternative is to draw all of the elements offline and
    display them over the map as a transparent layer using tiles. Each square tile
    neatly overlaps the map’s tiles, and the interactive map control handles far fewer
    visual elements.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你需要在互动地图上显示大量数据，同时保持其可用性和响应性。互动在线地图是用 HTML 实现的，在地图显示中添加许多视觉元素通常会降低性能和可用性。一个可能的替代方案是离线绘制所有元素，并通过瓦片将它们作为透明层显示在地图上。每个方形瓦片整齐地覆盖在地图的瓦片之上，而互动地图控制只需处理较少的视觉元素。
- en: I addressed this issue a few years ago by writing a custom map tile generator
    using Python and data from the [Vehicle Energy Dataset](https://github.com/gsoh/VED).
    This project illustrated how to display massive amounts of information on an interactive
    online map by using custom tile layers over the map. The process involves using
    a web application that generates, caches and serves the tiles.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，我通过使用 Python 和 [车辆能源数据集](https://github.com/gsoh/VED) 编写了一个自定义地图瓦片生成器来解决这个问题。这个项目展示了如何通过在地图上使用自定义瓦片层来显示大量信息。这个过程包括使用一个
    Web 应用程序来生成、缓存并提供瓦片。
- en: '[](/displaying-geographic-information-using-custom-map-tiles-c0e3344909a4?source=post_page-----dbdb0eb09b6b--------------------------------)
    [## Displaying Geographic Information Using Custom Map Tiles'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/displaying-geographic-information-using-custom-map-tiles-c0e3344909a4?source=post_page-----dbdb0eb09b6b--------------------------------)
    [## 使用自定义地图瓦片显示地理信息'
- en: Learn how to create custom tiles for your interactive maps.
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解如何为你的互动地图创建自定义瓦片。
- en: towardsdatascience.com](/displaying-geographic-information-using-custom-map-tiles-c0e3344909a4?source=post_page-----dbdb0eb09b6b--------------------------------)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/displaying-geographic-information-using-custom-map-tiles-c0e3344909a4?source=post_page-----dbdb0eb09b6b--------------------------------)
- en: As you know, Python is not fast, so there is a significant performance hit while
    the web application generates each tile. When a tile is cached, the serving process
    is quick and is not noticeable while interacting with the map.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，Python 运行速度较慢，因此在生成每个瓷砖时，Web 应用程序的性能会受到显著影响。当瓷砖被缓存后，服务过程很快，在与地图交互时不会有明显的延迟。
- en: Still, I was unhappy with the performance, so I wanted to solve the problem
    again by dramatically improving the code execution speed. At first, I thought
    about converting the code base to [Cython](https://cython.org/), but then my attention
    was diverted to another candidate.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，我仍然对性能不满意，因此我想通过显著提高代码执行速度来再次解决这个问题。最初，我考虑将代码库转换为[Cython](https://cython.org/)，但后来我的注意力转向了另一个候选者。
- en: Enter Rust
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入 Rust
- en: The Rust programming language has been on my radar for quite some time. With
    a background in C, C++ and C#, I was intrigued by the language’s promise of memory
    safety and C-like performance. I finally decided to have a go at it, and this
    problem looked like a perfect starting point to learn and exercise the language.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Rust 编程语言已经在我的视野中有一段时间了。由于我有 C、C++ 和 C# 的背景，我对该语言在内存安全性和 C 类性能方面的承诺产生了兴趣。我最终决定尝试一下，它看起来是学习和练习这门语言的一个完美起点。
- en: 'After reviewing many YouTube videos and diverse written material, I started
    using Rust to address this problem. I had three primary questions: How hard is
    it to create a web application, access [SQLite](https://www.sqlite.org/) data,
    and programmatically create a transparent PNG image? Fortunately, the answers
    to these questions were more straightforward to respond to than anticipated.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在观看了许多 YouTube 视频和阅读了各种资料之后，我开始使用 Rust 来解决这个问题。我有三个主要问题：创建一个 Web 应用程序有多难？如何访问[SQLite](https://www.sqlite.org/)数据？如何通过编程创建透明的
    PNG 图像？幸运的是，回答这些问题比预期的要简单得多。
- en: Rocket
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Rocket
- en: To answer the web application question, I turned to [Rocket](https://rocket.rs/).
    The [Getting Started](https://rocket.rs/guide/v0.5/getting-started/#getting-started)
    page from Rocket’s online documentation shows how easy it is to set up a basic
    web application. We will surely need more complexity to build our tile server,
    but the boilerplate seems minimal and straightforward. And, as it turned out to
    be, Rocket is very easy to use and adapt. It’s a keeper to me.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决 Web 应用程序的问题，我转向了[Rocket](https://rocket.rs/)。Rocket 在线文档中的[快速入门](https://rocket.rs/guide/v0.5/getting-started/#getting-started)页面展示了如何轻松地设置一个基础的
    Web 应用程序。我们肯定需要更多复杂的功能来构建我们的瓷砖服务器，但它的基础模板看起来非常简洁明了。事实证明，Rocket 非常容易使用和适应，对我来说它是一个值得保留的工具。
- en: sqlx
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: sqlx
- en: After a few minutes online, I quickly realized that the most popular answer
    to accessing SQLite databases was through the [sqlx](https://docs.rs/sqlx/latest/sqlx/)
    package. It presents a different paradigm from the one I used in Python but much
    closer to the one I used in my former life when I developed in C#. Instead of
    generic data structures or [Pandas](https://pandas.pydata.org/) [DataFrames](https://pandas.pydata.org/docs/user_guide/dsintro.html#dataframe),
    you must use strongly typed data structures here. Although they are a bit more
    laborious to work with, they will bring an extra layer of sanity to your life.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 经过几分钟的在线搜索，我很快意识到，访问 SQLite 数据库最流行的答案是通过[sqlx](https://docs.rs/sqlx/latest/sqlx/)包。它呈现了一个与我在
    Python 中使用的范式不同的方式，但与我之前在 C# 开发时使用的方式非常相似。在这里，你必须使用强类型数据结构，而不是通用的数据结构或[熊猫](https://pandas.pydata.org/)的[数据框](https://pandas.pydata.org/docs/user_guide/dsintro.html#dataframe)。虽然这些类型的数据结构稍显繁琐，但它们会为你的生活带来额外的理智。
- en: '**Figure 1** below shows the first complete code sample I used to retrieve
    the data from the level range table.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下方的**图 1**展示了我用来从等级范围表中检索数据的第一个完整代码示例。
- en: '**Figure 1** — Sample code to retrieve the table of level ranges. (Image source:
    Author)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1** — 检索等级范围表的示例代码。（图片来源：作者）'
- en: PNG
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PNG
- en: 'Creating, drawing, and saving PNG files using the [**image**](https://docs.rs/image/0.25.1/image/)
    crate is easy. The code to create a transparent tile is quite simple:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[**image**](https://docs.rs/image/0.25.1/image/) crate 创建、绘制和保存 PNG 文件非常简单。创建透明瓷砖的代码相当简单：
- en: '**Figure 2** — The **image** crate simplifies the manipulation of images. The
    code above shows how to create a solid color 256x256 map tile. (Image source:
    Author)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2** — **image** crate 简化了图像的操作。上面的代码展示了如何创建一个纯色的 256x256 地图瓷砖。（图片来源：作者）'
- en: I also used the [**colorgrad**](https://docs.rs/colorgrad/0.6.2/colorgrad/)
    package to handle the color gradient for the tiles.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我还使用了[**colorgrad**](https://docs.rs/colorgrad/0.6.2/colorgrad/)包来处理瓷砖的颜色渐变。
- en: Before I discuss the code in detail, let’s review the principle behind drawing
    the traffic density tiles.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我详细讨论代码之前，让我们回顾一下绘制交通密度瓦片背后的原理。
- en: It’s Tiles All The Way Down
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一直是瓦片
- en: Map tiles usually consist of square 256x256 bitmaps. We may address each tile
    by combining *x* and *y* coordinates, a “zoom” level, or a [quadkey](https://learn.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system)
    code. To each zoom level corresponds a square patchwork of tiles of different
    dimensions. The whole Earth is depicted on a single tile at the topmost level.
    By zooming in, the original tile is split up into four tiles. The following **Figures
    2** and **3** illustrate the process of zooming in.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 地图瓦片通常由256x256的方形位图组成。我们可以通过结合 *x* 和 *y* 坐标、一个“缩放”级别或一个[四分键](https://learn.microsoft.com/en-us/bingmaps/articles/bing-maps-tile-system)代码来表示每个瓦片。每个缩放级别对应于不同维度瓦片的方形拼贴。整个地球在最上层的一个瓦片上进行描绘。通过缩放，原始瓦片被拆分为四个瓦片。以下**图
    2**和**图 3**说明了缩放的过程。
- en: '![](../Images/08cd217d49c1c13aa9be0d531111f7d7.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/08cd217d49c1c13aa9be0d531111f7d7.png)'
- en: '**Figure 3** — The whole world on a single tile at zoom level 0\. (Image source:
    OpenStreetMap)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3** — 在缩放级别 0 上，整个世界呈现在单个瓦片中。（图片来源：OpenStreetMap）'
- en: '![](../Images/1bce5b6812ce6acc77850baf5c6f4b5c.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1bce5b6812ce6acc77850baf5c6f4b5c.png)'
- en: '**Figure 4** — Zooming into the previous tile, we get four tiles with the same
    individual dimension. (Image source: OpenStreetMap)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4** — 对之前的瓦片进行缩放，我们得到了四个具有相同单独维度的瓦片。（图片来源：OpenStreetMap）'
- en: If we keep zooming in, and after eight iterations, each resulting tile corresponds
    to a pixel on the first tile. This observation is the insight that allows us to
    compute and display the traffic density information on the tiles.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们继续缩放，在八次迭代后，每个生成的瓦片将对应第一个瓦片上的一个像素。这一观察结果提供了我们计算并在瓦片上显示交通密度信息的洞见。
- en: As described in the [previous article](/displaying-geographic-information-using-custom-map-tiles-c0e3344909a4),
    the tile information is prepared and stored in a database. Please refer to that
    article for instructions on generating the density database from the [Vehicle
    Energy Dataset](https://github.com/gsoh/VED).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如[上一篇文章](/displaying-geographic-information-using-custom-map-tiles-c0e3344909a4)所述，瓦片信息已经准备好并存储在数据库中。有关如何从[车辆能量数据集](https://github.com/gsoh/VED)生成密度数据库的说明，请参见该文章。
- en: Serving Tiles With Rust
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Rust提供瓦片
- en: We can now discuss the Rust server code to generate, cache, and serve tiles.
    The present solution closely follows the previous tile server design. **Figure
    5** below shows the main entry point that decides whether to provide a painted
    tile or the default transparent one after parsing and accepting the query parameters.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以讨论生成、缓存和提供瓦片的Rust服务器代码。当前的解决方案紧密地遵循了之前的瓦片服务器设计。下面的**图 5**显示了主要入口点，它决定在解析并接受查询参数后，是否提供绘制过的瓦片或默认的透明瓦片。
- en: '**Figure 5** — The main entry point. (Image source: Author)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 5** — 主要入口点。（图片来源：作者）'
- en: As you can see, the server replies to zoom levels ranging from one to eighteen
    only. This limitation was baked into the data generation process for the density
    database.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，服务器只会对从一到十八的缩放级别做出响应。这个限制是嵌入在密度数据库的生成过程中。
- en: The web application draws each tile using the function listed in **Figure 6**
    below.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序使用下方**图 6**中列出的函数绘制每个瓦片。
- en: '**Figure 6** — The function above generates the tile, if not already cached
    on disk, and returns the tile file name. (Image source: Author)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 6** — 上述函数生成瓦片（如果未缓存到磁盘），并返回瓦片文件名。（图片来源：作者）'
- en: As you can see from the listing above, the tile painting process has three steps.
    First, on line 12, we collect the tile’s per-pixel density information. Next,
    we retrieve the tile’s level range, i.e., the minimum and maximum density levels
    for the tile’s “zoom” level. Finally, on line 14, we paint the tile’s bitmap.
    The function finalizes by saving the tile bitmap to the file cache.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如上面的列表所示，瓦片绘制过程有三个步骤。首先，在第12行，我们收集瓦片的每像素密度信息。接下来，我们检索瓦片的级别范围，即瓦片“缩放”级别的最小和最大密度值。最后，在第14行，我们绘制瓦片的位图。该函数通过将瓦片位图保存到文件缓存来完成。
- en: '**Figure 7** — The function above paints a single tile on a bitmap. Note how
    the density information is transformed into an entry into the color gradient using
    a logarithmic-based transformation. (Image source: Author)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7** — 上述函数在位图上绘制单个瓦片。注意，密度信息是如何通过基于对数的转换转化为颜色渐变中的条目的。（图片来源：作者）'
- en: Using the Code
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代码
- en: 'After correctly configuring the database file path, you start the tile server
    by opening a terminal window, changing to the Rust project directory, and running
    the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在正确配置数据库文件路径后，你可以通过打开终端窗口，切换到 Rust 项目目录，并运行以下命令来启动瓦片服务器：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, you can open the map client and configure the density tile layer URI.
    **Figure 8** below shows the Jupyter Notebook code cell to load the interactive
    map:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以打开地图客户端并配置密度瓦片层的 URI。下面的**图 8**展示了加载交互式地图的 Jupyter Notebook 代码单元：
- en: '**Figure 8** — Use the code above to display the Ann Arbor map with the density
    tiles overlayed. (Image source: Author)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8** — 使用上面的代码显示安阿伯地图，并叠加密度瓦片。（图片来源：作者）'
- en: And that’s it! **Figure 9** below displays the result.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！下面的**图 9**展示了结果。
- en: '![](../Images/26c9beb6a497ae643455d5109f51168f.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/26c9beb6a497ae643455d5109f51168f.png)'
- en: '**Figure 9** — The image above displays the base map with the overlayed traffic
    density tiles. (Image source: OpenStreetMap and author-generated tiles)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 9** — 上面的图片展示了叠加了交通密度瓦片的基础地图。（图片来源：OpenStreetMap 和作者生成的瓦片）'
- en: Conclusion
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'My first foray into Rust was not nearly as difficult as I expected. I started
    by immersing myself in the available literature and YouTube videos before giving
    it a go. Next, I ensured I was using a helping hand with a great IDE from [JetBrains](https://www.jetbrains.com/):
    [RustRover](https://www.jetbrains.com/rust/). Although still in preview mode,
    I found this IDE helpful and instructive when using Rust. Still, you will also
    be perfectly fine if you prefer [Visual Studio Code](https://code.visualstudio.com/).
    Just make sure you get the sanctioned plugins.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我第一次接触 Rust 并不像我预期的那样困难。我首先通过阅读现有文献和观看 YouTube 视频来进行准备，然后才开始尝试。接着，我确保使用一个很棒的
    IDE 来辅助开发，[JetBrains](https://www.jetbrains.com/) 提供的 [RustRover](https://www.jetbrains.com/rust/)
    就是其中之一。虽然该 IDE 仍处于预览模式，但我发现它在使用 Rust 时非常有帮助和指导性。如果你更喜欢使用 [Visual Studio Code](https://code.visualstudio.com/)，那也完全没问题，只要确保安装官方支持的插件。
- en: Credits
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: I used [Grammarly](https://app.grammarly.com/) to review the writing and accepted
    several of its rewriting suggestions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了[Grammarly](https://app.grammarly.com/)来检查写作，并采纳了其中一些改写建议。
- en: '[JetBrains’ AI](https://www.jetbrains.com/ai/) assistant wrote some of the
    code, and I also used it to learn Rust. It has become a staple of my everyday
    work with both Rust and Python.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[JetBrains 的 AI](https://www.jetbrains.com/ai/) 助手编写了部分代码，我还用它来学习 Rust。它已成为我日常使用
    Rust 和 Python 的得力助手。'
- en: Licensing Information
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 许可证信息
- en: The Extended Vehicle Energy Dataset is licensed under Apache 2.0, like its originator,
    the [Vehicle Energy Dataset](https://github.com/gsoh/VED).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展车辆能源数据集采用 Apache 2.0 许可证，与其发源地 [车辆能源数据集](https://github.com/gsoh/VED) 相同。
- en: References
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[Vehicle Energy Dataset](https://github.com/gsoh/VED) (GitHub)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[车辆能源数据集](https://github.com/gsoh/VED)（GitHub）'
- en: '[GitHub repository](https://github.com/joaofig/tilers)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub 仓库](https://github.com/joaofig/tilers)'
- en: João Paulo Figueira is a Data Scientist at [tb.lx by Daimler Truck](https://tblx.io/)
    in Lisbon, Portugal.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: João Paulo Figueira 是葡萄牙里斯本的[tb.lx by Daimler Truck](https://tblx.io/)的数据显示科学家。
