["```py\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n\nfig, ax = plt.subplots(); ax.set_box_aspect(0.5)  # main figure and axes\nax.plot([0, 9], [0, 9])  # example plot\n\n# create inset axes & plot on them\ninset_ax = inset_axes(ax, width=\"30%\", height=1.2, loc=\"upper left\")\ninset_ax.plot([9, 0], [0, 9], color=\"r\")\nplt.xticks([]); plt.yticks([])  # strip ticks, which collide w/ main ax\n```", "```py\n\"upper right\" | \"upper left\" | \"lower left\" | \"lower right\"\n\"right\" | \"center left\" | \"center right\" | \"lower center\"\n\"upper center\" | \"center\"\n```", "```py\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(); ax.set_box_aspect(0.5)  # main figure and axes\nax.plot([0, 9], [0, 9])  # example plot\n\n# create inset axes & plot on them\nins_ax = ax.inset_axes([.6, .15, .3, .3])  # [x, y, width, height] w.r.t. ax\nins_ax.plot([9, 0], [0, 9], color=\"r\")\n```", "```py\nw_inch, h_inch = ax.figure.get_size_inches() * ax.get_position().size\n```", "```py\nax.inset_axes([x/w_inch, y/h_inch, w/w_inch, h/h_inch])\n```", "```py\nimport matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(); ax.set_box_aspect(0.5)  # main figure and axes\nax.plot([0, 9], [0, 9])  # example plot\n\n# create inset axes & plot on them\nins_ax = fig.add_axes([.2, .5, .2, .2])  # [x, y, width, height] w.r.t. fig\nins_ax.plot([9, 0], [0, 9], color=\"r\") \n```", "```py with `` `outset.layout_corner_insets` ``\n\nFor this next example, we will use the *outset* library, which provides specialized tools for working with inset axes in *matplotlib*. It can be installed as `python3 -m pip install outset`.\n\nThe *outset* library provides the flexible `outset.util.layout_corner_insets` utility to position multiple inset axes within a specified corner of a main axes. Here’s how to use it to pick positions for calls to `Axes.inset_axes`.\n\n```", "```py\n\nNote the optional customizations to inset positioning made through keyword arguments to `outset.util.layout_corner_insets`. Here, “pad” refers to spacing between insets, “margin” refers to space between the insets and the main axes, and “grid size” refers to the overall fraction of axes space that insets are stacked into.\n\n![](../Images/c3c99ec05194828d72a5d44982ef711f.png)\n\nThat covers it for techniques to place inset axes!\n\nA common use case for inset axes is to provide magnification of an area of interest within the main plot. Next, we’ll look at two ways to visually correspond magnifying insets with a region of the main plot.\n\n# Method 5: Zoom Indicator Leaders\n\nA classic approach depicting zoom relationships draws connecting lines between the corners of the inset axes and the region it is magnifying. This works especially well when plotting small numbers of insets.\n\nMatplotlib’s `Axes` includes the `indicate_inset_zoom` member function for this purpose. Here’s how to use it.\n\n```", "```py\n\n![](../Images/e7e0941ac965828032dbdb8c35332085.png)\n\nNote that to use `Axes.indicate_inset_zoom`, inset axes must be created using `Axes.inset_axes`.\n\n# Method 6: Zoom Indicator Overlays\n\nWhen working with larger numbers of insets, it may work better to correspond regions with numbered, color-coded highlights instead of leader lines.\n\nThe `outset` library’s `OutsetGrid` provides a `marqueeplot` member function for this purpose. Under this scheme, inset positioning is handled by `outset.inset_outsets`. Here’s how to create a zoom plot with color-coded position overlays.\n\n```", "```py\n\n![](../Images/aa84177b6c0c709c89142af8471c599f.png)\n\nNote that inset positioning can be more finely controlled via `outset.util.layout_corner_insets`, as used for Method 4 above:\n\n```", "```py\n\n![](../Images/c836552442fb1aa1346f4c2a496a64f9.png)\n\nInset placements can also be manually specified to `outset.inset_outsets`using axes-relative coordinates, too:\n\n```", "```py\n\n![](../Images/159e656d44376bcdd405434fe0ebc2b8.png)\n\nAnd, finally, to use bigger, side-by-side magnification panels instead of insets, just omit the call to `outset.inset_outsets`.\n\n![](../Images/4b8fcba150f2955568561d91775bdf79.png)\n\n# Conclusion\n\nInset axes are a great way to take your *matplotlib* visualizations to the next level, whether you’re looking to highlight specific data regions or add detailed subplots.\n\nHere, we’ve covered the variety of approaches at your disposal, both built in to *matplotlib* and using the *outset* library. Each method offers unique advantages, ensuring a good fit for nearly any inset plotting scenario.\n\nNow go make something informative and beautiful! Happy plotting :)\n\n# Further Information\n\n*matplotlib* has some excellent inset example materials that are well worth checking out. In particular,\n\n*   [Zoom region inset axes](https://matplotlib.org/stable/gallery/subplots_axes_and_figures/zoom_inset_axes.html)\n*   [Inset locator demo](https://matplotlib.org/stable/gallery/axes_grid1/inset_locator_demo.html)\n\n*outset* also provides some good example materials, notably one on [zoom plots over rain guage time series data](https://mmore500.com/outset/example-rain.html). *outset* also provides a useful [quickstart guide](https://mmore500.com/outset/quickstart.html) and [gallery page](https://mmore500.com/outset/gallery.html).\n\n![](../Images/8567e4f3bf0573fc897b9f29d3c36b2f.png)\n\nimages from the outset gallery\n\nFormal argument-by-argument listings for all code covered here can be found in the API documentation pages for [*outset*](https://mmore500.com/outset/_autosummary/outset.html) and [*matplotlib*](https://matplotlib.org/stable/api/index.html).\n\nBoth projects are open source on GitHub, *m*a*tplotlib* under a PSF license at [matplotlib/matplotlib](https://github.com/matplotlib/matplotlib) and *outset* under the MIT License at [mmore500/outset](https://github.com/mmore500/outset) — *outset* is a new project, consider leaving a ⭐️!\n\nJoseph Early also has an excellent medium article on inset axes in matplotlib, which you can read [here](/mastering-inset-axes-in-matplotlib-458d2fdfd0c0).\n\n# Authorship\n\nThis tutorial is contributed by me, [Matthew Andres Moreno](https://mmore500.com/).\n\n![](../Images/ed1a0cffeed1577a791942f2768ce582.png)\n\nI currently serve as a postdoctoral scholar at the [University of Michigan](https://umich.edu), where my work is supported by the Eric and Wendy Schmidt AI in Science Postdoctoral Fellowship, a Schmidt Futures program.\n\nMy appointment is split between the university’s Ecology and Evolutionary Biology Department, the Center for the Study of Complexity, and the Michigan Institute for Data Science.\n\nFind me on Twitter as [@MorenoMatthewA](https://twitter.com/morenomatthewa) and on GitHub as [@mmore500](https://github.com/mmore500/).\n\n*disclosure:* I am the author of the *outset* library.\n\n# Citations\n\n*J. D. Hunter, “Matplotlib: A 2D Graphics Environment”, Computing in Science & Engineering, vol. 9, no. 3, pp. 90–95, 2007\\.* [*https://doi.org/10.1109/MCSE.2007.55*](https://doi.org/10.1109/MCSE.2007.55)\n\n*Matthew Andres Moreno. (2023). mmore500/outset. Zenodo.* [*https://doi.org/10.5281/zenodo.10426106*](https://doi.org/10.5281/zenodo.10426106)\n\n# Appendix\n\nTo install dependencies for code snippets in this article,\n\n```"]