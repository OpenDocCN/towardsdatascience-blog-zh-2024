["```py\ndef router(messages):\n    if not any(\n        isinstance(message, dict) and message.get(\"role\") == \"system\" for message in messages\n    ):\n        system_prompt = {\"role\": \"system\", \"content\": SYSTEM_PROMPT}\n        messages.append(system_prompt)\n\n    response = client.chat.completions.create(\n        model=\"gpt-4o\",\n        messages=messages,\n        tools=skill_map.get_combined_function_description_for_openai(),\n    )\n\n    messages.append(response.choices[0].message)\n    tool_calls = response.choices[0].message.tool_calls\n    if tool_calls:\n        handle_tool_calls(tool_calls, messages)\n        return router(messages)\n    else:\n        return response.choices[0].message.content\n```", "```py\nclass SkillMap:\n    def __init__(self):\n        skills = [AnalyzeData(), GenerateSQLQuery()]\n\n        self.skill_map = {}\n        for skill in skills:\n            self.skill_map[skill.get_function_name()] = (\n                skill.get_function_dict(),\n                skill.get_function_callable(),\n            )\n\n    def get_function_callable_by_name(self, skill_name) -> Callable:\n        return self.skill_map[skill_name][1]\n\n    def get_combined_function_description_for_openai(self):\n        combined_dict = []\n        for _, (function_dict, _) in self.skill_map.items():\n            combined_dict.append(function_dict)\n        return combined_dict\n\n    def get_function_list(self):\n        return list(self.skill_map.keys())\n\n    def get_list_of_function_callables(self):\n        return [skill[1] for skill in self.skill_map.values()]\n\n    def get_function_description_by_name(self, skill_name):\n        return str(self.skill_map[skill_name][0][\"function\"])\n```", "```py\ntools = [generate_and_run_sql_query, data_analyzer]\nmodel = ChatOpenAI(model=\"gpt-4o\", temperature=0).bind_tools(tools)\n\ndef create_agent_graph():\n    workflow = StateGraph(MessagesState)\n\n    tool_node = ToolNode(tools)\n    workflow.add_node(\"agent\", call_model)\n    workflow.add_node(\"tools\", tool_node)\n\n    workflow.add_edge(START, \"agent\")\n    workflow.add_conditional_edges(\n        \"agent\",\n        should_continue,\n    )\n    workflow.add_edge(\"tools\", \"agent\")\n\n    checkpointer = MemorySaver()\n    app = workflow.compile(checkpointer=checkpointer)\n    return app\n```", "```py\ndef should_continue(state: MessagesState):\n    messages = state[\"messages\"]\n    last_message = messages[-1]\n    if last_message.tool_calls:\n        return \"tools\"\n    return END\n\ndef call_model(state: MessagesState):\n    messages = state[\"messages\"]\n    response = model.invoke(messages)\n    return {\"messages\": [response]}\n```", "```py\npydantic.v1.error_wrappers.ValidationError: 1 validation error for data_analysis_toolSchema\nargs field required (type=value_error.missing)\n```", "```py\n@tool\ndef generate_and_run_sql_query(query: str):\n    \"\"\"Generates and runs an SQL query based on the prompt.\n\n    Args:\n        query (str): A string containing the original user prompt.\n\n    Returns:\n        str: The result of the SQL query.\n    \"\"\"\n```", "```py\nclass AgentFlow(Workflow):\n    def __init__(self, llm, timeout=300):\n        super().__init__(timeout=timeout)\n        self.llm = llm\n        self.memory = ChatMemoryBuffer(token_limit=1000).from_defaults(llm=llm)\n        self.tools = []\n        for func in skill_map.get_function_list():\n            self.tools.append(\n                FunctionTool(\n                    skill_map.get_function_callable_by_name(func),\n                    metadata=ToolMetadata(\n                        name=func, description=skill_map.get_function_description_by_name(func)\n                    ),\n                )\n            )\n\n    @step\n    async def prepare_agent(self, ev: StartEvent) -> RouterInputEvent:\n        user_input = ev.input\n        user_msg = ChatMessage(role=\"user\", content=user_input)\n        self.memory.put(user_msg)\n\n        chat_history = self.memory.get()\n        return RouterInputEvent(input=chat_history)\n```", "```py\n@step\nasync def router(self, ev: RouterInputEvent) -> ToolCallEvent | StopEvent:\n    messages = ev.input\n\n    if not any(\n        isinstance(message, dict) and message.get(\"role\") == \"system\" for message in messages\n    ):\n        system_prompt = ChatMessage(role=\"system\", content=SYSTEM_PROMPT)\n        messages.insert(0, system_prompt)\n\n    with using_prompt_template(template=SYSTEM_PROMPT, version=\"v0.1\"):\n        response = await self.llm.achat_with_tools(\n            model=\"gpt-4o\",\n            messages=messages,\n            tools=self.tools,\n        )\n\n    self.memory.put(response.message)\n\n    tool_calls = self.llm.get_tool_calls_from_response(response, error_on_no_tool_call=False)\n    if tool_calls:\n        return ToolCallEvent(tool_calls=tool_calls)\n    else:\n        return StopEvent(result=response.message.content)\n```", "```py\n@step\nasync def tool_call_handler(self, ev: ToolCallEvent) -> RouterInputEvent:\n    tool_calls = ev.tool_calls\n\n    for tool_call in tool_calls:\n        function_name = tool_call.tool_name\n        arguments = tool_call.tool_kwargs\n        if \"input\" in arguments:\n            arguments[\"prompt\"] = arguments.pop(\"input\")\n\n        try:\n            function_callable = skill_map.get_function_callable_by_name(function_name)\n        except KeyError:\n            function_result = \"Error: Unknown function call\"\n\n        function_result = function_callable(arguments)\n        message = ChatMessage(\n            role=\"tool\",\n            content=function_result,\n            additional_kwargs={\"tool_call_id\": tool_call.tool_id},\n        )\n\n        self.memory.put(message)\n\n    return RouterInputEvent(input=self.memory.get())\n```", "```py\nfor func in skill_map.get_function_list(): \n            self.tools.append(FunctionTool(\n                skill_map.get_function_callable_by_name(func), \n                metadata=ToolMetadata(name=func, description=skill_map.get_function_description_by_name(func))))\n```", "```py\nclass ToolCallEvent(Event):\n    tool_calls: list[ToolSelection]\n\nclass RouterInputEvent(Event):\n    input: list[ChatMessage]\n```"]