["```py\nwpi_df <- readr::read_csv(\"All sector WPI, quarterly and annual movement (%), seasonally adjusted (a).csv\", \n    col_types = cols(`Quarterly (%)` = col_skip()), \n    skip = 1) %>% \n    rename(month_year = ...1,\n           value = `Annual (%)`) %>% \n    drop_na() %>% \n    mutate(month_year = lubridate::my(month_year),\n           rate = 'wpi')\n\ncpi_df <- read_csv(\"All groups CPI, Australia, quarterly and annual movement (%).csv\", \n    col_types = cols(`Change from previous quarter (%)` = col_skip()), \n    skip = 1) %>% \n    rename(month_year = ...1,\n           value = `Annual change (%)`) %>% \n    drop_na() %>% \n    mutate(month_year = lubridate::my(month_year),\n           rate = 'cpi')\n\nrates_df <- bind_rows(cpi_df, wpi_df) %>% \n    filter(month_year >= '2014-03-01' & month_year <= '2023-12-01') %>% \n  mutate(rate = as_factor(rate))\n\nrates_df %>% \n  ggplot(aes(month_year, value, color = rate)) +\n    geom_point() +\n    geom_line() +\n    theme_ggdist() +\n    scale_color_viridis_d(begin = 0.3, end = 0.7) +\n    labs(x = 'Date', y = 'Index Value', color = 'Rate', title = 'Comparison of Annual CPI and WPI')\n```", "```py\nindices <- \n  brm(\n    bf(value ~ rate + 0,\n       sigma ~ rate + 0),\n    data = rates_df,\n    prior = c(prior(normal(2, 2), class = 'b')),\n    family = gaussian, \n    iter = 2000, chains = 4, seed = 246, cores = 4, sample_prior = 'yes'\n  )\n\nnew_df <- tibble(rate = c('wpi', 'cpi'))\n\nnew_df %>% \n  add_epred_draws(indices) %>% \n  compare_levels(.epred, rate, comparison = list(c('cpi', 'wpi'))) %>% \n  ggplot(aes(.epred, fill = after_stat(x > 0))) +\n    stat_halfeye() +\n    geom_vline(xintercept = 0, lty = 2) +\n    theme_ggdist() +\n    scale_fill_manual(values = c(\"gray80\", \"skyblue\")) +\n    labs(y = 'Density', x = 'Difference in Posterior Means', title = 'Difference in Posterior Means of WPI and CPI',\n         subtitle = \"80% of Density is Greater then 0/nApplying ROPE of 10%, Difference is Neglible\", fill = 'Value Greater Then 0')\n```", "```py\nindex <- 1:50000 #simulate 50000 students\n\nyear <- 0:19 #over 20 years\n\ncalculate_salary <- function(previous, basevalue, multiplier) {\n  coalesce(basevalue, multiplier * previous)\n}\n\nset.seed(246)\n\nbase_df <- \n  crossing(index, year) %>% \n  group_by(index) %>% #salary and growth varies by individual\n  mutate(salary_0 = rlnorm(1, mean = log(68000), sdlog = log(1.34)),\n         debt_0 =  rlnorm(1, meanlog = 10.2, sdlog = 0.5)) %>% \n  group_by(year) %>% #indexation rate applies uniformly across all indices each year\n  mutate(indexation_rate = rnorm(1, mean = 0.027, sd = 0.012),\n         indexation_rate = round(indexation_rate, 3)) %>% \n  group_by(index, year) %>% \n  mutate(salary_growth = rlnorm(1, meanlog = -3.5, sdlog = 0.6) + 1,\n         salary_growth = round(salary_growth, 3)) %>% \n  group_by(index) %>% \n  mutate(salary_0 = if_else(year > 0, NA, salary_0),\n         salary_1 = accumulate2(salary_0, salary_growth[-1], calculate_salary),\n         salary_1 = case_when(salary_1 < 18200 ~ salary_1 * (1-0), #calculate post-tax incomee\n           salary_1 >= 18201 & salary_1 <= 45000 ~  salary_1 - 0 - (salary_1-18200)*(0.19),\n           salary_1 >= 45001 & salary_1 <= 120000 ~ salary_1 - 5092 - (salary_1-45000)*(0.325),\n           salary_1 >= 120001 & salary_1 <= 180000 ~ salary_1 - 29467 - (salary_1-120000)*(0.37),\n           salary_1 >= 180001 ~ salary_1 - 51667 - (salary_1-180000)*(0.45)\n         ))\n```", "```py\ncalculate_remaining_debt <- function(principal, payment, interest_rate) {\ninterest = principal * interest_rate\nremaining_debt = principal + interest - payment\nremaining_debt = ifelse(remaining_debt < 0, 0, remaining_debt)\nremaining_debt\n}\n\nset.seed(246)\n\ndf <- base_df %>% mutate(\n         repayment_rate = case_when(\n           salary_1 < 51550 ~ 0.0, # Repayment Rates Post-Tax Income\n           salary_1 >= 51550 & salary_1 <= 59518 ~ 0.01,\n           salary_1 >= 59519 & salary_1 <= 63089 ~ 0.02,\n           salary_1 >= 63090 & salary_1 <= 66875 ~ 0.025,\n           salary_1 >= 66876 & salary_1 <= 70888 ~ 0.03,\n           salary_1 >= 70889 & salary_1 <= 75140 ~ 0.035,\n           salary_1 >= 75141 & salary_1 <= 79649 ~ 0.04,\n           salary_1 >= 79650 & salary_1 <= 84429 ~ 0.045,\n           salary_1 >= 84430 & salary_1 <= 89494 ~ 0.05,\n           salary_1 >= 89495 & salary_1 <= 94865 ~ 0.055,\n           salary_1 >= 94866 & salary_1 <= 100557 ~ 0.06,\n           salary_1 >= 100558 & salary_1 <= 106590 ~ 0.065,\n           salary_1 >= 106591 & salary_1 <= 112985 ~ 0.07,\n           salary_1 >= 112986 & salary_1 <= 119764 ~ 0.075,\n           salary_1 >= 119765 & salary_1 <= 126950 ~ 0.08,\n           salary_1 >= 126951 & salary_1 <= 134568 ~ 0.085,\n           salary_1 >= 134569 & salary_1 <= 142642 ~ 0.09,\n           salary_1 >= 142643 & salary_1 <= 151200 ~ 0.095,\n           salary_1 > 151201 ~ 0.1),\n         repayment = salary_1 * repayment_rate,\n         debt_1 = accumulate(2:n(), .init = first(debt_0),\n~ calculate_remaining_debt(.x, repayment[.y], indexation_rate[.y])\n),\n         repayment = if_else(debt_1 == 0, 0, repayment),\n         debt_paid = if_else(debt_1 == 0, 'y', 'n'))\n\ndf <- \ndf %>% \n  group_by(index) %>% \n  mutate(clearance_year = if_else(lag(debt_1, default = first(debt_1)) > 0 & debt_1 == 0, 1, 0),\n         clearance_cum = cumsum(clearance_year)) %>% \n  filter(clearance_cum == 0 | clearance_year == 1) %>% \n  select(1:11) %>%\n  mutate(is_paid = if_else(debt_paid == 'y', 1, 0),\n         debt = round(debt_1, 2),\n         salary = round(salary_1, 2),\n         scenario = 'INDEXATION PRE PAYMENT; PROGRESSIVE PAYMENT RATE',\n         scenario_l = 'A',\n         group = if_else(max(is_paid) == 1, 'paid', 'unpaid'))\n\n# Repeat Again with Different Calculation of Debt, Indexation Post Repayment\n\ncalculate_remaining_debt <- function(principal, payment, interest_rate) {\nremaining_debt = principal - payment + (principal-payment) * interest_rate\nremaining_debt = ifelse(remaining_debt < 0, 0, remaining_debt)\nremaining_debt \n}\n\ndf2 <- \ndf2 %>% \n  group_by(index) %>% \n  mutate(clearance_year = if_else(lag(debt_1, default = first(debt_1)) > 0 & debt_1 == 0, 1, 0),\n         clearance_cum = cumsum(clearance_year)) %>% \n  filter(clearance_cum == 0 | clearance_year == 1) %>% \n  select(1:11) %>%\n  mutate(is_paid = if_else(debt_paid == 'y', 1, 0),\n         debt = round(debt_1, 2),\n         salary = round(salary_1, 2),\n         scenario = 'INDEXATION AFTER PAYMENT; PROGRESSIVE PAYMENT RATE',\n         scenario_l = 'B',\n         group = if_else(max(is_paid) == 1, 'paid', 'unpaid'))\n\n# Last Scenario Applies a Flat Rate of 10% Repayment Above Minimum Threshold\n\ndf3 <- base_df %>% \n  mutate(repayment_rate = case_when(\n           salary_1 < 51550 ~ 0.0,\n           salary_1 >= 51550 ~ 0.1), \n         repayment = salary_1 * repayment_rate,\n         debt_1 = accumulate(2:n(), .init = first(debt_0),\n~ calculate_remaining_debt(.x, repayment[.y], indexation_rate[.y])\n),\n         repayment = if_else(debt_1 == 0, 0, repayment),\n         debt_paid = if_else(debt_1 == 0, 'y', 'n'))\n\ndf3 <- \ndf3 %>% \n  group_by(index) %>% \n  mutate(clearance_year = if_else(lag(debt_1, default = first(debt_1)) > 0 & debt_1 == 0, 1, 0),\n         clearance_cum = cumsum(clearance_year)) %>% \n  filter(clearance_cum == 0 | clearance_year == 1) %>% \n  select(1:11) %>%\n  mutate(is_paid = if_else(debt_paid == 'y', 1, 0),\n         debt = round(debt_1, 2),\n         salary = round(salary_1, 2),\n         scenario = 'INDEXATION PRE PAYMENT; FLAT PAYMENT RATE',\n         scenario_l = 'C',\n         group = if_else(max(is_paid) == 1, 'paid', 'unpaid'))\n```", "```py\ndf4 <- bind_rows(df, df2, df3)\n\ndf4 %>% \n  filter(index <= 9) %>% \n  ggplot(aes(year, debt, color = scenario)) +\n    geom_point() +\n    geom_line() +\n    facet_wrap(~index) +\n    theme_ggdist() +\n    scale_color_brewer(palette = \"Dark2\") +\n    theme(legend.position = 'bottom', legend.direction = 'vertical') +\n    labs(x = 'Year', y = 'Debt', title = 'Scenarios of First Nine Students')\n```", "```py\ndf4 %>% \n  filter(group == 'paid') %>% \n  group_by(index, scenario) %>%\n  summarise(debt_clearance = max(year)) %>% \n  ggplot(aes(debt_clearance, fill = scenario)) +\n    geom_histogram(binwidth = 1) +\n    facet_grid(~scenario) +\n    theme_ggdist() +\n    scale_fill_brewer(palette = \"Dark2\", aesthetics = c('color', 'fill')) +\n    theme(legend.position = 'none') +\n    labs(x = 'Years to Debt Clearance', y = 'Count', title = 'Distribution of Years to Debt Clearance by Scenario')\n```", "```py\nset.seed(246)\n\n# Take Sample of Total Dataframe\ncount_df_sample <- df4 %>%\n  filter(group == 'paid') %>% \n  group_by(index, scenario, scenario_l) %>%\n  summarise(debt_clearance = max(year))  %>% \n  group_by(scenario_l) %>% \n  slice_sample(n = 4000)\n\n# Poisson Likelihood\nm1a <- brm(\n  debt_clearance ~ scenario_l + 0,\n  data = count_df_sample,\n  family = poisson,\n  prior = c(prior(gamma(9, 1), class = 'b', lb = 0)),\n  chains = 4, iter = 2000, cores = 4, threads = threading(2)\n) %>% \n  add_criterion(c('loo', 'waic'),  moment_match = T)\n\n# Negative Binomial Likelihood w/ Pooling\nm1b <- brm(\n  debt_clearance ~ scenario_l + 0,\n  data = count_df_sample,\n  family = negbinomial,\n  prior = c(prior(gamma(9, 1), class = 'b', lb = 0)),\n  chains = 4, iter = 2000, cores = 4, threads = threading(2)\n) %>% \n  add_criterion(c('loo', 'waic'),  moment_match = T)\n\n# Establish Prior for Non-Pooling Negative Binomial \n\nprior <- get_prior(\n  bf(debt_clearance ~ scenario_l + 0,\n  shape  ~ scenario_l + 0),\n  data = count_df_sample,\n  family = negbinomial,\n  prior = c(prior(gamma(9, 1), class = 'b', lb = 0))) %>% \n  as_tibble() %>% \n  mutate(prior = if_else(class == 'b' & dpar == 'shape' & coef == '', 'gamma(9, 1)',  prior),\n         lb = if_else(class == 'b' & dpar == 'shape' & coef == '', '0',  lb),\n         prior = if_else(class == 'b' & dpar == '' & coef == '', 'gamma(6, 1)', prior),\n         lb = if_else(class == 'b' & dpar == '' & coef == '', '0', lb)) %>% \n  as.brmsprior()\n\n# Negative Binomial Likelihood w/o Pooling\n\nm1c <- brm(\n  bf(debt_clearance ~ scenario_l + 0,\n  shape  ~ scenario_l + 0),\n  data = count_df_sample,\n  family = negbinomial,\n  prior = prior,\n  chains = 4, iter = 2000, cores = 4, threads = threading(2)\n) %>% \n  add_criterion(c('loo', 'waic'),  moment_match = T)\n\nloo_compare(m1a, m1b, m1c) %>% print(simplify = F)\n```", "```py\nnew_df <- tibble(scenario_l = c('A', 'B', 'C'))\n\nm1c %>% \n  tidybayes::epred_draws(new_df, ndraws = 4000, seed = 111) %>% \n  compare_levels(.epred, scenario_l) %>% \n  ggplot(aes(.epred, scenario_l, fill = scenario_l)) + \n    stat_dist_halfeye() +\n    geom_vline(xintercept = 0, linetype = 'dashed') +\n    theme_ggdist() +\n    scale_fill_brewer(palette = \"Dark2\") +\n    labs(x = 'Difference in Posterior Means', y = 'Scenario', title = 'Differences in Posterior Mean Between Each Scenario', fill = 'Scenario')\n```"]