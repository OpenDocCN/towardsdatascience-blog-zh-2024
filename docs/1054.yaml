- en: Using Double Machine Learning and Linear Programming to optimise treatment strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/using-double-machine-learning-and-linear-programming-to-optimise-treatment-strategies-920c20a29553?source=collection_archive---------2-----------------------#2024-04-26](https://towardsdatascience.com/using-double-machine-learning-and-linear-programming-to-optimise-treatment-strategies-920c20a29553?source=collection_archive---------2-----------------------#2024-04-26)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Causal AI, exploring the integration of causal reasoning into machine learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@raz1470?source=post_page---byline--920c20a29553--------------------------------)[![Ryan
    O''Sullivan](../Images/7cd161d38d67d2c0b7da2d8f3e7d33fe.png)](https://medium.com/@raz1470?source=post_page---byline--920c20a29553--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--920c20a29553--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--920c20a29553--------------------------------)
    [Ryan O''Sullivan](https://medium.com/@raz1470?source=post_page---byline--920c20a29553--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--920c20a29553--------------------------------)
    ·11 min read·Apr 26, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5253ef494d83fe5dc0bb6e3962eda71c.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Jordan McDonald](https://unsplash.com/@jordanmcdonald?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: What is this series of articles about?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to my series on Causal AI, where we will explore the integration of
    causal reasoning into machine learning models. Expect to explore a number of practical
    applications across different business contexts.
  prefs: []
  type: TYPE_NORMAL
- en: In the last article we explored *de-biasing treatment effects with Double Machine
    Learning*. This time we will delve further into the potential of DML covering
    *using Double Machine Learning and Linear Programming to optimise treatment strategies*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you missed the last article on Double Machine Learning, check it out here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](/de-biasing-treatment-effects-with-double-machine-learning-63b16fcb3e97?source=post_page-----920c20a29553--------------------------------)
    [## De-biasing Treatment Effects with Double Machine Learning'
  prefs: []
  type: TYPE_NORMAL
- en: Causal AI, exploring the integration of causal reasoning into machine learning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: towardsdatascience.com](/de-biasing-treatment-effects-with-double-machine-learning-63b16fcb3e97?source=post_page-----920c20a29553--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This article will showcase how Double Machine Learning and Linear Programming
    can be used optimise treatment strategies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Expect to gain a broad understanding of:**'
  prefs: []
  type: TYPE_NORMAL
- en: Why businesses want to optimise treatment strategies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How conditional average treatment effects (CATE) can help personalise treatment
    strategies (also known as Uplift modelling).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Linear Programming can be used to optimise treatment assignment given budget
    constraints.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A worked case study in Python illustrating how we can use Double Machine Learning
    to estimate CATE and Linear Programming to optimise treatment strategies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The full notebook can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://github.com/raz1470/causal_ai/blob/main/notebooks/estimating%20average%20treatment%20effects%20with%20double%20machine%20learning.ipynb?source=post_page-----920c20a29553--------------------------------)
    [## causal_ai/notebooks/estimating average treatment effects with double machine
    learning.ipynb at main…'
  prefs: []
  type: TYPE_NORMAL
- en: This project introduces Causal AI and how it can drive business value. - causal_ai/notebooks/estimating
    average…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/raz1470/causal_ai/blob/main/notebooks/estimating%20average%20treatment%20effects%20with%20double%20machine%20learning.ipynb?source=post_page-----920c20a29553--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Optimising treatment strategies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a common question which arises in most businesses: “What is the optimal
    treatment for a customer in order to maximise future sales whilst minimising cost?”.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s break this idea down with a simple example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your business sells socks online. You don’t sell an essential product, so you
    need to encourage existing customers to repeat purchase. Your main lever for this
    is sending out discounts. So the treatment strategy in this case is sending out
    discounts:'
  prefs: []
  type: TYPE_NORMAL
- en: 10% discount
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 20% discount
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 50% discount
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each discount has a different return on investment. If you think back to the
    last article on average treatment effects, you can probably see how we can calculate
    ATE for each of these discounts and then select the one with the highest return.
  prefs: []
  type: TYPE_NORMAL
- en: However, what if we have heterogenous treatment effects — The treatment effect
    varies across different subgroups of the population.
  prefs: []
  type: TYPE_NORMAL
- en: This is when we need to start considering conditional average treatment effects
    (CATE)!
  prefs: []
  type: TYPE_NORMAL
- en: Conditional Average Treatment Effects (CATE)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CATE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CATE is the average impact of a treatment or intervention on different subgroups
    of a population. ATE was very much about “does this treatment work?” whereas CATE
    allows us to change the question to “who should we treat?”.
  prefs: []
  type: TYPE_NORMAL
- en: We “condition” on our control features to allow treatment effects to vary depending
    on customer characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: Think back to the example where we are sending out discounts. If customers with
    a higher number of previous orders respond better to discounts, we can condition
    on this customer characteristic.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth pointing out that in Marketing, estimating CATE is often referred
    to as Uplift Modelling.
  prefs: []
  type: TYPE_NORMAL
- en: Estimating CATE with Double Machine Learning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We covered DML in the last article, but just in case you need a bit of a refresher:'
  prefs: []
  type: TYPE_NORMAL
- en: '“First stage:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Treatment model (de-biasing):*** Machine learning model used to estimate
    the probability of treatment assignment (often referred to as propensity score).
    The treatment model residuals are then calculated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Outcome model (de-noising):*** Machine learning model used to estimate the
    outcome using just the control features. The outcome model residuals are then
    calculated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Second stage:'
  prefs: []
  type: TYPE_NORMAL
- en: The treatment model residuals are used to predict the outcome model residuals.”
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use Double Machine Learning to estimate CATE by interacting our control
    features (X) with the treatment effect in the second stage model.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ac0f8e512d75a84ea1fecff41c663885.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: This can be really powerful as we are now able to get customer level treatment
    effects!
  prefs: []
  type: TYPE_NORMAL
- en: Linear Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is it?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Linear programming is an optimisation method which can be used to find the optimal
    solution of a linear function given some constraints. It is often used to solve
    transportation, scheduling and resource allocation problems. A more generic term
    which you might see used is Operations Research.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s break linear programming down with a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Decision variables:*** These are the unknown quantities which we want to
    estimate optimal values for — The marketing spend on Social Media, TV and Paid
    Search.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Objectives function:*** The linear equation we are trying to minimise or
    maximise — The marketing Return on Investment (ROI).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Constraints:*** Some restrictions on the decision variables, usually represented
    by linear inequalities — Total marketing spend between £100,000 and £500,000.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The intersection of all constraints forms a feasible region, which is the set
    of all possible solutions that satisfy the given constraints. The goal of linear
    programming is to find the point within the feasible region that optimizes the
    objective function.
  prefs: []
  type: TYPE_NORMAL
- en: Assignment problems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Assignment problems are a specific type of linear programming problem where
    the goal is to assign a set of “tasks” to a set of “agents”. Lets use an example
    to bring it to life:'
  prefs: []
  type: TYPE_NORMAL
- en: You run an experiment where you send different discounts out to 4 random groups
    of existing customers (the 4th of which actually you don’t send any discount).
    You build 2 CATE models — (1) Estimating how the offer value effects the order
    value and (2) Estimating how offer value effects the cost.
  prefs: []
  type: TYPE_NORMAL
- en: 'Agents: Your existing customer base'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Tasks: Whether you send them a 10%, 20% or 50% discount'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Decision variables: Binary decision variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Objective function: The total order value minus costs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constraint 1: Each agent is assigned to at most 1 task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constraint 2: The cost ≥ £10,000'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constraint 3: The cost ≤ £100,000'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/6936fdca2a707a249350cd61af92f284.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: We basically want to find out the optimal treatment for each customer given
    some overall cost constraints. And linear programming can help us do this!
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that this problem is “NP hard”, a classification of problems
    that are at least as hard as the hardest problems in NP (nondeterministic polynomial
    time).
  prefs: []
  type: TYPE_NORMAL
- en: 'Linear programming is a really tricky but rewarding topic. I’ve tried to introduce
    the idea to get us started — If you want to learn more I recommend this resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://realpython.com/linear-programming-python/?source=post_page-----920c20a29553--------------------------------)
    [## Hands-On Linear Programming: Optimization With Python - Real Python'
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, you'll learn about implementing optimization in Python with
    linear programming libraries. Linear…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: realpython.com](https://realpython.com/linear-programming-python/?source=post_page-----920c20a29553--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: OR Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: OR tools is an open source package developed by Google which can solve a range
    of linear programming problems, including assignment problems. We will demonstrate
    it in action later in the article.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://developers.google.com/optimization?source=post_page-----920c20a29553--------------------------------)
    [## OR-Tools | Google for Developers'
  prefs: []
  type: TYPE_NORMAL
- en: The OR-Tools suite provides operations research software libraries and APIs
    for constraint optimization, linear…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: developers.google.com](https://developers.google.com/optimization?source=post_page-----920c20a29553--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Marketing Case Study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to continue with the assignment problem example and illustrate
    how we can solve this in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Data generating process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We set up a data generating process with the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Difficult nuisance parameters (b)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Treatment effect heterogeneity (tau)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The X features are customer characteristics taken before the treatment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8afb0c2d4588af0545c01cc9248d533d.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: T is a binary flag indicating whether the customer received the offer. We create
    three different treatment interactions to allow us to simulate different treatment
    effects.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0c53dd6127d10b58a8b3d16279cac3b3.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We can use the data generator to simulate three treatments, each with a different
    treatment effect.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/73cd2e166adf8aa3eaade2a83fa22f4a.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'As in the last article, the data generating process python code is based on
    the synthetic data creator from Ubers Causal ML package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[## causalml/causalml/dataset/regression.py at master · uber/causalml'
  prefs: []
  type: TYPE_NORMAL
- en: Uplift modeling and causal inference with machine learning algorithms - causalml/causalml/dataset/regression.py
    at…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/uber/causalml/blob/master/causalml/dataset/regression.py?source=post_page-----920c20a29553--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Estimating CATE with DML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We then train three DML models using LightGBM as flexible first stage models.
    This should allow us to capture the difficult nuisance parameters whilst correctly
    calculating the treatment effect.
  prefs: []
  type: TYPE_NORMAL
- en: Pay attention to how we pass the X features in through X rather than W (unlike
    in the last article where we passed the X features through W). Features passed
    through X will be used in both the first and second stage models — In the second
    stage model the features are used to create interaction terms with the treatment
    residual.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When we plot the actual vs estimated CATE, we see that the model does a reasonable
    job.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1c1e7cd98de1b3a24a3dacbe62241ee3.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: Naive optimisation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start by exploring this as an optimisation problem. We have a three
    treatments which a customer could receive. Below we create a mapping for the cost
    of each treatment, and set an overall cost constraint.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can then estimate the CATE for each customer and then initially select each
    customers best treatment. However, selecting the best treatment doesn’t keep us
    within the maximum cost constraint. Therefore select the customers with the highest
    CATE until we reach our max cost constraint.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a46b695da116108f0e4be158e342bb1e.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: Optimising treatment strategies with Linear Programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by creating a dataframe with the cost of each treatment for each customer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now it’s time to use the OR Tools package to solve this assignment problem!
    The code takes the following inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: Cost constraints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Array containing the cost of each treatment for each customer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Array containing the estimated order value for each treatment for each customer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code outputs a dataframe with each customers potential treatment, and a
    column indicating which one is the optimal assignment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/58259d64a587b13f48a54939e79ab795.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: Whilst keeping to the cost constraint of £3k, we can generate £18k in order
    value using the optimised treatment strategy. This is 36% higher than the naive
    approach!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b2a5b7d0562553c7365d3dbd6f3a9ffb.png)'
  prefs: []
  type: TYPE_IMG
- en: User generated image
  prefs: []
  type: TYPE_NORMAL
- en: Final thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Today we covered using Double Machine Learning and Linear Programming to optimise
    treatment strategies. Here are some closing thoughts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We covered Linear DML, you may want to explore alternative approaches which
    are more suited to dealing with complex interaction effects in the second stage
    model:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://github.com/py-why/EconML/blob/main/notebooks/Double%20Machine%20Learning%20Examples.ipynb?source=post_page-----920c20a29553--------------------------------)
    [## EconML/notebooks/Double Machine Learning Examples.ipynb at main · py-why/EconML'
  prefs: []
  type: TYPE_NORMAL
- en: ALICE (Automated Learning and Intelligence for Causation and Economics) is a
    Microsoft Research project aimed at…
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: github.com](https://github.com/py-why/EconML/blob/main/notebooks/Double%20Machine%20Learning%20Examples.ipynb?source=post_page-----920c20a29553--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: But also remember you don’t have to use DML, other methods like T-Learner or
    DR-Learner could be used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To keep this article to a quick read I did not tune the hyper-parameters — As
    we increase the complexity of the problem and approach used, we need to pay closer
    attention to this part.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linear programming/assignment problems are NP hard, so if you have a large customer
    base and/or several treatments this part of the code may take a long time to run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be challenging operationalising a daily pipeline with linear programming/assignment
    problems — An alternative is running the optimisation periodically and learning
    the optimal policy based on the results in order to create a segmentation to use
    in a daily pipeline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follow me if you want to continue this journey into Causal AI — In the next
    article we will explore how we can estimate non-linear treatment effects in pricing
    and marketing optimisation problems.
  prefs: []
  type: TYPE_NORMAL
