- en: Using OpenAI and PandasAI for Series Operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/using-openai-and-pandasai-for-series-operations-2978d539fb66?source=collection_archive---------1-----------------------#2024-06-29](https://towardsdatascience.com/using-openai-and-pandasai-for-series-operations-2978d539fb66?source=collection_archive---------1-----------------------#2024-06-29)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Incorporate natural language queries and operations into your Python data cleaning
    workflow.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://michaelbrucewalker.medium.com/?source=post_page---byline--2978d539fb66--------------------------------)[![Michael
    B Walker](../Images/c8537da4fca3c542e1729771675bc059.png)](https://michaelbrucewalker.medium.com/?source=post_page---byline--2978d539fb66--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--2978d539fb66--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--2978d539fb66--------------------------------)
    [Michael B Walker](https://michaelbrucewalker.medium.com/?source=post_page---byline--2978d539fb66--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--2978d539fb66--------------------------------)
    ·6 min read·Jun 29, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ba6fcadd6ed048d35c8b0a0ea7df7a48.png)'
  prefs: []
  type: TYPE_IMG
- en: Red panda drawing donated by Karen Walker, the artist.
  prefs: []
  type: TYPE_NORMAL
- en: Many of the series operations we need to do in our pandas data cleaning projects
    can be assisted by AI tools, including by PandasAI. PandasAI takes advantage of
    large language models, such as that from OpenAI, to enable natural language queries
    and operations on data columns. In this post, we examine how to use PandasAI to
    query Series values, create new Series, set Series values conditionally, and reshape
    our data.
  prefs: []
  type: TYPE_NORMAL
- en: You can install PandasAI by entering pip install pandasai into a terminal or
    into Windows Powershell. You will also need to get a token from openai.com to
    send a request to the OpenAI API.
  prefs: []
  type: TYPE_NORMAL
- en: As the PandasAI library is developing rapidly, you can anticipate different
    results depending on the versions of PandasAI and pandas you are using. In this
    article, I use version 1.4.8 of PandasAI and version 1.5.3 of pandas.
  prefs: []
  type: TYPE_NORMAL
- en: We will work with data from the National Longitudinal Study of Youth (NLS) conducted
    by the United States Bureau of Labor Statistics. The NLS has surveyed the same
    cohort of high school students for over 25 years, and has useful data items on
    educational outcomes and weeks worked for each of those years, among many other
    variables. It is available for public use at nlsinfo.org. (The NLS public releases
    are covered by the United States government [Open Data Policy](https://digital.gov/resources/open-data-policy-m-13-13/#:~:text=Making%20information%20resources%20accessible%2C%20discoverable,contribute%20significantly%20to%20job%20creation.),
    which permits both non-commercial and commercial use.)
  prefs: []
  type: TYPE_NORMAL
- en: We will also work with COVID-19 data provided by *Our World in Data.* That dataset
    has one row per country per day with number of new cases and new deaths. This
    dataset is available for download at [ourworldindata.org/covid-cases](https://ourworldindata.org/covid-cases),
    with a Creative Commons CC BY 4.0 license. You can also download all code and
    data used in this post from [GitHub](https://github.com/PacktPublishing/Python-Data-Cleaning-Cookbook-Second-Edition/tree/main/6.%20SeriesOperations).
  prefs: []
  type: TYPE_NORMAL
- en: 'We start by importing the OpenAI and SmartDataframe modules from PandasAI.
    We also have to instantiate an llm object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we load the DataFrames we will be using and create a SmartDataframe object
    from the NLS pandas DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are ready to generate summary statistics on Series from our SmartDataframe.
    We can ask for the average for a single Series, or for multiple Series:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also summarize Series values by another Series, usually one that is
    categorical:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also create a new Series with the `chat` method of SmartDataframe. We
    do not need to use the actual column names. For example, PandasAI will figure
    out that we want the *childathome* Series when we write child at home:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use the `chat` method to create Series values conditionally:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'PandasAI is quite flexible regarding the language you might use here. For example,
    the following provides the same results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can do calculations across a number of similarly named columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This will calculate the average of all weeksworked00-weeksworked22 columns and
    assign that to a new column called weeksworked.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can easily impute values where they are missing based on summary statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also use PandasAI to do some reshaping. Recall that the COVID-19 case
    data has new cases for each day for each country. Let’s say we only want the first
    row of data for each country. We can do that the traditional way with *drop_duplicates*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can get the same results by creating a SmartDataframe and using the `chat`
    method. The natural language I use here is remarkably straightforward, *Show first
    casedate and location and other values for each country*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Notice that PandasAI makes smart choices about the columns to get. We get the
    columns we need rather than all of them. We could have also just passed the names
    of the columns we wanted to `chat`. (PandasAI sorted the rows by iso_code, rather
    than by location, which is why the first row is different.)
  prefs: []
  type: TYPE_NORMAL
- en: Much of the work when using PandasAI is really just importing the relevant libraries
    and instantiating large language model and SmartDataframe objects. Once that’s
    done, simple sentences sent to the `chat` method of the SmartDataframe are sufficient
    to summarize Series values and create new Series.
  prefs: []
  type: TYPE_NORMAL
- en: PandasAI excels at generating simple statistics from Series. We don’t even need
    to remember the Series name exactly. Often the natural language we might use can
    be more intuitive than traditional pandas methods like groupby. The *Show satmath
    average by gender* value passed to `chat` is a good example of that.
  prefs: []
  type: TYPE_NORMAL
- en: Operations on Series, including the creation of a new Series, is also quite
    straightforward. We created a total number of children Series (childnum) by instructing
    the SmartDataframe to add the number of children living at home to the number
    of children not living at home. We didn’t even provide the literal Series names,
    childathome and childnotathome respectively. PandasAI figured out what we meant.
  prefs: []
  type: TYPE_NORMAL
- en: Since we are passing natural language instructions to `chat` for our Series
    operations, there is no one right way to get what we want. For example, we get
    the same result when we passed `evermarried is ‘No’ when maritalstatus is ‘Never-married’,
    else ‘Yes’` to `chat` as we did with `if maritalstatus is ‘Never-married’ set
    evermarried2 to ‘No’, otherwise ‘Yes’`.
  prefs: []
  type: TYPE_NORMAL
- en: We can also do fairly extensive DataFrame reshaping with simple natural language
    instructions, as in the last command we provided. We add `and other values` to
    the instructions to get columns other than casedate. PandasAI also figures out
    that location makes sense as the index.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about how to use PandasAI and SmartDataframes here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://docs.pandas-ai.com/llms?source=post_page-----2978d539fb66--------------------------------)
    [## Large Language Models - PandasAI'
  prefs: []
  type: TYPE_NORMAL
- en: PandasAI supports several large language models (LLMs) that are used to generate
    code from natural language queries.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: docs.pandas-ai.com](https://docs.pandas-ai.com/llms?source=post_page-----2978d539fb66--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: 'Or in the second edition of my book, Python Data Cleaning Cookbook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://packt.link/hKI1y?source=post_page-----2978d539fb66--------------------------------)
    [## Python Data Cleaning Cookbook - Second Edition: Prepare your data for analysis
    with pandas, NumPy…'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Data Cleaning Cookbook - Second Edition: Prepare your data for analysis
    with pandas, NumPy, Matplotlib…'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: packt.link](https://packt.link/hKI1y?source=post_page-----2978d539fb66--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Good luck with your data cleaning and I would love to hear how things are going!
  prefs: []
  type: TYPE_NORMAL
