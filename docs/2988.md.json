["```py\n-- An example transaction\nBEGIN DEFERRED TRANSACTION;\nSELECT * FROM inventory WHERE id = 1; -- Statement 1\nUPDATE inventory SET stock = stock + 1 WHERE id = 1; -- Statement 2\n```", "```py\n-- Transaction 1\nBEGIN DEFERRED TRANSACTION;\nSELECT * FROM inventory WHERE id = 1; \nUPDATE inventory SET stock = stock + 1 WHERE id = 1; \n\n-- Transcation 2\nBEGIN DEFERRED TRANSACTION;\nUPDATE inventory SET stock = stock - 1 WHERE id = 1; \n\n-- Example sequence of events:\n  -- Transaction 1 begins\n    -- SELECT statement: No lock is acquired yet.\n  -- Transaction 2 begins\n    -- Acquires a write lock (UPDATE statement).\n  -- Transcation 1 continues\n    -- Tries to acquire a write lock (UPDATE statement).\n    -- Fails because Transaction 2 already committed and released the lock.\n    -- SQLite throws SQLITE_BUSY.\n  -- Transaction 2 commits successfully. Transaction 1 has failed.\n```", "```py\n#!/bin/bash\n\n# Ensure script stops when commands fail.\nset -e\n\n# Backup our database to the temp directory.\nsqlite3 /path/to/db \"VACUUM INTO '/path/to/backup'\"\n\n# Compress the backup file for more efficient storage\ngzip /tmp/db\n\n# Upload backup to S3 using a rolling daily naming scheme.\naws s3 cp /tmp/db.gz s3://mybucket/db-`date +%d`.gz\n```", "```py\n# Edit your cron jobs\ncrontab -e\n\n# Add this to the end of the crontab\n0 0 * * * /path/to/my_backup_script.sh\n```", "```py\n# /etc/litestream.yml\ndbs:\n  - path: /path/to/your.db\n    replicas:\n      - type: s3\n        bucket: your-s3-bucket-name\n        path: your-database-name\n        region: your-region\n```", "```py\nlitestream replicate -config /etc/litestream.yml\n```", "```py\nlitestream restore -o /path/to/restored.db \\\n  -timestamp \"2024-12-10T15:00:00Z\" \\\n  s3://your-s3-bucket-name/your-database-name\n```"]