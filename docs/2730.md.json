["```py\nquery_embedding = model.encode([query])[0]\nresults = table.search(query_embedding).limit(INITIAL_RESULTS).to_pandas()\n```", "```py\n# Instantiate the reranker\nfrom transformers import AutoModelForSequenceClassification, AutoTokenizer\n\nreranker_tokenizer = AutoTokenizer.from_pretrained('BAAI/bge-reranker-v2-m3')\nreranker_model = AutoModelForSequenceClassification.from_pretrained('BAAI/bge-reranker-v2-m3').to(\"mps\")\nreranker_model.eval()\n\n# results = ... put code to query your vector database here...\n# Note that in our case the results are a dataframe containing the text\n# in the \"chunk\" column.\n\n# Perform a reranking\n# Form query-chunk-pairs\npairs = [[query, row['chunk']] for _, row in results.iterrows()]\n\n# Calculate relevance scores\nwith torch.no_grad():\n    inputs = reranker_tokenizer(pairs, padding=True, truncation=True, return_tensors='pt', max_length=512).to(\"mps\")\n    scores = reranker_model(**inputs, return_dict=True).logits.view(-1,).float()\n\n# Add scores to the results DataFrame\nresults['rerank_score'] = scores.tolist()\n\n# Sort results by rerank score and add new rank\nreranked_results = results.sort_values('rerank_score', ascending=False).reset_index(drop=True)\n```"]