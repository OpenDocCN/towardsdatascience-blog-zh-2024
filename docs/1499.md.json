["```py\nDataLoader(dataset, batch_size=1, shuffle=False, sampler=None,\n           batch_sampler=None, num_workers=0, collate_fn=None,\n           pin_memory=False, drop_last=False, timeout=0,\n           worker_init_fn=None, *, prefetch_factor=2,\n           persistent_workers=False)\n```", "```py\nfrom torch.utils.data import Dataset\nfrom torchvision import datasets\nfrom torchvision.transforms imports ToTensor\n\ndata = torchvision.datasets.CIFAR10('path', train=True, transform=ToTensor())\n```", "```py\nFrom PIL import Image\n# assume arr is a numpy array\n# you may need to normalize and cast arr to np.uint8 depending on format\nimg = Image.fromarray(arr)\n```", "```py\nimport torchvision.transforms.Compose\n\ndataset_transform = transforms.Compose([\n        transforms.RandomResizedCrop(256),\n        transforms.RandomHorizontalFlip(),\n        transforms.ToTensor(),\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n])\n```", "```py\nfrom torch.utils.data import Dataset\nfrom torchvision import transforms\n\nclass ExampleDataset(Dataset):\n    \"\"\"Example dataset\"\"\"\n\n    def __init__(self, raw_img, data_mask, transform=None):\n        self.raw_img = raw_img\n        self.data_mask = data_mask\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.raw_img)\n\n    def __getitem__(self, idx):\n        if torch.is_tensor(idx):\n            idx = idx.tolist()\n\n        image = self.raw_img[idx]\n        mask = self.data_mask[idx]\n\n        sample = {'image': image, 'mask': mask}\n\n        if self.transform:\n            sample = self.transform(sample)\n\n        return sample\n```", "```py\nfrom torch.utils.data import random_split\n\ntrain, val, test = random_split(dataset, [train_size, val_size, test_size])\n```"]