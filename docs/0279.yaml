- en: How to use Zero-Shot Classification for Sentiment Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/how-to-use-zero-shot-classification-for-sentiment-analysis-abf7bd47ad25?source=collection_archive---------5-----------------------#2024-01-30](https://towardsdatascience.com/how-to-use-zero-shot-classification-for-sentiment-analysis-abf7bd47ad25?source=collection_archive---------5-----------------------#2024-01-30)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exploring mental well-being insights with zero-shot classification
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@akaba_51202?source=post_page---byline--abf7bd47ad25--------------------------------)[![Aminata
    Kaba](../Images/7c96699f24ce3d4c5346d6993db786e0.png)](https://medium.com/@akaba_51202?source=post_page---byline--abf7bd47ad25--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--abf7bd47ad25--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--abf7bd47ad25--------------------------------)
    [Aminata Kaba](https://medium.com/@akaba_51202?source=post_page---byline--abf7bd47ad25--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--abf7bd47ad25--------------------------------)
    ·9 min read·Jan 30, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5c82732f630d9c80cd801aaa631045b0.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Artwork by** [**Vivian Peng**](https://medium.com/@create_self) **— reposted
    with permission**'
  prefs: []
  type: TYPE_NORMAL
- en: Sentiment analysis is a powerful tool in natural language processing (NLP) for
    exploring public opinions and emotions in text. In the context of mental health,
    it can provide compelling insights into the holistic wellness of individuals.
    As a summer data science associate at The Rockefeller Foundation, I [conducted
    a research project](https://github.com/akaba09/redditmentalhealth) using NLP techniques
    to explore Reddit discussions on depression before and after the COVID-19 pandemic.
    In order to better understand gender-related taboos around mental health and depression,
    I chose to analyze the distinctions between posts made by men and women.
  prefs: []
  type: TYPE_NORMAL
- en: '**Different Types of Sentiment Analysis**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Traditionally, sentiment analysis classifies the overall emotions expressed
    in a piece of text into three categories: positive, negative, or neutral. But
    what if you were interested in exploring emotions at a more granular level — such
    as anticipation, fear, sadness, anger, etc.'
  prefs: []
  type: TYPE_NORMAL
- en: There are ways to do this using sentiment models that reference word libraries,
    like [The NRC Emotion Lexicon](https://saifmohammad.com/WebPages/NRC-Emotion-Lexicon.htm),
    which associates texts with eight basic emotions (anger, fear, anticipation, trust,
    surprise, sadness, joy, and disgust). However, the setup for this kind of analysis
    can be complicated, and the tradeoff may not be worth it.
  prefs: []
  type: TYPE_NORMAL
- en: I found that zero-shot classification can easily be used to produce similar
    results. The term “zero-shot” comes from the concept that a model can classify
    data with zero prior exposure to the labels it is asked to classify. This eliminates
    the need for a training dataset, which is often time-consuming and resource-intensive
    to create. The model uses its general understanding of the relationships between
    words, phrases, and concepts to assign them into various categories.
  prefs: []
  type: TYPE_NORMAL
- en: I was able to repurpose the use of zero-shot classification models for sentiment
    analysis by supplying emotions as labels to classify anticipation, anger, disgust,
    fear, joy, and trust.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, I’ll share how to quickly get started with sentiment analysis
    using zero-shot classification in 5 easy steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Platforms like HuggingFace simplify the implementation of these models. You
    can explore different models and test out the results to find which one to use
    by:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://huggingface.co](https://huggingface.co)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the “Models” tab and select the type of NLP task you’re interested
    in
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose one of the model cards, and this will lead you to the model interface
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass in a string of text to see how the model performs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Here are a couple examples of how a sentiment analysis model performed compared
    to a zero-shot model.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Sentiment Analysis**'
  prefs: []
  type: TYPE_NORMAL
- en: These models classify text into negative, neutral, and positive categories.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6cf49e13881fd3230c333d3adb3bfe26.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see here that the nuance is quite limited and does not leave a lot of
    room for interpretation. Access to the model shown above can be found [here](https://huggingface.co/cardiffnlp/twitter-roberta-base-sentiment-latest?text=I+dont+understand+what+going+on+with+me.+I%27ve+been+thinking+too+hard+lately.)
    to test or run it.
  prefs: []
  type: TYPE_NORMAL
- en: These types of models are best used when you are looking to get a general pulse
    on the sentiment—whether the text is leaning positively or negatively.
  prefs: []
  type: TYPE_NORMAL
- en: '**Zero-shot classification**'
  prefs: []
  type: TYPE_NORMAL
- en: These models classify text into any categories you want by inputting them as
    labels. Since I was looking at text around mental health, I included emotions
    as labels, including urgent, joy, sadness, fatigue, and anxiety.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9ac737e7590ffd3927e007b4e363f3b2.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that with the zero-shot classification model, we can easily categorize
    the text into a more comprehensive representation of human emotions without needing
    any labeled data. The model can discern nuances and changes in emotions within
    the text by providing accuracy scores for each label. This is useful in mental
    health applications, where emotions often exist on a spectrum.
  prefs: []
  type: TYPE_NORMAL
- en: Now that I have identified that the zero-shot classification model is a better
    fit for my needs, I will walk through how to apply the model to a dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '**Implementation of the Zero-Shot Model**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the requirements to run this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 1\. Import libraries used**'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, I am using the [DeBERTa-v3-base-mnli-fever-anli](https://huggingface.co/MoritzLaurer/DeBERTa-v3-base-mnli-fever-anli)
    zero-shot classifier from Hugging Face.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Pipeline is the function used to call in pre-trained models from HuggingFace.
    Here I am passing on two arguments. You can get the values for these arguments
    from the model card:'
  prefs: []
  type: TYPE_NORMAL
- en: '`task`: The type of task the model is performing, passed as a string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model`: Name of the model you are using, passed as a string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 2\. Read in your data**'
  prefs: []
  type: TYPE_NORMAL
- en: Your data can be in any form, as long as there is a text column where each row
    contains a string of text. To follow along with this example, you can read in
    the [Reddit depression dataset here](https://raw.githubusercontent.com/akaba09/redditmentalhealth/main/code/dep.csv).
    This dataset is made available under the Public Domain Dedication and License
    v1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a preview of the dataset we’ll be using:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2a916a26aebba2abd0d0a8b28ecc940d.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 3: Create a list of classes that you want to use for predicting sentiment**'
  prefs: []
  type: TYPE_NORMAL
- en: This list will be used as labels for the model to predict each piece of text.
    For example, is the text exploring emotions such as anger or disgust? In this
    case, I am passing a list of emotions as labels. You can use as many or as few
    labels as you’d like.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Step 4: Run the model prediction on one piece of text first**'
  prefs: []
  type: TYPE_NORMAL
- en: Run the model on one piece of text first to understand what the model returns
    and how you want to shape it for your dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The **classifier** function is part of the Transformers library in HuggingFace
    and calls in the model you want to use. In this example, we are using [“DeBERTa-V4-base-mnli-fever-anli”](https://huggingface.co/MoritzLaurer/DeBERTa-v3-base-mnli-fever-anli)
    and it takes three positional arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First position: a piece of text in string format. his variable can have any
    name. In this example, I named it `sample_text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Second position: list of labels you want to predict. This variable can have
    any name. In this example, I named it `text_labels`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Third position: `multi_label` takes a true or false argument. This determines
    whether each piece of text can have multiple labels or only one label per text.
    In this example, I am only interested in one label per text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Here’s the output you get from the sample text:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The model returns a dictionary with the following keys and values”
  prefs: []
  type: TYPE_NORMAL
- en: '“sequence”: The piece of text we passed in'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“labels”: The list of labels for the model predictions in descending order
    of confidence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '“scores”: This returns a list of scores that represent the model’s confidence
    in its predictions in descending order. The order is correlated to the labels,
    so the first element in the scores list is reflective of the first element in
    the labels list. In this example, the model has predicted “anticipation” with
    a 0.604 confidence level.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step 5: Write a custom function to make predictions on the entire dataset
    and include the labels as part of the dataframe** Seeing the structure of the
    dictionary output from the model, I can write a custom function to apply the predictions
    to all my data. In this example, I am only interested in keeping one sentiment
    for each piece of text. This function will take in your dataframe and return a
    new dataframe that includes two new columns—one for your sentiment label and one
    for the model score.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This function iterates over your dataframe and parses the dictionary result
    for each row. Since I am only interested in the sentiment with the highest score,
    I am selecting the first label by indexing it into the list with result[‘labels’][0].
    If you want to take the top three sentiments, for example, you can update with
    a range result[‘labels’][0:3]. Similarly, if you want the top three scores, you
    can update with a range result[‘scores’][0:3].
  prefs: []
  type: TYPE_NORMAL
- en: '**Now you can run the function on your dataframe!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here I pass in three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`df`: The name of your dataframe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_column`: The name of the column in the dataframe that contains text.
    Pass this argument as a string.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_labels`: A list of text labels for sentiment classification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is a preview of what your returned data frame looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3acf5ad446d2589b6a5dfe4f3aefa0cb.png)'
  prefs: []
  type: TYPE_IMG
- en: For each piece of text, you can get the associated sentiment along with the
    model score.
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusion**'
  prefs: []
  type: TYPE_NORMAL
- en: Classic sentiment analysis models explore positive or negative sentiment in
    a piece of text, which can be limiting when you want to explore more nuance, like
    emotions, in the text.
  prefs: []
  type: TYPE_NORMAL
- en: While you can explore emotions with sentiment analysis models, it usually requires
    a labeled dataset and more effort to implement. Zero-shot classification models
    are versatile and can generalize across a broad array of sentiments without needing
    labeled data or prior training.
  prefs: []
  type: TYPE_NORMAL
- en: As we explored in this example, zero-shot models take in a list of labels and
    return the predictions for a piece of text. We passed in a list of emotions as
    our labels, and the results were pretty good considering the model wasn’t trained
    on this type of emotional data. This type of classification is a valuable tool
    in analyzing mental health-related text, which allows us to gain a more comprehensive
    understanding of the emotional landscape and contributes to improved support for
    mental well-being.
  prefs: []
  type: TYPE_NORMAL
- en: '*All images, unless otherwise noted, are by the author.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Low, D. M., Rumker, L., Torous, J., Cecchi, G., Ghosh, S. S., & Talkar, T.
    (2020). Natural Language Processing Reveals Vulnerable Mental Health Support Groups
    and Heightened Health Anxiety on Reddit During COVID-19: Observational Study.
    *Journal of medical Internet research*, *22*(10), e22635.'
  prefs: []
  type: TYPE_NORMAL
