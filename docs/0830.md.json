["```py\n## R Function ##\nxicor <- function(X, Y, ties = TRUE){\n  n <- length(X)\n  r <- rank(Y[order(X)], ties.method = \"random\")\n  set.seed(42)\n  if(ties){\n    l <- rank(Y[order(X)], ties.method = \"max\")\n    return( 1 - n*sum( abs(r[-1] - r[-n]) ) / (2*sum(l*(n - l))) )\n  } else {\n    return( 1 - 3 * sum( abs(r[-1] - r[-n]) ) / (n^2 - 1) )    \n  }\n}\n\n## Python Function ##\nfrom numpy import array, random, arange\n\ndef xicor(X, Y, ties=True):\n    random.seed(42)\n    n = len(X)\n    order = array([i[0] for i in sorted(enumerate(X), key=lambda x: x[1])])\n    if ties:\n        l = array([sum(y >= Y[order]) for y in Y[order]])\n        r = l.copy()\n        for j in range(n):\n            if sum([r[j] == r[i] for i in range(n)]) > 1:\n                tie_index = array([r[j] == r[i] for i in range(n)])\n                r[tie_index] = random.choice(r[tie_index] - arange(0, sum([r[j] == r[i] for i in range(n)])), sum(tie_index), replace=False)\n        return 1 - n*sum( abs(r[1:] - r[:n-1]) ) / (2*sum(l*(n - l)))\n    else:\n        r = array([sum(y >= Y[order]) for y in Y[order]])\n        return 1 - 3 * sum( abs(r[1:] - r[:n-1]) ) / (n**2 - 1)\n\n## Julia Function ##\nimport Random\nfunction xicor(X::AbstractVector, Y::AbstractVector, ties::Bool=true)\n    Random.seed!(42)\n    n = length(X)\n    if ties\n        l = [sum(y .>= Y[sortperm(X)]) for y ∈ Y[sortperm(X)]]\n        r = copy(l)\n        for j ∈ 1:n\n            if sum([r[j] == r[i] for i ∈ 1:n]) > 1\n                tie_index = [r[j] == r[i] for i ∈ 1:n]\n                r[tie_index] = Random.shuffle(r[tie_index] .- (0:sum([r[j] == r[i] for i ∈ 1:n])-1))\n            end\n        end\n        return 1 - n*sum( abs.(r[2:end] - r[1:n-1]) ) / (2*sum(l.*(n .- l)))\n    else\n        r = [sum(y .>= Y[sortperm(X)]) for y ∈ Y[sortperm(X)]]\n        return 1 - 3 * sum( abs.(r[2:end] - r[1:end-1]) ) / (n^2 - 1)\n    end\nend\n```"]