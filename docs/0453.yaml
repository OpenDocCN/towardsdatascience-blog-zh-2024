- en: Creating a Better Dashboard — Myth or Reality?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/creating-a-better-dashboard-myth-or-reality-3d355b03e52c?source=collection_archive---------2-----------------------#2024-02-17](https://towardsdatascience.com/creating-a-better-dashboard-myth-or-reality-3d355b03e52c?source=collection_archive---------2-----------------------#2024-02-17)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/2b09fa069ec35f8a21dd1160b25338d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Lukas Blazek](https://unsplash.com/@goumbik?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: My beta version 2.0 built using Dash & Plotly instead of Matplotlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://radmilamandzhi.medium.com/?source=post_page---byline--3d355b03e52c--------------------------------)[![Radmila
    M.](../Images/f3722a0ca0c96b5f6abb8f23a1162488.png)](https://radmilamandzhi.medium.com/?source=post_page---byline--3d355b03e52c--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--3d355b03e52c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--3d355b03e52c--------------------------------)
    [Radmila M.](https://radmilamandzhi.medium.com/?source=post_page---byline--3d355b03e52c--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--3d355b03e52c--------------------------------)
    ·9 min read·Feb 17, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In February 2023 I wrote my first Medium post:'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://medium.com/geekculture/how-to-customize-infographics-in-python-tips-and-tricks-e1818aac180f?source=post_page-----3d355b03e52c--------------------------------)
    [## How to Customize Infographics in Python: Tips and Tricks'
  prefs: []
  type: TYPE_NORMAL
- en: ABC of making charts in Matplotlib
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: medium.com](https://medium.com/geekculture/how-to-customize-infographics-in-python-tips-and-tricks-e1818aac180f?source=post_page-----3d355b03e52c--------------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: Here I explained how to create a simplified dashboard with various diagrams,
    including a line plot, pie & bar charts, and a choropleth map. For plotting them
    I used ‘good old’ Matplotlib [1], because I was familiar with its keywords and
    main functions. I still believe that Matplotlib is a great library for starting
    your data journey with Python, as there is a very large collective knowledge base.
    If something is unclear with Matplotlib, you can google your queries and most
    likely you will get answers.
  prefs: []
  type: TYPE_NORMAL
- en: However, Matplotlib may encounter some difficulties when creating interactive
    and web-based visualizations. For the latter purpose, Plotly [2] can be a good
    alternative, allowing you to create unusual interactive dashboards. Matplotlib,
    on the other hand, is a powerful library that offers better control over plot
    customization, which is good for creating publish-ready visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, I will try to substitute **code which uses Matlab** (1) with **that
    based on Plotly** (2). The structure will repeat the initial post, because the
    types of plots and input data [3] are the same. However, here I will add some
    comments on level of similarity between (1) and (2) for each type of plots. My
    main intention of writing this article is to look back to my first post and try
    to remake it with my current level of knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** You will be surprised how short the Plotly code is that’s required
    for building the choropleth map :)'
  prefs: []
  type: TYPE_NORMAL
- en: But first things first, and we will start by creating a line graph in Plotly.
  prefs: []
  type: TYPE_NORMAL
- en: '#1\. Line Plot'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The line plot can be a wise choice for displaying the dynamics of changing our
    data with time. In the case below we will combine a line plot with a scatter plot
    to mark each location with its own color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below you can find a code snippet using Plotly that produces a line chart showing
    the average attendance at the FIFA World Cup over the period 1990–2018: each value
    is marked with a label and a colored scatter point.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And the result looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ebd64c831277ebf8c188774261ffe38e.png)'
  prefs: []
  type: TYPE_IMG
- en: Line plot built with Plotly. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: When you hover your mouse over any point of the chart in Plotly, a window pops
    up showing the number of spectators and the name of the country where the tournament
    was held.
  prefs: []
  type: TYPE_NORMAL
- en: '**Level of similarity to Matplotlib plot:** 8 out of 10.'
  prefs: []
  type: TYPE_NORMAL
- en: In general, the code looks very similar to the initial snippet in terms of structure
    and the placement of the main code blocks inside it.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is different:** However, some differences are also presented. For instance,
    pay attention to details how plot elements are declared (e.g. a line plot mode
    `lines+markers` which allows to display them simultaneously).'
  prefs: []
  type: TYPE_NORMAL
- en: '**What is important:** For building this plot I use the `plotly.graph_objects`
    (which is imported as `go`) module. It provides an automatically-generated hierarchy
    of classes called ‘graph objects’ that may be used to represent various figures.'
  prefs: []
  type: TYPE_NORMAL
- en: '#2\. Pie Chart (actually, a donut chart)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pie & donut charts are very good for demonstrating the contributions of different
    values to a total amount: they are divided in segments, which show the proportional
    value of each piece of our data.'
  prefs: []
  type: TYPE_NORMAL
- en: Here is a code snippet in Plotly that is used to build a pie chart which would
    display the proportion between the countries with the most World Cup titles.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The resulting visual item is given below (by the way, it is an interactive
    chart too!):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/78a806740ccdd823e9d94be75762aeff.png)'
  prefs: []
  type: TYPE_IMG
- en: Pie chart built with Plotly. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**Level of similarity to Matplotlib plot:** 7 out of 10\. Again the code logic
    is almost the same for the two versions.'
  prefs: []
  type: TYPE_NORMAL
- en: '**What is different:** One might notice that with a help of `hole` keyword
    it is possible to turn a pie chart into a donut chart. And see how easy and simple
    it is to display percentages for each segment of the chart in Plotly compared
    to Matplotlib.'
  prefs: []
  type: TYPE_NORMAL
- en: '**What is important:** Instead of using `plotly.graph_objects` module, here
    I apply `plotly.express` module (usually imported as `px`) containing functions
    that can create entire figures at once. This is the easy-to-use Plotly interface,
    which operates on a variety of types of data.'
  prefs: []
  type: TYPE_NORMAL
- en: '#3\. Bar Chart'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bar charts, no matter whether they are vertical or horizontal, show comparisons
    among different categories. The vertical axis (‘Stadium’) of the chart shows the
    specific categories being compared, and the horizontal axis represents a measured
    value, i.e. the ‘Capacity’itself.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/86073cfb93a505f1e64359d6019d7bab.png)'
  prefs: []
  type: TYPE_IMG
- en: Horizontal bar chart built with Plotly. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**Level of similarity to Matplotlib plot:** 6 out of 10.'
  prefs: []
  type: TYPE_NORMAL
- en: All in all, the two code pieces have more or less the same blocks, but the code
    in Plotly is shorter.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is different:** The code fragment in Plotly is shorter because we don’t
    have to include a paragraph to place labels for each column — Plotly does this
    automatically thanks to its interactivity.'
  prefs: []
  type: TYPE_NORMAL
- en: '**What is important:** For building this type of plot, `plotly.express` module
    was also used. For a horizontal bar char, we can use the `px.bar` function with
    `orientation=’h’`.'
  prefs: []
  type: TYPE_NORMAL
- en: '#4\. Choropleth Map'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Choropleth map is a great tool for visualizing how a variable varies across
    a geographic area. A heat map is similar, but uses regions drawn according to
    a variable’s pattern rather than geographic areas as choropleth maps do.
  prefs: []
  type: TYPE_NORMAL
- en: Below you can see the Plotly code to draw the chorogram. Here each country gets
    its color depending on the frequency how often it holds the FIFA World Cup. Dark
    red countries hosted the tournament 2 times, light red countries — 1, and all
    others (gray) — 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/368ffd2d6e5bf5dd497e0fd844931940.png)'
  prefs: []
  type: TYPE_IMG
- en: Choropleth map built with Plotly. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: '**Level of similarity to Matplotlib plot:** 4 out of 10.'
  prefs: []
  type: TYPE_NORMAL
- en: The code in Plotly is three times smaller than the code in Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is different:** While using Matplotlib to build a choropleth map, we
    have to do a lot of additional staff, e.g.:'
  prefs: []
  type: TYPE_NORMAL
- en: to download a zip-folder `ne_110m_admin_0_countries.zip` with shapefiles to
    draw the map itself and to draw country boundaries, grid lines, etc.;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: to import `Basemap`, `Polygon` and `PatchCollection` items from `mpl_toolkits.basemap`
    and `matplotlib.patches` and `matplotlib.collections` libraries and to use them
    to make colored background based on the logic we suggested in `data_football.csv`
    file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What is important:** And what is the Plotly do? It takes the same `data_football.csv`
    file and with a help of the `px.choropleth` function displays data that is aggregated
    across different map regions or countries. Each of them is colored according to
    the value of a specific information given, in our case this is the `count` variable
    in the input file.'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, all Plotly codes are shorter (or the same in a case of building
    the line plot) than those in Matplotlib. This is achieved because Plotly makes
    it far easy to create complex plots. Plotly is great for creating interactive
    visualizations with just a few lines of code.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Sum Up: Creating a Single Dashboard with Dash'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dash allows to build an interactive dashboard on a base of Python code with
    no need to learn complex JavaScript frameworks like `React.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here you can find the code and comments to its important parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Comments to the code:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to import all libraries (including HTML modules) and initialize
    dashboard with a help of the string `app = dash.Dash(__name__, external_stylesheets=external_stylesheets)`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then paste each graph into Dash core components to further integrate them
    with other HTML components (`dcc.Graph`). Here `className=”six columns”` needs
    to use half the screen for each row of plots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After that we create 2 rows of `html.Div` components with 2 plots in each. In
    addition, a simple CSS with the `style` attribute can be used to display the header
    of our dashboard in the `layout` string. This layout is set as the layout of the
    app initialized before.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the last paragraph allows to run the app locally (`app.run_server(debug=False)`).
    To see the dashboard, just follow the link [http://127.0.0.1:8050/](http://127.0.0.1:8050/)
    and you will find something like the image below.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/01ebaa70f9ad2d6dc3768e593faad6a3.png)'
  prefs: []
  type: TYPE_IMG
- en: The final dashboard built with Dash. Image by Author.
  prefs: []
  type: TYPE_NORMAL
- en: Final Remarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Honestly, the question in the title was rhetorical, and only you, dear reader,
    can decide whether the current version of the dashboard is better than the previous
    one. But at least I tried my best (and deep inside I believe that version 2.0
    is better) :)
  prefs: []
  type: TYPE_NORMAL
- en: You may think that this post doesn’t contain any new information, but I couldn’t
    disagree more. By writing this post, I wanted to emphasize the importance of improving
    skills over time, even if the first version of the code may not look that bad.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this post encourages you to look at your finished projects and try to
    remake them using the new techniques available. That is the main reason why I
    decided to substitute Matplotlib with Plotly & Dash(plus the latter two make it
    easy to create data analysis results).
  prefs: []
  type: TYPE_NORMAL
- en: The ability to constantly improve your work by improving an old version or using
    new libraries instead of the ones you used before is a great skill for any programmer.
    If you take this advice as a habit, you will see progress, because only practice
    makes perfect.
  prefs: []
  type: TYPE_NORMAL
- en: And as always, thanks for reading!
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main page of Matplotlib library: [https://matplotlib.org/stable/](https://matplotlib.org/stable/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The main page of Plotly library: [https://plotly.com/python/](https://plotly.com/python/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fjelstul, Joshua C. “The Fjelstul World Cup Database v.1.0.” July 8, 2022\.
    [https://www.github.com/jfjelstul/worldcup](https://www.github.com/jfjelstul/worldcup)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
