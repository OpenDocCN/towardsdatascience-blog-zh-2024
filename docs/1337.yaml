- en: 'Streamlining E-commerce: Leveraging Entity Resolution for Product Matching'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精简电子商务：利用实体解析进行产品匹配
- en: 原文：[https://towardsdatascience.com/streamlining-e-commerce-leveraging-entity-resolution-for-product-matching-6a507fd5e925?source=collection_archive---------12-----------------------#2024-05-28](https://towardsdatascience.com/streamlining-e-commerce-leveraging-entity-resolution-for-product-matching-6a507fd5e925?source=collection_archive---------12-----------------------#2024-05-28)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/streamlining-e-commerce-leveraging-entity-resolution-for-product-matching-6a507fd5e925?source=collection_archive---------12-----------------------#2024-05-28](https://towardsdatascience.com/streamlining-e-commerce-leveraging-entity-resolution-for-product-matching-6a507fd5e925?source=collection_archive---------12-----------------------#2024-05-28)
- en: How Google figures out the price of a product across websites
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Google 如何计算跨网站的产品价格
- en: '[](https://medium.com/@vjoshi345?source=post_page---byline--6a507fd5e925--------------------------------)[![Varun
    Joshi](../Images/e71683e268bdd7145555ef9b7d1df404.png)](https://medium.com/@vjoshi345?source=post_page---byline--6a507fd5e925--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--6a507fd5e925--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--6a507fd5e925--------------------------------)
    [Varun Joshi](https://medium.com/@vjoshi345?source=post_page---byline--6a507fd5e925--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@vjoshi345?source=post_page---byline--6a507fd5e925--------------------------------)[![Varun
    Joshi](../Images/e71683e268bdd7145555ef9b7d1df404.png)](https://medium.com/@vjoshi345?source=post_page---byline--6a507fd5e925--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--6a507fd5e925--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--6a507fd5e925--------------------------------)
    [Varun Joshi](https://medium.com/@vjoshi345?source=post_page---byline--6a507fd5e925--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--6a507fd5e925--------------------------------)
    ·9 min read·May 28, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--6a507fd5e925--------------------------------)
    ·9分钟阅读·2024年5月28日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '*Written by* [*Varun Joshi*](https://medium.com/u/73aa01507754?source=post_page---user_mention--6a507fd5e925--------------------------------)
    *and* [*Gauri Kamat*](https://medium.com/u/59894ece9ffd?source=post_page---user_mention--6a507fd5e925--------------------------------)'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*撰写者* [*Varun Joshi*](https://medium.com/u/73aa01507754?source=post_page---user_mention--6a507fd5e925--------------------------------)
    *与* [*Gauri Kamat*](https://medium.com/u/59894ece9ffd?source=post_page---user_mention--6a507fd5e925--------------------------------)'
- en: '![](../Images/82913d1dabcf38fd01f9f1f58151f133.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/82913d1dabcf38fd01f9f1f58151f133.png)'
- en: Image from Google Shopping for query “red polo ralph lauren”
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自Google购物，查询词为“red polo ralph lauren”
- en: As e-commerce continues to dominate the retail space, the challenge of accurately
    matching products across platforms and databases grows more complex. In this article,
    we demonstrate that product matching can simply be an instance of the wider statistical
    framework of entity resolution.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随着电子商务在零售领域的主导地位不断扩大，跨平台和数据库之间准确匹配产品的挑战变得越来越复杂。在本文中，我们展示了产品匹配可以简单地看作是实体解析这一更广泛统计框架的一个实例。
- en: 'Product matching (PM) refers to the problem of figuring out if two separate
    listings actually refer to the same product. There are a variety of situations
    where this is important. For example, consider the use-cases below:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 产品匹配（PM）指的是确定两个不同的商品列表是否实际上指代同一产品的问题。在许多场景下，这一问题非常重要。例如，考虑以下几个用例：
- en: With the rapid expansion of online marketplaces, e-commerce platforms (e.g.,
    Amazon) have thousands of sellers offering their products, and new sellers are
    regularly on-boarded to the platform. Moreover, these sellers potentially add
    thousands of new products to the platform every day [1]. However, the same product
    might already be available on the website from other sellers. Product matching
    is required to group these different offers into a single listing so that customers
    can have a clear view of the different offers available for a product
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随着在线市场的快速扩展，电子商务平台（如亚马逊）拥有成千上万的卖家提供他们的产品，而且新的卖家会定期加入平台。此外，这些卖家每天可能会向平台添加成千上万的新品[1]。然而，相同的产品可能已经由其他卖家在网站上出售。产品匹配是为了将这些不同的报价合并成一个列表，以便客户可以清晰地查看某个产品的不同报价。
- en: In e-commerce marketplaces, sellers can also create duplicate listings to acquire
    more real estate on the search page. In other words, they can list the same product
    multiple times (with slight variation in title, description, etc.) to increase
    the probability that their product will be seen by the customer. To improve customer
    experience, product matching is required to detect and remove such duplicate listings
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在电子商务市场中，卖家也可能创建重复的商品列表，以在搜索页面上获得更多展示空间。换句话说，他们可以多次列出相同的产品（标题、描述等略有不同），以增加客户看到其产品的概率。为了改善客户体验，需要进行产品匹配，以检测和移除这些重复的商品列表。
- en: Another important use case is competitor analysis. To set competitive prices
    and make decisions on the inventory, e-commerce companies need to be aware of
    the offers for the same product across their competition.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 另一个重要的应用场景是竞争者分析。为了设定有竞争力的价格并做出库存决策，电子商务公司需要了解竞争对手提供的同款产品的价格。
- en: Finally, price comparison services e.g., Google shopping [2], need product matching
    to figure out the price for a product across different platforms.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，价格比较服务，例如Google购物[2]，需要产品匹配来确定同一产品在不同平台上的价格。
- en: In this article, we show how the Entity Resolution (ER) framework helps us solve
    the PM problem. Specifically, we describe a framework widely used in ER, and demonstrate
    its application on a synthetic PM dataset. We begin by providing relevant background
    on ER.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中，我们展示了实体解析（ER）框架如何帮助我们解决PM问题。具体来说，我们描述了ER中广泛使用的一个框架，并展示了它在一个合成的PM数据集上的应用。我们首先提供与ER相关的背景信息。
- en: '**What is entity resolution?**'
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**什么是实体解析？**'
- en: Entity Resolution (ER) is a technique that identifies duplicate entities either
    within, or across data sources. ER within the same database is commonly called
    *deduplication*, while ER across multiple databases is called *record linkage*.
    When unique identifiers (like social security numbers) are available, ER is a
    fairly easy task. However, such identifiers are typically unavailable for reasons
    owing to data privacy. In these cases, ER becomes considerably more complex.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 实体解析（ER）是一种识别重复实体的技术，通常适用于同一数据源内或跨数据源的情况。在同一数据库内的ER通常称为*去重*，而跨多个数据库的ER则称为*记录链接*。当有唯一标识符（如社会安全号码）时，ER是一个相对简单的任务。然而，由于数据隐私的原因，这些标识符通常不可用。在这些情况下，ER变得更加复杂。
- en: Why does ER matter? ER can help augment existing databases with data from additional
    sources. This allows users to perform new analyses, without the added cost of
    collecting more data. ER has found applications across multiple domains, including
    e-commerce, human rights research, and healthcare. A [recent application](https://www.demographic-research.org/articles/volume/41/27)
    involves counting casualties in the El Salvadoran civil war, by applying ER to
    retrospective mortality surveys. Another [interesting application](https://www.tandfonline.com/doi/full/10.1080/00031305.2023.2191664)
    is deduplicating inventor names in a patents database maintained by the U.S. Patents
    and Trademarks Office.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么实体解析很重要？ER可以帮助通过额外来源的数据增强现有数据库。这使得用户能够进行新的分析，而无需增加更多数据收集的成本。ER在多个领域都有应用，包括电子商务、人权研究和医疗保健。一个[近期应用](https://www.demographic-research.org/articles/volume/41/27)涉及通过将ER应用于回顾性死亡率调查，来统计萨尔瓦多内战中的伤亡人数。另一个[有趣的应用](https://www.tandfonline.com/doi/full/10.1080/00031305.2023.2191664)是去重美国专利商标局维护的专利数据库中的发明人姓名。
- en: '**Deterministic and Probabilistic ER**'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**确定性与概率性实体解析（ER）**'
- en: 'Deterministic ER methods rely on exact agreement on all attributes of any record
    pair. For instance, suppose that we have two files A and B. Say we are comparing
    record *a* from file A and *b* from file B. Further, suppose that the comparison
    is based on two attributes: product type (for e.g., clothing, electronics) and
    manufacturing year. A deterministic rule declares (*a, b*) to be a link, if product
    typeᵃ = product typeᵇ and yearᵃ= yearᵇ. This is workable, as long as all attributes
    are categorical. If we have a textual attribute like product name, then deterministic
    linking may produce errors. For example, if nameᵃ = “Sony TV 4” and nameᵇ = “Sony
    TV4”, then (*a,b*) will be declared a non-link, even though the two names only
    differ by a space.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 确定性实体关系方法依赖于所有属性的精确一致性。举例来说，假设我们有两个文件 A 和 B。假设我们正在比较文件 A 中的记录 *a* 和文件 B 中的记录
    *b*。进一步假设，比较是基于两个属性：产品类型（例如，服装、电子产品）和制造年份。如果产品类型ᵃ = 产品类型ᵇ 且年份ᵃ = 年份ᵇ，则确定性规则会声明（*a,
    b*）为链接。如果所有属性都是类别属性，这种方法是可行的。但如果我们有像产品名称这样的文本属性，那么确定性链接可能会产生错误。例如，如果名称ᵃ = “索尼电视
    4”且名称ᵇ = “索尼电视4”，即使这两个名称仅相差一个空格，（*a,b*）也会被声明为非链接。
- en: What we then need is something that takes into account partial levels of agreement.
    This is where probabilistic ER can be used. In probabilistic ER, every pair (*a,b*)
    is assigned a probability of being a link, based on (1) how many attributes agree;
    and (2) how well they agree. For example, if product typeᵃ = product typeᵇ, yearᵃ=
    yearᵇ, and nameᵃ and nameᵇ are fairly close, then (*a,b*) will be assigned a high
    probability of being a link. If product typeᵃ = product typeᵇ, yearᵃ= yearᵇ, but
    nameᵃ and nameᵇ are poles apart (e.g. “AirPods” and “Sony TV4”), then this probability
    will be much lower. For textual attributes, probabilistic ER relies on [string
    distance metrics](https://isr.unm.edu/reports/2019/assessing-record-linkage-matches-using-string-distance-measures.pdf),
    such as the *Jaro-Winkler* and the *Levenshtein* distances.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要的是能够考虑部分一致性水平的东西。在这里，可以使用概率性实体关系（probabilistic ER）。在概率性实体关系中，每一对记录（*a,b*）都被分配一个成为链接的概率，这个概率基于（1）有多少属性一致；以及（2）这些属性一致的程度。例如，如果产品类型ᵃ
    = 产品类型ᵇ，年份ᵃ = 年份ᵇ，且名称ᵃ和名称ᵇ非常相近，那么（*a,b*）将被分配一个较高的成为链接的概率。如果产品类型ᵃ = 产品类型ᵇ，年份ᵃ =
    年份ᵇ，但名称ᵃ和名称ᵇ差异巨大（例如，“AirPods”和“索尼电视4”），那么这个概率就会显著降低。对于文本属性，概率性实体关系依赖于[字符串距离度量](https://isr.unm.edu/reports/2019/assessing-record-linkage-matches-using-string-distance-measures.pdf)，例如
    *Jaro-Winkler* 距离和 *Levenshtein* 距离。
- en: '**The Fellegi-Sunter model**'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Fellegi-Sunter 模型**'
- en: The Fellegi-Sunter model [3] provides a probabilistic framework, allowing analysts
    to quantify the likelihood of a match between records, based on the similarity
    of their attributes. The model operates by calculating a match weight for each
    record pair from both files. This weight reflects the degree of agreement between
    their respective attributes. For a given record-pair the match weight is
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Fellegi-Sunter 模型[3]提供了一个概率框架，使分析人员能够基于记录属性的相似性量化匹配的可能性。该模型通过计算来自两个文件的每对记录的匹配权重来运行。这个权重反映了它们各自属性的一致程度。对于给定的记录对，匹配权重为：
- en: '![](../Images/74afb244d1449d4bf4ef9ed87a7fe226.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74afb244d1449d4bf4ef9ed87a7fe226.png)'
- en: match weight for a record pair
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 记录对的匹配权重
- en: where mᵢ is the the probability that the two records agree on attribute *i*
    **given that they are a match;** uᵢ is the probability that the two records agree
    on attribute *i* **given that they are a non-match;** and *lambda* is the prior
    probability of a match, i.e. the probability of matching given no other information
    about the record pair. The *m* probability generally reflects the quality of the
    variables used for linking, while the *u* probability reflects incidental agreement
    between non matching record pairs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，mᵢ是两个记录在属性 *i* 上一致的概率，**假设它们是匹配的；** uᵢ是两个记录在属性 *i* 上一致的概率，**假设它们是非匹配的；**而
    *lambda* 是匹配的先验概率，即在没有关于记录对的其他信息时匹配的概率。*m* 概率通常反映了用于链接的变量质量，而 *u* 概率则反映了非匹配记录对之间的偶然一致性。
- en: The match weight is converted to a match probability between two records.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配权重被转换为两个记录之间的匹配概率。
- en: '![](../Images/0c4ff9257377c25834a209a2dec67726.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c4ff9257377c25834a209a2dec67726.png)'
- en: match probability
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配概率
- en: Finally, the match probability is compared to a chosen threshold value to decide
    whether the record pair is a match, a non-match, or requires further manual review.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将匹配概率与选定的阈值进行比较，以决定记录对是否匹配、非匹配或需要进一步人工审查。
- en: '**Illustration with synthetic product data**'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**使用合成产品数据的示例**'
- en: '**Data Generation**'
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**数据生成**'
- en: We generate data to reflect a realistic product matching scenario. Specifically,
    we generate file A comprising 79 records, and file B comprising 192 records. There
    are 59 overlapping records between the two files. Both files contain four linking
    variables, namely the product name, product type, brand, and price. For example,
    a record in file A representing Apple airpods has the product name “Apple AirPods”,
    product type “Earbuds”, the recorded brand is “Apple” and the product price is
    $200\. The product name, type, and brand are string-valued variables, while the
    price is a continuous-valued numeric variable. We also generate errors in each
    of the linking variables. In the string valued fields, we introduce deletion errors;
    for example, a series 6 Apple watch may be recorded as “Apple Watch Series 6”
    in file A and as “Apple Watch 6” in file B. We also introduce case-change errors
    in the string fields; for example, the same product may be recorded as “apple
    watch series 6” in file A and as “Apple Watch 6” in file B. The continuous nature
    of the price variable may automatically induce errors. For example, a product
    may be priced at $55 in one file, but $55.2 in the other.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生成数据以反映一个现实的产品匹配场景。具体来说，我们生成了文件 A，包含 79 条记录，文件 B，包含 192 条记录。两者之间有 59 条重叠记录。两个文件都包含四个链接变量，即产品名称、产品类型、品牌和价格。例如，文件
    A 中表示 Apple AirPods 的记录，产品名称为“Apple AirPods”，产品类型为“耳塞”，记录的品牌为“Apple”，产品价格为 200
    美元。产品名称、类型和品牌是字符串类型的变量，而价格是连续数值型变量。我们还在每个链接变量中引入了错误。在字符串类型字段中，我们引入了删除错误；例如，Apple
    Series 6 手表可能在文件 A 中记录为“Apple Watch Series 6”，而在文件 B 中记录为“Apple Watch 6”。我们还在字符串字段中引入了大小写变更错误；例如，同一产品可能在文件
    A 中记录为“apple watch series 6”，而在文件 B 中记录为“Apple Watch 6”。价格变量的连续性可能自动引入错误。例如，某个产品在一个文件中的价格为
    55 美元，而在另一个文件中为 55.2 美元。
- en: 'For synthetic data generation, we used the free version of ChatGPT (i.e., GPT
    3.5) [4]. The following three prompts were used for data generation:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于合成数据生成，我们使用了免费版本的 ChatGPT（即 GPT 3.5）[4]。以下三个提示用于数据生成：
- en: '**Prompt 1: to generate the dataset with links**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示 1：生成带有链接的数据集**'
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above prompt generates the dataset with links. The number of rows can be
    modified to generate a dataset with a different number of links.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 上述提示生成了带有链接的数据集。可以修改行数以生成具有不同数量链接的数据集。
- en: To generate more records for each individual dataset (dataset A or dataset B)
    the following two prompts were used.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为每个单独的数据集（数据集 A 或数据集 B）生成更多记录，使用了以下两个提示。
- en: '**Prompt 2: to generate more records for dataset A**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示 2：为数据集 A 生成更多记录**'
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Prompt 3: to generate more records for dataset B**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示 3：为数据集 B 生成更多记录**'
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Record Linkage**'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**记录链接**'
- en: Our goal is to identify the overlapping records between files A and B using
    the Fellegi-Sunter (FS) model. We implement the FS model using the ***splink***
    package [5] in Python.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是使用 Fellegi-Sunter (FS) 模型识别文件 A 和 B 之间的重叠记录。我们通过 Python 中的 ***splink***
    包实现 FS 模型 [5]。
- en: 'To compare the product title, product type, and brand, we use the default *name*
    comparison function available in the *splink* package. Specifically, the comparison
    function has the following 4 comparison levels:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较产品标题、产品类型和品牌，我们使用了 *splink* 包中提供的默认 *name* 比较函数。具体来说，该比较函数有以下 4 个比较级别：
- en: Exact match
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精确匹配
- en: Damerau-Levenshtein Distance <= 1
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Damerau-Levenshtein 距离 <= 1
- en: Jaro Winkler similarity >= 0.9
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jaro Winkler 相似度 >= 0.9
- en: Jaro Winkler similarity >= 0.8
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jaro Winkler 相似度 >= 0.8
- en: If a pair of products does not fall into any of the 4 levels, a default *Anything
    Else* level is assigned to the pair.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一对产品不属于任何 4 个级别，则为该对记录分配一个默认的 *其他* 级别。
- en: 'The *splink* package does not have a function to compare numerical columns.
    Therefore, for price comparison, we first convert the price into a categorical
    variable by splitting it up into the following buckets: [<$100, $100–200, $200–300,
    $300–400, $400–500, $500–600, $600–700, $700–800, $800–900, $900–1000, >=$1000].
    Then, we check if the price falls into the same bucket for a pair of records.
    In other words, we use the *Exact Match* comparison level.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '*splink* 包没有比较数值列的功能。因此，对于价格比较，我们首先将价格转换为分类变量，通过将价格划分到以下几个区间：[<$100, $100–200,
    $200–300, $300–400, $400–500, $500–600, $600–700, $700–800, $800–900, $900–1000,
    >=$1000]。然后，我们检查一对记录的价格是否落在相同的区间内。换句话说，我们使用 *精确匹配* 比较级别。'
- en: All the comparisons can be specified through a settings dictionary in the *splink*
    package
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所有比较都可以通过 *splink* 包中的设置字典来指定。
- en: The parameters of the FS model are estimated using the expectation maximization
    algorithm. In *splink*, there are built-in functions for doing this
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: FS模型的参数使用期望最大化算法进行估计。在*splink*中，提供了内置的函数来实现这一点。
- en: To evaluate how the FS model performs, we note the number of linked records,
    precision, recall, and F1 score of the prediction. Precision is defined as the
    proportion of linked records that are true links. And Recall is defined as the
    proportion of true links that are correctly identified. The F1 score is equal
    to 2*Precision*Recall/(Precision + Recall). s*plink* provides a function to generate
    all these metrics as shown below
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了评估FS模型的表现，我们记录了已连接记录的数量、精确度、召回率和F1得分。精确度定义为已连接记录中真实链接的比例。召回率定义为真实链接中正确识别的比例。F1得分等于2*精确度*召回率
    /（精确度 + 召回率）。*splink*提供了一个函数来生成这些度量，结果如下所示：
- en: 'The full code to train and evaluate this model is available here: [https://github.com/vjoshi345/product-matching-article/blob/main/train_synthetic_fellegi_sunter.py](https://github.com/vjoshi345/product-matching-article/blob/main/train_synthetic_fellegi_sunter.py)'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 用于训练和评估此模型的完整代码可以在这里找到：[https://github.com/vjoshi345/product-matching-article/blob/main/train_synthetic_fellegi_sunter.py](https://github.com/vjoshi345/product-matching-article/blob/main/train_synthetic_fellegi_sunter.py)
- en: Results
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果
- en: We run the FS model on all possible pairs of products from the two datasets.
    Specifically, there are 15,168 product pairs (79 * 192). The *splink* package
    has a function to automatically generate predictions (i.e., matching links) for
    different match probability thresholds. Below we show the confusion matrix for
    match probability=0.913 (the threshold for which we get the highest F1 score).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在两个数据集中的所有可能产品对上运行了FS模型。具体来说，共有15,168个产品对（79 * 192）。*splink*包有一个功能，可以自动生成不同匹配概率阈值下的预测（即匹配链接）。下面我们展示了匹配概率=0.913时的混淆矩阵（这是我们获得最高F1得分的阈值）。
- en: '![](../Images/b196a424d656dc219cf10c083e84e82b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b196a424d656dc219cf10c083e84e82b.png)'
- en: Confusion matrix for PM prediction
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: PM预测的混淆矩阵
- en: Total number of linked records = 82
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 已连接记录的总数 = 82
- en: Precision = 58/82 = 0.707
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 精确度 = 58 / 82 = 0.707
- en: Recall = 58/59 = 0.983
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 召回率 = 58 / 59 = 0.983
- en: F1 = (2 * 0.707 * 0.983)/(0.707 + 0.983) = 0.823
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: F1 = (2 * 0.707 * 0.983) / (0.707 + 0.983) = 0.823
- en: '**Conclusion**'
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: The purpose of this article was to show how product matching is a specific instance
    of the more general Entity Resolution problem. We demonstrated this by utilizing
    one of the popular models from the ER framework to solve the product matching
    problem. Since we wanted this to be an introductory article, we created a relatively
    simple synthetic dataset. In a real-world scenario, the data will be much more
    complex with dozens of different variables e.g., product description, color, size,
    etc. For accurate matching, we would need more advanced NLP techniques beyond
    text distance metrics. For example, we can utilize embeddings derived from Transformer
    models to semantically match products. This can help us match two products with
    syntactically different descriptions e.g., two products with Product Type *Jeans*
    and *Denims* respectively.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的目的是展示产品匹配是更通用的实体解析问题的一个具体实例。我们通过利用ER框架中的一个流行模型来解决产品匹配问题来证明这一点。由于我们希望这是一篇入门文章，我们创建了一个相对简单的合成数据集。在实际场景中，数据将更加复杂，包含几十种不同的变量，例如产品描述、颜色、尺寸等。为了准确匹配，我们需要更先进的NLP技术，超越文本距离度量。例如，我们可以利用来自Transformer模型的嵌入表示来语义上匹配产品。这可以帮助我们匹配两个语法上不同的产品描述，例如，一个产品的类型是*Jeans*，另一个是*Denims*。
- en: Further, the number of products for real-world datasets will be in the range
    of hundreds of millions with potentially hundreds of thousands of links. Such
    datasets require more efficient methods as well as compute resources for effective
    product matching.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，现实世界数据集中的产品数量将达到数亿，可能包含数十万个链接。这类数据集需要更高效的方法和计算资源来有效地进行产品匹配。
- en: References
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1]: [https://medium.com/walmartglobaltech/product-matching-in-ecommerce-4f19b6aebaca](https://medium.com/walmartglobaltech/product-matching-in-ecommerce-4f19b6aebaca)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[1]: [https://medium.com/walmartglobaltech/product-matching-in-ecommerce-4f19b6aebaca](https://medium.com/walmartglobaltech/product-matching-in-ecommerce-4f19b6aebaca)'
- en: '[2]: [https://shopping.google.com/?pli=1](https://shopping.google.com/?pli=1)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[2]: [https://shopping.google.com/?pli=1](https://shopping.google.com/?pli=1)'
- en: '[3] I. Fellegi and A.B. Sunter (1969). A theory for record linkage. *Journal
    of the American Statistical Association*'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] I. Fellegi 和 A.B. Sunter (1969)。记录链接的理论。*美国统计学会期刊*'
- en: '[4]: [https://chat.openai.com/](https://chat.openai.com/)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[4]: [https://chat.openai.com/](https://chat.openai.com/)'
- en: '[5]: [https://moj-analytical-services.github.io/splink/index.html](https://moj-analytical-services.github.io/splink/index.html)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[5]: [https://moj-analytical-services.github.io/splink/index.html](https://moj-analytical-services.github.io/splink/index.html)'
