["```py\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# We load our dataset with several observations (record_date) per employee (employee_id)\n# The event column indicates if the employee left on that given month (1) or if the employee was still active (0)\ndf = pd.read_csv(f'{FILE_NAME}.csv')\n\n# Creating a label where positive events have tenure and negative events have negative tenure - required by Random Survival Forest\ndf_model['label'] = np.where(df_model['event'], df_model['tenure_in_months'], - df_model['tenure_in_months'])\n\ndf_train, df_test = train_test_split(df_model, test_size=0.2, stratify=df_model['event'], random_state=42)\n```", "```py\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sksurv.datasets import get_x_y\nfrom sksurv.ensemble import RandomSurvivalForest\n\ncat_features = [] # list of all the categorical features\nfeatures = [] # list of all the features (both categorical and numeric)\n\n# Categorical Encoding\nencoder = OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)\nencoder.fit(df_train[cat_features])\n\ndf_train[cat_features] = encoder.transform(df_train[cat_features])\ndf_test[cat_features] = encoder.transform(df_test[cat_features])\n\n# X & y\nX_train, y_train = get_x_y(df_train, attr_labels=['event','tenure_in_months'], pos_label=1)\nX_test, y_test = get_x_y(df_test, attr_labels=['event','tenure_in_months'], pos_label=1)\n\n# Fit the model\nestimator = RandomSurvivalForest(random_state=RANDOM_STATE)\nestimator.fit(X_train[features], y_train)\n\n# Store predictions\ny_pred = estimator.predict(X_test[features])\n```", "```py\nfrom lifelines.utils import concordance_index\nfrom sklearn.metrics import classification_report\n\n# Concordance Index\nci_test = concordance_index(df_test['tenure_in_months'], -y_pred, df_test['event'])\nprint(f'Concordance index:{ci_test:0.5f}\\n')\n\n# Match the most risky employees (according to the model) with the employees who left\nq_test = 1 - df_test['event'].mean()\n\nthr = np.quantile(y_pred, q_test)\nrisky_employees = (y_pred >= thr) * 1\n\nprint(classification_report(df_test['event'], risky_employees))\n```", "```py\ntest_date = '2023-07-01'\n\n# Selecting training data from records before the test date and taking the last observation per employee\ndf_train = df[df.record_date < test_date].reset_index(drop=True).copy()\ndf_train = df_train.groupby('employee_id').tail(1).reset_index(drop=True)\ndf_train['label'] = np.where(df_train['event'], df_train['tenure_in_months'], - df_train['tenure_in_months'])\n\n# Preparing test data with records of active employees at the test date\ndf_test = df[(df.record_date == test_date) & (df['event']==0)].reset_index(drop=True).copy()\ndf_test = df_test.groupby('employee_id').tail(1).reset_index(drop=True)\ndf_test = df_test.drop(columns = ['tenure_in_months','event'])\n\n# Fetching the last tenure and event status for employees in the test dataset\ndf_last_tenure = df[df.employee_id.isin(df_test.employee_id.unique())].reset_index(drop=True).copy()\ndf_last_tenure = df_last_tenure.groupby('employee_id').tail(1).reset_index(drop=True)\n\ndf_test = df_test.merge(df_last_tenure[['employee_id','tenure_in_months','event']], how='left')\ndf_test['label'] = np.where(df_test['event'], df_test['tenure_in_months'], - df_test['tenure_in_months'])\n```", "```py\nnp.random.seed(0)\n\n# Select training data before the test date\ndf_train = df[df.record_date < test_date].reset_index(drop=True).copy()\n\n# Create an indicator for whether an employee eventually churns within the train set\ndf_train['indicator'] = df_train.groupby('employee_id').event.transform(max)\n\n# Isolate records of employees who left, and store their last observation\nchurn = df_train[df_train.indicator==1].reset_index(drop=True).copy()\nchurn = churn.groupby('employee_id').tail(1).reset_index(drop=True)\n\n# For employees who stayed, randomly pick one observation from their historic records\nstay = df_train[df_train.indicator==0].reset_index(drop=True).copy()\nstay = stay.groupby('employee_id').apply(lambda x: x.sample(1)).reset_index(drop=True)\n\n# Combine churn and stay samples into the new training dataset\ndf_train = pd.concat([churn,stay], ignore_index=True).copy()\ndf_train['label'] = np.where(df_train['event'], df_train['tenure_in_months'], - df_train['tenure_in_months'])\ndel df_train['indicator']\n\n# Prepare the test dataset similarly, using only the snapshot from the test date\ndf_test = df[(df.record_date == test_date) & (df.event==0)].reset_index(drop=True).copy()\ndf_test = df_test.groupby('employee_id').tail(1).reset_index(drop=True)\ndf_test = df_test.drop(columns = ['tenure_in_months','event'])\n\n# Get the last known tenure and event status for employees in the test set\ndf_last_tenure = df[df.employee_id.isin(df_test.employee_id.unique())].reset_index(drop=True).copy()\ndf_last_tenure = df_last_tenure.groupby('employee_id').tail(1).reset_index(drop=True)\n\ndf_test = df_test.merge(df_last_tenure[['employee_id','tenure_in_months','event']], how='left')\ndf_test['label'] = np.where(df_test['event'], df_test['tenure_in_months'], - df_test['tenure_in_months'])\n```"]