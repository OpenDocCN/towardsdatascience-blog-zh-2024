- en: Building a Chat Application with LangChain, LLMs, and Streamlit for Complex
    SQL Database Interaction
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LangChain、LLM和Streamlit构建复杂SQL数据库交互的聊天应用
- en: 原文：[https://towardsdatascience.com/building-a-chat-app-with-langchain-llms-and-streamlit-for-complex-sql-database-interaction-7433245079f3?source=collection_archive---------0-----------------------#2024-02-09](https://towardsdatascience.com/building-a-chat-app-with-langchain-llms-and-streamlit-for-complex-sql-database-interaction-7433245079f3?source=collection_archive---------0-----------------------#2024-02-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/building-a-chat-app-with-langchain-llms-and-streamlit-for-complex-sql-database-interaction-7433245079f3?source=collection_archive---------0-----------------------#2024-02-09](https://towardsdatascience.com/building-a-chat-app-with-langchain-llms-and-streamlit-for-complex-sql-database-interaction-7433245079f3?source=collection_archive---------0-----------------------#2024-02-09)
- en: Build and deploy a chat application for complex database interaction with LangChain
    agents.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建并部署一个用于复杂数据库交互的聊天应用，使用LangChain代理。
- en: '[](https://medium.com/@hamzagharbi_19502?source=post_page---byline--7433245079f3--------------------------------)[![Hamza
    Gharbi](../Images/da96d29dfde486875d9a4ed932879aef.png)](https://medium.com/@hamzagharbi_19502?source=post_page---byline--7433245079f3--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--7433245079f3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--7433245079f3--------------------------------)
    [Hamza Gharbi](https://medium.com/@hamzagharbi_19502?source=post_page---byline--7433245079f3--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@hamzagharbi_19502?source=post_page---byline--7433245079f3--------------------------------)[![Hamza
    Gharbi](../Images/da96d29dfde486875d9a4ed932879aef.png)](https://medium.com/@hamzagharbi_19502?source=post_page---byline--7433245079f3--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--7433245079f3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--7433245079f3--------------------------------)
    [Hamza Gharbi](https://medium.com/@hamzagharbi_19502?source=post_page---byline--7433245079f3--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--7433245079f3--------------------------------)
    ·16 min read·Feb 9, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--7433245079f3--------------------------------)
    ·16分钟阅读·2024年2月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/25b9abecbccb4aa01cd6c0d8dff59655.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25b9abecbccb4aa01cd6c0d8dff59655.png)'
- en: Image generated by DALL-E.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 由DALL-E生成的图像。
- en: In this article we will see how we can use large language models (LLMs) to interact
    with a complex database using `Langchain` agents and tools, and then deploying
    the chat application using `Streamlit`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将展示如何使用大型语言模型（LLM）通过`Langchain`代理和工具与复杂数据库进行交互，并随后使用`Streamlit`部署聊天应用。
- en: This article is the second and final part of a two-phase project that exploits
    [RappelConso](https://api.gouv.fr/les-api/api-rappel-conso) API data, a French
    public service that shares information about product recalls in France.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本文是一个两阶段项目的第二部分，也是最终部分，该项目利用了[RappelConso](https://api.gouv.fr/les-api/api-rappel-conso)
    API数据，这是一个法国公共服务，提供关于法国产品召回的信息。
- en: In the [first](https://medium.com/towardsdev/end-to-end-data-engineering-system-on-real-data-with-kafka-spark-airflow-postgres-and-docker-a70e18df4090)
    article, we set up a pipeline that queries the data from the API and stores it
    in a PostgreSQL database using various data engineering tools. In this article,
    we will develop a language model-based chat application that allows us to interact
    with the database.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第一篇](https://medium.com/towardsdev/end-to-end-data-engineering-system-on-real-data-with-kafka-spark-airflow-postgres-and-docker-a70e18df4090)文章中，我们建立了一个管道，利用各种数据工程工具从API中查询数据，并将其存储到PostgreSQL数据库中。在本文中，我们将开发一个基于语言模型的聊天应用，允许我们与数据库进行交互。
- en: Table of Contents
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录
- en: · [Overview](#9fc0)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: · [概览](#9fc0)
- en: · [Set-up](#7676)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: · [设置](#7676)
- en: · [SQL Agent](#fc4b)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: · [SQL代理](#fc4b)
- en: · [SQL Database Toolkit](#b25f)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: · [SQL数据库工具包](#b25f)
- en: · [Extra tools](#1506)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: · [附加工具](#1506)
- en: · [Implementing Memory Features](#d5c4)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: · [实现记忆功能](#d5c4)
- en: · [Creating the application with Streamlit](#3146)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: · [使用Streamlit创建应用](#3146)
- en: · [Observations and enhancements](#4ee0)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: · [观察与增强](#4ee0)
- en: · [Conclusion](#9366)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: · [结论](#9366)
- en: · [References](#f9d6)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: · [参考文献](#f9d6)
- en: Overview
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概览
- en: In this project, we’re going to create a chatbot that can talk to the RappelConso
    database through the `Langchain` framework. This chatbot will be able to understand
    natural language and use it to create and run SQL queries. We’ll enhance the chatbot’s
    ability to make SQL queries by giving it additional tools. It will also have a
    memory feature to remember past interactions with users. To make it user-friendly,
    we’ll use `Streamlit` to turn it into a chat-based web application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们将创建一个聊天机器人，它可以通过`Langchain`框架与RappelConso数据库进行交互。这个聊天机器人能够理解自然语言，并利用自然语言创建和执行SQL查询。我们将通过提供额外的工具来增强聊天机器人进行SQL查询的能力。它还将具备记忆功能，以便记住与用户的过去互动。为了使其更易于使用，我们将使用`Streamlit`将其转化为一个基于聊天的网页应用程序。
- en: '![](../Images/b3af4d786e405eba37415710413a4aaf.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b3af4d786e405eba37415710413a4aaf.png)'
- en: Example of user query and agent response. Image by the author.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 用户查询和代理响应的示例。图片由作者提供。
- en: 'You can see a demo of the final application here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里看到最终应用程序的演示：
- en: Demo for the final Streamlit chat application on the rappel-conso database.
    Video by the author.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: rappel-conso数据库上的最终Streamlit聊天应用程序演示。视频由作者提供。
- en: The chatbot can answer queries with different complexities, from the categories
    count of the recalled products to specific questions about the products or brands.
    It can identify the right columns to query by using the tools at its disposal.
    The chatbot can also answer queries in “ASCII” compatible languages such as English,
    French, German, etc …
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该聊天机器人可以回答不同复杂度的查询，从召回产品的类别计数到关于产品或品牌的具体问题。它可以通过使用可用的工具来识别查询所需的正确列。该聊天机器人还可以用“ASCII”兼容的语言（如英语、法语、德语等）回答查询。
- en: '![](../Images/18e6ebfee201b4c728aa788c6dda112d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18e6ebfee201b4c728aa788c6dda112d.png)'
- en: Example of query and response in German. Image by the author.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 德语中的查询和响应示例。图片由作者提供。
- en: 'Glossary:'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 术语表：
- en: Here is a quick rundown of key terms to help you get a grasp of the concepts
    mentioned in this article.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些关键术语的快速介绍，帮助你理解本文中提到的概念。
- en: '**Langchain**: LangChain is an open-source framework designed for building
    applications that leverage large language models (LLMs).'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Langchain：** LangChain是一个开源框架，用于构建利用大语言模型（LLM）的应用程序。'
- en: '**Agents:** They are components of Langchain that use a language model to determine
    which actions to take and in which order. The Agent has typically access to a
    set of functions called *Tools* and it can decide which Tool to use based on the
    user input.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理：** 它们是Langchain的组件，利用语言模型决定采取哪些操作以及操作的顺序。代理通常可以访问一组称为*工具*的函数，它可以根据用户输入决定使用哪一个工具。'
- en: '**Tools:** These are functions that an agent can invoke and enable it to interact
    with the world. Tools must be well described in a way that is most helpful to
    the agent.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具：** 这些是代理可以调用的函数，使其能够与外界互动。工具必须以最有助于代理的方式进行描述。'
- en: '**Toolkits:** A set of related tools. In this project we will be using the
    *SQLDatabaseToolkit.* More on this in the subsequent sections.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具包：** 一组相关工具。在这个项目中，我们将使用*SQLDatabaseToolkit*。关于这一点将在后续部分进行详细说明。'
- en: '**SQL Databases:** The backbone holding the data you’ll be querying. In our
    project we will be using a Postgres Database.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL数据库：** 存储你将查询数据的数据库。在我们的项目中，我们将使用Postgres数据库。'
- en: '**Streamlit:** A python framework that enables the creation of interactive
    web applications very simply.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Streamlit：** 一个Python框架，能够非常简单地创建交互式网页应用程序。'
- en: Now let’s dive into the technical details of this project !
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们深入了解这个项目的技术细节！
- en: '**Set-up**'
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**设置**'
- en: 'First you can clone the github repo with the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以使用以下命令克隆GitHub仓库：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, you can navigate to the project root and install the packages requirements:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以导航到项目根目录并安装所需的包：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this project we experimented with two large language models from OpenAI,
    `gpt-3.5-turbo-1106` and `gpt-4–1106-preview` . Since the latter is better at
    understanding and executing complex queries, we used it as the default LLM.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们使用了OpenAI的两个大型语言模型，`gpt-3.5-turbo-1106` 和 `gpt-4–1106-preview`。由于后者在理解和执行复杂查询方面表现更好，我们将其作为默认的LLM。
- en: Setting-up the database
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置数据库
- en: In my [previous](https://medium.com/@hamzagharbi_19502/end-to-end-data-engineering-system-on-real-data-with-kafka-spark-airflow-postgres-and-docker-a70e18df4090)
    article, I covered how to set up a data pipeline for streaming data from a source
    API directly into a Postgres database. However, if you want a simpler solution,
    I created a script that allows you to transfer all the data from the API straight
    to Postgres, bypassing the need to set up the entire pipeline.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的[上一篇](https://medium.com/@hamzagharbi_19502/end-to-end-data-engineering-system-on-real-data-with-kafka-spark-airflow-postgres-and-docker-a70e18df4090)文章中，我介绍了如何为从源API直接流式传输数据到Postgres数据库设置数据管道。然而，如果你想要更简单的解决方案，我创建了一个脚本，可以将所有数据从API直接传输到Postgres，省去了设置完整管道的需求。
- en: First off, you need to install [Docker](https://www.docker.com/products/docker-desktop/).
    Then you have to set the POSTGRES_PASSWORD as environment variable. By default,
    it will be set to the string `"postgres"` .
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要安装[Docker](https://www.docker.com/products/docker-desktop/)。然后，你必须将POSTGRES_PASSWORD设置为环境变量。默认情况下，它将设置为字符串`"postgres"`。
- en: 'Next, get the Postgres server running with the docker-compose yaml file at
    the project’s root:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用项目根目录中的docker-compose yaml文件启动Postgres服务器：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After that, the script `database/stream_data.py` helps you create the `rappel_conso_table`
    table, stream the data from the API into the database, and do a quick check on
    the data by counting the rows. As of February 2024, you should see around 10400
    rows, so expect a number close to that.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，脚本`database/stream_data.py`帮助你创建`rappel_conso_table`表，将数据从API流式传输到数据库，并通过计数行数对数据进行快速检查。截至2024年2月，你应该能看到大约10400行数据，因此预期会接近这个数字。
- en: 'To run the script, use this command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行该脚本，请使用以下命令：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Please note that the data transfer might take around one minute, possibly a
    little longer, depending on the speed of your internet connection.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，数据传输可能需要约一分钟，视你的网络连接速度而定，可能稍微长一些。
- en: 'The *rappel_conso_table* contains in total **25** columns, most of them are
    in **TEXT** type and can take infinite values. Some of the important columns are:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*rappel_conso_table* 总共有**25**列，其中大部分是**TEXT**类型，可以接受无限值。以下是一些重要的列：'
- en: '*reference_fiche (reference sheet):* Unique identifier of the recalled product.
    It acts as the primary key of our Postgres database.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*reference_fiche (参考表格):* 被召回产品的唯一标识符。它作为我们Postgres数据库的主键。'
- en: '*categorie_de_produit (Product category):* For instance food, electrical appliance,
    tools, transport means, etc …'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*categorie_de_produit (产品类别):* 例如食品、电器、工具、交通工具等……'
- en: '*sous_categorie_de_produit (Product sub-category):* For instance we can have
    meat, dairy products, cereals as sub-categories for the food category.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*sous_categorie_de_produit (产品子类别):* 例如我们可以将肉类、乳制品、谷物作为食品类别的子类别。'
- en: '*motif_de_rappel (Reason for recall*): Self explanatory and one of the most
    important fields.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*motif_de_rappel (召回原因):* 一目了然，且是最重要的字段之一。'
- en: '*date_de_publication* which translates to the publication date.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*date_de_publication* 代表发布日期。'
- en: '*risques_pour_le_consommateur* which contains the risks that the consumer may
    encounter when using the product.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*risques_pour_le_consommateur* 包含消费者在使用产品时可能遇到的风险。'
- en: There are also several fields that correspond to different links, such as link
    to product image, link to the distributers list, etc..
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有几个字段对应不同的链接，如产品图片链接、分销商列表链接等。
- en: The full list of columns can be found in the `constants.py` file under the constant
    `RAPPEL_CONSO_COLUMNS` .
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 所有列的完整列表可以在`constants.py`文件中的常量`RAPPEL_CONSO_COLUMNS`下找到。
- en: Given the wide range of columns present, it’s crucial for the agent to effectively
    distinguish between them, particularly in cases of ambiguous user queries. The
    `SQLDatabaseToolkit`, along with the additional tools we plan to implement, will
    play an important role in providing the necessary context. This context is key
    for the agent to accurately generate the appropriate SQL queries.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于存在大量的列，代理必须有效地区分它们，尤其是在用户查询不明确的情况下。`SQLDatabaseToolkit`，以及我们计划实现的其他工具，将在提供必要的上下文方面发挥重要作用。这个上下文对于代理准确生成适当的SQL查询至关重要。
- en: SQL Agent
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL代理
- en: LangChain has a SQL Agent which provides a flexible way of interacting with
    SQL Databases.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain提供了一个SQL代理，它提供了一种灵活的方式与SQL数据库进行交互。
- en: 'The benefits of employing the SQL Agent include:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SQL代理的好处包括：
- en: Its capability to respond to queries not only about the structure of the databases
    (such as details about a particular table) but also their content.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它能够响应关于数据库结构（如特定表的详细信息）以及内容的查询。
- en: Its ability to handle errors effectively. When an error occurs during the execution
    of a query, the SQL Agent can identify the issue, correct it, and then execute
    the revised query successfully.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有效处理错误的能力。当执行查询时发生错误，SQL 代理可以识别问题、修正它，然后成功执行修正后的查询。
- en: In Langchain, we can initalize a SQL agent with the `create_sql_agent` function.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Langchain 中，我们可以通过 `create_sql_agent` 函数初始化 SQL 代理。
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this function, the **llm** is the large language model backbone of the agent.
    We chose OpenAI GPT models for this task but other models could also be suitable.
    Here is how we can define the LLM for the agent:'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个函数中，**llm** 是代理的主要大型语言模型骨干。我们为此任务选择了 OpenAI GPT 模型，但其他模型也可能适用。以下是如何为代理定义
    LLM 的方法：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Currently, the `create_sql_agent` function supports two types of agents: OpenAI
    functions and ReAct agents. We opted for ReAct agents due to their easier integration
    with memory features. The **ReAct** agent model uses large language models to
    generate reasoning and task-specific actions together. This method helps the agent
    to plan, track, and adjust its actions while dealing with exceptions. It also
    enables the agent to connect with external sources like knowledge bases to get
    more information, improving its effectiveness in tasks. More details about this
    framework can be found [here](https://react-lm.github.io/).'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目前，`create_sql_agent` 函数支持两种类型的代理：OpenAI 函数代理和 ReAct 代理。我们选择了 ReAct 代理，因为它们更容易与记忆功能集成。**ReAct**
    代理模型使用大型语言模型同时生成推理和特定任务的动作。这种方法帮助代理在处理异常时规划、跟踪和调整其动作。它还使代理能够连接外部资源，如知识库，以获取更多信息，从而提高任务的效率。关于该框架的更多详细信息可以在[这里](https://react-lm.github.io/)找到。
- en: '![](../Images/1596483c06cb80ea7fd602cb48f6743c.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1596483c06cb80ea7fd602cb48f6743c.png)'
- en: Illustration of ReAct framework. Image based on the ReAct paper (check references
    section).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: ReAct 框架的示意图。图片基于 ReAct 论文（请查看参考文献部分）。
- en: Finally the `toolkit` in the `create_sql_agent` function represents the SQL
    set of tools used to interact with the database. More on this in the next section
    !
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，`create_sql_agent` 函数中的 `toolkit` 表示与数据库交互的 SQL 工具集。更多内容将在下一节介绍！
- en: SQL Database Toolkit
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 数据库工具包
- en: 'The `SQLDatabaseToolkit` contains tools that can:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`SQLDatabaseToolkit` 包含以下工具：'
- en: 'Create and execute queries: In the following example, the ReAct agent will
    call the `sql_db_query` tool with a certain SQL query as input. Following this,
    it analyzes the database results to formulate an appropriate response for the
    user.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并执行查询：在以下示例中，ReAct 代理将调用 `sql_db_query` 工具，并以某个 SQL 查询作为输入。随后，它分析数据库结果以为用户制定适当的响应。
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Check the query syntax with the `sql_db_query_checker` tool.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `sql_db_query_checker` 工具检查查询语法。
- en: '[PRE7]sql'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7]sql'
- en: SELECT reference_fiche, nom_de_la_marque_du_produit, noms_des_modeles_ou_references,
    date_de_publication, liens_vers_les_images FROM rappel_conso_table WHERE categorie_de_produit
    = 'Alimentation' ORDER BY date_de_publication DESC LIMIT 1
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT reference_fiche, nom_de_la_marque_du_produit, noms_des_modeles_ou_references,
    date_de_publication, liens_vers_les_images FROM rappel_conso_table WHERE categorie_de_produit
    = 'Alimentation' ORDER BY date_de_publication DESC LIMIT 1
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Retrieve table descriptions with the `sql_db_schema` tool.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `sql_db_schema` 工具获取表描述。
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Before defining the SQLDatabaseToolkit class, we must initialise the `SQLDatabase`
    wrapper around the Postgres database:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义 SQLDatabaseToolkit 类之前，我们必须初始化围绕 Postgres 数据库的 `SQLDatabase` 包装器：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `sample_rows_in_table_info` setting determines how many example rows are
    added to each table’s description. Adding these sample rows can enhance the agent’s
    performance, as shown in this [paper](https://arxiv.org/abs/2204.00498). Therefore,
    when the agent accesses a table’s description to gain a clearer understanding,
    it will obtain both the table’s schema and a sample row from that table.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`sample_rows_in_table_info` 设置决定了每个表的描述中添加多少示例行。添加这些示例行可以提升代理的性能，正如这篇[论文](https://arxiv.org/abs/2204.00498)中所示。因此，当代理访问表描述以获得更清晰的理解时，它将同时获取表的模式和该表的一个示例行。'
- en: 'Finally let’s define the SQL toolkit:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 最后让我们定义 SQL 工具包：
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Extra tools
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外工具
- en: Given the complexity of our table, the agent might not fully understand the
    information in the database by only examining the schema and a sample row. For
    example, the agent should recognise that a query regarding cars equates to searching
    the ‘category’ column for the value ‘Automobiles et moyens de déplacement’ (i.e.,
    ‘Automobiles and means of transportation’). Therefore, additional tools are necessary
    to provide the agent with more context about the database.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们的表格复杂性，代理可能仅通过检查模式和示例行来无法完全理解数据库中的信息。例如，代理应该识别出一个关于汽车的查询意味着在 `category`
    列中搜索值为 ‘Automobiles et moyens de déplacement’（即‘汽车与交通工具’）。因此，额外的工具是必要的，以为代理提供更多关于数据库的上下文。
- en: 'Here’s a breakdown of the extra tools we plan to use:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们计划使用的额外工具的详细说明：
- en: '`get_categories_and_sub_categories`: This tool is designed to help the agent
    fetch a list of distinct items from the `category` and `sub_category` columns.
    This approach is effective due to the relatively low number of unique values within
    these columns. If the columns contained hundreds or thousands of unique values,
    it might be better to use a retrieval tool. In such cases, when a user asks about
    a category, the agent could look for the most similar categories in a vector database,
    which stores embeddings of various values. The agent would then use these categories
    for its SQL queries. However, given that our `category` and `sub_category` columns
    don''t have a wide range of unique values, we''ll simply return the list directly.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_categories_and_sub_categories`：此工具旨在帮助代理从 `category` 和 `sub_category`
    列中获取不同项的列表。由于这些列中独特值的数量相对较少，这种方法非常有效。如果这些列包含数百或数千个独特值，可能更适合使用检索工具。在这种情况下，当用户询问类别时，代理可以在向量数据库中查找最相似的类别，向量数据库存储了各种值的嵌入。代理随后会使用这些类别来执行
    SQL 查询。然而，鉴于我们的 `category` 和 `sub_category` 列没有太多独特值，我们将直接返回列表。'
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`get_columns_descriptions`: Since we can’t feed the columns descriptions in
    the schema directly, we created an extra tool that returns short description for
    every ambiguous column. Some examples include:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_columns_descriptions`：由于我们不能直接提供列描述，我们创建了一个额外的工具，用于返回每个模糊列的简短描述。一些例子包括：'
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`get_today_date` : tool that retrieves today’s date using python datetime library.
    The agent will use this tool when asked about temporality. For example: *“What
    are the recalled products since last week ?”*'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_today_date`：这个工具使用 Python 的 datetime 库来获取今天的日期。代理在被问及时间性问题时会使用此工具。例如：*“上周以来召回的产品有哪些？”*'
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Finally we create a list of all these tools and we feed it to the `create_sql_agent`
    function. For every tool we must define a unique name within the set of tools
    provided to the agent. The description is optional but is very recommended as
    it can be used to provide more information.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建一个包含所有这些工具的列表，并将其传递给 `create_sql_agent` 函数。对于每个工具，我们必须在提供给代理的工具集合中定义一个唯一的名称。描述是可选的，但强烈推荐提供，因为它可以用于提供更多信息。
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Sometimes, the tool descriptions aren’t enough for the agent to understand
    when to use them. To address this, we can change the ending part of the agent
    LLM prompt, known as the suffix. In our setup, the prompt has three sections:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，仅靠工具描述，代理可能无法理解何时使用它们。为了解决这个问题，我们可以修改代理 LLM 提示的结尾部分，即后缀。在我们的设置中，提示有三个部分：
- en: '**Prefix:** This is a string placed before the tool list. We’re sticking with
    the default prefix, which instructs the agent on how to create and execute SQL
    queries in response to user questions, set a limit on result numbers to **10**
    , check the queries carefully, and avoid making changes to the database.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**前缀：** 这是放在工具列表之前的字符串。我们遵循默认前缀，指示代理如何根据用户的问题创建和执行 SQL 查询，设置结果数量限制为 **10**，仔细检查查询，并避免对数据库进行更改。'
- en: '**The list of tools:** This part lists out all the tools that the agent has
    at its disposal.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**工具列表：** 这一部分列出了代理可用的所有工具。'
- en: '**Suffix:** This is the part where we give the agent directions on how to process
    and think about the user’s question.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**后缀：** 这是我们给代理指示如何处理和思考用户问题的部分。'
- en: 'Here’s the default suffix for the SQL ReAct agent in Langchain:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Langchain 中 SQL ReAct 代理的默认后缀：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`input` and `agent_scratchpad` are two placeholders. `input` represents the
    user’s query and `agent_scratchpad` will represent the history of tool invocations
    and the corresponding tool outputs.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`input` 和 `agent_scratchpad` 是两个占位符。`input` 代表用户的查询，`agent_scratchpad` 则代表工具调用的历史记录和相应的工具输出。'
- en: 'We can make the “Thought” part longer to give more instructions on which tools
    to use and when:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以让“思维”部分更长一些，以提供更多关于使用哪些工具以及何时使用的指令：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This way, the agent doesn’t just know what tools it has but also gets better
    guidance on when to use them.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，代理不仅知道它拥有的工具，还能获得更好的指导，了解何时使用它们。
- en: 'Now let’s modify the arguments for the `create_sql_agent` to account for new
    suffix:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改`create_sql_agent`的参数，以适应新的后缀：
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Another option we considered was to include the instructions in the prefix.
    However, our empirical observations indicated that this had little to no impact
    on the final response. Therefore, we chose to retain the instructions in the suffix.
    Conducting a more extensive evaluation of the model outputs could be beneficial
    for a detailed comparison of the two approaches.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们考虑的另一个选项是将指令包含在前缀中。然而，我们的实证观察表明，这对最终响应几乎没有影响。因此，我们选择将指令保留在后缀中。对模型输出进行更广泛的评估可能有助于对这两种方法进行详细比较。
- en: Implementing Memory Features
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现记忆功能
- en: A useful feature for our agent would be the ability to remember past interactions.
    This way, it doesn’t have to start over with each conversation, especially when
    queries are connected.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为代理添加的一个有用功能是记住过去的互动。这样，代理在每次对话时就不必重新开始，特别是当查询之间有联系时。
- en: 'To add this memory feature, we’ll take a few steps:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加这个记忆功能，我们需要进行以下几个步骤：
- en: First, we import the `ConversationBufferMemory` class. This is a buffer that
    keeps track of the conversation history.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们导入`ConversationBufferMemory`类。它是一个缓冲区，用于跟踪对话历史。
- en: '[PRE21]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Next, we update the suffix to include the conversation history.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们更新后缀，以包含对话历史。
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Finally, we adjust the `create_sql_agent` function to add the history into the
    prompt placeholders and include the memory in the agent executor arguments.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们调整`create_sql_agent`函数，将历史记录添加到提示占位符中，并将记忆包含在代理执行器的参数中。
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This way, the agent can use its memory to better handle related queries in a
    conversation.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，代理可以利用其记忆，更好地处理对话中的相关查询。
- en: Creating the application with Streamlit
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Streamlit创建应用程序
- en: 'We will use the python framework Streamlit to build a basic LLM chat app. Streamlit
    offers chat elements that can be used to construct a conversational application.
    The elements that we will use are:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Python框架Streamlit来构建一个基本的LLM聊天应用程序。Streamlit提供了聊天元素，可用于构建对话式应用程序。我们将使用的元素包括：
- en: '`st.chat_input` : a chat input widget that the user can use to type in a message.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`st.chat_input`：一个聊天输入小部件，用户可以用来输入消息。'
- en: '![](../Images/ba7d74f909f6e39d96a303d4b480c8f0.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ba7d74f909f6e39d96a303d4b480c8f0.png)'
- en: Example of chat_input widget. Image by the author.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`chat_input`小部件的示例。图片由作者提供。'
- en: '`st.chat_message` : This function adds a chat message to the app, displaying
    input from either the user or the application. The first argument specifies the
    message author, with “user” or “assistant” options to apply appropriate styling
    and avatars.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`st.chat_message`：此函数将聊天消息添加到应用程序中，显示用户或应用程序的输入。第一个参数指定消息的作者，可以选择“user”或“assistant”，以应用适当的样式和头像。'
- en: '![](../Images/74c46cd5d15e2463b57ecb4147797d07.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74c46cd5d15e2463b57ecb4147797d07.png)'
- en: Example of “User” chat message. Image by the author.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: “用户”聊天信息示例。图片由作者提供。
- en: Additionally, we’ll utilize Streamlit’s [session state](https://docs.streamlit.io/library/api-reference/session-state)
    to maintain a history of the conversation. This feature is crucial for providing
    a good user experience by preserving chat context.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将利用Streamlit的[会话状态](https://docs.streamlit.io/library/api-reference/session-state)来保持对话历史。此功能对于提供良好的用户体验至关重要，因为它能保留聊天上下文。
- en: More details on the process to create the conversational app can be found [here](https://docs.streamlit.io/knowledge-base/tutorials/build-conversational-apps).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有关创建对话应用程序的更多细节，可以在[这里](https://docs.streamlit.io/knowledge-base/tutorials/build-conversational-apps)找到。
- en: Since we instructed the agent to always return the images urls, we created a
    post-processing function that fetches the images from these urls, formats the
    output, and displays the content using Streamlit’s markdown and image components.
    The implementation details for this functionality are available in the `streamlit_app/gen_final_output.py`
    module.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们指示代理始终返回图像网址，因此我们创建了一个后处理函数，该函数从这些网址获取图像，格式化输出，并使用Streamlit的Markdown和图像组件显示内容。此功能的实现细节可以在`streamlit_app/gen_final_output.py`模块中找到。
- en: 'Now everything is set to start the chat application. You can execute the following
    command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切准备就绪，可以启动聊天应用程序。您可以执行以下命令：
- en: '[PRE24]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Future enhancements could include options for users to select the desired model
    and configure the OpenAI API key, further customizing the chat experience.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的改进可能包括用户选择所需模型并配置OpenAI API密钥的选项，进一步自定义聊天体验。
- en: Observations and enhancements
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察和改进
- en: 'Here are some insights we gained after running multiple dialogues with the
    agent:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们在与代理进行多次对话后获得的一些见解：
- en: It’s not surprising, but GPT-4 is significantly better than GPT-3.5\. The latter
    manages simple queries well but often struggles to invoke the necessary tools
    for additional context about the database, leading to frequent hallucinations.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这并不令人惊讶，但GPT-4确实比GPT-3.5强大得多。后者能够很好地处理简单查询，但往往在调用数据库相关的必要工具以提供更多上下文时遇到困难，导致频繁的幻觉。
- en: The complexity of the user’s question can make using GPT-4 both costly and slow.
    Generating detailed information like the database schema, row counts, and column
    descriptions uses a lot of tokens. Furthermore, if you’re looking for in-depth
    results, such as information on the last 10 recalled products, the agent has to
    process the query’s output along with the tools’ actions and observations, which
    can be very expensive. Therefore, it’s important to keep an eye on your usage
    to avoid unexpected costs.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户问题的复杂性可能使得使用GPT-4既昂贵又缓慢。生成像数据库架构、行数和列描述等详细信息需要消耗大量的tokens。此外，如果需要深入的结果，例如有关最后10个回溯产品的信息，代理需要处理查询输出以及工具的操作和观察，这可能会非常昂贵。因此，监控使用情况以避免意外费用是非常重要的。
- en: 'To enhance the agent’s performance, we can:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高代理的表现，我们可以：
- en: Refine how we engineer prompts, adjusting the suffix and/or prefix to better
    anticipate and efficiently invoke the right tools when needed.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进我们设计提示的方式，调整后缀和/或前缀，更好地预测和高效地调用必要的工具。
- en: Include a few examples in the prompt, or employ a retrieval tool to find the
    most relevant examples for common user queries, reducing the need to repeatedly
    invoke the same tools for each new question.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在提示中包括一些示例，或使用检索工具来查找与常见用户查询最相关的示例，从而减少每次新问题时反复调用相同工具的需要。
- en: Add an evaluation framework to assess for instance the LLMs performance based
    on the final answer, or to compare prompts.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个评估框架，例如，根据最终答案评估大型语言模型（LLMs）的表现，或用于比较提示。
- en: Conclusion
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: To wrap up, this article delved into creating a chat application that uses Large
    Language Models (LLMs) to communicate with SQL databases via the Langchain framework.
    We utilized the ReACT agent framework, along with various SQL tools and additional
    resources, to be able to respond to a wide range of user queries.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 总结：本文探讨了如何创建一个聊天应用程序，该应用程序利用大型语言模型（LLMs）通过Langchain框架与SQL数据库进行交互。我们使用了ReACT代理框架，并结合了各种SQL工具和其他资源，能够回应广泛的用户查询。
- en: By incorporating memory capabilities and deploying via Streamlit, we’ve created
    a user-friendly interface that simplifies complex database queries into conversational
    exchanges.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 通过整合记忆功能并通过Streamlit进行部署，我们创建了一个简化复杂数据库查询的用户友好界面，使其能够以对话方式进行交互。
- en: Given the database’s complexity and the extensive number of columns it contains,
    our solution required a comprehensive set of tools and a powerful LLM.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于数据库的复杂性及其包含的大量列，我们的解决方案需要一套全面的工具和强大的LLM。
- en: We already talked about ways to enhance the capabilities of the chatbot. Additionally,
    using an LLM fine-tuned on SQL queries can be a substitute approach to using a
    general model like GPT. This could make the system much better at working with
    databases, helping it get even better at figuring out and handling tough queries.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了增强聊天机器人功能的方法。此外，使用在SQL查询上进行微调的LLM可以作为使用像GPT这样的通用模型的替代方法。这可以使系统在处理数据库时表现得更好，帮助它更有效地解决复杂查询。
- en: To reach out
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 联系方式
- en: 'LinkedIn : [https://www.linkedin.com/in/hamza-gharbi-043045151/](https://www.linkedin.com/in/hamza-gharbi-043045151/)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'LinkedIn : [https://www.linkedin.com/in/hamza-gharbi-043045151/](https://www.linkedin.com/in/hamza-gharbi-043045151/)'
- en: 'Twitter : [https://twitter.com/HamzaGh25079790](https://twitter.com/HamzaGh25079790)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Twitter : [https://twitter.com/HamzaGh25079790](https://twitter.com/HamzaGh25079790)'
- en: References
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[[2210.03629] ReAct: Synergizing Reasoning and Acting in Language Models (arxiv.org)](https://arxiv.org/abs/2210.03629)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[[2210.03629] ReAct：在语言模型中协同推理与行动](https://arxiv.org/abs/2210.03629)'
- en: '[Langchain SQL database](https://python.langchain.com/docs/integrations/toolkits/sql_database)'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Langchain SQL数据库](https://python.langchain.com/docs/integrations/toolkits/sql_database)'
- en: '[Langchain SQL agent](https://python.langchain.com/docs/use_cases/sql/agents)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Langchain SQL 代理](https://python.langchain.com/docs/use_cases/sql/agents)'
- en: Langchain [agents](https://python.langchain.com/docs/modules/agents/) and [tools](https://python.langchain.com/docs/modules/agents/tools/)
    documentation
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Langchain [代理](https://python.langchain.com/docs/modules/agents/) 和 [工具](https://python.langchain.com/docs/modules/agents/tools/)
    文档
- en: '[Build a basic LLM chat app with Streamlit](https://docs.streamlit.io/knowledge-base/tutorials/build-conversational-apps)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Streamlit 构建一个基础的 LLM 聊天应用](https://docs.streamlit.io/knowledge-base/tutorials/build-conversational-apps)'
- en: '[An article on LLMs and SQL on Langchain’s blog.](https://blog.langchain.dev/llms-and-sql/)'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Langchain 博客上关于 LLM 和 SQL 的一篇文章](https://blog.langchain.dev/llms-and-sql/)'
