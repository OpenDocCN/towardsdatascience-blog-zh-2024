- en: A Comprehensive Guide to Modeling Techniques in Mixed-Integer Linear Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 混合整数线性规划建模技术的全面指南
- en: 原文：[https://towardsdatascience.com/a-comprehensive-guide-to-modeling-techniques-in-mixed-integer-linear-programming-3e96cc1bc03d?source=collection_archive---------0-----------------------#2024-03-11](https://towardsdatascience.com/a-comprehensive-guide-to-modeling-techniques-in-mixed-integer-linear-programming-3e96cc1bc03d?source=collection_archive---------0-----------------------#2024-03-11)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-comprehensive-guide-to-modeling-techniques-in-mixed-integer-linear-programming-3e96cc1bc03d?source=collection_archive---------0-----------------------#2024-03-11](https://towardsdatascience.com/a-comprehensive-guide-to-modeling-techniques-in-mixed-integer-linear-programming-3e96cc1bc03d?source=collection_archive---------0-----------------------#2024-03-11)
- en: Convert ideas into mathematical expressions to solve operations research problems
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将想法转化为数学表达式，以解决运筹学问题。
- en: '[](https://medium.com/@bruscalia12?source=post_page---byline--3e96cc1bc03d--------------------------------)[![Bruno
    Scalia C. F. Leite](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page---byline--3e96cc1bc03d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--3e96cc1bc03d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--3e96cc1bc03d--------------------------------)
    [Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page---byline--3e96cc1bc03d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@bruscalia12?source=post_page---byline--3e96cc1bc03d--------------------------------)[![Bruno
    Scalia C. F. Leite](../Images/1042cd04be047c0811fef79ecd04e69c.png)](https://medium.com/@bruscalia12?source=post_page---byline--3e96cc1bc03d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--3e96cc1bc03d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--3e96cc1bc03d--------------------------------)
    [Bruno Scalia C. F. Leite](https://medium.com/@bruscalia12?source=post_page---byline--3e96cc1bc03d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--3e96cc1bc03d--------------------------------)
    ·13 min read·Mar 11, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--3e96cc1bc03d--------------------------------)
    ·13分钟阅读·2024年3月11日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/3d230ce2da990f4028cfa3593b0eb7f1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3d230ce2da990f4028cfa3593b0eb7f1.png)'
- en: Photo by [Aaron Lefler](https://unsplash.com/@alefler?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 摄影：来自[Aaron Lefler](https://unsplash.com/@alefler?utm_source=medium&utm_medium=referral)的照片，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Numerical optimization is at the core of quantitative techniques in decision
    science. It encompasses a set of frameworks to optimize one or more objectives
    under some prescribed set of circumstances.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 数值优化是决策科学中定量技术的核心。它包含一系列框架，用于在一些规定的情境下优化一个或多个目标。
- en: Two major categories of optimization problems are *Linear* and *Nonlinear Programming*.
    These categories are distinguished by how the mathematical relationships between
    the decision variables are established in the objective(s) and constraints. Management
    sciences and operations research make extensive use of linear models, whereas
    nonlinear programming problems tend to arise naturally in the physical sciences
    and engineering (Nocedal & Wright, 2006).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 优化问题主要分为*线性*和*非线性规划*两大类。这些类别的区分依据是决策变量在目标函数和约束条件中的数学关系如何建立。管理科学和运筹学广泛使用线性模型，而非线性规划问题则往往自然出现在物理科学和工程领域中（Nocedal
    & Wright，2006）。
- en: Mathematical models often require the incorporation of discrete decisions and
    integer values. These have been especially explored in the context of linear models
    as efficient algorithms were proposed throughout the years. When a *Linear Program*
    (LP) includes integrality constraints, it is classified as an *Integer* or a *Mixed-Integer
    Linear Program* (MILP). Fortunately, we have several solvers available to solve
    these problems, including open-source alternatives such as [HiGHS](https://highs.dev/#top)
    and [SCIP](https://www.scipopt.org/).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数学模型通常需要将离散决策和整数值纳入其中。这些问题特别在线性模型的背景下进行了探索，因为多年来提出了高效的算法。当*线性规划*（LP）包含整数约束时，它被归类为*整数规划*或*混合整数线性规划*（MILP）。幸运的是，我们有多种求解器可以解决这些问题，包括开源的替代方案，如[HiGHS](https://highs.dev/#top)和[SCIP](https://www.scipopt.org/)。
- en: Although mathematical models are imperfect representations of reality, they
    can be useful in guiding decisions. Therefore, this article aims to address how
    to describe common formulations and expressions encountered in MILP in mathematical
    terms.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管数学模型是对现实的近似表示，但它们在指导决策方面仍然有用。因此，本文旨在阐述如何用数学术语描述在MILP中常见的公式和表达式。
- en: 'The following sections will cover:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的部分将涵盖：
- en: '[Logical statements](#5120)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[逻辑语句](#5120)'
- en: '[Setup costs and batch sizes](#86a6)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[设立成本和批量大小](#86a6)'
- en: '[Conditional expressions](#a5a0)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[条件表达式](#a5a0)'
- en: '[Discrete planning horizons](#1226)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[离散规划时域](#1226)'
- en: '[Linearization techniques](#8559)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[线性化技术](#8559)'
- en: '[Further reading](#b8cc)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[进一步阅读](#b8cc)'
- en: '[Conclusions](#f9ce)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[结论](#f9ce)'
- en: '[References](#6f3f)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[参考文献](#6f3f)'
- en: This article will be a more abstract text on mathematical models than a code-applied
    guide. However, you might find several practical examples of how to solve numerical
    optimization models in my [GitHub repository](https://github.com/bruscalia/optimization-demo-files).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将是一个更抽象的数学模型文本，而不是一个代码应用指南。然而，你可能会在我的[GitHub仓库](https://github.com/bruscalia/optimization-demo-files)中找到一些关于如何解决数值优化模型的实际例子。
- en: Before you start, remember you might have a better understanding of this text
    if you are already familiar with *Linear Programming*. You can find an interesting
    overview of the subject in my previous article.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，请记住，如果你已经熟悉*线性规划*，你可能会更好地理解这篇文章。你可以在我之前的文章中找到该主题的有趣概述。
- en: '[](/linear-programming-theory-and-applications-c67600591612?source=post_page-----3e96cc1bc03d--------------------------------)
    [## Linear programming: Theory and applications'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/linear-programming-theory-and-applications-c67600591612?source=post_page-----3e96cc1bc03d--------------------------------)
    [## 线性规划：理论与应用'
- en: Linear optimization main concepts and implementation in Python
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线性优化的主要概念及其在Python中的实现
- en: towardsdatascience.com](/linear-programming-theory-and-applications-c67600591612?source=post_page-----3e96cc1bc03d--------------------------------)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/linear-programming-theory-and-applications-c67600591612?source=post_page-----3e96cc1bc03d--------------------------------)
- en: Now let us dive in!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们深入了解！
- en: Logical statements
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑语句
- en: In integer programming (IP) models, logical statements can be translated into
    linear constraints to capture specific conditions or relationships among the decision
    variables. Let us consider at first logical statements involving binary decision
    variables.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在整数规划（IP）模型中，逻辑语句可以转化为线性约束，以捕捉决策变量之间的特定条件或关系。让我们首先考虑涉及二进制决策变量的逻辑语句。
- en: Implications
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 蕴涵
- en: Let us start with the statement “if *x* then *y*”. It must ensure that if *x*
    is True (value of 1), *y* must also be True. Otherwise, *y* can be either 0 or
    1\. It can be described by a simple inequality stating that *y* is greater than
    or equal to *x*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从“如果*x*则*y*”这一语句开始。它必须确保如果*x*为真（值为1），则*y*也必须为真。否则，*y*可以是0或1。可以通过一个简单的不等式来描述，即*y*大于或等于*x*。
- en: '![](../Images/72c1cdc05a9dd0626160348cd7d4b475.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/72c1cdc05a9dd0626160348cd7d4b475.png)'
- en: Implication constraint in integer programming. (Image by the author).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在整数规划中的蕴涵约束。（图片来源：作者）
- en: Logical NOT
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑非
- en: The expression for “not *y*” must return its opposite. So, in case *y* is 1,
    it must return 0\. Otherwise, it should return 1.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: “not *y*”的表达式必须返回其相反值。所以，当*y*为1时，它必须返回0。否则，它应该返回1。
- en: '![](../Images/9574a64e4a75e2d5c02139eb7a972dd4.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9574a64e4a75e2d5c02139eb7a972dd4.png)'
- en: Logical NOT in integer programming. (Image by the author).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在整数规划中的逻辑非。（图片来源：作者）
- en: The “not” statement can be combined with an implication constraint, for instance,
    “if *x* then not *y*”.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: “not”语句可以与蕴涵约束结合，例如，“如果*x*则not *y*”。
- en: '![](../Images/eae727558113d7483f7309905691a629.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eae727558113d7483f7309905691a629.png)'
- en: Implication constraint combined with logical NOT in integer programming. (Image
    by the author).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在整数规划中结合逻辑非的蕴涵约束。（图片来源：作者）
- en: Logical AND
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑与
- en: To compute the logical “and”, let us introduce a variable *z*, which is True
    if both *x* and *y* are True. These are the same rules to describe the product
    between two binary variables, as *x* times *y* only equals 1 if both are equal
    to 1\. This occurs in the [Facility Dispersion Problem](/the-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26)
    when computing an active edge connecting two nodes.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算逻辑“与”，我们引入一个变量 *z*，当 *x* 和 *y* 都为真时，*z* 为真。这些规则与描述两个二进制变量之间乘积的规则相同，因为 *x*
    乘以 *y* 仅在两者都等于 1 时才等于 1。这在计算连接两个节点的活动边时出现在[设施分配问题](/the-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26)中。
- en: '![](../Images/763a823045320cb0d5cea853face4e91.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/763a823045320cb0d5cea853face4e91.png)'
- en: Logical AND constraints in integer programming. (Image by the author).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 整数规划中的逻辑与约束。（图片来自作者）。
- en: Logical OR
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑或
- en: Now, to compute the logical “or”, *z* must be True if either *x* or *y* is True.
    We must then ensure that it is greater than or equal to each of them and that
    it is smaller than their sum.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要计算逻辑“或”时，*z* 必须为真，如果 *x* 或 *y* 其中之一为真。我们必须确保它大于或等于它们中的每一个，并且小于它们的和。
- en: '![](../Images/fca970d70ed3fc4da15e99a5068922b7.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fca970d70ed3fc4da15e99a5068922b7.png)'
- en: Logical OR constraints in integer programming. (Image by the author).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 整数规划中的逻辑或约束。（图片来自作者）。
- en: Setup costs and batch sizes
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置成本和批量大小
- en: Next, let us introduce *setup costs* and *batch sizes*, which are similar to
    implication constraints but in a context with real-valued and integer/binary variables.
    Consider a nonnegative variable *x* and a condition where setup costs apply if
    *x* is greater than zero. To mathematically represent this, we state that *y*
    multiplied by a large value *M* should be greater than or equal to *x*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们引入 *设置成本* 和 *批量大小*，它们类似于隐含约束，但在具有实数值和整数/二进制变量的上下文中。考虑一个非负变量 *x*，并且在 *x*
    大于零时应用设置成本。为了数学表示这一点，我们声明 *y* 乘以一个大值 *M* 应该大于或等于 *x*。
- en: '![](../Images/87a937f3659e87657899339f4e2a91c9.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/87a937f3659e87657899339f4e2a91c9.png)'
- en: Setup costs implication constraint in mixed-integer linear programming. (Image
    by the author).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 混合整数线性规划中的设置成本隐含约束。（图片来自作者）。
- en: If *x* is greater than zero, the inequality is only satisfied if *y* is 1\.
    This occurs for instance in the [Dynamic Lot-size Problem](https://medium.com/towards-data-science/the-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e),
    in which we balance between setup and holding inventory costs.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 *x* 大于零，则不等式仅在 *y* 等于 1 时满足。例如，在[动态批量问题](https://medium.com/towards-data-science/the-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e)中，我们在平衡设置成本和库存持有成本时会遇到这种情况。
- en: '![](../Images/ba135ac31c0e6d07e281602bcbd92858.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ba135ac31c0e6d07e281602bcbd92858.png)'
- en: Machine setup costs incurred for producing one or multiple items. (Image by
    the author).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为生产一个或多个项目而产生的机器设置成本。（图片来自作者）。
- en: The *M* term — usually denoted the “big M” — should be a natural upper bound
    for *x*. It is important to define it using the smallest possible value such that
    the constraint is nonbinding if *y* equals 1\. Avoiding too large values can improve
    linear relaxation, which has a positive effect on solver performance, besides
    avoiding numerical errors.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*M* 项 — 通常表示为“大 M” — 应该是 *x* 的自然上界。重要的是要使用最小的可能值来定义它，以确保当 *y* 等于 1 时，约束不会生效。避免使用过大的值可以改善线性松弛，从而对求解器性能产生积极影响，同时避免数值误差。'
- en: For scenarios involving multiple integer batches with limited capacity each
    (e.g., supply trips to a customer) we can use a similar expression. Now consider
    *y* is an integer variable denoting the number of batches performed and *Q* the
    capacity of each. The decision variable *x* still represents a nonnegative real
    value. We can write the same equation to capture our decision rules.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于涉及多个整数批次且每个批次有有限容量的场景（例如，向客户提供供应的运输任务），我们可以使用类似的表达式。现在假设 *y* 是一个整数变量，表示执行的批次数量，*Q*
    是每个批次的容量。决策变量 *x* 仍然表示一个非负的实数值。我们可以写出相同的方程式来捕捉我们的决策规则。
- en: '![](../Images/77f2703044f43788a4ea1e054b17ea83.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/77f2703044f43788a4ea1e054b17ea83.png)'
- en: Batch size constraint in mixed-integer linear programming. (Image by the author).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 混合整数线性规划中的批量大小约束。（图片来自作者）。
- en: Conditional Expressions — “if-then” rules
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件表达式 — “如果-那么”规则
- en: Now imagine we want an inequality to be binding when a binary variable *y* is
    1, else nonbinding. Once again, we can include a large value *M* to capture this
    condition.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们希望当二进制变量 *y* 为 1 时，不等式成立，否则不成立。我们可以再次引入一个大值 *M* 来捕捉这种条件。
- en: '![](../Images/2ef6f26882b461f3cc54999e0e793fe2.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2ef6f26882b461f3cc54999e0e793fe2.png)'
- en: Conditional expression in mixed-integer linear programming. (Image by the author).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 混合整数线性规划中的条件表达式。（图片来源：作者）
- en: In case *y* equals 1, the term multiplying *M* becomes zero and the original
    constraint is binding. Otherwise, *M* is multiplied by 1, therefore it assumes
    an arbitrarily large value such that the original constraint is nonbinding for
    any feasible value of *x* considering the context of the problem.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当*y*等于1时，乘以*M*的项变为零，原始约束是紧约束。否则，*M*乘以1，因此它假定一个任意大的值，使得在考虑问题背景下，原始约束对于任何可行的*x*值都是非紧约束。
- en: '![](../Images/519c8abefacdaf0d994e5d5d92b5b5b0.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/519c8abefacdaf0d994e5d5d92b5b5b0.png)'
- en: Conditional expression (inequality) that must hold when y equals one. (Image
    by the author).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当*y*等于1时必须满足的条件表达式（不等式）。（图片来源：作者）
- en: These expressions will arise quite often in mixed-integer programming models,
    and some of the most common applications are detailed here.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表达式在混合整数规划模型中会经常出现，以下是一些最常见的应用。
- en: Disjunctive rules — “if-then-else”
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分支规则 — “如果-那么-否则”
- en: Disjunctive constraints are a series of connected “if-then” constraints. Additional
    rules ensure that either one or the other is satisfied.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 分支约束是一系列连接的“如果-那么”约束。额外的规则确保要么一个满足，要么另一个满足。
- en: '![](../Images/f97b2ca63bdf98604385117f96a51c95.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f97b2ca63bdf98604385117f96a51c95.png)'
- en: Disjunctive expressions in mixed-integer linear programming. (Image by the author).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 混合整数线性规划中的分支表达式。（图片来源：作者）
- en: Precedence and sequences
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 优先级和序列
- en: Consider now a decision as to which operation, *i* or *j*, happens first. In
    some sequencing models, we can include a real-valued decision variable for the
    start of each operation *x*, another variable or a fixed parameter for its duration
    *d*, and a binary decision variable (precedence) *y* which is 1 if *i* occurs
    before *j*.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在考虑一个决策，确定哪个操作，*i* 还是 *j*，先执行。在一些调度模型中，我们可以为每个操作的开始设置一个实数决策变量*x*，另一个变量或固定参数表示它的持续时间*d*，以及一个二进制决策变量（优先级）*y*，当*i*在*j*之前发生时，*y*为1。
- en: '![](../Images/5bfe8cebeb5ce4b98416bf3d5c652948.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5bfe8cebeb5ce4b98416bf3d5c652948.png)'
- en: Precedence constraint in mixed-integer linear programming. (Image by the author).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 混合整数线性规划中的优先约束。（图片来源：作者）
- en: These expressions will be useful in the [Disjunctive Job-shop Scheduling Model](https://medium.com/towards-data-science/the-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab)
    and the [Traveling Salesman Problem](https://doi.org/10.1145/321043.321046) using
    the MTZ Formulation (Miller et al., 1960).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表达式将在[分支作业车间调度模型](https://medium.com/towards-data-science/the-job-shop-scheduling-problem-mixed-integer-programming-models-4bbee83d16ab)和[旅行商问题](https://doi.org/10.1145/321043.321046)中使用MTZ公式（Miller等，1960）。
- en: '![](../Images/0e19e0dcfd2d1b10209af2245b4ca03c.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0e19e0dcfd2d1b10209af2245b4ca03c.png)'
- en: Gaant plot for the optimal solution of Job-shop scheduling problem with 10 jobs
    and 10 machines. (Image by the author).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 10个作业和10台机器的作业车间调度问题的最优解的甘特图。（图片来源：作者）
- en: Min-max and Max-min objectives
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小-最大和最大-最小目标
- en: These objectives involve the minimization of the maximum value of a set of expressions
    or the maximization of their minimum value. In simple terms, our goal is to keep
    the worst-case scenario as good as possible.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些目标包括最小化一组表达式的最大值或最大化它们的最小值。简单来说，我们的目标是尽可能保持最坏情况的结果良好。
- en: In the case of the Min-max expressions, we can create a scalar decision variable
    *z* and ensure that it is always greater than or equal to attributes *d* from
    a set of options *I* if the corresponding item *i* is selected.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在最小-最大表达式的情况下，我们可以创建一个标量决策变量*z*，并确保当选择相应的项目*i*时，它始终大于或等于一组选项*I*中的属性*d*。
- en: '![](../Images/2efba647bf990dee686a57b36b114d73.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2efba647bf990dee686a57b36b114d73.png)'
- en: Min-max expression in mixed-integer linear programming. (Image by the author).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 混合整数线性规划中的最小-最大表达式。（图片来源：作者）
- en: When handling Max-min expressions, consider now *z* a scalar lesser than or
    equal to the attributes of all selected items. In both scenarios, we introduce
    the big *M* to ensure that, in case the item is not selected, the constraint becomes
    nonbinding. A good choice of *M* would be the difference between the maximum value
    of *d* (from the whole set of items) and the property of item *i*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理最大最小表达式时，现在考虑*z*为小于或等于所有选定项属性的标量。在这两种情况下，我们引入大*M*来确保，如果某个项没有被选择，约束就不再起作用。一个好的*M*选择是*
    d*（来自整个项集合的最大值）与项*i*的属性之间的差值。
- en: '![](../Images/34dc2552f72a48a295c1c795564c7329.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/34dc2552f72a48a295c1c795564c7329.png)'
- en: Max-min expression in mixed-integer linear programming. (Image by the author).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 混合整数线性规划中的最大最小表达式。（图像由作者提供）
- en: These expressions arise for instance in the [Facility Dispersion Problem](https://medium.com/towards-data-science/the-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26)
    considering binary variables to indicate that a given arc or edge is active.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表达式例如出现在考虑使用二进制变量来表示给定弧或边是否激活的[设施分散问题](https://medium.com/towards-data-science/the-facility-dispersion-problem-mixed-integer-programming-models-98ffdb56cd26)中。
- en: '![](../Images/34cc5b0b6d3d09c37bc224f87a870e5f.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/34cc5b0b6d3d09c37bc224f87a870e5f.png)'
- en: Maximizing the minimum distance between any five points selected in Euclidean
    instance of the *p-dispersion problem. (Image by the author).*
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在欧几里得实例中最大化任何五个选定点之间的最小距离，属于*p-分散问题*。（图像由作者提供）
- en: Discrete planning horizons
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 离散规划时段
- en: Several operations research problems include planning over a discrete horizon.
    In such situations, actions taken at a given moment from the timeline will affect
    how decisions should be performed in the future. For instance, production and
    inventory planning usually includes balancing between holding inventory costs,
    setup costs, stock coverage, and demand forecast, among other aspects. The amount
    produced of a given product at a given moment is usually a decision to be taken
    and it should affect the product availability not only when produced but also
    in the future when considering the possibility of stocking goods.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一些运筹学问题包括在离散时段内进行规划。在这种情况下，时间线中某一时刻所采取的行动将影响未来决策的执行方式。例如，生产和库存规划通常涉及在持有库存成本、设置成本、库存覆盖率和需求预测等方面之间进行平衡。某一时刻生产的某一产品数量通常是一个需要做出的决策，它应当不仅在生产时影响产品的可用性，而且在未来考虑库存商品的可能性时也会产生影响。
- en: Inventory balance
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 库存平衡
- en: To calculate inventory balance, let us define a discrete planning horizon *T*
    with instants *t*. The inventory at a given moment will be a decision variable
    *I* indexed by the elements of the set *T*. If we define inputs (for instance
    the number of items produced) and outputs (corresponding demand or items transported)
    of a given moment as *x* and *d* respectively, we can compute the final inventory
    at a given moment as the final inventory of the previous moment plus inputs minus
    outputs.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算库存平衡，首先定义一个离散规划时段*T*，包含时刻*t*。给定时刻的库存将是一个决策变量*I*，其索引由集合*T*的元素组成。如果我们将某一时刻的输入（例如生产的物品数量）和输出（相应的需求或运输的物品）分别定义为*x*和*d*，那么我们可以通过以下公式计算给定时刻的最终库存：上一个时刻的最终库存加上输入减去输出。
- en: '![](../Images/c8edf40221bf031ffda8a2fa2401a64c.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c8edf40221bf031ffda8a2fa2401a64c.png)'
- en: Graphical representation of inventory balance in a discrete planning horizon.
    (Image by the author).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 离散规划时段中库存平衡的图形表示。（图像由作者提供）
- en: Remember the inputs and outputs might be fixed parameters of the problem or
    also decision variables.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，输入和输出可能是问题的固定参数，也可能是决策变量。
- en: We can put it in equation form as the following.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其表示为以下方程。
- en: '![](../Images/6eee187c5acfb70b3458df5cf1418c8f.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6eee187c5acfb70b3458df5cf1418c8f.png)'
- en: Simple inventory balance equation. (Image by the author).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的库存平衡方程。（图像由作者提供）
- en: A great example to illustrate this is the [Dynamic Lot-Size](https://medium.com/towards-data-science/the-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e)
    model. However, more complex decisions might be involved in the process and new
    elements should be included in the inventory balance equations then. One example
    will be presented right next.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子来说明这一点是[动态批量大小](https://medium.com/towards-data-science/the-dynamic-lot-size-model-a-mixed-integer-programming-approach-4a9440ba124e)模型。然而，过程可能涉及更复杂的决策，并且此时应在库存平衡方程中包含新的元素。接下来将展示一个示例。
- en: Inventory with backlogs
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带有积压的库存
- en: Now suppose we have deterministic demands *d* for each moment *t*, but we might
    decide to postpone some of them to reduce our costs (for instance setup costs
    or fixed charges in transportation systems). These might become *backlogs* in
    an inventory balance equation, usually with some associated cost in the objective
    function(s). Once again consider our inputs are represented by *x*, but now we
    are also going to include a non-negative decision variable for backlogs *b*, also
    indexed by *t*. The new inventory balance equation becomes the following.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们有每个时刻 *t* 的确定性需求 *d*，但我们可能决定推迟其中一些需求以减少成本（例如设置成本或运输系统中的固定费用）。这些可能会成为库存平衡方程中的*积压*，通常在目标函数中带有一些相关的成本。再一次，假设我们的输入由
    *x* 表示，但现在我们还将包含一个非负的决策变量来表示积压 *b*，它也由 *t* 索引。新的库存平衡方程变为以下形式。
- en: '![](../Images/9dfb930493fd827feb77eb7d5a5e0de1.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9dfb930493fd827feb77eb7d5a5e0de1.png)'
- en: Inventory balance with backlogs. (Image by the author).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 带有积压的库存平衡。（图片由作者提供）。
- en: Then it is up to the optimization solver to define when a demand should be postponed
    to reduce overall costs.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后由优化求解器来定义何时应该推迟需求以减少总体成本。
- en: Starts and Endings
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始和结束
- en: Some planning processes include scheduling activities that start at a certain
    moment and might last for more than one instant in the discrete planning horizon.
    When inserting these decisions in an optimization model, usually it is up to the
    model to define when the activity starts, when it ends, and possibly its corresponding
    duration. Therefore, we must include some binary decision variables to represent
    these decisions.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一些规划过程包括在某个时刻开始的活动，这些活动可能会持续超过一个时刻在离散规划范围内。当将这些决策插入到优化模型时，通常是模型来定义活动何时开始，何时结束，以及可能的持续时间。因此，我们必须包含一些二元决策变量来表示这些决策。
- en: To a better understanding of the modeling expressions, let us visually represent
    an activity that starts at a given moment, is active during some instants of the
    planning horizon, and then ends.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解建模表达式，我们可以直观地表示一个活动，它在某个时刻开始，在规划范围内的若干时刻处于活动状态，然后结束。
- en: '![](../Images/a5ccc5bc6c989a0d9c8369d21616157a.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a5ccc5bc6c989a0d9c8369d21616157a.png)'
- en: Activity scheduled in a discrete planning horizon. (Image by the author).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在离散规划范围内调度的活动。（图片由作者提供）。
- en: Notice that an activity starts in a moment in which it is active but it must
    be inactive in the previous instant. Conversely, at its ending, there’s no rule
    regarding the previous instant but it must be inactive in the following one.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，活动开始于其处于活动状态的时刻，但它必须在前一个时刻处于非活动状态。相反，活动结束时，前一个时刻没有规则要求，但它必须在接下来的时刻处于非活动状态。
- en: To write that into mathematical expressions, let us use three groups of decision
    variables — all of them indexed by the elements of the planning horizon *T*. The
    variable *x* will be used to denote a moment in which the activity is active,
    *y* will denote its start, and *z* denote its ending.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将其写成数学表达式，我们使用三组决策变量——它们都由规划范围 *T* 中的元素索引。变量 *x* 用于表示活动处于活动状态的时刻，*y* 用于表示活动的开始，*z*
    用于表示活动的结束。
- en: To obtain a tight linear relaxation and help the solver during Branch & Bound,
    three groups of constraints will be created to establish the relationship between
    *x* and *y*, and the same between *x* and *z*.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得紧凑的线性松弛并帮助求解器在分支定界过程中，三组约束将被创建以建立 *x* 和 *y* 之间的关系，以及 *x* 和 *z* 之间的关系。
- en: 'To identify starts:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了识别开始：
- en: '![](../Images/773225db0127830409a0c4398ee9cec7.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/773225db0127830409a0c4398ee9cec7.png)'
- en: Set of constraints to identify the starts of an activity in a discrete planning
    horizon. (Image by the author).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一组约束，用于识别活动在离散规划范围内的开始。（图片由作者提供）。
- en: 'And to identify endings:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 并且为了识别结束：
- en: '![](../Images/60b3b9e8b8fb46b41df7a14f06b3b568.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/60b3b9e8b8fb46b41df7a14f06b3b568.png)'
- en: Set of constraints to identify the endings of an activity in a discrete planning
    horizon. (Image by the author).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一组约束，用于识别活动在离散规划范围内的结束。（图片由作者提供）。
- en: Additional implication constraints might be included in the first and last instants
    to ensure the desired relationships between *x*, *y*, and *z* in these moments.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保在这些时刻中，*x*、*y* 和 *z* 之间的期望关系，可能会在第一和最后时刻加入额外的隐含约束。
- en: Linearization techniques
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 线性化技术
- en: Some problems include nonlinear expressions that cannot be incorporated directly
    into a MILP model. Fortunately, there are strategies involving the use of binary
    variables that allow us to linearize some nonlinear expressions. Two usual applications
    will be presented right next.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一些问题包括无法直接纳入MILP模型的非线性表达式。幸运的是，有一些策略利用二进制变量使我们能够线性化某些非线性表达式。接下来将介绍两个常见的应用。
- en: Product of real-valued and binary variables
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实值与二进制变量的乘积
- en: Now, suppose we have a continuous decision variable *x* bounded between feasible
    limits *L* and *U*. Also suppose a binary decision variable *y* and a support
    decision variable *z* which should compute the product between *x* and *y*. When
    *y* is 1, *z* should assume the value of *x*, otherwise 0.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们有一个连续的决策变量*x*，其值在可行范围*L*和*U*之间。假设还有一个二进制决策变量*y*和一个支持决策变量*z*，它应该计算*x*和*y*之间的乘积。当*y*为1时，*z*应该取*x*的值，否则为0。
- en: '![](../Images/dcdfef51018431a2d7634200ae80bfbe.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dcdfef51018431a2d7634200ae80bfbe.png)'
- en: If *y* is 1, *z* must be greater than or equal to *x* (and its natural lower
    limit) and also lesser than or equal to *x* (and its natural upper limit). The
    only way to satisfy these inequalities is, therefore, if *z* is equal to *x*.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*y*为1，*z*必须大于或等于*x*（及其自然下限），并且小于或等于*x*（及其自然上限）。因此，满足这些不等式的唯一方法是，*z*等于*x*。
- en: Now if *y* is 0, the last two inequalities ensure that *z* equals 0, while the
    first two inequalities ensure that any value of *x* between its natural bounds
    is feasible.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果*y*为0，最后两个不等式确保*z*等于0，而前两个不等式确保任何在自然界限内的*x*值都是可行的。
- en: Therefore, using these inequalities, one can linearize the product between a
    binary and a real-valued decision variable.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，利用这些不等式，可以将二进制和实值决策变量之间的乘积线性化。
- en: Piecewise linear approximations
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分段线性近似
- en: Now suppose we want to compute the value of a function defined in piecewise
    linear segments. It can be an approximation for a general nonlinear expression
    or simply a strategy to compute segmented linear expressions such as in contracts
    with distinct levels of unitary costs varying according to the volume of transactions.
    The idea is illustrated below by the approximation of the sigmoid function by
    5 linear segments.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们要计算在分段线性区间中定义的函数值。这可以是一般非线性表达式的近似，或者仅仅是计算分段线性表达式的一种策略，例如在具有不同单位成本水平的合同中，成本水平根据交易量的变化而变化。下面的图示通过5个线性区间近似Sigmoid函数来展示这个思想。
- en: '![](../Images/63db3ad761e683b5dcdaabf4aa5ad760.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/63db3ad761e683b5dcdaabf4aa5ad760.png)'
- en: Sigmoid function and its corresponding piecewise linear approximation using
    5 intervals. (Image by the author).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Sigmoid函数及其通过5个区间的分段线性近似。（图片来自作者）
- en: 'Consider a generic function *f*(*x*) defined in a given domain of a real-valued
    variable *x* between *l* and *u*. Now consider this function is discretized over
    *N* segments of arbitrary size. Each segment of index *i* lies between interpolation
    points *x* of indexes *i* and *i*+1, such that there are *N*+1 interpolation points.
    We now include parameters to define the linear equation of each segment:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个通用函数*f*(*x*)，定义在一个实值变量*x*的给定区间[l, u]上。现在，假设该函数在*N*个任意大小的区间上进行了离散化。每个索引为*i*的区间位于插值点*x*的索引*i*和*i*+1之间，且总共有*N*+1个插值点。我们现在加入参数来定义每个区间的线性方程：
- en: '*aᵢ*: the slope of the *i*th linear segment'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*aᵢ*：第*i*个线性区间的斜率'
- en: '*bᵢ*: the intercept of the *i*th linear segment'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*bᵢ*：第*i*个线性区间的截距'
- en: 'Our goal is that the decision variable *y* assumes the value of *f*(*x*). To
    do so, we also include auxiliary decision variables index by *i* within {1, 2,
    …, *N*}:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是让决策变量*y*取值为*f*(*x*)。为此，我们还引入了辅助决策变量，索引为*i*，其中*i*属于{1, 2, …, *N*}：
- en: '*zᵢ*: a binary decision variable that is an indicator that *x* lies within
    the *i*th linear segment (closed interval).'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*zᵢ*：一个二进制决策变量，用于指示*x*是否位于第*i*个线性区间内（闭区间）。'
- en: '*sᵢ*: a real-valued decision variable that assumes the value of *x* in case
    it lies within the *i*th linear segment (closed interval).'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*sᵢ*：一个实值决策变量，如果*x*位于第*i*个线性区间内（闭区间），则它取*x*的值。'
- en: The variable *x* should lie within one of the segments created, therefore a
    constraint must ensure that exactly one *z* variable is active.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 变量*x*应该位于所创建的一个区间内，因此必须有一个约束确保恰好有一个*z*变量是活动的。
- en: '![](../Images/8733623f6db0c296bbfb686038318ee7.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8733623f6db0c296bbfb686038318ee7.png)'
- en: Constraint ensures that one segment is active in a piecewise linear function.
    (Image by the author).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 约束确保在分段线性函数中有一个分段处于激活状态。（图片由作者提供）
- en: Now we must ensure that *sᵢ* equals *x* when *zᵢ* equals 1, and also compute
    *y* based on the values of *sᵢ* and the corresponding parameters of each segment.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须确保当 *zᵢ* 等于 1 时，*sᵢ* 等于 *x*，并且基于 *sᵢ* 的值和每个分段对应的参数计算 *y*。
- en: '![](../Images/442341a65ccd210bc7f28a59c36f6f16.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/442341a65ccd210bc7f28a59c36f6f16.png)'
- en: Piecewise linear function constraints. (Image by the author).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 分段线性函数约束。（图片由作者提供）
- en: Thus, using these expressions one can compute the value of a generic piecewise
    linear function *f*(*x*) to a real-valued decision variable *y* in a way that
    a mixed-integer linear programming solver can interpret.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用这些表达式，可以计算通用分段线性函数 *f*(*x*) 对应于实值决策变量 *y* 的值，以便混合整数线性规划求解器能够理解。
- en: Further reading
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The algorithm at the core of most MILP solvers is called *Branch & Bound*. It
    efficiently explores a rooted search tree of discrete decisions without enumerating
    all possibilities. You might find a comprehensive introduction to this topic in
    my previous article.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 MILP 求解器核心算法被称为*分支定界*。它通过高效地探索离散决策的根搜索树，避免了枚举所有可能性。你可以在我之前的文章中找到关于这个主题的详细介绍。
- en: '[](/a-gentle-introduction-to-branch-bound-d00a4ee1cad?source=post_page-----3e96cc1bc03d--------------------------------)
    [## A Gentle Introduction to Branch & Bound'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/a-gentle-introduction-to-branch-bound-d00a4ee1cad?source=post_page-----3e96cc1bc03d--------------------------------)
    [## 分支定界的简明介绍'
- en: The most fundamental integer and mixed-integer programming algorithm explained
    with Python
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解释最基本的整数与混合整数规划算法，使用 Python 实现
- en: towardsdatascience.com](/a-gentle-introduction-to-branch-bound-d00a4ee1cad?source=post_page-----3e96cc1bc03d--------------------------------)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/a-gentle-introduction-to-branch-bound-d00a4ee1cad?source=post_page-----3e96cc1bc03d--------------------------------)'
- en: Some models might resort to other techniques, such as *Delayed Column Generation*,
    which aims to solve models with a number of decision variables too large to be
    explicitly enumerated from the start. An introduction on this topic with a coding
    example can be found in a previous article too.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一些模型可能会采用其他技术，例如*延迟列生成*，这种方法旨在解决决策变量过多，无法一开始就显式枚举的模型。关于这一主题的介绍和代码示例可以在之前的文章中找到。
- en: '[](/column-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b?source=post_page-----3e96cc1bc03d--------------------------------)
    [## Column Generation in Linear Programming and the Cutting Stock Problem'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/column-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b?source=post_page-----3e96cc1bc03d--------------------------------)
    [## 线性规划中的列生成与切割库存问题'
- en: How to solve linear problems with a large number of decision variables illustrated
    with a Python example
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何使用 Python 示例解决具有大量决策变量的线性问题
- en: towardsdatascience.com](/column-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b?source=post_page-----3e96cc1bc03d--------------------------------)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[towardsdatascience.com](/column-generation-in-linear-programming-and-the-cutting-stock-problem-3c697caf4e2b?source=post_page-----3e96cc1bc03d--------------------------------)'
- en: 'Now referring to traditional books on the subject, the interested reader might
    refer to *Numerical Optimization* (Nocedal & Wright, 2006) and *Linear and Nonlinear
    Programming* (Luenberger & Ye, 2008) for a deeper understanding of optimization
    algorithms over continuous domain — which are often components of submodels solved
    in integer programming. The book *Integer Programming* (Wolsey, 2020) is often
    referred to as “the bible” of its corresponding subject. It is a great reference
    to understand better how exact algorithms on discrete search spaces are designed
    going deeper into *Branch & Bound*, cutting planes, and much more. The book *Operations
    research: applications and algorithms* (Winston & Goldberg, 2004) is a great alternative
    for those eager to see more applied examples besides a great overview of theoretical
    aspects.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，参考传统书籍，感兴趣的读者可以参考*《数值优化》*（Nocedal & Wright, 2006）和*《线性与非线性规划》*（Luenberger
    & Ye, 2008），以深入理解连续域上的优化算法——这些算法通常是整数规划中求解的子模型的组成部分。*《整数规划》*（Wolsey, 2020）一书常被称为该领域的“圣经”。这是一本极好的参考书，能够帮助更好地理解如何设计离散搜索空间上的精确算法，深入探讨*分支定界*、割平面等内容。*《运筹学：应用与算法》*（Winston
    & Goldberg, 2004）是另一本很好的替代书籍，对于那些渴望看到更多实际应用示例的读者，它也提供了很好的理论概述。
- en: Conclusions
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Mixed-Integer Linear Programming (MILP) is a relevant area in numerical optimization
    with relevant applications, especially in management sciences and operations research.
    This article covered key expressions of MILP including Logical statements, Setup
    costs, Conditional expressions, Discrete planning horizons, and Linearization
    techniques. By combining these elements, the reader should be able to formulate
    real-world problems as optimization models that can be tackled by MILP solvers.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 混合整数线性规划（MILP）是数值优化中的一个相关领域，具有重要的应用，特别是在管理科学和运筹学中。本文介绍了MILP的关键表达式，包括逻辑语句、设置成本、条件表达式、离散规划时间范围和线性化技术。通过结合这些元素，读者应该能够将现实世界中的问题转化为可以通过MILP求解器解决的优化模型。
- en: References
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Luenberger, D. G. & Ye, Y., 2008\. *Linear and Nonlinear Programming.* 3rd
    ed. Stanford: Springer.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Luenberger, D. G. & Ye, Y., 2008. *线性与非线性规划.* 第3版. 斯坦福：施普林格。
- en: 'Nocedal, J. & Wright, S. J., 2006\. *Numerical Optimization.* 2nd ed. New York:
    Springer New York.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Nocedal, J. & Wright, S. J., 2006. *数值优化.* 第2版. 纽约：施普林格·纽约。
- en: 'Winston, W. L. & Goldberg, J. B., 2004\. *Operations research: applications
    and algorithms.* 4th ed. Belmont, CA: Thomson Brooks/Cole Belmont.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Winston, W. L. & Goldberg, J. B., 2004. *运筹学：应用与算法.* 第4版. 加利福尼亚州贝尔蒙特：汤姆森·布鲁克斯/科尔贝尔蒙特。
- en: Wolsey, L. A., 2020\. *Integer Programming.* 2nd ed. John Wiley & Sons.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Wolsey, L. A., 2020. *整数规划.* 第2版. 约翰·威利与 sons 出版公司。
