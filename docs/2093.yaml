- en: 'Need for Speed: Streamlit vs Functool Caching'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/need-for-speed-streamlit-vs-functool-caching-eb3b7426f209?source=collection_archive---------4-----------------------#2024-08-28](https://towardsdatascience.com/need-for-speed-streamlit-vs-functool-caching-eb3b7426f209?source=collection_archive---------4-----------------------#2024-08-28)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Comparing the performance of streamlit and functools caching for pandas and
    polars. The results will surprise you!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@joparga3?source=post_page---byline--eb3b7426f209--------------------------------)[![Jose
    Parreño](../Images/707d5179926d36fba257f5476494e10e.png)](https://medium.com/@joparga3?source=post_page---byline--eb3b7426f209--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--eb3b7426f209--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--eb3b7426f209--------------------------------)
    [Jose Parreño](https://medium.com/@joparga3?source=post_page---byline--eb3b7426f209--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--eb3b7426f209--------------------------------)
    ·12 min read·Aug 28, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/97ee58b0ef7f87fbf177d262debc264b.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Oscar Sutton](https://unsplash.com/@o5ky?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/red-car-blowing-turbo-pBrHNFqcX-M?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  prefs: []
  type: TYPE_NORMAL
- en: '[Streamlit](https://streamlit.io/) is my default framework for building both
    proof-of-concept demos and analytical dashboards. The simplicity of the framework
    allows quick development and easy maintenance. However, the dark side of simplicity
    is that it comes with in-built design assumptions that make it difficult to use
    as a top grade production tool. We will cover these in detail later, but the result
    of these assumptions is how ***slow*** Streamlit can be when processing and rendering
    your app.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this post, I want to show you **2 methods to increase the speed of your
    Streamlit apps**: using the built-in **Streamlit caching functions** and using
    the built-in **functools caching functions**. Both methods are anchored on the
    idea of caching, where, if something has already been triggered before, the output
    is saved to re-use later.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before getting into the results, I feel it is important to understand 3 basic
    pieces of theory: how does Streamlit, Streamlit caching, and functools caching
    work under the hood.'
  prefs: []
  type: TYPE_NORMAL
- en: '*PS: All images are authored by me, unless otherwise specified.*'
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit re-executes everything…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
