- en: CV VideoPlayer — Once and For All
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/cv-videoplayer-once-and-for-all-b7e1b3349975?source=collection_archive---------6-----------------------#2024-12-12](https://towardsdatascience.com/cv-videoplayer-once-and-for-all-b7e1b3349975?source=collection_archive---------6-----------------------#2024-12-12)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Python video player package made for computer vision research
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@daniel_92063?source=post_page---byline--b7e1b3349975--------------------------------)[![Daniel
    Tomer](../Images/872d23ccef8f51ab54d69c99cb654955.png)](https://medium.com/@daniel_92063?source=post_page---byline--b7e1b3349975--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b7e1b3349975--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b7e1b3349975--------------------------------)
    [Daniel Tomer](https://medium.com/@daniel_92063?source=post_page---byline--b7e1b3349975--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b7e1b3349975--------------------------------)
    ·6 min read·Dec 12, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fe525d3da0b40b616d63db54a0c0a9fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: When developing computer vision algorithms, the journey from concept to working
    implementation often involves countless iterations of watching, analyzing, and
    debugging video frames. As I dove deeper into computer vision projects, I found
    myself repeatedly writing the same boilerplate code for video visualization and
    debugging.
  prefs: []
  type: TYPE_NORMAL
- en: At some point, I decided enough was enough, so I created [**CV VideoPlayer**](https://pypi.org/project/cvvideoplayer/),
    a Python-based open-source video player package, specifically designed for computer
    vision practitioners that will solve this problem once and for all.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fb722b9a39bac8d52043f3f1eedd1ce4.png)'
  prefs: []
  type: TYPE_IMG
- en: CV video player “Double frame mode” with added visualizations and keyboard shortcuts.
    Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Debugging video-related algorithms is hard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you’ve ever developed an algorithm for video analysis, you’ve probably written
    some version of the following code to help you visualize and debug it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: But in almost all projects I’ve worked on this code was rarely enough. As the
    project went on I found myself adding more and more functionality to help me understand
    what was going on.
  prefs: []
  type: TYPE_NORMAL
- en: '**For example:**'
  prefs: []
  type: TYPE_NORMAL
- en: Navigation through the video back and forth frame by frame.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to record the output to a file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supporting sources other than a simple video file (frame folder, stream, remote
    storage, etc.)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**But the thing that annoyed me the most was the lack of interactivity**. Using
    this kind of code, The visualization is created before rendering and cannot change
    once displayed. And, while this is okay for simple algorithms, for the more complex
    ones, there is just way too much information needed for each frame. And without
    the ability to decide, on the fly, what you want to display, you find yourself
    running the same video again and again, each time with different visualization
    parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: This process was tedious and exhausting.
  prefs: []
  type: TYPE_NORMAL
- en: Enter CV VideoPlayer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![](../Images/321d31566897a63f73c1694372814775.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: '[CV VideoPlayer](https://pypi.org/project/cvvideoplayer/) was born from the
    need for a simple customizable solution for interactively rendering videos and
    frames. It allows any number of overlays, sidebars, or any other frame edits,
    each of which can be easily switched on and off by the user during run time. let’s
    see an example of how this is done:'
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by installing the package using `pip install cvvideoplayer`
  prefs: []
  type: TYPE_NORMAL
- en: Playing vanilla video
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can then import the video player and run an unedited video with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This will open the video player and allow you to play it with the spacebar or
    using the arrows, it will also add some default built-in `frame-edit-callbacks`
    which we will elaborate on in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0f99aa9cb9dbb81615f8607d90bafae6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Editing the frames to add visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add custom-built visualization to the video we can use the `frame_edit_callbacks`
    argument of the `create_video_player` constructor function like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When unspecified, the default list will be exactly the one in the example above.
  prefs: []
  type: TYPE_NORMAL
- en: Built-in callbacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are a bunch of built-in callbacks to use such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FitFrameToScreen` — Automatically resizes the frame to fit the screen size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FrameInfoOverlay` — Prints the frame number and original frame resolution
    on the top left corner.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KeyMapOverlay` — Automatically detects and prints all available keyboard shortcuts
    (Also those added by the user).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DetectionCsvPlotter` — Plots Bounding boxes specified in a CSV with the following
    Header: frame_id, label, x1, y1, width, height, score'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FrameNormlizer` — Allows the user to adjust the dynamic range of the image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HistogramEqulizer` — self-explanatory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And more are added with each version.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom callback
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is where the usefulness of the package shines. To add your own custom
    visualization you create a new class that inherits `BaseFrameEditCallback` and
    implements the `edit_frame` method, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you can add setup and teardown methods by overriding these methods
    in the parent class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Adding Custom keyboard shortcuts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For each callback, CV Video Player allows you to add custom keyboard shortcuts
    that can change the visualization it does at run time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most basic shortcut is enabling/disabling the callback and is created using
    the `enable_disable_key` parameter like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The string passed here can be any combination of modifiers (ctrl, alt, and
    shift) with a letter or number for example: **“crtl+alt+s”**, **“g”**, **“shift+v”**,
    **“crtl+1”** and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: To add shortcuts that change the visualization itself, you can override the`additional_keyboard_shortcuts`
    property which returns a list of the dataclass`KeyFunction` .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A `KeyFunction` is constructed using three arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `key` argument — Same as for `enable_disable_key` , The string passed here
    can be any combination of modifiers (ctrl, alt, and shift) with a letter or number
    for example: **“crtl+alt+s”**, **“g”**, **“shift+v”**, **“crtl+1”**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `description` argument — This is used by the `KeyMapOverlay` callback to
    print all the available shortcuts on the screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `function` argument — Has to be a function that accepts no arguments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In many cases, the KeyFunction will receive a function that toggles some boolean
    attribute of the callback, which will change something that the `edit_frame`method
    does. So something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Double Frame Mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many times, I found myself wanting to compare two different visualizations side
    by side. For example, comparing two detectors or an algorithm's output with the
    original frame without modifications, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that I added `double_frame_mode` which can be turned on by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The video at the beginning of this blog is an example of what this mode looks
    like.
  prefs: []
  type: TYPE_NORMAL
- en: In this mode, you can use “ctrl+1” and “ctrl+2" to decide which frame visualization
    you want to control with the keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, both frames will have the same callbacks available but if you want
    different callbacks for the right frame you can use the `right_frame_callback`
    argument to give the right frame a different set of callbacks (the left frame
    will have the ones passed to the `frame_edit_callback` argument):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To conclude
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I Hope this tool comes in handy for all of you. If you have any ideas on how
    to improve it, please let me know in the issues tab on the project’s [**GitHub
    page**](https://github.com/danieltomer1/CVVideoPlayer), and don’t forget to leave
    a star while you're at it :) …
  prefs: []
  type: TYPE_NORMAL
