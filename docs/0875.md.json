["```py\n~/workspace ➜ npm create vite@latest\n✔ Project name: … vite-project\n✔ Select a framework: › React\n✔ Select a variant: › TypeScript\n```", "```py\n~/workspace ➜ cd vite-project\n~/workspace/vite-project ➜ npm install\n~/workspace/vite-project ➜ npm run dev\n```", "```py\nfunction App() {\n  ...\n  const [health, setHealth] = useState('');\n\n  useEffect(() => {\n    const getStatus = async () => {\n      const response = await fetch('/v1/health-check/liveness', {\n        method: 'GET',\n      });\n      let status: { [status: string]: string } = {};\n      try {\n        status = await response.json();\n      } catch (err) {\n        console.log(`failed to get backend status. ${err}`);\n      }\n      setHealth(status['status'] || 'unknown');\n    };\n    getStatus();\n  }, []);\n\n  return (\n  ...\n     <div>Backend Status: {health}</div>\n  ...\n  )\n}\n```", "```py\n~/workspace/vite-project ➜ npm run build\n```", "```py\n└── dist/\n    ├── assets/\n    ├── static/\n    └── index.html\n```", "```py\n~/workspace/vite-project ➜ python3 -m venv venv\n~/workspace/vite-project ➜ . venv/bin/activate\n~/workspace/vite-project (venv) ➜ python -m pip install --upgrade pip\n~/workspace/vite-project (venv) ➜ pip install twine==5.0.0 build==1.2.1\n```", "```py\nfrom setuptools import setup\nfrom pathlib import Path\n\ncwd = Path(__file__).parent\nlong_description = (cwd / \"README.md\").read_text()\n\nsetup(\n    name=\"vite-project\",\n    version=\"0.0.1\",\n    package_dir={\"vite_project\": \"dist\"},\n    package_data={\"vite_project\": [\"**/*.*\"]},\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n)\n```", "```py\n~/workspace/vite-project (venv) ➜ python setup.py sdist -d tmp\n~/workspace/vite-project (venv) ➜ python -m build --wheel --outdir tmp\n~/workspace/vite-project (venv) ➜ twine upload -u ${USERNAME} -p ${PASSWORD} --repository-url ${REPO_URL} tmp/*\n```", "```py\n~/workspace/backend ➜ python3 -m venv venv\n~/workspace/backend ➜ . venv/bin/activate\n~/workspace/backend (venv) ➜ python -m pip install --upgrade pip\n~/workspace/backend (venv) ➜ pip install fastapi==0.110.0 uvicorn==0.29.0\n~/workspace/backend (venv) ➜ pip install ~/workspace/vite-project/tmp/vite-project-0.0.1.tar.gz\n```", "```py\n~/workspace/backend (venv) ➜ pip install --extra-index-url https://${USERNAME}:${PASSWORD}@${REPO_URL} vite-project==0.0.1\n```", "```py\nfrom distutils.sysconfig import get_python_lib\nfrom fastapi import FastAPI\nfrom fastapi.responses import FileResponse\nfrom fastapi.staticfiles import StaticFiles\nfrom backend.health_router import router\nfrom uvicorn import run\n\ndef create_app():\n    app = FastAPI(\n        title=\"Backend Server\",\n    )\n    app.include_router(router)\n\n    client_path = f\"{get_python_lib()}/vite_project\"\n    app.mount(\"/assets\", StaticFiles(directory=f\"{client_path}/assets\"), name=\"assets\")\n    app.mount(\"/static\", StaticFiles(directory=f\"{client_path}/static\"), name=\"static\")\n\n    @app.get(\"/{catchall:path}\")\n    async def serve_react_app(catchall: str):\n        return FileResponse(f\"{client_path}/index.html\")\n\n    return app\n\ndef main():\n    app = create_app()\n    run(app, host=\"0.0.0.0\", port=8080)\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nfrom typing import Literal\nfrom typing_extensions import TypedDict\nfrom fastapi import APIRouter, status\n\nSTATUS = Literal[\"success\", \"error\", \"partial\", \"unknown\"]\n\nclass ReturnHealthcheckStruct(TypedDict):\n    status: STATUS\n\nrouter = APIRouter(\n    prefix=\"/v1/health-check\",\n    tags=[\"Health Check\"],\n)\n\n@router.get(\n    \"/liveness\",\n    summary=\"Perform a Liveness Health Check\",\n    response_description=\"Return HTTP Status Code 200 (OK)\",\n    status_code=status.HTTP_200_OK,\n    response_model=ReturnHealthcheckStruct,\n)\nasync def liveness() -> ReturnHealthcheckStruct:\n    return {\"status\": \"success\"}\n```"]