["```py\nfrom unittest.mock import patch, Mock\nfrom deepeval.metrics import GEval\n\nllm_as_judge = GEval(\n    name=\"Correctness\",\n    criteria=\"Determine whether the actual output is factually correct based on the expected output.\",\n    evaluation_params=[LLMTestCaseParams.INPUT, LLMTestCaseParams.ACTUAL_OUTPUT],\n    model='gpt-3.5-turbo'\n)\n\n@patch('lg_weather_agent.retrieve_weather_data', Mock(return_value=chicago_weather))\ndef eval_query_rain_today():\n    input_query = \"Is it raining in Chicago?\"\n    expected_output = \"No, it is not raining in Chicago right now.\"\n    result = lg_weather_agent.run_query(app, input_query)\n    actual_output = result[-1]\n\n    print(f\"Actual: {actual_output}   Expected: {expected_output}\")\n    test_case = LLMTestCase(\n        input=input_query,\n        actual_output=actual_output,\n        expected_output=expected_output\n    )\n\n    llm_as_judge.measure(test_case)\n    print(llm_as_judge.score)\n```", "```py\n agent = llm_utils.agent()\n    question = \"What is the tallest mountain in British Columbia?\"\n    print(\">> \", question)\n    answer = agent.run_sync(question)\n    print(answer.data) \n```", "```py\n>>  What is the tallest mountain in British Columbia?\nThe tallest mountain in British Columbia is **Mount Robson**, at 3,954 metres (12,972 feet).\n```", "```py\nimport pydantic_ai\nfrom pydantic_ai.models.gemini import GeminiModel\n\ndef default_model() -> pydantic_ai.models.Model:\n    model = GeminiModel('gemini-1.5-flash', api_key=os.getenv('GOOGLE_API_KEY'))\n    return model\n\ndef agent() -> pydantic_ai.Agent:\n    return pydantic_ai.Agent(default_model())\n```", "```py\nfrom dataclasses import dataclass\n\n@dataclass\nclass Mountain:\n    name: str\n    location: str\n    height: float\n```", "```py\nagent = Agent(llm_utils.default_model(),\n                  result_type=Mountain,\n                  system_prompt=(\n                      \"You are a mountaineering guide, who provides accurate information to the general public.\",\n                      \"Provide all distances and heights in meters\",\n                      \"Provide location as distance and direction from nearest big city\",\n                  ))\n```", "```py\n>>  Tell me about the tallest mountain in British Columbia?\nMountain(name='Mount Robson', location='130km North of Vancouver', height=3999.0)\n>>  Is Mt. Hood easy to climb?\nMountain(name='Mt. Hood', location='60 km east of Portland', height=3429.0)\n>>  What's the tallest peak in the Enchantments?\nMountain(name='Mount Stuart', location='100 km east of Seattle', height=3000.0)\n```", "```py\ndef evaluate(answer: Mountain, reference_answer: Mountain) -> Tuple[float, str]:\n    score = 0\n    reason = []\n    if reference_answer.name in answer.name:\n        score += 0.5\n        reason.append(\"Correct mountain identified\")\n        if reference_answer.location in answer.location:\n            score += 0.25\n            reason.append(\"Correct city identified\")\n        height_error = abs(reference_answer.height - answer.height)\n        if height_error < 10:\n            score += 0.25 * (10 - height_error)/10.0\n        reason.append(f\"Height was {height_error}m off. Correct answer is {reference_answer.height}\")\n    else:\n        reason.append(f\"Wrong mountain identified. Correct answer is {reference_answer.name}\")\n\n    return score, ';'.join(reason)\n```", "```py\n questions = [\n        \"Tell me about the tallest mountain in British Columbia?\",\n        \"Is Mt. Hood easy to climb?\",\n        \"What's the tallest peak in the Enchantments?\"\n    ]\n\n    reference_answers = [\n        Mountain(\"Robson\", \"Vancouver\", 3954),\n        Mountain(\"Hood\", \"Portland\", 3429),\n        Mountain(\"Dragontail\", \"Seattle\", 2690)\n    ]\n\n    total_score = 0\n    for l_question, l_reference_answer in zip(questions, reference_answers):\n        print(\">> \", l_question)\n        l_answer = agent.run_sync(l_question)\n        print(l_answer.data)\n        l_score, l_reason = evaluate(l_answer.data, l_reference_answer)\n        print(l_score, \":\", l_reason)\n        total_score += l_score\n\n    avg_score = total_score / len(questions)\n```", "```py\n>>  Tell me about the tallest mountain in British Columbia?\nMountain(name='Mount Robson', location='130 km North-East of Vancouver', height=3999.0)\n0.75 : Correct mountain identified;Correct city identified;Height was 45.0m off. Correct answer is 3954\n>>  Is Mt. Hood easy to climb?\nMountain(name='Mt. Hood', location='60 km east of Portland, OR', height=3429.0)\n1.0 : Correct mountain identified;Correct city identified;Height was 0.0m off. Correct answer is 3429\n>>  What's the tallest peak in the Enchantments?\nMountain(name='Dragontail Peak', location='14 km east of Leavenworth, WA', height=3008.0)\n0.5 : Correct mountain identified;Height was 318.0m off. Correct answer is 2690\nAverage score: 0.75\n```", "```py\n agent = Agent(llm_utils.default_model(),\n                  result_type=Mountain,\n                  system_prompt=(\n                      \"You are a mountaineering guide, who provides accurate information to the general public.\",\n                      \"Use the provided tool to look up the elevation of many mountains.\"\n                      \"Provide all distances and heights in meters\",\n                      \"Provide location as distance and direction from nearest big city\",\n                  ))\n    @agent.tool\n    def get_height_of_mountain(ctx: RunContext[Tools], mountain_name: str) -> str:\n        return ctx.deps.elev_wiki.snippet(mountain_name)\n```", "```py\nclass Tools:\n    elev_wiki: wikipedia_tool.WikipediaContent\n    def __init__(self):\n        self.elev_wiki = OnlineWikipediaContent(\"List of mountains by elevation\")\n\ntools = Tools()  # Tools or FakeTools\n\nl_answer = agent.run_sync(l_question, deps=tools) # note how we are able to inject\n```", "```py\nimport wikipedia\n\nclass OnlineWikipediaContent(WikipediaContent):\n    def __init__(self, topic: str):\n        print(f\"Will query online Wikipedia for information on {topic}\")\n        self.page = wikipedia.page(topic)\n\n    def url(self) -> str:\n        return self.page.url\n\n    def html(self) -> str:\n        return self.page.html()\n```", "```py\nWill query online Wikipedia for information on List of mountains by elevation\n>>  Tell me about the tallest mountain in British Columbia?\nMountain(name='Mount Robson', location='100 km west of Jasper', height=3954.0)\n0.75 : Correct mountain identified;Height was 0.0m off. Correct answer is 3954\n>>  Is Mt. Hood easy to climb?\nMountain(name='Mt. Hood', location='50 km ESE of Portland, OR', height=3429.0)\n1.0 : Correct mountain identified;Correct city identified;Height was 0.0m off. Correct answer is 3429\n>>  What's the tallest peak in the Enchantments?\nMountain(name='Mount Stuart', location='Cascades, Washington, US', height=2869.0)\n0 : Wrong mountain identified. Correct answer is Dragontail\nAverage score: 0.58\n```", "```py\nclass FakeWikipediaContent(WikipediaContent):\n    def __init__(self, topic: str):\n        if topic == \"List of mountains by elevation\":\n            print(f\"Will used cached Wikipedia information on {topic}\")\n            self.url_ = \"https://en.wikipedia.org/wiki/List_of_mountains_by_elevation\"\n            with open(\"mountains.html\", \"rb\") as ifp:\n                self.html_ = ifp.read().decode(\"utf-8\")\n\n    def url(self) -> str:\n        return self.url_\n\n    def html(self) -> str:\n        return self.html_\n```", "```py\nclass FakeTools:\n    elev_wiki: wikipedia_tool.WikipediaContent\n    def __init__(self):\n        self.elev_wiki = FakeWikipediaContent(\"List of mountains by elevation\")\n\ntools = FakeTools()  # Tools or FakeTools\n\nl_answer = agent.run_sync(l_question, deps=tools) # note how we are able to inject\n```", "```py\nWill used cached Wikipedia information on List of mountains by elevation\n>>  Tell me about the tallest mountain in British Columbia?\nMountain(name='Mount Robson', location='100 km west of Jasper', height=3954.0)\n0.75 : Correct mountain identified;Height was 0.0m off. Correct answer is 3954\n>>  Is Mt. Hood easy to climb?\nMountain(name='Mt. Hood', location='50 km ESE of Portland, OR', height=3429.0)\n1.0 : Correct mountain identified;Correct city identified;Height was 0.0m off. Correct answer is 3429\n>>  What's the tallest peak in the Enchantments?\nMountain(name='Mount Stuart', location='Cascades, Washington, US', height=2869.0)\n0 : Wrong mountain identified. Correct answer is Dragontail\nAverage score: 0.58\n```"]