["```py\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfrom dotenv import load_dotenv, find_dotenv\nfrom datasets import load_dataset\nimport pandas as pd\nfrom typing import List, Optional\nfrom pydantic import BaseModel\nfrom datetime import datetime\nfrom pymongo.mongo_client import MongoClient\nimport openai\nimport time\n\n_ = load_dotenv(find_dotenv())\nMONGO_URI = os.environ.get(\"MONGO_URI\")\nOPENAI_API_KEY = os.environ.get(\"OPENAI_API_KEY\")\nopenai.api_key = OPENAI_API_KEY\n```", "```py\ndataset = load_dataset(\"Pablinho/movies-dataset\", streaming=True, split=\"train\")\ndataset = dataset.take(200)  # 200 movies for the sake of simplicity\ndataset_df = pd.DataFrame(dataset)\n```", "```py\nclass Movie(BaseModel):\n    Release_Date: Optional[str]\n    Title: str\n    Overview: str\n    Popularity: float\n    Vote_Count: int\n    Vote_Average: float\n    Original_Language: str\n    Genre: List[str]\n    Poster_Url: str\n    text_embeddings: List[float]\n```", "```py\ndef get_embedding(text):\n    if not text or not isinstance(text, str):\n        return None\n    try:\n        embedding = openai.embeddings.create(\n            input=text,\n            model=\"text-embedding-3-small\", dimensions=1536).data[0].embedding\n        return embedding\n    except Exception as e:\n        print(f\"Error in get_embedding: {e}\")\n        return None\n```", "```py\ndef process_and_embed_record(record):\n    for key, value in record.items():\n        if pd.isnull(value):\n            record[key] = None\n\n    if record['Genre']:\n        record['Genre'] = record['Genre'].split(', ')\n    else:\n        record['Genre'] = []\n\n    text_to_embed = f\"{record['Title']} {record['Overview']}\"\n    embedding = get_embedding(text_to_embed)\n    record['text_embeddings'] = embedding\n    return record\n\nrecords = [process_and_embed_record(record) for record in dataset_df.to_dict(orient='records')]\n```", "```py\ndef get_mongo_client(mongo_uri):\n    client = MongoClient(mongo_uri, appname=\"pmr.movie.python\")\n    print(\"Connection to MongoDB successful\")\n    return client\n\nmongo_client = get_mongo_client(MONGO_URI)\ndatabase_name = \"movies_dataset\"\ncollection_name = \"movies\"\ndb = mongo_client.get_database(database_name)\ncollection = db.get_collection(collection_name)\n\ncollection.delete_many({})\n```", "```py\nmovies = [Movie(**record).dict() for record in records]\ncollection.insert_many(movies)\n```", "```py\n{\n  \"fields\": [\n    {\n      \"numDimensions\": 1536,\n      \"path\": \"text_embeddings\",\n      \"similarity\": \"cosine\",\n      \"type\": \"vector\"\n    }\n  ]\n}\n```", "```py\ndef vector_search(user_query, db, collection, vector_index=\"vector_index_text\", max_retries=3):\n    query_embedding = get_embedding(user_query)\n    if query_embedding is None:\n        return \"Invalid query or embedding generation failed.\"\n\n    vector_search_stage = {\n        \"$vectorSearch\": {\n            \"index\": vector_index,\n            \"queryVector\": query_embedding,\n            \"path\": \"text_embeddings\",\n            \"numCandidates\": 150,\n            \"limit\": 20\n        }\n    }\n\n    pipeline = [vector_search_stage]\n\n    for attempt in range(max_retries):\n        try:\n            results = list(collection.aggregate(pipeline))\n            if results:\n                explain_query_execution = db.command(\n                    'explain', {\n                        'aggregate': collection.name,\n                        'pipeline': pipeline,\n                        'cursor': {}\n                    },\n                    verbosity='executionStats')\n                vector_search_explain = explain_query_execution['stages'][0]['$vectorSearch']\n                millis_elapsed = vector_search_explain['explain']['collectStats']['millisElapsed']\n                print(f\"Total time for the execution to complete on the database server: {millis_elapsed} milliseconds\")\n                return results\n            else:\n                print(f\"No results found on attempt {attempt + 1}. Retrying...\")\n                time.sleep(2)\n        except Exception as e:\n            print(f\"Error on attempt {attempt + 1}: {str(e)}\")\n            time.sleep(2)\n\n    return \"Failed to retrieve results after multiple attempts.\"\n```", "```py\nclass SearchResultItem(BaseModel):\n    Title: str\n    Overview: str\n    Genre: List[str]\n    Vote_Average: float\n    Popularity: float\n\ndef handle_user_query(query, db, collection):\n    get_knowledge = vector_search(query, db, collection)\n\n    if isinstance(get_knowledge, str):\n        return get_knowledge, \"No source information available.\"\n\n    search_results_models = [SearchResultItem(**result) for result in get_knowledge]\n    search_results_df = pd.DataFrame([item.dict() for item in search_results_models])\n\n    completion = openai.chat.completions.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[\n            {\"role\": \"system\", \"content\": \"You are a movie recommendation system.\"},\n            {\"role\": \"user\", \"content\": f\"Answer this user query: {query} with the following context:\\n{search_results_df}\"}\n        ]\n    )\n\n    system_response = completion.choices[0].message.content\n\n    print(f\"- User Question:\\n{query}\\n\")\n    print(f\"- System Response:\\n{system_response}\\n\")\n\n    return system_response\n```", "```py\nquery = \"\"\"\nI'm in the mood for a highly-rated action movie. Can you recommend something popular?\nInclude a reason for your recommendation.\n\"\"\"\nhandle_user_query(query, db, collection)\n```", "```py\nI recommend \"Spider-Man: No Way Home\" as a popular and highly-rated action \nmovie for you to watch. With a vote average of 8.3 and a popularity score \nof 5083.954, this film has garnered a lot of attention and positive \nreviews from audiences. \n\n\"Spider-Man: No Way Home\" is a thrilling action-packed movie that brings \ntogether multiple iterations of Spider-Man in an epic crossover event. It \noffers a blend of intense action sequences, emotional depth, and nostalgic\nmoments that fans of the superhero genre will surely enjoy. So, if you're\nin the mood for an exciting action movie with a compelling storyline and\nfantastic visual effects, \"Spider-Man: No Way Home\" is an excellent choice\nfor your movie night.\n```"]