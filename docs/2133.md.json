["```py\nimport pandas as pd\nimport numpy as np\n\ndata = {\n    'Date': ['03-25', '03-26', '03-27', '03-28', '03-29', '03-30', '03-31', '04-01', '04-02', '04-03', '04-04', '04-05'],\n    'Weekday': ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri'],\n    'Month': ['Mar', 'Mar', 'Mar', 'Mar', 'Mar', 'Mar', 'Mar', 'Apr', 'Apr', 'Apr', 'Apr', 'Apr'],\n    'Temperature': ['High', 'Low', 'High', 'Extreme', 'Low', 'High', 'High', 'Low', 'High', 'Extreme', 'High', 'Low'],\n    'Humidity': ['Dry', 'Humid', 'Dry', 'Dry', 'Humid', 'Humid', 'Dry', 'Humid', 'Dry', 'Dry', 'Humid', 'Dry'],\n    'Wind': ['No', 'Yes', 'Yes', 'Yes', 'No', 'No', 'Yes', 'No', 'Yes', 'Yes', 'No', 'Yes'],\n    'Outlook': ['sunny', 'rainy', 'overcast', 'sunny', 'rainy', 'overcast', 'sunny', 'rainy', 'sunny', 'overcast', 'sunny', 'rainy'],\n    'Crowdedness': [85, 30, 65, 45, 25, 90, 95, 35, 70, 50, 80, 45]\n}\n# Create a DataFrame from the dictionary\ndf = pd.DataFrame(data)\n```", "```py\n# 1\\. Label Encoding for Weekday\ndf['Weekday_label'] = pd.factorize(df['Weekday'])[0]\n```", "```py\n# 2\\. One-Hot Encoding for Outlook\ndf = pd.get_dummies(df, columns=['Outlook'], prefix='Outlook', dtype=int)\n```", "```py\n# 3\\. Binary Encoding for Wind\ndf['Wind_binary'] = (df['Wind'] == 'Yes').astype(int)\n```", "```py\n# 4\\. Target Encoding for Humidity\ndf['Humidity_target'] = df.groupby('Humidity')['Crowdedness'].transform('mean')\n```", "```py\n# 5\\. Ordinal Encoding for Temperature\ntemp_order = {'Low': 1, 'High': 2, 'Extreme': 3}\ndf['Temperature_ordinal'] = df['Temperature'].map(temp_order)\n```", "```py\n# 6\\. Cyclic Encoding for Month\nmonth_order = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,\n               'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}\ndf['Month_num'] = df['Month'].map(month_order)\ndf['Month_sin'] = np.sin(2 * np.pi * (df['Month_num']-1) / 12)\ndf['Month_cos'] = np.cos(2 * np.pi * (df['Month_num']-1) / 12)\n```", "```py\nimport pandas as pd\nimport numpy as np\n\n# Create a DataFrame from the dictionary\ndata = {\n    'Date': ['03-25', '03-26', '03-27', '03-28', '03-29', '03-30', '03-31', '04-01', '04-02', '04-03', '04-04', '04-05'],\n    'Weekday': ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri'],\n    'Month': ['Mar', 'Mar', 'Mar', 'Mar', 'Mar', 'Mar', 'Mar', 'Apr', 'Apr', 'Apr', 'Apr', 'Apr'],\n    'Temperature': ['High', 'Low', 'High', 'Extreme', 'Low', 'High', 'High', 'Low', 'High', 'Extreme', 'High', 'Low'],\n    'Humidity': ['Dry', 'Humid', 'Dry', 'Dry', 'Humid', 'Humid', 'Dry', 'Humid', 'Dry', 'Dry', 'Humid', 'Dry'],\n    'Wind': ['No', 'Yes', 'Yes', 'Yes', 'No', 'No', 'Yes', 'No', 'Yes', 'Yes', 'No', 'Yes'],\n    'Outlook': ['sunny', 'rainy', 'overcast', 'sunny', 'rainy', 'overcast', 'sunny', 'rainy', 'sunny', 'overcast', 'sunny', 'rainy'],\n    'Crowdedness': [85, 30, 65, 45, 25, 90, 95, 35, 70, 50, 80, 45]\n}\n\ndf = pd.DataFrame(data)\n\n# 1\\. Label Encoding for Weekday\ndf['Weekday_label'] = pd.factorize(df['Weekday'])[0]\n\n# 2\\. One-Hot Encoding for Outlook\ndf = pd.get_dummies(df, columns=['Outlook'], prefix='Outlook')\n\n# 3\\. Binary Encoding for Wind\ndf['Wind_binary'] = (df['Wind'] == 'Yes').astype(int)\n\n# 4\\. Target Encoding for Humidity\ndf['Humidity_target'] = df.groupby('Humidity')['Crowdedness'].transform('mean')\n\n# 5\\. Ordinal Encoding for Temperature\ntemp_order = {'Low': 1, 'High': 2, 'Extreme': 3}\ndf['Temperature_ordinal'] = df['Temperature'].map(temp_order)\n\n# 6\\. Cyclic Encoding for Month\nmonth_order = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,\n               'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}\ndf['Month_num'] = df['Month'].map(month_order)\ndf['Month_sin'] = np.sin(2 * np.pi * df['Month_num'] / 12)\ndf['Month_cos'] = np.cos(2 * np.pi * df['Month_num'] / 12)\n\n# Select and rearrange numerical columns\nnumerical_columns = [\n    'Date','Weekday_label',\n    'Month_sin', 'Month_cos',\n    'Temperature_ordinal',\n    'Humidity_target',\n    'Wind_binary',\n    'Outlook_sunny', 'Outlook_overcast', 'Outlook_rainy', \n    'Crowdedness'\n]\n\n# Display the rearranged numerical columns\nprint(df[numerical_columns].round(3))\n```"]