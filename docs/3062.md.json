["```py\n[\n    [0, 633, 257, 91, 412, 150, 80, 134, 259, 505, 353, 324, 70, 211, 268, 246, 121],\n    [633, 0, 390, 661, 227, 488, 572, 530, 555, 289, 282, 638, 567, 466, 420, 745, 518],\n    [257, 390, 0, 228, 169, 112, 196, 154, 372, 262, 110, 437, 191, 74, 53, 472, 142],\n    [91, 661, 228, 0, 383, 120, 77, 105, 175, 476, 324, 240, 27, 182, 239, 237, 84],\n    [412, 227, 169, 383, 0, 267, 351, 309, 338, 196, 61, 421, 346, 243, 199, 528, 297],\n    [150, 488, 112, 120, 267, 0, 63, 34, 264, 360, 208, 329, 83, 105, 123, 364, 35],\n    [80, 572, 196, 77, 351, 63, 0, 29, 232, 444, 292, 297, 47, 150, 207, 332, 29],\n    [134, 530, 154, 105, 309, 34, 29, 0, 249, 402, 250, 314, 68, 108, 165, 349, 36],\n    [259, 555, 372, 175, 338, 264, 232, 249, 0, 495, 352, 95, 189, 326, 383, 202, 236],\n    [505, 289, 262, 476, 196, 360, 444, 402, 495, 0, 154, 578, 439, 336, 240, 685, 390],\n    [353, 282, 110, 324, 61, 208, 292, 250, 352, 154, 0, 435, 287, 184, 140, 542, 238],\n    [324, 638, 437, 240, 421, 329, 297, 314, 95, 578, 435, 0, 254, 391, 448, 157, 301],\n    [70, 567, 191, 27, 346, 83, 47, 68, 189, 439, 287, 254, 0, 145, 202, 289, 55],\n    [211, 466, 74, 182, 243, 105, 150, 108, 326, 336, 184, 391, 145, 0, 57, 426, 96],\n    [268, 420, 53, 239, 199, 123, 207, 165, 383, 240, 140, 448, 202, 57, 0, 483, 153],\n    [246, 745, 472, 237, 528, 364, 332, 349, 202, 685, 542, 157, 289, 426, 483, 0, 336],\n    [121, 518, 142, 84, 297, 35, 29, 36, 236, 390, 238, 301, 55, 96, 153, 336, 0],\n]\n```", "```py\n def __init__(self, n: int):\n        \"\"\"\n        Inits the permutation problem.\n        :param n: the number variables/values\n        \"\"\"\n        self.n = n\n        shr_domains = [(0, n - 1)] * 2 * n\n        super().__init__(shr_domains)\n        self.add_propagator((list(range(n)), ALG_ALLDIFFERENT, []))\n        self.add_propagator((list(range(n, 2 * n)), ALG_ALLDIFFERENT, []))\n        for i in range(n):\n            self.add_propagator((list(range(n)) + [n + i], ALG_PERMUTATION_AUX, [i]))\n            self.add_propagator((list(range(n, 2 * n)) + [i], ALG_PERMUTATION_AUX, [i]))\n```", "```py\n def __init__(self, n: int):\n        \"\"\"\n        Inits the circuit problem.\n        :param n: the number of vertices\n        \"\"\"\n        self.n = n\n        super().__init__(n)\n        self.shr_domains_lst[0] = [1, n - 1]\n        self.shr_domains_lst[n - 1] = [0, n - 2]\n        self.shr_domains_lst[n] = [1, n - 1]\n        self.shr_domains_lst[2 * n - 1] = [0, n - 2]\n        self.add_propagator((list(range(n)), ALG_NO_SUB_CYCLE, []))\n        self.add_propagator((list(range(n, 2 * n)), ALG_NO_SUB_CYCLE, []))\n```", "```py\nself.add_propagators([([i, self.succ_costs + i], ALG_ELEMENT_IV, costs[i]) for i in range(n)])\n```", "```py\nself.add_propagators([([n + i, self.pred_costs + i], ALG_ELEMENT_IV, costs[i]) for i in range(n)])\n```", "```py\n def __init__(self, costs: List[List[int]]) -> None:\n        \"\"\"\n        Inits the problem.\n        :param costs: the costs between vertices as a list of lists of integers\n        \"\"\"\n        n = len(costs)\n        super().__init__(n)\n        max_costs = [max(cost_row) for cost_row in costs]\n        min_costs = [min([cost for cost in cost_row if cost > 0]) for cost_row in costs]\n        self.succ_costs = self.add_variables([(min_costs[i], max_costs[i]) for i in range(n)])\n        self.pred_costs = self.add_variables([(min_costs[i], max_costs[i]) for i in range(n)])\n        self.total_cost = self.add_variable((sum(min_costs), sum(max_costs)))  # the total cost\n        self.add_propagators([([i, self.succ_costs + i], ALG_ELEMENT_IV, costs[i]) for i in range(n)])\n        self.add_propagators([([n + i, self.pred_costs + i], ALG_ELEMENT_IV, costs[i]) for i in range(n)])\n        self.add_propagator(\n            (list(range(self.succ_costs, self.succ_costs + n)) + [self.total_cost], ALG_AFFINE_EQ, [1] * n + [-1, 0])\n        )\n        self.add_propagator(\n            (list(range(self.pred_costs, self.pred_costs + n)) + [self.total_cost], ALG_AFFINE_EQ, [1] * n + [-1, 0])\n        )\n```", "```py\nsolver = BacktrackSolver(problem, decision_domains=decision_domains)\nsolution = solver.minimize(problem.total_cost)\n```", "```py\n{\n    'ALG_BC_NB': 16141979,\n    'ALG_BC_WITH_SHAVING_NB': 0,\n    'ALG_SHAVING_NB': 0,\n    'ALG_SHAVING_CHANGE_NB': 0,\n    'ALG_SHAVING_NO_CHANGE_NB': 0,\n    'PROPAGATOR_ENTAILMENT_NB': 136986225,\n    'PROPAGATOR_FILTER_NB': 913725313,\n    'PROPAGATOR_FILTER_NO_CHANGE_NB': 510038945,\n    'PROPAGATOR_INCONSISTENCY_NB': 8070394,\n    'SOLVER_BACKTRACK_NB': 8070393,\n    'SOLVER_CHOICE_NB': 8071487,\n    'SOLVER_CHOICE_DEPTH': 15,\n    'SOLVER_SOLUTION_NB': 98\n}\n```", "```py\nsolver = BacktrackSolver(\n  problem, \n  decision_domains=decision_domains,\n  var_heuristic_idx=VAR_HEURISTIC_MAX_REGRET,\n  var_heuristic_params=costs,\n  dom_heuristic_idx=DOM_HEURISTIC_MIN_COST,\n  dom_heuristic_params=costs\n)\nsolution = solver.minimize(problem.total_cost)\n```", "```py\n{\n    'ALG_BC_NB': 2673045,\n    'ALG_BC_WITH_SHAVING_NB': 0,\n    'ALG_SHAVING_NB': 0,\n    'ALG_SHAVING_CHANGE_NB': 0,\n    'ALG_SHAVING_NO_CHANGE_NB': 0,\n    'PROPAGATOR_ENTAILMENT_NB': 12295905,\n    'PROPAGATOR_FILTER_NB': 125363225,\n    'PROPAGATOR_FILTER_NO_CHANGE_NB': 69928021,\n    'PROPAGATOR_INCONSISTENCY_NB': 1647125,\n    'SOLVER_BACKTRACK_NB': 1647124,\n    'SOLVER_CHOICE_NB': 1025875,\n    'SOLVER_CHOICE_DEPTH': 36,\n    'SOLVER_SOLUTION_NB': 45\n}\n```", "```py\ntsp_var_heuristic_idx = register_var_heuristic(tsp_var_heuristic)\nsolver = BacktrackSolver(\n  problem, \n  decision_domains=decision_domains,\n  var_heuristic_idx=tsp_var_heuristic_idx,\n  var_heuristic_params=costs,\n  dom_heuristic_idx=DOM_HEURISTIC_MIN_COST,\n  dom_heuristic_params=costs\n)\nsolution = solver.minimize(problem.total_cost)\n```", "```py\n{\n    'ALG_BC_NB': 660718,\n    'ALG_BC_WITH_SHAVING_NB': 0,\n    'ALG_SHAVING_NB': 0,\n    'ALG_SHAVING_CHANGE_NB': 0,\n    'ALG_SHAVING_NO_CHANGE_NB': 0,\n    'PROPAGATOR_ENTAILMENT_NB': 3596146,\n    'PROPAGATOR_FILTER_NB': 36847171,\n    'PROPAGATOR_FILTER_NO_CHANGE_NB': 20776276,\n    'PROPAGATOR_INCONSISTENCY_NB': 403024,\n    'SOLVER_BACKTRACK_NB': 403023,\n    'SOLVER_CHOICE_NB': 257642,\n    'SOLVER_CHOICE_DEPTH': 33,\n    'SOLVER_SOLUTION_NB': 52\n}\n```", "```py\n solution = solver.minimize(problem.total_cost, mode=PRUNE)\n```", "```py\n{\n    'ALG_BC_NB': 255824,\n    'ALG_BC_WITH_SHAVING_NB': 0,\n    'ALG_SHAVING_NB': 0,\n    'ALG_SHAVING_CHANGE_NB': 0,\n    'ALG_SHAVING_NO_CHANGE_NB': 0,\n    'PROPAGATOR_ENTAILMENT_NB': 1435607,\n    'PROPAGATOR_FILTER_NB': 14624422,\n    'PROPAGATOR_FILTER_NO_CHANGE_NB': 8236378,\n    'PROPAGATOR_INCONSISTENCY_NB': 156628,\n    'SOLVER_BACKTRACK_NB': 156627,\n    'SOLVER_CHOICE_NB': 99143,\n    'SOLVER_CHOICE_DEPTH': 34,\n    'SOLVER_SOLUTION_NB': 53\n}\n```"]