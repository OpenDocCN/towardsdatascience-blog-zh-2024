["```py\nWITH customer_spending AS (\nSELECT\n branch_id,\n FORMAT_DATE('%G-%V', DATE(transaction_timestamp)) AS week_of_year,\n customer_id,\n SUM(transaction_value) AS total_amount_spent_eur\nFROM `project.dataset.credit_transactions`\nWHERE 1=1\n AND transaction_date BETWEEN '2024-05-01' AND '2024-07-31'\n AND branch_id LIKE 'Germany'\nGROUP BY branch_id, week_of_year, customer_id\n)\n, agg_per_week AS (\nSELECT\n branch_id,\n week_of_year,\n ROUND(AVG(total_amount_spent_eur), 1) AS avg_amount_spent_eur_per_customer,\nFROM customer_spending\nGROUP BY branch_id, week_of_year\n)\nSELECT *\nFROM agg_per_week\nORDER BY 1,2;\n```", "```py\nWITH customer_spending AS (\nSELECT\n branch_id,\n FORMAT_DATE('%G-%V', DATE(transaction_timestamp)) AS week_of_year,\n customer_id,\n SUM(transaction_value) AS total_amount_spent_eur\nFROM `project.dataset.credit_transactions`\nWHERE 1=1\n AND transaction_date BETWEEN '2024-05-01' AND '2024-07-31'\n AND branch_id LIKE 'Germany'\nGROUP BY branch_id, week_of_year, customer_id\n)\n, agg_per_week AS (\nSELECT\n branch_id,\n week_of_year,\n ROUND(AVG(total_amount_spent_eur), 1) AS avg_amount_spent_eur_per_customer,\nFROM customer_spending\nGROUP BY branch_id, week_of_year\n)\nSELECT\n ROUND(AVG(avg_amount_spent_eur_per_customer),1) AS avg_amount_spent_eur_per_customer_per_week,\n ROUND(VAR_POP(avg_amount_spent_eur_per_customer),1) AS variance_avg_amount_spent_eur_per_customer\nFROM agg_per_week\nORDER BY 1,2;\n```", "```py\nn = (2 * 145.8 * (1.96+0.84)^2) / (54.5-49.5)^2\n-> n = 291.6 * 7.84 / 25\n-> n = 2286.1 / 25\n-> n =~ 92\n```", "```py\nn = (2 * 145.8 * (1.96+0.84)^2) / (50.5-49.5)^2\n-> n = 291.6 * 7.84 / 1\n-> n = 2286.1 / 1\n-> n =~ 2287\n```", "```py\nn = (2 * 145.8 * (1.96+1.28)^2) / (50.5-49.5)^2\n-> n = 291.6 * 10.49 / 1\n-> n = 3061.1 / 1\n-> n =~ 3062\n```", "```py\nWITH customer_volume AS (\nSELECT\n branch_id,\n FORMAT_DATE('%G-%V', DATE(transaction_timestamp)) AS week_of_year,\n COUNT(DISTINCT customer_id) AS cntd_customers\nFROM `project.dataset.credit_transactions`\nWHERE 1=1\n AND transaction_date BETWEEN '2024-05-01' AND '2024-07-31'\n AND branch_id LIKE 'Germany'\nGROUP BY branch_id, week_of_year\n)\nSELECT\n ROUND(AVG(cntd_customers),1) AS avg_cntd_customers\nFROM customer_volume;\n```", "```py\nSELECT\n branch_id,\n date_trunc(transaction_date, week) AS week_of_order,\n SUM(transaction_value) AS sum_disbursed_gmv,\n SUM(CASE WHEN is_completed THEN transaction_value ELSE 0 END) AS sum_collected_gmv,\n 1-(SUM(CASE WHEN is_completed THEN transaction_value ELSE 0 END)/SUM(transaction_value)) AS default_rate,\nFROM `project.dataset.credit_transactions`\nWHERE transaction_date BETWEEN '2024-02-01' AND '2024-04-30'\n  AND branch_id = 'Germany'\nGROUP BY 1,2\nORDER BY 1,2;\n```", "```py\nn = ( ((1.96+0.84)^2) * ((0.070*(1-0.070) + 0.075*(1-0.075)) ) / ( (0.070-0.075)^2 )\n-> n = 7.84 * 0.134475 / 0.000025\n-> n = 1.054284 / 0.000025\n-> n =~ 42,171\n```", "```py\nn = ( ((1.96+0.84)^2) * ((0.23*(1-0.23) + 0.2466*(1-0.2466)) ) / ( (0.2466-0.23)^2 )\n-> n = 7.84 * 0.3628 / 0.00027556\n-> n = 2.8450 / 0.00027556\n-> n =~ 10,325\n```", "```py\nn = ( (1.96 * 30) / 10 )^2\n-> n = (58.8/10)^2\n-> n = 35\n```", "```py\nn = 35/0.01\n-> n = 3500\n```", "```py\nZalpha/2= 1.96 \n-> (Zalpha/2)^2= 3.8416\nE = 0.00025\n-> E^2 = 0.0000000625\np = 0.001\n\nn =( 3.8416 * 0.001 * (1 - 0.001) ) / 0.0000000625\n-> n = 0.0038377584 / 0.0000000625\n-> n = 61,404\n```", "```py\nimport math\n\ndef sample_size_comparing_two_means(variance, z_alpha, z_beta, delta):\n   return math.ceil((2 * variance * (z_alpha + z_beta) ** 2) / (delta ** 2))\n\ndef sample_size_comparing_two_proportions(p1, p2, z_alpha, z_beta):\n   numerator = (z_alpha + z_beta) ** 2 * ((p1 * (1 - p1)) + (p2 * (1 - p2)))\n   denominator = (p1 - p2) ** 2\n   return math.ceil(numerator / denominator)\n\ndef sample_size_estimating_mean(variance, z_alpha, margin_of_error):\n   sigma = variance ** 0.5\n   return math.ceil((z_alpha * sigma / margin_of_error) ** 2)\n\ndef sample_size_estimating_proportion(p, z_alpha, margin_of_error):\n   return math.ceil((z_alpha ** 2 * p * (1 - p)) / (margin_of_error ** 2))\n```", "```py\nvariance = 145.8\nz_alpha = 1.96\nz_beta = 0.84\ndelta = 5\n\nsample_size_comparing_two_means(\n    variance=variance, \n    z_alpha=z_alpha, \n    z_beta=z_beta, \n    delta=delta\n)\n# OUTPUT: 92\n```"]