["```py\npip install pyautogen\n```", "```py\nfrom IPython.display import HTML, display\n\ndef set_css():\n  display(HTML('''\n  <style>\n    pre {\n        white-space: pre-wrap;\n    }\n  </style>\n  '''))\nget_ipython().events.register('pre_run_cell', set_css)\n```", "```py\nimport json\nimport os\nimport autogen\nfrom autogen import GroupChat, Agent\nfrom typing import Optional\n\n# Setup LLM model and API keys\nos.environ[\"OAI_CONFIG_LIST\"] = json.dumps([\n    {\n        'model': 'gpt-3.5-turbo',\n        'api_key': '<<Put your Open-AI Key here>>',\n    }\n])\n\n# Setting configurations for autogen\nconfig_list = autogen.config_list_from_json(\n    \"OAI_CONFIG_LIST\",\n    filter_dict={\n        \"model\": {\n            \"gpt-3.5-turbo\"\n        }\n    }\n)\n```", "```py\n# Define the LLM configuration settings\nllm_config = {\n    # Seed for consistent output, used for testing. Remove in production.\n    # \"seed\": 42,\n    \"cache_seed\": None,\n    # Setting cache_seed = None ensure's caching is disabled\n    \"temperature\": 0.5,\n    \"config_list\": config_list,\n}\n```", "```py\n# Avoid agents thanking each other and ending up in a loop\n# Helper agent for the system prompts\ndef generate_notice(role=\"researcher\"):\n    # Base notice for everyone, add your own additional prompts here\n    base_notice = (\n        '\\n\\n'\n    )\n\n    # Notice for non-personas (manager or researcher)\n    non_persona_notice = (\n        'Do not show appreciation in your responses, say only what is necessary. '\n        'if \"Thank you\" or \"You\\'re welcome\" are said in the conversation, then say TERMINATE '\n        'to indicate the conversation is finished and this is your last message.'\n    )\n\n    # Custom notice for personas\n    persona_notice = (\n        ' Act as {role} when responding to queries, providing feedback, asked for your personal opinion '\n        'or participating in discussions.'\n    )\n\n    # Check if the role is \"researcher\"\n    if role.lower() in [\"manager\", \"researcher\"]:\n        # Return the full termination notice for non-personas\n        return base_notice + non_persona_notice\n    else:\n        # Return the modified notice for personas\n        return base_notice + persona_notice.format(role=role)\n```", "```py\n# Researcher agent definition\nname = \"Researcher\"\nresearcher = autogen.AssistantAgent(\n    name=name,\n    llm_config=llm_config,\n    system_message=\"\"\"Researcher. You are a top product reasearcher with a Phd in behavioural psychology and have worked in the research and insights industry for the last 20 years with top creative, media and business consultancies. Your role is to ask questions about products and gather insights from individual customers like Emily. Frame questions to uncover customer preferences, challenges, and feedback. Before you start the task breakdown the list of panelists and the order you want them to speak, avoid the panelists speaking with each other and creating comfirmation bias. If the session is terminating at the end, please provide a summary of the outcomes of the reasearch study in clear concise notes not at the start.\"\"\" + generate_notice(),\n    is_termination_msg=lambda x: True if \"TERMINATE\" in x.get(\"content\") else False,\n)\n```", "```py\n# Emily - Customer Persona\nname = \"Emily\"\nemily = autogen.AssistantAgent(\n    name=name,\n    llm_config=llm_config,\n    system_message=\"\"\"Emily. You are a 35-year-old elementary school teacher living in Sydney, Australia. You are married with two kids aged 8 and 5, and you have an annual income of AUD 75,000\\. You are introverted, high in conscientiousness, low in neuroticism, and enjoy routine. When shopping at the supermarket, you prefer organic and locally sourced produce. You value convenience and use an online shopping platform. Due to your limited time from work and family commitments, you seek quick and nutritious meal planning solutions. Your goals are to buy high-quality produce within your budget and to find new recipe inspiration. You are a frequent shopper and use loyalty programs. Your preferred methods of communication are email and mobile app notifications. You have been shopping at a supermarket for over 10 years but also price-compare with others.\"\"\" + generate_notice(name),\n)\n\n# John - Customer Persona\nname=\"John\"\njohn = autogen.AssistantAgent(\n    name=name,\n    llm_config=llm_config,\n    system_message=\"\"\"John. You are a 28-year-old software developer based in Sydney, Australia. You are single and have an annual income of AUD 100,000\\. You're extroverted, tech-savvy, and have a high level of openness. When shopping at the supermarket, you primarily buy snacks and ready-made meals, and you use the mobile app for quick pickups. Your main goals are quick and convenient shopping experiences. You occasionally shop at the supermarket and are not part of any loyalty program. You also shop at Aldi for discounts. Your preferred method of communication is in-app notifications.\"\"\" + generate_notice(name),\n)\n\n# Sarah - Customer Persona\nname=\"Sarah\"\nsarah = autogen.AssistantAgent(\n    name=name,\n    llm_config=llm_config,\n    system_message=\"\"\"Sarah. You are a 45-year-old freelance journalist living in Sydney, Australia. You are divorced with no kids and earn AUD 60,000 per year. You are introverted, high in neuroticism, and very health-conscious. When shopping at the supermarket, you look for organic produce, non-GMO, and gluten-free items. You have a limited budget and specific dietary restrictions. You are a frequent shopper and use loyalty programs. Your preferred method of communication is email newsletters. You exclusively shop for groceries.\"\"\" + generate_notice(name),\n)\n\n# Tim - Customer Persona\nname=\"Tim\"\ntim = autogen.AssistantAgent(\n    name=name,\n    llm_config=llm_config,\n    system_message=\"\"\"Tim. You are a 62-year-old retired police officer residing in Sydney, Australia. You are married and a grandparent of three. Your annual income comes from a pension and is AUD 40,000\\. You are highly conscientious, low in openness, and prefer routine. You buy staples like bread, milk, and canned goods in bulk. Due to mobility issues, you need assistance with heavy items. You are a frequent shopper and are part of the senior citizen discount program. Your preferred method of communication is direct mail flyers. You have been shopping here for over 20 years.\"\"\" + generate_notice(name),\n)\n\n# Lisa - Customer Persona\nname=\"Lisa\"\nlisa = autogen.AssistantAgent(\n    name=name,\n    llm_config=llm_config,\n    system_message=\"\"\"Lisa. You are a 21-year-old university student living in Sydney, Australia. You are single and work part-time, earning AUD 20,000 per year. You are highly extroverted, low in conscientiousness, and value social interactions. You shop here for popular brands, snacks, and alcoholic beverages, mostly for social events. You have a limited budget and are always looking for sales and discounts. You are not a frequent shopper but are interested in joining a loyalty program. Your preferred method of communication is social media and SMS. You shop wherever there are sales or promotions.\"\"\" + generate_notice(name),\n)\n```", "```py\n# def custom_speaker_selection(last_speaker, group_chat):\n#     \"\"\"\n#     Custom function to select which agent speaks next in the group chat.\n#     \"\"\"\n#     # List of agents excluding the last speaker\n#     next_candidates = [agent for agent in group_chat.agents if agent.name != last_speaker.name]\n\n#     # Select the next agent based on your custom logic\n#     # For simplicity, we're just rotating through the candidates here\n#     next_speaker = next_candidates[0] if next_candidates else None\n\n#     return next_speaker\n\ndef custom_speaker_selection(last_speaker: Optional[Agent], group_chat: GroupChat) -> Optional[Agent]:\n    \"\"\"\n    Custom function to ensure the Researcher interacts with each participant 2-3 times.\n    Alternates between the Researcher and participants, tracking interactions.\n    \"\"\"\n    # Define participants and initialize or update their interaction counters\n    if not hasattr(group_chat, 'interaction_counters'):\n        group_chat.interaction_counters = {agent.name: 0 for agent in group_chat.agents if agent.name != \"Researcher\"}\n\n    # Define a maximum number of interactions per participant\n    max_interactions = 6\n\n    # If the last speaker was the Researcher, find the next participant who has spoken the least\n    if last_speaker and last_speaker.name == \"Researcher\":\n        next_participant = min(group_chat.interaction_counters, key=group_chat.interaction_counters.get)\n        if group_chat.interaction_counters[next_participant] < max_interactions:\n            group_chat.interaction_counters[next_participant] += 1\n            return next((agent for agent in group_chat.agents if agent.name == next_participant), None)\n        else:\n            return None  # End the conversation if all participants have reached the maximum interactions\n    else:\n        # If the last speaker was a participant, return the Researcher for the next turn\n        return next((agent for agent in group_chat.agents if agent.name == \"Researcher\"), None)\n```", "```py\n# Adding the Researcher and Customer Persona agents to the group chat\ngroupchat = autogen.GroupChat(\n    agents=[researcher, emily, john, sarah, tim, lisa],\n    speaker_selection_method = custom_speaker_selection,\n    messages=[],\n    max_round=30\n)\n```", "```py\n# Initialise the manager\nmanager = autogen.GroupChatManager(\n    groupchat=groupchat,\n    llm_config=llm_config,\n    system_message=\"You are a reasearch manager agent that can manage a group chat of multiple agents made up of a reasearcher agent and many people made up of a panel. You will limit the discussion between the panelists and help the researcher in asking the questions. Please ask the researcher first on how they want to conduct the panel.\" + generate_notice(),\n    is_termination_msg=lambda x: True if \"TERMINATE\" in x.get(\"content\") else False,\n)\n```", "```py\n# create a UserProxyAgent instance named \"user_proxy\"\nuser_proxy = autogen.UserProxyAgent(\n    name=\"user_proxy\",\n    code_execution_config={\"last_n_messages\": 2, \"work_dir\": \"groupchat\"},\n    system_message=\"A human admin.\",\n    human_input_mode=\"TERMINATE\"\n)\n```", "```py\n# start the reasearch simulation by giving instruction to the manager\n# manager <-> reasearcher <-> panelists\nuser_proxy.initiate_chat(\n    manager,\n    message=\"\"\"\nGather customer insights on a supermarket grocery delivery services. Identify pain points, preferences, and suggestions for improvement from different customer personas. Could you all please give your own personal oponions before sharing more with the group and discussing. As a reasearcher your job is to ensure that you gather unbiased information from the participants and provide a summary of the outcomes of this study back to the super market brand.\n\"\"\",\n)\n```", "```py\n# Get response from the groupchat for user prompt\nmessages = [msg[\"content\"] for msg in groupchat.messages]\nuser_prompt = \"Here is the transcript of the study ```", "```py\".format(customer_insights=\"\\n>>>\\n\".join(messages))\n```", "```py\n# Generate system prompt for the summary agent\nsummary_prompt = \"\"\"\nYou are an expert reasearcher in behaviour science and are tasked with summarising a reasearch panel. Please provide a structured summary of the key findings, including pain points, preferences, and suggestions for improvement.\nThis should be in the format based on the following format:\n\n```", "```py\n\"\"\"\n```", "```py\nsummary_agent = autogen.AssistantAgent(\n    name=\"SummaryAgent\",\n    llm_config=llm_config,\n    system_message=summary_prompt + generate_notice(),\n)\nsummary_proxy = autogen.UserProxyAgent(\n    name=\"summary_proxy\",\n    code_execution_config={\"last_n_messages\": 2, \"work_dir\": \"groupchat\"},\n    system_message=\"A human admin.\",\n    human_input_mode=\"TERMINATE\"\n)\nsummary_proxy.initiate_chat(\n    summary_agent,\n    message=user_prompt,\n)\n```"]