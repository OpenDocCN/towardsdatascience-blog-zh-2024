["```py\npip install XPER\n```", "```py\nimport XPER\nimport pandas as pd\n```", "```py\nimport XPER\nfrom XPER.datasets.load_data import loan_status\nloan = loan_status().iloc[:, :6]\n\ndisplay(loan.head())\ndisplay(loan.shape)\n```", "```py\n# Remove 'Loan_Status' column from 'loan' dataframe and assign it to 'X'\nX = loan.drop(columns='Loan_Status')\n\n# Create a new dataframe 'Y' containing only the 'Loan_Status' column from 'loan' dataframe\nY = pd.Series(loan['Loan_Status'])\n```", "```py\nfrom sklearn.model_selection import train_test_split\n\n# Split the data into training and testing sets\n# X: input features\n# Y: target variable\n# test_size: the proportion of the dataset to include in the testing set (in this case, 15%)\n# random_state: the seed value used by the random number generator for reproducible results\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.15, random_state=3)\n\nimport xgboost as xgb\n\n# Create an XGBoost classifier object\ngridXGBOOST = xgb.XGBClassifier(eval_metric=\"error\")\n\n# Train the XGBoost classifier on the training data\nmodel = gridXGBOOST.fit(X_train, y_train)\n```", "```py\nfrom XPER.compute.Performance import ModelPerformance\n\n# Define the evaluation metric(s) to be used\nXPER = ModelPerformance(X_train.values, \n                        y_train.values, \n                        X_test.values, \n                        y_test.values, \n                        model)\n\n# Evaluate the model performance using the specified metric(s)\nPM = XPER.evaluate([\"AUC\"])\n\n# Print the performance metrics\nprint(\"Performance Metrics: \", round(PM, 3))\n```", "```py\n# Calculate XPER values for the model's performance\nXPER_values = XPER.calculate_XPER_values([\"AUC\"],kernel=False)\n```", "```py\nfrom XPER.viz.Visualisation import visualizationClass as viz\n\nlabels = list(loan.drop(columns='Loan_Status').columns)\n```", "```py\nviz.bar_plot(XPER_values=XPER_values, X_test=X_test, labels=labels, p=5,percentage=True)\n```", "```py\nviz.force_plot(XPER_values=XPER_values, instance=1, X_test=X_test, variable_name=labels, figsize=(16,4))\n```", "```py\nviz.beeswarn_plot(XPER_values=XPER_values,X_test=X_test,labels=labels)\n```"]