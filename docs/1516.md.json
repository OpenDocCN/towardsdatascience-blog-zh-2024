["```py\nassistant = client.beta.assistants.create(\n  name=\"Data visualizer\",\n  description=\"You are great at creating beautiful data visualizations. You analyze data present in .csv files, understand trends, and come up with data visualizations relevant to those trends. You also share a brief text summary of the trends observed.\",\n  model=\"gpt-4o\",\n  tools=[{\"type\": \"code_interpreter\"}],\n)\n```", "```py\ndef calculate_tax(revenue: str):\n    try:\n        revenue = float(revenue)\n    except ValueError:\n        raise ValueError(\"The revenue should be a string representation of a number.\")\n\n    if revenue <= 10000:\n        tax = 0\n    elif revenue <= 30000:\n        tax = 0.10 * (revenue - 10000)\n    elif revenue <= 70000:\n        tax = 2000 + 0.20 * (revenue - 30000)\n    elif revenue <= 150000:\n        tax = 10000 + 0.30 * (revenue - 70000)\n    else:\n        tax = 34000 + 0.40 * (revenue - 150000)\n\n    return tax\n```", "```py\nfunction_tools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"calculate_tax\",\n            \"description\": \"Get the tax for given revenue in euro\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"revenue\": {\n                        \"type\": \"string\",\n                        \"description\": \"Annual revenue in euro\"\n                    }\n                },\n                \"required\": [\"revenue\"]\n            }\n        }\n    }\n]\n# Define the assistant\nassistant = client.beta.assistants.create(\n    name=\"Assistant\",\n    instructions=\"\",\n    tools=function_tools,\n    model=\"gpt-4o\",\n)\n```", "```py\n def handle_requires_action(self, data, run_id):\n        tool_outputs = []\n\n        for tool in data.required_action.submit_tool_outputs.tool_calls:\n            if tool.function.name == \"calculate_tax\":\n                try:\n                    # Extract revenue from tool parameters\n                    revenue = ast.literal_eval(tool.function.arguments)[\"revenue\"]\n                    # Call your calculate_tax function to get the tax\n                    tax_result = calculate_tax(revenue)\n                    # Append tool output in the required format\n                    tool_outputs.append({\"tool_call_id\": tool.id, \"output\": f\"{tax_result}\"})\n                except ValueError as e:\n                    # Handle any errors when calculating tax\n                    tool_outputs.append({\"tool_call_id\": tool.id, \"error\": str(e)})\n        # Submit all tool_outputs at the same time\n        self.submit_tool_outputs(tool_outputs)\n```", "```py\n with client.beta.threads.runs.stream(thread_id=st.session_state.thread_id,\n                                         assistant_id=assistant.id,\n                                         event_handler=EventHandler(),\n                                         temperature=0) as stream:\n        stream.until_done()\n```", "```py\ndef on_text_delta(self, delta: TextDelta, snapshot: Text):\n    \"\"\"\n    Handler for when a text delta is created\n    \"\"\"\n    # Clear the latest text box\n    st.session_state.text_boxes[-1].empty()\n\n    # If there is new text, append it to the latest element in the assistant text list\n    if delta.value:\n        st.session_state.assistant_text[-1] += delta.value\n\n    # Re-display the updated assistant text in the latest text box\n    st.session_state.text_boxes[-1].info(\"\".join(st.session_state[\"assistant_text\"][-1]))\n```"]