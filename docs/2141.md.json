["```py\nfruit = dict(\n  name=\"apple\",\n  color=\"red\",\n  weight=4.2\n)\n```", "```py\ndef extract_fruit(s):\n  ...\n  return fruit\n```", "```py\nclass Fruit(BaseModel):\n    name: str\n    color: Literal['red', 'green']\n    weight: Annotated[float, Gt(0)]\n\ndef extract_fruit(s: str) -> Fruit:\n  ...\n  return fruit\n```", "```py\nclass NewsArticle(BaseModel):\n  headline: str\n  subheading: str\n  authors: List[str]\n  date_published: datetime = Field(None, description=\"Date when article was published. Use ISO 8601 date format.\")\n```", "```py\nclass Webpage(BaseModel):\n    title: str\n    paragraphs: Optional[List[str]] = Field(None, description=\"Text contents enclosed within <p></p> tags.\")\n    links: Optional[List[str]] = Field(None, description=\"URLs specified by `href` field within <a></a> tags.\")\n    images: Optional[List[str]] = Field(None, description=\"URLs specified by the `src` field within the <img></img> tags.\")\n```", "```py\nresponse = client.beta.chat.completions.parse(\n    model=\"gpt-4o-2024-08-06\",\n    messages=[\n        {\n            \"role\": \"system\",\n            \"content\": \"You are to parse HTML and return the parsed page components.\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"\"\"\n            <html>\n            <title>Structured Outputs Demo</title>\n            <body>\n            <img src=\"test.gif\"></image>\n            <p>Hello world!</p>\n            </body>\n            </html>\n            \"\"\"\n        }\n    ],\n    response_format=Webpage\n)\n```", "```py\n{\n  'images': ['test.gif'],\n  'links': None,\n  'paragraphs': ['Hello world!'],\n  'title': 'Structured Outputs Demo'\n}\n```", "```py\nclass Rank(IntEnum):\n    RANK_1 = 1\n    RANK_2 = 2\n    RANK_3 = 3\n    RANK_4 = 4\n    RANK_5 = 5\n\nclass RerankingResult(BaseModel):\n    ordered_ranking: List[Rank] = Field(description=\"Provides ordered ranking 1-5.\")\n```", "```py\nresponse = client.beta.chat.completions.parse(\n    model=\"gpt-4o-2024-08-06\",\n    messages=[\n        {\n            \"role\": \"system\",\n            \"content\": \"\"\"\n            You are to rank the similarity of the candidate products against the target product.\n            Ranking should be orderly, from the most similar, to the least similar.\n            \"\"\"\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"\"\"\n            ## Target Product\n            Product ID: X56HHGHH\n            Product Description: 80\" Samsung LED TV\n\n            ## Candidate Products\n            Product ID: 125GHJJJGH\n            Product Description: NVIDIA RTX 4060 GPU\n\n            Product ID: 76876876GHJ\n            Product Description: Sony Walkman\n\n            Product ID: 433FGHHGG\n            Product Description: Sony LED TV 56\"\n\n            Product ID: 777888887888\n            Product Description: Blueray Sony Player\n\n            Product ID: JGHHJGJ56\n            Product Description: BenQ PC Monitor 37\" 4K UHD\n            \"\"\"\n        }\n    ],\n    response_format=RerankingResult\n)\n```", "```py\n{'ordered_ranking': [3, 5, 1, 4, 2]}\n```"]