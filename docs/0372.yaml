- en: How to Store and Query 100 Million Items Using Just 77MB with Python Bloom Filters
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Python 布隆过滤器仅用 77MB 存储和查询 1 亿项数据
- en: 原文：[https://towardsdatascience.com/how-to-store-and-query-100-million-items-using-just-77mb-with-python-bloom-filters-6b3e8549f032?source=collection_archive---------2-----------------------#2024-02-08](https://towardsdatascience.com/how-to-store-and-query-100-million-items-using-just-77mb-with-python-bloom-filters-6b3e8549f032?source=collection_archive---------2-----------------------#2024-02-08)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-store-and-query-100-million-items-using-just-77mb-with-python-bloom-filters-6b3e8549f032?source=collection_archive---------2-----------------------#2024-02-08](https://towardsdatascience.com/how-to-store-and-query-100-million-items-using-just-77mb-with-python-bloom-filters-6b3e8549f032?source=collection_archive---------2-----------------------#2024-02-08)
- en: Perform lightning-fast, memory efficient membership checks in Python with this
    need-to-know data structure
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用这个必备的数据结构，在 Python 中执行极速且内存高效的成员资格检查
- en: '[](https://mikehuls.medium.com/?source=post_page---byline--6b3e8549f032--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page---byline--6b3e8549f032--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--6b3e8549f032--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--6b3e8549f032--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page---byline--6b3e8549f032--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://mikehuls.medium.com/?source=post_page---byline--6b3e8549f032--------------------------------)[![Mike
    Huls](../Images/8f9f55a0d25db00799c5d37383b7f5b6.png)](https://mikehuls.medium.com/?source=post_page---byline--6b3e8549f032--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--6b3e8549f032--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--6b3e8549f032--------------------------------)
    [Mike Huls](https://mikehuls.medium.com/?source=post_page---byline--6b3e8549f032--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--6b3e8549f032--------------------------------)
    ·11 min read·Feb 8, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--6b3e8549f032--------------------------------)
    ·阅读时长 11 分钟·2024年2月8日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/97200918356e1b6e481565d52747e46a.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/97200918356e1b6e481565d52747e46a.png)'
- en: Programming with a view (image by ChatGPT)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 带有视图的编程（图片来源：ChatGPT）
- en: 'A Bloom filter is a super-fast, memory-efficient data structure with many use-cases.
    The Bloom filter answers a simple question: does a set contain a given value?
    A good Bloom filter can contain 100 million items, use only 77MB of memory and
    still be lightning fast. It achieves this incredible efficiency by being probabilistic:
    when you ask if it contains an item, it can respond in two ways: **definitely
    not** or **maybe yes**.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 布隆过滤器是一种超级快速、内存高效的数据结构，具有多种应用场景。布隆过滤器回答一个简单的问题：一个集合是否包含某个给定的值？一个好的布隆过滤器可以包含
    1 亿项数据，使用仅 77MB 的内存，并且依然非常快速。它通过概率方式实现了这一惊人的效率：当你问它是否包含某个项时，它有两种回应方式：**绝对不包含**或**可能包含**。
- en: A Bloom filter can either tell you **with certainty** that an item is **not**
    a member of a set, or that it **probably is**
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 布隆过滤器可以告诉你**肯定**某个项**不**是集合的成员，或者它**可能是**集合的成员
- en: In this article we’ll find out how a Bloom filter works, how to implement one,
    and we’ll go through some practical use cases. In the end you’ll have a new tool
    in your belt to optimize your scripts significantly! Let’s code!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将了解布隆过滤器的工作原理，如何实现一个布隆过滤器，并且将讨论一些实际的使用案例。最后，你将拥有一个新的工具，可以显著优化你的脚本！让我们开始编码吧！
- en: Before we begin..
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们开始之前……
- en: 'This article explores the mechanics of a Bloom Filter and provides a basic
    Python implementation to illustrate its inner workings in 6 steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本文探讨了布隆过滤器的机制，并提供了一个基本的 Python 实现，展示其内部工作原理，共分 6 步：
- en: When to use a Bloom filter? Characteristics and use cases
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么时候使用布隆过滤器？特点和应用场景
