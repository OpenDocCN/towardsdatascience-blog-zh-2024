- en: Custom pre-commit hooks for safer code changes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为了更安全的代码更改创建自定义预提交钩子
- en: 原文：[https://towardsdatascience.com/custom-pre-commit-hooks-for-safer-code-changes-d8b8aa1b2ebb?source=collection_archive---------5-----------------------#2024-03-14](https://towardsdatascience.com/custom-pre-commit-hooks-for-safer-code-changes-d8b8aa1b2ebb?source=collection_archive---------5-----------------------#2024-03-14)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/custom-pre-commit-hooks-for-safer-code-changes-d8b8aa1b2ebb?source=collection_archive---------5-----------------------#2024-03-14](https://towardsdatascience.com/custom-pre-commit-hooks-for-safer-code-changes-d8b8aa1b2ebb?source=collection_archive---------5-----------------------#2024-03-14)
- en: A step-by-step guide on writing your first pre-commit hook
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写你的第一个预提交钩子的逐步指南
- en: '[](https://medium.com/@thijean?source=post_page---byline--d8b8aa1b2ebb--------------------------------)[![Thierry
    Jean](../Images/697a9c45220735ab2fcb0d9b57cd20f2.png)](https://medium.com/@thijean?source=post_page---byline--d8b8aa1b2ebb--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d8b8aa1b2ebb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d8b8aa1b2ebb--------------------------------)
    [Thierry Jean](https://medium.com/@thijean?source=post_page---byline--d8b8aa1b2ebb--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@thijean?source=post_page---byline--d8b8aa1b2ebb--------------------------------)[![Thierry
    Jean](../Images/697a9c45220735ab2fcb0d9b57cd20f2.png)](https://medium.com/@thijean?source=post_page---byline--d8b8aa1b2ebb--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d8b8aa1b2ebb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d8b8aa1b2ebb--------------------------------)
    [Thierry Jean](https://medium.com/@thijean?source=post_page---byline--d8b8aa1b2ebb--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d8b8aa1b2ebb--------------------------------)
    ·8 min read·Mar 14, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d8b8aa1b2ebb--------------------------------)
    ·8分钟阅读·2024年3月14日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e7c8a7d092e2b255b1a68b28a2abf755.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e7c8a7d092e2b255b1a68b28a2abf755.png)'
- en: pre-commit run results, including our Hamilton hook!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 预提交运行结果，包括我们的Hamilton钩子！
- en: Most software is developed using the `git` version control system to update
    and distribute code. One challenge of writing code collaboratively is ensuring
    specific standards while each contributor has their style and opinion about what
    constitutes clean code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数软件使用`git`版本控制系统来更新和分发代码。一个协作编写代码的挑战是，在每个贡献者有自己关于什么是干净代码的风格和看法时，如何确保遵循特定的标准。
- en: '[**pre-commit hooks**](https://pre-commit.com/)are scripts or commands to execute
    automatically before committing code changes. They can enforce styling rules and
    catch errors before they’re committed and further distributed. Notable hooks include
    checking files for syntax errors, sorting imports, and normalizing quotation marks.
    They are an essential tool for any project, especially open-source ones with many
    contributors.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[**预提交钩子**](https://pre-commit.com/)是一些在提交代码更改之前自动执行的脚本或命令。它们可以强制执行样式规则，并在代码提交和分发之前捕捉错误。值得注意的钩子包括检查文件的语法错误、排序导入以及规范化引号。它们是任何项目中不可或缺的工具，尤其是那些有多个贡献者的开源项目。'
- en: Why create custom pre-commit hooks?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要创建自定义的预提交钩子？
- en: I wanted to create pre-commit hooks to validate dataflow definitions for the
    Python library [Hamilton](https://github.com/dagworks-inc/hamilton), but I found
    most online resources scattered and limited to basic use.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我想创建预提交钩子来验证Python库[Hamilton](https://github.com/dagworks-inc/hamilton)的数据流定义，但我发现大多数在线资源分散且仅限于基本用法。
- en: 'In this post, you’ll find:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你将找到：
- en: How to start using pre-commit hooks in your project
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何在你的项目中开始使用预提交钩子
- en: A step-by-step tutorial to develop custom pre-commit hooks
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发自定义预提交钩子的逐步教程
- en: To ground the discussion, I’ll go through [this GitHub repository](https://github.com/DAGWorks-Inc/hamilton-pre-commit)
    containing the pre-commit hooks I developed for Hamilton.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了引导讨论，我将通过[这个GitHub仓库](https://github.com/DAGWorks-Inc/hamilton-pre-commit)介绍我为Hamilton开发的预提交钩子。
- en: Start using pre-commit hooks
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用预提交钩子
- en: Hooks are a mechanism built directly into the `git` version control system.
    You can find your project’s hooks under the `.git/hooks` directory (it might be
    hidden by default). Although they are colloquially called “pre-commit hooks”,
    git hooks cover the whole [git lifecycle](https://pre-commit.com/#supported-git-hooks).
    For instance, you can have hooks trigger just after a commit or before a push.
    Also, hooks can be written in any programming language. Notably, the [Ruff](https://github.com/astral-sh/ruff)
    library reimplemented many Python-based hooks in Rust for performance improvement.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 钩子是直接内嵌在`git`版本控制系统中的机制。你可以在`.git/hooks`目录下找到项目的钩子（该目录默认可能是隐藏的）。虽然通常称之为“预提交钩子”，但git钩子涵盖了整个[git生命周期](https://pre-commit.com/#supported-git-hooks)。例如，你可以在提交后或推送前触发钩子。此外，钩子可以用任何编程语言编写。特别地，[Ruff](https://github.com/astral-sh/ruff)库为了性能提升，使用Rust重新实现了许多基于Python的钩子。
- en: Compared to software testing, which focuses on code behavior, you can think
    of hooks as lightweight checks you would do on each file save. While you can expect
    tests to change and evolve with your codebase, your code-writing guidelines and
    pre-commit hooks will likely be constant.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 与专注于代码行为的软件测试不同，钩子可以看作是你在每次保存文件时执行的轻量级检查。虽然你可以预期测试会随着代码库的变化而变化，但你的代码编写指南和预提交钩子可能会保持不变。
- en: Project setup
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目设置
- en: 'Let’s pretend we’re starting a new Python project (or using an existing one)
    in the directory `/my-project`. The preferred way of working with pre-commit hooks
    is through the [pre-commit](https://github.com/pre-commit/pre-commithttps://github.com/pre-commit/pre-commit)
    Python library. We can set it up with the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在目录`/my-project`中开始一个新的Python项目（或使用一个现有项目）。与预提交钩子协作的推荐方式是通过[pre-commit](https://github.com/pre-commit/pre-commithttps://github.com/pre-commit/pre-commit)
    Python库。我们可以通过以下步骤进行设置：
- en: Create a git repository for your project with `git init`
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`git init`为你的项目创建一个git仓库
- en: Install the pre-commit library with `pip install pre-commit`
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pip install pre-commit`安装预提交库
- en: 'Add a `.pre-commit-config.yaml` to your repository. Here’s an example:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`.pre-commit-config.yaml`添加到你的代码库中。以下是一个示例：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 4\. Install the hooks with `pre-commit install`. It will read instructions from
    `.pre-commit-config.yaml` and install hooks locally under `.git/hooks/pre-commit`
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 使用`pre-commit install`安装钩子。它将从`.pre-commit-config.yaml`读取指令，并在`.git/hooks/pre-commit`中本地安装钩子
- en: 5\. Make a commit or manually run hooks with `pre-commit run --all-files` to
    trigger the hooks
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 提交更改或手动运行钩子，使用`pre-commit run --all-files`来触发钩子
- en: Create a custom pre-commit hook
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个自定义的预提交钩子
- en: '[Community-maintained hooks](https://pre-commit.com/hooks.html) provide flexibility
    and can be tailored to meet your preferred coding guidelines. They should meet
    your needs 98% of the time. However, off-the-shelf solutions don’t know about
    the specific tools you’re using or your team’s internal conventions. For example,
    you might want to validate internal configurations or enforce a directory structure
    for your projects.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[社区维护的钩子](https://pre-commit.com/hooks.html)提供了灵活性，可以根据你的编码规范进行定制。它们通常能满足你98%的需求。然而，现成的解决方案并不了解你使用的具体工具或团队的内部惯例。例如，你可能希望验证内部配置或强制执行项目的目录结构。'
- en: In our case, we want to create a hook to validate the Python code for their
    Hamilton dataflow definition. Our hook script will leverage the `[hamilton](https://blog.dagworks.io/p/a-command-line-tool-to-improve-your)`
    [CLI tool](https://blog.dagworks.io/p/a-command-line-tool-to-improve-your) to
    conduct the validation, leaving us with a simple code example to follow.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们希望创建一个钩子来验证Python代码中的Hamilton数据流定义。我们的钩子脚本将利用`[hamilton](https://blog.dagworks.io/p/a-command-line-tool-to-improve-your)`
    [CLI工具](https://blog.dagworks.io/p/a-command-line-tool-to-improve-your)来进行验证，这将为我们提供一个简单的代码示例。
- en: 1\. Setting up your pre-commit hook repository
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 设置你的预提交钩子仓库
- en: As introduced in the **Project setup** section, pre-commit hooks need to exist
    in a public repository to allow projects to reference them in `.pre-commit-config.yaml`
    and install them locally with `pre-commit install`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如**项目设置**部分所介绍，要使项目能够在`.pre-commit-config.yaml`中引用并通过`pre-commit install`本地安装，预提交钩子需要存在于公共代码库中。
- en: Previously, we were in our project directory `/my-project` where we defined
    a `.pre-commit-config.yaml` and installed hooks. Now, we’ll create a `/my-hooks`
    directory where we’ll define our custom hooks. You can refer to our `[hamilton-pre-commit](https://github.com/DAGWorks-Inc/hamilton-pre-commit)`
    [repository](https://github.com/DAGWorks-Inc/hamilton-pre-commit) to view the
    general structure.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们在项目目录`/my-project`中定义了`.pre-commit-config.yaml`并安装了钩子。现在，我们将创建一个`/my-hooks`目录，在其中定义我们自定义的钩子。你可以参考我们的`[hamilton-pre-commit](https://github.com/DAGWorks-Inc/hamilton-pre-commit)`
    [仓库](https://github.com/DAGWorks-Inc/hamilton-pre-commit)查看整体结构。
- en: '![](../Images/166a5ca7285e66ff4c4dd89f6f0b0b6e.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/166a5ca7285e66ff4c4dd89f6f0b0b6e.png)'
- en: Screenshot of the [hamilton-pre-commit repository](https://github.com/dagworks-inc/hamilton-pre-commit)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[hamilton-pre-commit 仓库的截图](https://github.com/dagworks-inc/hamilton-pre-commit)'
- en: 2\. Writing the hook’s logic
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 编写钩子的逻辑
- en: Under `hooks/`, we have a file `__init__.py` to [make the directory a discoverable
    Python module](https://docs.python.org/3/tutorial/modules.html) and our script
    `cli_command.py`. It contains a single function `main()`, which reads a list of
    `hamilton` CLI commands from `sys.argv`. Then, it executes them one by one as
    a subprocess wrapped in a `try/except` clause.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在`hooks/`目录下，我们有一个文件`__init__.py`来[使目录成为可发现的 Python 模块](https://docs.python.org/3/tutorial/modules.html)，以及我们的脚本`cli_command.py`。它包含一个单一的函数`main()`，该函数从`sys.argv`读取一组`hamilton`
    CLI 命令。然后，它将这些命令逐一作为子进程执行，并封装在一个`try/except`语句中。
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: At the beginning, we set `exit_code = PASS`, but any exception or unsuccessful
    commands will set `exit_code = FAIL`. The `main()` function returns the exit code
    to the `SystemExit` exception. For the pre-commit hook to succeed, we need to
    return `PASS` after all commands succeeded. It might be counterintuitive to have
    `PASS=0` and `FAIL=1` but these values refer to the standard [system’s exit code](https://stackoverflow.com/questions/9426045/difference-between-exit0-and-exit1-in-python/9426054#9426054).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，我们将`exit_code = PASS`，但任何异常或失败的命令都会将`exit_code = FAIL`。`main()`函数将退出码返回给`SystemExit`异常。为了使预提交钩子成功，我们需要在所有命令成功后返回`PASS`。将`PASS=0`和`FAIL=1`的做法可能违背直觉，但这些值是标准的[系统退出码](https://stackoverflow.com/questions/9426045/difference-between-exit0-and-exit1-in-python/9426054#9426054)。
- en: We used Python for convenience, but this simple logic could be in a lighter
    scripting language like Bash. You can visit the [hooks maintained by the pre-commit
    team](https://github.com/pre-commit/pre-commit-hooks) for more examples.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 Python 是为了方便，但这个简单的逻辑也可以用像 Bash 这样的轻量级脚本语言来实现。你可以访问[预提交团队维护的钩子](https://github.com/pre-commit/pre-commit-hooks)查看更多示例。
- en: 3\. Defining the hook entry point
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 定义钩子的入口点
- en: Now, your hooks repository (`/my-hooks`) must include a `.pre-commit-hooks.yaml`
    file that specifies the available hooks and how to execute them once installed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的钩子仓库(`/my-hooks`)必须包含一个`.pre-commit-hooks.yaml`文件，该文件指定了可用的钩子以及如何在安装后执行它们。
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In our case, we set `id: cli-command` and `entry: cli-command`, add some metadata,
    and specify the programming language as Python. Importantly, the `files` attribute
    wasn’t set to have our hook run once per commit. In your case, you might want
    to set `files: "*.py"` to run your hook on each edited Python file for example
    (learn about [available options](https://pre-commit.com/#new-hooks.)).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '在我们的案例中，我们设置了`id: cli-command`和`entry: cli-command`，添加了一些元数据，并将编程语言指定为 Python。重要的是，`files`属性没有设置为让我们的钩子在每次提交时运行。在你的情况下，你可能希望将`files:
    "*.py"`设置为在每次编辑的 Python 文件上运行你的钩子（了解更多[可用选项](https://pre-commit.com/#new-hooks.)）。'
- en: So far, we created a Python script under `hooks/cli_command.py` and added to
    `.pre-commit-hooks.yaml` a hook with the entry point `cli-command`. However, you
    need to link the two explicitly in your Python project file `pyproject.toml`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在`hooks/cli_command.py`下创建了一个 Python 脚本，并在`.pre-commit-hooks.yaml`中添加了一个入口点为`cli-command`的钩子。然而，你需要在
    Python 项目的文件`pyproject.toml`中显式地将这两者连接起来。
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This line reads “the entry point `cli-command` refers to the function `main`
    in `hooks.cli_command`”.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行的意思是“入口点`cli-command`指向`hooks.cli_command`中的`main`函数”。
- en: see [this example](https://github.com/pre-commit/pre-commit-hooks/blob/main/setup.cfg)
    if you’re using `setup.cfg`for your Python project
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你在 Python 项目中使用`setup.cfg`，可以参考[这个示例](https://github.com/pre-commit/pre-commit-hooks/blob/main/setup.cfg)。
- en: 4\. Testing your hook locally
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 本地测试你的钩子
- en: First, you should validate your hook’s logic with unit tests. However, we won’t
    dive into testing since it deserves its own post. Our `hamilton-pre-commit` repository
    currently doesn’t have tests since the underlying CLI is tested under the main
    Hamilton repository. You can visit the [officially maintained pre-commit hooks](https://github.com/pre-commit/pre-commit-hooks/tree/main/tests)
    for test examples.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你应该通过单元测试验证钩子逻辑。然而，我们不会深入讨论测试，因为它值得单独的一篇文章。我们的`hamilton-pre-commit`仓库目前没有测试，因为底层CLI在主Hamilton仓库中已进行测试。你可以访问[官方维护的pre-commit钩子](https://github.com/pre-commit/pre-commit-hooks/tree/main/tests)查看测试示例。
- en: Second, you should verify that the `.pre-commit-hooks.yaml` and entry points
    are properly configured by trying your pre-commit hook locally. Ideally, you’d
    want to avoid adding a commit to trigger the hook each time you want to test changes.
    The pre-commit library provides utilities to facilitate this process, but it requires
    a few manual steps detailed in [pre-commit GitHub issues](https://github.com/pre-commit/pre-commit/issues/850).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，你应该通过在本地尝试运行你的pre-commit钩子来验证`.pre-commit-hooks.yaml`和入口点是否正确配置。理想情况下，你应该避免每次想测试更改时都添加提交来触发钩子。pre-commit库提供了一些工具来简化这个过程，但它需要一些手动步骤，详细步骤可以参考[pre-commit
    GitHub问题](https://github.com/pre-commit/pre-commit/issues/850)。
- en: Go to your directory `/my-project` where you’d like to test your hook.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到你希望测试钩子的目录`/my-project`。
- en: Execute `pre-commit try-repo ../LOCAL/PATH/TO/my-hooks` then, you should see
    a local initialization message.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行`pre-commit try-repo ../LOCAL/PATH/TO/my-hooks`，然后你应该会看到一个本地初始化消息。
- en: '![](../Images/3b0b7c51f01500026015f0abc28eae0a.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3b0b7c51f01500026015f0abc28eae0a.png)'
- en: One limitation is that you can’t directly pass `args` to your hook via this
    command.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个限制是，你不能通过此命令直接将`args`传递给钩子。
- en: 3\. Copy the configuration found under `Using config:` to a local file and add
    the `args` section. We created `.local-pre-commit-config.yaml` but you can use
    any name.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 将`Using config:`下找到的配置复制到本地文件，并添加`args`部分。我们创建了`.local-pre-commit-config.yaml`，但你可以使用任何名称。
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 4\. Use your local hook via `pre-commit run --config .local-pre-commit-config.yaml
    --all-files`. The `--all-files` flag will apply the hook to all files in your
    repository instead of those currently staged.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 使用本地钩子通过`pre-commit run --config .local-pre-commit-config.yaml --all-files`。`--all-files`标志会将钩子应用到仓库中的所有文件，而不是仅应用于当前暂存的文件。
- en: '![](../Images/7f26ca2ae6b9ab675d6ea632e3925a27.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7f26ca2ae6b9ab675d6ea632e3925a27.png)'
- en: When adding a test, always start by making it fail. You wouldn’t want to add
    a test that always succeeds `:^)`
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 添加测试时，始终从让测试失败开始。你可不想添加一个总是成功的测试`(:^)`
- en: 5\. Publishing your pre-commit hook
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 发布你的pre-commit钩子
- en: You’re almost there! You have a working hook script that’s tested and packaged
    in a git repository. Now, you just need to make it available online. We will show
    the steps for GitHub-hosted projects, but your pre-commit hook can live anywhere
    accessible via `git clone`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你快完成了！你有一个工作的钩子脚本，已经在git仓库中进行了测试和打包。现在，你只需将它发布到线上即可。我们将展示GitHub托管项目的步骤，但你的pre-commit钩子可以放在任何可以通过`git
    clone`访问的地方。
- en: From your GitHub repository, go to the **Releases** section
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的GitHub仓库，进入**发布**部分
- en: '![](../Images/56f353c45e92f3b91e8680fa8826a653.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/56f353c45e92f3b91e8680fa8826a653.png)'
- en: Main page of a GitHub repository.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub仓库的主页。
- en: 2\. Click **Draft a new release**
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 点击**草拟新版本**
- en: '![](../Images/74b19fc73cfe7dace94e8d01408d0cdf.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74b19fc73cfe7dace94e8d01408d0cdf.png)'
- en: '**Releases** section of a GitHub repository'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub仓库的**发布**部分
- en: 3\. On the new release page, you need to add a version tag, a title, and a description.
    If it’s your first release, I suggest setting the tag as `v0.1.0` to [follow semantic
    versioning](https://semver.org/), as recommended by GitHub.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 在新发布页面上，你需要添加版本标签、标题和描述。如果这是你的第一次发布，我建议将标签设置为`v0.1.0`，以[遵循语义版本控制](https://semver.org/)，这是GitHub推荐的做法。
- en: When you’re making changes and want to distribute experimental versions, you
    can set your version as `v0.1.1-rc` (for “release candidate”) and mark it as a
    pre-release using the checkbox.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在进行更改并想要发布实验版本时，你可以将版本设置为`v0.1.1-rc`（即“发布候选版”），并使用复选框将其标记为预发布版本。
- en: '![](../Images/bbf212038a852dbff5ac65cc2800eb47.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bbf212038a852dbff5ac65cc2800eb47.png)'
- en: '**New release** form on GitHub.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub上的**新版本**表单。
- en: The `rev` value in your `.pre-commit-config.yaml` file will need to match the
    **version tag** you set.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`.pre-commit-config.yaml`文件中的`rev`值需要与你设置的**版本标签**匹配。'
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Concluding remarks
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束语
- en: Congrats! You made it through this post! You are now able to use pre-commit
    hooks to improve code quality in your projects. Equipped with an understanding
    of their internals, you can start writing your own hooks!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经完成了这篇文章！现在，你可以使用 pre-commit 钩子来提高你项目中的代码质量。了解了它们的内部机制后，你可以开始编写自己的钩子了！
- en: 'Don’t forget to take a look at the many hooks maintained by the community before
    reinventing the wheel: [https://pre-commit.com/hooks.html](https://pre-commit.com/hooks.html)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在重新发明轮子之前，不要忘记查看社区维护的许多钩子：[https://pre-commit.com/hooks.html](https://pre-commit.com/hooks.html)
- en: Check out the [Hamilton](https://github.com/DAGWorks-Inc/hamilton) library to
    write dataflows in Python!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[Hamilton](https://github.com/DAGWorks-Inc/hamilton)库，以便用Python编写数据流！
- en: Find me on [LinkedIn](https://www.linkedin.com/in/thierry-jean/) and more of
    my posts on the [DAGWorks blog](https://blog.dagworks.io/)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在[LinkedIn](https://www.linkedin.com/in/thierry-jean/)上找到我，并查看我在[DAGWorks 博客](https://blog.dagworks.io/)上的更多文章
