- en: Custom pre-commit hooks for safer code changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://towardsdatascience.com/custom-pre-commit-hooks-for-safer-code-changes-d8b8aa1b2ebb?source=collection_archive---------5-----------------------#2024-03-14](https://towardsdatascience.com/custom-pre-commit-hooks-for-safer-code-changes-d8b8aa1b2ebb?source=collection_archive---------5-----------------------#2024-03-14)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A step-by-step guide on writing your first pre-commit hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[](https://medium.com/@thijean?source=post_page---byline--d8b8aa1b2ebb--------------------------------)[![Thierry
    Jean](../Images/697a9c45220735ab2fcb0d9b57cd20f2.png)](https://medium.com/@thijean?source=post_page---byline--d8b8aa1b2ebb--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d8b8aa1b2ebb--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d8b8aa1b2ebb--------------------------------)
    [Thierry Jean](https://medium.com/@thijean?source=post_page---byline--d8b8aa1b2ebb--------------------------------)'
  prefs: []
  type: TYPE_NORMAL
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d8b8aa1b2ebb--------------------------------)
    ·8 min read·Mar 14, 2024
  prefs: []
  type: TYPE_NORMAL
- en: --
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e7c8a7d092e2b255b1a68b28a2abf755.png)'
  prefs: []
  type: TYPE_IMG
- en: pre-commit run results, including our Hamilton hook!
  prefs: []
  type: TYPE_NORMAL
- en: Most software is developed using the `git` version control system to update
    and distribute code. One challenge of writing code collaboratively is ensuring
    specific standards while each contributor has their style and opinion about what
    constitutes clean code.
  prefs: []
  type: TYPE_NORMAL
- en: '[**pre-commit hooks**](https://pre-commit.com/)are scripts or commands to execute
    automatically before committing code changes. They can enforce styling rules and
    catch errors before they’re committed and further distributed. Notable hooks include
    checking files for syntax errors, sorting imports, and normalizing quotation marks.
    They are an essential tool for any project, especially open-source ones with many
    contributors.'
  prefs: []
  type: TYPE_NORMAL
- en: Why create custom pre-commit hooks?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I wanted to create pre-commit hooks to validate dataflow definitions for the
    Python library [Hamilton](https://github.com/dagworks-inc/hamilton), but I found
    most online resources scattered and limited to basic use.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this post, you’ll find:'
  prefs: []
  type: TYPE_NORMAL
- en: How to start using pre-commit hooks in your project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A step-by-step tutorial to develop custom pre-commit hooks
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To ground the discussion, I’ll go through [this GitHub repository](https://github.com/DAGWorks-Inc/hamilton-pre-commit)
    containing the pre-commit hooks I developed for Hamilton.
  prefs: []
  type: TYPE_NORMAL
- en: Start using pre-commit hooks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hooks are a mechanism built directly into the `git` version control system.
    You can find your project’s hooks under the `.git/hooks` directory (it might be
    hidden by default). Although they are colloquially called “pre-commit hooks”,
    git hooks cover the whole [git lifecycle](https://pre-commit.com/#supported-git-hooks).
    For instance, you can have hooks trigger just after a commit or before a push.
    Also, hooks can be written in any programming language. Notably, the [Ruff](https://github.com/astral-sh/ruff)
    library reimplemented many Python-based hooks in Rust for performance improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Compared to software testing, which focuses on code behavior, you can think
    of hooks as lightweight checks you would do on each file save. While you can expect
    tests to change and evolve with your codebase, your code-writing guidelines and
    pre-commit hooks will likely be constant.
  prefs: []
  type: TYPE_NORMAL
- en: Project setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s pretend we’re starting a new Python project (or using an existing one)
    in the directory `/my-project`. The preferred way of working with pre-commit hooks
    is through the [pre-commit](https://github.com/pre-commit/pre-commithttps://github.com/pre-commit/pre-commit)
    Python library. We can set it up with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a git repository for your project with `git init`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the pre-commit library with `pip install pre-commit`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `.pre-commit-config.yaml` to your repository. Here’s an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Install the hooks with `pre-commit install`. It will read instructions from
    `.pre-commit-config.yaml` and install hooks locally under `.git/hooks/pre-commit`
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Make a commit or manually run hooks with `pre-commit run --all-files` to
    trigger the hooks
  prefs: []
  type: TYPE_NORMAL
- en: Create a custom pre-commit hook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Community-maintained hooks](https://pre-commit.com/hooks.html) provide flexibility
    and can be tailored to meet your preferred coding guidelines. They should meet
    your needs 98% of the time. However, off-the-shelf solutions don’t know about
    the specific tools you’re using or your team’s internal conventions. For example,
    you might want to validate internal configurations or enforce a directory structure
    for your projects.'
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we want to create a hook to validate the Python code for their
    Hamilton dataflow definition. Our hook script will leverage the `[hamilton](https://blog.dagworks.io/p/a-command-line-tool-to-improve-your)`
    [CLI tool](https://blog.dagworks.io/p/a-command-line-tool-to-improve-your) to
    conduct the validation, leaving us with a simple code example to follow.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Setting up your pre-commit hook repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As introduced in the **Project setup** section, pre-commit hooks need to exist
    in a public repository to allow projects to reference them in `.pre-commit-config.yaml`
    and install them locally with `pre-commit install`.
  prefs: []
  type: TYPE_NORMAL
- en: Previously, we were in our project directory `/my-project` where we defined
    a `.pre-commit-config.yaml` and installed hooks. Now, we’ll create a `/my-hooks`
    directory where we’ll define our custom hooks. You can refer to our `[hamilton-pre-commit](https://github.com/DAGWorks-Inc/hamilton-pre-commit)`
    [repository](https://github.com/DAGWorks-Inc/hamilton-pre-commit) to view the
    general structure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/166a5ca7285e66ff4c4dd89f6f0b0b6e.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of the [hamilton-pre-commit repository](https://github.com/dagworks-inc/hamilton-pre-commit)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Writing the hook’s logic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Under `hooks/`, we have a file `__init__.py` to [make the directory a discoverable
    Python module](https://docs.python.org/3/tutorial/modules.html) and our script
    `cli_command.py`. It contains a single function `main()`, which reads a list of
    `hamilton` CLI commands from `sys.argv`. Then, it executes them one by one as
    a subprocess wrapped in a `try/except` clause.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: At the beginning, we set `exit_code = PASS`, but any exception or unsuccessful
    commands will set `exit_code = FAIL`. The `main()` function returns the exit code
    to the `SystemExit` exception. For the pre-commit hook to succeed, we need to
    return `PASS` after all commands succeeded. It might be counterintuitive to have
    `PASS=0` and `FAIL=1` but these values refer to the standard [system’s exit code](https://stackoverflow.com/questions/9426045/difference-between-exit0-and-exit1-in-python/9426054#9426054).
  prefs: []
  type: TYPE_NORMAL
- en: We used Python for convenience, but this simple logic could be in a lighter
    scripting language like Bash. You can visit the [hooks maintained by the pre-commit
    team](https://github.com/pre-commit/pre-commit-hooks) for more examples.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Defining the hook entry point
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, your hooks repository (`/my-hooks`) must include a `.pre-commit-hooks.yaml`
    file that specifies the available hooks and how to execute them once installed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, we set `id: cli-command` and `entry: cli-command`, add some metadata,
    and specify the programming language as Python. Importantly, the `files` attribute
    wasn’t set to have our hook run once per commit. In your case, you might want
    to set `files: "*.py"` to run your hook on each edited Python file for example
    (learn about [available options](https://pre-commit.com/#new-hooks.)).'
  prefs: []
  type: TYPE_NORMAL
- en: So far, we created a Python script under `hooks/cli_command.py` and added to
    `.pre-commit-hooks.yaml` a hook with the entry point `cli-command`. However, you
    need to link the two explicitly in your Python project file `pyproject.toml`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This line reads “the entry point `cli-command` refers to the function `main`
    in `hooks.cli_command`”.
  prefs: []
  type: TYPE_NORMAL
- en: see [this example](https://github.com/pre-commit/pre-commit-hooks/blob/main/setup.cfg)
    if you’re using `setup.cfg`for your Python project
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 4\. Testing your hook locally
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you should validate your hook’s logic with unit tests. However, we won’t
    dive into testing since it deserves its own post. Our `hamilton-pre-commit` repository
    currently doesn’t have tests since the underlying CLI is tested under the main
    Hamilton repository. You can visit the [officially maintained pre-commit hooks](https://github.com/pre-commit/pre-commit-hooks/tree/main/tests)
    for test examples.
  prefs: []
  type: TYPE_NORMAL
- en: Second, you should verify that the `.pre-commit-hooks.yaml` and entry points
    are properly configured by trying your pre-commit hook locally. Ideally, you’d
    want to avoid adding a commit to trigger the hook each time you want to test changes.
    The pre-commit library provides utilities to facilitate this process, but it requires
    a few manual steps detailed in [pre-commit GitHub issues](https://github.com/pre-commit/pre-commit/issues/850).
  prefs: []
  type: TYPE_NORMAL
- en: Go to your directory `/my-project` where you’d like to test your hook.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `pre-commit try-repo ../LOCAL/PATH/TO/my-hooks` then, you should see
    a local initialization message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/3b0b7c51f01500026015f0abc28eae0a.png)'
  prefs: []
  type: TYPE_IMG
- en: One limitation is that you can’t directly pass `args` to your hook via this
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Copy the configuration found under `Using config:` to a local file and add
    the `args` section. We created `.local-pre-commit-config.yaml` but you can use
    any name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Use your local hook via `pre-commit run --config .local-pre-commit-config.yaml
    --all-files`. The `--all-files` flag will apply the hook to all files in your
    repository instead of those currently staged.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7f26ca2ae6b9ab675d6ea632e3925a27.png)'
  prefs: []
  type: TYPE_IMG
- en: When adding a test, always start by making it fail. You wouldn’t want to add
    a test that always succeeds `:^)`
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 5\. Publishing your pre-commit hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’re almost there! You have a working hook script that’s tested and packaged
    in a git repository. Now, you just need to make it available online. We will show
    the steps for GitHub-hosted projects, but your pre-commit hook can live anywhere
    accessible via `git clone`.
  prefs: []
  type: TYPE_NORMAL
- en: From your GitHub repository, go to the **Releases** section
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/56f353c45e92f3b91e8680fa8826a653.png)'
  prefs: []
  type: TYPE_IMG
- en: Main page of a GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Click **Draft a new release**
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/74b19fc73cfe7dace94e8d01408d0cdf.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Releases** section of a GitHub repository'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. On the new release page, you need to add a version tag, a title, and a description.
    If it’s your first release, I suggest setting the tag as `v0.1.0` to [follow semantic
    versioning](https://semver.org/), as recommended by GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: When you’re making changes and want to distribute experimental versions, you
    can set your version as `v0.1.1-rc` (for “release candidate”) and mark it as a
    pre-release using the checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bbf212038a852dbff5ac65cc2800eb47.png)'
  prefs: []
  type: TYPE_IMG
- en: '**New release** form on GitHub.'
  prefs: []
  type: TYPE_NORMAL
- en: The `rev` value in your `.pre-commit-config.yaml` file will need to match the
    **version tag** you set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Concluding remarks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congrats! You made it through this post! You are now able to use pre-commit
    hooks to improve code quality in your projects. Equipped with an understanding
    of their internals, you can start writing your own hooks!
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t forget to take a look at the many hooks maintained by the community before
    reinventing the wheel: [https://pre-commit.com/hooks.html](https://pre-commit.com/hooks.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Check out the [Hamilton](https://github.com/DAGWorks-Inc/hamilton) library to
    write dataflows in Python!
  prefs: []
  type: TYPE_NORMAL
- en: Find me on [LinkedIn](https://www.linkedin.com/in/thierry-jean/) and more of
    my posts on the [DAGWorks blog](https://blog.dagworks.io/)
  prefs: []
  type: TYPE_NORMAL
