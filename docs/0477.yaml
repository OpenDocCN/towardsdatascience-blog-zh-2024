- en: Visualizing Complex-Valued Functions in Python and Mathematica
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 和 Mathematica 中可视化复值函数
- en: 原文：[https://towardsdatascience.com/today-i-was-pouring-through-my-complex-variables-and-analytic-functions-book-written-by-the-e9205f71485d?source=collection_archive---------8-----------------------#2024-02-19](https://towardsdatascience.com/today-i-was-pouring-through-my-complex-variables-and-analytic-functions-book-written-by-the-e9205f71485d?source=collection_archive---------8-----------------------#2024-02-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/today-i-was-pouring-through-my-complex-variables-and-analytic-functions-book-written-by-the-e9205f71485d?source=collection_archive---------8-----------------------#2024-02-19](https://towardsdatascience.com/today-i-was-pouring-through-my-complex-variables-and-analytic-functions-book-written-by-the-e9205f71485d?source=collection_archive---------8-----------------------#2024-02-19)
- en: Unlocking visual insights into a difficult but powerful branch of math
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解锁数学难题的视觉洞察
- en: '[](https://medium.com/@Dani_Lisle?source=post_page---byline--e9205f71485d--------------------------------)[![Dani
    Lisle](../Images/2933bbbca26cf198e7964547a91b2751.png)](https://medium.com/@Dani_Lisle?source=post_page---byline--e9205f71485d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--e9205f71485d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--e9205f71485d--------------------------------)
    [Dani Lisle](https://medium.com/@Dani_Lisle?source=post_page---byline--e9205f71485d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@Dani_Lisle?source=post_page---byline--e9205f71485d--------------------------------)[![Dani
    Lisle](../Images/2933bbbca26cf198e7964547a91b2751.png)](https://medium.com/@Dani_Lisle?source=post_page---byline--e9205f71485d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--e9205f71485d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--e9205f71485d--------------------------------)
    [Dani Lisle](https://medium.com/@Dani_Lisle?source=post_page---byline--e9205f71485d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--e9205f71485d--------------------------------)
    ·3 min read·Feb 19, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--e9205f71485d--------------------------------)
    ·3 分钟阅读·2024年2月19日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Today I was pouring through *Complex Variables and Analytic Functions* by the
    esteemed Fornberg and Piret, trying my best to wrap my mind around how complex-valued
    functions behave. Mentally vizualization such functions is extra difficult since
    they take a real and an imaginary input, and outputs two components as well. Therefore,
    a single 3-D plot is not sufficient to see how the function behaves. Rather, we
    have to split such a visualization into separate plots of the imaginary and real
    parts, or alternatively by magnitude and argument, or angle.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我正在翻阅由受尊敬的Fornberg和Piret编写的*《复变函数与解析函数》*，尽力理解复值函数的行为。由于这些函数既有实数输入，也有虚数输入，并且输出两个分量，因此，单一的3D图形不足以展示函数的行为。我们需要将这种可视化拆分为实部和虚部的单独图表，或者按幅度和相位（角度）来展示。
- en: I wanted to be able to play around with any function I could think of, drag
    and zoom around its plots, and explore it in visual detail to understand how it
    resulted from the equation. For such a task, Wolfram Mathematica is an excellent
    starting tool.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望能够随意操作任何想到的函数，拖动和缩放其图表，并在可视化细节中探索它，以理解它如何从方程中得出。对于这样的任务，Wolfram Mathematica
    是一个很好的起始工具。
- en: Wolfram Language
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wolfram 语言
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[https://github.com/dreamchef/complex-functions-visualization](https://github.com/dreamchef/complex-functions-visualization)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/dreamchef/complex-functions-visualization](https://github.com/dreamchef/complex-functions-visualization)'
- en: I wrote the above Mathematica code to produce a grid of plots showing the function
    in both ways just described. On the top, the imaginary and real parts of the function
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我编写了上述 Mathematica 代码，用于生成一个图表网格，展示如上所述的两种方式的函数。在顶部显示了函数的虚部和实部，
- en: '![](../Images/9b6073b85b9639da070285491a0935ae.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b6073b85b9639da070285491a0935ae.png)'
- en: 'are shown, and on the bottom, and the magnitude, and the phase shown in color:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 底部显示了幅度和相位，以颜色表示：
- en: '![](../Images/0234fbdcc4486ce649d41dee4561a6a0.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0234fbdcc4486ce649d41dee4561a6a0.png)'
- en: Component-Wise and Magnitude-Phase Plots of f(z) from Wolfram
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Wolfram 的分量和幅度-相位图 f(z)
- en: After playing around with a few functions using this code and convincing myself
    they made sense, I was interested in getting the same functionality in Python,
    to connect it to my other mathematical programming projects.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在用这段代码玩了几个函数并确信它们有意义之后，我对如何在 Python 中实现相同功能产生了兴趣，以便将其与其他数学编程项目连接起来。
- en: Python, PyPlot and complex-plotting-tools
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python、PyPlot和complex-plotting-tools
- en: 'I found an excellent project on GitHub ([https://github.com/artmenlope/complex-plotting-tools](https://github.com/artmenlope/complex-plotting-tools))
    which I decided to use as a starting point, and potentially contribute to in the
    future. The repo provided a very easy interface for plotting complex-valued functions
    in a variety of ways. Thanks [https://github.com/artmenlope](https://github.com/artmenlope)!
    For example, after importing `numpy`, `matplotlib`, and the repo’s `cplotting_tools`
    module defining the function and calling `cplt.complex_plot3D(x,y,f,log_mode=False)`
    produces the following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我在GitHub上找到了一个很棒的项目（[https://github.com/artmenlope/complex-plotting-tools](https://github.com/artmenlope/complex-plotting-tools)），我决定将其作为起点，并有可能在未来做出贡献。这个仓库提供了一个非常简单的界面，用于以多种方式绘制复值函数。感谢[https://github.com/artmenlope](https://github.com/artmenlope)！例如，在导入`numpy`、`matplotlib`和该仓库的`cplotting_tools`模块后，定义函数并调用`cplt.complex_plot3D(x,y,f,log_mode=False)`，将生成以下内容：
- en: '![](../Images/da80e1f86e6827c86fbbf1432799ac18.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/da80e1f86e6827c86fbbf1432799ac18.png)'
- en: Magnitude and Phase Plot of f(z) from complex-plotting-tools
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 来自complex-plotting-tools的f(z)幅度和相位图
- en: 'These are all for the same f(z) as above. To view the side-by-side imaginary
    and real parts of the function, use `cplot.plot_re_im(x,y,f,camp="twilight",contour=False,alpha=0.9`:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图都是用于上面相同的f(z)。要查看该函数的虚部和实部并排显示，可以使用`cplot.plot_re_im(x,y,f,camp="twilight",contour=False,alpha=0.9)`：
- en: '![](../Images/4d9943d906a41a280988bde245410cb8.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d9943d906a41a280988bde245410cb8.png)'
- en: Component-Wise Plots from complex-plotting-tools
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 来自complex-plotting-tools的分量绘图
- en: 'Additionally, the library provides other cool ways to study functions, including
    a stream plot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该库还提供了其他酷炫的方式来研究函数，包括流线图：
- en: '![](../Images/c026babc96d69ed06a58d6453cc920af.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c026babc96d69ed06a58d6453cc920af.png)'
- en: Stream Plot of f(z) from complex-plotting-tools
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 来自complex-plotting-tools的f(z)流线图
- en: Future Direction
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未来方向
- en: The library shows a lot of promise and is relatively easy to use! It does require
    a `pts` variable to be defined that encodes the poles and zeros of the given function.
    Wolfram does not require this because it computes the locations of these points
    under the hood. It would save a lot of effort for the user if complex-plotting-tools
    had this functionality as well. I plan to implement this is into the module in
    the near future.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库展示了很大的潜力，且相对容易使用！它确实需要定义一个`pts`变量，用于编码给定函数的极点和零点。Wolfram不需要这个，因为它在幕后计算这些点的位置。如果complex-plotting-tools也具备这个功能，将为用户节省大量的精力。我计划在不久的将来将其实现到该模块中。
- en: In the meantime, have fun plotting with Wolfram and Python, and share your thoughts
    and questions in comments below, connect with me on [LinkedIn](http://linkedin.com/in/danilisle)
    or collaborate with me on [GitHub](http://github.com/dreamchef)!
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，尽情享受使用Wolfram和Python绘图的乐趣，欢迎在下方评论中分享您的想法和问题，或通过[LinkedIn](http://linkedin.com/in/danilisle)与我联系，或在[GitHub](http://github.com/dreamchef)与我合作！
- en: '*Unless otherwise noted, all images were created by the author.*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者创建。*'
