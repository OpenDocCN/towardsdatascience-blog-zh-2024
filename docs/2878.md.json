["```py\n# Custom tool to extract content from a given webpage\nclass QuickstartExtractor(BaseTool):\n    name: str = \"WebPage Content extractor\"\n    description: str = \"Get all the content from a webpage\"\n\n    def _run(self) -> str:    \n            url = \"https://learn.srlinux.dev/get-started/lab/\"\n            response = requests.get(url)\n            response.raise_for_status()\n            return response.text\n\n# Create doc specialist Agent\ndoc_specialist = Agent(\n   role=\"Documentation Specialist\",\n   goal=\"Extract and organize containerlab quickstart steps\",\n   backstory=\"\"\"Expert in technical documentation with focus on clear, \n   actionable installation and setup instructions.\"\"\",\n   verbose=True,\n   tools = [QuickstartExtractor()],\n   allow_delegation=False\n        )\n\n# Task for doc speaclist Agent\ndoc_task = Task(\n    description=(\n                    \"From the containerlab quickstart guide:\\n\"\n     \"1\\. Extract installation steps \\n\"\n     \"2\\. Identify topology deployment steps \\n\"\n     \"3\\. Find node connection instructions \\n\"\n\n    \"Present in a clear, sequential format.\\n\"\n    ),\n                expected_output=\"List of commands\",\n    agent=doc_specialist\n                )\n```", "```py\n# Agent: Documentation Specialist\n## Final Answer: \n```", "```py\n```", "```py\n# Agent: Linux Command Executor and Docker Orchestrator\n## Final Answer: \n1\\. **System Uptime Check**: \n   - Output: `14:56:17 up 1 day, 20:25, 60 users,  load average: 0.01, 0.39, 0.86`\n\n2\\. **Disk Usage Check**:\n   - Output:\n   ```", "```py\n\n3\\. **Running Processes Check**: \n   - Output: (truncated for brevity)\n   ```", "```py\n\n4\\. **Network Connectivity Check**: \n   - Output:\n   ```", "```py\n\n5\\. **Containerlab Installation Check**:\n   - Containerlab is already installed and is at the latest version (0.59.0).\n\n6\\. **Topology Deployment Output**:\n   - Output of the deployed topology:\n   ```", "```py\n\n7\\. **List of Running Docker Containers**:\n   - Output:\n   ```", "```py\n\nAll tasks completed successfully with the appropriate outputs!\n```", "```py\n# Agent: Senior Network Administrator\n## Final Answer: \n# Configuration for client1 (Linux)\n```", "```py\n\n# Configuration for leaf1 (SRLinux)\n```", "```py\n\n# Configuration for spine1 (SRLinux)\n```", "```py\n\n# Configuration for leaf2 (SRLinux)\n```", "```py\n\n# Configuration for client2 (Linux)\n```", "```py\n\nThis configuration:\n1\\. Uses unique subnets for each connection:\n   - client1-leaf1: 10.1.1.0/24\n   - leaf1-spine1: 10.1.2.0/24\n   - spine1-leaf2: 10.1.3.0/24\n   - leaf2-client2: 10.1.4.0/24\n\n2\\. Configures BGP with unique AS numbers:\n   - leaf1: AS65001\n   - spine1: AS65002\n   - leaf2: AS65003\n\n3\\. Implements specific routes on clients for end-to-end connectivity\n4\\. Follows the exact SRLinux configuration format provided\n5\\. Uses proper routing policies for BGP route exchange\n```", "```py\n# Agent: Network Configuration Specialist\n## Final Answer: \n# Network Configuration Report\n\n## Topology Information\n### Devices and Interfaces\n1\\. **client1**\n   - Interface: eth1\n   - IP: 10.1.1.2/24\n   - Static route: 10.1.4.2/32 via 10.1.1.1\n\n2\\. **leaf1** (AS65001)\n   - ethernet-1/1: 10.1.1.1/24 (connected to client1)\n   - ethernet-1/49: 10.1.2.1/24 (connected to spine1)\n   - BGP Router ID: 1.1.1.1\n\n3\\. **spine1** (AS65002)\n   - ethernet-1/1: 10.1.2.2/24 (connected to leaf1)\n   - ethernet-1/2: 10.1.3.1/24 (connected to leaf2)\n   - BGP Router ID: 2.2.2.2\n\n4\\. **leaf2** (AS65003)\n   - ethernet-1/1: 10.1.4.1/24 (connected to client2)\n   - ethernet-1/49: 10.1.3.2/24 (connected to spine1)\n   - BGP Router ID: 3.3.3.3\n\n5\\. **client2**\n   - Interface: eth1\n   - IP: 10.1.4.2/24\n   - Static route: 10.1.1.2/32 via 10.1.4.1\n\n## Configuration Commands Executed\nAll configurations were successfully applied to their respective devices as per the provided configuration scripts. The key configurations included:\n1\\. Interface IP addressing\n2\\. BGP neighbor relationships\n3\\. Route policies\n4\\. Static routes on client machines\n\n## Connectivity Test Results\n```", "```py\n\nThe ping test from client1 (10.1.1.2) to client2 (10.1.4.2) was successful with:\n- 100% success rate (4/4 packets)\n- Average round-trip time: 36.620ms\n- No packet loss\n\nThis confirms that the BGP configurations are working correctly and the network is properly forwarding traffic between the clients through the leaf-spine topology.\n```"]