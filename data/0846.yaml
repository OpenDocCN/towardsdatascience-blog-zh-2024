- en: Build Autonomous AI Agents with Function Calling
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用函数调用构建自主AI代理
- en: 原文：[https://towardsdatascience.com/build-autonomous-ai-agents-with-function-calling-0bb483753975?source=collection_archive---------0-----------------------#2024-04-02](https://towardsdatascience.com/build-autonomous-ai-agents-with-function-calling-0bb483753975?source=collection_archive---------0-----------------------#2024-04-02)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/build-autonomous-ai-agents-with-function-calling-0bb483753975?source=collection_archive---------0-----------------------#2024-04-02](https://towardsdatascience.com/build-autonomous-ai-agents-with-function-calling-0bb483753975?source=collection_archive---------0-----------------------#2024-04-02)
- en: Transform your chatbot into an agent that can interact with external APIs
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将您的聊天机器人转变为能够与外部API交互的代理
- en: '[](https://medium.com/@jyipkl?source=post_page---byline--0bb483753975--------------------------------)[![Julian
    Yip](../Images/2afc0ac6c4dcccaa57ffe70b2f5a14d0.png)](https://medium.com/@jyipkl?source=post_page---byline--0bb483753975--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0bb483753975--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0bb483753975--------------------------------)
    [Julian Yip](https://medium.com/@jyipkl?source=post_page---byline--0bb483753975--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@jyipkl?source=post_page---byline--0bb483753975--------------------------------)[![Julian
    Yip](../Images/2afc0ac6c4dcccaa57ffe70b2f5a14d0.png)](https://medium.com/@jyipkl?source=post_page---byline--0bb483753975--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0bb483753975--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0bb483753975--------------------------------)
    [Julian Yip](https://medium.com/@jyipkl?source=post_page---byline--0bb483753975--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0bb483753975--------------------------------)
    ·11 min read·Apr 2, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0bb483753975--------------------------------)
    ·阅读时间 11 分钟·2024年4月2日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Function Calling is not something new. In July 2023, OpenAI introduced Function
    Calling for their GPT models, a feature now being adopted by competitors. Google’s
    Gemini API recently supported it, and Anthropic is integrating it into Claude.
    Function Calling is becoming essential for large language models (LLMs), enhancing
    their capabilities. All the more useful to learn this technique!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 函数调用并不是什么新鲜事。2023年7月，OpenAI为其GPT模型引入了函数调用功能，现在这一功能正在被竞争对手采用。谷歌的Gemini API最近也支持了这一功能，而Anthropic正在将其集成到Claude中。函数调用正在成为大型语言模型（LLMs）中不可或缺的一部分，增强了它们的能力。学习这项技术会更加有用！
- en: With this in mind, I aim to write a comprehensive tutorial covering Function
    Calling beyond basic introductions (there are already plenty of tutorials for
    it). The focus will be on practical implementation, building a fully autonomous
    AI agent and integrating it with Streamlit for a ChatGPT-like interface. Although
    OpenAI is used for demonstration, this tutorial can be easily adapted for other
    LLMs supporting Function Calling, such as Gemini.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 牢记这一点，我计划编写一份全面的教程，深入探讨函数调用，超越基本介绍（市面上已有很多相关教程）。重点将放在实际应用上，构建一个完全自主的AI代理，并将其与Streamlit集成，提供类似ChatGPT的界面。虽然使用OpenAI进行演示，但本教程也可以轻松适应支持函数调用的其他LLM，例如Gemini。
- en: '**What is Function Calling for?**'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**函数调用有什么用途？**'
- en: 'Function Calling enables developers to describe functions (aka tools, you can
    consider this as actions for the model to take, like performing calculation, or
    making an order), and have the model intelligently choose to output a JSON object
    containing arguments to call those functions. In simpler terms, it allows for:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 函数调用使开发者能够描述函数（即工具，您可以将其视为模型执行的操作，例如进行计算或下订单），并让模型智能地选择输出一个包含调用这些函数所需参数的 JSON
    对象。更简单来说，它使得：
- en: '**Autonomous decision making**: Models can intelligently choose tools to respond
    to questions.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自主决策**：模型能够智能地选择工具来回答问题。'
- en: '**Reliable parsing**: Responses are in JSON format, instead of the more typical
    dialogue-like response. It might not seem much from the first look, but this is
    what allows LLM to connect to external systems, say via APIs with structured inputs.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠的解析**：响应以 JSON 格式返回，而不是更典型的对话式响应。乍一看，这似乎没什么，但正是这种格式让大型语言模型（LLM）能够与外部系统连接，比如通过结构化输入的
    API。'
- en: 'It opens up numerous possibilities:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 它开启了许多可能性：
- en: '**Autonomous AI assistants**: Bots can interact with internal systems for tasks
    like customer orders and returns, beyond providing answers to enquiries'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自主AI助手**：机器人可以与内部系统互动，执行诸如客户订单和退货等任务，而不仅仅是回答查询'
- en: '**Personal research assistants**: Say if you are planning for your travel,
    assistants can search the web, crawl content, compare options, and summarize results
    in Excel.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**个人研究助手**：假设你正在计划旅行，助手可以搜索网页、抓取内容、比较选项，并将结果总结在Excel中。'
- en: '**IoT voice commands**: Models can control devices or suggest actions based
    on detected intents, such as adjusting the AC temperature.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物联网语音命令**：模型可以控制设备或根据检测到的意图建议操作，比如调整空调温度。'
- en: '*(Sidetracking a bit: To realize such potentials, we must have a systematic
    way to design our prompts and to test them. I have written an article about this
    too!)*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*(稍微偏题：为了实现这些潜力，我们必须有一个系统化的方法来设计我们的提示并进行测试。我也写了一篇关于此的文章！)*'
- en: '[](/prompt-like-a-data-scientist-auto-prompt-optimization-and-testing-with-dspy-ff699f030cb7?source=post_page-----0bb483753975--------------------------------)
    [## Prompt Like a Data Scientist: Auto Prompt Optimization and Testing with DSPy'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/prompt-like-a-data-scientist-auto-prompt-optimization-and-testing-with-dspy-ff699f030cb7?source=post_page-----0bb483753975--------------------------------)
    [## 像数据科学家一样构建提示：使用DSPy进行自动提示优化和测试'
- en: Applying machine learning methodology to prompt building
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将机器学习方法应用于提示构建
- en: towardsdatascience.com](/prompt-like-a-data-scientist-auto-prompt-optimization-and-testing-with-dspy-ff699f030cb7?source=post_page-----0bb483753975--------------------------------)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/prompt-like-a-data-scientist-auto-prompt-optimization-and-testing-with-dspy-ff699f030cb7?source=post_page-----0bb483753975--------------------------------)
- en: Without further ado, let’s explore what Function Calling is about!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 不再浪费时间，让我们深入探讨一下功能调用是什么！
- en: The Structure of Function Calling
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能调用的结构
- en: Borrowing from [Gemini’s Function Calling documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/function-calling),
    Function Calling has the below structure, which works the same in OpenAI
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 借鉴[Gemini的功能调用文档](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/function-calling)，功能调用具有以下结构，在OpenAI中也适用
- en: '![](../Images/9793c45c8d104b8ac96e104541df9644.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9793c45c8d104b8ac96e104541df9644.png)'
- en: Image from [Gemini’s Function Calling documentation](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/function-calling)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 来自[Gemini的功能调用文档](https://cloud.google.com/vertex-ai/generative-ai/docs/multimodal/function-calling)的图片
- en: User issues prompt to the application
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户向应用程序发出提示
- en: Application passes the user-provided prompt, and the Function Declaration(s),
    which is a description of the tool(s) that the model could use
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序传递用户提供的提示以及功能声明，这些功能声明是对模型可能使用的工具的描述
- en: Based on the Function Declaration, the model suggests the tool to use, and the
    relevant request parameters. **Notice the model outputs the suggested tool and
    parameters only, WITHOUT actually calling the functions**
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于功能声明，模型建议使用的工具和相关请求参数。**注意，模型仅输出建议的工具和参数，并不会实际调用这些功能**
- en: '& 5\. Based on the response, the application invokes the relevant API'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '& 5\. 根据响应，应用程序调用相关的API'
- en: 6\. & 7\. The response from API is fed into the model again to output a human-readable
    response
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. & 7\. 来自API的响应再次传入模型，输出一个人类可读的响应
- en: 8\. Application returns the final response to the user, then repeat from 1.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 应用程序将最终响应返回给用户，然后从第1步开始重复。
- en: This might seem convuluted, but the concept will be illustrated in detail with
    example
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来可能有些复杂，但这个概念将通过示例详细说明
- en: Architecture
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 架构
- en: Before diving into the code, a few words about the demo application’s architecture
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入代码之前，先简要说明一下演示应用程序的架构
- en: '**Solution**'
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**解决方案**'
- en: Here we build an assistant for tourists visiting a hotel. The assistant has
    access to the following tools, which allows the assistant to access external applications.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为游客访问酒店构建一个助手。该助手可以访问以下工具，使其能够访问外部应用程序。
- en: '`get_items`, `purchase_item`: Connect to product catalog stored in database
    via API, for retrieving item list and making a purchase respectively'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_items`、`purchase_item`：通过API连接到存储在数据库中的产品目录，分别用于检索商品列表和进行购买'
- en: '`rag_pipeline_func`: Connect to document store with Retrieval Augmented Generation
    (RAG) to obtain information from unstructured texts e.g. hotel’s brochures'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rag_pipeline_func`：通过检索增强生成（RAG）连接到文档存储，从非结构化文本（例如酒店的宣传册）中获取信息'
- en: '![](../Images/aa901baf05ab30875134a9a0b958aa14.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aa901baf05ab30875134a9a0b958aa14.png)'
- en: '**Tech stack**'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**技术栈**'
- en: '**Embedding model**: [all-MiniLM-L6-v2](https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**嵌入模型**：[all-MiniLM-L6-v2](https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2)'
- en: '**Vector Database**: [Haystack’s InMemoryDocumentStore](https://docs.haystack.deepset.ai/docs/inmemorydocumentstore)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**向量数据库**：[Haystack的InMemoryDocumentStore](https://docs.haystack.deepset.ai/docs/inmemorydocumentstore)'
- en: '**LLM**: [GPT-4 Turbo accessed via OpenRouter](https://openrouter.ai/models/openai/gpt-4-1106-preview).
    With OpenRouter you can access different LLM APIs from Hong Kong without VPN.
    The flow can be adapted into using other LLMs with slight code change, provided
    they support Function Calling, say Gemini'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LLM**：[通过OpenRouter访问的GPT-4 Turbo](https://openrouter.ai/models/openai/gpt-4-1106-preview)。通过OpenRouter，你可以在香港无VPN访问不同的LLM
    API。此流程可以通过稍微修改代码，使用其他支持函数调用的LLM（例如Gemini）进行适配'
- en: '**LLM Framework**: [Haystack](https://haystack.deepset.ai/) for their ease
    of use, great documentation and transparency in pipeline construction. This tutorial
    is actually an extension to their [fantastic tutorial](https://haystack.deepset.ai/tutorials/40_building_chat_application_with_function_calling)
    for the same topic'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LLM框架**：[Haystack](https://haystack.deepset.ai/)因其易用性、出色的文档和管道构建的透明性而被选中。本教程实际上是他们[精彩教程](https://haystack.deepset.ai/tutorials/40_building_chat_application_with_function_calling)的延伸，主题相同'
- en: Now let’s begin!
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始吧！
- en: Sample Application
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例应用
- en: Preparation
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Head over to [Github](https://github.com/yip-kl/llm_function_calling_demo) to
    clone my code. The contents below can be found in the `function_calling_demo`
    Notebook.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[Github](https://github.com/yip-kl/llm_function_calling_demo)来克隆我的代码。以下内容可以在`function_calling_demo`
    Notebook中找到
- en: Please also create and activate a virtual environment, then `pip install -r
    requirements.txt` to install the required packages
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请先创建并激活一个虚拟环境，然后通过`pip install -r requirements.txt`安装所需的包
- en: '**Initialization**'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**初始化**'
- en: We first connect to OpenRouter. Alternatively using the original `OpenAIChatGenerator`
    without overwritting the `api_base_url`would also work, provided you have an OpenAI
    API key
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先连接到OpenRouter。或者，使用原始的`OpenAIChatGenerator`，如果没有覆盖`api_base_url`，也可以工作，前提是你有OpenAI的API密钥
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then we test can the `chat_generator` be successfully invoked
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们测试是否可以成功调用`chat_generator`
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Step 1: Establish data store'
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤1：建立数据存储
- en: 'Here we establish connection between our application and the two data sources:
    **Document store** for unstructured texts, and **application database** via API'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们建立了应用程序与两个数据源之间的连接：**文档存储**用于非结构化文本，**应用数据库**通过API连接
- en: '**Index Documents with a Pipeline**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用管道索引文档**'
- en: We provide sample texts in `documents` for the model to perform Retrival Augmented
    Generation (RAG). The texts are turned into embeddings and stored in an in-memory
    document store
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`documents`中提供样本文本，供模型执行检索增强生成（RAG）。这些文本被转换为嵌入并存储在内存文档存储中
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It should output this, corresponding to the `documents` we created as sample
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该输出与我们之前创建的`documents`样本相对应的内容
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Spin up API server**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**启动API服务器**'
- en: An API server made with Flask is created under `db_api.py` to connect to SQLite.
    Please spin it up by running `python db_api.py` in your terminal
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Flask创建的API服务器位于`db_api.py`，用于连接SQLite。请通过在终端运行`python db_api.py`来启动它
- en: '![](../Images/7036bc280c989f445aeae16d0544b7ed.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7036bc280c989f445aeae16d0544b7ed.png)'
- en: This would be shown in the terminal, if successfully executed
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功执行，这将在终端显示
- en: Also notice that some initial data has been added in `db_api.py`
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，一些初始数据已添加到`db_api.py`中
- en: '![](../Images/9adc825085a9c02489dc32ff3bf6fad1.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9adc825085a9c02489dc32ff3bf6fad1.png)'
- en: Sample data in the database
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库中的示例数据
- en: 'Step 2: Define the functions'
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤2：定义函数
- en: Here we prepare the actual functions for the model to invoke **AFTER** Function
    Calling (Step 4–5 as described in **The Structure of Function Calling**)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为模型准备实际的函数，以便在调用函数后（如**函数调用结构**中描述的第4-5步）进行调用
- en: '**RAG function**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**RAG功能**'
- en: Namely the `rag_pipeline_func`. This is for the model to provide an answer by
    searching through the texts stored in the Document Store. We first define the
    RAG retrieval as a Haystack pipeline
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 即`rag_pipeline_func`。这是让模型通过搜索存储在文档存储中的文本来提供答案。我们首先将RAG检索定义为Haystack管道
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Test if the function works
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 测试函数是否正常工作
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This should yield the following output. Notice the `replies` that the model
    gave is from the sample documents we provided before
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会产生以下输出。注意，模型给出的`replies`来自我们之前提供的样本文档
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We can then turn the `rag_pipe` into a function, which provides the `replies`
    only without adding in the other details
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将`rag_pipe`转化为一个函数，该函数仅提供`replies`，而不加入其他细节
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**API calls**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**API调用**'
- en: We define the `get_items` and `purchase_item`functions for interacting with
    the database
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了`get_items`和`purchase_item`函数，用于与数据库交互
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Define the tool list**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义工具列表**'
- en: Now that we have defined the fuctions, we need to let the model recognize those
    functions, and to instruct them how they are used, by providing descriptions for
    them.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了函数，我们需要让模型识别这些函数，并通过提供描述来指示它们如何使用。
- en: Since we are using OpenAI here, the `tools` is formatted as below following
    the [format required by Open AI](https://cookbook.openai.com/examples/function_calling_with_an_openapi_spec)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这里使用的是OpenAI，`tools`格式如下，遵循[OpenAI要求的格式](https://cookbook.openai.com/examples/function_calling_with_an_openapi_spec)
- en: '[PRE10]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Step 3: Putting it all together**'
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**步骤3：将所有内容整合**'
- en: 'We now have the necessary inputs to test Function Calling! Here we do a few
    things:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了必要的输入来测试函数调用！在这里我们做了几件事：
- en: Provide the initial prompt to the model, to give it some context
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供初始提示给模型，以便给它一些上下文
- en: Provide a sample user-generated message
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个示例用户生成的消息
- en: Most importantly, we pass the tool list to the chat generator in `tools`
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最重要的是，我们将工具列表传递给`tools`中的聊天生成器
- en: '[PRE11]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now let’s inspect the response. Notice how the Function Calling returns both
    the function chosen by the model, and the arguments for invoking the chosen function.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检查响应。注意函数调用是如何返回模型选择的函数以及调用该函数的参数的。
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When presented with another question, the model will use another tool that is
    more relevant
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当出现另一个问题时，模型将使用另一个更相关的工具
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Again, notice that no actual function is invoked here, this is what we will
    do next!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 再次注意，这里并没有实际调用函数，这是我们接下来要做的！
- en: '**Calling the function**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**调用函数**'
- en: We can then feed the arguments into the chosen function
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将参数传递到选定的函数中
- en: '[PRE17]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The response from `rag_pipeline_func` can then passed as a context to the chat
    by appending it under the `messages`, for the model to provide the final answer
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后`rag_pipeline_func`的响应可以作为上下文传递给聊天，通过将其附加到`messages`下，供模型提供最终答案
- en: '[PRE19]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We now have completed the chat cycle!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了聊天循环！
- en: 'Step 4: Turn into an interactive chat'
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤4：转变为互动聊天
- en: The code above shows how Function Calling can be done, but we want to go a step
    further by turning it into an interactive chat
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码展示了如何进行函数调用，但我们想更进一步，将其转化为互动聊天
- en: Here I showcase two methods to do it, from the more primitive `input()` that
    prints the dialogue into the notebook itself, to rendering it through **Streamlit**
    to provide it with an ChatGPT-like UI
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我展示了两种方法：从更原始的`input()`，它将对话打印到笔记本本身，到通过**Streamlit**渲染它，提供类似ChatGPT的UI
- en: '`**input()**` **loop**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`**input()**` **循环**'
- en: 'The code is copied from [Haystack’s tutorial](https://haystack.deepset.ai/tutorials/40_building_chat_application_with_function_calling),
    which allows us to quickly test the model. *Note: This application is created
    to demonstrate the idea of Function Calling, and is NOT meant to be perfectly
    robust e.g. supporting the order of multiple items at the same time, no hallucination,
    etc.*'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码来自[Haystack的教程](https://haystack.deepset.ai/tutorials/40_building_chat_application_with_function_calling)，使我们能够快速测试模型。*注意：此应用程序是为了展示函数调用的概念，而非旨在做到完美稳健，例如不支持同时处理多个项目的顺序、没有幻想等。*
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![](../Images/a3322060f0f01905204135a0cec63711.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a3322060f0f01905204135a0cec63711.png)'
- en: Running interactive chats in the IDE
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在IDE中运行互动聊天
- en: While it works, we might want to have something that looks nicer.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它可以工作，但我们可能希望有一些看起来更漂亮的东西。
- en: '**Streamlit interface**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**Streamlit界面**'
- en: Streamlit turns data scripts into shareable web apps, which provides a neat
    UI for our application. The code shown above are adapted into a Streamlit application
    under the `streamlit` folder of my repo
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit将数据脚本转化为可分享的Web应用，这为我们的应用提供了整洁的UI。上面展示的代码被改编成一个Streamlit应用，位于我仓库的`streamlit`文件夹下。
- en: 'You can run it by:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下方式运行：
- en: If you have not done so already, spin up the API server with `python db_api.py`
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有做，使用`python db_api.py`启动API服务器
- en: Set the OPENROUTER_API_KEY as environment variable e.g. `export OPENROUTER_API_KEY
    = ‘@REPLACE WITH YOUR API KEY’` assuming you are on Linux / executing with git
    bash
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将OPENROUTER_API_KEY设置为环境变量，例如`export OPENROUTER_API_KEY = ‘@REPLACE WITH YOUR
    API KEY’`，假设你在Linux上或使用git bash执行
- en: Navigate to the `streamlit` folder in the terminal with `cd streamlit`
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中使用`cd streamlit`命令导航到`streamlit`文件夹
- en: Run Streamlit with `streamlit run app.py`. A new tab should be automatically
    created in your browser running the application
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`streamlit run app.py`运行Streamlit。你的浏览器中应该会自动创建一个新标签页来运行该应用程序。
- en: That’s basically it! I hope you enjoy this article.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！希望你喜欢这篇文章。
- en: '![](../Images/d47ce72177773e21a95ff14e3e8e5b1d.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d47ce72177773e21a95ff14e3e8e5b1d.png)'
- en: Streamlit UI
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Streamlit 用户界面
- en: '**Unless otherwise noted, all images are by the author*'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**除非另有说明，所有图片均由作者提供*'
