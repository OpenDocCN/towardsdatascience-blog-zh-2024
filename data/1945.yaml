- en: Algorithm-Agnostic Model Building with MLflow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MLflow进行算法无关的模型构建
- en: 原文：[https://towardsdatascience.com/algorithm-agnostic-model-building-with-mlflow-b106a5a29535?source=collection_archive---------0-----------------------#2024-08-10](https://towardsdatascience.com/algorithm-agnostic-model-building-with-mlflow-b106a5a29535?source=collection_archive---------0-----------------------#2024-08-10)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/algorithm-agnostic-model-building-with-mlflow-b106a5a29535?source=collection_archive---------0-----------------------#2024-08-10](https://towardsdatascience.com/algorithm-agnostic-model-building-with-mlflow-b106a5a29535?source=collection_archive---------0-----------------------#2024-08-10)
- en: A beginner-friendly step-by-step guide to creating generic ML pipelines using
    mlflow.pyfunc
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 面向初学者的逐步指南，帮助你使用mlflow.pyfunc创建通用的机器学习管道
- en: '[](https://menawang.medium.com/?source=post_page---byline--b106a5a29535--------------------------------)[![Mena
    Wang, PhD](../Images/eac9fa55026f9fc119bc868439ff311b.png)](https://menawang.medium.com/?source=post_page---byline--b106a5a29535--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b106a5a29535--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b106a5a29535--------------------------------)
    [Mena Wang, PhD](https://menawang.medium.com/?source=post_page---byline--b106a5a29535--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://menawang.medium.com/?source=post_page---byline--b106a5a29535--------------------------------)[![Mena
    Wang, PhD](../Images/eac9fa55026f9fc119bc868439ff311b.png)](https://menawang.medium.com/?source=post_page---byline--b106a5a29535--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b106a5a29535--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b106a5a29535--------------------------------)
    [Mena Wang, PhD](https://menawang.medium.com/?source=post_page---byline--b106a5a29535--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b106a5a29535--------------------------------)
    ·8 min read·Aug 10, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b106a5a29535--------------------------------)
    ·阅读时间：8分钟·2024年8月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: One common challenge in MLOps is the hassle of migrating between various algorithms
    or frameworks. This beginner-friendly article helps you tackle the challenge by
    leveraging algorithm-agnostic model building using `mlflow.pyfunc`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: MLOps中的一个常见挑战是不同算法或框架之间迁移的麻烦。本文面向初学者，帮助你通过使用`mlflow.pyfunc`进行算法无关的模型构建来应对这一挑战。
- en: '**Why Agorithm-Agonostic Model Building?**'
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**为什么选择算法无关的模型构建？**'
- en: 'Consider this scenario: we have an sklearn model currently deployed in production
    for a particular use case. Later on, we find that a deep learning model performs
    even better. If the sklearn model was deployed in its native format, transitioning
    to the deep learning model could be a hassle 🤪 because the two model artifacts
    are very different.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有这样一个场景：我们有一个当前在生产环境中部署的sklearn模型，用于某个特定的使用场景。后来我们发现，深度学习模型的表现更好。如果sklearn模型是以其原生格式部署的，切换到深度学习模型可能会很麻烦🤪，因为这两种模型的文件格式差异很大。
- en: '![](../Images/33a9e7864d65b8a617c6d295f3d2b53a.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/33a9e7864d65b8a617c6d295f3d2b53a.png)'
- en: Image generated by prompting Gemini
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由Gemini生成的图像
- en: To address such a challenge, the `mlflow.pyfunc` model flavor provides a versatile
    and generic approach to building and deploying machine learning models in Python.
    😎
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这一挑战，`mlflow.pyfunc`模型类型提供了一种多功能的通用方法，用于在Python中构建和部署机器学习模型。😎
- en: '**1\. Generic Model Building:** The `pyfunc` model flavor offers a uniform
    way to build models, regardless of the framework or library used for the build.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**1. 通用模型构建：** `pyfunc`模型类型提供了一种统一的方式来构建模型，无论使用的是哪个框架或库。'
- en: '**2\. Encapsulation of the ML Pipeline:** `pyfunc` allows us to encapsulate
    the model with its pre- and post-processing steps or other custom logic desirable
    during model consumption.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**2. ML管道的封装：** `pyfunc`允许我们将模型与其前后处理步骤或在模型使用过程中所需的其他自定义逻辑一起封装。'
- en: '**3\. Unified Model Representation:** We can deploy a model, a machine learning
    pipeline, or any python function using `pyfunc` without worrying about the model''s
    underlying format. Such a unified representation simplifies model deployment,
    redeployment, and downstream scoring.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**3. 统一的模型表示：** 我们可以使用`pyfunc`部署一个模型、一个机器学习管道或任何Python函数，而无需担心模型的底层格式。这种统一的表示简化了模型的部署、重新部署以及后续评分。'
- en: Sounds interesting? If yes, this article is here to get you started with `mlflow.pyfunc`.
    🥂
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来很有趣？如果是的话，本文将帮助你开始使用`mlflow.pyfunc`。🥂
- en: Firstly, let’s go through a simple toy example of creating `mlflow.pyfunc` class.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，让我们通过一个简单的示例来创建`mlflow.pyfunc`类。
- en: Then, we will define a `mlflow.pyfunc` class that encapsulates a machine learning
    pipeline (an estimator plus some preprocessing logic as an example). We will also
    train, log and load this ML pipeline for inference.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们将定义一个封装机器学习管道的`mlflow.pyfunc`类（以估算器加上一些预处理逻辑为例）。我们还将训练、记录并加载这个机器学习管道进行推理。
- en: Lastly, let’s take a deep dive into the encapsulated `mlflow.pyfunc` object,
    explore the rich metadata and artifacts automatically tracked for us by `mlflow`,
    and get a better grasp of the full power that `mlflow.pyfunc` offers.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，让我们深入探讨封装的`mlflow.pyfunc`对象，探索`mlflow`自动为我们跟踪的丰富元数据和工件，更好地理解`mlflow.pyfunc`所提供的全部功能。
- en: 🔗 All code and config are available [on GitHub](https://github.com/MenaWANG/mlflow-demo/blob/main/pyfunc_basic.ipynb).
    🧰
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 🔗 所有代码和配置可以在[GitHub](https://github.com/MenaWANG/mlflow-demo/blob/main/pyfunc_basic.ipynb)上找到。🧰
- en: '{pyfunc} Simple Toy Model'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '{pyfunc} 简单玩具模型'
- en: First, let’s create a simple toy `mlflow.pyfunc` model and then use it with
    the mlflow workflow.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个简单的玩具`mlflow.pyfunc`模型，然后将其与mlflow工作流一起使用。
- en: 'Step 1: Create the model'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一步：创建模型
- en: 'Step 2: Log the model'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二步：记录模型
- en: 'Step 3: Load the logged model to perform the inference'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三步：加载已记录的模型进行推理
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see from the example above, you can create an `mlflow.pyfunc` model
    to implement any customed Python function you see fit for your ML solution, which
    doesn’t have to be an off-the-shelf machine learning algorithm.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如上例所示，你可以创建一个`mlflow.pyfunc`模型，以实现任何适合你机器学习解决方案的自定义Python函数，这不一定是现成的机器学习算法。
- en: You can then log this model and load it later to perform the inference.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以记录这个模型并在之后加载它以执行推理。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**{pyfunc} Encapsulated XGBoost Pipeline**'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**{pyfunc} 封装的XGBoost管道**'
- en: Now, let’s create an ML pipeline encapsulating an estimator with additional
    custom logic.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个封装了估算器和额外自定义逻辑的机器学习管道。
- en: In the example below, the `XGB_PIPELINE` class is a wrapper that integrates
    the estimator with preprocessing steps, which can be desirable for some MLOps
    implementations. Leveraging `mlflow.pyfunc`, this wrapper is estimator-agnostic
    and offers a uniform model representation. Specifically,
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，`XGB_PIPELINE`类是一个包装器，它将估算器与预处理步骤结合在一起，对于某些MLOps实现来说非常有用。借助`mlflow.pyfunc`，这个包装器与估算器无关，提供统一的模型表示。具体来说：
- en: '`fit()`: Instead of using XGBoost''s native API (`xgboost.train()`), this class
    uses `.fit()`, which adheres to sklearn conventions, enabling straightforward
    integration into sklearn pipelines and ensuring consistency across different estimators.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fit()`：这个类使用`.fit()`方法，而不是使用XGBoost的原生API（`xgboost.train()`），该方法遵循sklearn的惯例，能够轻松集成到sklearn管道中，并确保不同估算器之间的一致性。'
- en: '`DMatrix()`: `DMatrix` is a core data structure in XGBoost that optimizes data
    for training and prediction. In this class, the step to transform a pandas DataFrame
    into a `DMatrix` is wrapped within the class, enabling seamless integration with
    pandas DataFrames like all other sklearn estimators.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DMatrix()`：`DMatrix`是XGBoost中的核心数据结构，它优化了用于训练和预测的数据。在这个类中，将pandas DataFrame转换为`DMatrix`的步骤被封装在类内部，使其能够像所有其他sklearn估算器一样无缝地与pandas
    DataFrame集成。'
- en: '`predict()` : This is the `mlflow.pyfunc` model’s universal inference API.
    It is consistent for this ML pipeline, for the toy model above, for any machine
    learning algorithms or custom logic we wrap in an `mlflow.pyfunc` model.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`predict()`：这是`mlflow.pyfunc`模型的通用推理API。对于这个机器学习管道、上面的玩具模型以及我们封装在`mlflow.pyfunc`模型中的任何机器学习算法或自定义逻辑，它都保持一致。'
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, let’s train and log this model.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们训练并记录这个模型。
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The model has been logged successfully. ✌ ️Now, let’s load it for inference-making.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 模型已经成功记录。✌ ️现在，让我们加载它进行推理。
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Deep Dive into the Mlflow.pyfunc Object**'
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**深入探讨Mlflow.pyfunc对象**'
- en: The above process is pretty smooth, isn’t it? This represents the basic functionality
    of the `mlflow.pyfunc` object. Now, let’s dive deeper to explore the full power
    that `mlflow.pyfunc` has to offer.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 上述过程相当顺利，不是吗？这代表了`mlflow.pyfunc`对象的基本功能。现在，让我们深入挖掘，探索`mlflow.pyfunc`所能提供的全部强大功能。
- en: '***1\. model_info***'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '***1\. model_info***'
- en: In the example above, the `model_info` object returned by `mlflow.pyfunc.log_model()`
    is an instance of `mlflow.models.model.ModelInfo` class. It contains metadata
    and information about the logged model. For example
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`mlflow.pyfunc.log_model()`返回的`model_info`对象是`mlflow.models.model.ModelInfo`类的一个实例。它包含了关于已记录模型的元数据和信息。例如：
- en: '![](../Images/db3200cecb1423a55f817cd3fa348526.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/db3200cecb1423a55f817cd3fa348526.png)'
- en: Some attributes of the model_info object
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一些`model_info`对象的属性
- en: Feel free to run `dir(model_info)` to explore further or check out [the source
    code](https://mlflow.org/docs/latest/_modules/mlflow/models/model.html) for all
    the attributes defined. The attribute I use the most is `model_uri`, which indicates
    where the logged model can be found within the `mlflow` tracking system.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 随时运行 `dir(model_info)` 进行进一步探索，或者查看 [源代码](https://mlflow.org/docs/latest/_modules/mlflow/models/model.html)
    了解所有定义的属性。我最常用的属性是 `model_uri`，它指示已记录模型在 `mlflow` 跟踪系统中的位置。
- en: '***2\. loaded_model***'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '***2\. loaded_model***'
- en: It is worthwhile clarifying that the `loaded_model` is not an instance of the
    `XGB_PIPELINE` class, but rather a wrapper object provided by `mlflow.pyfunc`
    for algorithm-agnostic inference making. As shown below, an error will be returned
    if you attempt to retrieve attributes of the `XGB_PIPELINE` class from the `loaded_model`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 值得澄清的是，`loaded_model` 不是 `XGB_PIPELINE` 类的实例，而是由 `mlflow.pyfunc` 提供的一个包装对象，用于实现与算法无关的推理。如下面所示，如果你尝试从
    `loaded_model` 中获取 `XGB_PIPELINE` 类的属性，将会返回一个错误。
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '***3\. unwrapped_model***'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '***3\. unwrapped_model***'
- en: All right, you may ask, then where is the trained instance of `XGB_PIPELINE`?
    Is it logged and retrievable through `mlflow`, too?
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，你可能会问，那么训练好的 `XGB_PIPELINE` 实例在哪里呢？它也会被通过 `mlflow` 记录并可检索吗？
- en: Don’t worry; it is kept safe for you to unwrap easily, as shown below.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 别担心；它被安全地保留，你可以像下面所示轻松解包。
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That’s how it is done. 😎 With the `unwrapped_model`, you can access any properties
    or methods of your custom ML pipeline just like this! I sometimes add handy methods
    such as `explain_model` or `post_processing` in the custom pipeline, or include
    helpful attributes to trace the model training process and offer diagnostics 🤩…
    Well, I’d better stop here and leave those for the following articles. Suffice
    it to say, you can feel free to custom your ML pipeline for your use case and
    know that
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。😎 使用 `unwrapped_model`，你可以像这样访问你的自定义 ML 流水线的任何属性或方法！我有时会在自定义流水线中添加方便的方法，如
    `explain_model` 或 `post_processing`，或者包含有助于追踪模型训练过程和提供诊断的属性 🤩… 好吧，我最好到此为止，把这些留到后续文章讲解。可以简单地说，你可以自由定制你的
    ML 流水线，以适应你的使用场景，并知道
- en: You will have access to all these tailor-made methods and attributes for downstream
    use and
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将能够访问所有这些为下游使用定制的方法和属性。
- en: This tailor-made custom model will be wrapped within the uniform `mlflow.pyfunc`
    inference API and hence enjoy a smooth migration to other estimators if necessary.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个定制的模型将被包装在统一的 `mlflow.pyfunc` 推理 API 中，因此如果需要，可以平滑地迁移到其他估算器。
- en: '***4\. Context***'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '***4\. 上下文***'
- en: You may have noticed that there is a `context` parameter for the `predict` methods
    in both `mlflow.pyfunc` class defined above. But interestingly, this parameter
    is not required when we make predictions with the loaded model. Why❓
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，`mlflow.pyfunc` 类的 `predict` 方法中有一个 `context` 参数。但有趣的是，当我们使用加载的模型进行预测时，这个参数并不是必须的。为什么❓
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is because the `loaded_model` above is a wrapper object provided by `mlflow`.
    If we use the unwrapped model instead, we need to define the context explicitly,
    as shown below; otherwise, the code will return an error.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为上面的 `loaded_model` 是一个由 `mlflow` 提供的包装对象。如果我们使用未包装的模型，则需要显式定义 `context`，如下面所示；否则，代码将返回错误。
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: So, what is this `context`? And what role does it play in the `predict` method?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是 `context`？它在 `predict` 方法中扮演什么角色？
- en: The `context` is a `PythonModelContext` object that contains artifacts the`pyfunc`
    model can use when performing inference. It is created implicitly and automatically
    by the `log_method()` method.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`context` 是一个 `PythonModelContext` 对象，它包含 `pyfunc` 模型在进行推理时可以使用的工件。它是通过 `log_method()`
    方法隐式且自动创建的。'
- en: Navigate to the `mlruns` subfolder in your project repo, which is automatically
    created by `mlflow` when you log an `mlflow` model. Find the folder named after
    the model’s `run_id`. Inside, you’ll find the model artifacts automatically logged
    for you, as shown below.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到你项目仓库中的 `mlruns` 子文件夹，这是 `mlflow` 在你记录 `mlflow` 模型时自动创建的文件夹。找到一个以模型的 `run_id`
    命名的文件夹。里面你会找到为你自动记录的模型工件，如下面所示。
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/19ac0e4424ede80aedef7fde2314054d.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/19ac0e4424ede80aedef7fde2314054d.png)'
- en: artifacts folder in a logged `mlflow.pyfunc` model
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 记录的 `mlflow.pyfunc` 模型中的工件文件夹
- en: Pretty neat, isn’t it?😁 Feel free to explore these artifacts at your leisure;
    below are the screenshots of the `requirements` and `MLmodel` file from the folder
    FYR.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 相当整洁，是吧？😁 随时可以轻松地浏览这些工件；下面是文件夹中 `requirements` 和 `MLmodel` 文件的截图，供参考。
- en: The `requiarements` below specifies the versions of dependencies required to
    recreate the environment for running the model.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`requiarements`指定了重建环境以运行模型所需的依赖项版本。
- en: '![](../Images/60ec4a56daa108ee438d8ae822f0220c.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/60ec4a56daa108ee438d8ae822f0220c.png)'
- en: The `requirements.txt` file in the artifacts folder
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 工件文件夹中的`requirements.txt`文件
- en: The `MLmodel` doc below defines the metadata and configuration necessary to
    load and serve the model in YAML format.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的`MLmodel`文档定义了加载和提供模型所需的元数据和配置，以YAML格式呈现。
- en: '![](../Images/7e4d7a6e8cc4576ae6e3e756c44c8ffa.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7e4d7a6e8cc4576ae6e3e756c44c8ffa.png)'
- en: The `MLmodel` file in the artifacts folder
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 工件文件夹中的`MLmodel`文件
- en: '**Conclusion**'
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: There you have it, the `mlflow.pyfunc` approach to model building. It is a lot
    of information, so let’s recap
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，这是`mlflow.pyfunc`模型构建方法。这是很多信息，所以让我们回顾一下。
- en: '`mlflow.pyfunc` offers a unified model representation unaffected by the underlying
    framework or libraries used to build the model.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mlflow.pyfunc`提供了一个统一的模型表示，独立于构建模型时使用的底层框架或库。'
- en: We can even encapsulate rich custom logic into a `mlflow.pyfunc` model to tailor
    each use case while keeping the inference API consistent and unified.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们甚至可以将丰富的自定义逻辑封装到`mlflow.pyfunc`模型中，以便根据每个用例进行定制，同时保持推理API的一致性和统一性。
- en: The underlying model can be unwrapped from the loaded `mlflow.pyfunc` model,
    allowing us to leverage more custom methods/attributes tailored for each use case.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以从加载的`mlflow.pyfunc`模型中解包底层模型，从而使我们能够利用更多的自定义方法/属性来满足每个用例的需求。
- en: An `mlflow.pyfunc` model object is logged with rich metadata and artifacts that
    are automatically tracked by `mlflow`.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`mlflow.pyfunc`模型对象会与丰富的元数据和工件一起记录，这些都会被`mlflow`自动追踪。'
- en: This unified `mlflow.pyfunc` model representation can streamline the process
    of experimenting and migrating between different algorithms to achieve optimal
    performance (more on this in the following articles, pls see below)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这种统一的`mlflow.pyfunc`模型表示可以简化在不同算法之间进行实验和迁移的过程，以实现最佳性能（更多内容将在后续文章中讨论，请见下文）。
- en: '**Next Steps**'
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**下一步**'
- en: Now we have got the basics sorted, in the following articles, we can continue
    to discuss more advanced usage of `mlflow.pyfunc`. 😎 Below are some topics from
    the top of my head; feel free to leave a comment and let me know what you would
    like to see. 🥰
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经整理好了基础内容，接下来的文章中，我们可以继续讨论`mlflow.pyfunc`的更高级使用方法。😎 以下是我随便想到的一些主题；欢迎留言告诉我你想看到什么。🥰
- en: Leverage the uniform API to experiment with various algorithms and identify
    the optimal solution for a use case.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 利用统一的API进行不同算法的实验，并为特定用例识别最佳解决方案。
- en: Hyperparameter tuning with `mlflow.pyfunc` custom models.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`mlflow.pyfunc`自定义模型进行超参数调优。
- en: Encapsulating custom logic into an `mlflow.pyfunc` ML pipeline to tailor model
    consumption and diagnostics.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将自定义逻辑封装到`mlflow.pyfunc` ML管道中，以便定制模型的使用和诊断。
- en: If you enjoyed reading this article, follow me on [Medium](https://menawang.medium.com/).
    😁
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇文章，可以在[Medium](https://menawang.medium.com/)上关注我。😁
- en: 💼[LinkedIn](https://www.linkedin.com/in/mena-ning-wang/) | 😺[GitHub](https://github.com/MenaWANG)
    | 🕊️[Twitter/X](https://x.com/mena_wang)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 💼[LinkedIn](https://www.linkedin.com/in/mena-ning-wang/) | 😺[GitHub](https://github.com/MenaWANG)
    | 🕊️[Twitter/X](https://x.com/mena_wang)
- en: Unless otherwise noted, all images are by the author.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，所有图片均由作者提供。
