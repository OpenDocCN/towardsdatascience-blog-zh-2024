- en: Experimenting with MLFlow and Microsoft Fabric
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与 MLFlow 和 Microsoft Fabric 的实验
- en: 原文：[https://towardsdatascience.com/experimenting-with-mlflow-and-microsoft-fabric-68f43043ff34?source=collection_archive---------7-----------------------#2024-04-22](https://towardsdatascience.com/experimenting-with-mlflow-and-microsoft-fabric-68f43043ff34?source=collection_archive---------7-----------------------#2024-04-22)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/experimenting-with-mlflow-and-microsoft-fabric-68f43043ff34?source=collection_archive---------7-----------------------#2024-04-22](https://towardsdatascience.com/experimenting-with-mlflow-and-microsoft-fabric-68f43043ff34?source=collection_archive---------7-----------------------#2024-04-22)
- en: Fabric Madness part 4
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Fabric 疯狂系列第4部分
- en: '[](https://medium.com/@roger_noble?source=post_page---byline--68f43043ff34--------------------------------)[![Roger
    Noble](../Images/869b5b0f237f24b119ca6c41c2e31162.png)](https://medium.com/@roger_noble?source=post_page---byline--68f43043ff34--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--68f43043ff34--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--68f43043ff34--------------------------------)
    [Roger Noble](https://medium.com/@roger_noble?source=post_page---byline--68f43043ff34--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@roger_noble?source=post_page---byline--68f43043ff34--------------------------------)[![Roger
    Noble](../Images/869b5b0f237f24b119ca6c41c2e31162.png)](https://medium.com/@roger_noble?source=post_page---byline--68f43043ff34--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--68f43043ff34--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--68f43043ff34--------------------------------)
    [Roger Noble](https://medium.com/@roger_noble?source=post_page---byline--68f43043ff34--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--68f43043ff34--------------------------------)
    ·10 min read·Apr 22, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--68f43043ff34--------------------------------)
    ·10分钟阅读·2024年4月22日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e7c1d4c5510a3052bfb3ab90be98619c.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e7c1d4c5510a3052bfb3ab90be98619c.png)'
- en: Image by author and ChatGPT. “Design an illustration, with imagery representing
    data experiments, focusing on basketball data” prompt. ChatGPT, 4, OpenAI, 15April.
    2024\. [https://chat.openai.com.](https://chat.openai.com./)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者和 ChatGPT。“设计一幅插图，展示数据实验的图像，聚焦于篮球数据”的提示。ChatGPT，4，OpenAI，2024年4月15日。[https://chat.openai.com.](https://chat.openai.com./)
- en: '*A Huge thanks to* [*Martim Chaves*](https://medium.com/@mgrc99) *who co-authored
    this post and developed the example scripts.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*特别感谢* [*Martim Chaves*](https://medium.com/@mgrc99) *共同撰写了这篇文章并开发了示例脚本。*'
- en: It’s no secret that Machine Learning (ML) systems require careful tuning to
    become truly useful, and it would be an extremely rare occurrence for a model
    to work perfectly the first time it’s run!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 毋庸置疑，机器学习（ML）系统需要精心调优才能真正发挥作用，而模型在第一次运行时完美工作是极为罕见的情况！
- en: When first starting out on your ML journey, an easy trap to fall into is to
    try lots of different things to improve performance, but not recording these configurations
    along the way. This then makes it difficult to know which configuration (or combination
    of configurations) had the best performance.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始你的 ML 之旅时，一个容易陷入的陷阱是尝试很多不同的方式来提高性能，但却没有记录这些配置。这会导致你很难知道哪个配置（或配置组合）表现最佳。
- en: When developing models, there are lots of “knobs” and “levers” that can be adjusted,
    and often the best way to improve is to try different configurations and see which
    one works best. These things include [improving the features being used](https://medium.com/@roger_noble/feature-engineering-with-microsoft-fabric-and-pyspark-16d458018744),
    trying different model architectures, adjusting the model’s hyperparameters, and
    others. Experimentation needs to be systematic, and the results need to be logged.
    That’s why having a good setup to carry out these experiments is fundamental in
    the development of any practical ML System, in the same way that source control
    is fundamental for code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发模型时，有许多可以调整的“旋钮”和“杠杆”，通常提高性能的最佳方法是尝试不同的配置，看看哪个效果最好。这些内容包括[改进使用的特征](https://medium.com/@roger_noble/feature-engineering-with-microsoft-fabric-and-pyspark-16d458018744)、尝试不同的模型架构、调整模型的超参数等。实验需要系统化，并且结果需要记录。因此，拥有一个良好的实验设置对于任何实用的
    ML 系统开发至关重要，就像源代码管理对于代码开发的重要性一样。
- en: This is where *experiments* come in to play. Experiments are a way to keep track
    of these different configurations, and the results that come from them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是*实验*开始发挥作用的地方。实验是一种跟踪不同配置及其结果的方法。
- en: What’s great about experiments in Fabric is that they are actually a wrapper
    for [MLFlow](https://mlflow.org/), a hugely popular, open-source platform for
    managing the end-to-end machine learning lifecycle. This means that we can use
    all of the great features that MLFlow has to offer, but with the added benefit
    of not having to worry about setting up the infrastructure that a collaborative
    MLFlow environment would require. This allows us to focus on the fun stuff 😎!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Fabric中使用实验的好处是，它们实际上是[MLFlow](https://mlflow.org/)的一个封装，MLFlow是一个非常流行的开源平台，用于管理端到端的机器学习生命周期。这意味着我们可以使用MLFlow提供的所有强大功能，但又不必担心设置一个需要协作环境的MLFlow基础设施。这使我们可以专注于更有趣的部分
    😎！
- en: 'In this post, we’ll be going over how to use experiments in Fabric, and how
    to log and analyse the results of these experiments. Specifically, we’ll cover:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将讨论如何在Fabric中使用实验，以及如何记录和分析这些实验的结果。具体来说，我们将涵盖：
- en: How does MLFlow work?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MLFlow是如何工作的？
- en: Creating and Setting experiments
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和设置实验
- en: Running experiments and Logging Results
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行实验和记录结果
- en: Analysing Results
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析结果
- en: At a high level, MLFlow is a platform that helps manage the end-to-end machine
    learning lifecycle. It’s a tool that helps with tracking experiments, packaging
    code into reproducible runs, and sharing and deploying models. It’s essentially
    a database that’s dedicated to keeping track of all the different configurations
    and results of the experiments that you run.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，MLFlow是一个帮助管理端到端机器学习生命周期的平台。它是一个帮助跟踪实验、将代码打包成可重现运行、共享和部署模型的工具。它本质上是一个专门用于跟踪你运行的各种实验配置和结果的数据库。
- en: There are two main organisational structures in MLFlow — **experiments** and
    **runs**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在MLFlow中有两个主要的组织结构——**实验**和**运行**。
- en: An experiment is a group of runs, where a run is the execution of a block of
    code, a function or a script. This could be training a model, but it could also
    be used to track anything where things might change between runs. An experiment
    is then a way to group related runs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 实验是一个运行的集合，其中每个运行是执行一段代码、一个函数或一个脚本。这可能是训练一个模型，但也可以用于跟踪任何在不同运行间可能会变化的内容。实验是一种将相关运行进行分组的方式。
- en: For each run, information can be logged and attached to it — these could be
    metrics, hyperparameters, tags, artifacts (like plots, files or other useful outputs),
    and even models! By attaching models to runs, we can keep track of which model
    was used in which run, and how it performed. Think of it like source control for
    models, which is something we’ll go into in the next post.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个运行，可以记录信息并将其附加到该运行上——这些信息可以是指标、超参数、标签、工件（例如图表、文件或其他有用的输出），甚至是模型！通过将模型附加到运行上，我们可以追踪哪个模型在某个运行中被使用，以及它的表现如何。可以将其视为模型的版本控制，这也是我们将在下一篇文章中深入探讨的内容。
- en: Runs can be filtered and compared. This allows us to understand which runs were
    more successful, and select the best performing run and use its setup (for example,
    in deployment).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 运行可以被过滤和比较。这使我们能够了解哪些运行更成功，并选择表现最佳的运行，使用其配置（例如，在部署中）。
- en: Now that we’ve covered the basics of how MLFlow works, let’s get into how we
    can use it in Fabric!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了MLFlow的基本工作原理，接下来让我们了解如何在Fabric中使用它！
- en: Creating and setting experiments
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和设置实验
- en: Like everything in Fabric, creating items can be done in a few ways, either
    from the workspace **+ New** menu, using the Data Science experience or in code.
    In this case, we’ll be using the Data Science experience.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在Fabric中的一切一样，创建项目可以通过几种方式完成，既可以通过工作区中的**+ 新建**菜单，也可以使用数据科学体验或通过代码。在这种情况下，我们将使用数据科学体验。
- en: '![](../Images/be643f7ab148a28cc673d70288df619f.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/be643f7ab148a28cc673d70288df619f.png)'
- en: Fig. 1 — Creating an Experiment using the UI. Image by author.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图1——使用UI创建实验。图像来源：作者。
- en: 'Once that is done, to use that experiment in a Notebook, we need to `import
    mlflow` and set up the experiment name:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，为了在Notebook中使用该实验，我们需要`import mlflow`并设置实验名称：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, an experiment can be created from code, which requires one extra
    command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，实验也可以通过代码创建，这需要一个额外的命令：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Note that, if an experiment with that name already exists, `create_experiment`
    will throw an error. We can avoid this by first checking for the existence of
    an experiment, and only creating it if it doesn''t exist:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果已存在相同名称的实验，`create_experiment`将抛出一个错误。我们可以通过先检查实验是否存在，只有在不存在时才创建它来避免这个问题：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that we have the experiment set in the current context, we can start running
    code that will be saved to that experiment.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在当前上下文中设置了实验，我们可以开始运行将保存到该实验中的代码。
- en: Running experiments and logging results
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行实验并记录结果
- en: 'To start logging our results to an experiment, we need to start a run. This
    is done using the `start_run()` function and returns a `run` context manager.
    Here''s an example of how to start a run:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始将我们的结果记录到实验中，我们需要启动一个运行。这个操作是通过`start_run()`函数完成的，并返回一个`run`上下文管理器。以下是如何启动一个运行的示例：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once the run is started, we can then begin logging metrics, parameters, and
    artifacts. Here’s an example of code that would do that using a simple model and
    dataset, where we log the model’s score and the hyperparameters used:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行开始，我们就可以开始记录度量、参数和工件。下面是一个使用简单模型和数据集的代码示例，我们记录了模型的得分和使用的超参数：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In our example above, a simple model is trained, and its score is calculated.
    Note how metrics can be logged by using `mlflow.log_metric("metric_name", metric)`
    and hyperparameters can be logged using `mlflow.log_param("param_name", param)`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上面的示例中，训练了一个简单的模型，并计算了其得分。请注意，如何使用`mlflow.log_metric("metric_name", metric)`来记录度量，并使用`mlflow.log_param("param_name",
    param)`来记录超参数。
- en: The Data
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据
- en: Let’s now look at the code used for training our models, which are based on
    the outcome of basketball games. The data we are looking at is from the 2024 US
    college basketball tournaments, which was obtained from the March Machine Learning
    Mania 2024 Kaggle competition, the details of which can be found [here](https://www.kaggle.com/competitions/march-machine-learning-mania-2024/overview),
    and is licensed under CC BY 4.0
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一下用于训练我们基于篮球比赛结果的模型的代码。我们所查看的数据来自2024年美国大学篮球锦标赛，这些数据来自2024年3月机器学习狂热Kaggle竞赛，相关细节可以在[此处](https://www.kaggle.com/competitions/march-machine-learning-mania-2024/overview)找到，且该数据集使用CC
    BY 4.0许可协议。
- en: In out setup, we wanted to try three different models, that used an increasing
    number of parameters. For each model, we also wanted to try three different learning
    rates (a hyperparameter that controls how much we are adjusting the weights of
    our network for each iteration). The goal was to find the best model and learning
    rate combination that would give us the best [Brier score](https://en.wikipedia.org/wiki/Brier_score)
    on the test set.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的设置中，我们想尝试三种不同的模型，这些模型使用了越来越多的参数。对于每个模型，我们还想尝试三种不同的学习率（一个控制我们在每次迭代中调整网络权重多少的超参数）。目标是找到最佳的模型和学习率组合，以便在测试集上获得最佳的[Brier得分](https://en.wikipedia.org/wiki/Brier_score)。
- en: The Models
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: To define the model architecture, we used TensorFlow, creating three simple
    neural networks. Here are the functions that helped define the models.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义模型架构，我们使用了TensorFlow，创建了三个简单的神经网络。以下是帮助定义模型的函数。
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Creating our models in this way allows us to easily experiment with different
    architectures, and see how they perform. We can then use a dictionary to create
    a little *model factory*, that will allow us to easily create the models we want
    to experiment with.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式创建模型，使我们可以轻松地尝试不同的架构，并查看它们的表现。我们可以使用字典创建一个小型的*模型工厂*，让我们能够轻松地创建我们想要实验的模型。
- en: We also defined the input shape, which was the number of features that were
    available. We decided to train the models for 100 epochs, which should be enough
    for convergence 🤞.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了输入形状，即可用特征的数量。我们决定将模型训练100个epoch，这应该足以让模型收敛🤞。
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: After this initial setup, it was time to iterate over the models’ dictionary.
    For each model, an experiment was created. Note how we’re using the code snippet
    from before, where we first check if the experiment exists, and only if it doesn’t
    do we create it. Otherwise, we just set it.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这初步设置之后，是时候对模型字典进行迭代了。对于每个模型，都会创建一个实验。请注意，我们使用了之前的代码片段，其中我们首先检查实验是否存在，只有在实验不存在时才会创建它。否则，我们只需设置它。
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Having set the experiment, we then performed three runs for each model, trying
    out different learning rates `[0.001, 0.01, 0.1]`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 设置完实验后，我们针对每个模型进行了三次运行，尝试不同的学习率`[0.001, 0.01, 0.1]`。
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then, in each run, we initialised a model, compiled it, and trained it. The
    compilation and training were done in a separate function, which we’ll go into
    next. As we wanted to set the learning rate, we had to manually initialise the
    Adam optimiser. As our metric we used the Mean Squared Error (MSE) loss function,
    saving the model with the best validation loss, and logged the training and validation
    loss to ensure that the model was converging.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在每次运行中，我们初始化了一个模型，编译并训练它。编译和训练是在一个单独的函数中完成的，接下来我们将详细讲解。由于我们希望设置学习率，因此必须手动初始化
    Adam 优化器。我们使用均方误差（MSE）损失函数作为指标，保存具有最佳验证损失的模型，并记录训练和验证损失，以确保模型在收敛。
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Having initialised a model, compiled and trained it, the next step was logging
    the training and validation losses, calculating the brier score for the test set,
    then logging the score and the learning rate used. Typically we would also log
    the training and validation loss using the `step` argument in `log_metric`, like
    so:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化模型、编译并训练它之后，接下来的步骤是记录训练和验证损失，计算测试集的 Brier 分数，然后记录得分和使用的学习率。通常我们还会使用 `step`
    参数在 `log_metric` 中记录训练和验证损失，像这样：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: However, we opted to create the training and validation loss plot ourselves
    using `matplotlib` and log that as an artifact.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们选择自己使用 `matplotlib` 创建训练和验证损失图，并将其记录为一个工件。
- en: 'Here’s the plot function:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是绘图函数：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Putting everything together, here’s what the code for that looks like:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容整合起来，以下是该代码的样子：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For each run we also logged the model, which will be useful later on.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每次运行，我们还记录了模型，这对后续会很有用。
- en: The experiments were run, creating an experiment for each model, and three different
    runs for each experiment with each of the learning rates.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 实验已被运行，为每个模型创建了一个实验，并为每个实验进行了三次不同的运行，使用了不同的学习率。
- en: Analysing results
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析结果
- en: Now that we’ve run some experiments, it’s time to analyse the results! To do
    this, we can go back to the workspace, where we’ll find our newly created experiments
    with several runs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经运行了一些实验，是时候分析结果了！为此，我们可以回到工作区，在那里我们可以找到新创建的实验以及多个运行。
- en: '![](../Images/716c608c377213fdf76833c2e0823194.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/716c608c377213fdf76833c2e0823194.png)'
- en: Fig. 2 — List of experiments. Image by author.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2 — 实验列表。图片由作者提供。
- en: 'Clicking on one experiment, here’s what we’ll see:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 点击一个实验后，以下是我们将看到的内容：
- en: '![](../Images/b9c60a7efb769462fc52aca550c959b2.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b9c60a7efb769462fc52aca550c959b2.png)'
- en: Fig. 3 — The Experiment UI. Image by author.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3 — 实验界面。图片由作者提供。
- en: On the left we’ll find all of the runs related to that experiment. In this case,
    we’re looking at the small model experiment. For each run, there’s two artifacts,
    the validation loss plot and the trained model. There’s also information about
    the run’s properties — its status and duration, as well as the metrics and hyper-parameters
    logged.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧，我们会看到与该实验相关的所有运行。在这种情况下，我们正在查看小模型实验。对于每次运行，都会有两个工件，即验证损失图和训练好的模型。还有关于运行的属性信息——状态和持续时间，以及记录的指标和超参数。
- en: By clicking on the **View run list**, under the **Compare runs** section, we
    can compare the different runs.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**查看运行列表**，在**比较运行**部分下，我们可以比较不同的运行。
- en: '![](../Images/1eece2a8179dad8814505c5fdb9f7e7e.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1eece2a8179dad8814505c5fdb9f7e7e.png)'
- en: Fig. 4 — Comparing runs. Image by author.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4 — 比较运行。图片由作者提供。
- en: Inside the run list view, we can select the runs that we wish to compare. In
    the **metric comparison** tab, we can find plots that show the Brier score against
    the learning rate. In our case, it looks like the lower the learning rate, the
    better the score. We could even go further and create more plots for the different
    metrics against other hyperparameters (if different metrics and hyperparameters
    had been logged).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行列表视图中，我们可以选择希望比较的运行。在**指标比较**选项卡中，我们可以找到展示 Brier 分数与学习率关系的图表。在我们的案例中，看起来学习率越低，得分越好。我们甚至可以进一步创建更多图表，展示不同指标与其他超参数的关系（如果不同的指标和超参数已被记录的话）。
- en: '![](../Images/44a7a6f448f6cbd157dbfee2415b5bb4.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/44a7a6f448f6cbd157dbfee2415b5bb4.png)'
- en: Fig. 5 — Plot that shows Brier score against learning rate. Image by author.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5 — 展示 Brier 分数与学习率关系的图表。图片由作者提供。
- en: Perhaps we would like to filter the runs — that can be done using **Filters**.
    For example we can select the runs that have a Brier score lower than 0.25\. You
    can create filters based on logged metrics and parameters and the runs’ properties.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我们希望筛选运行——可以使用**筛选器**来完成此操作。例如，我们可以选择 Brier 分数低于 0.25 的运行。您可以根据记录的指标和参数以及运行的属性创建筛选器。
- en: '![](../Images/66491b7a477f7c74f04dd736a281a55b.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66491b7a477f7c74f04dd736a281a55b.png)'
- en: Fig. 6 — Filtering runs based on their Brier score. Image by author.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6 — 根据 Brier 得分筛选运行。图像由作者提供。
- en: By doing this, we can visually compare the different runs and assess which configuration
    led to the best performance. This can also be done using code — this is something
    that will be further explored in the next post.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们可以直观地比较不同的运行并评估哪个配置带来了最佳性能。这也可以通过代码实现 —— 这将是下一篇文章进一步探讨的内容。
- en: Using the experiment UI, we are then able to visually explore the different
    experiments and runs, comparing and filtering them as needed, to understand which
    configuration works best.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用实验 UI，我们能够直观地探索不同的实验和运行，按需进行比较和筛选，以了解哪个配置效果最佳。
- en: Conclusion
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: And that wraps up our exploration of experiments in Fabric!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对 Fabric 实验的探索总结！
- en: Not only did we cover how to create and set up experiments, but we also went
    through how to run experiments and log the results. We also showed how to analyse
    the results, using the experiment UI to compare and filter runs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不仅介绍了如何创建和设置实验，还讲解了如何运行实验并记录结果。我们还展示了如何分析结果，使用实验 UI 来比较和筛选运行。
- en: In the next post, we’ll be looking at how to select the best model, and how
    to deploy it. Stay tuned!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一篇文章中，我们将讨论如何选择最佳模型，并展示如何部署它。敬请期待！
- en: '*Originally published at* [*https://nobledynamic.com*](https://nobledynamic.com/posts/fabric-madness-4/)
    *on April 22, 2024.*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*原文发布于* [*https://nobledynamic.com*](https://nobledynamic.com/posts/fabric-madness-4/)
    *，发布时间为 2024年4月22日。*'
