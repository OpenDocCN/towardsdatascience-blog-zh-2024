- en: 'Syntax: The Language Form'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 句法：语言的形式
- en: 原文：[https://towardsdatascience.com/syntax-the-language-form-612257c4aa5f?source=collection_archive---------3-----------------------#2024-03-21](https://towardsdatascience.com/syntax-the-language-form-612257c4aa5f?source=collection_archive---------3-----------------------#2024-03-21)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/syntax-the-language-form-612257c4aa5f?source=collection_archive---------3-----------------------#2024-03-21](https://towardsdatascience.com/syntax-the-language-form-612257c4aa5f?source=collection_archive---------3-----------------------#2024-03-21)
- en: 'Language processing in humans and computers: Part 2'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人类和计算机中的语言处理：第2部分
- en: How do you know that this is a sentence?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你怎么知道这是一个句子？
- en: '[](https://medium.com/@dusko_p?source=post_page---byline--612257c4aa5f--------------------------------)[![Dusko
    Pavlovic](../Images/3d242896266291f7adbf6f131fe2e16d.png)](https://medium.com/@dusko_p?source=post_page---byline--612257c4aa5f--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--612257c4aa5f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--612257c4aa5f--------------------------------)
    [Dusko Pavlovic](https://medium.com/@dusko_p?source=post_page---byline--612257c4aa5f--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@dusko_p?source=post_page---byline--612257c4aa5f--------------------------------)[![Dusko
    Pavlovic](../Images/3d242896266291f7adbf6f131fe2e16d.png)](https://medium.com/@dusko_p?source=post_page---byline--612257c4aa5f--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--612257c4aa5f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--612257c4aa5f--------------------------------)
    [Dusko Pavlovic](https://medium.com/@dusko_p?source=post_page---byline--612257c4aa5f--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--612257c4aa5f--------------------------------)
    ·22 min read·Mar 21, 2024
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表在[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--612257c4aa5f--------------------------------)
    ·22分钟阅读·2024年3月21日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: 'Part 1 was:'
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1部分是：
- en: '[Who are chatbots (and what are they to you)?](https://medium.com/towards-data-science/who-are-chatbots-and-what-are-they-to-you-5c77d9201d11)
    Afterthoughts: [Four elephants in a room with chatbots](/four-elephants-in-the-room-with-chatbots-82c48a823b94)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[聊天机器人是谁（对你来说是什么）？](https://medium.com/towards-data-science/who-are-chatbots-and-what-are-they-to-you-5c77d9201d11)
    结语：[房间里的四只大象与聊天机器人](/four-elephants-in-the-room-with-chatbots-82c48a823b94)'
- en: 'This is Part 2:'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这是第2部分：
- en: '[1\. Syntax is deep, semantics is arbitrary](#2630)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[1\. 句法深奥，语义任意](#2630)'
- en: '[2\. Grammar](#69ce)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[2\. 语法](#69ce)'
- en: '[2.1\. Constituent (phrase structure) grammars](#e40b)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2.1\. 成分（短语结构）语法](#e40b)'
- en: '[2.2\. Dependency grammars](#d37c)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2.2\. 依赖语法](#d37c)'
- en: '[3\. Syntax as typing](#ea73)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[3\. 句法作为类型化](#ea73)'
- en: '[3.1\. Syntactic type-checking](#4158)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3.1\. 句法类型检查](#4158)'
- en: '[3.2\. Parsing and typing](#86e2)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3.2\. 解析和类型化](#86e2)'
- en: '[3.3\. Pregroup grammars](#a575)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3.3\. 前群语法](#a575)'
- en: '[4\. Beyond sentence](#7a3e)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[4\. 超越句子](#7a3e)'
- en: '[4.1\. Why do we make sentences?](#e62a)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4.1\. 我们为什么造句子？](#e62a)'
- en: '[4.2\. Language articulations and network layers](#3091)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4.2\. 语言表达和网络层](#3091)'
- en: '[5\. Beyond syntax](#8904)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[5\. 超越句法](#8904)'
- en: '[5.1\. Semantic context-sensitivity](#41d4)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5.1\. 语义上下文敏感性](#41d4)'
- en: '[5.2\. Syntactic context-sensitivity](#4439)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5.2\. 句法上下文敏感性](#4439)'
- en: '[5.3\. Communication is the process of sharing semantical contexts](#447c)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5.3\. 交流是共享语义上下文的过程](#447c)'
- en: 'Part 3:'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3部分：
- en: '[Semantics: The Meaning of Language](https://medium.com/@dusko_p/semantics-the-meaning-of-language-99b009ccef41)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[语义学：语言的意义](https://medium.com/@dusko_p/semantics-the-meaning-of-language-99b009ccef41)'
- en: 'Part 4:'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4部分：
- en: '[Language as a Universal Learning Machine](/language-as-a-universal-learning-machine-d2c67cb15e5f)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[语言作为通用学习机器](/language-as-a-universal-learning-machine-d2c67cb15e5f)'
- en: 1\. Syntax is deep, semantics is arbitrary
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 句法深奥，语义任意
- en: People speak many languages. People who speak different languages generally
    don’t understand each other. How is it possible to have a general theory of language?
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 人们讲多种语言。说不同语言的人通常互相不理解。如何可能有一个语言的普适理论呢？
- en: Life is also diversified in many species, and different species generally cannot
    interbreed[¹](#6cdc). But life is a *universal capability of self-reproduction*
    and biology is a general theory of life.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 生命在许多物种中也是多样化的，不同物种通常不能互相交配[¹](#6cdc)。但生命是一种*自我复制的普遍能力*，而生物学是生命的一个普遍理论。
- en: 'General linguistics is based on Noam Chomsky’s *Cartesian assumption*[²](#ef84):
    that all languages arise from a *universal capability of speech*, innate to our
    species. The claim is that all of our different languages share the same *deep
    structures* embedded in our brains. Since different languages assign different
    words to the same things, the semantic assignments of words to meanings are not
    a part of these universal deep structures. Chomskian general linguistics is mainly
    concerned with general syntax. It also studies (or it used to study) the transformations
    of the deep syntactic structures into the surface structures observable in particular
    languages, just like biology studies the ways in which the general mechanisms
    of heredity lead to particular organisms. Oversimplified a little, the Chomskian
    thesis implied that'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一般语言学基于诺姆·乔姆斯基的*笛卡尔假设*[²](#ef84)：所有语言都源自于我们物种固有的*普遍语言能力*。这一观点认为，我们所有的不同语言共享大脑中嵌入的相同*深层结构*。由于不同语言为相同事物赋予不同的词汇，因此词汇与意义的语义分配并不属于这些普遍深层结构的一部分。乔姆斯基的一般语言学主要关注的是一般句法。它还研究（或者曾经研究）将深层句法结构转化为在特定语言中可观察到的表层结构的过程，正如生物学研究遗传机制如何导致特定有机体一样。稍微简化一下，乔姆斯基的理论意味着
- en: syntax is the main subject of modern linguistics, whereas
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 句法是现代语言学的主要研究对象，而
- en: semantics is studied in complementary ways in
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义学以互补的方式在以下领域进行研究：
- en: — philosophy of meaning, be it under the title of *semiology*, or in the many
    avatars of *structuralism*; and by different methods in
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: — 意义哲学，无论是以*符号学*的名义，还是在*结构主义*的众多化身中；以及在不同方法中
- en: — search engine engineering, information retrieval indices and catalogs, user
    profiling, and targeted advertising.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: — 搜索引擎工程、信息检索索引和目录、用户画像，以及定向广告。
- en: However, the difference between the pathways from deep structures to surface
    structures as studied in linguistics on one hand and in biology on the other is
    that
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，语言学中研究深层结构到表层结构的路径与生物学中研究的不同之处在于：
- en: in biology, the carriers of the deep structures of life are directly observable
    and empirically studied in genetics, whereas
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在生物学中，生命深层结构的载体是直接可观察的，并且在遗传学中有实证研究，而
- en: in linguistics, the deep structures of syntax are not directly observable but
    merely postulated, as Chomsky’s Cartesian foundations, and the task of finding
    actual carriers is left to a future science.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在语言学中，句法的深层结构并不可直接观察，而只是被假设存在，就像乔姆斯基的笛卡尔基础一样，寻找实际载体的任务则留给未来的科学。
- en: This leaves the Cartesian assumption about the universal syntactic structures
    on a shaky ground. The emergence of large language models may be a tectonic shift
    of that ground. Most of our early interactions with chatbots seem to suggest that
    the demarcation line between syntax and semantics may not be as clear as traditionally
    assumed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得关于普遍句法结构的笛卡尔假设站不住脚。大型语言模型的出现可能会引发这一理论基础的重大变革。我们与聊天机器人的大多数早期互动似乎暗示，句法与语义之间的分界线可能并不像传统假设的那样明确。
- en: To understand a paradigm shift, we need to understand the paradigm. To stand
    a chance to understand large language models, we need a basic understanding of
    the language models previously developed in linguistics. In this lecture and in
    the next one, we parkour through the theories of syntax and of semantics, respectively.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解范式的转变，我们需要先理解该范式。要有机会理解大型语言模型，我们需要对语言学中早期发展出的语言模型有一个基本了解。在这节课和下一节课中，我们将分别穿越句法和语义的理论。
- en: 2\. Grammar
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 语法
- en: 2.1\. Constituent (phrase structure) grammars
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1\. 成分（短语结构）语法
- en: '**Grammar is trivial** in the sense that it was the first part of *trivium.*
    Trivium and quadrivium were the two main parts of medieval schools, partitioning
    the seven *liberal arts* that were studied. Trivium consisted of grammar, logic,
    and rhetorics; quadrivium of arithmetic, geometry, music, and astronomy. Theology,
    law, and medicine were not studied as liberal arts because they were controlled
    by the Pope, the King, and by physicians’ guilds, respectively. So grammar was
    the most trivial part of trivium. At the entry point of their studies, the students
    were taught to classify words into 8 basic *syntactic categories*, going back
    to Dionysios Trax from II century BCE: nouns, verbs, participles, articles, pronouns,
    prepositions, adverbs, and conjunctions. The idea of categories goes back to the
    first book of Aristotle’s *Organon*[³](#4e1d). The basic noun-verb scaffolding
    of Indo-European languages was noted still earlier, but Aristotle spelled out
    the syntax-semantics conundrum: *What do the categories of words in the language
    say about the classes of things in the world?* For a long time, partitioning words
    into categories remained the entry point of all learning. As understanding of
    language evolved, its structure became the entry point.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法是简单的**，因为它是*三艺*中的第一部分。三艺和四艺是中世纪学校的两大主要学科，划分了七门*自由艺术*的学习内容。三艺包括语法、逻辑和修辞；四艺包括算术、几何学、音乐和天文学。神学、法学和医学不被视为自由艺术，因为它们分别由教皇、国王和医师公会控制。因此，语法是三艺中最简单的部分。在学习的起始阶段，学生们被教导将单词分为8种基本的*句法类别*，这一思想可以追溯到公元前二世纪的狄俄尼修斯·特拉克斯：名词、动词、分词、冠词、代词、介词、副词和连词。类别的概念源自亚里士多德的《工具论》第一卷[³](#4e1d)。印欧语言的基本名词-动词结构早在更早的时候就已经被注意到，但亚里士多德明确阐述了句法-语义难题：*语言中的词类如何反映世界中事物的类别？*
    长时间以来，将单词划分为类别一直是所有学习的起点。随着语言理解的演变，其结构逐渐成为学习的入口。'
- en: '**Formal grammars and languages** are defined in the next couple of displays.
    They show how it works. If you don’t need the details, skip them and move on to
    the main idea. The notations are explained among the notes[⁴](#3ef5).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**形式语法和语言**将在接下来的几个展示中定义。它们展示了工作原理。如果你不需要详细信息，可以跳过它们，直接进入主要内容。符号将在注释中解释[⁴](#3ef5)。'
- en: '![](../Images/c5172e9bf72847189ee1d6f945134f64.png)![](../Images/9d93d47d0f4d395c1cf0c0276e109410.png)![](../Images/c99a1361bd8a1b3208c6f7f58ce1d9f1.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c5172e9bf72847189ee1d6f945134f64.png)![](../Images/9d93d47d0f4d395c1cf0c0276e109410.png)![](../Images/c99a1361bd8a1b3208c6f7f58ce1d9f1.png)'
- en: The idea of the phrase structure theory of syntax is to start from a lexicon
    as the set of terminals 𝛴 and to specify a grammar 𝛤 that generates as the induced
    language 𝓛 a desired set of well-formed sentences.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 短语结构语法理论的思想是，从一个作为终结符集合的词汇表𝛴开始，并指定一个生成所需的良好构句集合𝓛的语法𝛤。
- en: '**How grammars generate sentences.** The most popular sentences are in the
    form “*Subject loves Object”.* One of the most popular sentence from grammar textbooks
    is in the next figure on the left:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**语法如何生成句子。** 最常见的句子形式是“*主语爱宾语*”。语法教材中最常见的一句话出现在下图左侧：'
- en: '![](../Images/bfc268f31f430f68a897974a18ac0ae2.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bfc268f31f430f68a897974a18ac0ae2.png)'
- en: The ground truth of English language and Dall-E’s view of the sentence “Colorless
    green ideas sleep furiously”
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 英语语言的基本事实与Dall-E对句子“无色的绿色想法愤怒地睡觉”的看法
- en: 'The drawing above the sentence is its constituent tree. The sentence consists
    of a noun phrase (NP) and a verb phrase (VP), both as simple as possible: the
    noun phrase is a noun denoting the subject, the verb phrase a transitive verb
    with another noun phrase denoting the object. The “subject-object” terminology
    suggests different things to different people. A wide variety of ideas. If even
    the simplest possible syntax suggests a wide variety of semantical connotations,
    then there is no such thing as a purely syntactic example. Every sequence of words
    has a meaning, and meaning is a process, always on the move, always decomposable.
    To demonstrate the separation of syntax from semantics, Chomsky constructed the
    (syntactically) well-formed but (semantically) meaningless sentence illustrated
    by Dall-E in the above figure on the right. The example is used as evidence that
    syntactic correctness does not imply semantic interpretability. But there is also
    a whole tradition of creating poems, stories, and illustrations that assign meanings
    to this sentence. Dall-E’s contribution above is among the simpler ones.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上图展示了该句的成分树。该句由一个名词短语（NP）和一个动词短语（VP）组成，两者尽可能简单：名词短语是表示主语的名词，动词短语是一个及物动词，后接另一个表示宾语的名词短语。“主语-宾语”的术语对不同的人有不同的理解。各种各样的想法。如果即使是最简单的语法结构也能引发广泛的语义联想，那么就不存在纯粹的语法示例。每一个词序都有其含义，而含义是一个过程，始终在变化，始终可以分解。为了展示语法与语义的分离，乔姆斯基构造了一个（语法上）正确但（语义上）毫无意义的句子，如上图右侧的Dall-E所示。这个例子作为证据表明，语法正确并不意味着语义可解释。但也有一个完整的传统，通过诗歌、故事和插图为这个句子赋予意义。上面Dall-E的贡献就是其中较为简单的一个。
- en: '**Marxist linguistics and engineering.** For a closer look at the demarcation
    line between syntax and semantics, consider the ambiguity of the sentence “*One
    morning I shot an elephant in my pajamas*”, delivered by Groucho Marx in the movie
    “Animal Crackers”.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**马克思主义语言学与工程学。** 若想更深入地探讨语法与语义之间的分界线，可以考虑格劳乔·马克思在电影《动物饼干》中的一句话：“*有一天早上我在睡衣里打死了一头大象*”，这句话中的歧义。'
- en: '[https://youtu.be/NfN_gcjGoJo?si=AucqaRQvvfoAlVIo](https://youtu.be/NfN_gcjGoJo?si=AucqaRQvvfoAlVIo)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/NfN_gcjGoJo?si=AucqaRQvvfoAlVIo](https://youtu.be/NfN_gcjGoJo?si=AucqaRQvvfoAlVIo)'
- en: 'The claim is ambiguous because it permits the two syntactic analyses:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该主张存在歧义，因为它允许两种语法分析：
- en: '![](../Images/0f74156b53f854189d82e10da0930000.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0f74156b53f854189d82e10da0930000.png)'
- en: 'both derived using the same grammar:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都是使用相同的语法推导出来的：
- en: '![](../Images/a948ed24677bf4cd2cea6a9d75ac213c.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a948ed24677bf4cd2cea6a9d75ac213c.png)'
- en: While both analyses are syntactically correct, only one is semantically realistic,
    whereas the other one is a joke. To plant the joke, Groucho binds his claim to
    the second interpretation by adding *“How he got into my pajamas I don’t know.”*
    The joke is the unexpected turn from syntactic ambiguity to semantic impossibility.
    The sentences about the “colorless green ideas” and the “elephant in my pajamas”
    illustrate the same process of apparent divergence of syntax and semantics, studied
    in linguistics and used in comedy.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这两种分析在语法上都是正确的，但只有一种在语义上是现实的，而另一种则是个笑话。为了植入笑点，格劳乔通过添加*“我不知道他是怎么进入我的睡衣的。”*
    将他的主张与第二种解释联系起来。笑点来自于从语法模糊性到语义不可能性的意外转折。关于“无色的绿色想法”和“我睡衣里的大象”的句子说明了语法与语义表面上出现的偏离过程，这一过程在语言学中被研究，并在喜剧中得到应用。
- en: '**History of formal grammars.** The symbol ::= used in formal grammars is a
    rudiment of the fact that such rules used to be thought of as one-way equations.
    Rule (1) in the definition of formal grammars above is meant to be interpreted
    something like: *“Whenever you see αβγ, you can rewrite it as αδγ, but not the
    other way around.”* Algebraic theories presented by systems of such one-way equations
    were studied by Axel Thue in the early XX century. Emil Post used such systems
    in his studies of string rewriting in the 1920s, to construct what we would now
    call *programs*, more than 10 years before Gödel and Turing spelled out the idea
    of programming. In the 1940s, Post proved that his string rewriting systems were
    as powerful as Turing’s, Gödel’s, and Church’s models of computation, which had
    in the meantime appeared. Noam Chomsky’s 1950s proposal of formal grammars as
    the principal tool of general linguistics was based on Post’s work and inspired
    by the general theory of computation, rapidly expanding and proving some of its
    deepest results at the time. While usable grammars of natural languages still
    required a lot of additional work on transformations, side conditions, binding,
    and so on, the simple formal grammars that Chomsky classified back then remained
    the principal tool for specifying programming languages ever since.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**形式文法的历史。** 形式文法中使用的符号::= 是这种规则曾被认为是单向方程的遗迹。上述形式文法定义中的规则（1）应理解为类似于：“*每当你看到αβγ时，你可以将其重写为αδγ，但不能反过来*”。由这种单向方程系统所呈现的代数理论由阿克塞尔·图厄（Axel
    Thue）在20世纪初研究。埃米尔·波斯特（Emil Post）在1920年代使用这种系统研究字符串重写，以构造我们现在称之为*程序*的东西，比哥德尔（Gödel）和图灵（Turing）提出编程思想早了10多年。在1940年代，波斯特证明了他的字符串重写系统与图灵、哥德尔和丘奇（Church）的计算模型同样强大，而这些计算模型此时已出现。诺姆·乔姆斯基（Noam
    Chomsky）在1950年代提出形式文法作为一般语言学的主要工具，基于波斯特的工作，并受计算理论的启发，迅速扩展并证明了当时一些最深刻的结果。尽管自然语言的可用文法仍然需要大量关于转换、附加条件、绑定等的额外工作，但乔姆斯基当时分类的简单形式文法自此以来一直是指定编程语言的主要工具。'
- en: '**Hierarchy of formal grammars and languages.** Chomsky defined the nest of
    languages displayed in the next figure by imposing constraints on the grammatical
    rules that generate the languages.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**形式文法和语言的层次结构。** 乔姆斯基通过对生成语言的语法规则施加约束，定义了下图所显示的语言嵌套结构。'
- en: '![](../Images/8021660949b427216e9e500af6bac59d.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8021660949b427216e9e500af6bac59d.png)'
- en: The Chomsky hierarchy of formal grammars and languages
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 乔姆斯基的形式文法和语言层次结构
- en: The constraints are summarized in the following table. We say that
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 约束条件总结如下表所示。我们可以说：
- en: '![](../Images/d96910585eeee4b89665766e6dbd6c62.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d96910585eeee4b89665766e6dbd6c62.png)'
- en: 'Here are some examples from each grammar family[⁵](#deb1), together with typical
    derivation trees and languages:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是来自每个文法家族的一些示例[⁵](#deb1)，以及典型的推导树和语言：
- en: '![](../Images/e57ffa3d9722008773569e55cebffcd1.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e57ffa3d9722008773569e55cebffcd1.png)'
- en: Typical grammars with generated trees and the induced languages
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 典型文法的生成树及其诱导语言
- en: '**Does it really work like this in my head?** Scientific models of reality
    usually do not claim that they *are* the reality. Physicists don’t claim that
    quantum states consist of density matrices used to model them. Grammars are just
    a computational model of language, born in the early days of the theory of computation.
    The phrase structure grammars were an attempt to explain language in computational
    terms. Nowadays even the programming language often don’t work that way anymore.
    It’s just a model.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**它真的是我大脑里的工作方式吗？** 现实的科学模型通常并不声称它们*就是*现实。物理学家并不声称量子态由用来模拟它们的密度矩阵构成。文法只是语言的计算模型，诞生于计算理论的早期。短语结构文法曾试图用计算的术语来解释语言。如今，即使是编程语言，也不再以这种方式运作了。它只是一个模型。'
- en: However, when it comes to mental models of mental processes, the division between
    the reality and its models becomes subtle. They can reflect and influence each
    other. A computational model of a computer allows the computer to simulate itself.
    A language can be modeled within itself, and the model can be similar to the process
    that it models. How close can it get?
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当涉及到心理过程的心理模型时，现实与其模型之间的划分变得微妙。它们可以相互反映并相互影响。计算机的计算模型使得计算机可以模拟自身。语言可以在自身内部进行建模，而这种模型可以与它所模拟的过程相似。它能有多接近？
- en: 2.2\. Dependency grammars
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2\. 依赖文法
- en: 'Dependency grammars are a step closer to capturing the process of sentence
    production. Grammatical dependency is a relation between words in a sentence.
    It relates a *head* word and an (ordered!) tuple of dependents. The sentence is
    produced as the dependents are chosen for the given head words, or the heads for
    the given dependents. The choices are made in the order in which the words occur.
    Here is how this works on the example of Groucho’s elephant sentence:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖语法更接近于捕捉句子生成的过程。语法依赖是一种句子中单词之间的关系。它将一个*中心*词与一组（有序的！）依赖项关联。句子的生成是随着给定中心词的依赖项被选择，或给定依赖项的中心词被选择的过程。选择是按照单词出现的顺序进行的。下面是以Groucho的“大象”句子为例的工作方式：
- en: '![](../Images/d809c5bf74735b30c78e6526d94f29ff.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d809c5bf74735b30c78e6526d94f29ff.png)'
- en: '**Unfolding dependencies.** The pronoun “I” occurs first, and it can only form
    a sentence as a dependent on some verb. The verb “shot” is selected as the head
    of that dependency as soon as it is uttered. The sentence could then be closed
    if the verb “shot” is used as intransitive. If it is used as transitive, then
    the object of action needs to be selected as its other dependent. Groucho selects
    the noun “elephant”. English grammar requires that this noun is also the head
    of another dependency, with an article as its dependent. Since the article is
    required to precede the noun, the word “elephant” is not uttered before its dependent
    “an” or “the” is chosen. After the words “I shot an elephant” are uttered (or
    received), there are again multiple choices to be made: the sentence can be closed
    with no further dependents, or a dependent can be added to the head “shot”, or
    else it can be added to the head “elephant”. The latter two syntactic choices
    correspond to the different semantical meanings that create ambiguity. If the
    prepositional phrase “in my pajamas” is a syntactic dependent of the head “shot”,
    then the subject “I” wore the pajamas when they shot. If the prepositional phrase
    is a syntactic dependent of the head “elephant”, then the object of shooting wore
    the pajamas when they were shot. The two dependency analyses look like this, with
    the corresponding constituency analyses penciled above them.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**展开依赖关系。** 代词“I”首先出现，它只能作为某个动词的依赖构成一个句子。一旦动词“shot”被发出，它就被选为该依赖关系的中心词。然后，如果动词“shot”作为不及物动词使用，句子就可以结束。如果它作为及物动词使用，则需要选择动作的宾语作为它的另一个依赖项。Groucho选择了名词“elephant”。英语语法要求该名词也是另一个依赖关系的中心词，带有一个冠词作为其依赖项。由于冠词必须位于名词之前，因此在选择“an”或“the”作为依赖项之前，名词“elephant”是不会被发出的。当“我射杀了一只大象”这些词被说出（或接收）后，依然有多个选择要做：句子可以在没有进一步依赖项的情况下结束，或者可以将一个依赖项添加到中心词“shot”，或者可以将其添加到中心词“elephant”。后两种句法选择对应不同的语义意义，产生歧义。如果介词短语“in
    my pajamas”是“shot”这个中心词的句法依赖项，那么主语“I”是在穿着睡衣的情况下开枪的。如果介词短语是“elephant”这个中心词的句法依赖项，那么射击的对象是穿着睡衣的。两种依赖分析如图所示，图上方画有相应的构成分析。'
- en: '![](../Images/5aaa8231a06d17728d13dae3ecac4b54.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5aaa8231a06d17728d13dae3ecac4b54.png)'
- en: The dependent phrase “in my pajamas” is headed by the preposition “in”, whose
    dependent is the noun “pajamas”, whose dependent is the possessive “my”. After
    that, the speaker has to choose again whether to close the sentence or to add
    another dependent phrase, say “while sleeping furiously”, which opens up the same
    two choices of syntactic dependency and semantic ambiguity. To everyone’s relief,
    the speaker chose to close the sentence.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖短语“in my pajamas”的中心词是介词“in”，它的依赖项是名词“pajamas”，而“pajamas”的依赖项是所有格“my”。之后，讲者必须再次选择是结束句子，还是添加另一个依赖短语，比如“while
    sleeping furiously”，这会打开同样的两个句法依赖和语义歧义的选择。令所有人宽慰的是，讲者选择了结束句子。
- en: '**Is dependency a syntactic or a semantic relation?** The requirements that
    a dependency relation *exists* are usually syntactic. E.g., to form a sentence,
    a starting noun is usually a dependent of a verb. But the *choice* of a particular
    dependent or head assignment is largely semantical: whether I shot an elephant
    or a traffic sign. The choice of an article dependent on the elephant depends
    on the context, possibly remote: whether a particular elephant has been determined
    or not. If it has not been determined, then the form of the independent article
    *an* is determined syntactically, and not semantically.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖关系是句法关系还是语义关系？** 依赖关系*存在*的要求通常是句法性的。例如，为了构成一个句子，一个起始名词通常是动词的依赖项。但是，选择某个特定的依赖项或主语分配则主要是语义性的：比如我射杀的是一只大象还是一块交通标志。依赖于大象的冠词的选择取决于上下文，可能是远程的：是否已确定了某只特定的大象。如果没有确定，那么不定冠词*an*的形式就是通过句法确定的，而非语义决定的。'
- en: So the answer to the above question seems to suggest that the partition of the
    relations between words into syntactic and semantic is too simplistic for some
    situations since the two aspects of language are not independent and can be inseparable.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，以上问题的答案似乎暗示，词语之间的关系划分为句法和语义过于简单化，因为语言的这两个方面并非独立，而是紧密相连，甚至是不可分割的。
- en: 3\. Syntax as typing
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 句法即类型
- en: 3.1\. Syntactic type-checking
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.1\. 句法类型检查
- en: 'In computation, type-checking is a basic error-detection mechanism: e.g., the
    inputs of an arithmetic operation are checked to be of type 𝖨𝗇𝗍𝖾𝗀𝖾𝗋, the birth
    dates in a database are checked to have the month field of type 𝖬𝗈𝗇𝗍𝗁, whose terms
    may be the integers 1,2,…, 12, and if someone’s birth month is entered to be 101,
    the error will be caught in type-checking. Types allow the programmer to ensure
    correct program execution by constraining the data that can be processed[⁶](#a734).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算中，类型检查是一种基本的错误检测机制：例如，算术操作的输入被检查为类型𝖨𝗇𝗍𝖾𝗀𝖾𝗋，数据库中的出生日期被检查为月份字段的类型为𝖬𝗈𝗇𝗍𝗁，其值可以是整数1,
    2, …, 12，如果某人的出生月份输入为101，类型检查就会捕捉到这个错误。类型允许程序员通过约束可以处理的数据来确保程序的正确执行[⁶](#a734)。
- en: Language processing is also based on type-checking, but of *syntactic* types.
    E.g., a dependent type of a <verb> must be a <noun phrase>, and if I try to make
    a sentence of verbs and verbs, the language processor will catch the error. Just
    like the type 𝖨𝗇𝗍𝖾𝗀𝖾𝗋 restricts the inputs of arithmetic operations to integers,
    the syntactic type <verb> restricts the predicates in sentences to verbs and the
    syntactic type <noun phrase> to nouns or to types that require further type-checking.
    At any rate, syntactic type-checking is an error-detection mechanism, just like
    in computation. And the type constraints even allow error-correction. E.g., if
    you hear something sounding like ``John lo℥∼ Mary’’, then without the type constraints,
    you would have more than 3000 English words starting with “lo” to consider as
    possible completions. With the syntactic constraint that the word you missed must
    be a transitive verb in third person singular, you are down to “lobs”, “locks”,
    “logs”,… maybe “loathes”, and of course, “loves”.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 语言处理同样基于类型检查，但检查的是*句法*类型。例如，一个<动词>的依赖类型必须是<名词短语>，如果我尝试用动词和动词构成一个句子，语言处理器就会捕捉到这个错误。就像类型𝖨𝗇𝗍𝖾𝗀𝖾𝗋限制算术操作的输入为整数一样，句法类型<动词>将句子中的谓词限制为动词，句法类型<名词短语>则限制为名词或需要进一步类型检查的类型。无论如何，句法类型检查是一种错误检测机制，就像在计算中一样。而且，类型约束甚至允许错误修正。例如，如果你听到类似“John
    lo℥∼ Mary”的话，没有类型约束，你将不得不考虑超过3000个以“lo”开头的英语单词作为可能的补全。而在句法约束下，你丢失的单词必须是第三人称单数的及物动词，你的选择就减少到了“lobs”，“locks”，“logs”，……可能还有“loathes”，当然，也包括“loves”。
- en: 3.2\. Parsing and typing
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.2\. 解析与类型
- en: The rules of grammar are thus related to the type declarations in programs as
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 语法规则因此与程序中的类型声明有关，如下所示：
- en: '![](../Images/19444deaa83c6e44bba9679a191fd4bb.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/19444deaa83c6e44bba9679a191fd4bb.png)'
- en: In the grammar listed above after the two parsings of Groucho’s elephant sentence,
    the terminal rules listed on the left are the basic typing statements, whereas
    the non-terminal rules on the right are type constructors, building composite
    types from simpler types. The constituency parse trees thus display the *type
    structures* of the parsed sentences. The words of the sentence occur as the leaves,
    whereas the inner tree nodes are the types. The branching nodes are the composite
    types and the non-branching nodes are the basic types. ***Constituency parsing
    is typing****.*
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面列出的语法中，经过格劳乔大象句子的两次分析后，左边列出的终结规则是基本类型声明，而右边的非终结规则是类型构造器，用于从简单类型构造复合类型。因此，成分分析树展示了被分析句子的*类型结构*。句子的单词作为叶节点出现，而内部树节点是类型。分支节点是复合类型，非分支节点是基本类型。***成分分析是类型化的***。
- en: 'Dependency parsings, on the other hand, do a strange thing: having routed the
    dependencies from a head term to its dependents through the constituent types
    that connect them, they sidestep the types and directly connect the head with
    its dependents. This is what the above dependency diagrams show. ***Dependency
    parsing reduces syntactic typing to term dependencies***.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，依赖解析做了一件奇怪的事情：它们通过连接头项与其依赖项的成分类型传递依赖关系，然后绕过这些类型，直接将头项与其依赖项连接。这正是上面的依赖图所展示的内容。***依赖解析将句法类型简化为项依赖***。
- en: 'But only the types that record nothing but term dependencies can be reduced
    to term dependencies. The two dependency parsings of the elephant sentence look
    something like this:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，只有记录了纯粹项依赖的类型才能简化为项依赖。大象句子的两种依赖解析大概是这样的：
- en: '![](../Images/e5603bc0f5feea5e0851f906d87fd0d3.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e5603bc0f5feea5e0851f906d87fd0d3.png)'
- en: Term dependencies encoded as annotations by syntactic types with adjunctions
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由带伴随的句法类型编码的项依赖作为注解
- en: The expressions below the two copies of the sentence are the syntactic types
    captured by dependency parsings. They are generated by tupling the *reference
    variables* *x,y*,… etc., with their overlined *left adjoints* and underlined *right
    adjoints*. Such syntactic types form *pregroups*, an algebraic structure introduced
    in the late 1990s by Jim Lambek, as a simplification of his *syntactic calculus*
    of *categorial grammars*. He had introduced categorial grammars in the late 1950s,
    to explore decision procedures for Ajdukiewicz’s syntactic *connexions* from the
    1930s and for Bar-Hillel’s *quasi-arithmetic* from the early 1950s, both based
    on the reference-based logic of meaning going back to Husserl’s “*Logical investigations*”.
    Categorial grammars have been subsequently studied for many decades. We only touch
    pregroups, only as a stepping stone.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 两个句子副本下的表达式是通过依赖解析捕捉到的句法类型。它们通过将*参考变量* *x, y*, … 等，与其上划线的*左伴随*和下划线的*右伴随*进行配对生成。这些句法类型构成了*前群*，这是一种由吉姆·兰贝克（Jim
    Lambek）在1990年代末引入的代数结构，旨在简化他关于*类别语法*的*句法演算*。他在1950年代末引入了类别语法，旨在探索艾季基维奇（Ajdukiewicz）1930年代的句法*连接*决策程序，以及巴尔-希勒尔（Bar-Hillel）1950年代初期的*准算术*，这两者都基于回溯到胡塞尔（Husserl）“*逻辑研究*”中的基于参考的意义逻辑。类别语法在随后的几十年中得到了广泛研究。我们仅接触前群，作为一个踏脚石。
- en: 3.3\. Pregroup grammars
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.3\. 前群语法
- en: A pregroup is an ordered monoid with left and right adjoints. An ordered monoid
    is a monoid where the underlying set is ordered and the monoid product is monotone.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 前群是一个带有左伴随和右伴随的有序单群。有序单群是一个单群，其中底层集合是有序的，并且单群乘积是单调的。
- en: If you know what this means, you can skip this section. You can also skip it
    if you don’t need to know how it works, since the main idea should transpire as
    you go anyway. Just in case, here are the details.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你知道这是什么意思，可以跳过这一部分。如果你不需要知道它是如何工作的，也可以跳过，因为主要思想应该会在你继续阅读时自然显现出来。为了以防万一，下面是详细内容。
- en: '![](../Images/29326b86d6cc71b2029f031696d58f9d.png)![](../Images/92624e7b36c351720a9ce519f1c5d9d6.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/29326b86d6cc71b2029f031696d58f9d.png)![](../Images/92624e7b36c351720a9ce519f1c5d9d6.png)'
- en: 'It is easy to show that all elements of all pregroups, as ordered monoids with
    adjoints, satisfy the following claims:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 容易证明，所有前群的元素作为带伴随的有序单群都满足以下声明：
- en: '![](../Images/08818e54d2abccdfbafa85337aea36d9.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/08818e54d2abccdfbafa85337aea36d9.png)'
- en: '**Examples.** The free pregroup, generated by an arbitrary poset, consists
    of the tuples formed from the poset elements and their adjoints. The monoid operation
    is the concatenation of the tuples. The order is lifted from the generating poset
    pointwise and (most importantly) extended by the order clauses from the definition
    of the adjoints. For a non-free example, consider the monoid of monotone maps
    from integers to integers. Taken with the pointwise order again, the monotone
    maps form a pregroup because every set of integers bounded on both sides contains
    both its meet and join, and therefore every monotone map must preserve them. This
    allows constructing the adjoints.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例。** 由任意部分有序集（poset）生成的自由pregroup，由由该有序集元素及其附加类型所形成的元组构成。单群操作是元组的连接。顺序是逐点从生成的有序集中提升的，并且（最重要的是）通过附加类型定义中的顺序条款进行扩展。对于一个非自由示例，考虑从整数到整数的单调映射的单群。再次与逐点顺序结合时，单调映射形成一个pregroup，因为每一个在两侧都有界限的整数集合都包含其交集和并集，因此每一个单调映射都必须保持这些性质。这允许构造附加类型。'
- en: Here is why pregroups help with understanding language.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么pregroups有助于理解语言的原因。
- en: '**Parsing as type-checking.** To check semantic correctness of a given phrase,
    each word in the phrase is first assigned a pregroup element as its syntactic
    type. The type of the phrase is the product of the types of its words, multiplied
    in the pregroup. The phrase is a well-formed sentence if its syntactic type is
    bounded from above by the pregroup unit 𝜄. In other words, we compute the syntactic
    type *S* of the given phrase, and it is a sentence just when *S*≤𝜄. The computation
    can be reduced to drawing arcs to connect each type *x* with an adjoint, be it
    left or right, and coupling them so that each pair falls below 𝜄. If the arcs
    are well-nested[⁷](#4d4e), eliminating the adjacent linked pairs, that fall below
    𝜄 according to the above definition of adjoints, and replacing them by the unit,
    makes other adjoint pairs adjacent and ready to be eliminated. If the phrase is
    a sentence, proceeding like reduces its type to the unit. Since the procedure
    was nondecreasing, this proves that the original type was bounded by the unit
    from above. If the types cannot be matched by linking and eliminated in this way,
    then the phrase is not a sentence. The type actually tells what kind of a phrase
    it is.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**作为类型检查的解析。** 为了检查给定短语的语义正确性，首先为短语中的每个单词分配一个pregroup元素作为其句法类型。短语的类型是它的单词类型在pregroup中的积。若短语的句法类型在pregroup单位𝜄的上界范围内，则该短语是一个结构良好的句子。换句话说，我们计算给定短语的句法类型*S*，当且仅当*S*≤𝜄时，它才是一个句子。该计算可以简化为通过绘制弧线将每种类型*x*与一个附加类型连接，不论是左侧还是右侧，并将它们配对，使得每对类型都低于𝜄。如果这些弧线排列良好[⁷](#4d4e)，消除那些根据上述附加定义低于𝜄的相邻链接对，并用单位替代它们，就会使得其他附加对相邻并准备被消除。如果短语是一个句子，按照这种方式进行处理，会将其类型简化为单位。由于这一过程是单调不减的，这证明了原始类型被𝜄单位上界限制。如果这些类型无法通过连接和消除来匹配，那么该短语就不是一个句子。类型实际上告诉我们它是什么类型的短语。'
- en: We obviously skipped many details and some of them are significant. In practice,
    the head of the sentence is annotated by a type variable *S* that does not get
    discharged and its wire does not arc to another type in the sentence but points
    straight out. This wire can be interpreted as a reference to another sentence.
    By linking the *S-*variables of pairs of sentences and coupling, for instance,
    questions and answers, one could implement a pregroup version of discourse syntax.
    Still further up, by pairing messages and coupling, say, the challenges and the
    responses in an authentication protocol, one could implement a pregroup version
    of a protocol formalism. We will get back to this in a moment.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们显然跳过了许多细节，其中一些是很重要的。在实践中，句子的主语通过一个类型变量*S*进行标注，该变量不会被释放，并且它的连接线不会弯曲到句子中的其他类型，而是直接指向外部。这条连接线可以解释为对另一个句子的引用。通过将一对句子的*S-*变量链接起来，并进行配对，例如，问题和回答，人们可以实现一种pregroup版本的语篇句法。更进一步地，通过配对消息和配对，比如认证协议中的挑战和响应，便可以实现协议形式主义的pregroup版本。我们稍后会回到这个话题。
- en: While they are obviously related with dependency references, the pregroup couplings
    usually deviate from them. On the sentential level, this is because the words
    grouped under the same syntactic type in a lexicon should are expected to be assigned
    the same pregroup type. Lambek’s idea was that even the phrases of the same type
    in constituency grammars should receive the same pregroup type. Whether this requirement
    is justified and advantageous is a matter of contention. The only point that matters
    here is that ***syntax is typing***[⁸](#ff3f).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它们显然与依赖关系相关，但预组耦合通常偏离这些依赖关系。在句子层面，这是因为词典中属于相同语法类型的词汇应该被分配相同的预组类型。兰贝克的想法是，即使在成分语法中，相同类型的短语也应该接受相同的预组类型。这个要求是否合理且有利仍是争议问题。这里唯一重要的观点是，***语法是类型化的***[⁸](#ff3f)。
- en: 4\. Beyond sentence
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4. 超越句子
- en: '**4.1\. Why do we make sentences?**'
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4.1. 为什么我们要造句？**'
- en: Why don’t we stream words, like network routers stream packets? Why can’t we
    approximate what we want to say by adding more words, just like numbers approximate
    points in space by adding more digits?
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们不把词语像网络路由器传输数据包一样流动？为什么我们不能通过增加更多的词汇来逼近我们想说的内容，就像数字通过增加更多的位数来逼近空间中的点一样？
- en: 'The old answer is: “We make sentences to catch a breath”. When we complete
    a sentence, we release the dependency threads between its words. Without that,
    the dependencies accumulate, and you can only keep so many threads in your mind
    at a time. Breathing keeps references from knotting.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 旧的答案是：“我们通过句子来喘口气”。当我们完成一个句子时，我们释放其词语之间的依赖关系。没有这一点，依赖关系会积累，你一次只能在脑中保持有限的线程。呼吸使引用关系不会缠结。
- en: '**Exercise**. We make long sentences for a variety of reasons and purposes.
    A sample of a long sentence is provided below[⁹](#532f). Try to split it into
    shorter ones. What is gained and what lost by such operations? Ask a chatbot to
    do it.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习**。我们造长句有多种原因和目的。下面提供了一句话的示例[⁹](#532f)。试着将其拆分成更短的句子。通过这种操作获得了什么，失去了什么？请问聊天机器人做一下。'
- en: '**Anaphora** is a syntactic pattern that occurs within or between sentences.
    In rhetorics and poetry, it is the figure of speech where the same phrase is repeated
    to amplify the argument or thread a reference. In ChatGPT’s view, it works because
    the rhythm of the verse echoes the patterns of meaning:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**指代**是一种出现在句子内或句子间的句法模式。在修辞和诗歌中，它是一种通过重复同一短语来加强论点或串联引用的修辞手法。在ChatGPT看来，它之所以有效，是因为诗句的节奏与意义模式相呼应：'
- en: In every word, life’s rhythm beats,
  id: totrans-108
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每个词中，生命的节奏跳动，
- en: In every truth, life’s voice speaks.
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在每个真理中，生命的声音发出。
- en: In every dream, life’s vision seeks,
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在每个梦中，生命的愿景寻求，
- en: In every curse, life’s revenge rears.
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每个咒骂中，生命的复仇升起。
- en: In every laugh, life’s beat nears,
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每个笑声中，生命的节拍接近，
- en: In every pause, life’s sound retreats.
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每个停顿中，生命的声音退去。
- en: Syntactic partitions reflect the semantic partitions. ***Sentential syntax is
    the discipline of charging and discharging syntactic dependencies to transmit
    semantic references.***
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 句法划分反映语义划分。***句子语法是通过充放句法依赖关系来传递语义引用的学科。***
- en: 4.2\. Language articulations and network layers
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.2. 语言的表达与网络层次
- en: The language streams are articulated into words, sentences, paragraphs, sections,
    chapters, books, libraries, literatures; speakers tell stories, give speeches,
    maintain conversations, follow conventions, comply with protocols. Computers reduce
    speech to tweets and expand it to chatbots.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 语言流被组织成词语、句子、段落、章节、书籍、图书馆、文学；说话者讲述故事，发表演讲，维持对话，遵循约定，遵守协议。计算机将言语简化为推文并扩展到聊天机器人。
- en: The layering of language articulations is an instance of the stratification
    of communication channels. Artificial languages evolved the same layering. The
    internet stack is another instance.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 语言表达的分层是沟通通道分层的一个实例。人工语言也经历了相同的分层过程。互联网协议栈是另一个实例。
- en: '![](../Images/594e65a1aa99ebae58fe10458c269240.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/594e65a1aa99ebae58fe10458c269240.png)'
- en: Natural language are articulated
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 自然语言是有层次的
- en: '![](../Images/12ce4b627d57541daaa61ae944dd118e.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/12ce4b627d57541daaa61ae944dd118e.png)'
- en: Programming languages are composed
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言由…组成
- en: '![](../Images/4811ad223de4cc481911baa1a187156a.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4811ad223de4cc481911baa1a187156a.png)'
- en: Network channels are stacked
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 网络通道堆叠着
- en: 'Communication channels are stratified because information carriers are implemented
    on top of each other. The layered interaction architectures are pervasive, in
    living organisms, in the communication networks between them, and in all languages
    developed by the humans. The reference coupling mechanisms, similar to the syntactic
    type structures that we studied, emerge at all levels. The pregroup structure
    of sentential syntax is echoed in the question-answer structure of simple discourse
    and in the SYN-ACK pattern of basic network protocols. Closely related structures
    arise in all kinds of protocols, across the board, whether they are established
    to regulate network functions, or secure interactions, or social, political, economic
    mechanisms. The following figure shows a high-level view of a simple 2-factor
    authentication protocol, presented as a basic *cord space*[¹⁰](#1c73):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 通信通道是分层的，因为信息承载体是层叠实现的。层次化的交互架构在生物体中普遍存在，在它们之间的通信网络中也存在，在人类开发的所有语言中都能看到。我们研究过的类似语法类型结构的引用耦合机制在各个层级中都会出现。句子语法的预组结构在简单话语的问答结构和基本网络协议中的
    SYN-ACK 模式中都有体现。所有种类的协议中都会出现紧密相关的结构，无论是为了规范网络功能、确保交互安全，还是为了社交、政治和经济机制而建立的。下图展示了一个简单的
    2 因子认证协议的高级视图，作为基本的 *电缆空间*[¹⁰](#1c73)：
- en: '![](../Images/74463346f62711827d5e89c57c927f5d.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74463346f62711827d5e89c57c927f5d.png)'
- en: The University of Hawaii Laulima protocol as a cord space
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 夏威夷大学的 Laulima 协议作为电缆空间
- en: 'And here is the same protocol with the cord interactions viewed as adjoint
    pairs of types:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是相同的协议，将电缆交互视为类型的伴随对：
- en: '![](../Images/05b80d8f11da01109d08ee456367e8fb.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05b80d8f11da01109d08ee456367e8fb.png)'
- en: Laulima protocol as a syntactic type
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Laulima 协议作为一种语法类型
- en: The corresponding interactions are marked by the corresponding sequence numbers.
    The upshot is that
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的交互由相应的序列号标记。结果是：
- en: natural-language conversations,
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自然语言对话，
- en: software-system architectures,
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件系统架构，
- en: security and network protocols
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性和网络协议
- en: share crucial features. It is tempting to think of them as a product of a high-level
    deep syntax, shared by all communication processes. Such syntax could conceivably
    arise from innate capabilities hypothesized in the Chomskian theory, or from physical
    and logical laws of information processing.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 具有关键特征。人们很容易将它们视为所有通信过程共享的高级深层语法的产物。这样的语法可以合理地从乔姆斯基理论中假设的天赋能力中产生，或者从信息处理的物理和逻辑法则中衍生出来。
- en: 5\. Beyond syntax
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5. 超越语法
- en: We have seen how syntactic typing supports semantic information transmission.
    Already Groucho’s elephant sentence fed syntactic and semantic ambiguities back
    into each other.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到语法类型如何支持语义信息的传递。格劳乔的象句已经将语法和语义歧义互相反馈。
- en: But if syntactic typing and semantic assignments steer each other, then the
    generally adopted restriction of syntactic analyses to sentences cannot be justified,
    since semantic ambiguities cannot be resolved on the level of sentence. Groucho
    proved that.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果语法类型与语义分配相互作用，那么普遍接受的将语法分析仅限于句子的限制就无法得到证实，因为语义歧义无法在句子层面上解决。格劳乔已经证明了这一点。
- en: 5.1\. Semantic context-sensitivity
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.1. 语义上下文敏感性
- en: Consider the sentence
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下这个句子
- en: John said he was sick and got up to leave.
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 约翰说他生病了并起身准备离开。
- en: 'Adding a context changes its meaning:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 添加上下文会改变其含义：
- en: Mark collapsed on bed.
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 马克倒在床上。
- en: John said he was sick and got up to leave.
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 约翰说他生病了并起身准备离开。
- en: For most people, “he was sick” now refers to Mark. Note that the silent “he”
    in “[he] got up to leave” remains bound to John. Or take
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 对大多数人来说，“他生病了”现在指的是马克。注意，在“[他]起身准备离开”中的沉默“他”仍然与约翰绑定。或者看
- en: Few professors came to the party and had a great time.
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 很少有教授来参加派对并度过了愉快的时光。
- en: 'The meaning does not significantly change if we split the sentence in two and
    expand :'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将句子拆分成两部分并扩展，它的含义并不会发生显著变化：
- en: Since it started late, few professors came to the party. They had a great time.
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 由于开会晚了，来参加派对的教授很少。他们度过了愉快的时光。
- en: 'Like in the John and Mark example, a context changes the semantical binding,
    this time of “it”:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 就像约翰和马克的例子中一样，一个上下文改变了语义绑定，这次是“它”的绑定：
- en: There was a departmental meeting at 5\. Since it started late, few professors
    came to the party. They had a great time.
  id: totrans-149
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 5 点钟有一个系部会议。由于开会晚了，来参加派对的教授很少。他们度过了愉快的时光。
- en: 'But this time, adding a first sentence that binds the subject “they” differently
    may change the meaning of “they” in the last sentence::'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 但这一次，添加一个将主语“他们”以不同方式绑定的首句，可能会改变最后一句中“他们”的含义：
- en: They invited professors. There was a departmental meeting at 5\. Since it started
    late, few professors came to the party. They had a great time.
  id: totrans-151
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 他们邀请了教授。下午五点有一个系务会议。由于会议开始晚，来参加派对的教授很少。他们度过了愉快的时光。
- en: The story is now that *students* had a great time — the students who are never
    explicitly mentioned! Their presence is only derived from the background knowledge
    about the general context of professorial existence ;)
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在故事是*学生们*度过了愉快的时光——这些学生从未被明确提及！他们的存在只是通过关于教授生活一般背景知识推导出来的 ;)
- en: 5.2\. Syntactic context-sensitivity
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.2\. 句法上下文敏感性
- en: On the level of sentential syntax of natural languages, as generated by formal
    grammars, proving context-sensitivity amounts to finding a language that contains
    some of the patterns known to require a context-sensitive grammar, such as *aⁿbⁿcⁿ*
    for arbitrary letters *a,b,c∈𝛴* and any number *n*, or *ww*, *www*, or *wwww*
    for arbitrary word *w∈𝛴**. Since people are unlikely to go around saying to each
    other things like *aⁿbⁿcⁿ*, the task boiled down to finding languages which require
    constructions of repetitive words in the form *ww*, *www*, etc. The quest for
    such examples became quite competitive.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在自然语言的句法层面，由形式语法生成的句子，证明上下文敏感性等同于找到包含一些已知需要上下文敏感语法的模式的语言，如任意字母 *a,b,c∈𝛴* 和任意数字
    *n* 的 *aⁿbⁿcⁿ*，或任意单词 *w∈𝛴** 的 *ww*，*www*，或 *wwww*。由于人们不太可能互相说像 *aⁿbⁿcⁿ* 这样的句子，这项任务就变成了找到需要重复单词构造形式
    *ww*，*www* 等的语言。寻找这种例子的竞争变得相当激烈。
- en: Since a language with a finite lexicon has a finite number of words for numbers,
    at some point you have to say something like “quadrillion quadrillion”, assuming
    that quadrillion is the largest number denoted by a single word. But it was decided
    by the context sensitivity competition referees that numbers don’t count.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由于一个词汇有限的语言有一个有限的数字词汇，在某个时刻你必须说类似“千万万”的话，假设“千万万”是一个由单一词表示的最大数字。但根据上下文敏感性竞赛裁判的决定，数字不算在内。
- en: Then someone found that in the Central-African language Bambara, the construction
    that says “any dog” is in the form “dog dog”. Then someone else noticed context-sensitive
    nesting phenomena in Dutch, but not everyone agreed. Eventually, most people settled
    on Swiss German as a definitely context sensitive language, and the debate about
    syntactic contexts-sensitivity subsided. With a hindsight, it had the main hallmarks
    of a theological debate. The main problem with counting how many angels can stand
    on the tip of a needle is that angels generally don’t hang out on needles. The
    main problem with syntactic context sensitivity is that contexts are never purely
    syntactic.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 然后有人发现，在中非的班巴拉语言中，表示“任何狗”的构造形式是“狗狗”。接着又有人注意到荷兰语中的上下文敏感嵌套现象，但并非所有人都认同。最终，大多数人认为瑞士德语是一种明确的上下文敏感语言，关于句法上下文敏感性的争论也随之平息。事后看来，这场争论具有明显的神学辩论特征。关于多少天使可以站在针尖上的主要问题是，天使通常不会待在针上。关于句法上下文敏感性的主要问题是，上下文从来不是纯粹的句法。
- en: 5.3\. Communication is the process of sharing semantical contexts
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.3\. 沟通是共享语义上下文的过程
- en: Chomsky noted that natural language should be construed as context-sensitive
    as soon as he defined the notion of context-sensitivity. Restricting the language
    models to syntax, and syntax to sentences, made proving his observation into a
    conundrum.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 乔姆斯基指出，一旦他定义了“上下文敏感性”这一概念，自然语言就应该被视为上下文敏感的。将语言模型限制为句法，并将句法限制为句子，使得证明他的观察结果变得非常棘手。
- en: 'But now that the theology of syntactic contexts is behind us, and the language
    models are in front of us, waiting to be understood, the question arises: ***How
    are the contexts really processed?***How do we do it, and how do the chatbots
    do it? Where do we all store big contexts? A novel builds up its context starting
    from the first sentence, and refers to it 800 pages later. How does a language
    model find the target of such a reference? It cannot maintain references between
    everything to everything. How do you choose what to remember?'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在句法上下文的神学问题已被抛在脑后，语言模型摆在我们面前，等待被理解，问题随之而来：***上下文究竟是如何处理的？***我们是如何做到的，聊天机器人又是如何做到的？我们都将大量上下文存储在哪里？一部小说从第一句开始建立其上下文，并在800页后提及它。语言模型如何找到这种引用的目标？它不能维持任何事物之间的相互引用。你如何选择记住什么？
- en: 'Semantic dependencies on remote contexts have been one of the central problems
    of natural language processing from the outset. The advances in natural language
    processing that we witness currently arise to a large extent from progress in
    solving that problem. To get an idea about the challenge, consider the following
    paragraph[¹¹](#a6a2):'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 语义依赖于遥远上下文的问题一直是自然语言处理的核心问题之一。我们目前目睹的自然语言处理的进展，在很大程度上源自于解决这一问题的进展。为了了解这一挑战，考虑以下段落[¹¹](#a6a2)：
- en: Unsteadily, Holmes stepped out of the barge. Moriarty was walking away
  id: totrans-161
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不稳定地，霍尔姆斯从驳船上走了下来。莫里亚蒂正转身离去。
- en: down the towpath and into the fog. Holmes ran after him. `Give it back to me’,
    he shouted. Moriarty turned and laughed. He opened his hand and the
  id: totrans-162
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 沿着拖曳小道进入了雾中。霍尔姆斯追了上去。`把它还给我'，他喊道。莫里亚蒂转身笑了笑。他张开了手，手中拿着钥匙。
- en: small piece of metal fell onto the path. Holmes reached to pick it up but
  id: totrans-163
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一小块金属掉到了小路上。霍尔姆斯伸手去捡，但
- en: Moriarty was too quick for him. With one slight movement of his foot, he tipped
    the key into the lock.
  id: totrans-164
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 莫里亚蒂太快了。只需微微一动脚，他便把钥匙插入了锁中。
- en: If you are having trouble understanding what just happened, you are in a good
    company. Without sufficient hints, the currently available chatbots do not seem
    to be able to produce a correct interpretation[¹²](#40b1). In the next part, we
    will see how the contexts are generated, including much larger. After that, we
    will be ready to explain how they are processed.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在还不明白刚才发生了什么，说明你并不孤单。没有足够的提示，当前可用的聊天机器人似乎无法做出正确的解释[¹²](#40b1)。在接下来的部分，我们将看到如何生成这些上下文，且包含更大的上下文。之后，我们将准备好解释它们是如何被处理的。
- en: Attributions
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: As mentioned in the text, the anaphoric verses “*In every… life’s*” were composed
    by ChatGPT, and the illustration of the sentence “*Colorless green ideas sleep
    furiously*” was created by Dall-E. All other graphics were created by the author.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 正如文中提到的，代指的诗句“*在每一个……生命中的*”是由ChatGPT创作的，而句子“*无色的绿色想法猛烈地沉睡*”的插图是由Dall-E生成的。所有其他图形均由作者创作。
- en: Notes
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: ¹The fact that most people do not understand each other even when they speak
    the same language echoes the fact that most members of the same species do not
    breed, but select mates through complex rituals.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ¹大多数人在讲相同语言时仍然不能相互理解，这一事实与同种生物大多数成员不繁殖而是通过复杂的仪式选择配偶的事实相呼应。
- en: ²Early linguists (Humboldt, Boas, Sapir, Whorf) were mainly focused on understanding
    different worldviews (Weltanschauung, Weltanzicht) by understanding different
    languages (German, Hebrew, English, Hopi, Nahuan…).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: ²早期的语言学家（洪堡特、博阿斯、萨皮尔、沃尔夫）主要关注通过理解不同语言（德语、希伯来语、英语、霍比语、纳瓦胡语……）来理解不同的世界观（Weltanschauung,
    Weltanzicht）。
- en: ³The partition of trivium echoes the organization of *Organon*, where the first
    book, devoted to categories, was followed by three devoted to logic, and the final
    two to topical argumentations, feeding into rhetorics.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ³三学科的划分呼应了*Organon*的组织结构，其中第一本书专门讨论了类别，接下来的三本书讨论了逻辑，最后两本书讨论了主题性论证，进而进入修辞学。
- en: ⁴For any set *A* write *A** to denote the set of all *n*-tuples 𝛼*={a1,a2,…,an}*
    from *A*, for all *n = 0,1,…* and arbitrary *a1,a2,…,an* from *A*. Since *n* can
    be 0, *A** includes the empty tuple, written <>. Denoting the set of all labels
    by 𝛬 = 𝛴∪𝛯, the set of rules is a finite binary relation [::=] ⊆ 𝛬*×𝛬*, obtained
    by listing (1).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: ⁴对于任意集合*A*，写作*A**表示所有*n*元组 𝛼*={a1,a2,…,an}* 从*A*中选出的集合，适用于所有*n = 0,1,…*以及任意从*A*中选出的*a1,a2,…,an*。由于*n*可以是0，*A**包括空元组，写作<>。设所有标签的集合为𝛬
    = 𝛴∪𝛯，则规则集合是一个有限的二元关系[::=] ⊆ 𝛬*×𝛬*，通过列出（1）得到。
- en: ⁵Chomsky’s ``Type-x’’ terminology is unrelated with the ``syntactic type’’ terminology.
    Many linguists use ``syntactic categories’’ instead. But the term ``category’’
    is in the meantime widely used in mathematics in a completely different meaning,
    increasingly applied in linguistics.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ⁵乔姆斯基的``Type-x''术语与``句法类型''术语无关。许多语言学家更倾向于使用``句法类别''这一术语。不过，``类别''这个词同时在数学中有着完全不同的意义，并且在语言学中越来越多地被应用。
- en: ⁶For historic and logical background of the mathematical theory of types, see
    Ch.1 of the book “[Programs as diagrams](https://dusko.org/)”.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ⁶有关类型的数学理论的历史和逻辑背景，请参阅《[程序作为图示](https://dusko.org/)》一书的第1章。
- en: ⁷If the arcs are not well-nested, as it is the case, for instance, with Dutch
    syntax, then the procedure is more complicated, but we won’t go into that.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: ⁷如果弧线没有很好地嵌套，就像荷兰语句法的情况那样，那么过程会更复杂，但我们不会深入探讨这个问题。
- en: ⁸For more details on pregroup-based syntactic analysis see Jim Lambek’s book
    “[From Word to Sentence](https://books.google.com/books/about/From_Word_to_Sentence.html?id=ZHgRaRaadJ4C)”.
    For the logical and mathematical background, see “[Lambek prergroups are Frobenius
    spiders](https://compositionality-journal.org/papers/compositionality-4-1/)”.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ⁸关于基于预群的句法分析的更多细节，请参阅吉姆·兰贝克的书籍《[从词到句](https://books.google.com/books/about/From_Word_to_Sentence.html?id=ZHgRaRaadJ4C)》。关于逻辑和数学背景，请参阅《[兰贝克预群是弗罗贝纽斯蜘蛛](https://compositionality-journal.org/papers/compositionality-4-1/)》。
- en: ⁹“That night he dreamt of horses on a high plain where the spring rains had
    brought up the grass and the wildflowers out of the ground and the flowers ran
    all blue and yellow far as the eye could see and in the dream he was among the
    horses running and in the dream he himself could run with the horses and they
    coursed the young mares and fillies over the plain where their rich bay and their
    chestnut colors shone in the sun and the young colts ran with their dams and trampled
    down the flowers in a haze of pollen that hung in the sun like powdered gold and
    they ran he and the horses out along the high mesas where the ground resounded
    under their running hooves and they flowed and changed and ran and their manes
    and tails blew off them like spume and there was nothing else at all in that high
    world and they moved all of them in a resonance that was like a music among them
    and they were none of them afraid horse nor colt nor mare and they ran in that
    resonance which is the world itself and which cannot be spoken but only praised.”
    — Cormac McCarthy, *All the Pretty Horses*
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ⁹“那天晚上，他梦见自己在一片高原上，春雨滋养了草地和野花，野花从地里冒出来，开满了蓝色和黄色，一眼望不到边。在梦中，他和马群一起奔跑，在梦中他自己也能和马一起奔跑，马群在草原上追逐年轻的母马和小马驹，阳光下它们的深棕色和栗色毛发闪闪发光，年轻的小马驹与母马一起奔跑，踩踏着花朵，花朵在阳光下变得模糊，像金粉一样的花粉悬浮在空中，他们奔跑着，他和那些马穿越高高的台地，脚下的土地在马蹄的奔腾声中回响，他们奔跑、变换、流动，鬃毛和尾巴如泡沫般随风飘扬，那片高远的天地里什么都没有，只有他们在共鸣中移动，这共鸣如同音乐在他们之间流淌，没有任何一匹马、驹子或母马感到恐惧，他们在那共鸣中奔跑，那共鸣就是这个世界，它是无法言说的，只有被赞美。”
    — 科马克·麦卡锡，《*所有美丽的马*》
- en: ¹⁰[Cord spaces](https://dl.acm.org/doi/10.5555/959088.959095) are a simple formalism
    for analyzing security protocols.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: ¹⁰[绳索空间](https://dl.acm.org/doi/10.5555/959088.959095)是分析安全协议的一种简单形式。
- en: ¹¹The paragraph is a variation on the context of Sir Arthur Conan Doyle’s short
    story “The final problem”.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: ¹¹这一段落是亚瑟·柯南·道尔的短篇小说《最后的谜题》中的情节变体。
- en: '¹² On key attention span:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: ¹² 关于注意力跨度的关键点：
- en: '![](../Images/8411df499b21622c7b961301878239c4.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8411df499b21622c7b961301878239c4.png)'
