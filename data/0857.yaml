- en: 'The Double Pendulum and Beyond: Investigating Chaos With Multi-Armed Pendulums'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 双摆及其超越：通过多臂摆研究混沌
- en: 原文：[https://towardsdatascience.com/the-double-pendulum-and-beyond-investigating-chaos-with-multi-armed-pendulums-7a5751d059db?source=collection_archive---------2-----------------------#2024-04-03](https://towardsdatascience.com/the-double-pendulum-and-beyond-investigating-chaos-with-multi-armed-pendulums-7a5751d059db?source=collection_archive---------2-----------------------#2024-04-03)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-double-pendulum-and-beyond-investigating-chaos-with-multi-armed-pendulums-7a5751d059db?source=collection_archive---------2-----------------------#2024-04-03](https://towardsdatascience.com/the-double-pendulum-and-beyond-investigating-chaos-with-multi-armed-pendulums-7a5751d059db?source=collection_archive---------2-----------------------#2024-04-03)
- en: Using VPython simulations to model chaotic motion and investigate what defines
    a chaotic system.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用VPython仿真模拟混沌运动，并探讨定义混沌系统的关键特征。
- en: '[](https://medium.com/@oliverwjohnson06?source=post_page---byline--7a5751d059db--------------------------------)[![Oliver
    W. Johnson](../Images/66fe30ee3ccc1556ee2a4753b9c02235.png)](https://medium.com/@oliverwjohnson06?source=post_page---byline--7a5751d059db--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--7a5751d059db--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--7a5751d059db--------------------------------)
    [Oliver W. Johnson](https://medium.com/@oliverwjohnson06?source=post_page---byline--7a5751d059db--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@oliverwjohnson06?source=post_page---byline--7a5751d059db--------------------------------)[![Oliver
    W. Johnson](../Images/66fe30ee3ccc1556ee2a4753b9c02235.png)](https://medium.com/@oliverwjohnson06?source=post_page---byline--7a5751d059db--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--7a5751d059db--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--7a5751d059db--------------------------------)
    [Oliver W. Johnson](https://medium.com/@oliverwjohnson06?source=post_page---byline--7a5751d059db--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--7a5751d059db--------------------------------)
    ·12 min read·Apr 3, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--7a5751d059db--------------------------------)
    ·阅读时间12分钟·2024年4月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Any physics student has examined the lowly pendulum, probably more than they
    wanted to. Along with the mass on a spring, pendulums are the quintessential example
    of simple harmonic motion. The keyword there is *simple*. They, as you may know,
    are incredibly easy to model mathematically. The period of the pendulum can be
    represented by the formula below, where g is the force of gravity and *L* is the
    length of the pendulum.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 任何物理学学生都研究过低级的单摆，可能比他们想要的还要多。与弹簧上的质量一起，摆是简谐运动的典型例子。这里的关键词是*简*。你可能知道，单摆非常容易用数学建模。单摆的周期可以通过下面的公式表示，其中g是重力加速度，*L*是摆长。
- en: '![](../Images/96887b1a61af4f2ea0a3c35a8dee4f18.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/96887b1a61af4f2ea0a3c35a8dee4f18.png)'
- en: The angular displacement is somewhat more interesting but still not too deep.
    The equation itself is more complex, but in reality it is just a cosine wave.
    The equation below represents the angular displacement of a single pendulum, where
    *θ* is the angular displacement, *A* is the maximum angular displacement (in most
    cases this is just the release angle), *ω* is the angular frequency, and *t* is
    time.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 角位移稍微有趣一些，但仍然不算太深奥。方程本身更复杂，但实际上它只是一个余弦波。下面的方程表示单摆的角位移，其中*θ*是角位移，*A*是最大角位移（在大多数情况下，这只是释放角度），*ω*是角频率，*t*是时间。
- en: '![](../Images/c90800b5ae3a905c1dce44149784a579.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c90800b5ae3a905c1dce44149784a579.png)'
- en: With that out of the way, let’s get to the more interesting, albeit effectively
    impossible (you’ll see), mathematics and physics.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 说完这些，我们来看看更有趣的内容，尽管实际上它几乎不可能实现（你会明白的），数学和物理学。
- en: Odds are, if you’ve worked with a regular pendulum, you’re at least somewhat
    familiar with the [double pendulum](https://en.wikipedia.org/wiki/Double_pendulum),
    which is reminiscent of the infamous [three-body problem](https://en.wikipedia.org/wiki/Three-body_problem).
    The three-body problem represents the idea that an analytical solution to the
    motion of three bodies in a system where all bodies’ forces affect each other
    is impossible to solve, since the forces of each body interact with the others
    simultaneously. In short, the double pendulum is impossible to solve analytically.
    In terms of the pendulum equations stated above, the one that you really can’t
    solve is the equation for *θ,* or the angular displacement of both pendulums.
    You also cannot solve for the period, but that’s mostly because a double pendulum
    doesn’t exactly have a regular period. Below is a visual representation of the
    double pendulum system we’ve discussed, where the pivot point is anchored to the
    wall, the angles are marked with *θ1* and *θ2,* and the hanging masses are marked
    *m1* and *m2*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经操作过一个常规的摆，你或许对[双摆](https://en.wikipedia.org/wiki/Double_pendulum)有一定了解，它让人联想到臭名昭著的[三体问题](https://en.wikipedia.org/wiki/Three-body_problem)。三体问题展示了这样一个观点：在一个系统中，三个物体的运动分析解是无法解决的，因为每个物体的力同时与其他物体相互作用。简而言之，双摆无法通过解析方法解决。根据上面提到的摆的方程，真正无法解出的是*θ*，即两个摆的角位移。你也无法解出周期，但这主要是因为双摆并没有一个固定的周期。以下是我们讨论过的双摆系统的视觉表示，支点固定在墙上，角度用*θ1*和*θ2*标记，悬挂的质量用*m1*和*m2*标记。
- en: '![](../Images/e38afcd7c1abeb7543adb8d13d301e61.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e38afcd7c1abeb7543adb8d13d301e61.png)'
- en: To reiterate– in our current physics, we cannot predict the motion of a double
    pendulum analytically. But why? Well, the motion is not simply random, but rather
    **chaotic**. How do we prove that chaotic and random aren’t the same? That is
    the question we will seek to answer later on.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 重申一下——在我们当前的物理学中，我们无法解析预测双摆的运动。那么，为什么呢？实际上，运动并非完全随机，而是**混沌**的。我们如何证明混沌与随机不同呢？这是我们稍后将要解答的问题。
- en: 'You’ve likely seen some YouTube title about chaos or [Chaos Theory](https://en.wikipedia.org/wiki/Chaos_theory),
    and I’m willing to bet the thumbnail image looked something like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在YouTube上看到过一些关于混沌或[混沌理论](https://en.wikipedia.org/wiki/Chaos_theory)的标题，我敢打赌缩略图看起来大概是这样的：
- en: '![](../Images/4d4f4ec500edaefb5351f70909b85d94.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d4f4ec500edaefb5351f70909b85d94.png)'
- en: That image, along with many other butterfly wing-esque drawings, are most commonly
    associated with chaos theory. Something not commonly thought of as part of chaos
    theory is the double, triple, and any other pendulum with more than one arm. Let’s
    explore some of the properties of chaotic motion and try to learn more about it
    as best we can, with help from a computer program that we will dive into later.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那张图像，以及许多其他类似蝴蝶翅膀的图形，通常与混沌理论相关联。混沌理论中一个不常被认为是其一部分的概念是双摆、三摆以及其他多摆的情况。让我们探索混沌运动的一些特性，并尽可能地深入了解它，稍后我们将借助计算机程序来实现这一点。
- en: One property we can investigate is the effect that making a small change in
    starting conditions has on the end result. Will the change be negligible in the
    end, or will it yield an answer entirely outcome from the original?Below is a
    computer simulation of a double pendulum at t=50, where the starting angles were
    80° and 0° respectively for *θ1* and *θ2\.* (Angles are the same as shown in the
    diagram above)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以调查的一个特性是，起始条件的微小变化对最终结果的影响。这个变化最终会变得微不足道，还是会导致与原始结果完全不同的结论呢？以下是双摆在t=50时的计算机仿真，其中*θ1*和*θ2*的起始角度分别为80°和0°。（角度与上图所示相同）
- en: '![](../Images/dae57a4e203cd9c19d0029cec3dc668d.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dae57a4e203cd9c19d0029cec3dc668d.png)'
- en: The red line drags behind the bottom mass (*m2) of the pendulum, and remains
    for 2 seconds after being drawn.*
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 红线拖曳着摆的底部质量(*m2*)，并在画出后保持2秒钟。
- en: Now, let’s run the **exact** **same** simulation, the image is of t=50, all
    the masses and arm lengths are completely identical. However, the angles are 79°
    and 0° for *θ1* and *θ2\.* There’s a 1° change in the starting value of *θ1,*
    let’s see how it affects the outcome.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进行**完全相同**的仿真，图像展示的是t=50，所有的质量和摆臂长度都是完全相同的。然而，*θ1*和*θ2*的角度分别为79°和0°。*θ1*的起始值变化了1°，让我们看看它如何影响结果。
- en: '![](../Images/4aca810f1e816675485b3d9b0788ded7.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4aca810f1e816675485b3d9b0788ded7.png)'
- en: Unsurprisingly (or surprisingly, I don’t know what you expected), with a change
    of just 1° the system has dramatically changed to the point where the final position
    of the system and the line traced by it don’t resemble the first image at all.
    That’s independent of any outside variables, as in our simulation there is no
    friction, air resistance, or any other hindrances. This example shows the idea
    that when a system exhibits chaotic motion, as in a double pendulum, even the
    most minute change in conditions can cause an enormous change in the result.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 不出所料（或者说出乎意料，我不确定你期待的是什么），仅仅改变1°，系统发生了剧烈变化，最终的位置和系统所描绘的轨迹与最初的图像完全不相似。这与任何外部变量无关，因为在我们的模拟中没有摩擦、空气阻力或其他任何障碍。这个例子展示了一个观点：当一个系统表现出混沌运动时，比如双摆，即使是最微小的条件变化，也能导致结果发生巨大变化。
- en: So, we’ve nailed down one interesting aspect of chaotic motion– a tiny change
    in starting condition can cause an enormous change in result. Let’s try to identify
    a few more. What would happen if we were to run the same double pendulum experiment
    again? Experimentally, this is all but impossible; it would involve having an
    infinite degree of precision when measuring things like gravitational field, mass,
    air resistance, and *every single other variable in the experiment,* and then
    using your magical infinite precision data to set up the experiment again, *identically*.
    We, however, have a nice simulation to use which makes that challenge disappear.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们已经掌握了混沌运动的一个有趣方面——初始条件的微小变化能导致结果发生巨大变化。让我们再尝试识别一些其他方面。如果我们再次进行相同的双摆实验，会发生什么呢？从实验上来说，这几乎是不可能的；它需要在测量诸如引力场、质量、空气阻力和*实验中的每一个其他变量*时具有无限精度，然后使用你那无限精度的数据重新设置实验，*完全相同*。然而，我们有一个很好的模拟工具，可以使这个挑战消失。
- en: 'Let’s run the double pendulum simulation similar to before, but with some variables
    changed so the image isn’t the same: t=50, *θ1=80°*, *θ2=*15*°*, and the physical
    properties of the pendulum are the same (length, mass). Here is the result:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行一个类似之前的双摆模拟，但改变了一些变量，以便图像与之前不同：t=50，*θ1=80°*，*θ2=15°*，摆的物理特性（长度、质量）保持不变。以下是结果：
- en: '![](../Images/fe96ea05ef66cc4cc16f28e8bdf40e79.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fe96ea05ef66cc4cc16f28e8bdf40e79.png)'
- en: Spoiler alert, it was the exact same the second time… And the third, fourth
    fifth, and sixth time. Just to prove a point, let’s also try this exercise with
    a triple pendulum. We’ll use the same starting conditions, although now we have
    a third angle, *θ3*, so we’ll use *θ1=*80°, *θ2=15°, θ3=0°.* A triple pendulum
    is much more computationally intensive, though, so the image will be taken at
    t=10.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 剧透提醒，第二次的结果完全相同……第三次、第四次、第五次和第六次也是一样。为了证明这一点，我们还可以尝试用三摆做这个实验。我们将使用相同的初始条件，但现在有了第三个角度*θ3*，所以我们将使用*θ1=80°*，*θ2=15°*，*θ3=0°*。不过，三摆的计算量要大得多，所以这张图片是在t=10时拍摄的。
- en: '![](../Images/17b74221319befc21c06be0c2834ec66.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/17b74221319befc21c06be0c2834ec66.png)'
- en: In the triple pendulum simulation, the red line is dragged behind the third
    mass.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在三摆的模拟中，红线是由第三个质量拖动的。
- en: Although it is even more complex than the double pendulum simulation, the fact
    that the triple pendulum exhibits the same tendency to repeat its pattern under
    identical starting conditions is important. That idea of an identical outcome
    under identical conditions proves that chaotic motion and chaotic systems are
    deterministic, thus not random. Again, since this is so hard to prove experimentally
    or use in practice it doesn’t affect our understanding of the real world very
    much. We do, however, now know that chaotic systems are not random and can be
    predicted with the right knowledge. Additionally, since we proved that a small
    change can have a large effect, we know that an incredibly high degree of precision
    is needed to effectively predict the outcome of a chaotic system.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管三摆的模拟比双摆更复杂，但它表现出相同的特性——在相同初始条件下，三摆也会重复其模式。这种在相同条件下得到相同结果的思想证明了混沌运动和混沌系统是确定性的，而非随机的。再次强调，由于实验上很难证明这一点，或者在实践中运用它，这并不会对我们对现实世界的理解产生太大影响。然而，我们现在知道，混沌系统并非随机的，并且在掌握正确的知识下是可以预测的。此外，由于我们证明了微小的变化会产生巨大的影响，我们也知道，要有效预测混沌系统的结果，必须具备极高的精度。
- en: 'We’ve now identified two significant properties of chaotic motion: the first
    is that a tiny change can have huge implications in the outcome of the system,
    and the second is that chaotic motion is not random but rather it is deterministic.
    Let’s try to find one more– as we discussed at the very beginning of the article,
    the variable you really can’t solve for in a double pendulum is the angular displacement.
    However, we also said that solving for period was futile because a double pendulum
    does not repeat– let’s test that theory.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经确定了混沌运动的两个重要特性：第一个是微小的变化会对系统的结果产生巨大影响，第二个是混沌运动并非随机的，而是确定性的。让我们再找一个特性——正如文章一开始所讨论的，双摆中你无法求解的变量是角位移。然而，我们也说过，求解周期是徒劳的，因为双摆不会重复——让我们来验证这个理论。
- en: 'First, let’s run the double pendulum experiment with the following conditions:
    *θ1*=30°, *θ2*=30°, with the same masses and lengths as before. This time, let’s
    use VPython’s graphing capabilities to record a chart of the height of the bottom
    mass as a function of time:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们以以下条件运行双摆实验：*θ1*=30°，*θ2*=30°，质量和长度与之前相同。这次，我们使用VPython的绘图功能记录底部质量随着时间变化的高度图表：
- en: '![](../Images/245e36981cd95792726efe700c3770e0.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/245e36981cd95792726efe700c3770e0.png)'
- en: If you ask me, that looks pretty periodic. So, does this mean that the system
    described above is not a chaotic system? And if the motion is not chaotic, does
    that mean we could reach an analytical solution to the motion of the double pendulum
    when it has less than some threshold energy needed to become chaotic? I’ll leave
    that as an exercise to the reader. To do that though, you might need the help
    of the program I wrote and used in this article, so let’s walk through it. This
    program is written in VPython using [GlowScript](https://www.glowscript.org/),
    so be sure that you’re running it on the WebVPython system, and not just any python
    editor.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你问我，那个看起来相当周期性。那么，这是否意味着上述系统不是一个混沌系统？如果运动不是混沌的，是否意味着我们能够找到双摆在能量低于某个阈值时的运动的解析解？这个问题我留给读者去思考。不过，为了做到这一点，你可能需要我在本文中编写并使用的程序的帮助，所以我们来一起看看。这个程序是用VPython编写的，并使用了[GlowScript](https://www.glowscript.org/)，因此请确保你在WebVPython系统上运行它，而不是在任何Python编辑器中。
- en: First, let’s define the physical constants we’ll use in the program. These include
    the masses, lengths of arms, and force of gravity. Additionally, we’ll define
    the starting conditions of the system, where theta1 and theta2 are the starting
    angles, and theta1dot and theta2dot are the starting angular velocities of the
    arms. Finally we’ll also set the starting time to 0, and define dt, which is the
    amount of time we’ll step forwards in each iteration of our loop later.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来定义程序中使用的物理常数。这些常数包括质量、臂长和重力。除此之外，我们还将定义系统的初始条件，其中theta1和theta2是初始角度，theta1dot和theta2dot是臂的初始角速度。最后，我们还将设置初始时间为0，并定义dt，它是在每次循环迭代中我们将向前推进的时间量。
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next we define all the parts of our system, the pivot point, mass 1 (m1), arm
    1 (stick1), and the same for the second set of mass and stick (m2, stick2).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义系统的所有部分，包括枢轴点、质量1（m1）、臂1（stick1），以及第二组质量和杆（m2，stick2）。
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now we position the masses and sticks so that they reflect the starting angles,
    as if you ran the code before it would just be two vertical rods. To do this we
    just use some trigonometry to put the mass the end of where the stick will go,
    then set the stick to go the distance between each mass. Here we also use VPython’s
    ‘attach_trail’ method to make the bottom mass generate a trail.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将质量和杆的位置调整到反映初始角度的状态，如果你运行代码之前，它们只会是两根垂直的杆。为此，我们只需使用一些三角函数将质量放置到杆的末端位置，然后将杆设置为连接每个质量之间的距离。在这里，我们还使用了VPython的‘attach_trail’方法，让底部质量生成轨迹。
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next we begin the main loop of our program; in this simulation, as in many physics
    simulations we’ll use a while loop with an exit condition at t=50\. We’ll also
    use the the rate() method to set the speed that the program will run at.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们开始程序的主循环；在这个模拟中，和许多物理模拟一样，我们将使用一个`while`循环，并在t=50时退出。我们还将使用`rate()`方法来设置程序运行的速度。
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now we have to dive into the real math. We’ll use a bit of calculus (not really,
    but we do deal with derivatives), trigonometry, and algebra to first calculate
    the angular acceleration, which we will then use to increment the angular velocity,
    and then apply that angular velocity to the position of the masses and rods to
    move them according to their calculated accelerations.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们必须深入实际的数学运算。我们将使用一些微积分（其实并不是很复杂，但确实涉及到导数）、三角学和代数来首先计算角加速度，然后用它来增量角速度，接着将角速度应用到质量和杆的位置，以便根据它们计算出来的加速度来移动它们。
- en: 'To calculate the top mass’s acceleration, let’s use this formula to represent
    the angular acceleration, or second derivative of *θ1*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算顶部质量的加速度，我们使用这个公式来表示角加速度，或者是*θ1*的二阶导数：
- en: '![](../Images/c54f11b38ca854d20a2ae8bf8f8e6afb.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c54f11b38ca854d20a2ae8bf8f8e6afb.png)'
- en: 'You can also represent the same equation using the following code:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用以下代码表示相同的方程：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: For the second mass’s acceleration, we must use a different formula since it
    represents a different part of the system.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个质量的加速度，我们必须使用不同的公式，因为它代表了系统中的另一个部分。
- en: '![](../Images/18f14126223490fb581e1857e28462ba.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18f14126223490fb581e1857e28462ba.png)'
- en: 'That equation is written in the program as:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方程在程序中写成：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next let’s increment the variables for angular velocity, ‘theta1dot’ and ‘theta2dot.’
    To do this we simply use the equation below, which increments the angular velocity
    by the angular acceleration times dt. Although the image only states the equation
    for theta1dot, it is the same for both *θ1* and *θ2*.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们增加角速度变量‘theta1dot’和‘theta2dot’。为此，我们只需使用下面的方程，它通过角加速度乘以dt来增量角速度。虽然图像中只列出了theta1dot的方程，但*θ1*和*θ2*的计算是相同的。
- en: '![](../Images/ef888b487133dfd1f2ee7d4b88ce5530.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ef888b487133dfd1f2ee7d4b88ce5530.png)'
- en: 'Let’s represent this with code for our purposes:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了我们的目的，我们用代码表示这个公式：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For the final part of our calculations for the motion of the double pendulum
    must increment the angles *θ1* and *θ2* by the angular velocity. This is represented
    by the equation below, where we set the angle *θ* equal to the previous *θ* plus
    the angular velocity times dt. Again, the calculation is the exact same for *θ1*
    and *θ2.*
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于双摆运动的最终部分，我们必须通过角速度来增量*θ1*和*θ2*。这通过下面的方程表示，其中我们将角度*θ*设为前一个*θ*加上角速度乘以dt。同样，*θ1*和*θ2*的计算是完全相同的。
- en: '![](../Images/9d6094d5803391184fe6bc95a3d11ff1.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9d6094d5803391184fe6bc95a3d11ff1.png)'
- en: 'In code, we write the equation as:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，我们将这个方程写成：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we must update the position of the masses and the rods in the program,
    so that we can see the outcome of the program. First we will update the position
    of the masses. We’ll take an intuitive approach to updating these positions; since
    one thing that will never change in the system is the length of the rods, the
    middle mass (m1) will be a distance equal to L1 away from the pivot point. Logically
    we can then construct the following equation for the position of mass m1:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须更新程序中质量和杆的位置，以便能够看到程序的结果。首先，我们将更新质量的位置。我们将采取一种直观的方法来更新这些位置；因为在系统中永远不会改变的一件事是杆的长度，所以中间的质量（m1）将与支点保持等于L1的距离。从逻辑上讲，我们可以构建以下关于m1位置的方程：
- en: '![](../Images/27ee0b395f6374c2e399627f663a321e.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/27ee0b395f6374c2e399627f663a321e.png)'
- en: The same formula can be used to reflect the formula for the position of m2,
    only with *θ2* and L2, and it is based off of the position of m1, not the pivot.
    See this equation below.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的公式可以用来反映m2的位置公式，只是使用了*θ2*和L2，并且它是基于m1的位置，而非支点。请参见下面的公式。
- en: '![](../Images/26073c38ba5f04f5d87463639f641626.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/26073c38ba5f04f5d87463639f641626.png)'
- en: These two formulas are written in our program very simply, since one feature
    of VPython is that it makes vector calculations very simple. All objects already
    have their positions stored as vectors, so all you need to do is use the vector()
    method to define a new vector, and use it in your computation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个公式在我们的程序中写得非常简单，因为VPython的一个特点是它使得向量计算变得非常简单。所有对象的位置信息已经作为向量存储，所以你所需要做的就是使用vector()方法定义一个新的向量，并将其用于计算。
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we must take one final step to realize the outcome of our calculations by
    updating the position of the rods. Technically this isn’t totally necessary, as
    the masses will still show and follow the pattern they should. For visual effect
    though, let’s write this code. The math isn’t too interesting, so the code is
    as follows. First we set the axis of the first stick so that it fills the distance
    between the pivot point and mass m1\. Next, we set the second stick’s position
    equal to mass m1\. Finally, we set the axis of the second stick equal to the distance
    between the first and second mass. The final line is incrementing t by dt to make
    the program go forwards.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须迈出最后一步，通过更新杆的位置来实现我们计算的结果。从技术上讲，这并不是完全必要的，因为质量仍然会显示并遵循应该的模式。然而，为了视觉效果，让我们编写这段代码。数学部分并不太有趣，因此代码如下。首先，我们设置第一个杆的轴，使其填充从支点到质量
    m1 的距离。接下来，我们将第二根杆的位置设置为质量 m1。最后，我们将第二根杆的轴设置为第一个和第二个质量之间的距离。最后一行是通过增量 dt 来更新 t，以使程序向前运行。
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is the final code for ease of copying and pasting:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是最终的代码，方便复制和粘贴：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Thank you for making it this far, I hope you enjoyed my analysis of chaotic
    motion through the double and triple pendulums. In the end, I’m neither a professional
    physicist nor programmer, so if you have suggestions for how I can improve my
    work please don’t hesitate to let me know.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你能看到这里，我希望你喜欢我通过双摆和三摆分析混沌运动的内容。最后，我既不是专业的物理学家，也不是程序员，所以如果你有任何建议帮助我改进我的工作，请不要犹豫，随时告诉我。
- en: Additionally, all imaged used in the article were created by me, using Python
    and Microsoft Word, both of which have incredible capabilities.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，文中使用的所有图像都是我自己创建的，使用了 Python 和 Microsoft Word，这两个工具都具有令人惊叹的能力。
- en: Finally, I’d like to end on a chewy thought, which will play into my next project.
    If you took a multi-armed pendulum which was already experiencing chaotic motion,
    how would its motion change if you were to seamlessly add another arm of very
    high mass (maybe 50x the largest already in a system), at a starting θ of 0°?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我想以一个耐人寻味的思考作为结束，这将成为我下一个项目的基础。如果你拿一个已经呈现混沌运动的多臂摆，如何在不间断的情况下为其增加一个非常大质量的臂（可能是系统中最大质量的
    50 倍），并且初始角度为 0°，它的运动会如何变化呢？
