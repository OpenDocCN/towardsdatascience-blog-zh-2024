- en: Building a RAG chain using LangChain Expression Language (LCEL)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 LangChain 表达式语言（LCEL）构建 RAG 链
- en: 原文：[https://towardsdatascience.com/building-a-rag-chain-using-langchain-expression-language-lcel-3688260cad05?source=collection_archive---------1-----------------------#2024-04-11](https://towardsdatascience.com/building-a-rag-chain-using-langchain-expression-language-lcel-3688260cad05?source=collection_archive---------1-----------------------#2024-04-11)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/building-a-rag-chain-using-langchain-expression-language-lcel-3688260cad05?source=collection_archive---------1-----------------------#2024-04-11](https://towardsdatascience.com/building-a-rag-chain-using-langchain-expression-language-lcel-3688260cad05?source=collection_archive---------1-----------------------#2024-04-11)
- en: Learning the building blocks of LCEL to develop increasingly complex RAG chains
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习 LCEL 的构建模块，以开发越来越复杂的 RAG 链
- en: '[](https://medium.com/@RSK2327?source=post_page---byline--3688260cad05--------------------------------)[![Roshan
    Santhosh](../Images/2509f38bf7d5a40c453fa54575293f06.png)](https://medium.com/@RSK2327?source=post_page---byline--3688260cad05--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--3688260cad05--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--3688260cad05--------------------------------)
    [Roshan Santhosh](https://medium.com/@RSK2327?source=post_page---byline--3688260cad05--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@RSK2327?source=post_page---byline--3688260cad05--------------------------------)[![Roshan
    Santhosh](../Images/2509f38bf7d5a40c453fa54575293f06.png)](https://medium.com/@RSK2327?source=post_page---byline--3688260cad05--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--3688260cad05--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--3688260cad05--------------------------------)
    [Roshan Santhosh](https://medium.com/@RSK2327?source=post_page---byline--3688260cad05--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--3688260cad05--------------------------------)
    ·7 min read·Apr 11, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--3688260cad05--------------------------------)
    ·7 分钟阅读·2024年4月11日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: In this post, I will be going over the **implementation of a Self-evaluation
    RAG pipeline for question-answering using LangChain Expression Language (LCEL)**.
    The focus of this post will be on the use of LCEL for building pipelines and not
    so much on the actual RAG and self evaluation principles used, which are kept
    simple for ease of understanding.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将介绍**使用 LangChain 表达式语言（LCEL）实现自我评估 RAG 管道的问答功能**。本文的重点是使用 LCEL 来构建管道，而不是实际的
    RAG 和自我评估原理，这些原理已简化，以便于理解。
- en: '![](../Images/5c5464d056ec85924da8325acf133c35.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5c5464d056ec85924da8325acf133c35.png)'
- en: 'I will be covering the following topics :'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我将涵盖以下主题：
- en: Basic initialization steps
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基本初始化步骤
- en: Development of different variations of the RAG pipeline of increasing complexity
    using LCEL
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 LCEL 开发不同复杂度的 RAG 管道变体
- en: Methods for extracting intermediate variables from a LCEL-scripted pipeline
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 LCEL 脚本化管道中提取中间变量的方法
- en: Reasons for using LCEL
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 LCEL 的原因
- en: The Setup
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'Before we jump into the development of the RAG chain, there are some basic
    setup steps that we need to perform to initialize this setup. These include :'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始开发 RAG 链之前，需要执行一些基本的设置步骤以初始化此设置。这些步骤包括：
- en: Data Ingestion
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据摄取
- en: 'The data ingestion consists of two key steps :'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 数据摄取包括两个关键步骤：
- en: Reading the text from the pdf
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 PDF 中读取文本
- en: Splitting up the pdf text into chunks for inputting to the vector database
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 PDF 文本拆分成多个块以输入向量数据库
- en: '**Prompt Templates**'
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**提示模板**'
- en: 'We will be using different prompts for the question-answering and self-evaluation
    tasks. We will be having 3 different prompt templates :'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为问答任务和自我评估任务使用不同的提示。我们将有 3 个不同的提示模板：
- en: 'qa_prompt : Basic prompt for the question-answering task'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'qa_prompt : 问答任务的基本提示'
- en: 'qa_eval_prompt : Prompt for evaluator model that takes as input question-answer
    pair'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'qa_eval_prompt : 评估模型的提示，输入为问答对'
- en: 'qa_eval_prompt_with_context : Similar to above prompt but additionally includes
    the context as well for the evaluation'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'qa_eval_prompt_with_context : 与上述提示类似，但额外包含上下文以进行评估'
- en: Database Initialization
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据库初始化
- en: We initialize a simple vector database using FAISS and Open AI embeddings. For
    retrieval, we set k as 3 (return top 3 chunks for a given query)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 FAISS 和 Open AI 嵌入初始化一个简单的向量数据库。对于检索，我们将 k 设置为 3（返回给定查询的前 3 个块）
- en: RAG Development
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RAG 开发
- en: Simple QA RAG
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单的 QA RAG
- en: 'We start off with an example of a basic RAG chain that carries out the following
    steps :'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个基本的RAG链示例开始，执行以下步骤：
- en: Retrieves the relevant chunks (splits of pdf text) from the vector database
    based on the user’s question and merges them into a single string
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据用户的问题，从向量数据库中检索相关的文本块（PDF文本的分割），并将它们合并为一个单一字符串
- en: Passes the retrieved context text along with question to the prompt template
    to generate the prompt
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将检索到的上下文文本和问题一起传递给提示模板以生成提示
- en: Input generated prompt to LLM to generate final answer
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成的输入提示传递给LLM，以生成最终答案
- en: '**Using** [**LangChain Expression Language(LCEL)**](https://python.langchain.com/docs/expression_language/)**,
    this RAG would be implemented as such:**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用** [**LangChain表达式语言(LCEL)**](https://python.langchain.com/docs/expression_language/)**，该RAG的实现方式如下：**'
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above code primarily follows the [pipe architecture](/write-clean-python-code-using-pipes-1239a0f3abf5)
    where the output from the preceding element is used as the input for the next
    element. The below diagram showcases the flow of data. Starting from the user’s
    input, it passes first through the RunnableParallel block, then through the qa_prompt
    to generate the prompt. This prompt is then sent to the LLM to generate the final
    output.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码主要遵循[管道架构](/write-clean-python-code-using-pipes-1239a0f3abf5)，其中前一个元素的输出作为下一个元素的输入。下图展示了数据流。从用户的输入开始，首先通过RunnableParallel块，然后通过qa_prompt生成提示。这个提示随后被发送到LLM，以生成最终输出。
- en: '![](../Images/8a548f9e62b181beed8ea536bcca028e.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8a548f9e62b181beed8ea536bcca028e.png)'
- en: Basic LCEL input/output flow
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的LCEL输入/输出流程
- en: 'There are two key additions to this pipeline that are unique to LangChain :'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个管道中有两个LangChain独有的关键添加项：
- en: '**RunnableParallel** : As the name suggests, this class provides the ***functionality
    to run multiple processes in parallel***. As a result, the output of a RunnableParallel
    is a dict with the keys being the arguments provided during its initialization.
    In this case, the output would have two keys : *context* and *question*.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**RunnableParallel**：顾名思义，这个类提供了***并行运行多个进程的功能***。因此，RunnableParallel的输出是一个字典，键是初始化时提供的参数。在这种情况下，输出将包含两个键：*context*和*question*。'
- en: 'So why do we need this in our current situation? Its required because the qa_prompt
    template requires two input values: the context and the question. Therefore we
    need to compute these values individually and then pass them together to the qa_prompt
    template.'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 那么，为什么我们在当前情况下需要这个呢？这是因为qa_prompt模板需要两个输入值：上下文和问题。因此，我们需要分别计算这些值，然后将它们一起传递给qa_prompt模板。
- en: '**RunnablePassthrough** : This is a useful class when you want to pass through
    the input to the next stage without any modification. Essentially, this ***acts
    as an identity function*** that returns whatever is passed as its input.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**RunnablePassthrough**：当你想将输入传递给下一个阶段而不做任何修改时，这是一个有用的类。本质上，这***充当了一个恒等函数***，返回传入的任何内容作为其输入。'
- en: 'The flowchart for the above RAG would look like this :'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上述RAG的流程图如下：
- en: '![](../Images/0a277631bbe470ee4cf767555c1e93a1.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0a277631bbe470ee4cf767555c1e93a1.png)'
- en: QA RAG with Self Evaluation I
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QA RAG与自我评估 I
- en: Building over the previous RAG chain, we now introduce new elements into the
    chain to implement the self evaluation component.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的RAG链的基础上，我们现在将新的元素引入链中，以实现自我评估组件。
- en: The self evaluation component is again a pretty straightforward implementation.
    We take the answer provided by the first LLM and pass it to the evaluator LLM
    along with the question and ask it to provide a binary response (Correct/Incorrect).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 自我评估组件的实现相对直接。我们获取第一个LLM提供的答案，并将其与问题一起传递给评估器LLM，并要求它提供一个二进制响应（正确/错误）。
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The first key difference is the addition of an additional RunnableParallel
    component. This is required because, similar to the initial prompt for the QA,
    the self eval prompt also requires two inputs : the base LLM’s answer as well
    as the user’s question.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个关键区别是添加了一个额外的RunnableParallel组件。这是必需的，因为，与QA的初始提示类似，自我评估提示也需要两个输入：基础LLM的答案以及用户的问题。
- en: So the output of the first RunnableParallel is the context text and the question
    while the output of the second RunnableParallel is the LLM answer along with the
    question.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，第一个RunnableParallel的输出是上下文文本和问题，而第二个RunnableParallel的输出是LLM的答案和问题。
- en: '***NOTE:*** *For the second RunnableParallel, we use the itemgetter method
    to retain only the question value from the previous input and propagate it forward.
    This is done instead of using RunnablePassthrough as it would passed on the full
    input (dict with two keys) whereas we are only interested in passing on the question
    right now and not the context. Additionally, there is the issue of formatting
    as qa_eval_prompt expects a dict with str -> str mapping but using RunnablePassthrough
    would results in a str-> dict mapping*'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***注意:*** *对于第二个RunnableParallel，我们使用itemgetter方法仅保留前一个输入中的问题值并将其向前传递。这是为了避免使用RunnablePassthrough，因为它会传递完整的输入（带有两个键的字典），而我们现在只关心传递问题而不是上下文。此外，还有格式化的问题，因为qa_eval_prompt期望的是一个str
    -> str映射，而使用RunnablePassthrough会导致str -> dict映射。*'
- en: 'The flowchart for this RAG implementation would look like this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个RAG实现的流程图如下所示：
- en: '![](../Images/156a9c5f062931ab26da502dd4a0fd5b.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/156a9c5f062931ab26da502dd4a0fd5b.png)'
- en: QA RAG with Self Evaluation II
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: QA自评RAG II
- en: For this variation, we make a change to the evaluation procedure. In addition
    to the question-answer pair, we also pass the retrieved context to the evaluator
    LLM.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个变体，我们对评估过程进行了更改。除了问答对外，我们还将检索到的上下文传递给评估器LLM。
- en: To accomplish this, we add an additional itemgetter function in the second RunnableParallel
    to collect the context string and pass it to the new qa_eval_prompt_with_context
    prompt template.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们在第二个RunnableParallel中添加了一个额外的itemgetter函数，以收集上下文字符串并将其传递给新的qa_eval_prompt_with_context提示模板。
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Implementation Flowchart :'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 实现流程图：
- en: '![](../Images/ebfe9ffacb495748306f991ea660b5b5.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ebfe9ffacb495748306f991ea660b5b5.png)'
- en: Retrieving intermediate variables
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检索中间变量
- en: One of the common pain points with using a chain implementation like LCEL is
    the difficulty in accessing the intermediate variables, which is important for
    debugging pipelines. We look at few options where we can still access any intermediate
    variables we are interested using manipulations of the LCEL
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用像LCEL这样的链式实现时，一个常见的痛点是难以访问中间变量，而访问这些变量对于调试管道非常重要。我们查看了几个选项，通过操作LCEL来访问我们感兴趣的任何中间变量。
- en: Using RunnableParallel to carry forward intermediate outputs
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用RunnableParallel传递中间输出
- en: As we saw earlier, RunnableParallel allows us to carry multiple arguments forward
    to the next step in the chain. So we use this ability of RunnableParallel to carry
    forward the required intermediate values all the way till the end.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，RunnableParallel允许我们将多个参数传递到链中的下一步。因此，我们利用RunnableParallel的这个能力，直到最后一步都将所需的中间值传递下去。
- en: In the below example, we modify the original self eval RAG chain to output the
    retrieved context text along with the final self evaluation output. The primary
    change is that we add a RunnableParallel object to every step of the process to
    carry forward the context variable.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们修改了原始的自评RAG链，以便输出检索到的上下文文本以及最终的自评输出。主要的变化是，我们在每个步骤中都添加了一个RunnableParallel对象，以将上下文变量传递下去。
- en: Additionally, we also use the itemgetter function to clearly specify the inputs
    for the subsequent steps. For example, for the last two RunnableParallel objects,
    we use *itemgetter(‘input’)* to ensure that only the input argument from the previous
    step is passed on to the LLM/ Json parser objects.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还使用了itemgetter函数来明确指定后续步骤的输入。例如，对于最后两个RunnableParallel对象，我们使用*itemgetter('input')*来确保仅将前一步的输入参数传递给LLM/Json解析器对象。
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The output from this chain looks like the following :'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 该链的输出如下所示：
- en: '![](../Images/e44d743b97bcc76935b6a90ee2d85215.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e44d743b97bcc76935b6a90ee2d85215.png)'
- en: 'A more concise variation:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 更简洁的变体：
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Using Global variables to save intermediate steps
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用全局变量保存中间步骤
- en: This method essentially uses the principle of a logger. We introduce a new function
    that saves its input to a global variable, thus allowing us access to the intermediate
    variable through the global variable
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法本质上使用了日志记录器的原理。我们引入了一个新函数，将其输入保存到全局变量中，从而允许我们通过全局变量访问中间变量。
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here we define a global variable called *context* and a function called *save_context*
    that saves its input value to the global *context* variable before returning the
    same input. In the chain, we add the *save_context* function as the last step
    of the context retrieval step.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了一个全局变量*context*和一个名为*save_context*的函数，该函数在返回相同的输入之前将其输入值保存到全局*context*变量中。在链中，我们将*save_context*函数添加为获取上下文步骤的最后一步。
- en: This option allows you to access any intermediate steps without making major
    changes to the chain.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项允许您在不进行重大更改的情况下访问任何中间步骤。
- en: '![](../Images/6d75788fdbea9ddc770002e006ad204b.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6d75788fdbea9ddc770002e006ad204b.png)'
- en: Accessing intermediate variables using global variables
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用全局变量访问中间变量
- en: Using callbacks
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用回调
- en: Attaching callbacks to your chain is another common method used for logging
    intermediate variable values. Theres a lot to cover on the topic of callbacks
    in LangChain, so I will be covering this in detail in a different post.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将回调附加到链上是另一种常用于记录中间变量值的方法。在LangChain中，回调有很多内容需要探讨，因此我将在另一篇文章中详细讨论。
- en: Why use LCEL?
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用LCEL？
- en: The reasons for using LCEL are best explained by the authors of Langchain themselves
    in their [official documentation](https://python.langchain.com/docs/expression_language/).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用LCEL的原因最好由LangChain的作者在其[官方文档](https://python.langchain.com/docs/expression_language/)中解释。
- en: 'Of the points mentioned in the documentation, the following are some that I
    find especially useful :'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在文档中提到的要点中，以下是我认为特别有用的一些：
- en: 'I[nput and output schemas](https://python.langchain.com/docs/expression_language/interface/#input-schema)
    : Will be covering this in detail in a different post'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[输入和输出模式](https://python.langchain.com/docs/expression_language/interface/#input-schema)
    ：将在另一篇文章中详细介绍'
- en: '[Async support](https://python.langchain.com/docs/expression_language/interface/)
    : As we move towards production applications, it becomes more important to have
    async functionality. LCEL pipeline allow for the seamless transition to async
    operations.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[异步支持](https://python.langchain.com/docs/expression_language/interface/) ：随着我们向生产应用推进，异步功能变得愈加重要。LCEL管道允许无缝过渡到异步操作。'
- en: '[Optimized parallel execution](https://python.langchain.com/docs/expression_language/primitives/parallel/)'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[优化的并行执行](https://python.langchain.com/docs/expression_language/primitives/parallel/)'
- en: Above these reasons, as a matter of personal preference, I feel that using LCEL
    helps improve the readability of your code and allows for cleaner implementations.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于以上原因，作为个人偏好，我认为使用LCEL有助于提高代码的可读性，并允许更清晰的实现。
- en: Resources
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: '[Full code notebook](https://github.com/rsk2327/AI-Workbook/blob/main/LangChain/Self%20Eval%20RAG.ipynb)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[完整代码笔记本](https://github.com/rsk2327/AI-Workbook/blob/main/LangChain/Self%20Eval%20RAG.ipynb)'
- en: '[PDF text](https://github.com/rsk2327/AI-Workbook/blob/main/LangChain/machine_learning_basics.pdf)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[PDF文档](https://github.com/rsk2327/AI-Workbook/blob/main/LangChain/machine_learning_basics.pdf)'
- en: 'Images : All images are created by the author'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图像 ：所有图像均由作者创建
- en: '*In addition to Medium, I share my thoughts, ideas and other updates on* [*Linkedin*](https://www.linkedin.com/in/roshan-santhosh/)*.*'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '*除了Medium，我还在* [*Linkedin*](https://www.linkedin.com/in/roshan-santhosh/)*上分享我的想法、创意和其他更新。*'
