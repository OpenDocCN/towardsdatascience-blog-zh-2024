- en: AI, Write and Style My CV
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 人工智能，写作并塑造我的简历
- en: 原文：[https://towardsdatascience.com/ai-write-and-style-my-cv-fb3168a5b10e?source=collection_archive---------7-----------------------#2024-07-18](https://towardsdatascience.com/ai-write-and-style-my-cv-fb3168a5b10e?source=collection_archive---------7-----------------------#2024-07-18)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/ai-write-and-style-my-cv-fb3168a5b10e?source=collection_archive---------7-----------------------#2024-07-18](https://towardsdatascience.com/ai-write-and-style-my-cv-fb3168a5b10e?source=collection_archive---------7-----------------------#2024-07-18)
- en: '![](../Images/e34ee1d63b0f9106d336572f30624c9c.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e34ee1d63b0f9106d336572f30624c9c.png)'
- en: Created with Midjourney by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者通过Midjourney创建
- en: Agentic Workflow Writing Structured Documents, A Line-by-Line Tutorial
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代理工作流写作结构化文档，逐行教程
- en: '[](https://medium.com/@AJOhrn?source=post_page---byline--fb3168a5b10e--------------------------------)[![Anders
    Ohrn](../Images/64c8f1d9dea93adf16608b1b6d52c5b2.png)](https://medium.com/@AJOhrn?source=post_page---byline--fb3168a5b10e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fb3168a5b10e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fb3168a5b10e--------------------------------)
    [Anders Ohrn](https://medium.com/@AJOhrn?source=post_page---byline--fb3168a5b10e--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@AJOhrn?source=post_page---byline--fb3168a5b10e--------------------------------)[![Anders
    Ohrn](../Images/64c8f1d9dea93adf16608b1b6d52c5b2.png)](https://medium.com/@AJOhrn?source=post_page---byline--fb3168a5b10e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fb3168a5b10e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fb3168a5b10e--------------------------------)
    [Anders Ohrn](https://medium.com/@AJOhrn?source=post_page---byline--fb3168a5b10e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--fb3168a5b10e--------------------------------)
    ·22 min read·Jul 18, 2024
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[面向数据科学](https://towardsdatascience.com/?source=post_page---byline--fb3168a5b10e--------------------------------)
    ·阅读时间22分钟·2024年7月18日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Not only [the Mona Lisa](https://heni.com/talks/mona-lisa-painting-beyond-portraiture)
    and [the Vitruvian Man](https://nicofranz.art/en/leonardo-da-vinci/vitruvian-man)
    but also [the Curriculum Vitae](https://artsandculture.google.com/story/leonardo-s-cover-letter-biblioteca-ambrosiana/sQVRpZ4EhlnSKg?hl=en)
    (CV), are cultural artifacts by Leonardo Da Vinci’s hand that resonate and reproduce
    in the present time. The CV is not the exclusive way to present oneself to the
    job market. Yet the CV persists despite the many innovations in information and
    graphics technology since Leonardo enumerated on paper his skills and abilities
    to the Duke of Milan.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅是[蒙娜丽莎](https://heni.com/talks/mona-lisa-painting-beyond-portraiture)和[维特鲁威人](https://nicofranz.art/en/leonardo-da-vinci/vitruvian-man)，还有[简历](https://artsandculture.google.com/story/leonardo-s-cover-letter-biblioteca-ambrosiana/sQVRpZ4EhlnSKg?hl=en)，都是由列奥纳多·达·芬奇创作的文化遗物，它们在当代依然具有共鸣并不断复生。简历并非唯一的自我推销方式。尽管自达·芬奇将自己的技能和能力以书面形式列举给米兰公爵以来，信息和图形技术已有诸多创新，但简历依然存在。
- en: 'In high-level terms, the creation of a CV:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 从高层次来看，创建简历：
- en: summarizes past accomplishments and experiences of a person in a document form,
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 总结一个人在文档中过去的成就和经验，
- en: in a manner relevant to a specific audience, who in a short time assesses the
    person’s relative and absolute utility to some end,
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以一种与特定受众相关的方式，后者在短时间内评估一个人对某个目标的相对和绝对效用，
- en: where the style and layout of the document form are chosen to be conducive to
    a favourable assessment by said audience.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文档的样式和布局被选择为有利于该受众的积极评估。
- en: These are semantic operations in service of an objective under vaguely stated
    constraints.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是为服务于一个目标而进行的语义操作，并且是在模糊规定的约束条件下进行的。
- en: Large language models (LLMs) are the premier means to execute semantic operations
    with computers, especially if the operations are ambiguous in the way human communication
    often is. The most common way to date to interact with LLMs is a chat app — [ChatGPT](https://chatgpt.com/),
    [Claude](https://claude.ai/), [Le Chat](https://chat.mistral.ai/chat) etc. We,
    the human users of said chat apps, define somewhat loosely the semantic operations
    by way of our chat messages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 大型语言模型（LLMs）是执行语义操作的主要工具，尤其是当这些操作像人类沟通中常见的那样模糊不清时。迄今为止，与LLMs互动的最常见方式是通过聊天应用——[ChatGPT](https://chatgpt.com/)、[Claude](https://claude.ai/)、[Le
    Chat](https://chat.mistral.ai/chat)等。我们这些聊天应用的用户，通过我们的聊天消息松散地定义了这些语义操作。
- en: Certain applications, however, are better served by a different interface and
    a different way to create semantic operations. Chat is not the be-all and end-all
    of LLMs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，某些应用程序最好通过不同的界面和创建语义操作的不同方式来提供服务。聊天并不是大语言模型的终极解决方案。
- en: I will use the [APIs for the LLM models of Anthropic](https://www.anthropic.com/api)
    (especially Sonnet and Haiku) to create a basic application for CV assembly. It
    relies on a workflow of agents working in concert (an [*agentic workflow*](https://www.deeplearning.ai/the-batch/welcoming-diverse-approaches-keeps-machine-learning-strong/)),
    each agent performing some semantic operation in the chain of actions it takes
    to go from a blob of personal data and history to a structured CV document worthy
    of its august progenitor…
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用[Anthropic大语言模型的API](https://www.anthropic.com/api)（尤其是Sonnet和Haiku）来创建一个简历生成的基本应用程序。它依赖于代理协同工作（一个[*代理工作流程*](https://www.deeplearning.ai/the-batch/welcoming-diverse-approaches-keeps-machine-learning-strong/)），每个代理执行某些语义操作，将个人数据和历史从一团混乱的资料转化为一个有条理的简历文件，值得它那位伟大祖先的赞誉……
- en: This is a tutorial on building a small yet complete LLM-powered non-chat application.
    In what follows I describe both the code, my reasons for a particular design,
    and where in the bigger picture each piece of Python code fits.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关于构建一个小巧但完整的、由大语言模型（LLM）驱动的非聊天型应用程序的教程。在接下来的内容中，我将描述代码、我选择特定设计的原因以及每段 Python
    代码在更大框架中的作用。
- en: The CV creation app is a useful illustration of AIs working on the general task
    of structured style-content generation.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 简历创建应用程序是一个很好的例子，展示了人工智能在结构化风格内容生成这一一般任务中的工作原理。
- en: Before Code & How — Show What & Wow
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在代码与方法之前——展示内容与惊叹
- en: Imagine a collection of personal data and lengthy career descriptions, mostly
    text, organized into a few files where information is scattered. In that collection
    is the raw material of a CV. Only it would take effort to separate the relevant
    from the irrelevant, distill and refine it, and give it a good and pleasant form.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，个人数据和冗长的职业描述，大部分是文本，组织成几个文件，信息零散。在这组文件中，就包含了简历的原材料。只是，它需要付出一些努力，才能从中分辨出相关与无关的信息，提炼和精炼它，并赋予它一个美观和令人愉悦的形式。
- en: 'Next imagine running a script `make_cv` and pointing it to a job ad, a CV template,
    a person and a few specification parameters:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，想象一下运行脚本 `make_cv`，并将它指向一个职位广告、一份简历模板、一位求职者和一些规格参数：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then wait a few seconds while the data is shuffled, transformed and rendered,
    after which the script outputs a neatly styled and populated one-pager two-column
    CV.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后等待几秒钟，数据会被打乱、转换和渲染，之后脚本会输出一个整洁、风格化且填充完毕的单页双栏简历。
- en: '![](../Images/bc89250d3d5365bdbaf4bbcd618e1415.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bc89250d3d5365bdbaf4bbcd618e1415.png)'
- en: A CV, neat style and abstracted content, generated with an agentic workflow
    of Anthropic LLMs.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一份简历，整洁的风格和抽象的内容，通过安索普公司大语言模型的代理工作流程生成。
- en: Nice! Minimal layout and style in green hues, good contrast between text and
    background, not just bland default fonts, and the content consists of brief and
    to-the-point descriptions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒！绿色调的简约布局和风格，文本与背景之间的对比鲜明，不仅是平淡的默认字体，内容简洁且直截了当。
- en: But wait… are these documents not supposed to make us stand out?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等……这些文档不是应该让我们脱颖而出吗？
- en: 'Again with the aid of the Anthropic LLMs, a different template is created (keywords:
    *wild and wacky world of early 1990s web design*), and the same content is given
    a new glorious form:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 再次借助安索普公司大语言模型的帮助，创建一个不同的模板（关键词：*1990年代初期网页设计的狂野与古怪世界*），并赋予相同内容一种新的辉煌形式：
- en: '![](../Images/ef1f399ded7688af94137c18729b6c7f.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ef1f399ded7688af94137c18729b6c7f.png)'
- en: A CV, crazy 1990s-webpage-style and content, generated with an agentic workflow
    of Antropic LLMs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一份简历，采用疯狂的1990年代网页风格和内容，通过安索普公司（Anthropic）大语言模型的代理工作流程生成。
- en: If you ignore the flashy animations and peculiar colour choices, you’ll find
    that the content and layout are almost identical to the previous CV. This isn’t
    by chance. The agentic workflow’s generative tasks deal separately with content,
    form, and style, not resorting to an all-in-one solution. The workflow process
    rather mirrors the modular structure of the standard CV.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忽略那些炫目的动画和奇特的颜色选择，你会发现内容和布局几乎与之前的简历一模一样。这并非巧合。代理工作流程的生成任务分别处理内容、形式和风格，而不是依赖一体化解决方案。工作流程的过程反映了标准简历的模块化结构。
- en: That is, the generative process of the agentic workflow is made to operate within
    meaningful constraints. That can enhance the practical utility of generative AI
    applications — design, after all, has been said to [depend largely on constraints](https://markwunsch.com/eames).
    For example, branding, style guides, and information hierarchy are useful, principled
    constraints we should want in the non-chat outputs of the generative AI — be they
    CVs, reports, UX, product packaging etc.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 即，代理工作流的生成过程在有意义的约束条件下运行。这可以增强生成式AI应用的实际效用——毕竟，设计被认为[在很大程度上依赖于约束](https://markwunsch.com/eames)。例如，品牌、风格指南和信息层次结构是我们希望在生成AI的非聊天输出中看到的有用且原则性的约束——无论是简历、报告、用户体验、产品包装等。
- en: The agentic workflow that accomplishes all that is illustrated below.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有工作的代理工作流如下所示。
- en: '![](../Images/c1625c41c085d5a005ec45bdfbda7487.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c1625c41c085d5a005ec45bdfbda7487.png)'
- en: High-level data flow diagram of the application
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的高层数据流图
- en: If you wish to skip past the descriptions of code and software design, *Gregor
    Samsa* is your lodestar. When I return to discussing applications and outputs,
    I will do so for synthetic data for the fictional character Gregor Samsa, so keyword-search
    your way forward.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望跳过代码和软件设计的描述，*格雷戈尔·萨姆萨*是你的指路明灯。当我重新回到讨论应用和输出时，我将针对虚构人物格雷戈尔·萨姆萨的合成数据进行讨论，因此可以通过关键词搜索继续往下阅读。
- en: The complete code is available in [this GitHub repo](https://github.com/anderzzz/everyone_knows_it/),
    free and without any guarantees.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的代码可以在[这个GitHub仓库](https://github.com/anderzzz/everyone_knows_it/)中找到，免费提供并不附带任何保证。
- en: Job Ad Pre-Processing, DAO and Prompt Assembly
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 职位广告预处理、DAO和提示组装
- en: It is often said that one should tailor a CV's content to the job ad. Since
    job ads are frequently verbose, sometimes containing legal boilerplate and contact
    information, I wish to extract and summarize only the relevant features and use
    that text in subsequent tasks.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 常说应当根据职位广告的内容调整简历。由于职位广告常常冗长，有时包含法律术语和联系信息，我希望仅提取和总结相关特征，并将这些文本用于后续任务。
- en: To have shared interfaces when retrieving data, I make a basic [data-access
    object (DAO)](https://www.geeksforgeeks.org/data-access-object-pattern/), which
    defines a common interface to the data, which in the tutorial example is stored
    in text and JSON files locally (stored in `registry_job_ads`), but generally can
    be any other job ad database or API.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在检索数据时实现共享接口，我创建了一个基本的[数据访问对象（DAO）](https://www.geeksforgeeks.org/data-access-object-pattern/)，它定义了与数据的公共接口，在本教程示例中，数据存储在本地的文本和JSON文件中（存储在`registry_job_ads`中），但通常可以是任何其他的职位广告数据库或API。
- en: To summarize or abstract text is a semantic operation LLMs are well-suited for.
    To that end,
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 总结或抽象文本是LLM非常擅长的语义操作。为此，
- en: an instruction prompt is required to make the LLM process the text appropriately
    for the task;
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要一个指令提示，以使LLM正确处理文本，以符合任务需求；
- en: and the LLM model from Anthropic has to be selected along with its parameters
    (e.g. temperature);
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还必须选择Anthropic的LLM模型及其参数（例如温度）；
- en: and the instructed LLM is invoked via a third-party API with its specific requirements
    on syntax, error checking etc.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并且，指令化的大型语言模型（LLM）通过第三方API调用，并具有其特定的语法、错误检查等要求。
- en: To keep these three distinct concerns separate, I introduce some abstraction.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将这三种不同的关注点分离，我引入了一些抽象。
- en: The class diagram below illustrates key methods and relationships of the agent
    that extract key qualities of the job ad.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下方的类图展示了代理的关键方法和关系，这些代理提取职位广告的关键特征。
- en: '![](../Images/8ca9af115bd8907ec9d09a1569f9fcb6.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8ca9af115bd8907ec9d09a1569f9fcb6.png)'
- en: 'In code, that looks like this:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，这看起来是这样的：
- en: 'The configuration file `agent_model_extractor_confs` is a JSON file that in
    part looks like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件`agent_model_extractor_confs`是一个JSON文件，其部分内容如下所示：
- en: Additional configurations are added to this file as further agents are implemented.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 随着进一步代理的实现，额外的配置会被添加到此文件中。
- en: The prompt is what focuses the general LLM onto a specific capability. I use
    Jinja templates to assemble the prompt. This is a [flexible and established method
    to create text files with programmatic content](https://realpython.com/primer-on-jinja-templating/).
    For the fairly straightforward job ad extractor agent, the logic is simple — read
    text from a file and return it — but when I get to the more advanced agents, Jinja
    templating will prove more helpful.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 提示是将通用LLM集中到特定功能的关键。我使用Jinja模板来组合提示。这是一个[灵活且成熟的方法来创建带有程序化内容的文本文件](https://realpython.com/primer-on-jinja-templating/)。对于相对简单的招聘广告提取代理，逻辑很简单——从文件中读取文本并返回——但当我处理更高级的代理时，Jinja模板将变得更为有用。
- en: 'And the prompt template for `agent_type=''JobAdQualityExtractor` is:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`agent_type=''JobAdQualityExtractor` 的提示模板是：'
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Invoking the Agent, Without Tools
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用代理，无需工具
- en: A model name (e.g. `claude-3–5-sonnet-20240620`), a prompt and an Anthropic
    client are the least we need to send a request to the Anthropic APIs to execute
    an LLM. The job ad quality extractor agent has it all. It can therefore instantiate
    and execute the “bare metal” agent type.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 模型名称（例如 `claude-3–5-sonnet-20240620`）、一个提示和一个Anthropic客户端是我们发送请求到Anthropic API执行LLM所需的最基本内容。招聘广告质量提取代理拥有这一切。因此，它可以实例化并执行“裸金属”代理类型。
- en: Without any memory of prior use or any other functionality, the bare metal agent
    invokes the LLM once. Its scope of concern is how Anthropic formats its inputs
    and outputs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 没有任何先前使用的记忆或其他功能，裸金属代理仅调用LLM一次。它关注的范围是Anthropic如何格式化其输入和输出。
- en: I create an abstract base class as well, `Agent`. It is not strictly required
    and for a task as basic as CV creation of limited use. However, if we were to
    keep building on this foundation to deal with more complex and diverse tasks,
    [abstract base classes are good practice](https://stackoverflow.com/questions/3570796/why-use-abstract-base-classes-in-python).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我也创建了一个抽象基类，`Agent`。它并不是严格要求的，对于像简历创建这样基础的任务用途有限。然而，如果我们继续在这个基础上构建，以处理更复杂和多样的任务，[抽象基类是一个良好的实践](https://stackoverflow.com/questions/3570796/why-use-abstract-base-classes-in-python)。
- en: The `send_request_to_anthropic_message_creation` is a [simple wrapper around
    the call to the Anthropic](https://github.com/anderzzz/everyone_knows_it/blob/6c96a71b3b1be18918a6caad96b9ec5c2148de2e/src/semantics.py#L24)
    API.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`send_request_to_anthropic_message_creation` 是一个 [简单的Anthropic API调用包装器](https://github.com/anderzzz/everyone_knows_it/blob/6c96a71b3b1be18918a6caad96b9ec5c2148de2e/src/semantics.py#L24)。'
- en: 'This is all that is needed to obtain the job ad summary. In short, the steps
    are:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是获取招聘广告摘要所需的所有内容。简而言之，步骤如下：
- en: Instantiate a job ad quality extractor agent, which entails gathering the associated
    prompt and Anthropic model parameters.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化一个招聘广告质量提取代理，这涉及到收集相关的提示和Anthropic模型参数。
- en: Invoke the job ad data access object with a company name and position to get
    the complete job ad text.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用公司名称和职位调用招聘广告数据访问对象，以获取完整的招聘广告文本。
- en: Apply the extraction on the complete job ad text, which entails a one-time request
    to the APIs of the Anthropic LLMs; a text string is returned with the generated
    summary.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对完整的招聘广告文本进行提取，这需要一次性向Anthropic LLM的API发起请求；返回一个包含生成摘要的文本字符串。
- en: 'In terms of code in the `make_cv` script, these steps read:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `make_cv` 脚本中的代码步骤如下：
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The top part of the data flow diagram has thus been described.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 数据流图的顶部部分已经描述完毕。
- en: '![](../Images/0ca2aea8419f959d09fb2dd39f91c9cc.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0ca2aea8419f959d09fb2dd39f91c9cc.png)'
- en: How To Build Agents That Use Tools
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何构建使用工具的代理
- en: All other types of agents in the agentic workflow use tools. Most LLMs nowadays
    are equipped with this useful capacity. Since I described the bare metal agent
    above, I will describe the tool-using agent next, since it is the foundation for
    much to follow.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 代理工作流中的所有其他类型的代理都使用工具。现在大多数LLM都具备这种有用的功能。由于我在上面描述了裸金属代理，接下来我将描述使用工具的代理，因为它是后续操作的基础。
- en: LLMs generate string data through a sequence-to-sequence map. In chat applications
    as well as in the job ad quality extractor, the string data is (mostly) text.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: LLM通过序列到序列的映射生成字符串数据。在聊天应用程序以及招聘广告质量提取器中，字符串数据（大部分）是文本。
- en: 'But the string data can also be an array of function arguments. For example,
    if I have an executable function, `add`, that adds two integer variables, `a`
    and `b`, and returns their sum, then the string data to run `add` could be:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 但字符串数据也可以是一个函数参数的数组。例如，如果我有一个可执行函数 `add`，它将两个整数变量 `a` 和 `b` 相加并返回它们的和，那么运行 `add`
    的字符串数据可能是：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So if the LLM outputs this string of function arguments, it can in code lead
    to the function call `add(a=2, b=2)`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果LLM输出这段函数参数字符串，它可以在代码中导致`add(a=2, b=2)`的函数调用。
- en: 'The question is: how should the LLM be instructed such that it knows when and
    how to generate string data of this kind and specific syntax?'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是：应该如何指示LLM，使其知道何时以及如何生成这种特定语法的字符串数据？
- en: 'Alongside the `AgentBareMetal` agent, I define another agent type, which also
    inherits the `Agent` base class:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`AgentBareMetal`代理，我还定义了另一种代理类型，它同样继承了`Agent`基类：
- en: 'This differs from the bare metal agent in two regards:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这与裸机代理有两个方面的不同：
- en: '`self.tools` is a list created during instantiation.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.tools`是在实例化过程中创建的列表。'
- en: '`tool_return` is created during execution by invoking a function obtained from
    a registry, `registry_tool_name_2_func`.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tool_return`是在执行过程中通过调用从注册表中获取的函数`registry_tool_name_2_func`创建的。'
- en: The former object contains the data instructing the Anthropic LLMs on the format
    of the string data it can generate as input arguments to different tools. The
    latter object comes about through the execution of the tool, given the LLM-generated
    string data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 前者对象包含指示Anthropic LLM（大语言模型）关于其可以生成的字符串数据格式的指令，这些数据将作为不同工具的输入参数。后者对象则是通过执行工具，依据LLM生成的字符串数据得到的。
- en: 'The `tools_cv_data` file contains a JSON string formatted to define a function
    interface (but not the function itself). The string has to conform to a [very
    specific schema for the Anthropic LLM](https://docs.anthropic.com/en/docs/build-with-claude/tool-use#specifying-tools)
    to understand it. A snippet of this JSON string is:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`tools_cv_data`文件包含一个JSON字符串，格式化用于定义函数接口（但不包括函数本身）。该字符串必须符合[Anthropic LLM的非常具体的模式](https://docs.anthropic.com/en/docs/build-with-claude/tool-use#specifying-tools)，以便它能够理解。该JSON字符串的一个片段如下：'
- en: From the specification above we can tell that if, for example, the initialization
    of `AgentToolInvokeReturn` includes the string `biography` in the `tools` argument,
    then the Anthropic LLM will be instructed that it can generate a function argument
    string to a function called `create_biography`. What kind of data to include in
    each argument is left to the LLM to figure out from the description fields in
    the JSON string. These descriptions are therefore mini-prompts, which guide the
    LLM in its sense-making.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的规范我们可以看出，如果例如`AgentToolInvokeReturn`的初始化在`tools`参数中包含字符串`biography`，那么Anthropic
    LLM将被指示可以生成一个函数参数字符串，用于调用名为`create_biography`的函数。每个参数应该包含什么样的数据由LLM根据JSON字符串中的描述字段来决定。因此，这些描述相当于小提示，指导LLM进行推理。
- en: The function that is associated with this specification I implement through
    the following two definitions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与此规范相关的函数我通过以下两个定义来实现。
- en: In short, the tool name `create_biography` is associated with the class builder
    function `Biography.build`, which creates and returns an instance of the data
    class `Biography`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，工具名称`create_biography`与类构造函数`Biography.build`关联，该函数创建并返回`Biography`数据类的一个实例。
- en: Note that the attributes of the data class are perfectly mirrored in the JSON
    string that is added to the `self.tools` variable of the agent. That implies that
    the strings returned from the Anthropic LLM will fit perfectly into the class
    builder function for the data class.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，数据类的属性在添加到代理的`self.tools`变量中的JSON字符串中得到了完美的映射。这意味着从Anthropic LLM返回的字符串将完美适配数据类的类构造函数。
- en: 'To put it all together, take a closer look at the inner loop of the `run` method
    of `AgentToolInvokeRetur` shown again below:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 综合来看，请仔细查看`AgentToolInvokeReturn`中`run`方法的内部循环，如下所示：
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The steps are:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤如下：
- en: The response from the Anthropic LLM is checked to be a string of function arguments,
    not ordinary text.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Anthropic LLM返回的响应会被检查，确保它是一个函数参数的字符串，而不是普通文本。
- en: The name of the tool (e.g. `create_biography`), the string of function arguments
    and a unique tool use id are gathered.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工具的名称（例如`create_biography`）、函数参数的字符串以及一个独特的工具使用ID被收集起来。
- en: The executable tool is retrieved from the registry (e.g. `Biography.build`).
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可执行工具是从注册表中获取的（例如`Biography.build`）。
- en: The function is executed with the string function arguments (checking for errors)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该函数使用字符串函数参数执行（检查错误）。
- en: Once we have the output from the tool, we should decide what to do with it.
    Some applications integrate the tool outputs into the messages and execute another
    request to the LLM API. However, in the current application, I build agents that
    generate data objects, specifically subclasses of `CVData`. Hence, I design the
    agent to invoke the tool, and then simply return its output — hence the class
    name `AgentToolInvokeReturn`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们获得了工具的输出，我们应该决定如何处理它。一些应用将工具输出集成到消息中，并执行另一个LLM API请求。然而，在当前应用中，我构建了生成数据对象的代理，特别是`CVData`的子类。因此，我设计代理来调用工具，然后简单地返回其输出——因此类名为`AgentToolInvokeReturn`。
- en: It is on this foundation I build agents which create the constrained data structures
    I want to be part of the CV.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 正是在这个基础上，我构建了创建我想要作为CV一部分的约束数据结构的代理。
- en: Structured CV Data Extractor Agents
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构化CV数据提取器代理
- en: The class diagram for the agent that generates structured biography data is
    shown below. It has much in common with the previous class diagram for the agent
    that extracted the qualities from job ads.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 生成结构化传记数据的代理的类图如下所示。它与之前提取职位广告特征的代理的类图有很多相似之处。
- en: '![](../Images/2b65dae5790f6ce8214d263ae7a290bc.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b65dae5790f6ce8214d263ae7a290bc.png)'
- en: 'In code:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中：
- en: 'Two distinctions to the previous agent `JobAdQualityExtractor`:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的代理`JobAdQualityExtractor`的两个区别：
- en: The tool names are retrieved as a function of the class attribute `cv_data`
    (line 47 in the snippet above). So when the agent with tools is instantiated,
    the sequence of tool names is given by a registry that associates a type of CV
    data (e.g. `Biography`) with the key used in the `tools_cv_data` JSON string described
    above, e.g. `biography`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 工具名称作为类属性`cv_data`的函数被检索（上面代码片段中的第47行）。所以当带有工具的代理被实例化时，工具名称的顺序是由一个注册表提供的，该注册表将某种类型的CV数据（例如`Biography`）与在上述`tools_cv_data`
    JSON字符串中使用的键关联，例如`biography`。
- en: 'The prompt for the agent is rendered with variables (lines 48–52). Recall the
    use of Jinja templates above. This enables the injection of the relevant qualities
    of the job ad and a target number of words to be used in the “about me” section.
    The specific template for the biography agent is:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代理的提示是用变量呈现的（第48至52行）。回顾一下上面的Jinja模板的使用。这使得能够注入与职位广告相关的特征以及在“关于我”部分中使用的目标字数。传记代理的具体模板是：
- en: '![](../Images/b8b0e51c62f7c269fc45dcde8924ada9.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8b0e51c62f7c269fc45dcde8924ada9.png)'
- en: image of prompt template for biography extractor agent, note the two variables
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 传记提取器代理的提示模板的图片，注意其中的两个变量
- en: That means as it is instantiated, the agent is made aware of the job ad it should
    tailor its text output to.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在实例化时，代理会意识到它应该根据职位广告调整其文本输出。
- en: 'So when it receives the raw text data, it performs the instruction and returns
    an instance of the data class `Biography`. With identical reasons and similar
    software design, I generate additional extractor agents and CV data classes and
    tools definitions:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当它接收到原始文本数据时，它执行指令并返回一个`Biography`数据类的实例。基于相同的原因和类似的软件设计，我生成了额外的提取器代理、CV数据类和工具定义：
- en: '[PRE5]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We can now go up a level in the abstractions. With extractor agents in place,
    they should be joined to the raw data from which to extract, summarize, rewrite
    and distill the CV data content.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以提升一个层次的抽象。有了提取器代理，它们应该与原始数据结合，从中提取、总结、重写并提炼CV数据内容。
- en: Orchestration of Data Retrieval and Extraction
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据检索和提取的编排
- en: The part of the data diagram to explain next is the highlighted part.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要解释的数据图的部分是突出显示的部分。
- en: '![](../Images/dd763800d43e6dd6b387a934bb3bb9c0.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd763800d43e6dd6b387a934bb3bb9c0.png)'
- en: In principle, we can give the extractor agents access to all possible text we
    have for the person we are making the CV for. But that means the agent has to
    process a great deal of data irrelevant to the specific section it is focused
    on, e.g. formal educational details are hardly found in personal stream-of-consciousness
    blogging.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 原则上，我们可以让提取器代理访问我们为某个个人制作CV时所拥有的所有可能的文本。但这意味着代理必须处理大量与其关注的具体部分无关的数据，例如，正式的教育细节几乎不会出现在个人的意识流博客中。
- en: This is where important questions of retrieval and search usually enter the
    design considerations of LLM-powered applications.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是检索和搜索的重要问题通常进入基于LLM的应用设计考虑的地方。
- en: 'Do we try to find the relevant raw data to apply our agents to, or do we throw
    all we have into the large context window and let the LLM sort out the retrieval
    question? [Many](https://cohere.com/blog/rag-is-here-to-stay) [have had](https://x.com/Francis_YAO_/status/1758934303655030929)
    [their say](https://www.reddit.com/r/MachineLearning/comments/1ax6j73/rag_vs_long_context_models_discussion/)
    [on the](https://www.linkedin.com/posts/emollick_a-problem-with-rag-in-practice-i-asked-activity-7172666908230561792-muvu/)
    [matter](https://www.llamaindex.ai/blog/towards-long-context-rag). It is a worthwhile
    debate because there is a lot of truth in the below statement:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是尝试寻找相关的原始数据来应用我们的代理，还是将我们所有的内容都投入到大上下文窗口中，让LLM来解决检索问题呢？[许多人](https://cohere.com/blog/rag-is-here-to-stay)
    [已经发表过看法](https://x.com/Francis_YAO_/status/1758934303655030929) [对此问题](https://www.reddit.com/r/MachineLearning/comments/1ax6j73/rag_vs_long_context_models_discussion/)
    [发表了讨论](https://www.linkedin.com/posts/emollick_a-problem-with-rag-in-practice-i-asked-activity-7172666908230561792-muvu/)。这是一个值得探讨的话题，因为下面这句话中有很多真理：
- en: For my application, I will keep it simple — retrieval and search are saved for
    another day.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的应用，我会保持简单——检索和搜索留到另一天再做。
- en: Therefore, I will work with semi-structured raw data. While we have a general
    understanding of the content of the respective documents, internally they consist
    mostly of unstructured text. This scenario is common in many real-world cases
    where useful information can be extracted from the metadata on a file system or
    data lake.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我将处理半结构化的原始数据。尽管我们对各个文档的内容有一个大致的理解，但它们内部大多由非结构化文本组成。这种场景在许多现实世界的案例中很常见，其中可以从文件系统或数据湖中的元数据中提取有用的信息。
- en: 'The first piece in the retrieval puzzle is the data access object (DAO) for
    the template table of contents. At its core, that is a JSON string like this:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 检索谜题的第一部分是模板目录的数据库访问对象（DAO）。其核心是一个像这样的JSON字符串：
- en: It associates the name of a CV template, e.g. `single_column_0`, with a list
    of required data sections — the `CVData` data classes described in an earlier
    section.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 它将简历模板的名称（例如`single_column_0`）与所需数据部分的列表关联起来——这些数据部分是前面章节中描述的`CVData`数据类。
- en: Next, I encode which raw data access object should go with which CV data section.
    In my example, I have a modest collection of raw data sources, each accessible
    through a DAO, e.g. `PersonsEmploymentDAO`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我编码哪些原始数据访问对象应该与哪些简历数据部分对应。在我的示例中，我有一小部分原始数据源，每个数据源都可以通过DAO访问，例如`PersonsEmploymentDAO`。
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note in this code that the Biography and Skills CV data are created from several
    raw data sources. These associations are easily modified if additional raw data
    sources become available — append the new DAO to the tuple — or made configurable
    at runtime.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这段代码中，简历中的传记和技能数据是由多个原始数据源创建的。如果有额外的原始数据源可用，这些关联可以轻松修改——只需将新的DAO添加到元组中——或者在运行时进行配置。
- en: It is then a matter of matching the raw data and the CV data extractor agents
    for each required CV section. That is the data flow that the *orchestrator* implements.
    The image below is a zoomed-in data flow diagram for the `CVDataExtractionOrchestrator`
    execution.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只需要将原始数据和简历数据提取代理匹配到每个所需的简历部分。这就是*协调器*所实现的数据流。下图是`CVDataExtractionOrchestrator`执行的缩放数据流图。
- en: '![](../Images/764f2ddeeb4df8fc556768bb24f2d28a.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/764f2ddeeb4df8fc556768bb24f2d28a.png)'
- en: 'In code, the orchestrator is as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中，协调器如下所示：
- en: 'And putting it all together in the script `make_cv` we have:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在脚本`make_cv`中将所有内容整合在一起，我们得到：
- en: '[PRE7]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It is within the orchestrator therefore that the calls to the Anthropic LLMs
    take place. Each call is done with a programmatically created instruction prompt,
    typically including the job ad summary, some parameters of how wordy the CV sections
    should be, plus the raw data, keyed on the name of the person.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，所有对Anthropic LLM的调用都发生在协调器中。每次调用都是通过程序生成的指令提示完成的，通常包括职位广告摘要、简历各部分应有的文字数量参数，以及原始数据，以个人的名字为键。
- en: The loop yields a collection of structured CV data class instances once all
    the agents that use tools have concluded their tasks.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 循环执行完毕后，所有使用工具的代理完成任务后，会生成一组结构化的简历数据类实例。
- en: 'Interlude: None, <UNKNOWN>, “missing”'
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插曲：无，<未知>，“缺失”
- en: The Anthropic LLMs are remarkably good at matching their generated content to
    the output schema required to build the data classes. For example, I do *not*
    sporadically get a phone number in the email field, *nor* are invalid keys dreamt
    up, which would break the build functions of the data classes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Anthropic的LLM在将其生成的内容与构建数据类所需的输出模式匹配方面表现得相当出色。例如，我*不会*偶尔将电话号码放到电子邮件字段中，*也不会*想出无效的键，这样会破坏数据类的构建函数。
- en: But when I ran tests, I encountered an imperfection.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，当我进行测试时，我遇到了一个不完美的情况。
- en: 'Look again at how the Biography CV data is defined:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 再看看简历数据是如何定义的：
- en: If for example, the LLM does not find a GitHub URL in a person’s raw data, then
    it is permissible to return `None` for that field, since that attribute in the
    data class is optional. That is how I want it to be since it makes the rendering
    of the final CV simpler (see below).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果LLM没有在某个人的原始数据中找到GitHub URL，则可以为该字段返回`None`，因为该数据类中的该属性是可选的。这就是我想要的结果，因为它简化了最终简历的渲染（见下文）。
- en: But the LLMs regularly return a string value instead, typically `'<UNKNOWN>'`.
    To a human observer, there is no ambiguity about what this means. It is not a
    hallucination in that it is a fabrication that looks real yet is without basis
    in the raw data.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，LLM通常返回一个字符串值，通常是`'<UNKNOWN>'`。对于人类观察者来说，这没有什么歧义。它不是一种幻觉——即看起来真实却没有原始数据支持的虚构内容。
- en: 'However, it is an issue for a rendering algorithm that uses simple conditional
    logic, such as the following in a Jinja template:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于使用简单条件逻辑的渲染算法来说，这是一个问题，例如在Jinja模板中的以下代码：
- en: '[PRE8]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A problem that is semantically obvious to a human, but syntactically messy,
    is perfect for LLMs to deal with. Inconsistent labelling in the pre-LLM days caused
    many headaches and lengthy lists of creative string-matching commands (anyone
    who has done data migrations of databases with many free-text fields can attest
    to that).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于人类来说语义上显而易见，但语法上杂乱无章的问题，非常适合由大型语言模型（LLMs）处理。在LLM之前，标签不一致的问题曾经引发了许多麻烦，并产生了冗长的创造性字符串匹配命令（任何做过包含大量自由文本字段的数据库迁移的人都可以证实这一点）。
- en: So to deal with the imperfection, I create another agent that operates on the
    output of one of the other CV data extractor agents.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 所以为了处理这个不完美，我创建了另一个代理，该代理操作其中一个其他简历数据提取代理的输出。
- en: This agent uses objects described in previous sections. The difference is that
    it takes a collection of CV data classes as input, and is instructed to empty
    any field “where the value is somehow labelled as unknown, undefined, not found
    or similar” (part of [the full prompt](https://github.com/anderzzz/everyone_knows_it/blob/main/src/prompt_templates/ClearUndefinedCVDataEntries.txt)).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 该代理使用前面部分中描述的对象。不同之处在于，它接受简历数据类的集合作为输入，并被指示清空任何“值被标记为未知、未定义、未找到或类似的字段”（[完整提示](https://github.com/anderzzz/everyone_knows_it/blob/main/src/prompt_templates/ClearUndefinedCVDataEntries.txt)的一部分）。
- en: A joint agent is created. It first executes the creation of biography CV data,
    as described earlier. Second, it executes the *clear undefined agent* on the output
    of the former agent to fix issues with any <UNKNOWN> strings.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个联合代理。它首先执行之前提到的简历数据创建。其次，它在前一个代理的输出上执行*清除未定义代理*，以解决任何<UNKNOWN>字符串的问题。
- en: This agent solves the problem, and therefore I use it in the orchestration.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代理解决了问题，因此我在编排中使用它。
- en: Could this imperfection be solved with a different instruction prompt? Or would
    a simple string-matching fix be adequate? Maybe.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个不完美问题是否可以通过不同的指令提示来解决？或者简单的字符串匹配修复是否足够？也许可以。
- en: However, I use the simplest and cheapest LLM of Anthropic (*haiku*), and because
    of the modular design of the agents, it is an easy fix to implement and append
    to the data pipeline. The ability to construct *joint agents* that comprise multiple
    other agents is one of the design patterns advanced agentic workflows use.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我使用的是Anthropic的最简单、最便宜的LLM（*haiku*），由于代理的模块化设计，这是一项易于实现并添加到数据管道中的修复。构建包含多个其他代理的*联合代理*是先进代理工作流使用的设计模式之一。
- en: Render With CV Data Objects Collection
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用简历数据对象集合进行渲染
- en: The final step in the workflow is comparatively simple thanks to that we spent
    the effort to create structured and well-defined data objects. The contents of
    said objects are specifically placed within a Jinja HTML template through syntax
    matching.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流的最后一步相对简单，因为我们花费了精力来创建结构化和定义良好的数据对象。通过语法匹配，这些对象的内容被具体放置在Jinja HTML模板中。
- en: For example, if `biography` is an instance of the Biography CV data class and
    `env` a Jinja environment, then the following code
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果 `biography` 是 Biography CV 数据类的一个实例，`env` 是一个 Jinja 环境，那么以下代码
- en: '[PRE9]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: would for `test_template.html` like
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_template.html` 需要如下：'
- en: '[PRE10]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'match the name and email attributes of the `Biography` data class and return
    something like:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配 `Biography` 数据类的姓名和电子邮件属性，并返回类似以下的内容：
- en: '[PRE11]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The function `populate_html` takes all the generated CV Data objects and returns
    an HTML file using Jinja functionality.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `populate_html` 接受所有生成的 CV 数据对象，并使用 Jinja 功能返回一个 HTML 文件。
- en: 'In the script `make_cv` the third and final step is therefore:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `make_cv` 脚本中，第三步也是最后一步是：
- en: '[PRE12]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This completes the agentic workflow. The raw data has been distilled, the content
    put inside structured data objects that mirror the information design of standard
    CVs, and the content rendered in an HTML template that encodes the style choices.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了代理工作流。原始数据已经被提炼，内容被放入结构化数据对象中，这些对象反映了标准简历的信息设计，内容也被呈现为编码了样式选择的 HTML 模板。
- en: What About the CV Templates — How to Make Them?
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CV 模板如何制作——怎么做？
- en: The CV templates are Jinja templates of HTML files. Any tool that can create
    and edit HTML files can therefore be used to create a template. As long as the
    variable naming conforms to the names of the CV data classes, it will be compatible
    with the workflow.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: CV 模板是 HTML 文件的 Jinja 模板。因此，任何可以创建和编辑 HTML 文件的工具都可以用来创建模板。只要变量命名符合 CV 数据类的名称，它就能与工作流兼容。
- en: 'So for example, the following part of a Jinja template would retrieve data
    attributes from an instance of [the](https://github.com/anderzzz/everyone_knows_it/blob/6c96a71b3b1be18918a6caad96b9ec5c2148de2e/src/cv_data.py#L123)
    `[Employments](https://github.com/anderzzz/everyone_knows_it/blob/6c96a71b3b1be18918a6caad96b9ec5c2148de2e/src/cv_data.py#L123)`
    [CV data class](https://github.com/anderzzz/everyone_knows_it/blob/6c96a71b3b1be18918a6caad96b9ec5c2148de2e/src/cv_data.py#L123),
    and create a list of employments with descriptions (generated by the LLMs) and
    data on duration (if available):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下这部分 Jinja 模板将从 [the](https://github.com/anderzzz/everyone_knows_it/blob/6c96a71b3b1be18918a6caad96b9ec5c2148de2e/src/cv_data.py#L123)
    `[Employments](https://github.com/anderzzz/everyone_knows_it/blob/6c96a71b3b1be18918a6caad96b9ec5c2148de2e/src/cv_data.py#L123)`
    [CV 数据类](https://github.com/anderzzz/everyone_knows_it/blob/6c96a71b3b1be18918a6caad96b9ec5c2148de2e/src/cv_data.py#L123)
    中检索数据属性，并创建一个包含描述（由 LLMs 生成）和持续时间数据（如果有的话）的工作经历列表：
- en: '[PRE13]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: I know very little about front-end development — even HTML and CSS are rare
    in the code I’ve written over the years.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我对前端开发了解很少——即使是 HTML 和 CSS，在我多年来编写的代码中也很少出现。
- en: I decided therefore to use LLMs to create the CV templates. After all, this
    is a task in which I seek to map an appearance and design sensible and intuitive
    to a human observer to a string of specific HTML/Jinja syntax — a kind of task
    LLMs have proven quite apt at.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我决定使用 LLMs 来创建 CV 模板。毕竟，这是一个任务，旨在将人类观察者认为合理且直观的外观和设计映射到一串特定的 HTML/Jinja 语法——这是
    LLMs 在此类任务中表现得相当出色的领域。
- en: I chose not to integrate this with the agentic workflow but appended it in the
    corner of the data flow diagram as a useful appendix to the application.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择不将此与代理工作流集成，而是将其附加在数据流图的角落，作为应用程序的一个有用附录。
- en: '![](../Images/cb064fae0ba6e2198f511f7f9772e2f0.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cb064fae0ba6e2198f511f7f9772e2f0.png)'
- en: 'I used Claude, the chat interface to Anthropic’s Sonnet LLM. I provided Claude
    with two things: an image and a prompt.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了 Claude，这是 Anthropic 的 Sonnet LLM 的聊天界面。我向 Claude 提供了两样东西：一张图片和一个提示。
- en: The image is a crude outline of a single-column CV I cook up quickly using a
    word processor and then screen-dump.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 该图片是我快速使用文字处理软件制作的单栏简历的粗略轮廓，然后截屏保存。
- en: '![](../Images/41dd269f292f1b11d7d877e4205301bd.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41dd269f292f1b11d7d877e4205301bd.png)'
- en: screen dump of single-column CV layout used to guide Claude
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 单栏简历布局的截屏，用于引导 Claude
- en: The [prompt I give is fairly lengthy](https://github.com/anderzzz/everyone_knows_it/blob/main/template_creation_prompt/single_column.txt).
    It consists of three parts.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[我给出的提示相当长](https://github.com/anderzzz/everyone_knows_it/blob/main/template_creation_prompt/single_column.txt)。它由三个部分组成。'
- en: First, a statement of what I wish to accomplish and what information I will
    provide Claude as Claude executes the task.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，声明我希望完成的任务以及在 Claude 执行任务时我将提供哪些信息。
- en: 'Part of the prompt of this section reads:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分提示内容是：
- en: I wish to create a Jinja2 template for a static HTML page. The HTML page is
    going to present a CV for a person. The template is meant to be rendered with
    Python with Python data structures as input.
  id: totrans-168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我希望为静态 HTML 页面创建一个 Jinja2 模板。该 HTML 页面将展示一个人的简历。模板的目的是通过 Python 使用 Python 数据结构作为输入进行渲染。
- en: Second, a verbal description of the layout. In essence, a description of the
    image above, top to bottom, with remarks about relative font sizes, the order
    of the sections etc.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，布局的口头描述。实质上是对上图的描述，从上到下，并附上关于相对字体大小、各部分顺序等的备注。
- en: 'Third, a description of the data structures that I will use to render the Jinja
    template. In part, this prompt reads as shown in the image below:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，我将用于渲染 Jinja 模板的数据结构描述。部分内容如下面的图片所示：
- en: '![](../Images/4515484bcc8bc49d64e0f742d087d9ae.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4515484bcc8bc49d64e0f742d087d9ae.png)'
- en: The prompt continues listing all the CV data classes.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 提示继续列出所有简历数据类。
- en: To a human interpreter, who is knowledgeable in Jinja templating, HTML and Python
    data classes, this information is sufficient to enable matching the semantic description
    of where to place the email in the layout to the syntax `{{ biography.email }}`
    in the HTML Jinja template, and the description of where to place the LinkedIn
    profile URL (if available) in the layout to the syntax `{% if biography.linkedin_url
    %} <a href=”{{ biography.linkedin_url }}”>LinkedIn</a>{% endif }` and so on.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一位精通 Jinja 模板、HTML 和 Python 数据类的人工解读者来说，这些信息足够使其能够将电子邮件在布局中的位置与 HTML Jinja
    模板中的语法 `{{ biography.email }}` 进行匹配，将 LinkedIn 个人资料 URL（如果有）在布局中的位置与语法 `{% if
    biography.linkedin_url %} <a href=”{{ biography.linkedin_url }}”>LinkedIn</a>{%
    endif }` 进行匹配，依此类推。
- en: Claude executes the task perfectly — no need for me to manually edit the template.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Claude 完美地执行了任务——我无需手动编辑模板。
- en: I ran the agent workflow with the single-column template and synthetic data
    for the persona *Gregor Samsa* (see more about him later).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用单栏模板和为人物 *Gregor Samsa*（稍后会详细介绍）生成的合成数据运行了代理工作流。
- en: '[PRE14]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output document:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 输出文档：
- en: '![](../Images/00c8cb4900f435bcf0f717ad40ac1436.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/00c8cb4900f435bcf0f717ad40ac1436.png)'
- en: A decent CV. But I wanted to create variations and see what Claude and I could
    cook up.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不错的简历。但我想创建一些变体，看看 Claude 和我能做出什么。
- en: 'So I created another prompt and screen dump. This time for a two-column CV.
    The crude outline I drew up:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我又创建了另一个提示和屏幕截图。这次是针对一个两栏简历。粗略大纲我画了出来：
- en: '![](../Images/b8a72bd271bd9026d8dd44b5168cf295.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8a72bd271bd9026d8dd44b5168cf295.png)'
- en: screen dump of two-column CV layout used to guide Claude
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 用来指导 Claude 的两栏简历布局的屏幕截图
- en: I reused the prompt for the single column, only changing the second part where
    I in words describe the layout.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我重新使用了单栏的提示，只是修改了第二部分，用文字描述布局。
- en: It worked perfectly again.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 它再次完美地工作了。
- en: 'The styling, though, was a bit too bland for my taste. So as a follow-up prompt
    to Claude, I wrote:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 不过样式对于我的口味来说有点太单调了。所以作为对 Claude 的后续提示，我写道：
- en: 'Love it! Can you redo the previous task but with one modification: add some
    spark and colour to it. Arial font, black and white is all a bit boring. I like
    a bit of green and nicer looking fonts. Wow me! Of course, it should be professional-looking
    still.'
  id: totrans-186
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 喜欢！你能重新做一次之前的任务，但加上一些修改吗：加入一些亮点和色彩。Arial 字体，黑白色调有点单调。我喜欢一些绿色和更好看的字体。让我惊艳！当然，它依然应该看起来很专业。
- en: 'Had Claude responded with an annoyed comment that I must be a bit more specific,
    I would have empathized (in some sense of that word). Rather, Claude’s generative
    juices flowed and a template was created that when rendered looked like this:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Claude 回应说我必须更具体一些，我会有些同感（在某种意义上）。然而，Claude 的生成能力充分发挥，创建了一个模板，当渲染时看起来像这样：
- en: '![](../Images/bc89250d3d5365bdbaf4bbcd618e1415.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bc89250d3d5365bdbaf4bbcd618e1415.png)'
- en: Nice!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 不错！
- en: 'Notably, the fundamental layout in the crude outline is preserved in this version:
    the placement of sections, the relative width of the two columns, and the lack
    of descriptions in the education entries etc. Only the style changed and was consistent
    with the vague specifications given. Claude’s generative capacities filled in
    the gaps quite well in my judgment.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这个版本保留了粗略大纲中的基本布局：各个部分的位置、两栏的相对宽度，以及教育条目中没有描述等。只是样式有所改变，并且与给定的模糊规范保持一致。根据我的判断，Claude
    的生成能力很好地填补了这些空白。
- en: 'I next explored if Claude could keep the template layout and content specifications
    clear and consistent even when I dialled up the styling to eleven. So I wrote
    next to Claude:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我探索了即使将样式调整到极限，Claude是否还能保持模板布局和内容的清晰一致。所以我接着对Claude写道：
- en: Amazing. But now I want you to go all out! We are talking early 1990s web page
    aesthetic, blinking stuff, comic sans in the oddest places, weird and crazy colour
    contrasts. Full speed ahead, Claude, have some fun.
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 太棒了。但现在我想让你尽情发挥！我们要谈的是1990年代早期的网页美学，闪烁的元素、怪异的Comic Sans字体、疯狂的颜色对比。全速前进，Claude，玩得开心点。
- en: The result was glorious.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 结果非常出色。
- en: '![](../Images/af654e943018cd04016c4b30ae751e17.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/af654e943018cd04016c4b30ae751e17.png)'
- en: '*Who is this Gregor Samsa, what a free-thinker and not a trace of anxiety —
    hire the guy!*'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '*这个Gregor Samsa是谁，真是个自由思想者，毫无焦虑——快雇这个人！*'
- en: Even with this extreme styling, the specified layout is mostly preserved, and
    the text content as well. With a detailed enough prompt, Claude can seemingly
    create functional and nicely styled templates that can be part of the agentic
    workflow.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在如此极端的样式下，指定的布局大体上仍然得以保留，文本内容也是如此。通过足够详细的提示，Claude似乎能够创建出功能性且风格独特的模板，这些模板可以成为代理工作流的一部分。
- en: What About the Text Output?
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么文本输出如何呢？
- en: Eye-catching style and useful layout aside, a CV must contain abbreviated text
    that succinctly and truthfully shows the fit between person and position.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 除了引人注目的风格和有用的布局外，简历必须包含简洁且真实地展示人与职位匹配的文字。
- en: To explore this I created synthetic data for a person [Gregor Samsa](https://de.wikipedia.org/wiki/Die_Verwandlung#Gregor_Samsa)
    — educated in Central Europe, working in lighting sales, with a general interest
    in entomology. I generated raw data on Gregor’s past and present, some from my
    imagination, and some from LLMs. The details are not important. The key point
    is that the text is too muddled and unwieldy to be copy-pasted into a CV. The
    data has to be found (e.g. the email address appears within one of Gregor’s general
    musings), summarized (e.g. the description of Gregor’s PhD work is very detailed),
    distilled and tailored to the relevant position (e.g. which skills are worth bringing
    to the fore), and all reduced to one or two friendly sentences in an about me
    section.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 为了探索这一点，我为一个名为[Gregor Samsa](https://de.wikipedia.org/wiki/Die_Verwandlung#Gregor_Samsa)的人创建了合成数据——他在中欧接受教育，从事灯具销售工作，对昆虫学有广泛兴趣。我生成了关于Gregor过去和现在的原始数据，其中一部分来自我的想象，一部分来自LLM。这些细节并不重要。关键点是，文本内容太混乱、难以操作，无法直接复制粘贴到简历中。数据需要被找到（例如，Gregor的电子邮件地址出现在他的一些随意思考中），总结（例如，Gregor博士学位工作的描述非常详细），提炼并定制为与职位相关的内容（例如，哪些技能值得突出），并最终缩减为一两句话，放入“关于我”部分。
- en: The text outputs were very well made. I had Anthropic’s most advanced and eloquent
    model, Sonnet, write the About Me sections. The tone rang true.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 文本输出做得非常好。我让Anthropic公司最先进、最有表现力的模型Sonnet来写“关于我”部分。语气非常自然。
- en: In my tests, I found no outright hallucinations. However, the LLMs had taken
    certain liberties in the Skills section.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的测试中，我没有发现明显的幻觉。然而，LLM在技能部分确实采取了一些自由发挥。
- en: Gregor is described in the raw data as working and studying in Prague and Vienna
    mostly with some online classes from English-language educators. In one generated
    CV, language skills in Czech, German and English were listed despite that the
    raw data does not explicitly declare such knowledge. The LLM had made a reasonable
    inference of skills. Still, these were not skills abstracted from the raw data
    alone.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 原始数据中描述Gregor大多在布拉格和维也纳工作和学习，偶尔参加一些英语语言教育者的在线课程。在一份生成的简历中，列出了捷克语、德语和英语的语言技能，尽管原始数据并没有明确声明他具备这些语言能力。LLM做出了合理的技能推测。不过，这些技能并非仅从原始数据中抽取出来的。
- en: All code and synthetic data are available in [my GitHub repo](https://github.com/anderzzz/everyone_knows_it/).
    I used Python 3.11 to run it, and as long as you have an API key to Anthropic
    (assumed by the script to be stored in the environment variable `ANTHROPIC_API_KEY`),
    you can run and explore the application — and of course, to the best of my understanding,
    there are no errors, but I make no guarantees.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码和合成数据都可以在[我的GitHub仓库](https://github.com/anderzzz/everyone_knows_it/)中找到。我使用的是Python
    3.11，运行时，只要你有Anthropic的API密钥（假设脚本将其存储在环境变量`ANTHROPIC_API_KEY`中），你就可以运行并探索这个应用程序——当然，根据我所知，这没有错误，但我不能保证。
- en: This tutorial has shown one way to use generative AI, made a case for useful
    constraints in generative applications, and shown how it all can be implemented
    working directly with the Anthropic APIs. Though CV creation is not an advanced
    task, the principles and designs I covered can be a foundation for other non-chat
    applications with greater value and complexity.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程展示了使用生成式AI的一种方式，阐述了在生成应用中有用的约束，并展示了如何直接与Anthropic API进行交互来实现这些内容。尽管创建简历不是一项高级任务，但我所介绍的原则和设计可以作为其他更具价值和复杂性的非聊天应用的基础。
- en: Happy building!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 快乐构建！
- en: '*All images, graphs and code created by the Author.*'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '*所有图像、图表和代码均由作者创建。*'
