- en: 'Overwriting in Python: Tricky. Dangerous. Powerful'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中覆盖对象：棘手、危险且强大
- en: 原文：[https://towardsdatascience.com/overwriting-in-python-tricky-dangerous-powerful-04b12a9b1a7e?source=collection_archive---------3-----------------------#2024-04-10](https://towardsdatascience.com/overwriting-in-python-tricky-dangerous-powerful-04b12a9b1a7e?source=collection_archive---------3-----------------------#2024-04-10)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/overwriting-in-python-tricky-dangerous-powerful-04b12a9b1a7e?source=collection_archive---------3-----------------------#2024-04-10](https://towardsdatascience.com/overwriting-in-python-tricky-dangerous-powerful-04b12a9b1a7e?source=collection_archive---------3-----------------------#2024-04-10)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: Although overwriting objects is a typical Python coding technique, it can lead
    to unexpected effects. You need to know how to use it to utilize its strengths.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 虽然覆盖对象是 Python 编程中的典型技巧，但它可能会导致意想不到的效果。你需要了解如何使用它，才能发挥其优势。
- en: '[](https://medium.com/@nyggus?source=post_page---byline--04b12a9b1a7e--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page---byline--04b12a9b1a7e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--04b12a9b1a7e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--04b12a9b1a7e--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page---byline--04b12a9b1a7e--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page---byline--04b12a9b1a7e--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page---byline--04b12a9b1a7e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--04b12a9b1a7e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--04b12a9b1a7e--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page---byline--04b12a9b1a7e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--04b12a9b1a7e--------------------------------)
    ·27 min read·Apr 10, 2024
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--04b12a9b1a7e--------------------------------)
    ·27分钟阅读·2024年4月10日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/24603710e2708d773ede8bac7ae78647.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/24603710e2708d773ede8bac7ae78647.png)'
- en: 'Overwriting in Python can be dangerous: Don’t enter without reconsideration.
    Photo by [Raúl Nájera](https://unsplash.com/@reinf?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中覆盖对象可能是危险的：不要在未深思熟虑的情况下进行操作。照片由[Raúl Nájera](https://unsplash.com/@reinf?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: I’ve overwritten plenty of various objects in Python. If you’ve spent your share
    of hours coding in Python, you have, too. This is because, at least in Python,
    overwriting objects lies at the core of the language.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾经覆盖过许多不同的对象。如果你也曾在 Python 中编写过代码，可能也有过类似的经历。这是因为，在 Python 中，覆盖对象是语言的核心特性之一。
- en: 'I’ve overwritten variables but also functions, classes, and class methods —
    even exceptions:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我不仅覆盖了变量，还覆盖了函数、类和类方法——甚至是异常：
- en: '[](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----04b12a9b1a7e--------------------------------)
    [## How to Overwrite AssertionError in Python and Use Custom Exceptions'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----04b12a9b1a7e--------------------------------)
    [## 如何在 Python 中覆盖 AssertionError 并使用自定义异常'
- en: Python’s assert statement uses AssertionError. Know how to use a different exception
    instead
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 的 assert 语句使用的是 AssertionError。了解如何使用其他异常来代替它。
- en: betterprogramming.pub](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----04b12a9b1a7e--------------------------------)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: betterprogramming.pub](https://betterprogramming.pub/how-to-overwrite-asserterror-in-python-and-use-custom-exceptions-c0b252989977?source=post_page-----04b12a9b1a7e--------------------------------)
- en: And indeed, we’ll differentiate between overwriting variables and callables.
    The difference between these two processes is actually quite significant, with
    the latter being more tricky. And even though our focus is on overwriting callables,
    as it’s a more advanced technique, we’ll also discuss overwriting variables, as
    it offers a good starting point for our discussion.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，我们会区分覆盖变量和可调用对象。这两者之间的区别实际上相当重要，后者更为棘手。尽管我们的重点是覆盖可调用对象，因为它是一种更高级的技巧，我们也会讨论覆盖变量，因为它为我们的讨论提供了一个良好的起点。
