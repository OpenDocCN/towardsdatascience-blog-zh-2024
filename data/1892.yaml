- en: Embracing Simplicity and Composability in Data Engineering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在数据工程中拥抱简洁性和可组合性
- en: 原文：[https://towardsdatascience.com/embracing-simplicity-and-composability-in-data-engineering-1eb1fd7aa190?source=collection_archive---------2-----------------------#2024-08-03](https://towardsdatascience.com/embracing-simplicity-and-composability-in-data-engineering-1eb1fd7aa190?source=collection_archive---------2-----------------------#2024-08-03)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/embracing-simplicity-and-composability-in-data-engineering-1eb1fd7aa190?source=collection_archive---------2-----------------------#2024-08-03](https://towardsdatascience.com/embracing-simplicity-and-composability-in-data-engineering-1eb1fd7aa190?source=collection_archive---------2-----------------------#2024-08-03)
- en: 'Lessons from 30+ years in data engineering: The overlooked value of keeping
    it simple'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从30多年数据工程的经验中汲取的教训：忽视保持简单性的价值
- en: '[](https://medium.com/@bernd.wessely?source=post_page---byline--1eb1fd7aa190--------------------------------)[![Bernd
    Wessely](../Images/e60e01c19412d8af8f8bddf78e561275.png)](https://medium.com/@bernd.wessely?source=post_page---byline--1eb1fd7aa190--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--1eb1fd7aa190--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--1eb1fd7aa190--------------------------------)
    [Bernd Wessely](https://medium.com/@bernd.wessely?source=post_page---byline--1eb1fd7aa190--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@bernd.wessely?source=post_page---byline--1eb1fd7aa190--------------------------------)[![Bernd
    Wessely](../Images/e60e01c19412d8af8f8bddf78e561275.png)](https://medium.com/@bernd.wessely?source=post_page---byline--1eb1fd7aa190--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--1eb1fd7aa190--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--1eb1fd7aa190--------------------------------)
    [Bernd Wessely](https://medium.com/@bernd.wessely?source=post_page---byline--1eb1fd7aa190--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--1eb1fd7aa190--------------------------------)
    ·8 min read·Aug 3, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--1eb1fd7aa190--------------------------------)
    ·阅读时间：8分钟·2024年8月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/343b7f3167c0e167e0214b34e47dafb4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/343b7f3167c0e167e0214b34e47dafb4.png)'
- en: Image by author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'We have a straightforward and fundamental principle in computer programming:
    the separation of concerns between logic and data. Yet, when I look at the current
    data engineering landscape, it’s clear that we’ve strayed from this principle,
    complicating our efforts significantly — [I’ve previously written about this issue](https://medium.com/towards-data-science/data-engineering-redefined-643249cbbadd).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机编程中，我们有一个直接且基本的原则：逻辑和数据之间的关注点分离。然而，当我看到当前的数据工程领域时，很明显我们已经偏离了这一原则，导致我们的工作变得复杂化——[我之前曾写过关于这个问题的文章](https://medium.com/towards-data-science/data-engineering-redefined-643249cbbadd)。
- en: There are other elegantly simple principles that we frequently overlook and
    fail to follow. The developers of the Unix operating system, for instance, introduced
    well thought-out and simple abstractions for building software products. These
    principles have stood the test of time, evident in millions of applications built
    upon them. However, for some reason we often take convoluted detours via complex
    and often closed ecosystems, loosing sight of the [KISS principle](https://en.wikipedia.org/wiki/KISS_principle)
    and the [Unix philosophy](https://en.m.wikipedia.org/wiki/Unix_philosophy) of
    simplicity and composability.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些优雅简洁的原则，我们常常忽视并未遵循。例如，Unix操作系统的开发者们引入了深思熟虑且简单的软件构建抽象方法。这些原则经得起时间的考验，在基于它们构建的数百万个应用中得到了验证。然而，不知为何，我们常常通过复杂且往往封闭的生态系统走弯路，忽视了[KISS原则](https://en.wikipedia.org/wiki/KISS_principle)和[Unix哲学](https://en.m.wikipedia.org/wiki/Unix_philosophy)的简洁性和可组合性。
- en: Why does this happen?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会发生这种情况？
- en: Let’s explore some examples and delve into a bit of history to better understand
    this phenomenon. This exploration might help to grasp why we repeatedly fail to
    keep things simple.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些例子并深入探索一点历史，以更好地理解这一现象。这一探索或许有助于我们理解为什么我们反复未能保持事物的简单性。
- en: Databases
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库
- en: 'Unix-like systems offer a fundamental abstraction of data as files. In these
    systems nearly everything related to data is a file, including:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 类Unix系统提供了将数据抽象为文件的基本方式。在这些系统中，几乎所有与数据相关的内容都是文件，包括：
- en: '**Regular Files**: Typically text, pictures, programs, etc.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**常规文件**：通常是文本、图片、程序等。'
- en: '**Directories**: A special type of file containing lists of other files, organizing
    them hierarchically.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目录**：一种特殊类型的文件，包含其他文件的列表，并按层级组织它们。'
- en: '**Devices**: Files representing hardware devices, including block-oriented
    (disks) and character-oriented devices (terminals).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设备**：代表硬件设备的文件，包括面向块的设备（磁盘）和面向字符的设备（终端）。'
- en: '**Pipes**: Files enabling communication between processes.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管道**：使进程间通信成为可能的文件。'
- en: '**Sockets**: Files facilitating network communication between computer nodes.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**套接字**：促进计算机节点间网络通信的文件。'
- en: Each application can use common operations that all work similar on these different
    file types, like open(), read(), write(), close(), and lseek (change the position
    inside a file). The content of a file is just a stream of bytes and the system
    has no assumptions about the structure of a file’s content. For every file the
    system maintains basic metadata about the owner, access rights, timestamps, size,
    and location of the data-blocks on disks.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序可以使用一些常见操作，这些操作在不同的文件类型上表现相似，如open()、read()、write()、close()和lseek（改变文件内部位置）。文件的内容只是字节流，系统对文件内容的结构没有假设。对于每个文件，系统维护着关于所有者、访问权限、时间戳、大小以及数据块在磁盘上位置的基本元数据。
- en: This compact and at the same time versatile abstraction supports the construction
    of very flexible data systems. It has, for instance, also been used to create
    the well-known relational database systems, which introduced the new abstraction
    called relation (or table) for us.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种紧凑且同时非常灵活的抽象支持构建非常灵活的数据系统。例如，它也被用来创建著名的关系型数据库系统，这些系统为我们引入了称为“关系”（或表）的新抽象。
- en: Unfortunately these systems evolved in ways that moved away from treating relations
    as files. To access the data in these relations now requires calling the database
    application, using the structured query language (SQL) which was defined as the
    new interface to access data. This allowed databases to better control access
    and offer higher-level abstractions than the file system.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，这些系统朝着远离将关系视为文件的方向发展。现在，要访问这些关系中的数据，就需要调用数据库应用程序，使用结构化查询语言（SQL），这被定义为访问数据的新接口。这使得数据库能够更好地控制访问并提供比文件系统更高级的抽象。
- en: Was this an improvement in general? For a few decades, we obviously believed
    in that and relational database systems got all the rage. Interfaces such as ODBC
    and JDBC standardized access to various database systems, making relational databases
    the default for many developers. Vendors promoted their systems as comprehensive
    solutions, incorporating not just data management but also business logic, encouraging
    developers to work entirely within the database environment.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这总体上是一次改进吗？在几个十年里，我们显然相信了这一点，关系型数据库系统风靡一时。像ODBC和JDBC这样的接口标准化了对各种数据库系统的访问，使得关系型数据库成为许多开发者的默认选择。供应商将他们的系统宣传为全面解决方案，不仅包括数据管理，还包括业务逻辑，鼓励开发者完全在数据库环境中工作。
- en: A brave man named Carlos Strozzi tried to counteract this development and adhere
    to the Unix philosophy. He aimed to keep things simple and treat the database
    as [just a thin extension to the Unix file abstraction](http://www.strozzi.it/cgi-bin/CSA/tw7/I/en_US/NoSQL/Home%20Page).
    Because he didn’t want to force applications to only use SQL for accessing the
    data, he called it NoSQL RDBMS. The term NoSQL was later taken over by the movement
    towards alternative data storage models driven by the need to handle increasing
    data volumes at internet scale. Relational databases were dismissed by the NoSQL
    community as outdated and incapable to address the needs of modern data systems.
    A confusing multitude of new APIs occured.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一位勇敢的人，名叫Carlos Strozzi，试图抵制这一发展并坚持Unix哲学。他旨在保持简单，并将数据库视为[仅仅是Unix文件抽象的一个薄扩展](http://www.strozzi.it/cgi-bin/CSA/tw7/I/en_US/NoSQL/Home%20Page)。因为他不想强迫应用程序只使用SQL来访问数据，所以他称其为NoSQL
    RDBMS。后来，NoSQL这一术语被用于推动替代数据存储模型的运动，这一运动源自于需要处理互联网规模的日益增加的数据量。关系型数据库被NoSQL社区视为过时，并且无法满足现代数据系统的需求。一种混乱的新API层出不穷。
- en: Ironically, the NoSQL community eventually recognized the value of a standard
    interface, leading to the reinterpretation of NoSQL as “Not Only SQL” and the
    reintroduction of SQL interfaces to NoSQL databases. Concurrently, the open-source
    movement and new open data formats like Parquet and Avro emerged, saving data
    in plain files compatible with the good old Unix file abstractions. Systems like
    Apache Spark and DuckDB now use these formats, enabling direct data access via
    libraries relying solely on file abstractions, with SQL as one of many access
    methods.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 具有讽刺意味的是，NoSQL社区最终认识到标准接口的价值，导致了对NoSQL的重新解释为“Not Only SQL”，并重新引入了SQL接口到NoSQL数据库中。与此同时，开源运动和新兴的开源数据格式如Parquet和Avro也出现了，将数据存储在兼容传统Unix文件抽象的普通文件中。像Apache
    Spark和DuckDB这样的系统现在使用这些格式，通过仅依赖于文件抽象的库直接访问数据，其中SQL是众多访问方法之一。
- en: Ultimately, databases actually didn’t offer the better abstraction for the implementation
    of all the multifaceted requirements in the enterprise. SQL is a valuable tool
    but not the only or best option. We had to take the detours via RDBMS and NoSQL
    databases to end up back at files. Maybe we recognize that simple Unix-like abstractions
    actually provide a robust foundation for the versatile requirements to data management.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，数据库实际上并没有为企业中所有多方面的需求提供更好的抽象。SQL是一个有价值的工具，但并不是唯一或最好的选择。我们不得不通过RDBMS和NoSQL数据库的绕道，最终回到了文件。也许我们意识到，简单的类Unix抽象实际上为数据管理的多功能需求提供了一个稳固的基础。
- en: Don’t get me wrong, databases remain crucial, offering features like ACID, granular
    access control, indexing, and many other. However, I think that one single monolithic
    system with a constrained and opinionated way of representing data is not the
    right way to deal with all that varied requirements at enterprise level. Databases
    add value but should be open and usable as components within larger systems and
    architecures.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 别误会，数据库依然至关重要，提供诸如ACID、精细访问控制、索引等功能。然而，我认为，单一的、庞大的系统，以一种受限且固定的数据表示方式来处理企业级的各种需求并不是正确的方式。数据库增加了价值，但应该是开放的，并能作为更大系统和架构中的组件来使用。
- en: New ecosystems everywhere
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的生态系统无处不在
- en: Databases are just one example of the trend to create new ecosystems that aim
    to be the better abstraction for applications to handle data and even logic. A
    similar phenomenon occured with the big data movement. In an effort to process
    the enormous amounts of data that traditional databases could apparently no longer
    handle, a whole new ecosystem emerged around the distributed data system Hadoop.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库只是创建新生态系统趋势的一个例子，这些生态系统旨在为应用程序提供更好的抽象，以处理数据甚至逻辑。大数据运动中也出现了类似的现象。为了处理传统数据库显然无法再处理的庞大数据量，一个全新的生态系统围绕分布式数据系统Hadoop应运而生。
- en: Hadoop implemented the distributed file system HDFS, tightly coupled with the
    processing framework MapReduce. Both components are completely Java-based and
    run in the JVM. Consequently, the abstractions offered by Hadoop were not seamless
    extensions to the operating system. Instead, applications had to adopt a completely
    new abstraction layer and API to leverage the advancements in the big data movement.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Hadoop实现了分布式文件系统HDFS，紧密地与处理框架MapReduce耦合。两个组件都是完全基于Java的，并在JVM中运行。因此，Hadoop提供的抽象并不是操作系统的无缝扩展。相反，应用程序必须采用全新的抽象层和API，以利用大数据运动中的进展。
- en: This ecosystem spawned a multitude of tools and libraries, ultimately giving
    rise to the new role of the data engineer. A new role that seemed inevitable because
    the ecosystem had grown so complex that regular software engineers could no longer
    keep up. Clearly, we failed to keep things simple.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个生态系统催生了大量的工具和库，最终产生了数据工程师这一新角色。这个新角色似乎是不可避免的，因为生态系统已经变得如此复杂，以至于常规的软件工程师无法跟上。显然，我们未能保持简单。
- en: Distributed operating system equivalents
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式操作系统等效物
- en: With the insight that big data can’t be handled by single systems, we witnessed
    the emergence of new distributed operating system equivalents. This somewhat unwieldy
    term refers to systems that allocate resources to software components running
    across a cluster of compute nodes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过认识到大数据不能通过单一系统来处理，我们见证了新型分布式操作系统等效物的出现。这个有些笨拙的术语指的是那些将资源分配给跨计算节点集群运行的软件组件的系统。
- en: For Hadoop, this role was filled with YARN (Yet Another Resource Negotiator),
    which managed resource allocation among the running MapReduce jobs in Hadoop clusters,
    much like an operating system allocates resources among processes running in a
    single system.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Hadoop来说，这一角色由YARN（Yet Another Resource Negotiator）担任，它负责管理Hadoop集群中正在运行的MapReduce作业之间的资源分配，就像操作系统在单一系统中为进程分配资源一样。
- en: Consequently, an alternative approach would have been to scale the Unix-like
    operating systems across multiple nodes while retaining familiar single-system
    abstractions. Indeed, such systems, known as [Single System Image (SSI)](https://en.wikipedia.org/wiki/Single_system_image),
    were developed independently of the big data movement. This approach abstracted
    the fact that the Unix-like system ran on many distributed nodes, promising horizontal
    scaling while evolving proven abstractions. However, the development of these
    systems proved complex apparently and stagnated around 2015.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，另一种方法本应是将类Unix操作系统扩展到多个节点，同时保留熟悉的单系统抽象。实际上，这种系统，称为[单系统镜像（SSI）](https://en.wikipedia.org/wiki/Single_system_image)，是在大数据运动之外独立发展的。该方法将类Unix系统运行在多个分布式节点的事实进行了抽象，承诺提供水平扩展，同时发展了经过验证的抽象。然而，显然这些系统的开发非常复杂，并且在2015年左右停滞了。
- en: A key factor in this stagnation was likely the parallel development by influential
    cloud providers, who advanced YARN functionality into a distributed orchestration
    layer for standard Linux systems. Google, for example, pioneered this with its
    internal system Borg, which apparently required less effort than rewriting the
    operating system itself. But once again, we sacrificed simplicity.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这一停滞的一个关键因素可能是受有影响力的云服务提供商的平行开发推动，他们将YARN的功能发展成了一个用于标准Linux系统的分布式编排层。例如，Google通过其内部系统Borg开创了这一领域，而Borg显然所需的努力比重写操作系统本身要少。但我们再次牺牲了简洁性。
- en: Today, we lack a system that transparently scales single-system processes across
    a cluster of nodes. Instead, we were blessed (or cursed?) with Kubernetes that
    evolved from Google’s Borg to become the de-facto standard for a distributed resource
    and orchestration layer running containers in clusters of Linux nodes. Known for
    its complexity, Kubernetes requires the learning about Persistent Volumes, Persistent
    Volume Claims, Storage Classes, Pods, Deployments, Stateful Sets, Replica Sets
    and more. A totally new abstraction layer that bears little resemblance to the
    simple, familiar abstractions of Unix-like systems.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，我们缺乏一个能够透明地在集群节点之间扩展单系统进程的系统。相反，我们得到了（或者说被诅咒了？）Kubernetes，它从Google的Borg演变而来，成为了一个分布式资源和编排层，负责在Linux节点集群中运行容器。Kubernetes以其复杂性著称，学习它需要了解持久化卷、持久化卷声明、存储类、Pod、部署、状态集、副本集等内容。这是一个全新的抽象层，与类Unix系统中简单且熟悉的抽象几乎没有相似之处。
- en: Agility
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷性
- en: It is not only computer systems that suffer from supposed advances that disregard
    the KISS principle. The same applies to systems that organize the development
    process.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅是计算机系统遭遇了忽视KISS原则的所谓进步，组织开发过程的系统也面临同样的问题。
- en: Since 2001, we have a lean and well-thougt-out manifesto of principles for agile
    software development. Following these straightforward principles helps teams to
    collaborate, innovate, and ultimately produce better software systems.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 自2001年以来，我们有了一套精简且经过深思熟虑的敏捷软件开发原则宣言。遵循这些简单明了的原则有助于团队进行协作、创新，并最终开发出更好的软件系统。
- en: However, in our effort to ensure successful application, we tried to prescribe
    these general principles more precisely, detailing them so much that teams now
    require agile training courses to fully grasp the complex processes. We finally
    got overly complex frameworks like SAFe that most agile practitioners wouldn’t
    even consider agile anymore.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在确保成功应用的过程中，我们试图更精确地规定这些通用原则，详细说明得如此之多，以至于团队现在需要参加敏捷培训课程，才能完全掌握这些复杂的流程。最终，我们得到了像SAFe这样过于复杂的框架，很多敏捷实践者甚至不再认为它们是敏捷的了。
- en: You do not have to believe in agile principles — some argue that agile working
    has failed — to see the point I’m making. We tend to complicate things excessively
    when commercial interests gain upper hand or when we rigidly prescribe rules that
    we believe must be followed. There’s a [great talk on this by Dave Thomas (one
    of the authors of the manifesto)](https://www.youtube.com/watch?v=a-BOSpxYJ9M)
    where he explains what happens when we forget about simplicity.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必相信敏捷原则——有些人认为敏捷工作已经失败——就能理解我所表达的观点。当商业利益占上风，或者我们僵化地制定我们认为必须遵守的规则时，我们往往会把事情复杂化。有一个[由戴夫·托马斯（敏捷宣言的作者之一）主讲的精彩演讲](https://www.youtube.com/watch?v=a-BOSpxYJ9M)，他解释了当我们忽视简洁性时会发生什么。
- en: Trust in principles and architecture, not products and rituals
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信任原则和架构，而不是产品和仪式
- en: The KISS principle and the Unix philosophy are easy to understand, but in the
    daily madness of data architecture in IT projects, they can be hard to follow.
    We have too many tools, too many vendors selling too many products that all promise
    to solve our challenges.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: KISS 原则和 Unix 哲学容易理解，但在 IT 项目的数据架构的日常混乱中，它们可能很难遵循。我们有太多的工具，太多的供应商，卖着太多的产品，而这些产品都承诺能解决我们的挑战。
- en: The only way out is to truly understand and adhere to sound principles. I think
    we should always think twice before replacing tried and tested simple abstractions
    with something new and trendy.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的出路是真正理解并遵守合理的原则。我认为在用新的时髦事物替代经过验证的简单抽象之前，我们应该始终三思而后行。
- en: I’ve written about my [personal strategy for staying on top of things and understanding
    the big picture](https://medium.com/@bernd.wessely/abstract-and-conquer-data-engineering-e2b7c0b92f9f)
    to deal with the extreme complexity we face.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾写过关于我[个人的应对复杂事务和理解大局的策略](https://medium.com/@bernd.wessely/abstract-and-conquer-data-engineering-e2b7c0b92f9f)，以应对我们所面临的极端复杂性。
- en: Commercialism must not determine decisions
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 商业化不能决定决策
- en: It is hard to follow the simple principles given by the Unix philosophy when
    your organization is clamoring for a new giant AI platform (or any other platform
    for that matter).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的组织在喧嚣要求一个新的巨型 AI 平台（或者任何其他平台）时，遵循 Unix 哲学中给出的简单原则是很难的。
- en: '[Enterprise Resource Planning (ERP)](https://en.wikipedia.org/wiki/Enterprise_resource_planning)
    providers, for instance, made us believe at the time that they could deliver systems
    covering all relevant business requirements in a company. How dare you contradict
    these specialists?'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[企业资源规划（ERP）](https://en.wikipedia.org/wiki/Enterprise_resource_planning)的供应商，例如，在当时让我们相信他们能提供覆盖公司所有相关业务需求的系统。你怎么敢与这些专家相矛盾？'
- en: '[Unified Real-Time (Data) Platform (URP)](https://www.rtinsights.com/unified-real-time-platforms/)
    providers now claim their systems will solve all our data concerns. How dare you
    not use such a comprehensive system?'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[统一实时（数据）平台（URP）](https://www.rtinsights.com/unified-real-time-platforms/)的供应商现在声称他们的系统将解决我们所有的数据问题。你怎么敢不使用这么全面的系统？'
- en: But products are always just a small brick in the overall system architecture,
    no matter how extensive the range of functionality is advertised.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，产品始终只是整个系统架构中的一小块砖块，无论其功能范围如何广泛地被宣传。
- en: Data engineering should be grounded in the same software architecture principles
    used in software engineering. And software architecture is about balancing trade-offs
    and maintaining flexibility, focusing on long-term business value. Simplicity
    and composability can help you maintain this focus.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 数据工程应该基于与软件工程中使用的相同的软件架构原则。而软件架构就是在平衡权衡和保持灵活性中，专注于长期的业务价值。简洁性和可组合性能帮助你保持这个焦点。
- en: Pressure from closed thinking models
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 来自封闭思维模型的压力
- en: Not only commercialism keeps us from adhering to simplicity. Even open source
    communities can be dogmatic. While we seek golden rules for perfect systems development,
    they don’t exist in reality.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅是商业化让我们无法坚持简洁，开放源代码社区有时也会显得教条。虽然我们寻求完美系统开发的黄金规则，但现实中并不存在这样的规则。
- en: The Python community may say that non-pythonic code is bad. The functional programming
    community might claim that applying OOP principles will send you to hell. And
    the protagonists on agile programming may want to convince you that any development
    following the waterfall approach will doom your project to failure. Of course,
    they are all wrong in their absolutism, but we often dismiss ideas outside our
    thinking space as inappropriate.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Python社区可能会说非Pythonic代码是不好的。函数式编程社区可能会声称应用面向对象编程原则会让你走向地狱。敏捷编程的倡导者可能会试图说服你，任何遵循瀑布方法的开发都会使你的项目注定失败。当然，他们在其绝对主义的立场上都是错的，但我们常常会把超出自己思维范围的观点视为不合适的。
- en: We like clear rules that we just have to follow to be successful. At one of
    my clients, for instance, the software development team had intensely studied
    software design patterns. Such patterns can be very helpful in finding a tried
    and tested solution for common problems. But what I actually observed in the team
    was that they viewed these patterns as rules that they had to adhere to rigidly.
    Not following these rules was like being a bad software engineer. But this often
    leaded to overly complex designs for very simple problems. Critical thinking based
    on sound principles cannot be replaced by rigid adherence to rules.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们喜欢那些我们只需要遵循就能取得成功的清晰规则。举个例子，在我的一个客户公司，软件开发团队曾深入研究过软件设计模式。这些模式在为常见问题找到经过验证的解决方案时非常有帮助。但我在团队中实际观察到的是，他们将这些模式视为必须严格遵循的规则。不遵循这些规则就像是一个不称职的软件工程师。但这往往导致了对非常简单问题的过度复杂设计。基于扎实原则的批判性思维不能被对规则的僵硬遵守所替代。
- en: In the end, it takes courage and thorough understanding of principles to embrace
    simplicity and composability. This approach is essential to design reliable data
    systems that scale, can be maintained, and evolve with the enterprise.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，拥抱简洁性和可组合性需要勇气和对原则的深刻理解。这种方法对于设计可靠的数据系统至关重要，能够扩展、维护并与企业一起发展。
- en: If you find this information useful, please consider to clap. I would be more
    than happy to receive your feedback with your opinions and questions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得这些信息有用，请考虑点赞。我非常乐意收到你们的反馈、意见和问题。
