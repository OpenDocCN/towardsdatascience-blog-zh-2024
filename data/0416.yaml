- en: Finite Automata Simulation for Leveraging AI-Assisted Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有限自动机仿真在利用 AI 辅助系统中的应用
- en: 原文：[https://towardsdatascience.com/bird-by-bird-using-finite-automata-9d50b36bcbd3?source=collection_archive---------9-----------------------#2024-02-13](https://towardsdatascience.com/bird-by-bird-using-finite-automata-9d50b36bcbd3?source=collection_archive---------9-----------------------#2024-02-13)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/bird-by-bird-using-finite-automata-9d50b36bcbd3?source=collection_archive---------9-----------------------#2024-02-13](https://towardsdatascience.com/bird-by-bird-using-finite-automata-9d50b36bcbd3?source=collection_archive---------9-----------------------#2024-02-13)
- en: '[Bird by Bird Tech](https://towardsdatascience.com/tagged/bird-by-bird-tech)'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '[鸟类技术逐步推进](https://towardsdatascience.com/tagged/bird-by-bird-tech)'
- en: Design, modelling, and simulation of real-world AI systems to improve performance
    on object detection tasks using finite state machines
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用有限状态机设计、建模和仿真现实世界的 AI 系统，以提高物体检测任务的性能
- en: '[](https://slipnitskaya.medium.com/?source=post_page---byline--9d50b36bcbd3--------------------------------)[![Sofya
    Lipnitskaya](../Images/9ea0dd0af32232eb4c8db0cb96f66449.png)](https://slipnitskaya.medium.com/?source=post_page---byline--9d50b36bcbd3--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--9d50b36bcbd3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--9d50b36bcbd3--------------------------------)
    [Sofya Lipnitskaya](https://slipnitskaya.medium.com/?source=post_page---byline--9d50b36bcbd3--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://slipnitskaya.medium.com/?source=post_page---byline--9d50b36bcbd3--------------------------------)[![Sofya
    Lipnitskaya](../Images/9ea0dd0af32232eb4c8db0cb96f66449.png)](https://slipnitskaya.medium.com/?source=post_page---byline--9d50b36bcbd3--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--9d50b36bcbd3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--9d50b36bcbd3--------------------------------)
    [Sofya Lipnitskaya](https://slipnitskaya.medium.com/?source=post_page---byline--9d50b36bcbd3--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--9d50b36bcbd3--------------------------------)
    ·13 min read·Feb 13, 2024
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--9d50b36bcbd3--------------------------------)
    ·阅读时间 13 分钟·2024年2月13日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/65f9c2280d311d61dc562eddd7f2df4b.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/65f9c2280d311d61dc562eddd7f2df4b.png)'
- en: Image by author
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Background
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背景
- en: '**Problem understanding**'
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**问题理解**'
- en: 'Recently, I came across one of the great cases of using Raspberry Pi and Python
    for creating a computer vision-based system for object detection. In short, one
    guy created a device that keeps the neighbor''s chickens away from his property.
    After following the [Reddit thread](https://www.reddit.com/r/interestingasfuck/comments/y6cp1y/using_a_raspberry_pi_3b_python_opencv_and_machine),
    it became apparent that the problem is quite pervasive and not limited to certain
    bird species, if at all. The top rated comments include:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我看到一个非常棒的案例，展示了如何利用 Raspberry Pi 和 Python 创建一个基于计算机视觉的物体检测系统。简而言之，一位工程师制作了一个设备，可以把邻居家的鸡赶离他的土地。在跟随
    [Reddit 线程](https://www.reddit.com/r/interestingasfuck/comments/y6cp1y/using_a_raspberry_pi_3b_python_opencv_and_machine)之后，很明显这个问题非常普遍，并不限于某些鸟类。如果有的话，它更像是一个普遍现象。最受欢迎的评论包括：
- en: “I need one of these for the ducks my neighbor feeds and then they sh*t all
    over my lawn.” *— Light_Beard*
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “我需要这个来对付邻居喂养的鸭子，它们总是在我草坪上拉屎。” *— Light_Beard*
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “I need this for cats in my yard at night.” *— Buddha_*
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “我晚上需要这个设备来赶走院子里的猫。” *— Buddha_*
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “Does it work on kids on Halloween? Asking for a friend.” *— HardPawns*
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “这个可以用来吓跑万圣节时的孩子们吗？替朋友问的。” *— HardPawns*
- en: Well, one might argue that the problem is not that important and quite legitimately
    suggest simply asking the neighbors to sort out those hens. However, this is clearly
    not an engineer’s way to tackle this. Suppose you had already built an AI-assisted
    bird detection system equipped with a water blaster to chase unwelcome hens away
    from the yard. The caveat is that its operating version does not perform as well
    as expected, resulting in still noticeable water usage for sprinkling and lawn
    cleanup. Hence, chickens run and water bills remain lofty. How to address the
    challenge?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，有人可能会争辩说这个问题并不那么重要，并且很有道理地建议直接问邻居解决这些鸡的问题。然而，这显然不是一个工程师应有的解决方式。假设你已经建立了一个
    AI 辅助的鸟类检测系统，并配备了一个喷水器来把不受欢迎的鸡赶出院子。问题是，现有版本的操作效果不如预期，导致依然会明显浪费水资源用于浇洒和草坪清理。因此，鸡继续跑动，水费依旧居高不下。如何解决这个挑战呢？
- en: Model-based engineering for complex systems
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于模型的复杂系统工程
- en: Here, we are about to tackle this real-world problem by designing a computational
    model to simulate the complete chicken-on-the-lawn cycle and later optimize its
    parameters so that we can reduce water consumption. To do so, we will employ different
    techniques, including those from automata theory and randomized algorithms.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将通过设计一个计算模型来模拟完整的“鸡在草地上”循环，并随后优化其参数，以减少水的消耗。为此，我们将采用包括自动机理论和随机算法在内的多种技术。
- en: In particular, this article focuses on modelling and simulation aspects so that
    you learn how to describe behavior of a real system and design a finite state
    machine reflecting its dynamics. Then, you will explore the path of implementing
    such systems in Python and discover ways to leverage computer vision-based models
    by optimizing its performance on object detection. This should be fun!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本文特别关注建模和仿真方面，以便你学习如何描述一个真实系统的行为，并设计一个反映其动态的有限状态机。然后，你将探索如何在Python中实现这些系统，并通过优化其在物体检测上的表现，发现如何利用基于计算机视觉的模型。这应该很有趣！
- en: '***Disclaimer:*** *This work is a part of the “*[*Bird by Bird using Deep Learning*](/bird-by-bird-using-deep-learning-4c0fa81365d7)*”
    series and is devoted to modelling and simulation of real-life systems for computer
    vision applications using finite automata. All actors, states, events and outputs
    are the products of the FSM design process for educational purposes only. Any
    resemblance to actual persons, birds, or real events is purely coincidental.*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '***免责声明：*** *本工作是“*[*鸟语鸟](/bird-by-bird-using-deep-learning-4c0fa81365d7)*”系列的一部分，致力于使用有限自动机对计算机视觉应用中的真实系统进行建模和仿真。所有的参与者、状态、事件和输出仅是FSM设计过程中的产物，出于教育目的。任何与实际人物、鸟类或真实事件的相似之处纯属巧合。*'
- en: Introducing the related work
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍相关工作
- en: Finite state machines for modelling and simulation
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于建模和仿真的有限状态机
- en: Finite-state machine (FSM) or finite automaton is a mathematical model that
    can be used to represent and analyse dynamic behavior of a system by describing
    it through discrete states, transitions between those states, and a set of rules
    triggering these transitions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 有限状态机（FSM）或有限自动机是一种数学模型，可以通过描述离散状态、状态之间的转换以及触发这些转换的规则集来表示和分析系统的动态行为。
- en: The history of FSM traces back to the mid-20th century, marked by pivotal milestones
    in automata theory and the theory of computation. Early contributions by luminaries
    such as Alan Turing and John von Neumann laid the foundation, but it was in the
    1950s and 1960s that FSM took a significant leap forward. Notably, Edward F. Moore
    and George H. Mealy independently introduced two primary types of FSMs, Moore
    and Mealy machines, respectively.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有限状态机的历史可以追溯到20世纪中期，这一时期标志着自动机理论和计算理论的重要里程碑。艾伦·图灵（Alan Turing）和约翰·冯·诺依曼（John
    von Neumann）等先驱的早期贡献奠定了基础，但在1950年代和1960年代，FSM取得了显著进展。特别是，爱德华·F·摩尔（Edward F. Moore）和乔治·H·米利（George
    H. Mealy）分别独立地提出了两种主要类型的FSM——摩尔机和米利机。
- en: 'These FSM types differ in their approach: Moore machines determine next states
    based solely on the current state, while the Mealy ones associate outputs with
    the current state and input, offering enhanced adaptability. Originally used in
    digital circuits, FSMs, in particular Mealy machines, with their responsiveness
    to external input signals, have become widespread in the design of complex systems
    that accompany our daily lives.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种FSM类型在方法上有所不同：摩尔机仅基于当前状态来确定下一个状态，而米利机则将输出与当前状态和输入关联，提供更强的适应性。最初用于数字电路中，特别是米利机由于其对外部输入信号的响应，已经在设计复杂系统中得到广泛应用，这些系统伴随着我们的日常生活。
- en: FSMs are found in both hardware and software applications. Look around — almost
    all electronic and computing devices have some sort of finite automata — from
    vending machines to CPUs, from basic electronic devices to programmable logical
    controllers for smart home automation. They are also taken in software and game
    development and, of course, can be used to create adaptive AI-assisted systems
    for real-time object detection.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有限状态机（FSM）广泛应用于硬件和软件中。四处看看——几乎所有电子和计算设备都有某种形式的有限自动机——从自动售货机到中央处理单元（CPU），从基本的电子设备到智能家居自动化的可编程逻辑控制器。它们也被广泛应用于软件和游戏开发中，当然，也可以用于创建实时物体检测的自适应AI辅助系统。
- en: Discrete math strikes back
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 离散数学的回归
- en: 'At its core, a deterministic finite automaton includes states, inputs, and
    a transition function. States represent distinct conditions of the system, while
    inputs trigger switches between states. The transition function defines rules
    of how the machine transitions between states. Mathematically, such state machine
    can be represented using a 5-tuple, denoted as M=(Q, Σ, δ, q₀, F), where:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，确定性有限自动机包括状态、输入和转移函数。状态表示系统的不同条件，而输入触发状态之间的切换。转移函数定义了机器如何在状态之间转换的规则。从数学角度看，这样的状态机可以用一个五元组表示，记作
    M=(Q, Σ, δ, q₀, F)，其中：
- en: Q is a set of states representing distinct configurations of the system.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Q 是一个表示系统不同配置的状态集合。
- en: Σ is a set of inputs consisting of events that trigger state changes.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Σ 是一个由触发状态变化的事件组成的输入集合。
- en: Transition function δ governs how the system switches between states given an
    input (δ:Q×Σ→Q).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转移函数 δ 决定了系统在给定输入的情况下如何在状态之间切换（δ:Q×Σ→Q）。
- en: Initial State q₀ is a starting state of the system to be initialized with, where
    q₀∈Q.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始状态 q₀ 是系统初始化时的起始状态，其中 q₀∈Q。
- en: F is a subset of Q (F⊆Q) consisting of final states.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: F 是 Q 的子集（F⊆Q），由最终状态组成。
- en: This way, for any given state and specific input symbol, there is a unique next
    state determined by the transition function δ, which is typically represented
    by a state transition table or diagram, specifying transitions given a combination
    of the current state and inputs.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，对于任何给定的状态和特定的输入符号，转移函数 δ 将确定一个唯一的下一个状态，通常通过状态转换表或图来表示，指定当前状态和输入的组合下的状态转移。
- en: FSM design process
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FSM 设计过程
- en: 'The design process of an FSM involves identifying the states (and inputs if
    applicable), defining the transition function, as well as specifying the initial
    and final states. The following methodology can be employed for translating complex
    systems into comprehensible models, aiding in the further analysis, design, and
    implementation phases. A 5-step FSM design process includes:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有限状态机（FSM）的设计过程包括识别状态（以及在适用的情况下识别输入）、定义转移函数，并指定初始状态和最终状态。可以采用以下方法论将复杂系统转化为易于理解的模型，从而有助于后续的分析、设计和实施阶段。5
    步 FSM 设计过程包括：
- en: Understanding the problem, analyse the structure of the system.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 理解问题，分析系统的结构。
- en: Defining key components for a conceptual model to be designed.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为设计一个概念模型定义关键组件。
- en: Creating a state diagram or defining a state-transition table.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建状态图或定义状态转换表。
- en: Implementing the machine’s states, inputs and outputs, transition logic.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现机器的状态、输入和输出，以及转移逻辑。
- en: Testing and experimentally validating the FSM.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试并通过实验验证 FSM。
- en: This iterative process allows to design a concise representation of the real
    system’s behavior, allowing for approximations and refinements along the process.
    For instance, after implementing an FSM (Step 4), you may want to further verify
    and update the specifications (Steps 2–3), same applies to moving from the experimentation
    (Step 5) back to the problem definition (Step 1), in order to create a working
    model that is sufficiently detailed and useful to solve a particular problem.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这个迭代过程使得我们能够设计出简洁的真实系统行为的表示，允许在过程中进行近似和细化。例如，在实现 FSM（第 4 步）后，你可能希望进一步验证并更新规格（第
    2 步和第 3 步），同样也适用于从实验阶段（第 5 步）回到问题定义阶段（第 1 步），以创建一个足够详细且有用的工作模型来解决特定问题。
- en: '**State machine example**'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**状态机示例**'
- en: 'Let us take a simple case of the chicken-on-the-lawn scenario, where a bird
    can either be present on the lawn or not**,** as a function of external stimuli
    initiated by the engineer, who, in turn, can either rest or chase away unwelcome
    guests trespassing on his property. Thus, the controlling object (the engineer)
    is intended to compensate for the uncertainty of the independent actors (chickens)
    parameters. In the given example, the set of final states F includes only one
    state in which the system terminates, say at the end of the day when there are
    no chickens around. In this way:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个简单的“鸡在草地”场景为例，其中一只鸟可以出现在草地上，也可以不在草地上**，**这取决于由工程师发起的外部刺激，工程师可以选择休息或赶走侵入其财产的“不速之客”。因此，控制对象（工程师）旨在补偿独立行为者（鸡）参数的不确定性。在这个例子中，最终状态集合
    F 只包含一个系统终止的状态，例如在一天结束时没有鸡在周围。这样：
- en: 'Q = {q₀, q₁, q₂, ⊙}: Set of states representing No-/Chicken.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Q = {q₀, q₁, q₂, ⊙}: 表示没有鸡/有鸡的状态集合。'
- en: 'Σ = {α₀, α₁, α₂}: Set of input events — Engineer Rest/Chase, and Sunset.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Σ = {α₀, α₁, α₂}: 输入事件集合 — 工程师休息/追赶，以及日落。'
- en: F = {⊙} contains the final state representing the end of the day.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: F = {⊙} 包含表示一天结束的最终状态。
- en: Figure 1 provides a state transition diagram consisting of nodes (states) connected
    by edges (next-state transitions), with the labels above the arcs specifying input
    events triggering the transitions.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图1提供了一个状态转换图，其中的节点（状态）通过边（下一状态转换）连接，弧线上的标签指定触发转换的输入事件。
- en: '![](../Images/861d1c785be90e2d1738c5a1c37d5e32.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/861d1c785be90e2d1738c5a1c37d5e32.png)'
- en: Figure 1\. Graphical representation of a simple state machine (Image by author)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图1. 简单状态机的图形表示（图片来源：作者）
- en: This representation captures the binary nature of the problem, in which a chicken
    can either be present or not on the lawn. The system responds to the events triggered
    by the engineer or the sunset. In the diagram, the initial and final states are
    indicated by circles. The transition function δ for this FSM can also be written
    in a tabular form, showing state transitions and control actions for the system,
    as shown in Table 1.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种表示法捕捉了问题的二元性质，其中鸡可以出现在草坪上，也可以不在草坪上。系统响应由工程师或日落触发的事件。在图中，初始状态和最终状态由圆圈表示。该有限状态机（FSM）的转移函数δ也可以以表格形式表示，展示系统的状态转换和控制操作，如表1所示。
- en: '[PRE0]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Thus, by completing five straightforward steps we designed a simple state machine.
    Now that everything has been explained, let’s finally create an FSM-based model
    representing our challenge with birds on the lawn.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过完成五个简单步骤，我们设计了一个简单的状态机。现在，一切都已经解释清楚，最后让我们创建一个基于FSM的模型，来表示我们在草坪上与鸟类的挑战。
- en: On dealing with the birds-on-the-lawn challenge
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理草坪上的鸟类挑战
- en: What they do on the lawn
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它们在草坪上的活动
- en: As you have learnt in the previous section, finite automata can be used to model
    almost any process. Imagine you have some chickens hopping around in your backyard
    this afternoon. What are they doing? Just observe. They’re always moving, singing,
    or interacting. They’re often flying, probing, or eating. On some occasions, they’re
    displaying, or doing something that draws our attention, like those neighbor's
    chickens messing up with the grass, but let’s set those particulars aside for
    now. Well, eventually, all the birds are s***ing (nothing personal, feathery ones).
    For the FSM design, we won’t get into the finer details, instead distilling essential
    components with logic for our simulation. Let the FSM take water adventures to
    the next level of play!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在上一节中学到的，有限自动机可以用来模拟几乎任何过程。想象一下，今天下午你家后院有一些鸡在跳来跳去。它们在做什么？只要观察一下就知道。它们总是在动，唱歌，或互动。它们经常飞翔、探测或觅食。有时，它们会展示或做一些引起我们注意的事，比如那些邻居家的鸡把草弄得一团糟，但我们现在先把这些细节放一边。好吧，最终，所有的鸟都在拉屎（没有冒犯，羽毛朋友们）。对于FSM设计，我们不会涉及更细致的部分，而是通过逻辑提取出模拟所需的基本组件。让FSM将水的冒险提升到下一个玩法的高度！
- en: System description
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统描述
- en: Concerning the chickens, here, we are going to describe the system to reflect
    our down-to-earth scenario in order to optimize parameters of the object detection
    system and reduce water costs for lawn cleaning. For the reference, take another
    look at the previous FSM example. This simple machine differs from the real-life
    system in some particular aspects. First, we want to actualize the controlling
    object to include an AI-based device aimed at detecting and repelling birds, this
    time by means of a high-pressure water sprinkler gun (so the engineer can “self-loop”
    into the rest state).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 关于鸡的部分，在这里，我们将描述系统，以反映我们的实际场景，目的是优化物体检测系统的参数并减少草坪清洁的水费。为了参考，可以再看看之前的FSM示例。这个简单的机器与现实生活中的系统在一些特定方面有所不同。首先，我们希望将控制对象实际化，包含一个基于人工智能的设备，用于检测和驱赶鸟类，这次通过高压喷洒枪实现（这样工程师就可以“自循环”回到休息状态）。
- en: Second, we will need to update and/or extend the set of possible states, events,
    and transitions reflecting complexity of the updated system’s setup. For the latter,
    why don’t we consider additional bird categories that can be recognized by a computer
    vision model (e.g., turkeys) thus being potential independent actors for our FSM.
    Moreover, assuming that bird size varies across species, an irrigation control
    system would need a more intense water flow and/or pressure to successfully chase
    a bulky turkey off the lawn than it would for a chicken. Hereafter, for brevity’s
    sake, we will refer to the chicken-and-turkey-on-the-lawn problem as the CaT problem.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，我们需要更新和/或扩展可能的状态、事件和转换集合，以反映更新系统设置的复杂性。对于后者，我们为何不考虑可以被计算机视觉模型识别的额外鸟类类别（例如火鸡），使它们成为我们FSM的潜在独立参与者。此外，假设鸟类的体型在物种间有所不同，灌溉控制系统需要更强的水流和/或压力，才能成功地将体型较大的火鸡赶离草坪，而不像对待鸡那样简单。因此，为了简洁起见，我们将鸡与火鸡在草坪上的问题简称为CaT问题。
- en: Conceptual modelling
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概念建模
- en: In order to model scenarios where the object detection system has to monitor,
    classify, and interact with objects trespassing on the property, we will define
    states, events, and transitions that represent the different aspects of this situation.
    Our goal is to capture the various states the object detection system and chickens
    can be in, as well as the events that trigger state transitions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了建模对象检测系统需要监视、分类并与闯入物业的物体互动的场景，我们将定义状态、事件和转换，表示这一情况的不同方面。我们的目标是捕捉对象检测系统和鸡可能处于的各种状态，以及触发状态转换的事件。
- en: For the logic design scenarios, consider that at any given moment a bird can
    enter the yard, mess up with the lawn (or not), and leave the property either
    for its own or if it was successfully detected and chased away by the AI-based
    lawn security system. Now, let’s define some main components of the FSM simulation.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 对于逻辑设计场景，考虑到在任何时刻，一只鸟可以进入院子，弄乱草坪（或不弄乱），并且离开物业，不论是它自己离开，还是被基于AI的草坪安保系统成功检测并赶走。现在，让我们定义一些FSM仿真模拟的主要组成部分。
- en: '**States** represent possible conditions reflecting the CaT scenarios:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**状态**表示反映CaT场景的可能条件：'
- en: 'For hopping targets: Spawn and Intrusion statuses, Attacking and its result,
    Leaving the lawn.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于跳跃的目标：生成和入侵状态、攻击及其结果、离开草坪。
- en: 'For the AI system: Detection State, Sprinkling State.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于AI系统：检测状态、喷洒状态。
- en: Initial state “Start” relates to the entry point of the simulation.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始状态“开始”与仿真模拟的入口点相关。
- en: Final state “End” denotes the termination point of the simulation.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终止状态“结束”表示仿真模拟的终点。
- en: '**Transitions** govern how the system switches between states based on inputs.
    For instance, the AI model may overlook a bird and miss the sprinkling process,
    thus, resulting in a number of consequences for the lawn. Here are some other
    scenarios and conditions we can anticipate:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**状态转换**决定了系统如何根据输入在不同状态之间切换。例如，AI模型可能忽略一只鸟并错过喷洒过程，从而导致草坪上的一系列后果。以下是我们可以预见的一些其他场景和条件：'
- en: From “Intrusion” to “Target Detected” on the “Detection” event.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从“入侵”到“目标检测”在“检测”事件上转换。
- en: From “Target Detected” to “Bird Leaves” events through the sequence of “Sprinkling”
    and “Hit” events after an intruded bird has been detected and hit by the water
    sprinkler successfully.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从“目标检测”到“鸟离开”事件，通过“喷洒”和“击中”事件的序列，在闯入的鸟被检测到并成功被水喷头击中后。
- en: From “Bird Present” to “Attack”, in case the system has failed at target detection
    and prediction steps, while the bird was actually on the lawn. The same event
    shall take place under the conditions that the bird-intruder was detected, but
    the shot was missed by the system.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从“鸟出现”到“攻击”，如果系统在目标检测和预测步骤中失败，而鸟实际上就在草坪上。在鸟被检测到但系统未能成功击中时，也会发生相同的事件。
- en: 'This way, the FSM will dynamically progress from one state to another as the
    AI system interacts with the chickens hopping around. To make task easier and
    less error-prone, we create a combined state transition and conditions table:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，有限状态机（FSM）将在AI系统与四处跳跃的鸡互动时动态地从一个状态转移到另一个状态。为了简化任务并减少出错的可能性，我们创建了一个结合状态转换和条件的表格：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**State transition tables**'
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**状态转换表**'
- en: Now, after identifying states and events, we’ll write a combined state transition
    table with Boolean expressions for the next states. In table 3, we see how the
    inputs described in Table 2 steer the transitions between the simulation states.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在识别了状态和事件后，我们将编写一个结合状态转换表，并使用布尔表达式表示下一个状态。在表3中，我们可以看到表2中描述的输入如何引导模拟状态之间的转换。
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In most cases, a single input determines the next state. However, we have to
    consider a number of conditions simultaneously for switching from “Spawn” or “Sprinkling”.
    You could also notice that for some states, transitions don’t depend on the external
    information, like for “Start” or “Hit”. These states are either special (as “Start”)
    or trigger auxiliary actions. The latter don’t have a direct influence on the
    story we simulate (i.e. in that regard, they can be combined with the subsequent
    states) but are important for gathering simulation statistics.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，一个输入决定了下一个状态。然而，我们需要同时考虑多个条件来切换“生成”或“喷洒”状态。你也可以注意到，对于某些状态，转换不依赖外部信息，例如“开始”或“击中”。这些状态要么是特殊的（如“开始”），要么是触发辅助动作的状态。后者对我们模拟的故事没有直接影响（即在这方面，它们可以与后续状态结合使用），但对于收集模拟统计数据非常重要。
- en: Finally, let’s look at its visual representation. Figure 3 presents the state
    transition graph corresponding to the CaT system going through during its lifetime.
    You can probably see the connection already. Moving forward with the following
    article, you will learn how to implement this FSM in Python and how to use it
    to optimize parameters of the AI-assisted bird detection system in order to reduce
    water cost.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看一下它的可视化表示。图3展示了对应于CaT系统生命周期内状态转换的图。你或许已经能看到它们之间的联系了。接下来的文章中，你将学习如何在Python中实现这个FSM，以及如何利用它来优化AI辅助鸟类检测系统的参数，以减少水费开销。
- en: '![](../Images/b071e91a376618f936236d801ee80b13.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b071e91a376618f936236d801ee80b13.png)'
- en: Figure 2\. State transition graph for an FSM representing the AI-assisted lawn
    security system (Image by author)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图2. 表示AI辅助草坪安全系统的FSM状态转换图（图片来自作者）
- en: Conclusions
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we explored how to apply finite state machines in practice
    to build a model for addressing the CaT problem, allowing for high-level problem
    analysis and solution design.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们探讨了如何在实践中应用有限状态机（FSM），构建一个模型来解决CaT问题，从而实现高层次的问题分析和解决方案设计。
- en: We have described complex yard processes by applying the FSM formalism to individual
    actors and the interactions between them, thereby creating a holistic view of
    the internal dynamics of the real-world situation, in which we had to deal with
    neighborhood birds trespassing on the property.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将FSM形式化应用于个体参与者及其相互作用，描述了复杂的庭院过程，从而创造了一个全面的视角，展示了我们必须处理的现实世界情况，其中我们不得不应对邻里鸟类闯入我们的领地。
- en: This allowed us to create a simulation that reflects, among other things, the
    operation of the AI-assisted security system equipped with a water pressure controller
    for sprinkling and aimed at object detection and chasing away unwelcome guests
    spoiling the lawn.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够创建一个模拟，反映了AI辅助安全系统的运作，系统配备了喷洒用的水压控制器，旨在进行物体检测并驱赶破坏草坪的不速之客。
- en: What’s next?
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: In the upcoming series of articles, we will further investigate the topic of
    simulation of real-life scenarios using FSMs and its practical applications for
    addressing a non-analytic optimization problem of water cost reduction.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的系列文章中，我们将进一步研究使用FSM模拟现实场景的主题，以及它在解决水费优化问题中的实际应用。
- en: Specifically, the next article will feature a Python tutorial from which you
    will learn how to implement an FSM-driven simulation from scratch as well as how
    to employ it as a part of a stochastic optimization pipeline. Based on the simulation
    created, we then examine how to leverage it for improving the resource efficiency
    of our lawn security system by applying Monte-Carlo and eXplainable AI (XAI) techniques
    to optimize performance of a computer vision-based subsystem for bird detection.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，下一篇文章将包括一个Python教程，教你如何从头开始实现一个FSM驱动的模拟，并将其作为随机优化流程的一部分来使用。基于创建的模拟，我们接下来将探讨如何利用它，通过应用蒙特卡洛和可解释AI（XAI）技术，优化基于计算机视觉的鸟类检测子系统的性能，从而提高我们草坪安全系统的资源效率。
- en: Interested to keep it on? Stay updated on more materials at — [https://github.com/slipnitskaya/computer-vision-birds](https://github.com/slipnitskaya/computer-vision-birds)
    and [https://medium.com/@slipnitskaya](https://medium.com/@slipnitskaya).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 想继续了解更多内容吗？在以下链接保持更新 — [https://github.com/slipnitskaya/computer-vision-birds](https://github.com/slipnitskaya/computer-vision-birds)
    和 [https://medium.com/@slipnitskaya](https://medium.com/@slipnitskaya)。
- en: References
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Moore, Edward F. “Gedanken-experiments on sequential machines.” Automata studies
    34 (1956): 129–153.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Moore, Edward F. “关于顺序机器的思想实验。”《自动机研究》34 (1956): 129–153。'
- en: 'Mealy, George H. “A method for synthesizing sequential circuits.” The Bell
    System Technical Journal 34.5 (1955): 1045–1079.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Mealy, George H. “一种合成顺序电路的方法。”《贝尔系统技术杂志》34.5 (1955): 1045–1079。'
- en: Sipser, M. “Introduction to the Theory of Computation.” 2nd ed., Thomson Course
    Technology (2006).
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Sipser, M. “计算理论导论。”第二版，Thomson Course Technology (2006)。
