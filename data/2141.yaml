- en: Diving Deeper with Structured Outputs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入探索结构化输出
- en: 原文：[https://towardsdatascience.com/diving-deeper-with-structured-outputs-b4a5d280c208?source=collection_archive---------1-----------------------#2024-09-03](https://towardsdatascience.com/diving-deeper-with-structured-outputs-b4a5d280c208?source=collection_archive---------1-----------------------#2024-09-03)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/diving-deeper-with-structured-outputs-b4a5d280c208?source=collection_archive---------1-----------------------#2024-09-03](https://towardsdatascience.com/diving-deeper-with-structured-outputs-b4a5d280c208?source=collection_archive---------1-----------------------#2024-09-03)
- en: Helping enhance your understanding and optimal usage of structured outputs and
    LLMs
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 帮助增强您对结构化输出和LLM的理解与最佳使用
- en: '[](https://medium.com/@armin.catovic?source=post_page---byline--b4a5d280c208--------------------------------)[![Armin
    Catovic](../Images/046042098f3fec885e756f7f8ee94e6a.png)](https://medium.com/@armin.catovic?source=post_page---byline--b4a5d280c208--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b4a5d280c208--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b4a5d280c208--------------------------------)
    [Armin Catovic](https://medium.com/@armin.catovic?source=post_page---byline--b4a5d280c208--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@armin.catovic?source=post_page---byline--b4a5d280c208--------------------------------)[![Armin
    Catovic](../Images/046042098f3fec885e756f7f8ee94e6a.png)](https://medium.com/@armin.catovic?source=post_page---byline--b4a5d280c208--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b4a5d280c208--------------------------------)[![数据科学前沿](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b4a5d280c208--------------------------------)
    [Armin Catovic](https://medium.com/@armin.catovic?source=post_page---byline--b4a5d280c208--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b4a5d280c208--------------------------------)
    ·8 min read·Sep 3, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[数据科学前沿](https://towardsdatascience.com/?source=post_page---byline--b4a5d280c208--------------------------------)
    ·阅读时长8分钟·2024年9月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/2d1b5f51320c152d86373c947974ac13.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2d1b5f51320c152d86373c947974ac13.png)'
- en: Figure 1 — steps that are executed both explicitly, as well as implicitly, from
    the user’s perspective, when applying structured outputs; image by the author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图1 — 从用户的角度，在应用结构化输出时，显式和隐式执行的步骤；图片来自作者
- en: In the [previous article](https://medium.com/towards-data-science/structured-outputs-and-how-to-use-them-40bd86881d39),
    we were introduced to **structured outputs** using OpenAI. Since the general availability
    release in ChatCompletions API ([v1.40.0](https://github.com/openai/openai-python/releases/tag/v1.40.0)),
    structured outputs have been applied across dozens of use cases, and spawned numerous
    threads on [OpenAI forums](https://community.openai.com/).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在[上一篇文章](https://medium.com/towards-data-science/structured-outputs-and-how-to-use-them-40bd86881d39)中，我们介绍了如何使用OpenAI的**结构化输出**。自从ChatCompletions
    API（[v1.40.0](https://github.com/openai/openai-python/releases/tag/v1.40.0)）的正式发布以来，结构化输出已被应用于数十种使用场景，并在[OpenAI论坛](https://community.openai.com/)中引发了大量讨论。
- en: In this article, our aim is to provide you with an even deeper understanding,
    dispel some misconceptions, and give you some tips on how to apply them in the
    most optimal manner possible, across different scenarios.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们的目标是为您提供更深入的理解，消除一些误解，并为您提供一些关于如何在不同场景中以最优化的方式应用它们的建议。
- en: Structured outputs overview
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结构化输出概述
- en: Structured outputs are a way of enforcing the output of an LLM to follow a pre-defined
    schema — usually a JSON schema. This works by transforming the schema into a [context
    free grammar (CFG)](https://en.wikipedia.org/wiki/Context-free_grammar), which
    during the token sampling step, is used together with the previously generated
    tokens, to inform which subsequent tokens are valid. It’s helpful to think of
    it as creating a [regex](https://en.wikipedia.org/wiki/Regular_expression) for
    token generation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化输出是一种强制LLM输出遵循预定义模式的方式——通常是JSON模式。这是通过将模式转换为[上下文无关文法 (CFG)](https://en.wikipedia.org/wiki/Context-free_grammar)，在标记采样步骤中与之前生成的标记一起使用，以确定哪些后续标记是有效的。可以将其理解为为标记生成创建一个[正则表达式](https://en.wikipedia.org/wiki/Regular_expression)。
- en: OpenAI API implementation actually tracks a limited subset of JSON schema features.
    With more general structured output solutions, such as [Outlines](https://github.com/outlines-dev/outlines),
    it is possible to use a somewhat larger subset of the JSON schema, and even define
    completely custom non-JSON schemas — as long as one has access to an open weight
    model. For the purpose of this article, we will assume the OpenAI API implementation.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAI API 实现实际上仅跟踪 JSON schema 特性的一个有限子集。对于更一般的结构化输出解决方案，比如 [Outlines](https://github.com/outlines-dev/outlines)，可以使用稍大一些的
    JSON schema 子集，甚至可以定义完全自定义的非 JSON schema —— 只要你能访问到开放权重模型。本文将假设使用 OpenAI API 实现。
- en: JSON Schema and Pydantic
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSON Schema 和 Pydantic
- en: According to [JSON Schema Core Specification](https://json-schema.org/draft/2020-12/json-schema-core),
    *“JSON Schema asserts what a JSON document must look like, ways to extract information
    from it, and how to interact with it”*. JSON schema defines six primitive types
    — null, boolean, object, array, number and string. It also defines certain keywords,
    annotations, and specific behaviours. For example, we can specify in our schema
    that we expect an `array` and add an annotation that `minItems` shall be `5` .
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 [JSON Schema 核心规范](https://json-schema.org/draft/2020-12/json-schema-core)，*“JSON
    Schema 确定了一个 JSON 文档必须是什么样子，如何从中提取信息，以及如何与之互动”*。JSON schema 定义了六种原始类型 —— null、boolean、object、array、number
    和 string。它还定义了一些关键字、注解和特定的行为。例如，我们可以在 schema 中指定我们期望的是一个 `array`，并添加一个注解，要求 `minItems`
    为 `5`。
- en: 'Pydantic is a Python library that implements the JSON schema specification.
    We use Pydantic to build robust and maintainable software in Python. Since Python
    is a dynamically typed language, data scientists do not necessarily think in terms
    of **variable types** — these are often **implied** in their code. For example,
    a fruit would be specified as:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Pydantic 是一个实现 JSON schema 规范的 Python 库。我们使用 Pydantic 在 Python 中构建稳健且可维护的软件。由于
    Python 是一种动态类型语言，数据科学家通常不会以 **变量类型** 为中心思考 —— 这些通常是 **隐含** 在他们的代码中的。例如，一个水果可能会被指定为：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '…while a function declaration that returns “fruit” from some piece of data
    would often be specified as:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: …而一个返回“水果”的函数声明，通常会被指定为：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Pydantic on the other hand allows us to generate a JSON-schema compliant class,
    with properly annotated variables and **type hints**, making our code more readable/maintainable
    and in general more robust, i.e.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Pydantic 允许我们生成一个符合 JSON schema 规范的类，具有正确注解的变量和 **类型提示**，使得我们的代码更具可读性/可维护性，并且通常更加稳健，即：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: OpenAI actually [strongly recommends](https://platform.openai.com/docs/guides/structured-outputs/avoid-json-schema-divergence)
    the use of Pydantic for specifying schemas, as opposed to specifying the “raw”
    JSON schema directly. There are several reasons for this. Firstly, Pydantic is
    guaranteed to adhere to the JSON schema specification, so it saves you extra pre-validation
    steps. Secondly, for larger schemas, it is less verbose, allowing you to write
    cleaner code, faster. Finally, the `openai` Python package actually does some
    housekeeping, like setting `additionalProperties` to `False` for you, whereas
    when defining your schema “by-hand” using JSON, you would need to [set these manually](https://platform.openai.com/docs/guides/structured-outputs/additionalproperties-false-must-always-be-set-in-objects),
    for every object in your schema (failing to do so results in a rather annoying
    API error).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAI 实际上 [强烈推荐](https://platform.openai.com/docs/guides/structured-outputs/avoid-json-schema-divergence)
    使用 Pydantic 来指定 schema，而不是直接指定“原始” JSON schema。这样做有几个原因。首先，Pydantic 保证遵循 JSON
    schema 规范，因此它可以为你省去额外的预验证步骤。其次，对于较大的 schema，它更加简洁，让你可以写出更清晰、更快速的代码。最后，`openai`
    Python 包实际上会做一些“家务工作”，比如帮你将 `additionalProperties` 设置为 `False`，而当你使用 JSON 手动定义
    schema 时，你需要为 schema 中的每个对象 [手动设置这些](https://platform.openai.com/docs/guides/structured-outputs/additionalproperties-false-must-always-be-set-in-objects)，如果不设置，将会导致相当烦人的
    API 错误。
- en: Limitations
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制
- en: As we alluded to previously, the ChatCompletions API provides a limited subset
    of the full JSON schema specification. There are numerous [keywords that are not
    yet supported](https://platform.openai.com/docs/guides/structured-outputs/some-type-specific-keywords-are-not-yet-supported),
    such as `minimum` and `maximum` for numbers, and `minItems` and `maxItems` for
    arrays — annotations that would be otherwise very useful in reducing hallucinations,
    or constraining the output size.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，ChatCompletions API提供了一个有限的完整JSON模式规范子集。有许多[当前不支持的关键字](https://platform.openai.com/docs/guides/structured-outputs/some-type-specific-keywords-are-not-yet-supported)，例如用于数字的`minimum`和`maximum`，以及用于数组的`minItems`和`maxItems`——这些注解本来会在减少幻觉或限制输出大小时非常有用。
- en: 'Certain formatting features are also unavailable. For example, the following
    Pydantic schema would result in API error when passed to `response_format` in
    ChatCompletions:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 某些格式化特性也不可用。例如，以下Pydantic模式在传递给ChatCompletions中的`response_format`时会导致API错误：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It would fail because `openai` package has no format handling for `datetime`
    , so instead you would need to set `date_published` as a `str` and perform format
    validation (e.g. ISO 8601 compliance) post-hoc.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它会失败，因为`openai`包没有处理`datetime`格式的功能，因此你需要将`date_published`设置为`str`类型，并在后期进行格式验证（例如，ISO
    8601合规性）。
- en: 'Other key limitations include the following:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 其他关键限制包括：
- en: '**Hallucinations are still possible** — for example, when extracting product
    IDs, you would define in your response schema the following: `product_ids: List[str]`
    ; while the output is guaranteed to produce a list of strings (product IDs), the
    strings themselves may be hallucinated, so in this use case, you may want to validate
    the output against some pre-defined set of product IDs.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仍然可能出现幻觉**——例如，在提取产品ID时，你需要在响应模式中定义以下内容：`product_ids: List[str]`；虽然输出保证会生成一个字符串列表（产品ID），但这些字符串本身可能是幻觉，因此在这种使用场景下，你可能需要将输出与一些预定义的产品ID集合进行验证。'
- en: '**The output is capped** at 16,384 tokens (**NOTE:** thanks Peter Edmonds for
    the correction!), or the lesser number you set within the `max_tokens` parameter
    — so even though the schema will be followed precisely, if the output is too large,
    it will be truncated and produce an invalid JSON — especially annoying on very
    large [Batch API](https://platform.openai.com/docs/guides/batch) jobs!'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输出有上限**，最多为16,384个令牌（**注意：**感谢Peter Edmonds的纠正！），或者你在`max_tokens`参数中设置的较小值——因此，尽管模式会被精确遵循，但如果输出过大，它将被截断并产生无效的JSON——在非常大的[批量API](https://platform.openai.com/docs/guides/batch)任务中尤其令人烦恼！'
- en: '**Deeply nested schemas with many object properties** may yield API errors
    — there is a [limitation on the depth and breadth](https://platform.openai.com/docs/guides/structured-outputs/objects-have-limitations-on-nesting-depth-and-size)
    of your schema, but in general it is best to stick to flat and simple structures—
    not just to avoid API errors but also to squeeze out as much performance from
    the LLMs as possible (LLMs in general have trouble attending to deeply nested
    structures).'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深度嵌套的模式及其多个对象属性**可能会导致API错误——你的模式有[深度和宽度的限制](https://platform.openai.com/docs/guides/structured-outputs/objects-have-limitations-on-nesting-depth-and-size)，但通常最好坚持使用扁平和简单的结构——不仅是为了避免API错误，还为了从LLM中尽可能地提取更多性能（通常LLM难以处理深度嵌套的结构）。'
- en: '**Highly dynamic or arbitrary schemas are not possible** — even though [recursion
    is supported](https://platform.openai.com/docs/guides/structured-outputs/recursive-schemas-are-supported),
    it is not possible to create a highly dynamic schema of let’s say, a list of arbitrary
    key-value objects, i.e. `[{"key1": "val1"}, {"key2": "val2"}, ..., {"keyN": "valN"}]`
    , since the “keys” in this case **must** be pre-defined; in such a scenario, the
    best option is not to use structured outputs at all, but instead opt for standard
    JSON mode, and provide the instructions on the output structure within the system
    prompt.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度动态或任意模式不可行**——尽管[支持递归](https://platform.openai.com/docs/guides/structured-outputs/recursive-schemas-are-supported)，但无法创建一个高度动态的模式，例如一组任意的键值对对象列表，即`[{"key1":
    "val1"}, {"key2": "val2"}, ..., {"keyN": "valN"}]`，因为在这种情况下，“键”**必须**是预定义的；在这种场景下，最佳选择是根本不使用结构化输出，而是选择标准的JSON模式，并在系统提示中提供输出结构的说明。'
- en: Tips and tricks
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技巧和窍门
- en: With all this in mind, we can now go through a couple of use cases with tips
    and tricks on how to enhance the performance when using structured outputs.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一切，我们现在可以通过几个使用案例来探讨如何在使用结构化输出时提升性能的技巧和窍门。
- en: Creating flexibility using optional parameters
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用可选参数创建灵活性
- en: 'Let’s say we are building a web scraping application where our goal is to collect
    specific components from the web pages. For each web page, we supply the raw HTML
    in the user prompt, give specific scraping instructions in the system prompt,
    and define the following Pydantic model:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在构建一个网页抓取应用程序，目标是从网页中收集特定组件。对于每个网页，我们在用户提示中提供原始 HTML，在系统提示中给出具体的抓取指令，并定义以下
    Pydantic 模型：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We would then call the API as follows…
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们会按如下方式调用 API……
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '…with the following response:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: …以及以下响应：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Response schema supplied to the API using structured outputs **must** return
    all the specified fields. However, we can “emulate” optional fields and add more
    flexibility using the `Optional` type annotation. We could actually also use `Union[List[str],
    None]` — they are syntactically exactly the same. In both cases, we get a conversion
    to `anyOf` keyword as per the JSON schema spec. In the example above, since there
    are no `<a></a>` tags present on the web page, the API still returns the `links`
    field, but it is set to `None` .
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 提供给 API 的响应架构使用结构化输出时，**必须**返回所有指定的字段。然而，我们可以通过使用`Optional`类型注解来“模拟”可选字段，并增加更多的灵活性。我们实际上还可以使用`Union[List[str],
    None]`——它们在语法上是完全相同的。在这两种情况下，按照 JSON 架构规范，我们都会得到转换为`anyOf`关键字。在上面的示例中，由于网页上没有`<a></a>`标签，API仍然返回了`links`字段，但它被设置为`None`。
- en: Reducing hallucinations using enums and a two-phased approach
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用枚举和两阶段方法减少虚构内容
- en: We mentioned previously that even if the LLM is guaranteed to follow the provided
    response schema, it may still hallucinate the actual values. Adding to this, a
    [recent paper](https://arxiv.org/pdf/2408.02442v1) found that enforcing a fixed
    schema on the outputs, actually causes the LLM to hallucinate, or degrade in terms
    of its reasoning capabilities (interestingly enough, classification performance
    improves 🤔).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到过，即使 LLM 被保证遵循提供的响应架构，它仍然可能会虚构实际的值。对此，最近的一篇[论文](https://arxiv.org/pdf/2408.02442v1)发现，强制对输出施加固定架构，实际上会导致
    LLM 出现虚构内容或在推理能力方面退化（有趣的是，分类性能却有所提高 🤔）。
- en: One way to overcome these limitations, is to try and utilize enums as much as
    possible. Enums constrain the output to a very specific set of tokens, placing
    a probability of zero on everything else. For example, let’s assume you are trying
    to re-rank product similarity results between a **target product** that contains
    a `description` and a unique `product_id` , and **top-5 products** that were obtained
    using some vector similarity search (e.g. using a cosine distance metric). Each
    one of those top-5 products also contain the corresponding textual description
    and a unique ID. In your response you simply wish to obtain the re-ranking 1–5
    as a list (e.g. `[1, 4, 3, 5, 2]` ), instead of getting a list of re-ranked product
    ID strings, which may be hallucinated or invalid. We setup our Pydantic model
    as follows…
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 克服这些限制的一种方法是尽可能多地利用枚举类型（enums）。枚举将输出限制为非常特定的一组标记，对其他任何东西的概率设为零。例如，假设你正在尝试对一个**目标产品**（包含`description`和唯一的`product_id`）与通过某种向量相似性搜索（例如使用余弦距离度量）获得的**前五名产品**之间的产品相似度进行重新排序。每一个前五名产品也包含相应的文本描述和唯一的
    ID。在你的响应中，你只希望获取重新排序后的 1-5 列表（例如`[1, 4, 3, 5, 2]`），而不是获取可能是虚构或无效的重新排序的产品 ID 字符串。我们将我们的
    Pydantic 模型设置如下……
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '…and run the API like so:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: …并像这样运行 API：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The final result is simply:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果就是：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: So the LLM ranked the Sony LED TV (i.e. item number “3” in the list), and the
    BenQ PC Monitor (i.e. item number “5”), as the two most similar product candidates,
    i.e. the first two elements of the `ordered_ranking` list!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所以 LLM 排名了 Sony LED TV（即列表中的第“3”项）和 BenQ PC 显示器（即列表中的第“5”项），作为最相似的两个产品候选，即`ordered_ranking`列表中的前两个元素！
- en: In theory, enums should completely eliminate hallucinations across those specific
    fields, since only the tokens specified in the enum set will pass through the
    token mask, i.e. all other tokens will have a probability of zero. However, users
    have also [reported seeing hallucinations even across enums](https://community.openai.com/t/structured-outputs-deep-dive/930169/18),
    particularly on the “mini” models.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，枚举应该完全消除这些特定字段中的虚构内容，因为只有枚举集中的标记会通过标记掩码，即所有其他标记的概率为零。然而，用户也[报告过即使在枚举中也会看到虚构内容](https://community.openai.com/t/structured-outputs-deep-dive/930169/18)，特别是在“迷你”模型中。
- en: 'So another approach is a **two-phased approach**, which is in line with the
    findings of the [aforementioned paper](https://arxiv.org/pdf/2408.02442v1):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是**两阶段方法**，这与[前述论文](https://arxiv.org/pdf/2408.02442v1)的研究结果一致：
- en: Send a reasoning/extraction task to the mini model **without** enforcing structure,
    i.e. the response will be a flat string.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向迷你模型发送推理/提取任务**不**强制执行结构，即响应将是一个简单的字符串。
- en: Create a 2nd request to the mini model, this time sending the output of the
    previous step, together with the response schema
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建第二个请求发送给迷你模型，这次发送上一步的输出以及响应模式
- en: Using this approach we separate out the task into a reasoning step, and a structuring
    step.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方法，我们将任务分为推理步骤和结构化步骤。
- en: Conclusion
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'In this article we gave a thorough deep-dive into structured outputs. We introduced
    the JSON schema and Pydantic models, and connected these to OpenAI’s ChatCompletions
    API. We walked through a number of examples and showcased some optimal ways of
    resolving those using structured outputs. To summarize some key takeaways:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们深入探讨了结构化输出。我们介绍了JSON模式和Pydantic模型，并将它们与OpenAI的ChatCompletions API连接。我们通过多个示例展示了如何使用结构化输出解决这些问题。总结一些关键要点：
- en: Structured outputs as supported by OpenAI API, and other 3rd party frameworks,
    implement only a **subset of the JSON schema specification** — getting better
    informed in terms of its features and limitations will help you make the right
    design decisions.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenAI API及其他第三方框架所支持的结构化输出，仅实现**JSON模式规范的子集**——了解其特性和局限性将帮助你做出正确的设计决策。
- en: Using **Pydantic** or similar frameworks that track JSON schema specification
    faithfully, is highly recommended, as it allows you to create valid and cleaner
    code.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强烈推荐使用**Pydantic**或类似的框架，这些框架能够忠实地跟踪JSON模式规范，因为它们使你能够创建有效且更清晰的代码。
- en: Whilst hallucinations are still expected, there are different ways of mitigating
    those, either by a choice of response schema design; for example, by **utilizing
    enums** where appropriate; or by creating a **two-phased approach** where we send
    two API requests — one for reasoning, and the 2nd one simply for output re-structuring.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管仍然会出现幻觉问题，但有多种方法可以缓解这些问题，方法之一是选择响应模式设计；例如，在适当的地方**使用枚举类型**；或者采用**两阶段方法**，即我们发送两个API请求——一个用于推理，第二个仅用于输出重构。
- en: About the Author
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于作者
- en: '[**Armin Catovic**](https://medium.com/@armin.catovic) is a Secretary of the
    Board at [Stockholm AI](https://www.stockholm.ai/), and a Vice President and a
    Senior ML/AI Engineer at the [EQT Group](https://eqtgroup.com/), with 18 years
    of engineering experience across Australia, South-East Asia, Europe and the US,
    and a number of patents and top-tier peer-reviewed AI publications.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[**Armin Catovic**](https://medium.com/@armin.catovic)是[斯德哥尔摩AI](https://www.stockholm.ai/)的董事会秘书，同时也是[EQT集团](https://eqtgroup.com/)的副总裁和高级ML/AI工程师，拥有18年的工程经验，工作遍及澳大利亚、东南亚、欧洲和美国，并拥有多项专利和顶级同行评审的AI出版物。'
