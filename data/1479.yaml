- en: A Python Engineer’s Introduction to 3D Gaussian Splatting (Part 2)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python工程师的3D高斯点洒射入门（第二部分）
- en: 原文：[https://towardsdatascience.com/a-python-engineers-introduction-to-3d-gaussian-splatting-part-2-7e45b270c1df?source=collection_archive---------1-----------------------#2024-06-13](https://towardsdatascience.com/a-python-engineers-introduction-to-3d-gaussian-splatting-part-2-7e45b270c1df?source=collection_archive---------1-----------------------#2024-06-13)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-python-engineers-introduction-to-3d-gaussian-splatting-part-2-7e45b270c1df?source=collection_archive---------1-----------------------#2024-06-13](https://towardsdatascience.com/a-python-engineers-introduction-to-3d-gaussian-splatting-part-2-7e45b270c1df?source=collection_archive---------1-----------------------#2024-06-13)
- en: Understanding and coding how Gaussians are used within 3D Gaussian Splatting
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解并编码高斯在3D高斯点洒射中的应用
- en: '[](https://medium.com/@dcaustin33?source=post_page---byline--7e45b270c1df--------------------------------)[![Derek
    Austin](../Images/1bcc5955f32cb798988af5713baae212.png)](https://medium.com/@dcaustin33?source=post_page---byline--7e45b270c1df--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--7e45b270c1df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--7e45b270c1df--------------------------------)
    [Derek Austin](https://medium.com/@dcaustin33?source=post_page---byline--7e45b270c1df--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@dcaustin33?source=post_page---byline--7e45b270c1df--------------------------------)[![Derek
    Austin](../Images/1bcc5955f32cb798988af5713baae212.png)](https://medium.com/@dcaustin33?source=post_page---byline--7e45b270c1df--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--7e45b270c1df--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--7e45b270c1df--------------------------------)
    [Derek Austin](https://medium.com/@dcaustin33?source=post_page---byline--7e45b270c1df--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--7e45b270c1df--------------------------------)
    ·8 min read·Jun 13, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--7e45b270c1df--------------------------------)
    ·8分钟阅读·2024年6月13日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '--  '
- en: Now on to gaussians! Everyone’s favorite distribution. If you are just joining
    us, we have covered how to take a 3D point and translate it to 2D given the location
    of the camera in [part 1](/a-python-engineers-introduction-to-3d-gaussian-splatting-part-1-e133b0449fc6).
    For this article we will be moving onto dealing with the gaussian part of gaussian
    splatting. We will be using part_2.ipynb in our [GitHub](https://github.com/dcaustin33/intro_to_gaussian_splatting).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在来讲讲高斯分布！每个人最喜欢的分布。如果你是刚加入我们的读者，我们在[第一部分](/a-python-engineers-introduction-to-3d-gaussian-splatting-part-1-e133b0449fc6)中讨论了如何根据相机位置将三维点转换为二维。本文将继续探讨高斯点洒射中的高斯部分。我们将在我们的[GitHub](https://github.com/dcaustin33/intro_to_gaussian_splatting)中使用
    part_2.ipynb 文件。
- en: One slight change that we will make here is that we are going to use perspective
    projection that utilizes a different internal matrix than the one shown in the
    previous article. However, the two are equivalent when projecting a point to 2D
    and I find the first method introduced in part 1 far easier to understand, however
    we change our method in order to replicate, in python, as much of the author’s
    code as possible. Specifically our “internal” matrix will now be given by the
    OpenGL projection matrix shown here and the order of multiplication will now be
    points @ external.transpose() @ internal.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做的一个小改动是使用不同于上一篇文章中所示的内部矩阵的透视投影矩阵。然而，这两者在将点投影到二维时是等效的，我个人认为第一部分介绍的方法更容易理解，不过我们更改了方法，以便在
    Python 中尽可能地复制作者的代码。具体来说，我们的“内部”矩阵将由这里展示的 OpenGL 投影矩阵给出，乘法的顺序将变为 points @ external.transpose()
    @ internal。
- en: '![](../Images/c4e5dbf74788f7bb266d014014d1529f.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c4e5dbf74788f7bb266d014014d1529f.png)'
- en: Internal perspective projection matrix. Parameters are explained in paragraph
    below.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 内部透视投影矩阵。参数将在下面的段落中进行解释。
- en: For those curious to know about this new internal matrix (otherwise feel free
    to skip this paragraph) r and l are the clipping planes of the right and left
    sides, essentially what points could be in view with regards to the width of the
    photo, and t and b are the top and bottom clipping planes. N is the near clipping
    plane (where points will be projected to) and f is the far clipping plane. For
    more information I have found scratchapixel’s chapters here to be quite informative
    ([https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/opengl-perspective-projection-matrix.html](https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/opengl-perspective-projection-matrix.html)).
    This also returns the points in normalized device coordinates (between -1 and
    1) and which we then project to pixel coordinates. Digression aside the task remains
    the same, take the point in 3D and project onto a 2D image plane. However, in
    this part of the tutorial we are now using gaussians instead of a points.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些对这个新内部矩阵感到好奇的人（否则可以跳过这一段），r和l是左右裁剪平面，本质上是指根据照片的宽度，哪些点可能在视图中，t和b是上下裁剪平面。N是近裁剪平面（即点将被投影到的位置），而f是远裁剪平面。想要了解更多信息的人，我发现scratchapixel上的章节内容非常有参考价值（[https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/opengl-perspective-projection-matrix.html](https://www.scratchapixel.com/lessons/3d-basic-rendering/perspective-and-orthographic-projection-matrix/opengl-perspective-projection-matrix.html)）。这也返回了标准化设备坐标（在-1和1之间），然后我们将其投影到像素坐标。题外话暂且不提，任务依旧是相同的，将3D点投影到2D图像平面。然而，在本教程的这一部分，我们现在使用的是高斯点而不是点。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A 3D gaussian splat consists of x, y, and z coordinates as well as the associated
    covariance matrix. As noted by the authors: “An obvious approach would be to directly
    optimize the covariance matrix Σ to obtain 3D gaussians that represent the radiance
    field. However, covariance matrices have physical meaning only when they are positive
    semi-definite. For our optimization of all our parameters, we use gradient descent
    that cannot be easily constrained to produce such valid matrices, and update steps
    and gradients can very easily create invalid covariance matrices.”¹'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个3D高斯点由x、y和z坐标以及相关的协方差矩阵组成。正如作者所指出的：“一种显而易见的方法是直接优化协方差矩阵Σ，以获得表示辐射场的3D高斯。但协方差矩阵只有在它们是正半定时才具有物理意义。由于我们对所有参数的优化使用的是梯度下降方法，而梯度下降方法无法轻松约束以生成这样的有效矩阵，因此更新步骤和梯度非常容易产生无效的协方差矩阵。”¹
- en: Therefore, the authors use a decomposition of the covariance matrix that will
    always produce positive semi definite covariance matrices. In particular they
    use 3 “scale” parameters and 4 quaternions that are turned into a 3x3 rotation
    matrix (R). The covariance matrix is then given by
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，作者使用了协方差矩阵的分解方法，该方法始终产生正半定的协方差矩阵。特别地，他们使用了3个“尺度”参数和4个四元数，这些四元数被转换为3x3的旋转矩阵（R）。然后，协方差矩阵由下式给出：
- en: '![](../Images/43f0fb2a98182c99e50f6164a9b75d00.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/43f0fb2a98182c99e50f6164a9b75d00.png)'
- en: Equation for the covariance matrix where R represents the 3x3 rotation matrix
    derived from the 4 quaternions, and S are 3 scale parameters. Image by author.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 协方差矩阵的方程，其中R表示从四元数导出的3x3旋转矩阵，S是3个尺度参数。图片由作者提供。
- en: Note one must normalize the quaternion vector before converting to a rotation
    matrix in order to obtain a valid rotation matrix. Therefore in our implementation
    a gaussian point consists of the following parameters, coordinates (3x1 vector),
    quaternions (4x1 vector), scale (3x1 vector) and a final float value relating
    to the opacity (how transparent the splat is). Now all we need to do is optimize
    these 11 parameters to get our scene — simple right!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在将四元数转换为旋转矩阵之前，必须对四元数向量进行归一化，以获得有效的旋转矩阵。因此，在我们的实现中，一个高斯点由以下参数组成：坐标（3x1向量）、四元数（4x1向量）、尺度（3x1向量）和一个最终的浮动值，表示不透明度（即该高斯点的透明度）。现在，我们只需要优化这11个参数来得到我们的场景——听起来很简单，对吧！
- en: 'Well it turns out it is a little bit more complicated than that. If you remember
    from high school mathematics, the strength of a gaussian at a specific point is
    given by the equation:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，事情比这更复杂。如果你记得高中数学，某一点上高斯函数的强度由以下方程给出：
- en: '![](../Images/0e54c4a7f7c119a7b8fbcf1364982fdc.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0e54c4a7f7c119a7b8fbcf1364982fdc.png)'
- en: Strength of a gaussian at a point x is given by the mean (mu) and the inverse
    of the covariance matrix. Image by author.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 某一点x处的高斯强度由均值（mu）和协方差矩阵的逆给出。图片由作者提供。
- en: However, we care about the strength of 3D gaussians in 2D, ie. in the image
    plane. But you might say, we know how to project points to 2D! Despite that, we
    have not yet gone over projecting the covariance matrix to 2D and so we could
    not possibly find the inverse of the 2D covariance matrix if we have yet to find
    the 2D covariance matrix.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们关心的是3D高斯在2D中的强度，也就是在图像平面上的强度。但你可能会说，我们知道如何将点投影到2D！尽管如此，我们还没有讨论如何将协方差矩阵投影到2D，因此如果我们还没有找到2D协方差矩阵，显然无法求得2D协方差矩阵的逆矩阵。
- en: Now this is the fun part (depending on how you look at it). EWA Splatting, a
    paper reference by the 3D gaussian splatting authors, shows exactly how to project
    the 3D covariance matrix to 2D.² However, this assumes knowledge of a Jacobian
    affine transformation matrix, which we compute below. I find code most helpful
    when walking through a difficult concept and thus I have provided some below in
    order to exemplify how to go from a 3D covariance matrix to 2D.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是有趣的部分（取决于你怎么看）。《EWA Splatting》这篇由3D高斯喷溅的作者引用的论文，准确展示了如何将3D协方差矩阵投影到2D²。然而，这假设了你已经掌握了雅可比仿射变换矩阵的知识，下面我们将进行计算。我发现代码在理解复杂概念时非常有帮助，因此我提供了一些代码示例，以说明如何从3D协方差矩阵转到2D。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: First off, tan_fovY and tan_fovX are the tangents of half the field of view
    angles. We use these values to clamp our projections, preventing any wild, off-screen
    projections from affecting our render. One can derive the jacobian from the transformation
    from 3D to 2D as given with our initial forward transform introduced in part 1,
    but I have saved you the trouble and show the expected derivation above. Lastly,
    if you remember we transposed our rotation matrix above in order to accommodate
    a reshuffling of terms and therefore we transpose back on the penultimate line
    before returning the final covariance calculation. As the EWA splatting paper
    notes, we can ignore the third row and column seeing as we only care about the
    2D image plane. You might wonder, why couldn’t we do that from the start? Well,
    the covariance matrix parameters will vary depending on which angle you are viewing
    it from as in most cases it will not be a perfect sphere! Now that we’ve transformed
    to the correct viewpoint, the covariance z-axis info is useless and can be discarded.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，tan_fovY和tan_fovX是视场角一半的正切值。我们使用这些值来限制我们的投影，防止任何过度的、屏幕外的投影影响我们的渲染。可以从3D到2D的变换中推导出雅可比矩阵，这个变换在第一部分中介绍过，但我已经为你省去了麻烦，展示了预期的推导过程。最后，如果你记得我们在上面转置了旋转矩阵，以便重排项，因此在倒数第二行进行转置后，我们会返回最终的协方差计算。正如EWA喷溅论文中所指出的，由于我们只关心2D图像平面，可以忽略第三行和第三列。你可能会问，为什么一开始不能这么做？嗯，协方差矩阵的参数会根据你观察的角度而变化，因为在大多数情况下它不会是完美的球体！现在我们已经转换到正确的视角，协方差矩阵中的z轴信息就变得无用，可以丢弃。
- en: Given that we have the 2D covariance matrix we are close to being able to calculate
    the impact each gaussian has on any random pixel in our image, we just need to
    find the inverted covariance matrix. Recall again from linear algebra that to
    find the inverse of a 2x2 matrix you only need to find the determinant and then
    do some reshuffling of terms. Here is some code to help guide you through that
    process as well.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们已经有了2D协方差矩阵，我们距离能够计算每个高斯对图像中任意像素的影响已经很接近，我们只需要找到反转的协方差矩阵。再回顾一下线性代数，要找到2x2矩阵的逆矩阵，你只需要找到行列式，然后进行一些项的重排。这里有一些代码，可以帮助你引导这一过程。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And tada, now we can compute the pixel strength for every single pixel in an
    image. However, doing so is extremely slow and unnecessary. For example, we really
    don’t need to waste computing power figuring out how a splat at (0,0) affects
    a pixel at (1000, 1000), unless the covariance matrix is massive. Therefore, the
    authors make a choice to calculate what they call the “radius” of each splat.
    As seen in the code below we calculate the eigenvalues along each axis (remember,
    eigenvalues show variation). Then, we take the square root of the largest eigenvalue
    to get a standard deviation measure and multiply it by 3.0, which covers 99.7%
    of the distribution within 3 standard deviations. This radius helps us figure
    out the minimum and maximum x and y values that the splat touches. When rendering,
    we only compute the splat strength for pixels within these bounds, saving a ton
    of unnecessary calculations. Pretty smart, right?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，现在我们可以计算图像中每一个像素的强度了。然而，这样做非常慢，而且不必要。例如，我们真的不需要浪费计算能力去搞清楚一个位于(0,0)的溅射如何影响一个位于(1000,
    1000)的像素，除非协方差矩阵非常庞大。因此，作者选择计算他们所称的“半径”来表示每个溅射的影响。如下代码所示，我们计算沿每个轴的特征值（记住，特征值表示变动）。然后，我们取最大特征值的平方根，得到一个标准差度量，并将其乘以3.0，这样可以覆盖99.7%的分布范围，位于3个标准差内。这个半径帮助我们确定溅射所涉及的最小和最大x、y值。在渲染时，我们仅计算位于这些范围内的像素的溅射强度，节省了大量不必要的计算。聪明吧？
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: All of these steps above give us our preprocessed scene that can then be used
    in our render step. As a recap we now have the points in 2D, colors associated
    with those points, covariance in 2D, inverse covariance in 2D, sorted depth order,
    the minimum x, minimum y, maximum x, maximum y values for each splat, and the
    associated opacity. With all of these components we can finally move onto rendering
    an image!
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 上述所有步骤为我们提供了预处理过的场景，可以在渲染步骤中使用。回顾一下，我们现在拥有了二维中的点、与这些点相关的颜色、二维中的协方差、二维中的逆协方差、排序后的深度顺序、每个溅射的最小x、最小y、最大x、最大y值，以及相关的不透明度。有了这些组件，我们终于可以开始渲染图像了！
- en: 'Kerbl, Bernhard, et al. “3d gaussian splatting for real-time radiance field
    rendering.” *ACM Transactions on Graphics* 42.4 (2023): 1–14.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Kerbl, Bernhard, 等人. “用于实时辐射场渲染的3D高斯溅射.” *ACM图形学学报* 42.4 (2023): 1–14.'
- en: 'Zwicker, Matthias, et al. “EWA splatting.” *IEEE Transactions on Visualization
    and Computer Graphics* 8.3 (2002): 223–238.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Zwicker, Matthias, 等人. “EWA溅射.” *IEEE计算机视觉与图形学学报* 8.3 (2002): 223–238.'
