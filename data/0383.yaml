- en: Unraveling Unstructured Movie Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解开无结构的电影数据
- en: 原文：[https://towardsdatascience.com/unraveling-unstructured-movie-data-04d5ff787600?source=collection_archive---------8-----------------------#2024-02-09](https://towardsdatascience.com/unraveling-unstructured-movie-data-04d5ff787600?source=collection_archive---------8-----------------------#2024-02-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/unraveling-unstructured-movie-data-04d5ff787600?source=collection_archive---------8-----------------------#2024-02-09](https://towardsdatascience.com/unraveling-unstructured-movie-data-04d5ff787600?source=collection_archive---------8-----------------------#2024-02-09)
- en: '![](../Images/9bcaa0e799d0ad12c1c54169c510968f.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9bcaa0e799d0ad12c1c54169c510968f.png)'
- en: How to Use LLMs and Controlled Vocabularies for Enhanced Similarity Models
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用 LLMs 和受控词汇来增强相似度模型
- en: '[](https://stevehedden.medium.com/?source=post_page---byline--04d5ff787600--------------------------------)[![Steve
    Hedden](../Images/af7bec4a191ab857eccd885dd89e88b4.png)](https://stevehedden.medium.com/?source=post_page---byline--04d5ff787600--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--04d5ff787600--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--04d5ff787600--------------------------------)
    [Steve Hedden](https://stevehedden.medium.com/?source=post_page---byline--04d5ff787600--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://stevehedden.medium.com/?source=post_page---byline--04d5ff787600--------------------------------)[![Steve
    Hedden](../Images/af7bec4a191ab857eccd885dd89e88b4.png)](https://stevehedden.medium.com/?source=post_page---byline--04d5ff787600--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--04d5ff787600--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--04d5ff787600--------------------------------)
    [Steve Hedden](https://stevehedden.medium.com/?source=post_page---byline--04d5ff787600--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--04d5ff787600--------------------------------)
    ·16 min read·Feb 9, 2024
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--04d5ff787600--------------------------------)
    ·阅读时长 16 分钟·2024年2月9日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '*The accompanying code for this tutorial is* [*here.*](https://github.com/SteveHedden/kg_llm)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*本教程的配套代码* [*在这里。*](https://github.com/SteveHedden/kg_llm)'
- en: '[Recommender systems](https://en.wikipedia.org/wiki/Recommender_system) are
    how we find much of the content and products we consume, probably including this
    article. A recommender system is:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[推荐系统](https://en.wikipedia.org/wiki/Recommender_system)是我们找到大部分内容和产品的方式，可能也包括这篇文章。推荐系统是：'
- en: “a subclass of information filtering system that provides suggestions for items
    that are most pertinent to a particular user.” — Wikipedia
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “一种信息过滤系统的子类，为特定用户提供最相关的项目建议。”——维基百科
- en: 'Some examples of recommender systems we interact with regularly are on Netflix,
    Spotify, Amazon, and social media. All of these recommender systems are attempting
    to answer the same question: given a user’s past behavior, what other products
    or content are they most likely to like? These systems generate a lot of money
    — [a 2013 study from McKinsey](https://www.mckinsey.com/industries/retail/our-insights/how-retailers-can-keep-up-with-consumers)
    found that, “35 percent of what consumers purchase on Amazon and 75 percent of
    what they watch on Netflix come from product recommendations.” Netflix famously
    started an open competition in 2006 offering a [one million dollar prize](https://en.wikipedia.org/wiki/Netflix_Prize)
    to anyone who could significantly improve their recommendation system. For more
    information on recommender systems see [this](/the-remarkable-world-of-recommender-systems-bff4b9cbe6a7)
    article.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们日常互动的推荐系统的一些例子包括 Netflix、Spotify、Amazon 和社交媒体。所有这些推荐系统都在尝试回答同一个问题：根据用户的历史行为，哪些其他产品或内容最有可能受到他们的喜爱？这些系统为公司带来了大量的收入
    —— [麦肯锡2013年的一项研究](https://www.mckinsey.com/industries/retail/our-insights/how-retailers-can-keep-up-with-consumers)发现，“35%
    的亚马逊购物和 75% 的 Netflix 观看内容来自于产品推荐。”Netflix 在 2006 年著名地启动了一个公开竞赛，向任何能够显著改善其推荐系统的人提供
    [100 万美元奖金](https://en.wikipedia.org/wiki/Netflix_Prize)。有关推荐系统的更多信息，请参阅[这篇](https://towardsdatascience.com/unraveling-unstructured-movie-data-04d5ff787600?source=collection_archive---------8-----------------------#2024-02-09)文章。
- en: 'Generally, there are three kinds of recommender systems: content based, collaborative,
    and a hybrid of content based and collaborative. Collaborative recommender systems
    focus on users’ behavior and preferences to predict what they will like based
    on what other similar users like. Content based filtering systems focus on similarity
    between the products themselves rather than the users. For more info on these
    systems see [this Nvidia piece.](https://www.nvidia.com/en-us/glossary/recommendation-system/#:~:text=A%20recommendation%20system%20is%20an,demographic%20information%2C%20and%20other%20factors)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，有三种类型的推荐系统：基于内容的推荐、协同过滤推荐和基于内容与协同过滤的混合推荐。协同过滤推荐系统侧重于用户的行为和偏好，依据其他相似用户的喜好来预测用户可能喜欢什么。基于内容的过滤系统则侧重于产品本身的相似性，而不是用户之间的相似性。有关这些系统的更多信息，请参见[这篇Nvidia文章](https://www.nvidia.com/en-us/glossary/recommendation-system/#:~:text=A%20recommendation%20system%20is%20an,demographic%20information%2C%20and%20other%20factors)
- en: Calculating similarity between products that are well-defined in a structured
    dataset is relatively straightforward. We could identify which properties of the
    products we think are most important, and measure the ‘distance’ between any two
    products given the difference between those properties. But what if we want to
    compare items when the only data we have is unstructured text? For example, given
    a dataset of movie and TV show descriptions, how can we calculate which are most
    similar?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在结构化数据集中，计算产品之间的相似性相对简单。我们可以确定我们认为最重要的产品属性，并根据这些属性的差异来衡量任意两个产品之间的“距离”。但是，如果我们想在唯一的数据是非结构化文本的情况下比较项目怎么办？例如，给定一个电影和电视节目描述的数据集，我们该如何计算哪些描述最相似？
- en: 'In this tutorial, I will:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我将：
- en: Show a basic similarity model (no controlled vocabulary) of unstructured text
    using natural language processing (NLP) techniques
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展示一个基本的相似性模型（没有受控词汇表），使用自然语言处理（NLP）技术对非结构化文本进行处理
- en: Create a genre list using an LLM
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用LLM创建一个类型列表
- en: Use the genre list to tag films with genres
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用类型列表为电影打上类型标签
- en: Use the genre tags to build a similarity model
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用类型标签构建相似性模型
- en: Use the genre tags to create a network visualization
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用类型标签创建网络可视化
- en: 'The goal, for me, in writing this, was to learn two things: whether a taxonomy
    (controlled vocabulary) significantly improved the outcomes of a similarity model
    of unstructured data, and whether an LLM can significantly improve the quality
    and/or time required to construct that controlled vocabulary.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，写这篇文章的目标是学习两件事：一是受控词汇表（taxonomy）是否显著改善了非结构化数据相似性模型的效果，二是LLM是否能显著改善构建受控词汇表所需的质量和/或时间。
- en: 'If you don’t feel like reading the whole thing, here are my main findings:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想阅读全部内容，这里是我主要的发现：
- en: The basic NLP model (without a controlled vocabulary) certainly has some problems
    — it sometimes uses words for identifying similar movies that are not relevant
    (like the protagonists’ first name or the location).
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本的NLP模型（没有受控词汇表）确实存在一些问题——它有时会使用与识别相似电影无关的词汇（例如，主角的名字或地点）。
- en: Using a controlled vocabulary does significantly improve the outcomes of the
    similarity model, at least based on some of the examples I have been using to
    test the models.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用受控词汇表确实显著改善了相似性模型的效果，至少基于我用来测试模型的一些示例来看是这样的。
- en: Building a simple, basic genre list using an LLM is easy — building a useful
    and/or detailed genre taxonomy is hard i.e. it would take more iterations or more
    descriptive prompts. I ended up building a quick and dirty list of about 200 genres
    without definitions, which worked good enough for doing simple similarity calculations.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LLM构建一个简单、基本的类型列表很容易——但构建一个有用和/或详细的类型词汇表很困难，也就是说，这需要更多的迭代或更具描述性的提示。我最终构建了一个大约200个类型的快速粗略列表，没有定义，足够用于做简单的相似性计算。
- en: Even this very basic genre list built using an LLM has issues, however. There
    are duplicate genres with minor spelling differences, for example.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，即使是这个非常基本的使用LLM构建的类型列表，也存在一些问题。例如，有些类型有轻微的拼写差异，导致重复。
- en: Using an LLM to tag the movies and TV shows took a very long time. This might
    just be a problem in the way I have structured my code though.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LLM为电影和电视节目打标签花费了很长时间。这个问题可能只是我在构建代码时的方式导致的。
- en: Perhaps not surprisingly, the depth and breadth of the taxonomy matters. Like
    I said above, building a detailed and descriptive taxonomy of movie genres is
    difficult and would require a lot more work than I am willing to do for this tutorial.
    But depending on the use case, that level of detail might not be necessary. I
    started by building a taxonomy of thousands of genres with synonyms and definitions
    but that had drawbacks — the tagging became harder and the similarity calculations
    were often not as good. Because I was only looking at a couple thousand movies,
    having a genre list of thousands of genres just made every movie unique and similar
    to almost nothing.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可能并不令人惊讶的是，分类的深度和广度很重要。就像我上面说的，构建一个详细的电影类型分类是困难的，而且需要比我愿意为这个教程所做的更多的工作。但根据使用场景，可能不需要那么详细。我最初构建了一个包含成千上万种类型、同义词和定义的分类体系，但这也有缺点——标注变得更加困难，相似度计算也常常不如预期。因为我只看了几千部电影，所以有成千上万种类型的列表使得每部电影都变得独特，几乎没有什么相似之处。
- en: Visualizing movies and genres as graphs is awesome, as always.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将电影和类型可视化为图形总是非常棒。
- en: Basic Similarity Model of Unstructured Text Using NLP Techniques
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NLP技术的非结构化文本基本相似度模型
- en: 'We could use natural language processing (NLP) to extract key words from the
    text, identify how important these words are, and then find matching words in
    other descriptions. [Here](https://medium.com/mlearning-ai/basic-content-based-recommendation-system-with-python-code-be920b412067)
    is a tutorial on how to do that in Python. I won’t recreate that entire tutorial
    here but here is a brief synopsis:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用自然语言处理（NLP）来提取文本中的关键词，识别这些词的重要性，然后在其他描述中找到匹配的词。[这里](https://medium.com/mlearning-ai/basic-content-based-recommendation-system-with-python-code-be920b412067)有一个关于如何在Python中实现的教程。我不会在这里重新创建整个教程，但这里有一个简要的概述：
- en: First, we extract key words from a plot description. For example, here is the
    description for the movie, ‘Indiana Jones and the Raiders of the Lost Ark.’
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从电影情节描述中提取关键词。例如，下面是电影《印第安纳·琼斯与失落的方舟》的描述。
- en: “When Indiana Jones is hired by the government to locate the legendary Ark of
    the Covenant, he finds himself up against the entire Nazi regime.”
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “当印第安纳·琼斯被政府雇佣去寻找传说中的‘约柜’时，他发现自己正面对整个纳粹政权。”
- en: We then use out-of-the-box libraries from sklearn to extract key words and rank
    their ‘importance’. To calculate importance, we use term-frequency-inverse document
    frequency (tf-idf). The idea is to balance the frequency of the term in the individual
    film’s description with how common the word is across all film descriptions in
    our dataset. The word ‘finds,’ for example, appears in this description, but it
    is a common word and appears in many other movie descriptions, so it is less important
    than ‘covenant’.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用sklearn的现成库来提取关键词并对其‘重要性’进行排名。为了计算重要性，我们使用了词频-逆文档频率（tf-idf）。其思想是平衡单个电影描述中词语的频率与在我们数据集中所有电影描述中该词的普遍性。例如，‘finds’这个词在这个描述中出现，但它是一个常见词，出现在许多其他电影描述中，因此它的权重比‘covenant’低。
- en: '![](../Images/26363683659234d8de294e2a80095aaa.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/26363683659234d8de294e2a80095aaa.png)'
- en: Image by author
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'This model actually works very well for films that have a uniquely identifiable
    protagonist. If we run the similarity model on this film, the most similar movies
    are: ‘Indiana Jones and the Temple of Doom’, ‘Indiana Jones and the Last Crusade’,
    and ‘Indiana Jones and the Kingdom of the Crystal Skull’. This is because the
    descriptions for each of these movies contains the words, ‘Indiana’ and ‘Jones’.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模型实际上对于那些有着独特可识别主角的电影效果非常好。如果我们对这部电影运行相似度模型，最相似的电影是：《印第安纳·琼斯与夺宝圣地》、《印第安纳·琼斯与最后的十字军》以及《印第安纳·琼斯与水晶骷髅王国》。这是因为这些电影的描述中都包含了“Indiana”和“Jones”这两个词。
- en: But there are problems here. How do we know the words that are extracted and
    used in the similarity model are relevant? For example, if I run this model to
    find movies or TV shows similar to ‘Beavis and Butt-head Do America,” the top
    result is “Army of the Dead.” If you’re not a sophisticated film and TV buff like
    me, you may not be familiar with the animated series ‘[Beavis and Butt-Head](https://en.wikipedia.org/wiki/Beavis_and_Butt-Head),’
    featuring ‘unintelligent teenage boys [who] spend time watching television, drinking
    unhealthy beverages, eating, and embarking on mundane, sordid adventures, which
    often involve vandalism, abuse, violence, or animal cruelty.’ The description
    of their movie, ‘Beavis and Butt-head Do America,’ reads, ‘After realizing that
    their boob tube is gone, Beavis and Butt-head set off on an expedition that takes
    them from Las Vegas to the nation’s capital.’ ‘Army of the Dead,’ on the other
    hand, is a Zack Snyder-directed ‘[post-apocalyptic zombie heist film](https://en.wikipedia.org/wiki/Army_of_the_Dead)’.
    Why is Army of the Dead considered similar then? Because it takes place in Las
    Vegas — both movie descriptions contain the words ‘Las Vegas’.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 但这里也有问题。我们如何知道提取的词汇在相似度模型中是否相关呢？例如，如果我使用这个模型来查找与《比维斯与巴特海德：美国行》相似的电影或电视节目，排名第一的结果是《僵尸军团》。如果你不是像我一样的电影和电视迷，你可能不太熟悉动画剧集《[比维斯与巴特海德](https://en.wikipedia.org/wiki/Beavis_and_Butt-Head)》，该剧讲述的是“两个愚笨的少年[他们]花时间看电视，喝不健康的饮料，吃东西，进行一些平凡的、肮脏的冒险，通常包括破坏行为、虐待、暴力或虐待动物。”他们的电影《比维斯与巴特海德：美国行》的描述是：“在发现他们的电视丢失后，比维斯和巴特海德踏上了一场从拉斯维加斯到美国首都的探险。”而《僵尸军团》则是扎克·斯奈德导演的[末日后僵尸劫匪片](https://en.wikipedia.org/wiki/Army_of_the_Dead)。那么，为什么《僵尸军团》被认为是相似的呢？因为它的故事发生在拉斯维加斯——两部电影的描述中都包含了“拉斯维加斯”这个词。
- en: Another example of where this model fails is that if I want to find movies or
    TV shows similar to ‘Eat Pray Love,’ the top result is, ‘Extremely Wicked, Shockingly
    Evil and Vile.’ ‘Eat Pray Love’ is a romantic comedy starring Julia Roberts as
    Liz Gilbert, a recently divorced woman traveling the world in a journey of self-discovery.
    ‘Extremely Wicked, Shockingly Evil and Vile,’ is a true crime drama about serial
    killer Ted Bundy. What do these films have in common? Ted Bundy’s love interest
    is also named Liz.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个此模型失败的例子是，如果我想找到与《吃、祷、爱》相似的电影或电视节目，排名第一的结果是《极端邪恶、震惊恶心》。《吃、祷、爱》是一部浪漫喜剧，朱莉娅·罗伯茨饰演莉兹·吉尔伯特，一个刚离婚的女人，正在世界各地旅行，进行自我发现的旅程。而《极端邪恶、震惊恶心》是一部讲述连环杀手特德·邦迪的真实犯罪剧情片。这两部电影有什么共同之处呢？特德·邦迪的恋人也叫莉兹。
- en: '![](../Images/7bed12ca5db9daac58186a0cc548d848.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7bed12ca5db9daac58186a0cc548d848.png)'
- en: Image by author
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: These are, of course, cherry-picked examples of cases where this model doesn’t
    work. There are plenty of cases where extracting key words from text can be a
    useful way of finding similar products. As shown above, text that contains uniquely
    identifiable names like Power Rangers, Indiana Jones, or James Bond can be used
    to find other titles with those same names in their descriptions. Likewise, if
    the description contains information about the genre of the title, like ‘thriller’
    or ‘mystery’, then those words can link the film to other films of the same genre.
    This has limitations too, however. Some films may use the word ‘dramatic’ in their
    description, but using this methodology, we would not match these films with film
    descriptions containing the word ‘drama’ — we are not accounting for synonyms.
    What we really want is to only use relevant words and their synonyms.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些当然是精心挑选的示例，展示了该模型不起作用的情况。事实上，也有很多例子表明，从文本中提取关键字可以是找到相似产品的有效方式。如上所示，包含唯一可识别名称的文本，如《特摄队员》、《印第安纳·琼斯》或《詹姆斯·邦德》，可以用来找到在描述中包含相同名称的其他标题。同样，如果描述中包含标题的类型信息，如“惊悚片”或“悬疑片”，那么这些词可以将电影与同类型的其他电影关联起来。然而，这种方法也有局限性。有些电影可能在描述中使用了“戏剧性”一词，但根据这种方法，我们无法将这些电影与包含“剧情”一词的电影描述匹配，因为我们没有考虑同义词。我们真正需要做的是仅使用相关的词汇及其同义词。
- en: How can we ensure that the words extracted are relevant? This is where a taxonomy
    can help. What is a taxonomy?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何确保提取的词汇是相关的呢？这就是分类法可以提供帮助的地方。什么是分类法？
- en: Create a genre taxonomy using an LLM
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用大语言模型创建一个类型分类
- en: “A taxonomy (or taxonomic classification) is a scheme of classification, especially
    a hierarchical classification, in which things are organized into groups or types.”
    — [Wikipedia](https://en.wikipedia.org/wiki/Taxonomy)
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “分类法（或分类学分类）是一种分类方案，尤其是层级分类方案，其中事物被组织成不同的组或类型。” — [维基百科](https://en.wikipedia.org/wiki/Taxonomy)
- en: Perhaps the most famous example of a taxonomy is the one used in biology to
    categorize all living organisms — remember domain, kingdom, phylum class, order,
    family, genus, and species? All living creatures can be categorized into this
    hierarchical taxonomy.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 也许最著名的分类法例子是用于生物学中对所有生物体进行分类的分类法——还记得领域、界、门、纲、目、科、属和种吗？所有生物都可以按照这一层级分类法进行归类。
- en: '***A note on terminology:*** *ontologies are similar to taxonomies but different.
    As* [*this*](https://www.forbes.com/sites/cognitiveworld/2019/03/24/taxonomies-vs-ontologies/?sh=35eb9c327d53)
    *article explains, taxonomies classify while ontologies specify. “An ontology
    is the system of classes and relationships that describe the structure of data,
    the rules, if you will, that prescribe how a new category or entity is created,
    how attributes are defined, and how constraints are established.” Since we are
    focused on classifying movies, we are going to build a taxonomy. However, for
    the purposes of this tutorial, I just need a very basic list of genres, which
    can’t even really be described as a taxonomy. A list of genres is just a tag set,
    or a controlled vocabulary.*'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '***术语说明：*** *本体论与分类法相似，但有所不同。正如* [*这篇*](https://www.forbes.com/sites/cognitiveworld/2019/03/24/taxonomies-vs-ontologies/?sh=35eb9c327d53)
    *文章所解释的，分类法用于分类，而本体论则用于指定。“本体论是描述数据结构的类和关系的系统，是制定新类别或实体创建规则、定义属性的规则，以及建立约束的规则。”因为我们专注于对电影进行分类，所以我们将构建一个分类法。然而，出于本教程的目的，我只需要一个非常基础的类型列表，这甚至不能算是一个分类法。一个类型列表仅仅是一个标签集，或者说是一个受控词汇表。*'
- en: For this tutorial, we will focus only on genre. What we need is a list of genres
    that we can use to ‘tag’ each movie. Imagine that instead of having the movie,
    ‘Eat Pray Love’ tagged with the words ‘Liz’ and ‘true’, it were tagged with ‘romantic
    comedy’, ‘drama’, and ‘travel/adventure’. We could then use these genres to find
    other movies similar to Eat Pray Love, even if the protagonist is not named Liz.
    Below is a diagram of what we are doing. We use a subset of the unstructured movie
    data, along with GPT 3.5, to create a list of genres. Then we use the genre list
    and GPT 3.5 to tag the unstructured movie data. Once our data is tagged, we can
    run a similarity model using the tags as inputs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中，我们将只关注电影类型。我们需要的是一个可以用来“标记”每部电影的类型列表。试想，如果不是把电影《吃，祷，爱》标记为‘Liz’和‘true’，而是标记为‘浪漫喜剧’，‘剧情’和‘旅行/冒险’，那么我们就可以使用这些类型来找到其他与《吃，祷，爱》相似的电影，即使主角不叫Liz。下面是我们所做工作的图示。我们使用一部分非结构化的电影数据，并结合GPT
    3.5，创建类型列表。然后我们使用类型列表和GPT 3.5对非结构化的电影数据进行标记。一旦我们的数据被标记，我们就可以使用这些标签作为输入，运行相似度模型。
- en: '![](../Images/a57c3870bee7f19b01f99cd7029a0148.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a57c3870bee7f19b01f99cd7029a0148.png)'
- en: Image by author
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: I couldn’t find any free movie genre taxonomies online, so I built my own using
    a large language model (LLM). I started with [this](https://medium.com/@elias_69893/an-llm-agent-that-builds-and-maintains-a-job-title-taxonomy-77d02c4c6100)
    tutorial, which used an LLM agent to build a taxonomy of job titles. That LLM
    agent looks for job titles from job descriptions, creates definitions and responsibilities
    for each of these job titles, and synonyms. I used that tutorial to create a movie
    genre taxonomy, but it was overkill — we don’t really need to do all of that for
    the purposes of this tutorial. We just need a very basic list of genres that we
    can use to tag movies. Here is the code I used to create that genre list.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我在线上没有找到任何免费的电影类型分类法，所以我使用一个大型语言模型（LLM）构建了自己的分类法。我从[这个](https://medium.com/@elias_69893/an-llm-agent-that-builds-and-maintains-a-job-title-taxonomy-77d02c4c6100)教程开始，教程中使用了一个LLM代理来构建工作职称分类法。这个LLM代理从职位描述中提取职位名称，为每个职位名称创建定义和职责，并列出同义词。我使用这个教程创建了一个电影类型分类法，但这有些过度——我们并不需要为本教程做这么复杂的工作。我们只需要一个非常基础的类型列表，用于标记电影。以下是我用来创建该类型列表的代码。
- en: 'I used Netflix movie and TV show description data available [here](https://www.kaggle.com/datasets/shivamb/netflix-shows?resource=download)
    (License [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '我使用了Netflix的电影和电视节目描述数据，这些数据可以在[此处](https://www.kaggle.com/datasets/shivamb/netflix-shows?resource=download)获得（许可证
    [CC0: 公共领域](https://creativecommons.org/publicdomain/zero/1.0/)）。'
- en: Import required packages and load english language NLP model.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 导入所需的包并加载英语语言的 NLP 模型。
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then we need to set up our connection with OpenAI (or whatever LLM you want
    to use).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要设置与 OpenAI（或你想使用的任何 LLM）的连接。
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Read in the Netflix movie data:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 读取 Netflix 电影数据：
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a function to predict the genre of a title given its description:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个函数，根据电影简介预测类型：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now we iterate through our DataFrame of movie descriptions, use the function
    above to predict the genres associated with the movie, then add them to our list
    of established unique genres.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们遍历电影描述的 DataFrame，使用上述函数预测与电影相关的类型，然后将它们添加到我们已建立的唯一类型列表中。
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now turn this list into a DataFrame and save to a csv file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将这个列表转换为 DataFrame 并保存为 CSV 文件：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Like I said, this is a quick and dirty way to generate this list of genres.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我说的，这是生成类型列表的一种快速简便的方法。
- en: Use the genre list to tag films with genres
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类型列表给电影打上类型标签
- en: Now that we have a list of genres, we need to tag each of the movies and TV
    shows in our dataset (over 8,000) with them. To be able to use these tags to calculate
    similarity between two entities, we need to tag each movie and TV show with more
    than one genre. If we only used one genre, then all action movies will be equally
    similar, even though some may be more about sports and others, horror.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了类型列表，我们需要给数据集中的每部电影和电视节目（超过8,000部）打上标签。为了能够使用这些标签计算两个实体之间的相似度，我们需要给每部电影和电视节目打上多个类型标签。如果我们只使用一个类型标签，那么所有动作片将被认为是完全相似的，尽管有些可能更侧重于体育，另一些则可能更偏向恐怖片。
- en: 'First, we read in our genre list and movie dataset:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们读取我们的类型列表和电影数据集：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We already have a function for predicting genres. Now we need to define two
    more functions: one for filtering the predictions to ensure that the predictions
    are in our established genre list, and one for adding those filtered predictions
    to the movie DataFrame.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了一个预测类型的函数。现在我们需要再定义两个函数：一个用于过滤预测结果，确保预测的类型在我们已建立的类型列表中，另一个用于将这些过滤后的预测添加到电影
    DataFrame 中。
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once we have these functions defined, we can run them on our movies dataset:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们定义了这些函数，就可以在我们的电影数据集上运行它们：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now we do some data cleaning:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们进行一些数据清理：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we print the head of the DataFrame it should look like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打印 DataFrame 的头部，它应该是这样：
- en: '![](../Images/1eecf770581a33e10b76f6d2a77063de.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1eecf770581a33e10b76f6d2a77063de.png)'
- en: Image by author
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Use the genre tags to build a similarity model
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类型标签构建相似度模型
- en: Now we turn the genre columns into dummy variables — each genre becomes its
    own column and if the movie or TV show is tagged with that genre then the column
    gets a 1, otherwise the value is 0.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将类型列转换为虚拟变量——每个类型变成一列，如果电影或电视节目被标记为该类型，那么该列的值为1，否则为0。
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If we print the head of this DataFrame, this is what it looks like:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打印这个 DataFrame 的头部，它看起来像这样：
- en: '![](../Images/6a403777c5b4922440ac69a840305ede.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a403777c5b4922440ac69a840305ede.png)'
- en: Image by author
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'We need to use these dummy variables to build a matrix and run a similarity
    model across all pairs of movies:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用这些虚拟变量来构建矩阵，并在所有电影对之间运行相似度模型：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now we can define a function that calculates the most similar movies to a given
    title:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以定义一个计算与给定标题最相似的电影的函数：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let’s see if this model finds movies more similar to ‘Eat Pray Love,’ than
    the previous model:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个模型是否比之前的模型找到更多类似《美味祈祷爱》的电影：
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output from this query, for me, were, ‘The Big Day’, ‘Love Dot Com: The
    Social Experiment’, and ’50 First Dates’. All of these movies are tagged as romantic
    comedies and dramas, just like Eat Pray Love.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '这次查询的输出对我来说是“完美的一天”、“Love Dot Com: 社会实验”和“50次初恋”。所有这些电影都被标记为浪漫喜剧和剧情片，就像《美味祈祷爱》一样。'
- en: '![](../Images/c760e9f8b5ef45a4bcb4df301050b036.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c760e9f8b5ef45a4bcb4df301050b036.png)'
- en: Image by author
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '‘Extremely Wicked, Shockingly Evil and Vile,’ the movie about a woman in love
    with Ted Bundy, is tagged with the genres romance, drama, and crime. The most
    similar movies are, ‘The Fury of a Patient Man’, ‘Much Loved’, and ‘Loving You’,
    all of which are also tagged with romance, drama, and crime. ‘Beavis and Butt-head
    Do America’ is tagged with the genres comedy, adventure and road trip. The most
    similar movies are ‘Pee-wee’s Big Holiday’, ‘A Shaun the Sheep Movie: Farmageddon’,
    and ‘The Secret Life of Pets 2.’ All of these movies are also tagged with the
    genres adventure and comedy — there are no other movies in this dataset (at least
    the portion I tagged) that match all three genres from Beavis and Butt-head.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 《极度邪恶、震惊邪恶且肮脏》的电影讲述了一位爱上泰德·邦迪的女人，标签为浪漫、剧情和犯罪。最相似的电影有《耐心男人的愤怒》、《深爱》和《爱你》，它们也都标注了浪漫、剧情和犯罪。电影《比佛斯与巴特赫德：去美国》标注了喜剧、冒险和公路旅行这几个类型。最相似的电影有《比维的伟大假期》、《羊羊大电影：农场末日》和《宠物的秘密生活
    2》。这些电影也都标注了冒险和喜剧类型——在这个数据集中（至少是我标注的部分），没有其他电影符合比佛斯与巴特赫德的三个标签类型。
- en: Use the genre tags to create a network visualization
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类型标签创建网络可视化
- en: You can’t link data together without building a cool network visualization.
    There are a few ways to turn this data into a graph — we could look at how movies
    are conneted via genres, how genres are connected via movies, or a combination
    of the two. Because there are so many movies in this dataset, I just made a graph
    using genres as nodes and movies as edges.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能在不构建酷炫网络可视化的情况下将数据连接起来。有几种方法可以将这些数据转化为图形——我们可以看看电影是如何通过类型连接的，类型又是如何通过电影连接的，或者两者的结合。因为这个数据集中的电影非常多，所以我只用了类型作为节点，电影作为边，制作了一个图形。
- en: 'Here is my code to turn the data into nodes and edges:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我将数据转换为节点和边的代码：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This produces a DataFrame that looks like this:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个如下所示的 DataFrame：
- en: '![](../Images/8a3894ceaabed0ec7f86dba4bfeeae78.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8a3894ceaabed0ec7f86dba4bfeeae78.png)'
- en: Image by author
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: Each row in this DataFrame represents a movie that has been tagged with these
    two genres. We did not remove duplicates so there will be, presumably, many rows
    that look like row 1 above — there are many movies that are tagged as both romance
    and drama.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 DataFrame 中的每一行代表一部被标注为这两种类型的电影。我们没有去除重复项，所以应该会有很多行像上面第 1 行一样——有很多电影同时被标注为浪漫和剧情。
- en: 'I used [Gephi](https://gephi.org/) to build a visualization that looks like
    this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了[Gephi](https://gephi.org/)来构建了如下所示的可视化：
- en: '![](../Images/9bcaa0e799d0ad12c1c54169c510968f.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9bcaa0e799d0ad12c1c54169c510968f.png)'
- en: Image by author
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: The size of the nodes here represents the number of movies tagged with that
    genre. The color of the nodes is a function of a community detection algorithm
    — clusters that have closer connections amongst themselves than with nodes outside
    their cluster are colored the same.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这里节点的大小表示被标注为该类型的电影数量。节点的颜色是基于社区检测算法的结果——在同一群体内比与外部节点的连接更紧密的群体会使用相同的颜色。
- en: 'This is fascinating to me. Drama, comedy, and documentary are the three largest
    nodes meaning more movies are tagged with those genres than any others. The genres
    also naturally form clusters that make intuitive sense. The genres most aligned
    with ‘documentary’ are colored pink and are mostly some kind of documentary sub-genre:
    nature/wildlife, reality TV, travel/adventure, history, educational, biography,
    etc. There are a core cluster of genres in green: drama, comedy, romance, coming
    of age, family, etc. One issue here is that we have multiple spellings of the
    ‘coming of age’ genre — a problem I would fix in future versions. There is a cluster
    in blue that includes action/adventure, fantasy, sci-fi, and animation. Again,
    we have duplicates and overlapping genres here which is a problem. There is also
    a small genre in brown that includes thriller, mystery, and horror — adult genres
    often present in the same film. The lack of connections between certain genres
    is also interesting — there are no films tagged with both ‘stand-up’ and ‘horror’,
    for example.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这对我来说非常吸引人。戏剧、喜剧和纪录片是三个最大的类别节点，意味着更多的电影被标记为这些类型，而不是其他类型。这些类型自然形成了直观的集群。与“纪录片”最相关的类型被标记为粉红色，主要是某种纪录片子类型：自然/野生动物、真人秀、旅行/冒险、历史、教育、传记等。有一个核心集群是绿色的：戏剧、喜剧、浪漫、成长故事、家庭等。这里有一个问题是，“成长故事”类型的拼写有多种版本——这是我在未来版本中会解决的问题。还有一个蓝色的集群，包括动作/冒险、幻想、科幻和动画。再次强调，这里有重复和重叠的类型，这是一个问题。还有一个小的棕色类型，包括惊悚片、悬疑片和恐怖片——这些通常出现在同一部电影中。某些类型之间缺乏连接也是很有趣的——例如，没有电影同时标记为“单口喜剧”和“恐怖片”。
- en: Conclusion
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This project has shown me how even the most basic controlled vocabulary is useful,
    and potentially necessary, when building a content-based recommendation system.
    With just a list of genres we were able to tag movies and find other similar movies
    in a more explainable way than using just NLP. This could obviously be improved
    immensely through a more detailed and description genre taxonomy, but also through
    additional taxonomies including the cast and crew of films, the locations, etc.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目让我意识到，即使是最基本的受控词汇在构建基于内容的推荐系统时也非常有用，甚至可能是必需的。仅凭一份类型列表，我们就能够标记电影，并以比仅使用自然语言处理更具可解释性的方法找到其他相似的电影。显然，通过更详细的描述性类型分类法，这一过程可以得到极大的改进，同时也可以通过包括演员和工作人员、拍摄地点等其他分类法来增强。
- en: As is usually the case when using LLMs, I was very impressed at first at how
    well it could perform this task, only to be disappointed when I viewed and tried
    to improve the results. Building taxonomies, ontologies, or any controlled vocabulary
    requires human engagement — there needs to be a human in the loop to ensure the
    vocabulary makes sense and will be useful in satisfying a particular use case.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 正如使用大型语言模型（LLM）时常见的情况一样，刚开始我对它在完成这一任务时的表现印象深刻，但在查看并尝试改进结果时，我感到失望。构建分类法、本体论或任何受控词汇都需要人工参与——必须有人工介入，以确保词汇合理且能满足特定的使用需求。
- en: LLMs and knowledge graphs (KGs) naturally fit together. One way they can be
    used together is that LLMs can help facilitate KG creation. LLMs can’t build a
    KG themselves but they can certainly help you create one.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: LLM 和知识图谱（KGs）自然是相辅相成的。它们可以一起使用的一种方式是，LLM 可以帮助促进知识图谱的创建。LLM 本身无法构建知识图谱，但它们肯定能帮助你创建一个。
