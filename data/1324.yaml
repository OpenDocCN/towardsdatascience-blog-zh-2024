- en: Intuitive Temporal DataFrame Filtration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直观的时间序列数据框过滤
- en: 原文：[https://towardsdatascience.com/intuitive-temporal-dataframe-filtration-fa9d5da734b3?source=collection_archive---------8-----------------------#2024-05-27](https://towardsdatascience.com/intuitive-temporal-dataframe-filtration-fa9d5da734b3?source=collection_archive---------8-----------------------#2024-05-27)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/intuitive-temporal-dataframe-filtration-fa9d5da734b3?source=collection_archive---------8-----------------------#2024-05-27](https://towardsdatascience.com/intuitive-temporal-dataframe-filtration-fa9d5da734b3?source=collection_archive---------8-----------------------#2024-05-27)
- en: Get rid of your ineffective code for filtering time series data
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摆脱你那无效的时间序列数据过滤代码
- en: '[](https://namiyousef96.medium.com/?source=post_page---byline--fa9d5da734b3--------------------------------)[![Yousef
    Nami](../Images/09a0baa3fe20c858ace5b7923b7c753a.png)](https://namiyousef96.medium.com/?source=post_page---byline--fa9d5da734b3--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fa9d5da734b3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fa9d5da734b3--------------------------------)
    [Yousef Nami](https://namiyousef96.medium.com/?source=post_page---byline--fa9d5da734b3--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://namiyousef96.medium.com/?source=post_page---byline--fa9d5da734b3--------------------------------)[![Yousef
    Nami](../Images/09a0baa3fe20c858ace5b7923b7c753a.png)](https://namiyousef96.medium.com/?source=post_page---byline--fa9d5da734b3--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fa9d5da734b3--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fa9d5da734b3--------------------------------)
    [Yousef Nami](https://namiyousef96.medium.com/?source=post_page---byline--fa9d5da734b3--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--fa9d5da734b3--------------------------------)
    ·10 min read·May 27, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--fa9d5da734b3--------------------------------)
    ·阅读时间10分钟·2024年5月27日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/1bdedd7a197a2764d9cb5c875fee21d4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1bdedd7a197a2764d9cb5c875fee21d4.png)'
- en: Photo by [Carlos Muza](https://unsplash.com/@kmuza) on [Unsplash](https://unsplash.com/photos/laptop-computer-on-glass-top-table-hpjSkU2UYSU)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Carlos Muza](https://unsplash.com/@kmuza) 供职于[Unsplash](https://unsplash.com/photos/laptop-computer-on-glass-top-table-hpjSkU2UYSU)
- en: Every time I work with time series data, I end up writing complex and non-reusable
    code to filter it. Whether I’m doing simple filtering techniques like removing
    weekends, or more complex ones like removing specific time windows, I always resort
    to writing a quick and dirty function that works for the specific thing that I’m
    filtering in the moment, but never again.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我处理时间序列数据时，我都会写出复杂且不可重用的代码来进行过滤。无论是进行简单的过滤，如移除周末，还是更复杂的操作，如移除特定的时间段，我总是依赖编写一个简便且不太优雅的函数，这个函数仅适用于当前要过滤的内容，但再也不会使用。
- en: I finally decided to break that horrible cycle by writing a processor that allows
    me to filter time series no matter how complex the condition using very simple
    and concise inputs.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我最终决定通过编写一个处理器来打破这个恶性循环，该处理器可以让我用非常简单且简洁的输入过滤时间序列，无论条件多么复杂。
- en: 'Just an example of how it works in practice:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个它在实践中如何工作的示例：
- en: On weekdays, I want to remove < 6 am and ≥ 8 pm, and on weekends I want to remove
    < 8 am and ≥ 10 pm
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工作日，我想移除早于6点和晚于8点的时间段，而在周末，我想移除早于8点和晚于10点的时间段。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Without processor: expressive, but verbose and non-reusable'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有处理器：表达性强，但冗长且不可重用
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With processor: equally as expressive, concise and reusable'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有处理器：同样具有表达性，简洁且可重用
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this article I’ll explain how I came up with this solution, starting with
    the string format I chose to define filter conditions, followed by a design of
    the processor itself. Towards the end of the article, I’ll describe how this pipeline
    can be used alongside other pipelines to enable complex time series processing
    with only a few lines of code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将解释我是如何想出这个解决方案的，首先从我选择的字符串格式开始，用于定义过滤条件，然后设计处理器本身。在文章的最后部分，我将描述如何将这个处理流程与其他流程一起使用，以便只通过几行代码实现复杂的时间序列处理。
- en: If you’re interested in the code only, skip to the end of the article for a
    link to the repository.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只对代码感兴趣，可以跳到文章末尾获取链接，查看代码库。
- en: Expressive, Concise and Flexible Time Conditions?
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 富有表现力、简洁且灵活的时间条件？
- en: 'This was by far the hardest part of this task. Filtering time series based
    on time is conceptually easy, but it’s much harder to do with code. My initial
    thought was to use a string pattern that is most intuitive to myself:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这个任务中最难的部分。基于时间过滤时间序列在概念上很容易，但用代码实现却要困难得多。我的最初想法是使用一个对我自己来说最直观的字符串模式：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'However with this, we immediately run into a problem: we lose flexibility.
    This is because `06:00` is ambiguous, as it could mean `min:sec` or `hr:min` .
    So we’d almost always have to define the date format a-priori.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用这种方法，我们立即遇到了一个问题：我们失去了灵活性。这是因为`06:00`是模糊的，它可能表示`分钟:秒`或`小时:分钟`。因此，我们几乎总是必须事先定义日期格式。
- en: This prevents us from allowing complex filtering techniques, such as filtering
    a specific time ON specific days (e.g. only remove values in `[6am, 2pm)` on a
    Saturday).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得我们无法实现复杂的过滤技术，例如在特定的日期过滤特定的时间（例如，只在周六的`[6am, 2pm)`之间移除值）。
- en: 'Extending my pattern to something resembling [cron](https://crontab.guru/)
    would not help either:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将我的模式扩展为类似[cron](https://crontab.guru/)的形式也没有帮助：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The above can help with selecting specific months or years, but doesn’t allow
    flexibility of things like weekdays. Further, it is not very expressive with all
    the X’s and it’s really verbose.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法可以帮助选择特定的月份或年份，但无法提供像星期几这样的灵活性。此外，使用所有的X符号使得它不太具有表现力，而且非常冗长。
- en: 'I knew that I needed a pattern that allows chaining of individual time series
    components or units. Effectively something that is just like an if-statement:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道我需要一种允许链式连接单独时间序列组件或单位的模式。实际上，这种模式就像一个if语句：
- en: IF day == Saturday
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果日期 == 星期六
- en: AND time ≥ 06:00
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 且时间 ≥ 06:00
- en: AND time < 14:00
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 且时间 < 14:00
- en: So then I thought, why not use a pattern where you can add any conditions to
    a time-components, with the implicit assumption that they are all AND conditions?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我想，为什么不使用一种可以为时间组件添加任何条件的模式，并隐含假设它们都是AND条件呢？
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we have a pattern that is expressive, however it can still be ambiguous,
    since `time` implicitly assumes a date fomat. So I decided to go further:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个富有表现力的模式，但它仍然可能存在歧义，因为`time`隐含假设了日期格式。因此，我决定进一步深入：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now to make it less verbose, I borrowed the Polars duration string [format](https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.DataFrame.group_by_dynamic.html)
    (this is the equivalent of “frequency” if you are more familiar with Pandas),
    and viola:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为了减少冗余，我借用了Polars的持续时间字符串[格式](https://docs.pola.rs/py-polars/html/reference/dataframe/api/polars.DataFrame.group_by_dynamic.html)（如果你更熟悉Pandas的话，这等同于“频率”），于是就有了这个：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: What About Time Conditions that Need the OR Operator?
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么，关于需要OR运算符的时间条件呢？
- en: 'Let’s consider a different condition: to filter anything LESS than 6 am (inclusive)
    and > 2 pm (exclusive). A pattern like below would fail:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个不同的条件：过滤所有小于6 am（包含）且大于2 pm（不包含）的时间。如下的模式会失败：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Since we’d read it as: ≤ 6 am AND > 2 pm'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们会将其读作：≤ 6 am 且 > 2 pm
- en: No such value exists that satisfies these two conditions!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 没有满足这两个条件的值存在！
- en: 'But the solution to this is simple: apply AND conditions within a pattern,
    and apply OR conditions across different patterns. So:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但解决方案很简单：在一个模式内应用AND条件，在不同模式之间应用OR条件。所以：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Would be read as: ≤ 6 am OR > 2pm'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将被解读为：≤ 6 am 或 > 2 pm
- en: Why not allow OR statements within a pattern?
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么不允许在模式内使用OR语句呢？
- en: I did consider adding support for an OR statement within the pattern, e.g. using
    `|` or alternatively to let `,` denote the difference between a “left” and “right”
    condition. However, I found that these would be adding unnecessary complexity
    to parsing the pattern, without making the code any more expressive.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实考虑过在模式内添加支持OR语句，例如使用`|`，或者让`,`表示“左”条件和“右”条件之间的区别。然而，我发现这些会增加解析模式的复杂性，却并没有使代码更加简洁。
- en: 'I much prefer it simple: within a pattern we apply AND, across patterns we
    apply OR.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我更喜欢简单：在一个模式内我们应用AND，在不同模式之间我们应用OR。
- en: Edge Cases
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 边缘案例
- en: There is one edge-cases worth discussing here. The “if-statement” like pattern
    doesn’t always work.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个值得讨论的边缘案例。类似“if语句”的模式并不总是有效。
- en: 'Let’s consider filtering timestamps > 06:00\. If we simply defined:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑过滤大于`06:00`的时间戳。如果我们仅定义：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then do we interpret this as:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们是否应该这样解读：
- en: Remove all values where `hour>6`
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除所有`hour>6`的值
- en: Or remove all values where `time>06:00` ?
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者移除所有`time>06:00`的值？
- en: 'The latter makes more sense, but the current pattern doesn’t allow us to express
    that. So to explicitly state that we which to include timestamps greater than
    the 6th hour of the day, we must add what I call the cascade operator:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 后者更有意义，但当前的模式无法表达这一点。因此，为了明确说明我们希望包括大于当天第六个小时的时间戳，我们必须添加我所称的级联操作符：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Which would be read as:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它将被解读为：
- en: hour > 6
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: hour > 6
- en: OR (hour == 6 AND any(minute, second, millisecond, etc… > 0)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OR (hour == 6 AND any(minute, second, millisecond, etc… > 0)
- en: Which would be an accurate condition to capture time>06:00!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个准确的条件，用来捕获时间>06:00！
- en: The Code
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码
- en: Here I highlight important design bits to create a processor for filtering time
    series data.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我突出了设计中的重要部分，用于创建一个处理器来过滤时间序列数据。
- en: Parsing Logic
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析逻辑
- en: Since the pattern is quite simple, parsing it is really easy. All we need to
    do is loop over each pattern and keep track of the operator characters. What remains
    is then a list of operators, and a list of durations that they are applied to.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于模式非常简单，解析它其实非常容易。我们需要做的就是遍历每个模式，并跟踪操作符字符。剩下的就是操作符列表和它们应用的持续时间列表。
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now for each operator and duration string, we can extract metadata that helps
    us make the actual boolean rules later on.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于每个操作符和持续时间字符串，我们可以提取有助于我们稍后制定实际布尔规则的元数据。
- en: '[PRE13]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We now have, for each pattern, dictionaries for how to define the rules for
    each of it’s components. So if we went for a complicated example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对于每个模式，我们都有了字典来定义它的每个组件的规则。因此，如果我们选择一个复杂的例子：
- en: '[PRE14]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Notice that a single pattern can be split into multiple metadata dicts because
    it can be composed of multiple durations and operations.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一个模式可以被拆分成多个元数据字典，因为它可以由多个持续时间和操作组成。
- en: Creating Rules from metadata
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从元数据创建规则
- en: Having created metadata for each pattern, now comes the fun part of creating
    Polars rules!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了每个模式的元数据后，现在进入有趣的部分——创建Polars规则！
- en: Remember that within each pattern, we apply an AND condition, but across patterns
    we apply an OR condition. So in the simplest case, we need a wrapper that can
    take a list of all the metadata for a specific pattern, then apply the and condition
    to it. We can store this expression in a list alongside the expressions for all
    the other patterns, before applying the OR condition.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在每个模式内部，我们应用的是AND条件，但在不同模式之间，我们应用的是OR条件。所以在最简单的情况下，我们需要一个包装器，它可以接受特定模式的所有元数据列表，然后对其应用AND条件。我们可以将这个表达式存储在一个列表中，和所有其他模式的表达式一起，之后再应用OR条件。
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This looks complex… but we can convert bits of it into functions and the final
    code looks quite clean and readable:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来很复杂……但是我们可以将其中的一部分转换为函数，最终的代码看起来非常简洁易读：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Creating Rules for the cascade operator
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为级联操作符创建规则
- en: In the above code, I had an if condition only for the “simple” conditions… how
    do we do the cascade conditions?
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我只为“简单”条件设置了if条件……那么我们该如何处理级联条件呢？
- en: 'Remember from our discussion above that a pattern of “>6h*” means:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在我们上面的讨论中，“>6h*”的模式意味着：
- en: hour > 6 OR (hour == 6 AND any(min, s, ms, etc… > 0)
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: hour > 6 OR (hour == 6 AND any(min, s, ms, etc… > 0)
- en: So what we need, is to know for each unit, what the subsequent smaller units
    are.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们需要做的，是了解每个单位对应的后续较小单位。
- en: 'E.g. if I had “>6d*”, I should know to include “hour” in my **any** condition,
    thus:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我有">6d*"，我应该知道在我的**任何**条件中包括“小时”，因此：
- en: day > 6 OR (day == 6 AND any(hr, min, s, ms, etc… > 0)
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: day > 6 OR (day == 6 AND any(hr, min, s, ms, etc… > 0)
- en: 'This is easily achieved using a dictionary that maps each unit to its “next”
    smaller unit. E.g.: day → hour, hour → second, etc…'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过使用一个字典来轻松实现，该字典将每个单位映射到它的“下一个”较小单位。例如：day → hour，hour → second，等等……
- en: '[PRE17]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The start value is necessary because the any condition isn’t always > 0\. Because
    if I want to filter any values > February, then 2023–02–02 should be a part of
    it, but not 2023–02–01.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 启动值是必要的，因为任何条件不一定总是 > 0。因为如果我想过滤掉所有大于二月的值，那么2023-02-02应该包含在内，而2023-02-01则不应该。
- en: 'With this dictionary in mind, we can then easily create the any condition:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个字典，我们就可以轻松创建任何条件：
- en: '[PRE18]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The Bigger Picture
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更大的图景
- en: A processor like this isn’t just useful for ad-hoc analysis. It can be a core
    component your data processing pipelines. One really useful use case for me is
    to use it along with resampling. An easy filtering step would enable me to easy
    calculate metrics on time series with regular disruptions, or regular downtimes.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样的处理器不仅仅对临时分析有用。它可以成为数据处理管道的核心组件。对我来说，一个非常有用的用例是将其与重采样结合使用。一个简单的过滤步骤将使我能够轻松地计算具有规律性中断或规律性停机的时间序列的指标。
- en: Further, with a few simple modifications I can extend this processor to allow
    easy labelling of my time series. This allows me to add regressors to bits that
    I know behave differently, e.g. if I’m modelling a time series that jumps at specific
    hours, I can add a step regressor to only those parts.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过一些简单的修改，我可以扩展这个处理器，使其能够轻松标记我的时间序列。这使我能够为那些我知道行为不同的部分添加回归变量，例如，如果我正在建模一个在特定时刻跳变的时间序列，我可以只在那些部分添加一个阶跃回归变量。
- en: Concluding Remarks
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结语
- en: In this article I outlined a processor that enables easy, flexible and concise
    time series filtration on Polars datasets. The logic discussed can be extended
    to your favourite data frame processing library, such as Pandas with some minor
    changes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我概述了一个处理器，使得在Polars数据集上进行简便、灵活和简洁的时间序列过滤成为可能。所讨论的逻辑可以通过一些小的修改扩展到你最喜欢的数据框处理库，比如Pandas。
- en: Not only is the processor useful for ad-hoc time series analysis, but it can
    be the backbone of data processing if chained with other operations such as resampling,
    or if used to create extra features for modelling.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个处理器不仅对临时的时间序列分析有用，还可以成为数据处理的核心，如果与其他操作（如重采样）链式使用，或者用于为建模创建额外特征时。
- en: 'I’ll conclude with some extensions that I have in mind to make the code even
    better:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我将通过一些我想到的扩展来结束这篇文章，以使代码更加完善：
- en: I’m thinking of creating a short cut to define “weekend”, e.g. “==we”. This
    way I don’t wouldn’t need to explicitly define “>=6wd” which can be less clear
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我正在考虑创建一个快捷方式来定义“周末”，例如，“==we”。这样，我就不需要显式地定义“>=6wd”，这可能不太清晰。
- en: With proper design, I think it is possible to enable the addition of custom
    time identifiers. For example “==eve” to denote evening, the time for which can
    be user defined.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过适当的设计，我认为可以实现添加自定义时间标识符。例如，“==eve”表示傍晚，时间范围可以由用户定义。
- en: I’m definitely going to add support for simply labelling the data, as opposed
    to filtering it
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我一定会添加对仅仅标记数据的支持，而不是过滤数据。
- en: And I’m going to add support for being able to define the boundaries as “keep”,
    e.g. instead of defining [“<6h”, “>=20hr”] I can do [“>=6h<20hr”]
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我还打算添加支持将边界定义为“keep”，例如，代替定义["<6h", ">=20hr"]，我可以使用[">=6h<20hr"]。
- en: Where to find the code
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何查找代码
- en: This project is in its infancy, so items may move around. As of 23.05.2024,
    you can find the `FilterDataBasedOnTime` under `mix_n_match/main.py` .
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目还处于初期阶段，因此项目内容可能会有所变动。截止2024年5月23日，你可以在`mix_n_match/main.py`中找到`FilterDataBasedOnTime`。
- en: '[](https://github.com/namiyousef/mix-n-match?source=post_page-----fa9d5da734b3--------------------------------)
    [## GitHub - namiyousef/mix-n-match: repository for processing dataframes'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/namiyousef/mix-n-match?source=post_page-----fa9d5da734b3--------------------------------)
    [## GitHub - namiyousef/mix-n-match: 数据框处理的代码库'
- en: repository for processing dataframes. Contribute to namiyousef/mix-n-match development
    by creating an account on…
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据框处理的代码库。通过在GitHub上创建帐户，参与namiyousef/mix-n-match开发…
- en: github.com](https://github.com/namiyousef/mix-n-match?source=post_page-----fa9d5da734b3--------------------------------)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/namiyousef/mix-n-match?source=post_page-----fa9d5da734b3--------------------------------)
- en: '*All code, data and images by author unless specified otherwise*'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有代码、数据和图片均为作者所有*。'
