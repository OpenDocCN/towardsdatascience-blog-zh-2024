- en: Dynamic Visualizations in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的动态可视化
- en: 原文：[https://towardsdatascience.com/animated-plotting-in-python-with-opencv-and-matplotlib-d640462c41f4?source=collection_archive---------3-----------------------#2024-11-21](https://towardsdatascience.com/animated-plotting-in-python-with-opencv-and-matplotlib-d640462c41f4?source=collection_archive---------3-----------------------#2024-11-21)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/animated-plotting-in-python-with-opencv-and-matplotlib-d640462c41f4?source=collection_archive---------3-----------------------#2024-11-21](https://towardsdatascience.com/animated-plotting-in-python-with-opencv-and-matplotlib-d640462c41f4?source=collection_archive---------3-----------------------#2024-11-21)
- en: How to animate plots with OpenCV and Matplotlib
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何用OpenCV和Matplotlib制作动画图表
- en: '[](https://medium.com/@flip.flo.dev?source=post_page---byline--d640462c41f4--------------------------------)[![Florian
    Trautweiler](../Images/63aa57830a244986c400982f7b78d614.png)](https://medium.com/@flip.flo.dev?source=post_page---byline--d640462c41f4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d640462c41f4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d640462c41f4--------------------------------)
    [Florian Trautweiler](https://medium.com/@flip.flo.dev?source=post_page---byline--d640462c41f4--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@flip.flo.dev?source=post_page---byline--d640462c41f4--------------------------------)[![Florian
    Trautweiler](../Images/63aa57830a244986c400982f7b78d614.png)](https://medium.com/@flip.flo.dev?source=post_page---byline--d640462c41f4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d640462c41f4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d640462c41f4--------------------------------)
    [Florian Trautweiler](https://medium.com/@flip.flo.dev?source=post_page---byline--d640462c41f4--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d640462c41f4--------------------------------)
    ·8 min read·Nov 21, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d640462c41f4--------------------------------)
    ·8分钟阅读·2024年11月21日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/5c206bd2b728441d5c595ce0f3b6404f.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5c206bd2b728441d5c595ce0f3b6404f.png)'
- en: Tracking a ball trajectory and visualizing it’s vertical position in real-time
    animated plots
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 追踪球体轨迹并实时动画显示其垂直位置
- en: In **Computer Vision** a fundamental goal is to extract meaningful information
    from static images or video sequences. To understand these signals, it is often
    helpful to **visualize** them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在**计算机视觉**中，一个基本目标是从静态图像或视频序列中提取有意义的信息。为了理解这些信号，通常可视化它们是非常有帮助的。
- en: For example when tracking individual cars on a highway, we could draw bounding
    boxes around them or in the case of detecting problems in a product line on a
    conveyor belt, we could use a distinct color for anomalies. But what if the extracted
    information is of a more **numerical** nature and you want to visualize the **time
    dynamics** of this signal?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当在高速公路上追踪单个汽车时，我们可以在它们周围画上边界框；或者在生产线上的传送带上检测到问题时，我们可以使用不同的颜色来标记异常。但如果提取的信息是**数值**性质的，并且你想要可视化该信号的**时间动态**呢？
- en: Just showing the value as a number on the screen might not give you enough insight,
    especially when the signal is changing rapidly. In these cases a great way to
    visualize the signal is a plot with a **time axis**. In this post I am going to
    show you how you can combine the power of **OpenCV** and **Matplotlib** to create
    animated real-time visualizations of such signals.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 仅将值作为数字显示在屏幕上可能无法提供足够的洞察，尤其是当信号快速变化时。在这些情况下，可视化信号的一种非常好的方法是使用带有**时间轴**的图表。在这篇文章中，我将展示如何结合**OpenCV**和**Matplotlib**的强大功能，创建这种信号的动态实时可视化。
- en: 'The code and video I used for this project is available on GitHub:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这个项目中使用的代码和视频可以在GitHub上找到：
- en: '[](https://github.com/trflorian/ball-tracking-live-plot?source=post_page-----d640462c41f4--------------------------------)
    [## GitHub - trflorian/ball-tracking-live-plot: Tracking a ball using OpenCV and
    plotting the…'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/trflorian/ball-tracking-live-plot?source=post_page-----d640462c41f4--------------------------------)
    [## GitHub - trflorian/ball-tracking-live-plot: 使用OpenCV追踪球体并绘制…'
- en: Tracking a ball using OpenCV and plotting the trajectory using Matplotlib -
    trflorian/ball-tracking-live-plot
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用OpenCV追踪球体并用Matplotlib绘制轨迹 - trflorian/ball-tracking-live-plot
- en: github.com](https://github.com/trflorian/ball-tracking-live-plot?source=post_page-----d640462c41f4--------------------------------)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[github.com](https://github.com/trflorian/ball-tracking-live-plot?source=post_page-----d640462c41f4--------------------------------)'
- en: Plotting a Ball Trajectory
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制球体轨迹
- en: Let’s explore a toy problem where I recorded a video of a ball thrown vertically
    into the air. The goal is to track the ball in the video and plot it’s **position
    *p(t)***, **velocity *v(t)*** and **acceleration *a(t)*** over time.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来探索一个简单的问题，我录制了一个球垂直投向空中的视频。目标是跟踪视频中的球，并绘制其**位置 *p(t)***、**速度 *v(t)***和**加速度
    *a(t)***随时间的变化。
- en: '![](../Images/cbb6dde91a35cfe409e6e7077d25dfa5.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cbb6dde91a35cfe409e6e7077d25dfa5.png)'
- en: Input Video
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 输入视频
- en: Let’s define our reference frame to be the camera and for simplicity we only
    track the vertical position of the ball in the image. We expect the position to
    be a parabola, the velocity to linearly decrease and the acceleration to be constant.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将参考帧定义为摄像头，并为简单起见，我们仅追踪图像中球体的垂直位置。我们预计位置呈抛物线形状，速度呈线性减少，且加速度保持恒定。
- en: '![](../Images/e0854134188a624ac8728d8b27a37126.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e0854134188a624ac8728d8b27a37126.png)'
- en: Sketch of graphs we should expect
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们预期的图形草图
- en: Ball Segmentation
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 球体分割
- en: In a first step we need to identify the ball in each frame of the video sequence.
    Since the camera remains static, an easy way to detect the ball is using a background
    subtraction model, combined with a color model to remove the hand in the frame.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步，我们需要识别视频序列中每一帧的球体。由于摄像头保持静止，检测球体的一个简单方法是使用背景减除模型，并结合颜色模型来去除帧中的手部。
- en: First let’s get our video clip displayed with a simple loop using [**VideoCapture**](https://docs.opencv.org/4.x/dd/d43/tutorial_py_video_display.html)
    from **OpenCV**. We simply restart the video clip once it has reached its end.
    We also make sure to playback the video at the original frame rate by calculating
    the **sleep_time** in milliseconds based on the FPS of the video. Also make sure
    to release the resources at the end and close the windows.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过使用[**VideoCapture**](https://docs.opencv.org/4.x/dd/d43/tutorial_py_video_display.html)从**OpenCV**库播放视频片段，并用一个简单的循环显示视频。视频播放到结尾时，我们会重新启动视频。我们还确保以原始帧率回放视频，通过计算视频的FPS来确定**sleep_time**（以毫秒为单位）。最后，记得在结束时释放资源并关闭窗口。
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/de085d4139f222d448033a6c43aa09a5.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de085d4139f222d448033a6c43aa09a5.png)'
- en: Visualization of Input Video
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 输入视频的可视化
- en: 'Let’s first work on extracting a binary segmentation mask for the ball. This
    essentially means that we want to create a mask that is active for pixels of the
    ball and inactive for all other pixels. To do this, I will combine two masks:
    a motion mask and a color mask. The motion mask extracts the moving parts and
    the color mask mainly gets rid of the hand in the frame.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们要提取一个用于球体的二值分割掩模。这实际上意味着我们希望创建一个掩模，该掩模对于球体的像素是激活的，而对于其他所有像素是非激活的。为此，我将结合两个掩模：一个是运动掩模，另一个是颜色掩模。运动掩模提取运动部分，而颜色掩模主要去除帧中的手部。
- en: For the color filter, we can convert the image to the [**HSV**](https://en.wikipedia.org/wiki/HSL_and_HSV)
    color space and select a specific hue range (20–100) that contains the green colors
    of the ball but no skin color tones. I don’t filter on the saturation or brightness
    values, so we can use the full range (0–255).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于颜色滤波器，我们可以将图像转换到[**HSV**](https://en.wikipedia.org/wiki/HSL_and_HSV)颜色空间，并选择一个特定的色调范围（20–100），该范围包含球体的绿色颜色，而不包含皮肤色调。我不会对饱和度或亮度值进行过滤，因此我们可以使用完整的范围（0–255）。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To create a motion mask we can use a simple [**background subtraction**](https://en.wikipedia.org/wiki/Foreground_detection#Background_mixture_models)
    model. We use the first frame of the video for the background by setting the **learning
    rate to 1**. In the loop, we apply the background model to get the foreground
    mask, but don’t integrate new frames into it by setting the **learning rate to
    0**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个运动掩模，我们可以使用一个简单的[**背景减除**](https://en.wikipedia.org/wiki/Foreground_detection#Background_mixture_models)模型。我们使用视频的第一帧作为背景，并将**学习率设置为1**。在循环中，我们应用背景模型来获取前景掩模，但通过将**学习率设置为0**，不将新帧集成到模型中。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the next step, we can combine the two masks and apply a [**opening morphology**](https://en.wikipedia.org/wiki/Opening_(morphology))to
    get rid of the small noise and we end up with a perfect segmentation of the ball.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们可以将这两个掩模合并，并应用[**开运算形态学**](https://en.wikipedia.org/wiki/Opening_(morphology))来去除小的噪声，最终得到一个完美的球体分割。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/9267b761f4ad6bc0b8b5c340245d198d.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9267b761f4ad6bc0b8b5c340245d198d.png)'
- en: '**Top Left:** Video Sequence, **Top Right:** Color Mask, **Bottom Left:** Motion
    Mask, **Bottom Right:** Combined Mask'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**左上角：** 视频序列，**右上角：** 颜色掩模，**左下角：** 运动掩模，**右下角：** 组合掩模'
- en: Tracking the Ball
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跟踪球体
- en: The only thing we’re left with is our ball in the mask. To track the center
    of the ball, I first extract the contour of the ball and then take the center
    of its bounding box as reference point. In case some noise would make it through
    our mask, I am filtering the detected contours by size and only look at the largest
    one.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们剩下的唯一部分是图像中的球体遮罩。为了跟踪球的中心，我首先提取球的轮廓，然后以其边界框的中心作为参考点。如果有噪声通过了我们的遮罩，我会根据大小过滤掉检测到的轮廓，只关注最大的一个。
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can also add some annotations to our frame to visualize our detection. I
    am going to draw two circles, one for the center and one for the perimeter of
    the ball.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在帧中添加一些注释来可视化我们的检测。我将画两个圆，一个表示球的中心，另一个表示球的边缘。
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To keep track of the ball position, we can use a **list**. Whenever we detect
    the ball, we simply add the center position to the list. We can also visualize
    the trajectory by drawing lines between each of the segments in the tracked position
    list.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟踪球的位置，我们可以使用**列表**。每当我们检测到球时，我们只需将中心位置添加到列表中。我们还可以通过在跟踪位置列表中的每个片段之间绘制线条来可视化轨迹。
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/f650435618b04b8ca29fd3cd5b1b6325.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f650435618b04b8ca29fd3cd5b1b6325.png)'
- en: Visualization of the Ball Trajectory
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 球的轨迹可视化
- en: Creating the Plot
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建图表
- en: 'Now that we can track the ball, let’s start exploring how we can plot the signal
    using **matplotlib**. In a first step, we can create the final plot at the end
    of our video first and then in a second step we worry about how to animate it
    in real-time. To show the position, velocity and acceleration we can use three
    horizontally aligned subplots:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以跟踪球的位置，接下来让我们探索如何使用**matplotlib**绘制信号。第一步，我们可以先在视频结束时创建最终的图表，然后在第二步再考虑如何实时动画化它。为了显示位置、速度和加速度，我们可以使用三个水平排列的子图：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We are only interested in the y position in the image (array index 1), and to
    get a zero-offset position plot, we can subtract the first position.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只对图像中的 y 位置（数组索引 1）感兴趣，若要得到一个零偏移位置图，我们可以减去第一个位置。
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For the velocity we can use the difference in position as an approximation and
    for the acceleration we can use the difference of the velocity.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于速度，我们可以使用位置差异作为近似值，对于加速度，我们可以使用速度差异。
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And now we can plot these three values:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以绘制这三个值：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/1d470d2c80763c501bdbc00c9af25a39.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1d470d2c80763c501bdbc00c9af25a39.png)'
- en: Static Plots of the Position, Velocity and Acceleration
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 位置、速度和加速度的静态图
- en: Animating the Plot
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画化图表
- en: Now on to the fun part, we want to make this plot dynamic! Since we are working
    in an OpenCV GUI loop, we cannot directly use the **show** function from **matplotlib**,
    as this will just block the loop and not run our program. Instead we need to make
    use of some trickery ✨
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是有趣的部分，我们希望使这个图表动态化！由于我们在 OpenCV 的 GUI 循环中工作，我们不能直接使用**matplotlib**的**show**函数，因为这会阻塞循环，导致程序无法运行。相反，我们需要利用一些技巧
    ✨
- en: The main idea is to draw the plots in memory into a buffer and then display
    this buffer in our OpenCV window. By manually calling the draw function of the
    canvas, we can force the figure to be rendered to a buffer. We can then get this
    buffer and convert it to an array. Since the buffer is in **RGB** format, but
    OpenCV uses **BGR**, we need to convert the color order.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 主要思想是将图表绘制到内存中的缓冲区，然后在 OpenCV 窗口中显示这个缓冲区。通过手动调用画布的绘制函数，我们可以强制将图形渲染到缓冲区中。然后，我们可以获取这个缓冲区并将其转换为数组。由于缓冲区是**RGB**格式，但
    OpenCV 使用的是**BGR**格式，因此我们需要转换颜色顺序。
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Make sure that the **axs.plot** calls are now inside the frame loop:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 确保**axs.plot**调用现在位于帧循环内部：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now we can simply display the plot using the **imshow** function from OpenCV.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用 OpenCV 的**imshow**函数简单地显示图表。
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/4587f731ece8dfd1948f4c91e8287b31.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4587f731ece8dfd1948f4c91e8287b31.png)'
- en: Animated Plots
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 动画图表
- en: And voilà, you get your animated plot! However you will notice that the performance
    is quite low. Re-drawing the full plot every frame is quite expensive. To improve
    the performance, we need to make use of [**blitting**](https://matplotlib.org/stable/users/explain/animations/blitting.html).
    This is an advanced rendering technique, that draws static parts of the plot into
    a background image and only re-draws the changing foreground elements. To set
    this up, we first need to define a reference to each of our three plots before
    the frame loop.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，瞧，您得到了动画图！然而，您会注意到性能相当低下。每帧重新绘制整个图形非常耗费资源。为了提高性能，我们需要使用[**blitting**](https://matplotlib.org/stable/users/explain/animations/blitting.html)。这是一种高级渲染技术，它将图形的静态部分绘制到背景图像中，只重新绘制变化的前景元素。为了设置这一点，我们需要在帧循环之前，首先定义我们三个图形的引用。
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Then we need to draw the background of the figure once before the loop and get
    the background of each axis.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要在循环之前绘制一次图形的背景，并获取每个坐标轴的背景。
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the loop, we can now change the data for each of the plots and then for each
    subplot we need to restore the region’s background, draw the new plot and then
    call the **blit** function to apply the changes.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环中，我们现在可以改变每个图形的数据，然后对于每个子图，我们需要恢复区域的背景，绘制新的图形，并调用**blit**函数来应用更改。
- en: '[PRE16]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: And here we go, the plotting is sped up and the performance has drastically
    improved.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，绘图速度加快，性能得到了显著提升。
- en: '![](../Images/e9a892839ffccb8b9c85b6df8e94d300.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e9a892839ffccb8b9c85b6df8e94d300.png)'
- en: Optimized Plots
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 优化后的图形
- en: Conclusion
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this post, you learned how to apply simple Computer Vision techniques to
    extract a moving foreground object and track it’s trajectory. We then created
    an animated plot using **matplotlib** and **OpenCV**. The plotting is demonstrated
    on a toy example video with a ball being thrown vertically into the air. However,
    the tools and techniques used in this project are useful for all kinds of tasks
    and real-world applications! The full source code is available from my GitHub.
    I hope you learned something today, happy coding and take care!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，您学会了如何应用简单的计算机视觉技术提取一个移动的前景物体并追踪它的轨迹。接着，我们使用**matplotlib**和**OpenCV**创建了一个动画图。这个绘图演示是通过一个玩具示例视频实现的，视频中一个球被垂直抛向空中。然而，这个项目中使用的工具和技术对于各种任务和实际应用都非常有用！完整的源代码可以在我的GitHub上找到。希望今天您有所收获，祝编码愉快，保重！
- en: '[](https://github.com/trflorian/ball-tracking-live-plot?source=post_page-----d640462c41f4--------------------------------)
    [## GitHub - trflorian/ball-tracking-live-plot: Tracking a ball using OpenCV and
    plotting the…'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/trflorian/ball-tracking-live-plot?source=post_page-----d640462c41f4--------------------------------)
    [## GitHub - trflorian/ball-tracking-live-plot: 使用OpenCV追踪一个球并绘制轨迹…'
- en: Tracking a ball using OpenCV and plotting the trajectory using Matplotlib -
    trflorian/ball-tracking-live-plot
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用OpenCV追踪一个球并使用Matplotlib绘制轨迹 - trflorian/ball-tracking-live-plot
- en: github.com](https://github.com/trflorian/ball-tracking-live-plot?source=post_page-----d640462c41f4--------------------------------)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/trflorian/ball-tracking-live-plot?source=post_page-----d640462c41f4--------------------------------)
- en: '*All visualizations in this post were created by the author.*'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文中的所有可视化图表均由作者创建。*'
