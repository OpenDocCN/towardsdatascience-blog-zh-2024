- en: How to Build a RAG System with a Self-Querying Retriever in LangChain
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何构建一个带自查询检索器的RAG系统
- en: 原文：[https://towardsdatascience.com/how-to-build-a-rag-system-with-a-self-querying-retriever-in-langchain-16b4fa23e9ad?source=collection_archive---------0-----------------------#2024-04-25](https://towardsdatascience.com/how-to-build-a-rag-system-with-a-self-querying-retriever-in-langchain-16b4fa23e9ad?source=collection_archive---------0-----------------------#2024-04-25)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-build-a-rag-system-with-a-self-querying-retriever-in-langchain-16b4fa23e9ad?source=collection_archive---------0-----------------------#2024-04-25](https://towardsdatascience.com/how-to-build-a-rag-system-with-a-self-querying-retriever-in-langchain-16b4fa23e9ad?source=collection_archive---------0-----------------------#2024-04-25)
- en: RAG + Filtering with Metadata = Great Movie Recommendations 🍿
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RAG + 元数据过滤 = 极好的电影推荐 🍿
- en: '[](https://medium.com/@ed.izaguirre?source=post_page---byline--16b4fa23e9ad--------------------------------)[![Ed
    Izaguirre](../Images/c9eded1f06c47571baa662107428483f.png)](https://medium.com/@ed.izaguirre?source=post_page---byline--16b4fa23e9ad--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--16b4fa23e9ad--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--16b4fa23e9ad--------------------------------)
    [Ed Izaguirre](https://medium.com/@ed.izaguirre?source=post_page---byline--16b4fa23e9ad--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@ed.izaguirre?source=post_page---byline--16b4fa23e9ad--------------------------------)[![Ed
    Izaguirre](../Images/c9eded1f06c47571baa662107428483f.png)](https://medium.com/@ed.izaguirre?source=post_page---byline--16b4fa23e9ad--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--16b4fa23e9ad--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--16b4fa23e9ad--------------------------------)
    [Ed Izaguirre](https://medium.com/@ed.izaguirre?source=post_page---byline--16b4fa23e9ad--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--16b4fa23e9ad--------------------------------)
    ·12 min read·Apr 25, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--16b4fa23e9ad--------------------------------)
    ·阅读时间12分钟·2024年4月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f25989e1bd8f991ca2ce6d84a27ab9ef.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f25989e1bd8f991ca2ce6d84a27ab9ef.png)'
- en: Image of a person watching television. Image created in DALL·E 3.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 电视观看者的图片。图片由DALL·E 3创建。
- en: Table of Contents
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目录
- en: '[Retrieving the data](#86c4)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[检索数据](#86c4)'
- en: '[Upload documents to Pinecone](#53e3)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将文档上传到Pinecone](#53e3)'
- en: '[Creating the self-querying retriever](#21a7)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建自查询检索器](#21a7)'
- en: '[Creating the chat model](#409b)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建聊天模型](#409b)'
- en: '[Demonstration](#3817)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[演示](#3817)'
- en: Links
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 链接
- en: 'Edit: I have updated Film Search and rebranded it as Rosebud. I have also made
    it free to use! [Check out the website here.](https://filmsearch.azurewebsites.net/)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑：我更新了电影搜索，并将其重新命名为Rosebud。我还将其改为免费使用！ [在这里查看网站。](https://filmsearch.azurewebsites.net/)
- en: Also check out my new article improving this app! [Link.](/productionizing-a-rag-app-04c857e0966e)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还可以查看我关于改进这个应用程序的新文章！ [链接.](/productionizing-a-rag-app-04c857e0966e)
- en: '[Link to GitHub with code](https://github.com/EdIzaguirre/Rosebud)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub上的代码链接](https://github.com/EdIzaguirre/Rosebud)'
- en: Recently, I was browsing Max trying to find a movie to watch. Typically this
    involves browsing through the various lists presented to me, reading a few descriptions,
    and then picking something that sounds vaguely interesting. Sometimes it is a
    hit, sometimes not so much. I usually only touch the search function if I know
    the title of a film I am trying to watch or know the name of an actor I want.
    Otherwise searching is just not very useful.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我在浏览Max，试图找到一部电影观看。通常这包括浏览呈现给我的各种列表，阅读几个描述，然后挑选出听起来略微有趣的东西。有时候这是一个不错的选择，有时候则不尽如人意。如果我知道自己想看的电影标题或演员的名字，我通常才会使用搜索功能。否则，搜索功能就不太有用了。
- en: 'I was suddenly hit with an idea: why can’t I use natural language to query
    a movie based more on the *vibe* or the *substance* of a movie, rather than just
    a title or actor? For example, why can’t I fire up Max, Netflix, or Hulu and type
    one of the following queries into the search bar:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我突然有了一个想法：为什么我不能使用自然语言，根据电影的*氛围*或*内容*来查询电影，而不仅仅是基于标题或演员呢？例如，为什么我不能打开Max、Netflix或Hulu，然后在搜索栏中输入以下查询之一：
- en: '*Find me drama movies in English that are less than 2 hours long and feature
    pets.*'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*帮我找一些英文的戏剧电影，时长不超过2小时，并且有宠物。*'
- en: '*Recommend zombie movies, but make sure they are funny.*'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*推荐僵尸电影，但要确保它们是有趣的。*'
- en: '*I liked ‘Everything Everywhere all at Once’. Give me a similar film, but darker.*'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我喜欢《瞬息全宇宙》。给我一部类似的电影，但更黑暗一些。*'
- en: The beauty of this approach goes beyond a more natural way to search for films.
    This approach also preserves a user’s privacy. Rather than mine a user’s actions,
    likes, and dislikes to feed to a recommender system, **this system uses no user
    data at all.** The only thing required is a query.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的美妙之处不仅仅在于提供了更自然的搜索电影方式。这种方法还保护了用户的隐私。**这个系统完全不使用任何用户数据**。所需的唯一内容就是一个查询。
- en: So I built Film Search. This is a RAG-based system that takes in a user’s query,
    embeds it, and does a similarity search to find similar films. But it goes beyond
    vanilla RAG. This system uses what is called a **self-querying retriever.** What
    this allows for is filtering movies by their metadata, before doing a similarity
    search. So if a user has a query like “*Recommend horror movies made after 1980
    that features lots of explosions*”, the search will first filter out all films
    that are not “horror movies made after the year 1980” before doing a similarity
    search for films that “feature lots of explosions”.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我构建了电影搜索系统。这是一个基于RAG（检索增强生成）的系统，它接收用户查询，将其嵌入并进行相似性搜索，找到类似的电影。但它不仅仅是一个普通的RAG系统。这个系统使用了所谓的**自查询检索器**。这使得在进行相似性搜索之前，能够通过电影的元数据对其进行筛选。所以，如果用户的查询是“*推荐1980年后制作的恐怖电影，并且包含大量爆炸场面*”，搜索会首先过滤掉所有不是“1980年后制作的恐怖电影”的影片，然后再进行关于“包含大量爆炸场面”的相似性搜索。
- en: In this article, I will provide a high-level overview of how I made this system.
    The full code is provided in the links above if you want to go deeper.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将提供一个关于如何构建这个系统的高层次概述。如果你想深入了解，完整的代码可以通过上面的链接获取。
- en: Let’s dive in.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨。
- en: Retrieving the data
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取数据
- en: 'The data for this project came from [The Movie Database (TMDB)](https://developer.themoviedb.org/docs/getting-started),
    with permission from the owner. Their API was simple to use, well maintained,
    and not heavily rate limited. I pulled the following film attributes from their
    API:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目的数据来自于[The Movie Database (TMDB)](https://developer.themoviedb.org/docs/getting-started)，并且得到了所有者的许可。他们的API简单易用，维护良好，并且限制不多。我从他们的API中提取了以下电影属性：
- en: Title
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 片名
- en: Runtime (minutes)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 片长（分钟）
- en: Language
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言
- en: Overview
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概述
- en: Release Year
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上映年份
- en: Genre
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型
- en: Keywords describing the film
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述电影的关键词
- en: Actors
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 演员
- en: Directors
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导演
- en: Places to stream
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流媒体播放地点
- en: Places to buy
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购买地点
- en: Places to rent
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 租赁地点
- en: List of Production Companies
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制作公司列表
- en: 'Below is a snippet of how data was pulled using the TMDB API and the response
    library from Python:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何使用TMDB API和Python的响应库提取数据的片段：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice that the query requires movie IDs (which were also obtained using TMDB),
    as well as `append_to_response`, which allows me to pull several types of data
    e.g. keywords, watch providers, credits (directors and actors) in additional to
    some basic information about the film. There is also some basic scaffolding code
    in case I hit a rate limit, although this was never observed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，查询需要电影ID（这些ID也是通过TMDB获得的），以及`append_to_response`，它允许我拉取多种类型的数据，例如关键词、观看提供者、信用信息（导演和演员）以及一些关于电影的基本信息。这里还包括一些基本的框架代码，以防我遇到速率限制，尽管我从未遇到过这种情况。
- en: 'We then have to parse the JSON response. Here is a snippet showing how this
    was done for parsing the actors and directors who worked on a film:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要解析JSON响应。以下是一个片段，展示了如何解析参与电影制作的演员和导演信息：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that I limited the number of actors to the top five in a film. I also had
    to specify that I was only interested in directors, as the response included other
    types of crew members such as editors, costume designers, etc.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我将每部电影的演员数量限制在前五名。我还必须指定只关心导演，因为响应中还包含了其他类型的工作人员，比如剪辑师、服装设计师等。
- en: All of this data was then compiled into CSV files. Each attribute listed above
    became a column, and each row now represents a particular film. Below is a short
    snippet of films from the `2008_movie_collection_data.csv` file that was created
    programatically. For this project I got roughly the 100 top films from the years
    1920–2023.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些数据随后被汇总成了CSV文件。上面列出的每个属性都变成了一个列，而每一行现在代表一部特定的电影。以下是从`2008_movie_collection_data.csv`文件中提取的一小段电影数据，这个文件是通过编程生成的。在这个项目中，我大约获取了1920年至2023年间的100部顶级电影。
- en: Snippet of movie data for demonstration purposes. By author.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 用于演示的电影数据片段。作者提供。
- en: Believe it or not, I still have not seen Kung Fu Panda. Perhaps I’ll have to
    after this project.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 信不信由你，我至今还没有看过《功夫熊猫》。或许在这个项目之后我得去看一看。
- en: Upload documents to Pinecone
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上传文档到Pinecone
- en: Next I had to upload the csv data to Pinecone. Typically chunking is important
    in a RAG system, but here each “document” (row of a CSV file) is fairly short,
    so chunking was not a concern. I first had to convert each CSV file to a LangChain
    document, and then specify which fields should be the primary content and which
    fields should be the metadata.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我需要将csv数据上传到Pinecone。在RAG系统中，通常需要对数据进行分块，但这里每个“文档”（CSV文件中的一行）都相对较短，因此不需要分块。我首先将每个CSV文件转换为LangChain文档，然后指定哪些字段应该是主要内容，哪些字段应该是metadata。
- en: 'Here is a snippet of code used to construct these documents:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是用于构建这些文档的代码片段：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`DirectoryLoader` from LangChain takes care of loading all csv files into documents.
    Then I need to specify what should be `page_content` and what should be `metadata`
    . This is an important decision. `page_content` will be embedded and used in similarity
    search during the retrieval phase. `metadata` will be used solely for filtering
    purposes before similarity search is done. I decided to take the `overview` and
    `keywords` properties and embed those, and the rest of the properties would be
    metadata. Further tweaking should be done to see if perhaps `title` should also
    be included in `page_content`, but I found this configuration works well for most
    user queries.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 来自LangChain的`DirectoryLoader`负责将所有csv文件加载为文档。然后，我需要指定什么内容应该是`page_content`，什么内容应该是`metadata`。这是一个重要的决定。`page_content`将被嵌入并在检索阶段用于相似度搜索。`metadata`仅在相似度搜索之前用于过滤。
    我决定将`overview`和`keywords`属性嵌入到`page_content`中，而其他属性则作为metadata。进一步调整应考虑是否将`title`也包含在`page_content`中，但我发现这个配置对于大多数用户查询效果很好。
- en: 'Then the documents have to be uploaded to Pinecone. This is a fairly straightforward
    process:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，文档需要上传到Pinecone。这是一个相当直接的过程：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'I’ll just highlight a few things here:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我只想强调几点：
- en: Using an `SQLRecordManager` ensures that duplicate documents are not uploaded
    to Pinecone if this code is run multiple times. If a document is modified, only
    that document is modified in the vector store.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`SQLRecordManager`可以确保如果这段代码运行多次，重复的文档不会被上传到Pinecone。如果文档被修改，只有该文档会在向量存储中被更新。
- en: We are using the classic `text-embedding-ada-002` from OpenAI as our embedding
    model.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用的是OpenAI的经典`text-embedding-ada-002`嵌入模型。
- en: Creating the self-querying retriever
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自查询检索器
- en: The self-querying retriever will allow us to filter the movies that are retrieved
    during RAG via the metadata we defined earlier. This will dramatically increase
    the usefulness of our film recommender.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 自查询检索器将允许我们通过之前定义的metadata过滤在RAG过程中检索的电影。这将大大提高我们电影推荐系统的实用性。
- en: 'One important consideration when choosing your vector store is to make sure
    that it supports filtering by metadata, because not all do. [Here is a list of
    databases](https://python.langchain.com/docs/integrations/retrievers/self_query)
    by LangChain that support self-querying retrieval. Another important consideration
    is what types of comparators are allowed for each vector store. Comparators are
    the method by which we filter via metadata. For example, we can use the `eq` comparator
    to make sure that our film falls under the science fiction genre: `eq(''Genre'',
    ''Science Fiction'')` . Not all vector stores allow for all comparators. As an
    example, check out the [allowed comparators in Weaviate](https://weaviate.io/developers/weaviate/api/graphql/filters#filter-structure)
    and how they vary from the [comparators in Pinecone](https://docs.pinecone.io/guides/data/filtering-with-metadata#metadata-query-language).
    We need to tell the model about what comparators are allowed to prevent it from
    accidentally writing a forbidden query.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 选择向量存储时，一个重要的考虑因素是确保它支持通过metadata进行过滤，因为并非所有向量存储都支持。[这是LangChain支持自查询检索的数据库列表](https://python.langchain.com/docs/integrations/retrievers/self_query)。另一个重要的考虑因素是每个向量存储允许哪些类型的比较器。比较器是我们通过metadata进行过滤的方法。例如，我们可以使用`eq`比较器来确保我们的电影属于科幻类型：`eq('Genre',
    'Science Fiction')`。并非所有向量存储都允许所有比较器。作为例子，请查看[Weaviate中允许的比较器](https://weaviate.io/developers/weaviate/api/graphql/filters#filter-structure)，以及它们与[Pinecone中的比较器](https://docs.pinecone.io/guides/data/filtering-with-metadata#metadata-query-language)的差异。我们需要告诉模型允许哪些比较器，以防止它意外地写出不允许的查询。
- en: In addition to telling the model what comparators exist, we can also feed the
    model examples of user queries and corresponding filters. This is known as **few-shot
    learning**, and it is invaluable to help guide your model.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 除了告诉模型存在哪些比较器，我们还可以给模型提供一些用户查询的示例和相应的筛选条件。这被称为**少量样本学习**，它对于帮助指导你的模型非常宝贵。
- en: 'To see where this helps, take a look at the following two user queries:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看看这有什么帮助，看看以下两个用户查询：
- en: '*“Recommend some films by Yorgos Lanthimos.”*'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*“推荐一些由约尔戈斯·兰西莫斯导演的电影。”*'
- en: '*“Films similar to Yorgos Lanthmios movies.”*'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*“类似于约尔戈斯·兰西莫斯电影的电影。”*'
- en: It is easy for my metadata filtering model to write the same filter query for
    each of these examples, even though I want them to be treated differently. The
    first should yield only films directed **by** Lanthimos, while the second should
    yield films that have a similar **vibe** to Lanthimos films. To ensure this behavior,
    I spoon-feed the model examples of my desired behavior. The beauty with language
    models is that they can use their “reasoning” abilities and world knowledge to
    generalize from these few-shot examples to other user queries.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的元数据筛选模型来说，即使我希望它们被不同对待，也很容易为每个示例编写相同的筛选查询。第一个应该只返回由**兰西莫斯**导演的电影，而第二个则应该返回与兰西莫斯电影有相似**氛围**的电影。为了确保这种行为，我向模型提供了我期望的行为示例。语言模型的美妙之处在于，它们可以利用其“推理”能力和世界知识，从这些少量的示例中推广到其他用户查询。
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In addition to examples, the model also has to know a description of each metadata
    field. This helps it understand what metadata filtering is possible.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 除了示例，模型还必须了解每个元数据字段的描述。这有助于它理解可能的元数据筛选。
- en: Finally, we construct our chain. Here `query_model` is an instance of GPT-4
    Turbo using the OpenAI API. I recommend using GPT-4 instead of 3.5 for writing
    these metadata filter queries, since this is a critical step and one that 3.5
    messes up on more frequently. `search_kwargs={'k':10}` tells the retriever to
    pull up the ten most similar films based on the user query.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们构建我们的链条。这里的`query_model`是使用OpenAI API的GPT-4 Turbo实例。我建议使用GPT-4而不是3.5来编写这些元数据筛选查询，因为这是一个关键步骤，而3.5在这一点上更容易出错。`search_kwargs={'k':10}`告诉检索器根据用户查询拉取最相似的10部电影。
- en: Creating the chat model
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建聊天模型
- en: Finally, after building the self-querying retriever we can build the standard
    RAG model on top of it. We begin by defining our chat model. This is what I call
    a summary model because it takes in a context (retrieved films + system message)
    and responds with a summary of each recommendation. This model can be GPT-3.5
    Turbo if you are trying to keep costs down, or GPT-4 Turbo if you want the absolute
    best results.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在构建自查询检索器之后，我们可以在其基础上构建标准的RAG模型。我们从定义聊天模型开始。我称之为总结模型，因为它接受一个上下文（检索到的电影 +
    系统消息），并以每个推荐的摘要进行回应。如果你想降低成本，可以使用GPT-3.5 Turbo，或者如果你想要最好的结果，可以使用GPT-4 Turbo。
- en: 'In the system message I tell the bot what its goal is, and provide a series
    of recommendations and restrictions, the **most important of which is to not recommend
    a film that is not provided to it by the self-querying retriever.** In testing,
    I was having issues when a user query yielded no films from the database. For
    example, the query: *“Recommend some horror films starring Matt Damon directed
    by Wes Anderson made before 1980”* would cause the self-querying retriever to
    retrieve no films (because as awesome as it sounds that movie doesn’t exist).
    Presented with no film data in its context, the model would use its own (faulty)
    memory to try and recommend some films. This is not good behavior. I don’t want
    a Netflix recommender to discuss films that are not in the database. The system
    message below managed to stop this behavior. I did notice that GPT-4 is better
    at following instructions than GPT-3.5, which is expected.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统消息中，我告诉机器人它的目标是什么，并提供一系列建议和限制，其中**最重要的是不要推荐任何没有通过自查询检索器提供的电影**。在测试中，当用户查询没有从数据库中检索到电影时，我遇到了问题。例如，查询：*“推荐一些由马特·达蒙主演、韦斯·安德森导演的恐怖片，且是在1980年之前制作的”*会导致自查询检索器无法检索到任何电影（因为虽然听起来很棒，但这样的电影并不存在）。在没有电影数据的上下文中，模型会使用它自己的（错误的）记忆来尝试推荐一些电影。这种行为不好。我不希望Netflix推荐系统讨论数据库中不存在的电影。下面的系统消息成功阻止了这种行为。我确实注意到，GPT-4比GPT-3.5更善于遵循指令，这是预期之中的。
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`format_docs` is used to format the information presented to the model so that
    it is easy to understand and parse. We present to the model both the `page_content`
    (overview and keywords) as well as the `metadata` (all other movie properties);
    anything it might need to better recommend a film to the user.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`format_docs` 用于格式化呈现给模型的信息，以便它易于理解和解析。我们将 `page_content`（概述和关键词）以及 `metadata`（所有其他电影属性）同时呈现给模型；任何它可能需要的信息，以便更好地向用户推荐电影。'
- en: '`rag_chain_from_docs` is a chain that takes the retrieved documents, formats
    them using `format_docs` , feeds the formatted documents into the context that
    the model then uses to answer the question. Finally we create `rag_chain_with_source`
    , which is a `RunnableParallel` that, as its name suggests, runs two operations
    in parallel: the self-querying retriever goes off to retrieve similar documents
    while the the query is simply passed to the model via `RunnablePassthrough()`
    . The results from the parallel components are then combined, and `rag_chain_from_docs`
    is used to generate the answer. Here `source` refers to the retriever, which access
    to all ‘source’ documents.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`rag_chain_from_docs` 是一个链条，它接受检索到的文档，通过 `format_docs` 格式化，然后将格式化后的文档输入模型上下文中，模型基于这些内容回答问题。最后，我们创建了
    `rag_chain_with_source`，这是一个 `RunnableParallel`，顾名思义，它同时执行两个操作：自查询检索器去检索相似的文档，而查询则通过
    `RunnablePassthrough()` 直接传递给模型。然后，来自并行组件的结果被组合，`rag_chain_from_docs` 用来生成答案。这里的
    `source` 指的是检索器，它访问所有的‘源’文档。'
- en: 'Because I want the answer to be streamed (e.g. presented to the user chunk
    by chunk like ChatGPT), we use the following code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我希望答案是逐步流式传输的（例如，像ChatGPT一样逐块展示给用户），我们使用以下代码：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Demonstration
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演示
- en: 'Now to the fun part: playing with the model. As mentioned previously, Streamlit
    was used to create the frontend and for hosting the app. I won’t discuss the code
    for the UI here; please see the raw code for details on the implementation. It
    is fairly straightforward, and there are lots of other examples on the [Streamlit
    website](https://docs.streamlit.io/knowledge-base/tutorials/build-conversational-apps).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是有趣的部分：与模型互动。如前所述，Streamlit 被用来创建前端并托管应用程序。我在这里不讨论UI的代码；有关实现的详细信息，请参见原始代码。它相当直接，而且在[Streamlit
    网站](https://docs.streamlit.io/knowledge-base/tutorials/build-conversational-apps)上有很多其他示例。
- en: '![](../Images/02b3a62862751b327a753fd250ba3e74.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/02b3a62862751b327a753fd250ba3e74.png)'
- en: Film Search UI. By author.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 电影搜索界面。作者提供。
- en: 'There are several suggestions you can use, but let’s try our own query:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个建议可以使用，但让我们尝试我们自己的查询：
- en: '![](../Images/7ad4d1b3125c7faf549f71d8c1afbacf.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ad4d1b3125c7faf549f71d8c1afbacf.png)'
- en: Example query and model response. By author.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 示例查询和模型响应。作者提供。
- en: 'Behind the scenes, the self-querying retriever made sure to filter out any
    films that were not in the French language. Then, it performed a similarity search
    for “coming of age stories”, resulting in ten films in the context. Finally the
    summarizer bot selected five films for recommendation. Note the range of films
    suggested: some with release dates as early as 1959 to as late as 2012\. For convenience
    I ensure the bot includes the film’s runtime, release year, streaming providers,
    and a brief recommendation handcrafted by the bot.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在后台，自查询检索器确保过滤掉任何非法语的电影。然后，它执行了一个“成长故事”的相似性搜索，结果是上下文中有十部电影。最后，摘要机器人选择了五部电影进行推荐。请注意推荐的电影范围：一些电影的上映日期早至1959年，最晚的为2012年。为了方便起见，我确保机器人包括电影的片长、上映年份、流媒体提供商，以及由机器人精心制作的简短推荐。
- en: '*(Side note: If you haven’t seen* [*The 400 Blows*](https://en.wikipedia.org/wiki/The_400_Blows)*,
    stop whatever you are doing, and go* [*watch it immediately*](https://www.youtube.com/watch?v=PvjUhgtn_-U)*.)*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*(附注：如果你还没有看过* [*400击*](https://en.wikipedia.org/wiki/The_400_Blows)*，立刻停下你正在做的事情，去*
    [*立即观看*](https://www.youtube.com/watch?v=PvjUhgtn_-U)*。)*'
- en: Qualities that normally are seen as negatives in a large language model, such
    as the non-deterministic nature of its responses, are now positive. Ask the model
    the same question twice and you may get slightly different recommendations.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型语言模型中，通常被视为负面的特性，比如其响应的非确定性，现在变成了积极的。你如果向模型问同一个问题两次，可能会得到略有不同的推荐。
- en: 'It is important to note some limitations of the current implementation:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意当前实现的一些限制：
- en: There is no saving of recommendations. Users likely would want to revisit old
    recommendations.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不支持保存推荐。用户可能希望重新访问以前的推荐。
- en: Manual updating of raw data from The Movie Database. Automating this and having
    it update weekly would be a good idea.
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动更新来自电影数据库的原始数据。将其自动化并每周更新一次是一个不错的主意。
- en: Bad metadata filtering by the self-querying retrieval. For example the query
    “Ben Affleck films” could be problematic. This could mean films where Ben Affleck
    is the **star** or films that have been **directed** by Ben Affleck. This is an
    example where clarification of the query would be helpful.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自查询检索中的元数据过滤不准确。例如，查询“Ben Affleck films”可能会出现问题。这可能指的是由本·阿弗莱克**主演**的电影，或者是由本·阿弗莱克**执导**的电影。这是一个需要澄清查询的例子。
- en: Possible improvements to this project could be to perform a [re-ranking of documents](https://python.langchain.com/docs/integrations/retrievers/cohere-reranker)
    after retrieval. It could also be interesting to have a chat model that you can
    converse with in multi-turn conversations, rather then just a QA bot. One could
    also create an [agent recommender](https://python.langchain.com/docs/integrations/tools/human_tools)
    that prompts the user with a clarifying question if the query is not clear.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个项目的可能改进之一是在检索后进行[文档重新排序](https://python.langchain.com/docs/integrations/retrievers/cohere-reranker)。还可以有一个聊天模型，可以进行多轮对话，而不仅仅是一个问答机器人。还可以创建一个[推荐代理](https://python.langchain.com/docs/integrations/tools/human_tools)，如果查询不明确，可以向用户提出澄清问题。
- en: Have fun searching for films!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 玩得开心，搜索电影吧！
