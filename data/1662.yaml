- en: Optimum Assignment and the Hungarian Algorithm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最优分配与匈牙利算法
- en: 原文：[https://towardsdatascience.com/optimum-assignment-and-the-hungarian-algorithm-8b1027628028?source=collection_archive---------1-----------------------#2024-07-07](https://towardsdatascience.com/optimum-assignment-and-the-hungarian-algorithm-8b1027628028?source=collection_archive---------1-----------------------#2024-07-07)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/optimum-assignment-and-the-hungarian-algorithm-8b1027628028?source=collection_archive---------1-----------------------#2024-07-07](https://towardsdatascience.com/optimum-assignment-and-the-hungarian-algorithm-8b1027628028?source=collection_archive---------1-----------------------#2024-07-07)
- en: '![](../Images/55cb3b2d5fc4198c9f32a81ef3ee708a.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/55cb3b2d5fc4198c9f32a81ef3ee708a.png)'
- en: Hungarian Algorithm in Action! Image by author.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 匈牙利算法在实际应用中的效果！图片来自作者。
- en: This article provides a step-by-step example of how the Hungarian algorithm
    solves the optimal assignment problem on a graph
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本文提供了一个逐步示例，展示了匈牙利算法如何在图上解决最优分配问题。
- en: '[](https://medium.com/@prasannasethuraman?source=post_page---byline--8b1027628028--------------------------------)[![Prasanna
    Sethuraman](../Images/a4cd741049eb38e723338254c86d027f.png)](https://medium.com/@prasannasethuraman?source=post_page---byline--8b1027628028--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--8b1027628028--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--8b1027628028--------------------------------)
    [Prasanna Sethuraman](https://medium.com/@prasannasethuraman?source=post_page---byline--8b1027628028--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@prasannasethuraman?source=post_page---byline--8b1027628028--------------------------------)[![Prasanna
    Sethuraman](../Images/a4cd741049eb38e723338254c86d027f.png)](https://medium.com/@prasannasethuraman?source=post_page---byline--8b1027628028--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--8b1027628028--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--8b1027628028--------------------------------)
    [Prasanna Sethuraman](https://medium.com/@prasannasethuraman?source=post_page---byline--8b1027628028--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--8b1027628028--------------------------------)
    ·11 min read·Jul 7, 2024
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--8b1027628028--------------------------------)
    ·11 分钟阅读·2024年7月7日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: The reason I am writing this article is because I struggled for a few days to
    understand how the Hungarian Algorithm works on a graph. The matrix version is
    much easier to understand, but it does not provide the required insight. All the
    excellent information I found on the web fell short of providing me the clarity
    needed to intuitively understand why the algorithm is doing what it does.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我写这篇文章的原因是因为我花了几天时间才理解匈牙利算法在图上的工作原理。矩阵版本更容易理解，但它没有提供所需的洞察力。我在网上找到的所有优秀资料都未能让我清晰地理解算法为什么要按这样做。
- en: It was also not straightforward for me to translate the algorithm descriptions
    into a working example. While the various LLM tools we have today helped in rephrasing
    the description of the algorithm in various ways, they all failed miserably when
    I asked them to generate a working step by step example. So I persevered to generate
    an example of the Hungarian algorithm working its magic on a graph. I present
    this step by step example here and the intuition I gained from this exercise,
    in the hope that it helps others trying to learn this wonderful algorithm to solve
    the problem of optimum assignment.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，将算法描述转化为一个可工作的示例并不简单。尽管我们今天拥有的各种大型语言模型（LLM）工具帮助我用多种方式重新措辞算法描述，但当我要求它们生成一个逐步的工作示例时，它们都失败了。所以我坚持不懈地生成了一个匈牙利算法在图上应用的示例。我在这里展示这个逐步示例以及从这次练习中获得的直觉，希望能帮助其他想学习这个精彩算法以解决最优分配问题的人。
- en: The optimal assignment problem is to find a one-to-one match from a set of nodes
    to another set of nodes, where the edge between every pair of nodes has a cost
    associated with it, and the generated matching must ensure the minimum total cost.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最优分配问题是从一组节点到另一组节点找到一对一匹配，其中每一对节点之间的边都有一个相关的成本，生成的匹配必须确保总成本最小。
- en: This problem is pervasive. It could be assigning a set of people to a set of
    jobs, with each one demanding a specific price for a specific job, and the problem
    is then assigning people to the jobs such that the total cost is minimized. It
    could be assigning a set of available taxis to the set of people looking for taxis,
    with each taxi requiring a specific time to reach a specific person. The Hungarian
    algorithm is used to solve this problem every time we book a Uber or Ola.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题是普遍存在的。它可以是将一组人分配到一组工作，每个工作需要为特定工作支付特定的价格，然后问题就是将人分配到工作上，以使总成本最小化。它也可以是将一组可用的出租车分配给需要出租车的一组人，每辆出租车需要特定的时间到达特定的人。每次我们预定Uber或Ola时，都会使用匈牙利算法来解决这个问题。
- en: The assignment problem is best represented as a *bipartite* graph, which is
    a graph with two distinct set of nodes, and the edges never connect nodes from
    the same set. We take the taxi matching example, and the bipartite graph here
    shows the possible connections between the nodes. Edge weights indicate the time
    (in minutes) it takes for the specific taxi to reach a specific person. If all
    the nodes from one set are connected to all the nodes from the other set, the
    graph is called *complete*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 分配问题最好用*二分*图来表示，二分图是一个具有两个不同节点集的图，且边从不连接同一集合中的节点。我们以出租车匹配问题为例，二分图显示了节点之间的所有可能连接。边的权重表示特定出租车到达特定人的时间（以分钟为单位）。如果一个集合中的所有节点都与另一个集合中的所有节点连接，则该图被称为*完全*图。
- en: '![](../Images/b4acbdcaf63a667f569f17df254c2e37.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b4acbdcaf63a667f569f17df254c2e37.png)'
- en: Bipartite graph for the taxi matching problem. Image by author
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 用于出租车匹配问题的二分图。图片由作者提供
- en: 'In this example, we need to map 4 persons to 4 taxis. We can brute force the
    solution:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们需要将4个人映射到4辆出租车上。我们可以暴力破解求解：
- en: For the first person, there are four possible taxi assignments, and we can pick
    any one of them
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于第一个人，有四个可能的出租车分配，我们可以选择其中任何一辆
- en: For the second person, there are three taxis left, and we pick one of the three
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于第二个人，剩下三辆出租车，我们从这三辆中选择一辆
- en: For the third person, we pick one of the two taxis left
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于第三个人，我们选择剩下的两辆出租车中的一辆
- en: For the last person, we pick the remaining taxi
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于最后一个人，我们选择剩余的出租车
- en: So the total number of possible assignments are 4 x 3 x 2 x 1, which is 4 factorial.
    We then calculate the total cost for all these 4! assignments and pick that assignment
    that has the lowest cost. For assignment problems of smaller size, brute force
    may still be feasible. But as *n*, the number of people/taxis grow, the *n!* becomes
    quite large.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以可能的分配总数是4 x 3 x 2 x 1，即4的阶乘。然后我们计算所有这些4!种分配的总成本，并选择成本最低的那一项。对于较小规模的分配问题，暴力破解仍然是可行的。但是随着*n*（人或出租车的数量）的增加，*n!*会变得非常大。
- en: The other approach is a greedy algorithm. You pick one person, assign the taxi
    with minimum cost to that person, then pick the next person, assign the one of
    the remaining taxis with minimum cost, and so on. In this example, the minimum
    cost assignment is not possible for the last person because the taxi that can
    get to him at the shortest time has been assigned to another person already. So
    the algorithm picks the next available taxi with minimum cost. The last person
    therefore suffers for the greed of everyone else. The solution to the greedy algorithm
    is can be seen in the graph here. There is no guarantee that this greedy approach
    will result in an optimum assignment, though in this example, it does result in
    achieving the minimum cost of 36.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是贪心算法。你选择一个人，将最小成本的出租车分配给他，然后选择下一个人，给他分配剩余出租车中最小成本的那一辆，以此类推。在这个例子中，对于最后一个人，不可能进行最小成本分配，因为可以最短时间到达他的出租车已经分配给了另一个人。所以算法选择了下一个可用的最小成本出租车。因此，最后一个人由于其他人的贪心而受到影响。贪心算法的解决方案可以在这里的图中看到。虽然在这个例子中，贪心方法确实达到了最低成本36，但不能保证这种贪心方法会得到最优分配。
- en: '![](../Images/895c54d2aa90a05c20171682b1416de6.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/895c54d2aa90a05c20171682b1416de6.png)'
- en: Greedy assignment. Image by author
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 贪心分配。图片由作者提供
- en: The Hungarian algorithm provides an efficient way of finding the optimum solution.
    We will start with the matrix algorithm first. We can represent the graph as an
    adjacency matrix where the weight of each edge is one entry of the matrix. The
    graph and its adjacency matrix can be seen here.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 匈牙利算法提供了一种高效的寻找最优解的方法。我们将首先从矩阵算法开始。我们可以将图表示为一个邻接矩阵，其中每条边的权重是矩阵中的一个条目。图和其邻接矩阵可以在这里看到。
- en: '![](../Images/5e91b79c0c7c5d967e5103dba7df0a2a.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5e91b79c0c7c5d967e5103dba7df0a2a.png)'
- en: Bipartite graph and its adjacency matrix. Image by author
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 二分图及其邻接矩阵。图片由作者提供
- en: 'Here are the steps of the Hungarian algorithm operating on the adjacency matrix:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是匈牙利算法在邻接矩阵上操作的步骤：
- en: For each row in the adjacency matrix, find and subtract the minimum entry from
    all the entries of that row
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于邻接矩阵中的每一行，找出并减去该行所有条目的最小值。
- en: For each column in the adjacency matrix, find and subtract the minimum entry
    from all entries of that column
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于邻接矩阵中的每一列，找出并减去该列所有条目的最小值。
- en: Cover all zeros in the matrix with minimum number of lines
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用最少的线覆盖矩阵中的所有零。
- en: a. Count the number of zeros in each row and in each column
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: a. 计算每一行和每一列中的零的数量
- en: b. Draw lines on the row/column that has most zeros first, then second most
    and so on
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: b. 首先在零最多的行/列上画线，其次是零第二多的行/列，以此类推。
- en: c. If number of lines required cover all zeros is less than the number or row/column
    of the matrix, continue to step 4, else move to step 5
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: c. 如果覆盖所有零所需的线数少于矩阵的行/列数，则继续执行第4步，否则进入第5步
- en: Find the smallest entry that is not covered by a line and subtract that entry
    from all uncovered entries while adding it to all entries covered twice (horizontal
    and vertical line), go to step 3
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到未被线覆盖的最小条目，并将该条目从所有未覆盖的条目中减去，同时将它添加到所有被两条线（水平线和垂直线）覆盖的条目中，然后进入第3步。
- en: Optimum assignment can be generated by starting with the row/column that has
    only one zero
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过从仅有一个零的行/列开始来生成最佳分配。
- en: The first two steps are easy. The third step requires crossing out rows or columns
    in the order of the number of zeros they have, highest to lowest. If the number
    of rows and columns crossed out does not equal the number of nodes to be matched,
    we need to create additional zeros — this is done in the fourth step. Iterate
    step 3 and step 4 until enough rows and columns are crossed out. We then have
    enough zeros in the matrix for optimum matching.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 前两步很简单。第三步需要按照零的数量从高到低的顺序划去行或列。如果划去的行和列的数量不等于需要匹配的节点数，则需要创建额外的零——这在第四步中完成。重复执行第三步和第四步，直到划去足够的行和列。这样，矩阵中就有足够的零用于最佳匹配。
- en: The steps of the Hungarian algorithm for this taxi matching example are shown
    in this animated GIF.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个出租车匹配示例的匈牙利算法步骤显示在这个动画GIF中。
- en: Animation of the Hungarian algorithm on adjacency matrix. Image by author
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 匈牙利算法在邻接矩阵上的动画。图片由作者提供
- en: For those to whom the GIF is hard to follow, here is the image that shows the
    steps.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些难以跟随GIF动画的人，这里是显示步骤的图片。
- en: '![](../Images/1e56334c78b24df7e4b3813f3ac00bd5.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1e56334c78b24df7e4b3813f3ac00bd5.png)'
- en: Hungarian algorithm on adjacency matrix. Image by author
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 匈牙利算法在邻接矩阵上的应用。图片由作者提供
- en: The algorithm terminates once the number of rows/columns that have been crossed
    out equals the number of nodes to be matched. The final step is then to find the
    assignment, and this is easily done by first assigning the edge corresponding
    to one of the zero entry, which in this example, could be (P1,T2) by picking the
    first zero in the first row. We cannot therefore assign T2 to anyone else, so
    the second zero in the T2 column can be removed. The only remaining zero in the
    P4 row says it must be assigned to T1, so the next assignment is (P4,T1). The
    second zero in T1 column can now be removed, and the P2 row then only has one
    zero. The third assignment then is (P2,T3). The final assignment is therefore
    (P3,T4). The reader can compute the total cost by adding up all the edge weights
    corresponding to these assignments, and the result will be 36.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 算法在已划去的行/列数等于需要匹配的节点数时终止。最后一步是找到分配结果，可以通过首先分配对应零条目的边来轻松完成，在这个例子中，可能是(P1,T2)，通过选择第一行中的第一个零。这样我们就不能再将T2分配给其他人，因此T2列中的第二个零可以被移除。P4行中唯一剩下的零表示它必须分配给T1，因此下一个分配是(P4,T1)。此时，T1列中的第二个零也可以被移除，P2行只剩下一个零。第三个分配因此是(P2,T3)。最后的分配就是(P3,T4)。读者可以通过加总这些分配对应的边的权重来计算总成本，结果为36。
- en: This assignment process is much more intuitive if we look at the GIF animation,
    where we have a subgraph that connects all the nodes, and we can create an alternating
    path where the edges alternate between matched (green) and unmatched (red).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看GIF动画，整个分配过程就更直观了，我们有一个连接所有节点的子图，并且我们可以创建一个交替路径，其中的边交替为已匹配（绿色）和未匹配（红色）。
- en: Now that we have seen the Hungarian algorithm in action on the adjacency matrix,
    do we know why the steps are what they are? What exactly does creating the minimum
    number of lines to cover the zeros tell us? Why is it that the minimum number
    of lines must equal the number of nodes to be matched for the algorithm to stop?
    How do we understand this weird rule in step 3 that to create additional zeros,
    we find the uncovered minimum, subtract it from all uncovered entries while adding
    it to the entries covered twice?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了匈牙利算法在邻接矩阵上的应用，我们知道这些步骤为何是这样的了吗？究竟创建覆盖零的最小数量的线条告诉我们什么？为什么最小的线条数量必须等于要匹配的节点数量才能停止算法？我们如何理解步骤3中的这个奇怪规则，即要创建额外的零，我们需要找到未覆盖的最小值，将其从所有未覆盖的条目中减去，同时加到覆盖了两次的条目中？
- en: To get better insights, we need to see how the Hungarian algorithm works on
    the graph. To do that, we need to view the optimum assignment problem as matching
    the demand and supply. This requires creating labels for each nodes that represent
    the amount of supply and demand.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得更好的理解，我们需要看到匈牙利算法是如何在图上工作的。为此，我们需要将最优分配问题视为匹配需求和供应。这需要为每个节点创建标签，表示供应和需求的数量。
- en: We now need some notations to explain this process of labelling. There are two
    different sets of nodes in the bipartite graph, let us call them X and Y. All
    the nodes that belong to the set X is denoted *x* and nodes that belong to Y are
    written as *y*. The labels then are *l(x)* and *l(y)*, and the cost of the edges
    connecting *x* and *y* is *w(x,y)*. The labeling has to be *feasible*, which means
    *l(x)+l(y)*≤*w(x,y)* when we want to minimize the cost and *l(x)+l(y)*≥*w(x,y)*
    if we want to maximize the cost.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要一些符号来解释这个标签过程。二分图中有两个不同的节点集合，我们称它们为X和Y。所有属于集合X的节点用*x*表示，属于Y的节点用*y*表示。标签则分别为*l(x)*和*l(y)*，连接*x*和*y*的边的代价是*w(x,y)*。标签必须是*可行的*，这意味着当我们希望最小化成本时，*l(x)+l(y)*≤*w(x,y)*，而当我们希望最大化成本时，*l(x)+l(y)*≥*w(x,y)*。
- en: In our example, the demand from people is that they must get the taxi immediately,
    with zero wait time. The supply from taxi is the time it takes to get to these
    people. The initial feasible labelling is then to take the minimum time it takes
    for each taxi to get to any of the four people and add that as the label for the
    taxis, and have zeros as the labels for the people.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，人们的需求是他们必须立即乘坐出租车，零等待时间。出租车的供应是到达这些人所需的时间。初始的可行标签是，将每辆出租车到达四个乘客所需的最短时间作为出租车的标签，而乘客的标签则为零。
- en: 'Once we have the feasible labelling, we can now create an equality subgraph,
    where we only pick those edges where we have equality: *l(x)+l(y)*=*w(x,y)*. The
    initial labeling and the resulting equality subgraph (with highlighted edges)
    are shown in the image.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了可行的标签，我们就可以创建一个等式子图，其中我们只选择那些满足等式的边：*l(x)+l(y)*=*w(x,y)*。初始标签和结果等式子图（高亮显示的边）如图所示。
- en: '![](../Images/4fb56a29424e52afe0b14a487e61222c.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4fb56a29424e52afe0b14a487e61222c.png)'
- en: Equality subgraph with initial labeling. Image by author
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 初始标签的等式子图。图像由作者提供
- en: We see that there are nodes that are not connected in this equality subgraph
    and to fix this, we need to revise the labeling. We do that by looking at each
    of the nodes that are not connected, and updating the labels of those nodes using
    the minimum number by which the label can be updated to create a connection.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到在这个等式子图中有些节点没有连接，为了解决这个问题，我们需要修正标签。我们通过查看那些未连接的节点，并使用可以更新标签的最小值来更新这些节点的标签，以便建立连接。
- en: In our example, P3 cannot be connected if its label is 0\. The minimum value
    by which this label can be increased to make a connection is 1, and this is found
    by looking at the minimum *slack* (**Δ**=*w(x,y)-(l(x)+l(y))*) we have on each
    of the edges connected to P3 in the original graph. Similarly for P4, the label
    is updated based on the minimum slack on its edges. The resulting equality graph
    after this label revision is shown in the image.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，如果P3的标签是0，那么它无法连接。为了使这个标签增加到足以建立连接的最小值是1，这个值是通过查看连接到P3的每一条边上的最小*松弛*（**Δ**=*w(x,y)-(l(x)+l(y))*)得出的。同样，对于P4，其标签是根据它的边上的最小松弛来更新的。更新标签后的结果等式图在图中显示。
- en: '![](../Images/4d85d51a17f23065645997b913c5ad53.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d85d51a17f23065645997b913c5ad53.png)'
- en: Label revision for unconnected nodes. Image by author
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 未连接节点的标签修正。图像由作者提供
- en: We can now try to find a matching on the equality subgraph and we will see that
    only 3 nodes can be matched. This is because we don’t yet have an alternating
    path in the equality graph that connects all the nodes. Since there are not enough
    edges to create such an alternating path, we need to revise the labels again to
    add additional edges. But this time, the equality subgraph has already connections
    to all the nodes. So the edge we add this time should help extend the alternating
    path.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以尝试在等式子图上找到匹配，我们会看到只有 3 个节点可以匹配。这是因为在等式图中，我们还没有一条能够连接所有节点的交替路径。由于没有足够的边来创建这样的交替路径，我们需要再次修订标签以添加额外的边。但是这次，等式子图已经与所有节点建立了连接。所以我们这次添加的边应该有助于扩展交替路径。
- en: '![](../Images/9c9df2010ed9465e1ac24da251518271.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9c9df2010ed9465e1ac24da251518271.png)'
- en: Alternating path. Image by author
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 交替路径。图由作者提供
- en: 'We look at all the nodes connected by this alternating path (shown in the image
    with red and green edges) and ask the question: what is the minimum slack by which
    the labels of these nodes can be revised to add an edge. To find that minimum
    slack, we look at the slack for all the edges connected to the X nodes that are
    not in the alternating path, as shown by the next image, and compute the minimum.
    For this example, the minimum slack comes out to be 2 (from the edge P3-T3).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们观察由该交替路径连接的所有节点（图中通过红色和绿色边表示），并提出问题：这些节点的标签可以通过什么最小松弛量进行修订以添加一条边。为了找到这个最小松弛量，我们查看所有连接到不在交替路径中的
    X 节点的边的松弛量，如下一张图所示，并计算最小值。对于这个例子，最小松弛量是 2（来自边 P3-T3）。
- en: '![](../Images/881925cf33ad093174c0ffb9510f1a6d.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/881925cf33ad093174c0ffb9510f1a6d.png)'
- en: Edge options for extending the alternating path. Image by author
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展交替路径的边选项。图由作者提供
- en: The labels of all the nodes in the alternating path needs to be updated, but
    when we adjust the demand (by adding the minimum slack to it), we need to also
    reduce it from the supply (by subtracting the minimum slack from it) so that the
    existing edges of the equality graph does not change. The revised labeling and
    the updated equality graph are seen in the image.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 交替路径中所有节点的标签需要更新，但当我们调整需求（通过添加最小松弛量），我们还需要从供应中减少相同的值（通过从中减去最小松弛量），以确保等式图中的现有边不发生变化。修订后的标签和更新后的等式图如图所示。
- en: '![](../Images/a60d786a5d32ea7cfa94b137e8e937fb.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a60d786a5d32ea7cfa94b137e8e937fb.png)'
- en: Equality subgraph after label revision. Image by author
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 标签修订后的等式子图。图由作者提供
- en: We can now see that there is an alternating path available that connects all
    nodes. The matching can now be found by using the alternating path and alternating
    between matched and unmatched edges (see image). Note that the alternating path
    has two edges connected to each node. The numbers below the nodes shows the order
    in which the alternating path connects these nodes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到，有一条交替路径连接了所有节点。现在可以通过使用交替路径并在匹配和未匹配的边之间交替来找到匹配（见图）。请注意，交替路径与每个节点有两条边相连。节点下方的数字表示交替路径连接这些节点的顺序。
- en: '![](../Images/9b0c1c73797b8ef9dfcfb64a187af156.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9b0c1c73797b8ef9dfcfb64a187af156.png)'
- en: Result of Hungarian algorithm on a graph. Image by author
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 匈牙利算法在图上的结果。图由作者提供
- en: The assignment can be read out from this graph by picking all the edges that
    are highlighted in green. That is (P1,T4), (P2,T1), (P3,T3) and (P4,T2) resulting
    in a total cost of 8+10+11+7 = 36\. An animation of the whole process can be seen
    in the GIF here.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过从图中选择所有用绿色高亮的边来读取分配情况。也就是说，(P1,T4)，(P2,T1)，(P3,T3) 和 (P4,T2)，这将得到一个总成本 8+10+11+7
    = 36。整个过程的动画可以在这里的 GIF 中看到。
- en: Hungarian algorithm in action on a graph. Image by author
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 匈牙利算法在图上的应用。图由作者提供
- en: We see from the Hungarian algorithm on the graph that we are always adjusting
    the supply and demand only by the minimum required value to add one additional
    edge. This process therefore guarantees that we end up with the optimum cost.
    There is a clear mathematical formulation and proof for this in many sources on
    the web, but the mathematical formulations for the graph is not straightforward
    to follow since we have to keep track of the subgraphs and the subsets. An example
    that shows the process really helps, at least I hope it does.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从图上的匈牙利算法看到，我们始终只通过添加一个额外边所需的最小值来调整供应和需求。因此，这个过程保证了我们最终能得到最优成本。这个过程的数学公式和证明在许多网上资源中都有清晰的阐述，但由于我们必须跟踪子图和子集，图的数学公式并不容易理解。一个展示这一过程的例子很有帮助，至少我希望是这样。
- en: We also see parallels to the steps we did on the adjacency matrix. With the
    insights gained by applying the algorithm on the graph, we can see that the minimum
    number of lines to cover zeros need to be equal to the number of nodes to be matched
    to ensure *maximum* matching. The rule to create additional zeros in the adjacency
    matrix provides no intuition, but the revision of labels on the graph based on
    the minimum slack on edges that are not included in the alternating path immediately
    provides the connection.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到与我们在邻接矩阵上所做的步骤之间的相似性。通过在图上应用算法获得的洞察，我们可以看出，覆盖零的最小线数需要等于要匹配的节点数，才能确保*最大*匹配。邻接矩阵中创建额外零的规则并没有提供直观的理解，但基于未包含在交替路径中的边的最小松弛对图上标签的修正，立即提供了连接。
- en: Having said all this, the algorithm operating on the matrix is simpler to understand
    implement, which is why there is a lot of information on web that pertains to
    explaining the Hungarian algorithm this way. But I hope that some of you agree
    with me that once we see the Hungarian algorithm operating on the graph, the level
    of clarity that provides is essential to a comfortable understanding of this wonderfully
    simple algorithm.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，操作矩阵的算法更容易理解和实现，这也是为什么网上有很多关于用这种方式解释匈牙利算法的信息。但我希望你们中的一些人同意我， 一旦我们看到匈牙利算法在图上的应用，这种清晰度为我们提供的理解程度是理解这个简洁算法的关键。
- en: That brings us to the end of this writeup. There is also a video of me presenting
    this material, but it is 45 minutes long since I seem to speak more slowly as
    I age. Perhaps I will link the video here someday.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章到这里就结束了。我还录制了一段视频，介绍了这些内容，但视频时长为45分钟，因为我似乎随着年龄增长说话变得更慢了。也许有一天我会把视频链接放在这里。
