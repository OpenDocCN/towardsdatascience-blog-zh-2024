- en: 'From Code to Insights: Software Engineering Best Practices for Data Analysts'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从代码到洞察：数据分析师的软件工程最佳实践
- en: 原文：[https://towardsdatascience.com/from-code-to-insights-software-engineering-best-practices-for-data-analysts-0dd6a2aaadfc?source=collection_archive---------0-----------------------#2024-06-06](https://towardsdatascience.com/from-code-to-insights-software-engineering-best-practices-for-data-analysts-0dd6a2aaadfc?source=collection_archive---------0-----------------------#2024-06-06)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/from-code-to-insights-software-engineering-best-practices-for-data-analysts-0dd6a2aaadfc?source=collection_archive---------0-----------------------#2024-06-06](https://towardsdatascience.com/from-code-to-insights-software-engineering-best-practices-for-data-analysts-0dd6a2aaadfc?source=collection_archive---------0-----------------------#2024-06-06)
- en: Top 10 engineering lessons every data analyst should know
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每个数据分析师都应该知道的十大工程经验
- en: '[](https://miptgirl.medium.com/?source=post_page---byline--0dd6a2aaadfc--------------------------------)[![Mariya
    Mansurova](../Images/b1dd377b0a1887db900cc5108bca8ea8.png)](https://miptgirl.medium.com/?source=post_page---byline--0dd6a2aaadfc--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0dd6a2aaadfc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0dd6a2aaadfc--------------------------------)
    [Mariya Mansurova](https://miptgirl.medium.com/?source=post_page---byline--0dd6a2aaadfc--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://miptgirl.medium.com/?source=post_page---byline--0dd6a2aaadfc--------------------------------)[![Mariya
    Mansurova](../Images/b1dd377b0a1887db900cc5108bca8ea8.png)](https://miptgirl.medium.com/?source=post_page---byline--0dd6a2aaadfc--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0dd6a2aaadfc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0dd6a2aaadfc--------------------------------)
    [Mariya Mansurova](https://miptgirl.medium.com/?source=post_page---byline--0dd6a2aaadfc--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0dd6a2aaadfc--------------------------------)
    ·16 min read·Jun 6, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0dd6a2aaadfc--------------------------------)
    ·16分钟阅读·2024年6月6日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/15e5c47b0612e64f57a5f84bcccc137a.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/15e5c47b0612e64f57a5f84bcccc137a.png)'
- en: Image by DALL-E 3
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由DALL-E 3生成
- en: 'The data analyst job combines skills from different domains:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分析师的工作结合了不同领域的技能：
- en: We need to have business understanding and domain knowledge to be able to solve
    actual business problems and take into account all the details.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们需要具备商业理解和领域知识，才能解决实际的商业问题，并考虑所有细节。
- en: Maths, statistics, and fundamental machine learning skills help us perform rigorous
    analyses and reach reliable conclusions from data.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数学、统计学和基本的机器学习技能帮助我们进行严格的分析，并从数据中得出可靠的结论。
- en: Visualisation skills and storytelling allow us to deliver our message and influence
    the product.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化技能和讲故事的能力使我们能够传达信息并影响产品。
- en: Last but not least, computer science and the basics of software engineering
    are key to our efficiency.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，计算机科学和软件工程的基础是提高效率的关键。
- en: I’ve learned a lot about computer science at university. I’ve tried at least
    a dozen programming languages (from low-level assembler and CUDA to high-level
    Java and Scala) and countless tools. My very first job offer was for a backend
    engineer role. I’ve decided not to pursue this path, but all this knowledge and
    principles have been beneficial in my analytical career. So, I would like to share
    the main principles with you in this article.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在大学时，我学到了很多关于计算机科学的知识。我尝试过至少十种编程语言（从低级汇编语言和CUDA到高级Java和Scala）以及无数工具。我的第一个工作邀请是担任后端工程师。我决定不走这条路，但所有这些知识和原则对我的分析师职业生涯都非常有益。因此，我希望在这篇文章中与大家分享这些主要的原则。
- en: Code is not for computers. It’s for people
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码不是为计算机而写的。它是为人类而写的
- en: I’ve heard this mantra from software engineers many times. It’s well explained
    in one of the programming bibles, “Clean Code”.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我从很多软件工程师那里听过这句口头禅。这在一本编程圣经《Clean Code》中得到了很好的解释。
- en: Indeed, the ratio of time spent reading versus writing is well over 10 to 1\.
    We are constantly reading old code as part of the effort to write new code.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 确实，阅读与写作所花的时间比例远远超过10比1。我们在编写新代码时，往往需要不断阅读旧代码。
- en: In most cases, an engineer prefers more wordy code that is easy to understand
    to the idiomatic one-liner.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，工程师更倾向于选择容易理解的冗长代码，而不是简洁的惯用一行代码。
- en: I must confess that I sometimes break this rule and write extra-long pandas
    one-liners. For example, let’s look at the code below. Do you have any idea what
    this code is doing?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须坦白说，我有时会打破这个规则，写出超长的 pandas 一行代码。例如，让我们看看下面的代码。你知道这段代码在做什么吗？
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Honestly, it’ll probably take me a bit to get up to speed with this code in
    a month. To make this code more readable, we can split it into steps.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 坦白说，我可能需要一些时间才能在一个月内赶上这段代码的进度。为了让这段代码更具可读性，我们可以将其拆分成几个步骤。
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Hopefully, now it’s easier for you to follow the logic and see that this code
    shows the percentage of customers that use each feature every month. The future
    me would definitely be way happier to see a code like this and appreciate all
    the efforts.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 希望现在你能更容易地理解逻辑，并看到这段代码显示的是每个月使用各个功能的客户百分比。未来的我一定会非常高兴看到像这样的代码，并感激所有的努力。
- en: Automate repetitive tasks
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化重复性任务
- en: If you have monotonous tasks that you repeat frequently, I recommend you consider
    automation. Let me share some examples from my experience that you might find
    helpful.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有重复性很高的任务，我建议你考虑自动化。让我分享一些我自己经验中的例子，希望能对你有所帮助。
- en: The most common way for analysts to automate tasks is to create a dashboard
    instead of calculating numbers manually every time. Self-serve tools (*configurable
    dashboards where stakeholders can change filters and investigate the data*) can
    save a lot of time and allow us to focus on more sophisticated and impactful research.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 分析师自动化任务最常见的方式是创建仪表板，而不是每次手动计算数字。自助工具（*可配置的仪表板，利益相关者可以更改过滤器并查看数据*）可以节省大量时间，并让我们能够专注于更复杂且有影响力的研究。
- en: If a dashboard is not an option, there are other ways of automation. I was doing
    weekly reports and sending them to stakeholders via e-mail. After some time, it
    became a pretty tedious task, and I started to think about automation. At this
    point, I used the basic tool — [cron](https://en.wikipedia.org/wiki/Cron) on a
    virtual machine. I scheduled a Python script that calculated up-to-date numbers
    and sent an e-mail.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仪表板不可用，还有其他自动化方式。我曾经每周制作报告，并通过电子邮件发送给利益相关者。过了一段时间，这变得非常繁琐，我开始考虑自动化。那时，我使用了一个基础工具——[cron](https://en.wikipedia.org/wiki/Cron)
    在虚拟机上。我安排了一个 Python 脚本，计算最新的数字并发送电子邮件。
- en: When you have a script, you just need to add one line to the cron file. For
    example, the line below will execute `analytical_script.py` every Monday at 9:10
    AM.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有一个脚本时，你只需要在 cron 文件中添加一行。例如，下面的这一行将在每周一上午9:10执行`analytical_script.py`。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Cron is a basic but still sustainable solution. Other tools that can be used
    to schedule scripts are Airflow, DBT, and Jenkins. You might know Jenkins as a
    CI/CD (continuous integration & continuous delivery) tool that engineers often
    use. It might surprise you. It’s customisable enough to execute analytical scripts
    as well.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Cron 是一种基础但仍然可持续的解决方案。其他可以用来调度脚本的工具有 Airflow、DBT 和 Jenkins。你可能知道 Jenkins 是一种工程师常用的
    CI/CD（持续集成和持续交付）工具。这可能会让你感到惊讶，它也足够可定制，可以执行分析脚本。
- en: If you need even more flexibility, it’s time to think about web applications.
    In my first team, we didn’t have an A/B test tool, so for a long time, analysts
    had to analyse each update manually. Finally, we wrote a [Flask](https://flask.palletsprojects.com/en/3.0.x/)
    web application so that engineers could self-serve. Now, there are lightweight
    solutions for web applications, such as [Gradio](https://www.gradio.app/) or [Streamlit](https://streamlit.io/),
    that you can learn in a couple of days.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更大的灵活性，是时候考虑Web应用程序了。在我的第一个团队中，我们没有A/B测试工具，因此很长一段时间，分析师必须手动分析每次更新。最终，我们编写了一个[Flask](https://flask.palletsprojects.com/en/3.0.x/)
    Web 应用程序，让工程师能够自助服务。现在，像[Gradio](https://www.gradio.app/)或[Streamlit](https://streamlit.io/)这样的轻量级Web应用程序解决方案，可以在几天内学会。
- en: You can find a detailed guide for Gradio in [one of my previous articles](https://medium.com/towards-data-science/understanding-retention-with-gradio-c288b48918af).
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以在[我以前的一篇文章](https://medium.com/towards-data-science/understanding-retention-with-gradio-c288b48918af)中找到
    Gradio 的详细指南。
- en: Master your tools
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精通你的工具
- en: Tools you use every day at work play a significant role in your efficiency and
    final results. So it’s worth mastering them.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你每天在工作中使用的工具在效率和最终结果中扮演着重要角色。所以值得掌握它们。
- en: Of course, you can use a default text editor to write code, but most people
    use IDEs (Integrated Development Environment). You will be spending a lot of your
    working time on this application, so it’s worth assessing your options.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你可以使用默认的文本编辑器编写代码，但大多数人使用IDE（集成开发环境）。你将花费大量时间在这个应用程序上，因此值得评估你的选择。
- en: You can find the most popular IDEs for Python from [the JetBrains 2021 survey](https://lp.jetbrains.com/python-developers-survey-2021/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[JetBrains 2021年调查](https://lp.jetbrains.com/python-developers-survey-2021/)中找到最流行的Python
    IDE。
- en: '![](../Images/1d83d2a2333a32649533aec8f00f0f17.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1d83d2a2333a32649533aec8f00f0f17.png)'
- en: Chart by author, data from [the JetBrains survey](https://lp.jetbrains.com/python-developers-survey-2021/)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图表由作者制作，数据来自[JetBrains调查](https://lp.jetbrains.com/python-developers-survey-2021/)
- en: I usually use Python and Jupyter Notebooks for my day-to-day work. In my opinion,
    the best IDE for such tasks is JupyterLab. However, I’m trying other options right
    now to be able to use AI assistants. The benefits of auto-completion, which eliminates
    lots of boilerplate code, are invaluable for me, so I’m ready to take on switching
    costs. I encourage you to investigate different options and see what suits your
    work best.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我通常使用Python和Jupyter Notebooks进行日常工作。在我看来，最适合这种任务的IDE是JupyterLab。然而，我现在正在尝试其他选择，以便能够使用AI助手。自动补全的好处——它能消除大量的样板代码——对我来说是无价的，因此我愿意承担切换成本。我鼓励你去研究不同的选项，看看哪个最适合你的工作。
- en: The other helpful hack is shortcuts. You can do your tasks way faster with shortcuts
    than with a mouse, and it looks cool. I would start with Googling shortcuts for
    your IDE since you usually use this tool the most. From my practice, the most
    valuable commands are creating a new cell in a Notebook, running this cell, deleting
    it, and converting the cell into markdown.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的技巧是快捷键。你可以通过快捷键比使用鼠标更快地完成任务，而且看起来也很酷。我建议从谷歌搜索你的IDE快捷键开始，因为你通常使用这个工具最多。根据我的经验，最有价值的命令是：在Notebook中创建一个新单元格、运行该单元格、删除它以及将单元格转换为markdown。
- en: If you have other tools that you use pretty often (such as Google Sheets or
    Slack), you can also learn commands for them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有其他经常使用的工具（比如Google Sheets或Slack），你也可以学习它们的命令。
- en: The main trick with learning shortcuts is “practice, practice, practice” — you
    need to repeat it a hundred times to start doing it automatically. There are even
    plugins that push you to use shortcuts more (for example, [this one](https://plugins.jetbrains.com/plugin/9792-key-promoter-x)
    from JetBrains).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 学习快捷键的主要窍门是“练习，练习，再练习”——你需要重复一百次才能开始自动化操作。甚至有一些插件可以促使你更多地使用快捷键（例如，[这个插件](https://plugins.jetbrains.com/plugin/9792-key-promoter-x)来自JetBrains）。
- en: Last but not least is CLI (command-line interface). It might look intimidating
    in the beginning, but basic knowledge of CLI usually pays off. I use CLI even
    to work with GitHub since it gives me a clear understanding of what’s going on
    exactly.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是CLI（命令行界面）。刚开始它可能看起来令人生畏，但基本的CLI知识通常是值得的。我甚至用CLI来操作GitHub，因为它让我清楚地了解发生了什么。
- en: However, there are situations when it’s almost impossible to avoid using CLI,
    such as when working on a remote server. To interact confidently with a server,
    you need to learn less than ten commands. [This article](/command-line-interface-cli-tutorial-how-advanced-users-interact-with-computers-28cf88f81ce)
    can help you gain basic knowledge about CLI.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有些情况下几乎无法避免使用CLI，比如在远程服务器上工作。要自信地与服务器交互，你需要学习不到十个命令。[这篇文章](/command-line-interface-cli-tutorial-how-advanced-users-interact-with-computers-28cf88f81ce)可以帮助你掌握CLI的基本知识。
- en: Manage your environment
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理你的环境
- en: Continuing the topic of tools, setting up your environment is always a good
    idea. I have a [Python virtual environment](https://docs.python.org/3/library/venv.html)
    for day-to-day work with all the libraries I usually use.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 继续讨论工具，设置你的环境总是个好主意。我有一个[Python虚拟环境](https://docs.python.org/3/library/venv.html)，用来日常工作并包含我通常使用的所有库。
- en: Creating a new virtual environment is as easy as a couple of lines of code in
    your terminal (*an excellent opportunity to start using CLI*).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的虚拟环境就像在终端中输入几行代码一样简单（*这是开始使用CLI的绝佳机会*）。
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can start your Jupyter from this environment or use it in your IDE.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从这个环境启动Jupyter，或者在你的IDE中使用它。
- en: It’s a good practice to have a separate environment for big projects. I usually
    do it only if I need an unusual stack (like PyTorch or yet another new LLM framework)
    or face some issues with library compatibility.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大型项目，最好有一个独立的环境。我通常只有在需要使用不常见的技术栈（比如PyTorch或其他新的LLM框架）或遇到库兼容性问题时才会这么做。
- en: The other way to save your environment is by using [Docker Containers](https://www.docker.com/).
    I use it for something more production-like, like web apps running on the server.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种节省环境资源的方式是使用[Docker容器](https://www.docker.com/)。我用它来处理一些更像生产环境的任务，比如在服务器上运行的Web应用。
- en: Think about program performance
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 思考程序性能
- en: To tell the truth, analysts often don’t need to think much about performance.
    When I got my first job in data analytics, my lead shared the practical approach
    to performance optimisations (and I have been using it ever since). When you’re
    thinking about performance, consider the total time vs efforts. Suppose I have
    a MapReduce script that runs for 4 hours. Should I optimise it? It depends.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 说实话，分析师通常不需要过多考虑性能。当我在数据分析领域获得第一份工作时，我的领导分享了有关性能优化的实际方法（从那时起我一直在使用它）。当你考虑性能时，要考虑总时间与努力的关系。假设我有一个运行4小时的MapReduce脚本。我需要优化它吗？这取决于情况。
- en: If I need to run it only once or twice, there’s not much sense in spending 1
    hour to optimise this script to calculate numbers in just 1 hour.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我只需要运行一两次，那么花费1小时来优化这个脚本以便在1小时内计算结果是没有太大意义的。
- en: If I plan to run it daily, it’s worth the effort to make it faster and stop
    wasting computational resources (and money).
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我计划每天运行它，那么花时间让它更高效，避免浪费计算资源（和金钱）是值得的。
- en: Since the majority of my tasks are one-time research, in most cases, I don’t
    need to optimise my code. However, it’s worth following some basic rules to avoid
    waiting for hours. Small tricks can lead to tremendous results. Let’s discuss
    such an example.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我的大多数任务是一次性研究工作，在大多数情况下，我不需要优化代码。然而，遵循一些基本规则以避免等待数小时是值得的。小技巧可以带来巨大的效果。我们来讨论一个这样的例子。
- en: Starting from the basics, the cornerstone of performance is [big O notation](https://en.wikipedia.org/wiki/Big_O_notation).
    Simply put, big O notation shows the relation between execution time and the number
    of elements you work with. So, if my program is O(n), it means that if I increase
    the amount of data 10 times, execution will be ~10 times longer.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从基础开始，性能的基石是[大O表示法](https://en.wikipedia.org/wiki/Big_O_notation)。简而言之，大O表示法展示了执行时间与处理元素数量之间的关系。所以，如果我的程序是O(n)，这意味着如果我将数据量增加10倍，执行时间大约会增加10倍。
- en: When writing code, it’s worth understanding the complexity of your algorithm
    and the main data structures. For example, finding out if an element is in a list
    takes O(n) time, but it only takes O(1) time in a set. Let’s see how it can affect
    our code.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码时，了解算法的复杂度和主要数据结构是值得的。例如，检查一个元素是否在列表中需要O(n)的时间，但在集合中只需要O(1)的时间。让我们看看这如何影响我们的代码。
- en: I have 2 data frames with Q1 and Q2 user transactions, and for each transaction
    in the Q1 data frame, I would like to understand whether this customer was retained
    or not. Our data frames are relatively small — around 300-400K rows.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我有两个数据框，分别包含Q1和Q2用户的交易记录，对于Q1数据框中的每一笔交易，我想了解该客户是否被保留。我们的数据框相对较小，大约有30万到40万行。
- en: '![](../Images/e738815b89ff2ce540c1db67f5825e78.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e738815b89ff2ce540c1db67f5825e78.png)'
- en: As you can see, performance differs a lot.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，性能差异非常大。
- en: The first approach is the worst one because, on each iteration (for each row
    in the Q1 dataset), we calculate the list of unique user_ids. Then, we look up
    the element in the list with O(n) complexity. This operation takes 13 minutes.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种方法是最差的，因为在每次迭代时（对于Q1数据集中的每一行），我们都要计算唯一的user_ids列表。然后，我们以O(n)的复杂度在列表中查找元素。这个操作需要13分钟。
- en: The second approach, when we calculate the list first, is a bit better, but
    it still takes almost 6 minutes.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种方法，即先计算列表，稍微好一些，但仍然需要将近6分钟。
- en: If we pre-calculate a list of user_ids and convert it into the set, we will
    get the result in a blink of an eye.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们预先计算一个user_ids列表并将其转换为集合，我们将瞬间获得结果。
- en: As you can see, we can make our code more than 10K times faster with just basic
    knowledge. It’s a game-changer.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，凭借基本的知识，我们可以让代码的运行速度提高超过10K倍。这是一个游戏规则的改变者。
- en: The other general advice is to avoid using plain Python and prefer to use more
    performant data structures, such as `pandas` or `numpy`. These libraries are faster
    because they use vectorised operations on arrays, which are implemented on C.
    Usually, `numpy` would show a bit better performance since `pandas` is built on
    top of `numpy` but has some additional functionality that slows it down a bit.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个普遍的建议是避免使用普通的 Python，而是优先使用性能更高的数据结构，如 `pandas` 或 `numpy`。这些库之所以更快，是因为它们对数组进行了向量化操作，而这些操作是用
    C 实现的。通常，`numpy` 的性能会稍好一些，因为 `pandas` 是建立在 `numpy` 之上的，但由于一些附加功能，它的速度稍慢。
- en: Don’t forget the DRY principle.
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要忘记 DRY 原则。
- en: DRY stands for “Don’t Repeat Yourself” and is self-explanatory. This principle
    praises structured modular code that you can easily reuse.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: DRY 代表“不要重复自己”，这一原则不言自明。它推崇结构化的模块化代码，你可以轻松地重复使用。
- en: If you’re copy-pasting a chunk of code for the third time, it’s a sign to think
    about the code structure and how to encapsulate this logic.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经复制粘贴了一段代码三次，那是时候考虑代码结构，思考如何将这个逻辑封装起来。
- en: The standard analytical task is data wrangling, and we usually follow the procedural
    paradigm. So, the most apparent way to structure the code is functions. However,
    you might follow objective-oriented programming and create classes. In [my previous
    article](https://medium.com/towards-data-science/practical-computer-simulations-for-product-analysts-fe61e2b577f5),
    I shared an example of the objective-oriented approach to simulations.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 标准的分析任务是数据整理，我们通常遵循过程化范式。因此，结构化代码最明显的方式是函数。然而，你也可以遵循面向对象编程并创建类。在 [我之前的文章](https://medium.com/towards-data-science/practical-computer-simulations-for-product-analysts-fe61e2b577f5)
    中，我分享了面向对象方法在仿真中的应用示例。
- en: The benefits of modular code are better readability, faster development and
    easier changes. For example, if you want to change your visualisation from a line
    chart to an area plot, you can do it in one place and re-run your code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化代码的好处在于更好的可读性、更快的开发和更容易的修改。例如，如果你想将可视化从折线图改为区域图，你可以在一个地方进行修改，然后重新运行代码。
- en: If you have a bunch of functions related to one particular domain, you can create
    a Python package for it to interact with these functions as with any other Python
    library. Here’s [a detailed guide](https://packaging.python.org/en/latest/tutorials/packaging-projects/)
    on how to do it.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一堆与某一特定领域相关的函数，你可以为其创建一个 Python 包，像使用其他 Python 库一样与这些函数进行交互。这里有 [一个详细的指南](https://packaging.python.org/en/latest/tutorials/packaging-projects/)
    介绍如何做到这一点。
- en: Leverage testing
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用测试
- en: The other topic that is, in my opinion, undervalued in the analytical world
    is testing. Software engineers often have KPIs on the test coverage, which might
    also be useful for analysts. However, in many cases, our tests will be related
    to the data rather than the code itself.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，分析领域中另一个被低估的话题是测试。软件工程师通常会有关于测试覆盖率的关键绩效指标，这对分析师也可能有帮助。然而，在许多情况下，我们的测试更多是与数据相关，而非代码本身。
- en: The trick I’ve learned from one of my colleagues is to add tests on the data
    recency. We have multiple scripts for quarterly and annual reports that we run
    pretty rarely. So, he added a check to see whether the latest rows in the tables
    we’re using are after the end of the reporting period (it shows whether the table
    has been updated). In Python, you can use an [assert](https://www.w3schools.com/python/ref_keyword_assert.asp)
    statement for this.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我从一位同事那里学到的技巧是添加数据新鲜度的测试。我们有多个季度和年度报告的脚本，这些报告我们运行得比较少。因此，他添加了一个检查，看看我们使用的表格中的最新行是否在报告期结束后（这显示了表格是否已更新）。在
    Python 中，你可以使用 [assert](https://www.w3schools.com/python/ref_keyword_assert.asp)
    语句来实现这一点。
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If the condition is fulfilled, then nothing will happen. Otherwise, you will
    get an `AssertionError` . It’s a quick and easy check that can help you spot problems
    early.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果条件满足，那么什么也不会发生。否则，你将会得到一个 `AssertionError`。这是一个快速且简单的检查，能帮助你早期发现问题。
- en: 'The other thing I prefer to validate is sum statistics. For example, if you’re
    slicing, dicing and transforming your data, it’s worth checking that the overall
    number of requests and metrics stays the same. Some common mistakes are:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我更倾向于验证的另一项是总和统计。例如，如果你在切片、分割和转换数据，值得检查请求和指标的总数是否保持一致。一些常见的错误有：
- en: duplicates that emerged because of joins,
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为连接操作而产生的重复项，
- en: filtered-out `None` values when you’re using `pandas.groupby` function,
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你使用 `pandas.groupby` 函数时，过滤掉的 `None` 值，
- en: filtered-out dimensions because of inner joins.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为内连接而过滤掉的维度。
- en: Also, I always check data for duplicates. If you expect that each row will represent
    one user, then the number of rows should be equal to `df.user_id.nunique()` .
    If it’s false, something is wrong with your data and needs investigation.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我总是检查数据中是否存在重复。如果你期望每一行代表一个用户，那么行数应该等于`df.user_id.nunique()`。如果不等，说明数据有问题，需要调查。
- en: The trickiest and most helpful test is the sense check. Let’s discuss some possible
    approaches to it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最棘手且最有帮助的测试是常识检查。让我们讨论一些可能的方法。
- en: First, I would check whether the results make sense overall. For example, if
    1-month retention equals 99% or I got 1 billion customers in Europe, there’s likely
    a bug in the code.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我会检查结果是否在总体上合理。例如，如果一个月的留存率为99%，或者我在欧洲获得了10亿客户，那代码很可能存在BUG。
- en: Secondly, I will look for other data sources or previous research on this topic
    to validate that my results are feasible.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其次，我会寻找其他数据来源或该主题的先前研究，以验证我的结果是否可行。
- en: If you don’t have other similar research (for example, you’re estimating your
    potential revenue after launching the product in a new market), I would recommend
    you compare your numbers to those of other existing segments. For example, if
    your incremental effect on revenue after launching your product in yet another
    market equals 5x current income, I would say it’s a bit too optimistic and worth
    revisiting assumptions.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你没有其他类似的研究（例如，你在估算在新市场推出产品后的潜在收入），我建议你将你的数字与其他现有细分市场的数据进行对比。例如，如果你在另一个市场推出产品后，对收入的增量效应为当前收入的5倍，我会说这有点过于乐观，值得重新审视假设。
- en: I hope this mindset will help you achieve more feasible results.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这种思维方式能够帮助你获得更可行的结果。
- en: Encourage the team to use Version Control Systems
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鼓励团队使用版本控制系统
- en: Engineers use version control systems even for the tiny projects they are working
    on their own. At the same time, I often see analysts using Google Sheets to store
    their queries. Since I’m a great proponent and advocate for keeping all the code
    in the repository, I can’t miss a chance to share my thoughts with you.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 工程师们即使是在独立工作的小项目中，也会使用版本控制系统。同时，我常常看到分析师使用Google Sheets来存储他们的查询。由于我是强烈支持并倡导将所有代码存储在仓库中的人，所以我不能错过与大家分享我的想法的机会。
- en: 'Why have I been using a repository for 10+ years of my data career? Here are
    the main benefits:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么在我的数据职业生涯中使用了超过10年的仓库？以下是主要的好处：
- en: '**Reproducibility**. Quite often, we need to tweak the previous research (for
    example, add one more dimension or narrow research down to a specific segment)
    or just repeat the earlier calculations. If you store all the code in a structured
    way, you can quickly reproduce your prior work. It usually saves a lot of time.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可重复性**。我们经常需要调整先前的研究（例如，增加一个维度或将研究范围缩小到特定的细分市场），或者仅仅重复早期的计算。如果你以结构化的方式存储所有代码，你可以快速再现你的先前工作。这通常可以节省大量时间。'
- en: '**Transparency**. Linking code to the results of your research allows your
    colleagues to understand the methodology to the tiniest detail, which brings more
    trust and naturally helps to spot bugs or potential improvements.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**透明性**。将代码与研究结果关联，可以让你的同事深入了解方法论的每个细节，这带来更多的信任，自然也能帮助发现BUG或潜在的改进之处。'
- en: '**Knowledge sharing**. If you have a catalogue that is easy to navigate (or
    you link your code to Task Trackers), it makes it super-easy for your colleagues
    to find your code and not start an investigation from scratch.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**知识共享**。如果你有一个易于浏览的目录（或者你将代码链接到任务跟踪器），那么你的同事能够轻松找到你的代码，而无需从头开始调查。'
- en: '**Rolling back**. Have you ever been in a situation when your code was working
    yesterday, but then you changed something, and now it’s completely broken? I’ve
    been there many times before I started committing my code regularly. Version Control
    systems allow you to see the whole version history and compare the code or rollback
    to the previous working version.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回滚**。你是否曾经遇到过这样一种情况：你的代码昨天还能正常运行，但今天你更改了一些东西，现在完全崩溃了？在开始定期提交代码之前，我曾经遇到过很多次这种情况。版本控制系统允许你查看整个版本历史，并对比代码或回滚到之前的正常版本。'
- en: '**Collaboration**. If you’re working on the code in collaboration with others,
    you can leverage version control systems to track and merge the changes.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**协作**。如果你和他人一起合作编写代码，可以利用版本控制系统来跟踪和合并更改。'
- en: 'I hope you can see its potential benefits now. Let me briefly share my usual
    setup to store code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你现在能看到它的潜在好处。让我简要分享一下我通常存储代码的设置：
- en: I use `git` + `Github` as a version control system, I’m this dinosaur who is
    still using the command line interface for git (it gives me the soothing feeling
    of control), but you can use the GitHub app or the functionality of your IDE.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我使用 `git` + `GitHub` 作为版本控制系统，我是那个仍然使用命令行界面的恐龙（它给我一种掌控感的安慰），但你也可以使用 GitHub 应用程序或
    IDE 的功能。
- en: Most of my work is research (code, numbers, charts, comments, etc.), so I store
    95% of my code as Jupyter Notebooks.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我的工作大部分是研究（代码、数字、图表、评论等），所以我将 95% 的代码存储为 Jupyter Notebooks。
- en: I link my code to the Jira tickets. I usually have a `tasks` folder in my repository
    and name subfolders as ticket keys (for example, `ANALYTICS-42`). Then, I place
    all the files related to the task in this subfolder. With such an approach, I
    can find code related to (almost) any task in seconds.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我会将我的代码与 Jira 工单关联起来。我通常在代码库中有一个 `tasks` 文件夹，并将子文件夹命名为工单键（例如 `ANALYTICS-42`）。然后，我会将与任务相关的所有文件放在这个子文件夹中。采用这种方式，我可以在几秒钟内找到与（几乎）任何任务相关的代码。
- en: There are a bunch of nuances of working with Jupyter Notebooks in GitHub that
    are worth noting.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GitHub 中使用 Jupyter Notebooks 有许多细微差别，值得注意。
- en: First, think about the output. When committing a Jupyter Notebook to the repository,
    you save input cells (your code or comments) and output. So, it’s worth being
    conscious about whether you actually want to share the output. It might contain
    PII or other sensitive data that I wouldn’t advise committing. Also, the output
    might be pretty big and non-informative, so it will just clutter your repository.
    When you’re saving 10+ MB Jupyter Notebook with some random data output, all your
    colleagues will load this data to their computers with the next `git pull` command.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，考虑一下输出内容。当你将 Jupyter Notebook 提交到代码库时，你会保存输入单元格（你的代码或评论）和输出。因此，值得注意的是，你是否真的希望共享这些输出。它可能包含个人身份信息（PII）或其他敏感数据，我不建议将这些提交。另外，输出可能非常大且没有信息量，只会让你的代码库显得杂乱无章。当你保存一个超过
    10 MB 的 Jupyter Notebook 并且包含一些随机数据输出时，所有同事在执行 `git pull` 命令时都会将这些数据下载到他们的电脑上。
- en: Charts in output might be especially problematic. We all like excellent interactive
    Plotly charts. Unfortunately, they are not rendered on GitHub UI, so your colleagues
    likely won’t see them. To overcome this obstacle, you might switch the output
    type for Plotly to PNG or JPEG.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 输出中的图表可能特别有问题。我们都喜欢优秀的交互式 Plotly 图表。不幸的是，它们在 GitHub UI 上无法呈现，因此你的同事很可能无法看到它们。为了解决这个问题，你可以将
    Plotly 的输出类型切换为 PNG 或 JPEG。
- en: '[PRE5]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can find more details about Plotly renderers in [the documentation](https://plotly.com/python/renderers/).
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[文档](https://plotly.com/python/renderers/)中找到关于 Plotly 渲染器的更多详细信息。
- en: Last but not least, Jupyter Notebooks diffs are usually tricky. You would often
    like to understand the difference between 2 versions of the code. However, the
    default GitHub view won’t give you much helpful info because there is too much
    clutter due to changes in notebook metadata (like in the example below).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，Jupyter Notebooks 的差异通常很棘手。你经常会想了解代码的两个版本之间的差异。然而，默认的 GitHub 视图不会提供太多有用的信息，因为由于
    notebook 元数据的变化，杂乱无章的内容太多（如下例所示）。
- en: '![](../Images/21628c600bc0cf4b7eed721c5d871342.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/21628c600bc0cf4b7eed721c5d871342.png)'
- en: Actually, GitHub has almost solved this issue. A [rich diffs functionality](https://github.blog/changelog/2023-03-01-feature-preview-rich-jupyter-notebook-diffs/)
    in feature preview can make your life way easier — you just need to switch it
    on in settings.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，GitHub 几乎已经解决了这个问题。一个[丰富的差异功能](https://github.blog/changelog/2023-03-01-feature-preview-rich-jupyter-notebook-diffs/)处于预览阶段，可以让你的生活变得更轻松——你只需要在设置中开启它。
- en: '![](../Images/49953dcc47c5e4f0ba121118baefeaa3.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49953dcc47c5e4f0ba121118baefeaa3.png)'
- en: With this feature, we can easily see that there were just a couple of changes.
    I’ve changed the default renderer and parameters for retention curves (so a chart
    has been updated as well).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个功能，我们可以轻松看到只是做了几个小的改动。我更改了默认渲染器和保留曲线的参数（所以图表也进行了更新）。
- en: Ask for a code review
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求代码审查
- en: Engineers do peer reviews for (almost) all changes to the code. This process
    allows one to spot bugs early, stop bad actors or effectively share knowledge
    in the team.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 工程师会对（几乎）所有代码变更进行同行评审。这个过程能让我们及早发现 bug，防止不良行为者或有效地共享团队中的知识。
- en: 'Of course, it’s not a silver bullet: reviewers can miss bugs, or a bad actor
    might introduce a breach into the popular open-source project. For example, there
    was [quite a scary story](https://arstechnica.com/security/2024/03/backdoor-found-in-widely-used-linux-utility-breaks-encrypted-ssh-connections/)
    of how a backdoor was planted into a compression tool widely used in popular Linux
    distributions.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这不是万能的：审查员可能会错过bug，或者恶意行为者可能会在流行的开源项目中引入漏洞。例如，有一个[相当可怕的故事](https://arstechnica.com/security/2024/03/backdoor-found-in-widely-used-linux-utility-breaks-encrypted-ssh-connections/)讲述了一个如何在广泛使用于流行Linux发行版的压缩工具中植入后门的事件。
- en: However, there is evidence that code review actually helps. McConnell shares
    the following stats in his iconic book [“Code Complete”](https://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有证据表明，代码审查确实有帮助。麦康奈尔在他的经典书籍[《代码大全》](https://www.amazon.co.uk/Code-Complete-Practical-Handbook-Construction/dp/0735619670)中分享了以下统计数据。
- en: … software testing alone has limited effectiveness — the average defect detection
    rate is only 25 percent for unit testing, 35 percent for function testing, and
    45 percent for integration testing. In contrast, the average effectiveness of
    design and code inspections are 55 and 60 percent.
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: … 软件测试单独进行时效果有限 —— 单元测试的平均缺陷检测率只有25%，功能测试为35%，集成测试为45%。相比之下，设计和代码检查的平均有效性分别为55%和60%。
- en: 'Despite all these benefits, analysts often don’t use code review at all. I
    can understand why it might be challenging:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有这些好处，分析师们通常根本不进行代码审查。我能理解为什么这可能是一个挑战：
- en: Analytical teams are usually smaller, and spending limited resources on double-checking
    might not sound reasonable.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析团队通常较小，花费有限的资源进行反复检查可能听起来不太合理。
- en: Quite often, analysts work in different domains, and you might end up being
    the only person who knows this domain well enough to do a code review.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相当多时候，分析师工作于不同领域，而你可能是唯一一个了解这个领域足够好来进行代码审查的人。
- en: 'However, I really encourage you to do a code review, at least for critical
    things to mitigate risks. Here are the cases when I ask colleagues to double-check
    my code and assumptions:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我真的鼓励你进行代码审查，至少对于关键的内容，以减轻风险。以下是我会要求同事仔细检查我的代码和假设的情况：
- en: When I’m using data in a new domain, it’s always a good idea to ask an expert
    to review the assumptions used;
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我在一个新领域使用数据时，总是一个好主意请专家审核所用的假设；
- en: All the tasks related to customer communications or interventions since errors
    in such data might lead to significant impact (for example, we’ve communicated
    wrong information to customers or deactivated wrong people);
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有与客户沟通或干预相关的任务，因为此类数据中的错误可能会导致重大影响（例如，我们可能会向客户传递错误信息或错误地停用某些人）；
- en: 'High-stakes decisions: if you plan to invest six months of the team’s effort
    into the project, it’s worth double- and triple-checking;'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高风险决策：如果你计划投入团队六个月的时间来进行项目开发，那么值得反复检查；
- en: 'When results are unexpected: the first hypothesis to test when I see surprising
    results is to check for an error in code.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当结果出乎意料时：当我看到令人惊讶的结果时，第一个要测试的假设是检查代码中是否存在错误。
- en: Of course, it’s not an exhaustive list, but I hope you can see my reasoning
    and use common sense to define when to reach out for code review.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这并不是一个详尽无遗的列表，但我希望你能理解我的推理，并用常识来判断何时需要寻求代码审查。
- en: Stay up-to-date
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持最新
- en: The famous Lewis Caroll quote represents the current state of the tech domain
    quite well.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这句著名的刘易斯·卡罗尔名言很好地代表了当前技术领域的状态。
- en: … it takes all the running you can do, to keep in the same place. If you want
    to get somewhere else, you must run at least twice as fast as that.
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: … 你必须尽全力奔跑，才能保持在原地。如果你想到达别的地方，你必须至少跑得比现在快两倍。
- en: 'Our field is constantly evolving: new papers are published every day, libraries
    are updated, new tools emerge and so on. It’s the same story for software engineers,
    data analysts, data scientists, etc.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的领域在不断发展：每天都有新的论文发布，库被更新，新工具层出不穷，等等。软件工程师、数据分析师、数据科学家等也是如此。
- en: 'There are so many sources of information right now that there’s no problem
    to find it:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有这么多的信息来源，根本不难找到：
- en: weekly e-mails from Towards Data Science and some other subscriptions,
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每周来自Towards Data Science和其他一些订阅的电子邮件，
- en: following experts on LinkedIn and X (former Twitter),
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在LinkedIn和X（前Twitter）上关注专家，
- en: subscribing to e-mail updates for the tools and libraries I use,
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订阅我使用的工具和库的电子邮件更新，
- en: attending local meet-ups.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参加本地聚会。
- en: A bit more tricky is to avoid being drowned by all the information. I try to
    focus on one thing at a time to prevent too much distraction.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 更具挑战性的是避免被大量信息淹没。我尽量一次专注于一件事，以避免过多分心。
- en: Summary
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'That’s it with the software engineering practices that can be helpful for analysts.
    Let me quickly recap them all here:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以上就是对于分析师有帮助的软件工程实践。让我在这里快速总结一下：
- en: Code is not for computers. It’s for people.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码不是为计算机写的，它是为人类写的。
- en: Automate repetitive tasks.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化重复任务。
- en: Master your tools.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精通你的工具。
- en: Manage your environment.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理你的环境。
- en: Think about program performance.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑程序性能。
- en: Don’t forget the DRY principle.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要忘记DRY原则。
- en: Leverage testing.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用测试。
- en: Encourage the team to use Version Control Systems.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼓励团队使用版本控制系统。
- en: Ask for a code review.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求代码审查。
- en: Stay up-to-date.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持最新状态。
- en: Data analytics combines skills from different domains, so I believe we can benefit
    greatly from learning the best practices of software engineers, product managers,
    designers, etc. By adopting the tried-and-true techniques of our colleagues, we
    can improve our effectiveness and efficiency. I highly encourage you to explore
    these adjacent domains as well.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分析结合了来自不同领域的技能，因此我相信我们可以从学习软件工程师、产品经理、设计师等的最佳实践中获益匪浅。通过采用我们同事的行之有效的技巧，我们可以提高我们的工作效率和效果。我强烈鼓励你们也去探索这些相邻领域。
- en: Thank you a lot for reading this article. I hope this article was insightful
    for you. If you have any follow-up questions or comments, please leave them in
    the comments section.
  id: totrans-146
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 非常感谢你阅读这篇文章。我希望这篇文章对你有启发。如果你有任何后续问题或评论，请在评论区留言。
- en: Reference
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '*All the images are produced by the author unless otherwise stated.*'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者制作。*'
- en: Acknowledgements
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 致谢
- en: I can’t miss a chance to express my heartfelt thanks to my partner, who has
    been sharing his engineering wisdom with me for ages and has reviewed all my articles.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我无法错过表达对我的伙伴的衷心感谢的机会，他一直与我分享他的工程智慧，并审阅了我所有的文章。
