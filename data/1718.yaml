- en: LLM Agents Demystified
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LLM代理揭秘
- en: 原文：[https://towardsdatascience.com/llm-agents-demystified-8e2a62c185fa?source=collection_archive---------1-----------------------#2024-07-14](https://towardsdatascience.com/llm-agents-demystified-8e2a62c185fa?source=collection_archive---------1-----------------------#2024-07-14)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/llm-agents-demystified-8e2a62c185fa?source=collection_archive---------1-----------------------#2024-07-14](https://towardsdatascience.com/llm-agents-demystified-8e2a62c185fa?source=collection_archive---------1-----------------------#2024-07-14)
- en: Hands-on ReAct agent implementation with AdalFlow library
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用AdalFlow库实现ReAct代理
- en: '[](https://liyin2015.medium.com/?source=post_page---byline--8e2a62c185fa--------------------------------)[![Li
    Yin](../Images/ef856165bfb90c952ed7d16da42e28ee.png)](https://liyin2015.medium.com/?source=post_page---byline--8e2a62c185fa--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--8e2a62c185fa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--8e2a62c185fa--------------------------------)
    [Li Yin](https://liyin2015.medium.com/?source=post_page---byline--8e2a62c185fa--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://liyin2015.medium.com/?source=post_page---byline--8e2a62c185fa--------------------------------)[![Li
    Yin](../Images/ef856165bfb90c952ed7d16da42e28ee.png)](https://liyin2015.medium.com/?source=post_page---byline--8e2a62c185fa--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--8e2a62c185fa--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--8e2a62c185fa--------------------------------)
    [Li Yin](https://liyin2015.medium.com/?source=post_page---byline--8e2a62c185fa--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--8e2a62c185fa--------------------------------)
    ·14 min read·Jul 14, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--8e2a62c185fa--------------------------------)
    ·14分钟阅读·2024年7月14日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/377c1a54d2816cd3209bda5a881ca73e.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/377c1a54d2816cd3209bda5a881ca73e.png)'
- en: '[Image source](https://unsplash.com/photos/an-abstract-image-of-a-sphere-with-dots-and-lines-nGoCBxiaRO0),
    credits to [Growtika](https://unsplash.com/@growtika)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[图片来源](https://unsplash.com/photos/an-abstract-image-of-a-sphere-with-dots-and-lines-nGoCBxiaRO0)，感谢[Growtika](https://unsplash.com/@growtika)'
- en: 'AdalFlow library: [https://github.com/SylphAI-Inc/AdalFlow](https://github.com/SylphAI-Inc/AdalFlow)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: AdalFlow库：[https://github.com/SylphAI-Inc/AdalFlow](https://github.com/SylphAI-Inc/AdalFlow)
- en: '[**Colab notebook**](https://colab.research.google.com/drive/1mpocvG8lPyW1ISOK7SJ4bCt9KmQCP0SJ?usp=sharing)'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[**Colab笔记本**](https://colab.research.google.com/drive/1mpocvG8lPyW1ISOK7SJ4bCt9KmQCP0SJ?usp=sharing)'
- en: '*“An autonomous agent is a system situated within and a part of an environment
    that senses that environment and acts on it, over time, in pursuit of its own
    agenda and so as to effect what it senses in the future.”*'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*“自主代理是一个位于环境中的系统，能够感知该环境并在其中行动，随着时间推移，为了追求自己的目标，进而影响它所感知到的未来。”*'
- en: '*— Franklin and Graesser (1997)*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*— Franklin and Graesser (1997)*'
- en: Alongside the well-known RAGs, agents [[1]](https://lightrag.sylph.ai/tutorials/agent.html#id3)
    are another popular family of LLM applications. What makes agents stand out is
    their ability to reason, plan, and act via accessible tools. When it comes to
    implementation, AdalFlow has simplified it down to a generator that can use tools,
    taking multiple steps (sequential or parallel) to complete a user query.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除了广为人知的RAGs（检索增强生成模型），代理[[1]](https://lightrag.sylph.ai/tutorials/agent.html#id3)是另一类受欢迎的LLM应用。使代理与众不同的是它们能够通过可访问的工具进行推理、规划和行动。在实现方面，AdalFlow将其简化为一个生成器，能够使用工具，采取多步骤（顺序或并行）来完成用户查询。
- en: What is ReAct Agent?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是ReAct代理？
- en: We will first introduce ReAct [[2]](https://lightrag.sylph.ai/tutorials/agent.html#id4),
    a general paradigm for building agents with a sequential of interleaving thought,
    action, and observation steps.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先介绍ReAct[[2]](https://lightrag.sylph.ai/tutorials/agent.html#id4)，这是构建代理的一种通用范式，包含一系列交替的思考、行动和观察步骤。
- en: '**Thought**: The reasoning behind taking an action.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**思考**：采取行动的推理过程。'
- en: '**Action**: The action to take from a predefined set of actions. In particular,
    these are the tools/functional tools we have introduced in [tools](https://lightrag.sylph.ai/tutorials/tool_helper.html).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**行动**：从预定义的行动集合中采取的行动。特别地，这些是我们在[工具](https://lightrag.sylph.ai/tutorials/tool_helper.html)部分介绍的工具/功能工具。'
- en: '**Observation**: The simplest scenario is the execution result of the action
    in string format. To be more robust, this can be defined in any way that provides
    the right amount of execution information for the LLM to plan the next step.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**观察**：最简单的场景是以字符串格式呈现的执行结果。为了更强的鲁棒性，可以通过任何提供足够执行信息的方式来定义，从而让LLM能够规划下一步。'
- en: Prompt and Data Models
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示和数据模型
- en: '`[**DEFAULT_REACT_AGENT_SYSTEM_PROMPT**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.DEFAULT_REACT_AGENT_SYSTEM_PROMPT)`
    is the default prompt for React agent’s LLM planner. We can categorize the prompt
    template into four parts:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[**DEFAULT_REACT_AGENT_SYSTEM_PROMPT**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.DEFAULT_REACT_AGENT_SYSTEM_PROMPT)是React代理LLM规划器的默认提示。我们可以将提示模板分为四个部分：'
- en: Task description
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务描述
- en: This part is the overall role setup and task description for the agent.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分是代理的整体角色设置和任务描述。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 2\. Tools, output format, and example
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 工具、输出格式和示例
- en: This part of the template is exactly the same as how we were calling functions
    in the [tools](https://lightrag.sylph.ai/tutorials/tool_helper.html). The `output_format_str`
    is generated by `FunctionExpression` via `JsonOutputParser`. It includes the actual
    output format and examples of a list of `FunctionExpression` instances. We use
    `thought` and `action` fields of the `FunctionExpression` as the agent’s response.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该模板部分与我们在[工具](https://lightrag.sylph.ai/tutorials/tool_helper.html)中调用函数的方式完全相同。`output_format_str`是通过`FunctionExpression`和`JsonOutputParser`生成的。它包括实际的输出格式和`FunctionExpression`实例的示例列表。我们使用`FunctionExpression`的`thought`和`action`字段作为代理的回应。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 3\. Task specification to teach the planner how to “think”.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 任务规范，用于教会规划器如何“思考”。
- en: We provide more detailed instruction to ensure the agent will always end with
    ‘finish’ action to complete the task. Additionally, we teach it how to handle
    simple queries and complex queries.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供更详细的指导，以确保代理始终以“finish”动作结束，以完成任务。此外，我们还教它如何处理简单查询和复杂查询。
- en: For simple queries, we instruct the agent to finish with as few steps as possible.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于简单查询，我们指示代理尽可能少的步骤来完成。
- en: For complex queries, we teach the agent a ‘divide-and-conquer’ strategy to solve
    the query step by step.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于复杂查询，我们教代理采用“分而治之”的策略，逐步解决查询。
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We put all these three parts together to be within the `<SYS></SYS>` tag.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这三部分放在`<SYS></SYS>`标签内。
- en: 4\. Agent step history.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 代理步骤历史。
- en: 'We use `[**StepOutput**](https://lightrag.sylph.ai/apis/core/core.types.html#core.types.StepOutput)`
    to record the agent’s step history, including:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用[**StepOutput**](https://lightrag.sylph.ai/apis/core/core.types.html#core.types.StepOutput)来记录代理的步骤历史，包括：
- en: '`action`: This will be the `FunctionExpression` instance predicted by the agent.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action`：这是代理预测的`FunctionExpression`实例。'
- en: '`observation`: The execution result of the action.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`observation`：动作的执行结果。'
- en: 'In particular, we format the steps history after the user query as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 特别地，我们将用户查询后的步骤历史格式化如下：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tools
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具
- en: In addition to the tools provided by users, by default, we add a new tool named
    `finish` to allow the agent to stop and return the final answer.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用户提供的工具外，我们默认添加了一个名为`finish`的新工具，允许代理停止并返回最终答案。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Simply returning a string might not fit all scenarios, and we might consider
    allowing users to define their own finish function in the future for more complex
    cases.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地返回一个字符串可能无法满足所有场景，我们未来可能会考虑允许用户为更复杂的情况定义自己的finish函数。
- en: 'Additionally, since the provided tools cannot always solve user queries, we
    allow users to configure if an LLM model should be used to solve a subquery via
    the `add_llm_as_fallback` parameter. This LLM will use the same model client and
    model arguments as the agent’s planner. Here is our code to specify the fallback
    LLM tool:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于提供的工具不能总是解决用户查询，我们允许用户配置是否应该使用LLM模型来解决子查询，方法是通过`add_llm_as_fallback`参数进行配置。这个LLM将使用与代理规划器相同的模型客户端和模型参数。以下是我们指定回退LLM工具的代码：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: React Agent
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React Agent
- en: 'We define the class `[**ReActAgent**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.ReActAgent)`
    to put everything together. It will orchestrate two components:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了类[**ReActAgent**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.ReActAgent)来整合一切。它将协调两个组件：
- en: '`planner`: A `Generator` that works with a `JsonOutputParser` to parse the
    output format and examples of the function calls using `FunctionExpression`.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`planner`：一个`Generator`，与`JsonOutputParser`配合使用，解析输出格式并提供`FunctionExpression`函数调用的示例。'
- en: '`ToolManager`: Manages a given list of tools, the finish function, and the
    LLM tool. It is responsible for parsing and executing the functions.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ToolManager`：管理给定的工具列表、finish函数和LLM工具。它负责解析和执行这些函数。'
- en: Additionally, it manages step_history as a list of `StepOutput` instances for
    the agent’s internal state.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它还管理 step_history 作为 `StepOutput` 实例的列表，用于代理的内部状态。
- en: '![](../Images/f1e51b6cfadc9c78c5729ddecc0c5b9d.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f1e51b6cfadc9c78c5729ddecc0c5b9d.png)'
- en: Prompt the agent with an input query and process the steps to generate a response.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 提供输入查询并处理步骤以生成响应。
- en: Agent In Action
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理操作
- en: 'We will set up two sets of models, llama3–70b-8192 by Groq and gpt-3.5-turbo
    by OpenAI, to test two queries. For comparison, we will compare these with a vanilla
    LLM response without using the agent. Here are the code snippets:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置两组模型，Groq 提供的 llama3–70b-8192 和 OpenAI 提供的 gpt-3.5-turbo，来测试两个查询。为了对比，我们将这些与未使用代理的普通
    LLM 响应进行比较。以下是代码片段：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The structure of React, including the initialization arguments and two major
    components: `tool_manager` and `planner`, is shown below.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: React 的结构，包括初始化参数和两个主要组件：`tool_manager` 和 `planner`，如下所示。
- en: '[PRE7]\n{\n    "thought": "Why the function is called (Optional[str]) (optional)",\n    "action":
    "FuncName() Valid function call expression. Example: \\"FuncName(a=1, b=2)\\"
    Follow the data type specified in the function parameters.e.g. for Type object
    with x,y properties, use \\"ObjectType(x=1, y=2) (str) (required)"\n}\n[PRE8]\n{\n    "thought":
    "I have finished the task.",\n    "action": "finish(answer=\\"final answer: \''answer\''\\")"\n}\n________\n[PRE9]).
    Please do not add anything other than valid JSON output!\n-Use double quotes for
    the keys and string values.\n-DO NOT mistaken the "properties" and "type" in the
    schema as the actual fields in the JSON output.\n-Follow the JSON formatting conventions.''},
    prompt_variables: [''input_str'', ''tools'', ''step_history'', ''output_format_str'']'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7]\n{\n    "thought": "为什么该函数被调用（Optional[str]）（可选）",\n    "action": "FuncName()
    有效的函数调用表达式。例如：\\"FuncName(a=1, b=2)\\" 遵循函数参数中指定的数据类型。例如，对于具有 x、y 属性的 Type 对象，使用
    \\"ObjectType(x=1, y=2)（str）（必填）"\n}\n[PRE8]\n{\n    "thought": "我已完成任务。",\n    "action":
    "finish(answer=\\"final answer: \''answer\''\\")"\n}\n________\n[PRE9])。请不要添加任何其他内容，除了有效的
    JSON 输出！\n-使用双引号作为键和值的字符串标记。\n-不要将架构中的 "properties" 和 "type" 错误地理解为 JSON 输出中的实际字段。\n-遵循
    JSON 格式规范。''}, prompt_variables: [''input_str'', ''tools'', ''step_history'',
    ''output_format_str'']'
- en: )
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '(model_client): GroqAPIClient()'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '(model_client): GroqAPIClient()'
- en: '(output_processors): JsonOutputParser('
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '(output_processors): JsonOutputParser('
- en: 'data_class=FunctionExpression, examples=[FunctionExpression(thought=''I have
    finished the task.'', action=''finish(answer="final answer: \''answer\''")'')],
    exclude_fields=None, return_data_class=True'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'data_class=FunctionExpression, examples=[FunctionExpression(thought=''我已完成任务。'',
    action=''finish(answer="final answer: \''answer\''")'')], exclude_fields=None,
    return_data_class=True'
- en: '(output_format_prompt): Prompt('
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '(output_format_prompt): 提示('
- en: 'template: Your output should be formatted as a standard JSON instance with
    the following schema:'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 模板：你的输出应格式化为符合以下架构的标准 JSON 实例：
- en: '[PRE10]'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '{% if example %}'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{% if example %}'
- en: 'Examples:'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE11]'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '{% endif %}'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{% endif %}'
- en: -Make sure to always enclose the JSON output in triple backticks ([PRE12]
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: -确保始终将 JSON 输出包裹在三个反引号内（[PRE12]
- en: Now, let’s run the test function to see the agent in action.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们运行测试函数，看看代理的实际操作。
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Our agent will show the core steps for developers via colored printout, including
    input_query, steps, and the final answer. The printout of the first query with
    llama3 is shown below (without the color here):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代理将通过有色打印输出展示开发者的核心步骤，包括输入查询、步骤和最终答案。以下是使用 llama3 的第一个查询打印输出（这里没有颜色）：
- en: '![](../Images/2ee8fc221d212043565747fa5e693db2.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2ee8fc221d212043565747fa5e693db2.png)'
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'For the second query, the printout:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个查询，打印输出：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The comparison between the agent and the vanilla LLM response is shown below:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 代理与普通 LLM 响应的比较如下所示：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'For the second query, the comparison is shown below:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个查询，比较结果如下所示：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The ReAct agent is particularly helpful for answering queries that require capabilities
    like computation or more complicated reasoning and planning. However, using it
    on general queries might be an overkill, as it might take more steps than necessary
    to answer the query.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ReAct 代理对于回答需要计算或更复杂推理和规划的查询特别有用。然而，在处理一般查询时使用它可能会过于复杂，因为它可能需要比必要的更多步骤来回答问题。
- en: Customization
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制化
- en: '**Template**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**模板**'
- en: 'The first thing you want to customize is the template itself. You can do this
    by passing your own template to the agent’s constructor. We suggest you to modify
    our default template: `[**DEFAULT_REACT_AGENT_SYSTEM_PROMPT**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.DEFAULT_REACT_AGENT_SYSTEM_PROMPT)`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 首先你想要自定义的是模板本身。你可以通过将自己的模板传递给代理的构造函数来做到这一点。我们建议你修改我们的默认模板：`[**DEFAULT_REACT_AGENT_SYSTEM_PROMPT**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.DEFAULT_REACT_AGENT_SYSTEM_PROMPT)`。
- en: '**Examples for Better Output Format**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**更好的输出格式示例**'
- en: Secondly, the `examples` in the constructor allow you to provide more examples
    to enforce the correct output format. For instance, if we want it to learn how
    to correctly call multiply, we can pass in a list of `FunctionExpression` instances
    with the correct format. Classmethod `from_function` can be used to create a `FunctionExpression`
    instance from a function and its arguments.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，构造函数中的`examples`允许你提供更多示例以确保正确的输出格式。例如，如果我们想让它学习如何正确调用 `multiply`，我们可以传入一个包含正确格式的`FunctionExpression`实例的列表。`classmethod
    from_function`可以用来从一个函数及其参数创建一个`FunctionExpression`实例。
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can visualize how this is passed to the planner prompt via:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式可视化如何将其传递给规划器提示：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The above example will be formated as:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例将格式化为：
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '{'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"thought": "Why the function is called (Optional[str]) (optional)",'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '"thought": "为什么调用这个函数（Optional[str]）（可选）",'
- en: '"action": "FuncName(<kwargs>) Valid function call expression. Example: \"FuncName(a=1,
    b=2)\" Follow the data type specified in the function parameters.e.g. for Type
    object with x,y properties, use \"ObjectType(x=1, y=2) (str) (required)"'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '"action": "FuncName(<kwargs>) 有效的函数调用表达式。例如：\"FuncName(a=1, b=2)\" 请遵循函数参数中指定的数据类型。例如，对于具有
    x、y 属性的类型对象，使用\"ObjectType(x=1, y=2) (str) (required)"'
- en: '}'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '{'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"thought": "Now, let''s multiply two numbers.",'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '"thought": "现在，让我们乘以两个数字。",'
- en: '"action": "multiply(a=3, b=4)"'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '"action": "multiply(a=3, b=4)"'
- en: '}'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ________
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: ________
- en: '{'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"thought": "I have finished the task.",'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '"thought": "我已经完成了任务。",'
- en: '"action": "finish(answer=\"final answer: ''answer''\")"'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '"action": "finish(answer=\"final answer: ''answer''\")"'
- en: '}'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ________
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: ________
- en: '[PRE23]). Please do not add anything other than valid JSON output!'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE23]）。请不要添加任何有效 JSON 输出之外的内容！'
- en: -Use double quotes for the keys and string values.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: -键和字符串值请使用双引号。
- en: -DO NOT mistaken the "properties" and "type" in the schema as the actual fields
    in the JSON output.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: -不要将模式中的“properties”和“type”误认为是 JSON 输出中的实际字段。
- en: -Follow the JSON formatting conventions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循 JSON 格式规范。
- en: </OUTPUT_FORMAT>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: </OUTPUT_FORMAT>
- en: '```'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: '**Subclass ReActAgent**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**子类化 ReActAgent**'
- en: If you want to customize the agent further, you can subclass the `[**ReActAgent**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.ReActAgent)`
    and override the methods you want to change.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想进一步自定义代理，可以子类化`[**ReActAgent**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.ReActAgent)`并重写你想更改的方法。
- en: References
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] A survey on large language model based autonomous agents: [Paitesanshi/LLM-Agent-Survey](https://github.com/Paitesanshi/LLM-Agent-Survey)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] 关于基于大语言模型的自主代理的调查：[Paitesanshi/LLM-Agent-Survey](https://github.com/Paitesanshi/LLM-Agent-Survey)'
- en: '**[**[**2**](https://lightrag.sylph.ai/tutorials/agent.html#id2)**]** ReAct:
    [https://arxiv.org/abs/2210.03629](https://arxiv.org/abs/2210.03629)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**[**[**2**](https://lightrag.sylph.ai/tutorials/agent.html#id2)**]** ReAct:
    [https://arxiv.org/abs/2210.03629](https://arxiv.org/abs/2210.03629)'
- en: API references
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API 参考
- en: '`[**components.agent.react.ReActAgent**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.ReActAgent)`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[**components.agent.react.ReActAgent**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.ReActAgent)`'
- en: '`[**core.types.StepOutput**](https://lightrag.sylph.ai/apis/core/core.types.html#core.types.StepOutput)`'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[**core.types.StepOutput**](https://lightrag.sylph.ai/apis/core/core.types.html#core.types.StepOutput)`'
- en: '`[**components.agent.react.DEFAULT_REACT_AGENT_SYSTEM_PROMPT**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.DEFAULT_REACT_AGENT_SYSTEM_PROMPT)`'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[**components.agent.react.DEFAULT_REACT_AGENT_SYSTEM_PROMPT**](https://lightrag.sylph.ai/apis/components/components.agent.react.html#components.agent.react.DEFAULT_REACT_AGENT_SYSTEM_PROMPT)`'
