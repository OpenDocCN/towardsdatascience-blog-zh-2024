- en: 'GraphRAG in Action: From Commercial Contracts to a Dynamic Q&A Agent'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GraphRAG 实践：从商业合同到动态问答代理
- en: 原文：[https://towardsdatascience.com/graphrag-in-action-from-commercial-contracts-to-a-dynamic-q-a-agent-7d4a6caa6eb5?source=collection_archive---------0-----------------------#2024-11-04](https://towardsdatascience.com/graphrag-in-action-from-commercial-contracts-to-a-dynamic-q-a-agent-7d4a6caa6eb5?source=collection_archive---------0-----------------------#2024-11-04)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/graphrag-in-action-from-commercial-contracts-to-a-dynamic-q-a-agent-7d4a6caa6eb5?source=collection_archive---------0-----------------------#2024-11-04](https://towardsdatascience.com/graphrag-in-action-from-commercial-contracts-to-a-dynamic-q-a-agent-7d4a6caa6eb5?source=collection_archive---------0-----------------------#2024-11-04)
- en: A question-based extraction approach
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一种基于问题的提取方法
- en: '[](https://medium.com/@edward.sandoval.2000?source=post_page---byline--7d4a6caa6eb5--------------------------------)[![Ed
    Sandoval](../Images/2bdc5126db03add63b2ee251db2c3e0b.png)](https://medium.com/@edward.sandoval.2000?source=post_page---byline--7d4a6caa6eb5--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--7d4a6caa6eb5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--7d4a6caa6eb5--------------------------------)
    [Ed Sandoval](https://medium.com/@edward.sandoval.2000?source=post_page---byline--7d4a6caa6eb5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@edward.sandoval.2000?source=post_page---byline--7d4a6caa6eb5--------------------------------)[![Ed
    Sandoval](../Images/2bdc5126db03add63b2ee251db2c3e0b.png)](https://medium.com/@edward.sandoval.2000?source=post_page---byline--7d4a6caa6eb5--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--7d4a6caa6eb5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--7d4a6caa6eb5--------------------------------)
    [Ed Sandoval](https://medium.com/@edward.sandoval.2000?source=post_page---byline--7d4a6caa6eb5--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--7d4a6caa6eb5--------------------------------)
    ·23 min read·Nov 4, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--7d4a6caa6eb5--------------------------------)
    ·23分钟阅读·2024年11月4日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: In this blog post, we introduce an approach that leverages a Graph Retrieval
    Augmented Generation (GraphRAG) method — to streamline the process of ingesting
    commercial contract data and building a Q&A Agent.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客文章中，我们介绍了一种方法，利用图形检索增强生成（GraphRAG）方法——简化商业合同数据的摄取过程，并构建一个问答代理。
- en: This approach diverges from traditional RAG (Retrieval-Augmented Generation)
    by emphasizing efficiency in data extraction, rather than breaking down and vectorizing
    entire documents indiscriminately, which is the predominant RAG approach.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法与传统的RAG（检索增强生成）方法不同，它强调数据提取的效率，而不是像传统RAG方法那样随意拆解和向量化整个文档。
- en: In conventional RAG, every document is split into chunks and vectorized for
    retrieval, which can result in a large volume of unnecessary data being split,
    chunked and stored in vector indexes. Here, however, the focus is on extracting
    only the most relevant information from every contract for a specifc use case,
    Commercial Contract Review. The data is then structured into a knowledge graph,
    which organizes key entities and relationships, allowing for more precise graph
    data retrieval through Cypher queries and vector search.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的RAG中，每个文档都会被拆分成多个块并向量化以供检索，这可能导致大量不必要的数据被拆分、分块并存储在向量索引中。然而，在这里，重点是从每份合同中提取最相关的信息，以满足特定的应用场景——商业合同审核。然后，这些数据会被结构化成一个知识图谱，图谱组织了关键实体和关系，从而通过Cypher查询和向量检索实现更精确的图数据检索。
- en: By minimizing the amount of vectorized content and focusing on highly relevant
    knowledge extracted, this method enhances the accuracy and performance of the
    Q&A agent, making it suitable to handle complex and domain-specific questions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过最小化向量化内容的数量，并专注于提取高度相关的知识，这种方法提高了问答代理的准确性和性能，使其能够处理复杂和特定领域的问题。
- en: 'The 4-stage approach includes: targeted information extraction (LLM + Prompt)
    to create a knowledge graph (LLM + Neo4J) and simple set of graph data retrieval
    functions (Cypher, Text to Cypher, Vector Search). Finally, a Q&A agent leveraging
    the data retrieval functions is built with ([Microsoft Semantic Kernel](https://learn.microsoft.com/en-us/semantic-kernel/overview/))'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 该四阶段方法包括：有针对性的信息提取（LLM + Prompt），创建知识图谱（LLM + Neo4J）以及简单的一组图数据检索功能（Cypher、Text
    to Cypher、Vector Search）。最后，构建一个利用数据检索功能的问答代理，基于([Microsoft Semantic Kernel](https://learn.microsoft.com/en-us/semantic-kernel/overview/))。
- en: The diagram below illustrates the approach
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了该方法的实现方式
- en: '![](../Images/c97973ee81561dc36141cd7bcad3a15d.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c97973ee81561dc36141cd7bcad3a15d.png)'
- en: 'The 4-stage GraphRAG approach: From question-based extraction -> knowledge
    graph model-> GraphRAG retrieval -> Q&A Agent. Image by Sebastian Nilsson @ Neo4J,
    reproduced here with permission from its author.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 四阶段GraphRAG方法：从基于问题的提取 -> 知识图谱模型 -> GraphRAG检索 -> 问答代理。图像由Sebastian Nilsson
    @ Neo4J提供，并获得作者许可在此重制。
- en: But first, for those of us not familiar with commercial law, let’s start with
    a brief intro to the contract review problem.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，对于那些不熟悉商业法的人来说，让我们先简要介绍一下合同审查问题。
- en: Contract Review and Large Language Models
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合同审查与大语言模型
- en: Commercial contract review is a labor-intensive process involving paralegals
    and junior lawyers meticulously identifying critical information in a contract.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 商业合同审查是一个劳动密集型过程，涉及律师助理和初级律师仔细识别合同中的关键信息。
- en: “Contract review is the process of thoroughly reading a contract to understand
    the rights and obligations of an individual or company signing it and assess the
    associated impact”.
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “合同审查是全面阅读合同的过程，目的是理解签署合同的个人或公司所承担的权利和义务，并评估相关影响。”
- en: Hendrycks, Burns et al, NeurIPS 2021, in [CUAD an Expert-Annotated NLP Dataset
    for Legal Contract Review](https://arxiv.org/pdf/2103.06268)
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Hendrycks, Burns 等人，NeurIPS 2021, 见[CUAD：一个专家标注的法律合同审查NLP数据集](https://arxiv.org/pdf/2103.06268)
- en: The first stage of contract review involves reviewing hundreds of pages of contracts
    to find the relevant clauses or obligations. Contract reviewers must identify
    whether relevant clauses exist, what they say if they do exist, and keep track
    of where they are described.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 合同审查的第一阶段包括审查数百页合同，寻找相关条款或义务。合同审查员必须确定是否存在相关条款，若存在，这些条款的内容是什么，并且跟踪它们的位置。
- en: For example, They must determine whether the contract is a 3-year contract or
    a 1-year contract. They must determine the end date of a contract. They must determine
    whether a clause is, say, an Anti-assignment or an Exclusivity clause…”
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 例如，他们必须确定合同是三年期合同还是一年期合同。他们必须确定合同的结束日期。他们必须确定某个条款是否是反转让条款或排他性条款……
- en: Hendrycks, Burns et al, NeurIPS 2021, in [CUAD an Expert-Annotated NLP Dataset
    for Legal Contract Review](https://arxiv.org/pdf/2103.06268)
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Hendrycks, Burns 等人，NeurIPS 2021, 见[CUAD：一个专家标注的法律合同审查NLP数据集](https://arxiv.org/pdf/2103.06268)
- en: It’s a task that demands thoroughness but often suffers from inefficiencies
    but it is suitable for a Large Language Model!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个需要仔细审查的任务，但通常效率低下，但它非常适合大语言模型！
- en: Once the first stage is completed, senior law practitioners can start to examine
    contracts for weaknesses and risks. This is an area where a Q&A agent powered
    by an LLM and grounded by information stored in Knowledge Graph is a perfect Copilot
    for a legal expert.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成第一阶段，高级法律从业者可以开始审查合同中的弱点和风险。这是一个领域，在这个领域中，由LLM支持并通过存储在知识图谱中的信息为基础的问答代理是法律专家的完美副驾驶。
- en: A 4-Step Approach to Build a Commercial Contract Review Agent with LLMs, Function
    Calling & GraphRAG
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LLMs、功能调用和GraphRAG构建商业合同审查代理的四步方法
- en: The remainder of this blog will describe each of the steps in this process.
    Along the way, I will use code snippets to illustrate the main ideas.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的其余部分将描述这个过程中的每个步骤。在此过程中，我将使用代码片段来说明主要概念。
- en: 'The four steps are:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 四个步骤是：
- en: '**Extracting Relevant Information from Contracts (LLM + Contract)**'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从合同中提取相关信息（LLM + 合同）**'
- en: '**Storing information extracted into a Knowledge Graph (Neo4j)**'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将提取的信息存储到知识图谱中（Neo4j）**'
- en: '**Developing simple KG Data Retrieval Functions (Python)**'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**开发简单的KG数据检索功能（Python）**'
- en: '**Building a Q&A Agent handling complex questions (Semantic Kernel, LLM, Neo4j)**'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建处理复杂问题的问答代理（语义内核，LLM，Neo4j）**'
- en: 'The Dataset:'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据集：
- en: The [CUAD (Contract Understanding Atticus Dataset)](https://www.atticusprojectai.org/cuad)
    is a CC BY 4.0 licensed and publicly available dataset of over 13,000 expert-labeled
    clauses across 510 legal contracts, designed to help build AI models for contract
    review. It covers a wide range of important legal clauses, such as confidentiality,
    termination, and indemnity, which are critical for contract analysis.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[CUAD（合同理解阿提克斯数据集）](https://www.atticusprojectai.org/cuad)是一个采用CC BY 4.0许可的公开数据集，包含超过13,000个专家标注的条款，跨越510份法律合同，旨在帮助构建用于合同审查的AI模型。它涵盖了广泛的重要法律条款，例如保密条款、终止条款和赔偿条款，这些对于合同分析至关重要。'
- en: We will use three contracts from this dataset to showcase how our approach to
    effectively extract and analyze key legal information, building a knowledge graph
    and leveraging it for precise, complex question answering.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个数据集中的三个合同，展示我们如何有效地提取和分析关键的法律信息，构建知识图谱，并利用它进行精确的复杂问题回答。
- en: The three contracts combined contain a total of 95 pages.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 三个合同合计包含 95 页。
- en: 'Step 1: Extracting Relevant Information from Contracts'
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1步：从合同中提取相关信息
- en: It is relatively straightforward to prompt an LLM to extract precise information
    from contracts and generate a JSON output, representing the relevant information
    from the contract.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 向大型语言模型（LLM）请求提取合同中的精确信息并生成 JSON 输出，表示合同中的相关信息，是相对直接的。
- en: In commercial review, a prompt can be drafted to to locate each of the critical
    elements mentioned above — parties, dates, clauses — and summarize them neatly
    in a machine-readable (JSON) file.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在商业审查中，可以编写一个提示，来定位上述提到的每个关键元素——各方、日期、条款——并将其整洁地汇总成机器可读的（JSON）文件。
- en: '**Extraction Prompt (simplified)**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**提取提示（简化版）**'
- en: Answer the following questions using information exclusively on this contract
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请仅使用本合同中的信息回答以下问题
- en: '[Contract.pdf]'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[Contract.pdf]'
- en: ''
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1) What type of contract is this?
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 1) 这是什么类型的合同？
- en: 2) Who are the parties and their roles? Where are they incorporated? Name state
    and country (use ISO 3166 Country name)
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 2) 各方是谁及其角色是什么？他们在哪个国家注册？请提供州和国家名称（使用 ISO 3166 国家名称）
- en: 3) What is the Agreement Date?
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 3) 协议日期是什么？
- en: 4) What is the Effective date?
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 4) 生效日期是什么？
- en: ''
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For each of the following types of contract clauses, extract two pieces of
    information:'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于以下每种类型的合同条款，提取两条信息：
- en: a) A Yes/No that indicates if you think the clause is found in this contract
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a) 一个是/否选项，表示你是否认为该条款出现在此合同中
- en: b) A list of excerpts that indicates this clause type exists.
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b) 一份摘录列表，指示该条款类型的存在。
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Contract Clause types: Competitive Restriction Exception, Non-Compete Clause,
    Exclusivity, No-Solicit Of Customers, No-Solicit Of Employees, Non-Disparagement,
    Termination For Convenience, Rofr/Rofo/Rofn, Change Of Control, Anti-Assignment,
    Uncapped Liability, Cap On Liability'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 合同条款类型：竞争限制例外、不竞争条款、排他性、禁止诱导客户、禁止诱导员工、不得贬损、便捷解除、Rofr/Rofo/Rofn、控制权变更、反转让、无限责任、责任上限
- en: ''
  id: totrans-52
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Provide your final answer in a JSON document.
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请将最终答案以 JSON 文档的形式提供。
- en: Please note that the above section shows a simplified version of the extraction
    prompt. A full version can be [seen here](https://github.com/neo4j-product-examples/graphrag-contract-review/blob/main/prompts/contract_extraction_prompt.txt).
    You will find that the the last part of the prompt specifies the desired format
    of the JSON document. This is useful in ensuring a consistent JSON schema output.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述部分展示了提取提示的简化版本。完整版本可以在[此处查看](https://github.com/neo4j-product-examples/graphrag-contract-review/blob/main/prompts/contract_extraction_prompt.txt)。你会发现，提示的最后部分指定了
    JSON 文档的所需格式。这有助于确保输出的一致 JSON 模式。
- en: This task is relatively simple in Python. The `main()`function below is designed
    to process a set of PDF contract files by extracting relevant legal information
    (extraction_prompt), using **OpenAI gpt-4o** and saving the results in JSON format.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这个任务在 Python 中相对简单。下面的 `main()` 函数旨在通过提取相关法律信息（extraction_prompt），使用**OpenAI
    gpt-4o**处理一组 PDF 合同文件，并将结果保存为 JSON 格式。
- en: '[PRE0]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The “***process_pdf***” function uses “**OpenAI gpt-4o**” to perform knowledge
    extraction from the contract with an “extraction prompt”.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: “***process_pdf***” 函数使用“**OpenAI gpt-4o**”从合同中执行知识提取，使用“提取提示”。
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For each contract, the message returned by **“process_pdf”** looks like
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个合同，**“process_pdf”** 返回的消息如下
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Step 2: Creating a Knowledge Graph'
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2步：创建知识图谱
- en: With each contract now as a JSON file, the next step is to create a Knowledge
    Graph in Neo4J.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个合同都是一个 JSON 文件，下一步是在 Neo4J 中创建知识图谱。
- en: 'At this point is useful to spend some time designing the data model. You need
    to consider some key questions:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，花些时间设计数据模型是有用的。你需要考虑一些关键问题：
- en: What do nodes and relationships in this graph represent?
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图中的节点和关系代表什么？
- en: What are the main properties for each node and relationship?,
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个节点和关系的主要属性是什么？
- en: Should there be any properties indexed?
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否需要索引任何属性？
- en: Which properties need vector embeddings to enable semantic similarity search
    on them?
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些属性需要向量嵌入以启用语义相似度搜索？
- en: 'In our case, a suitable design (schema) includes the main entities: Agreements
    (contracts), their clauses, the organizations who are parties to the agreement
    and the relationships amongst them.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，一个合适的设计（模式）包括主要实体：协议（合同）、它们的条款、作为协议当事方的组织及其之间的关系。
- en: A visual representation of the schema is shown below.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下方显示的是模式的可视化表示。
- en: '![](../Images/28f50df8abdbf7e7816523de25b5bfaf.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/28f50df8abdbf7e7816523de25b5bfaf.png)'
- en: Image by the Author
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Only the “Excerpts” — the short text pieces identified by the LLM in Step 1
    — require text embeddings. This approach dramatically reduces the number of vectors
    and the size of the vector index needed to represent each contract, making the
    process more efficient and scalable.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 只有“摘录”——在步骤1中由LLM识别的短文本片段——需要文本嵌入。这种方法显著减少了表示每个合同所需的向量数量和向量索引的大小，从而提高了处理效率和可扩展性。
- en: A simplified version of a python script loading each JSON into a Knowledge Graph
    with the above schema looks like
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简化版的Python脚本，通过上述模式将每个JSON加载到知识图谱中的示例如下：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here the “**CREATE_GRAPH_STATEMENT**” is the only “complex” piece. It is a CYPHER
    statement that maps the Contract (JSON) into the nodes and relationships in the
    Knowledge Graph.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的“**CREATE_GRAPH_STATEMENT**”是唯一的“复杂”部分。它是一个CYPHER语句，将合同（JSON）映射到知识图谱中的节点和关系。
- en: The full Cypher statement is below
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的Cypher语句如下：
- en: '[PRE5]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here’s a breakdown of what the statement does:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该语句执行的操作概述：
- en: Data Binding
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据绑定
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`$data` is the input data being passed into the query in JSON format. It contains
    information about an agreement (contract).'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$data`是以JSON格式传入查询的输入数据，包含有关协议（合同）的信息。'
- en: The second line assigns `data.agreement` to the alias `a`, so the contract details
    can be referenced in the subsequent query.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二行将`data.agreement`赋值给别名`a`，以便在后续查询中引用合同详情。
- en: '**Upsert the Agreement Node**'
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**插入协议节点**'
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`MERGE` attempts to find an existing `Agreement` node with the specified `contract_id`.
    If no such node exists, it creates one.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MERGE`尝试查找具有指定`contract_id`的现有`Agreement`节点。如果没有这样的节点，它会创建一个。'
- en: The `ON CREATE SET` clause sets various properties on the newly created `Agreement`
    node, such as `contract_id`, `agreement_name`, `effective_date`, and other agreement-related
    fields from the JSON input.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ON CREATE SET`子句设置新创建的`Agreement`节点的各种属性，如`contract_id`、`agreement_name`、`effective_date`和来自JSON输入的其他协议相关字段。'
- en: '**Create Governing Law Relationship**'
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**创建适用法律关系**'
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This creates or merges a `Country` node for the governing law country associated
    with the agreement.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这会为与协议相关的适用法律国家创建或合并一个`Country`节点。
- en: Then, it creates or merges a relationship `GOVERNED_BY_LAW` between the `Agreement`
    and `Country`.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，创建或合并`Agreement`和`Country`之间的`GOVERNED_BY_LAW`关系。
- en: It also sets the `state` property of the `GOVERNED_BY_LAW` relationship
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它还设置了`GOVERNED_BY_LAW`关系的`state`属性。
- en: '**Create Party and Incorporation Relationships**'
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**创建当事方和注册地关系**'
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For each party in the contract (`a.parties`), it:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于合同中的每个当事方（`a.parties`），它：
- en: Upserts (Merge) an `Organization` node for the party.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为当事方插入（合并）一个`Organization`节点。
- en: Creates an `IS_PARTY_TO` relationship between the `Organization` and the `Agreement`,
    setting the `role` of the party (e.g., buyer, seller).
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`IS_PARTY_TO`关系，表示`Organization`和`Agreement`之间的关系，并设置当事方的`role`（例如，买方、卖方）。
- en: Merges a `Country` node for the country in which the organization is incorporated.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并一个`Country`节点，表示组织注册的国家。
- en: Creates an `INCORPORATED_IN` relationship between the organization and the incorporation
    country, and sets the `state` where the organization is incorporated
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个`INCORPORATED_IN`关系，表示组织与注册国家之间的关系，并设置组织的注册地`state`。
- en: '**Create Contract Clauses and Excerpts**'
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**创建合同条款和摘录**'
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This part first filters the list of clauses (`a.clauses`) to include only those
    where `clause.exists = true` (i.e., clauses with excerpts identified by the LLM
    in Step 1)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这一部分首先筛选条款列表（`a.clauses`），仅包括`clause.exists = true`的条款（即在步骤1中由LLM识别的包含摘录的条款）。
- en: 'For each clause:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个条款：
- en: It creates a `ContractClause` node with a `name` and `type` corresponding to
    the clause type.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为每个条款创建一个`ContractClause`节点，其中`name`和`type`对应于条款类型。
- en: A `HAS_CLAUSE` relationship is established between the `Agreement` and the `ContractClause`.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`Agreement`和`ContractClause`之间建立了`HAS_CLAUSE`关系。
- en: For each `excerpt` associated with the clause, it creates an `Excerpt` node
    and links it to the `ContractClause` using a `HAS_EXCERPT` relationship.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于与条款相关的每个`excerpt`，它创建一个`Excerpt`节点，并通过`HAS_EXCERPT`关系将其链接到`ContractClause`。
- en: Finally, a `ClauseType` node is created (or merged) for the type of the clause,
    and the `ContractClause` is linked to the `ClauseType` using a `HAS_TYPE` relationship.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，为条款的类型创建（或合并）一个`ClauseType`节点，并通过`HAS_TYPE`关系将`ContractClause`与`ClauseType`链接。
- en: Once the import script runs, a single contract can be visualized in Neo4J as
    a Knowledge Graph
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦导入脚本运行完毕，单个合同就可以在Neo4J中以知识图谱的形式可视化
- en: '![](../Images/f3dd8827f94f0b3130da91d1104f56b0.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f3dd8827f94f0b3130da91d1104f56b0.png)'
- en: 'A Knowledge Graph representation of a single Contract: Parties (organizations)
    in green, Contract Clauses in blue, Excerpts in light brown, Countries in orange.
    Image by the Author'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 单一合同的知识图谱表示：组织（各方）用绿色表示，合同条款用蓝色表示，摘录用浅棕色表示，国家用橙色表示。图片来源：作者
- en: The three contracts in the knowledge graph required only a small graph (under
    100 nodes and less than 200 relationships). Most importantly, only 40–50 vector
    embeddings for the Excerpts are needed. This knowledge graph with a small number
    of vectors can now be used to power a reasonably powerful Q&A agent.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 知识图谱中的三个合同仅需要一个小型图（不到100个节点，少于200个关系）。最重要的是，仅需要40-50个摘录的向量嵌入。这个拥有少量向量的知识图谱现在可以用来支持一个相当强大的问答代理。
- en: 'Step 3: Developing data retrieval functions for GraphRAG'
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3步：为GraphRAG开发数据检索功能
- en: With the contracts now structured in a Knowledge Graph, the next step involves
    creating a small set of graph data retrieval functions. These functions serve
    as the core building blocks, allowing us to develop a Q&A agent in step 4.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，合同已被结构化为知识图谱，下一步是创建一组小型图数据检索功能。这些功能作为核心构建块，使我们能够在第4步开发问答代理。
- en: 'Let’s define a few basic data retrieval functions:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将定义几个基本的数据检索功能：
- en: Retrieve basic details about a contract (given a contract ID)
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检索合同的基本信息（给定合同ID）
- en: Find contracts involving a specific organization (given a partial organization
    name)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找涉及特定组织的合同（给定部分组织名称）
- en: Find contracts that **DO NOT** contain a particular clause type
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找**不包含**特定条款类型的合同
- en: Find contracts contain a specific type of clause
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找包含特定类型条款的合同
- en: Find contracts based on the semantic similarity with the text (Excerpt) in a
    clause (e.g., contracts mentioning the use of “prohibited items”)
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于与条款中的文本（摘录）语义相似度查找合同（例如，查找提到“禁止物品”的合同）
- en: Run a natural language query against all contracts in the database. For example,
    an aggregation query that counts “how many contracts meet certain conditions”.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对数据库中的所有合同执行自然语言查询。例如，执行聚合查询，统计“有多少合同符合特定条件”。
- en: In step 4, we will build a Q&A using the [Microsoft Semantic Kernel library](https://learn.microsoft.com/en-us/semantic-kernel/overview/).
    This library simplifies the agent building process. It allows developers to define
    the functions and tools that an Agent will have at its disposal to answer a question.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4步，我们将使用[Microsoft Semantic Kernel库](https://learn.microsoft.com/en-us/semantic-kernel/overview/)构建问答系统。该库简化了代理构建过程，允许开发人员定义代理可用的功能和工具，以便回答问题。
- en: In order to simplify the integration between Neo4J and the Semantic Kernel library,
    let’s define a `ContractPlugin` that defines the “signature” of each our data
    retrieval functions. Note the `@kernel_function` decorator for each of the functions
    and also the type information and description provided for each function.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化Neo4J与Semantic Kernel库之间的集成，我们将定义一个`ContractPlugin`，该插件定义了每个数据检索功能的“签名”。请注意每个函数的`@kernel_function`装饰器，以及为每个函数提供的类型信息和描述。
- en: Semantic Kernel uses the concept of a “**Plugin**” class to encapsulate a group
    of functions available to an Agent. It will use the decorated functions, type
    information and documentation to inform the LLM function calling capabilities
    about functions available.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Semantic Kernel使用“**插件**”类的概念来封装代理可用的一组功能。它将使用装饰器函数、类型信息和文档来通知LLM函数调用能力，以了解可用的功能。
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: I would recommend exploring the [“ContractService”](https://github.com/neo4j-product-examples/graphrag-contract-review/blob/main/ContractService.py)
    class that contains the implementations of each of the above functions. Each function
    exercises a a different data retrieval technique.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议探索包含上述每个函数实现的 [“ContractService”](https://github.com/neo4j-product-examples/graphrag-contract-review/blob/main/ContractService.py)
    类。每个函数展示了一种不同的数据检索技术。
- en: Let’s walk through the implementation of some of these functions as they showcase
    different GraphRAG data retrieval techniques / patterns
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解这些函数的实现，因为它们展示了不同的 GraphRAG 数据检索技术/模式
- en: Get Contract (from contract ID) — A Cypher-based retrieval function
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根据合同 ID 获取合同 — 基于 Cypher 的检索函数
- en: 'The `get_contract(self, contract_id: int)`, is an asynchronous method designed
    to retrieve details about a specific contract (`Agreement`) from a Neo4J database
    using a Cypher query. The function returns an `Agreement` object populated with
    information about the agreement, clauses, parties, and their relationships.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_contract(self, contract_id: int)` 是一个异步方法，旨在使用 Cypher 查询从 Neo4J 数据库中检索特定合同（`Agreement`）的详细信息。该函数返回一个填充了关于协议、条款、相关方及其关系信息的
    `Agreement` 对象。'
- en: Here’s the implementation of this function
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是此函数的实现
- en: '[PRE12]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The most important component is the The Cypher query in `**GET_CONTRACT_BY_ID_QUERY**`
    This query is executed using **contract_id** supplied as input parameter. The
    output is the matching Agreement, its clauses and parties involved (each party
    has a role and country/state of incorporation)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的组件是 `**GET_CONTRACT_BY_ID_QUERY**` 中的 Cypher 查询。此查询使用作为输入参数提供的 **contract_id**
    执行。输出是匹配的协议、其条款和相关方（每个方都有角色和注册国家/州）。
- en: The data is then passed to an utility function `_get_agreement`which simply
    maps the data to an “Agreement”. The agreement is a TypedDict defined as
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 数据随后传递给一个工具函数 `_get_agreement`，该函数仅将数据映射到一个“Agreement”对象。协议是一个定义为 TypedDict
    的类型。
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Get Contracts WITHOUT a Clause type — Another Cypher retrieval function
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取没有特定条款类型的合同 — 另一个 Cypher 检索函数
- en: This function illustrate a powerful feature of a knowledge graph, which is to
    test for the absence of a relationship.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数展示了知识图谱的一个强大功能，即测试关系的不存在。
- en: The `get_contracts_without_clause()` function retrieves all contracts (`Agreements`)
    from the Neo4J database that **do not** contain a specific type of clause. The
    function takes a `ClauseType` as input and returns a list of `Agreement` objects
    that match the condition.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_contracts_without_clause()` 函数从 Neo4J 数据库中检索所有 **不** 包含特定条款类型的合同（`Agreements`）。该函数接受一个
    `ClauseType` 作为输入，并返回一个符合条件的 `Agreement` 对象列表。'
- en: This type of data retrieval information can’t be easily implemented with vector
    search. The full implementation follows
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的数据检索信息无法通过向量搜索轻松实现。完整的实现如下
- en: '[PRE14]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once again, the format is similar to the previous function. A Cypher query,`**GET_CONTRACTS_WITHOUT_CLAUSE_TYPE_QUERY**`
    , defines the nodes and relationship patterns to be matched. It performs an **optional
    match** to filters out contracts that do contain a clause type, and collects related
    data about the agreement, such as the involved parties and their details.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，格式与前一个函数相似。Cypher 查询 `**GET_CONTRACTS_WITHOUT_CLAUSE_TYPE_QUERY**` 定义了要匹配的节点和关系模式。它执行
    **可选匹配** 以过滤掉包含条款类型的合同，并收集有关协议的相关数据，例如相关方及其详细信息。
- en: The function then constructs and returns a list of `Agreement` objects, which
    encapsulate all the relevant information for each matching agreement.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，函数构建并返回一个 `Agreement` 对象列表，其中封装了每个匹配协议的所有相关信息。
- en: Get Contract with Semantically Similar Text — A Vector-Search + Graph data retrieval
    function
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取具有语义相似文本的合同 — 向量搜索 + 图数据检索函数
- en: The `get_contracts_similar_text()` function is designed to find agreements (contracts)
    that contain clauses with text similar to a provided `clause_text`. It uses semantic
    vector search to identify related Excerpts and then traverses the graph to return
    information about the corresponding agreements and clauses, where those excerpts
    came from.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_contracts_similar_text()` 函数旨在查找包含与提供的 `clause_text` 相似文本的条款的协议（合同）。它使用语义向量搜索来识别相关摘录，然后遍历图谱以返回有关相应协议和条款的信息，以及这些摘录的来源。'
- en: This function leverages a vector index defined on the “text” property of each
    Excerpt. It uses the recently released [Neo4J GraphRAG package](https://neo4j.com/blog/graphrag-python-package/)
    to simplify the Cypher code needed to run semantic search + Graph traversal code.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数利用定义在每个摘录的 “text” 属性上的向量索引。它使用最近发布的 [Neo4J GraphRAG 包](https://neo4j.com/blog/graphrag-python-package/)
    来简化执行语义搜索和图遍历所需的 Cypher 代码。
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Let’s go over the main components of this data retrieval function
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来回顾一下这个数据检索函数的主要组件。
- en: The Neo4j GraphRAG **VectorCypherRetriever** allows a developer to perform semantic
    similarity on a vector index. In our case, for each semantically similar Excerpt
    “node” found, an additional Cypher expression is used to fetch additional nodes
    in the graph related to the node.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Neo4j GraphRAG **VectorCypherRetriever** 允许开发者在向量索引上执行语义相似度分析。在我们的案例中，对于每一个语义相似的摘录“节点”，会使用额外的
    Cypher 表达式来获取与该节点相关的图中其他节点。
- en: The parameters of the **VectorCypherRetriever are** straightforward. The `index_name`
    is the vector index on which to run semantic similarity. The `embedder` generates
    a vector embedding for a piece of text. The `driver` is just an instance of a
    Neo4j Python driver. The `retrieval_query` specify the additional nodes and relationships
    connected with ever “Excerpt” node identified by semantic similarity
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VectorCypherRetriever 的参数** 非常直接。`index_name` 是执行语义相似度分析的向量索引。`embedder`
    为一段文本生成向量嵌入。`driver` 只是 Neo4j Python 驱动的一个实例。`retrieval_query` 指定与每个由语义相似度识别的“摘录”节点相关联的其他节点和关系。'
- en: The `EXCERPT_TO_AGREEMENT_TRAVERSAL_QUERY`
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXCERPT_TO_AGREEMENT_TRAVERSAL_QUERY`'
- en: specifies the additional nodes to be retrieved. In this case, for every Excerpt,
    we are retrieving its related Contract Clause and corresponding Agreement
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 指定要检索的额外节点。在这种情况下，对于每个摘录，我们都在检索与其相关的合同条款和相应的协议。
- en: '[PRE16]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Run a Natural Language Query — A Text 2Cypher data retrieval function
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行自然语言查询——一个 Text 2Cypher 数据检索函数
- en: The `answer_aggregation_question()` function leverages Neo4j GraphRAG package
    “Text2CypherRetriever” to answer a question in natural language. The Text2CypherRetriever
    uses an LLM to turn the user question into a Cypher query and runs it against
    the Neo4j database.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`answer_aggregation_question()` 函数利用 Neo4j GraphRAG 包中的 “Text2CypherRetriever”
    来回答自然语言的问题。Text2CypherRetriever 使用 LLM 将用户问题转换为 Cypher 查询，并在 Neo4j 数据库中执行该查询。'
- en: The function leverages **OpenAI gpt-4o** to generate the required Cypher query.
    Let’s walk through the main components of this data retrieval function.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数利用 **OpenAI gpt-4o** 生成所需的 Cypher 查询。让我们逐步了解这个数据检索函数的主要组件。
- en: '[PRE17]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This function leverages Neo4j GraphRAG package “**Text2CypherRetriever**”. It
    uses an LLM, in this case OpenAI LLM is used to turn a user question (natural
    language) into a Cypher query that is executed against the database. The result
    of this query is returned.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数利用 Neo4j GraphRAG 包中的 “**Text2CypherRetriever**”。它使用 LLM，在本例中使用的是 OpenAI
    LLM，将用户问题（自然语言）转换为一个在数据库中执行的 Cypher 查询，并返回该查询的结果。
- en: A key element to ensure that the LLM generates a query that uses the nodes,
    relationships and properties defined in the database is to provide the LLM with
    a text description of the schema.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 LLM 生成一个使用数据库中定义的节点、关系和属性的查询的关键要素是向 LLM 提供模式的文本描述。
- en: In our case, we used the following representation of the data model is sufficient.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们使用以下的数据模型表示已经足够。
- en: '[PRE18]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Step 4: Building a Q&A Agent'
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四步：构建一个问答代理
- en: Armed with our Knowledge Graph data retrieval functions, we are ready to build
    an agent grounded by GraphRAG :-)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有我们的知识图谱数据检索函数后，我们已经准备好构建一个由 GraphRAG 支持的代理 :-)
- en: Let’s sets up a chatbot agent capable of answering user queries about contracts
    using a combination of OpenAI’s **gpt-4o** model, our data retrieval functions
    and a Neo4j-powered knowledge graph.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们建立一个能够回答关于合同的用户查询的聊天代理，使用 OpenAI 的 **gpt-4o** 模型、我们的数据检索函数和一个由 Neo4j 支持的知识图谱。
- en: We will use Microsoft **Semantic Kernel, a framework that** allows developers
    to integrate LLM function calling with existing APIs and data retrieval functions
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Microsoft **Semantic Kernel，这个框架** 允许开发者将 LLM 函数调用与现有的 API 和数据检索功能进行集成。
- en: The framework uses a concept called **Plugins** to represent specific functionality
    that the kernel can perform. In our case, all of our data retrieval functions
    defined in the “ContractPlugin” can be used by the LLM to answer the question.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架使用一个名为 **Plugins** 的概念来表示内核可以执行的特定功能。在我们的案例中，所有在 “ContractPlugin” 中定义的数据检索函数都可以被
    LLM 用来回答问题。
- en: The framework uses the concept of **Memory** to keep all interactions between
    user and agent, as well as functions executed and data retrieved.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架使用**记忆**的概念来保存用户与代理之间的所有交互，以及执行的功能和检索的数据。
- en: A extremely simple Terminal-based agent can be implemented with a few lines
    of code. The snippet below shows the main parts of the agent (imports and environment
    vars removed).
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一个极其简单的基于终端的代理可以通过几行代码实现。下面的代码片段展示了代理的主要部分（导入和环境变量已删除）。
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Let ask our agent some non-trivial questions
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们问问我们的代理一些非平凡的问题
- en: '**1\. Find me contracts with Price Restrictions but no insurance clauses**'
  id: totrans-168
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**1\. 查找我有价格限制但没有保险条款的合同**'
- en: '[PRE20]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, The Semantic Agent planner has reviewed the available functions in the
    Kernel and determined that answering this question requires invoking two functions
    that, on their own, won’t provide the complete answer.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，语义代理规划器已审查内核中可用的功能，并确定回答这个问题需要调用两个单独的功能，而这两个功能本身无法提供完整的答案。
- en: First, it executes the **“Get Contracts with [Price Restriction] Clauses”**
    function, followed by the **“Get Contracts WITHOUT [Insurance] Clauses”** function.
    The planner then combines the results from both functions to identify the intersection,
    ultimately arriving at the correct answer.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，它执行**“获取带有[价格限制]条款的合同”**功能，然后执行**“获取不含[保险]条款的合同”**功能。接着，规划器将这两个功能的结果结合起来，找到交集，最终得出正确答案。
- en: If you look at the debugging information, you can confirm the sequence of calls
    performed by the LLM, along with information on the number of tokens consumed
    by the call. Notice the calls with the 2 data retrieval functions.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看调试信息，你可以确认LLM执行的调用顺序，以及调用中消耗的token数量。注意具有两个数据检索功能的调用。
- en: '![](../Images/fab333a8a824e1d0ce2c3367bcfa10ce.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fab333a8a824e1d0ce2c3367bcfa10ce.png)'
- en: '**2\. Yes, please. Provide more details**'
  id: totrans-174
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**2\. 是的，请提供更多细节**'
- en: '[PRE21]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In this case, behind the scenes, the LLM used the **“Find Contract by ID”**.
    You may have noticed that the output shown to the user did not include the id
    of the contract. However, the Semantic Kernel stored all information returned
    from the functions from previous calls in the conversation memory!
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，背后，LLM使用了**“按ID查找合同”**。你可能已经注意到，显示给用户的输出并未包含合同的ID。然而，语义内核已经将之前调用返回的所有信息存储在对话记忆中！
- en: This powerful combination of having the agent decide which function(s) to call,
    the use of memory and the automatic marshalling of the user queries into function
    calls with the right parameters explain the **“Magic”** behind an agent built
    with Semantic Kernel!
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这种代理决定调用哪个功能、使用记忆以及将用户查询自动转换为具有正确参数的功能调用的强大组合，解释了构建于语义内核上的代理背后的**“魔力”**！
- en: '**3\. Does any contract mention the ability to make price changes from time
    to time**'
  id: totrans-178
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**3\. 是否有任何合同提到可以不时调整价格的能力**'
- en: '[PRE22]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Company reserves the right to change its process and/or fees, from time to time,
    in its sole and absolute discretion. In the event of a price and/or fee change
    for Technology, Company shall notify MA in writing ninety (90) days prior to the
    effective date of any such change. All other prices and/or fees may be adjusted
    without prior notice to MA.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 公司保留随时根据其单独且绝对的判断更改流程和/或费用的权利。如果技术价格和/或费用发生变化，公司应在任何此类变更生效日期前九十（90）天书面通知MA。所有其他价格和/或费用可在无需提前通知MA的情况下进行调整。
- en: '[PRE23]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In order to answer this question, Semantic Kernel is executing the **get_contract_similar_text
    data** retrieval function.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回答这个问题，语义内核正在执行**get_contract_similar_text 数据**检索功能。
- en: '[PRE24]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Company reserves the right to change its process and/or fees, from time to time,
    in its sole and absolute discretion. In the event of a price and/or fee change
    for Technology, Company shall notify MA in writing ninety (90) days prior to the
    effective date of any such change. All other prices and/or fees may be adjusted
    without prior notice to MA.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 公司保留随时根据其单独且绝对的判断更改流程和/或费用的权利。如果技术价格和/或费用发生变化，公司应在任何此类变更生效日期前九十（90）天书面通知MA。所有其他价格和/或费用可在无需提前通知MA的情况下进行调整。
- en: '[PRE25]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As explained earlier, this function uses vector search and a Cypher query to
    retrieve not just semantically similar excerpts but also the related contract
    and clauses that includes them.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，该功能使用向量搜索和Cypher查询来检索不仅在语义上相似的摘录，还包括包含它们的相关合同和条款。
- en: Finally, let’s ask how many contracts are there on the database
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们询问数据库中有多少合同
- en: 4\. How many contracts are there in the database?
  id: totrans-188
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 4\. 数据库中有多少个合同？
- en: This questions requires the LLM to use the Text2Cypher data retriever
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题要求LLM使用Text2Cypher数据检索器
- en: '[PRE26]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The debug information confirms that Semantic Kernel ran the Text2Cypher data
    retrieval function with “user_question” = “How many contracts are there in the
    database’?
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 调试信息确认语义内核运行了Text2Cypher数据检索功能，且“user_question” = “数据库中有多少个合同？”
- en: '[PRE27]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '**Try it Yourself**'
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**亲自尝试**'
- en: The [github repo](https://github.com/neo4j-product-examples/graphrag-contract-review)
    contains a Streamlit app that provides a more elegant Agent UI. You are encouraged
    to interact with the agent and make changes to the ContractPlugin so your agent’s
    ability to handle more questions!
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '[github 仓库](https://github.com/neo4j-product-examples/graphrag-contract-review)包含一个Streamlit应用程序，提供了一个更优雅的代理UI。我们鼓励你与代理互动，并对ContractPlugin进行修改，以提升代理处理更多问题的能力！'
- en: Conclusion
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this blog, we explored a Graph Retrieval Augmented Generation (GraphRAG)
    approach to transform labor-intensive tasks of commercial contract review into
    a more efficient, AI-driven process.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇博客中，我们探讨了一个Graph Retrieval Augmented Generation（GraphRAG）方法，将商业合同审查这一劳动密集型任务转化为更高效、更智能的AI驱动过程。
- en: By focusing on targeted information extraction using LLMs and prompts, building
    a structured knowledge graph with Neo4j, implementing simple data retrieval functions,
    and ultimately developing a Q&A agent, we created an intelligent solution that
    handles complex questions effectively.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用大型语言模型（LLMs）和提示进行针对性的信息提取，使用Neo4j构建结构化知识图谱，实现简单的数据检索功能，并最终开发出问答代理，我们创建了一种能够有效处理复杂问题的智能解决方案。
- en: This approach minimizes inefficiencies found in traditional vector search based
    RAG, focusing instead on extracting only relevant information, reducing the need
    for unnecessary vector embeddings, and simplifying the overall process. We hope
    this journey from contract ingestion to an interactive Q&A agent inspires you
    to leverage GraphRAG in your own projects for improved efficiency and smarter
    AI-driven decision-making.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法减少了传统基于向量搜索的RAG中发现的低效问题，而是专注于提取相关信息，减少了不必要的向量嵌入，简化了整体过程。我们希望从合同导入到互动问答代理的这段旅程能激励你在自己的项目中使用GraphRAG，以提高效率和更智能的AI驱动决策。
- en: Start building your own commercial contract review agent today and experience
    the power of GraphRAG firsthand!
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 今天就开始构建你自己的商业合同审查代理，并亲身体验GraphRAG的强大功能！
- en: Resources
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: 'For those eager to take a deeper dive, please check out the resources linked
    below:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些渴望深入了解的人，请查看以下链接的资源：
- en: '[GitHub repository with the code and detailed instructions](https://github.com/neo4j-product-examples/graphrag-contract-review)'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[带有代码和详细说明的GitHub仓库](https://github.com/neo4j-product-examples/graphrag-contract-review)'
- en: '[Contract Understanding Atticus Dataset (CUAD) for Legal Contracts](https://github.com/TheAtticusProject/cuad)
    (Github)'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[法律合同的合同理解Atticus数据集(CUAD)](https://github.com/TheAtticusProject/cuad)（Github）'
- en: '[CUAD: An Expert-Annotated NLP Dataset for Legal Contract Review. Hendrycks,
    Burns, Chen, Ball. NeurIPS 2021](https://arxiv.org/pdf/2103.06268)'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CUAD：一个专家注释的法律合同审查NLP数据集。Hendrycks，Burns，Chen，Ball。NeurIPS 2021](https://arxiv.org/pdf/2103.06268)'
- en: '[Neo4j GraphRAG package launch blog post](https://neo4j.com/blog/graphrag-python-package/)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Neo4j GraphRAG包发布博客](https://neo4j.com/blog/graphrag-python-package/)'
- en: '[Microsoft Semantic Kernel library](https://learn.microsoft.com/en-us/semantic-kernel/overview/)'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[微软语义内核库](https://learn.microsoft.com/en-us/semantic-kernel/overview/)'
- en: Unless otherwise noted, all images are by the author
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，所有图片均由作者提供
