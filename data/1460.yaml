- en: Anatomy of Windows Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 窗口函数的结构
- en: 原文：[https://towardsdatascience.com/anatomy-of-windows-functions-08f04938b12b?source=collection_archive---------11-----------------------#2024-06-11](https://towardsdatascience.com/anatomy-of-windows-functions-08f04938b12b?source=collection_archive---------11-----------------------#2024-06-11)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/anatomy-of-windows-functions-08f04938b12b?source=collection_archive---------11-----------------------#2024-06-11](https://towardsdatascience.com/anatomy-of-windows-functions-08f04938b12b?source=collection_archive---------11-----------------------#2024-06-11)
- en: Theory and practice of an underappreciated SQL operation
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个被低估的 SQL 操作的理论与实践
- en: '[](https://joaopedro214.medium.com/?source=post_page---byline--08f04938b12b--------------------------------)[![João
    Pedro](../Images/64a0e14527be213e5fde0a02439fbfa7.png)](https://joaopedro214.medium.com/?source=post_page---byline--08f04938b12b--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--08f04938b12b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--08f04938b12b--------------------------------)
    [João Pedro](https://joaopedro214.medium.com/?source=post_page---byline--08f04938b12b--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://joaopedro214.medium.com/?source=post_page---byline--08f04938b12b--------------------------------)[![João
    Pedro](../Images/64a0e14527be213e5fde0a02439fbfa7.png)](https://joaopedro214.medium.com/?source=post_page---byline--08f04938b12b--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--08f04938b12b--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--08f04938b12b--------------------------------)
    [João Pedro](https://joaopedro214.medium.com/?source=post_page---byline--08f04938b12b--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--08f04938b12b--------------------------------)
    ·12 min read·Jun 11, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--08f04938b12b--------------------------------)
    ·12分钟阅读·2024年6月11日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/372d1f6e1d8557debca3c91f47c3198b.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/372d1f6e1d8557debca3c91f47c3198b.png)'
- en: Photo by [Marcus Woodbridge](https://unsplash.com/@marcuswoodbridge?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Marcus Woodbridge](https://unsplash.com/@marcuswoodbridge?utm_source=medium&utm_medium=referral)
    于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: The IT area is known for its constant changes, with new tools, new frameworks,
    new cloud providers, and new LLMs being created every day. However, even in this
    busy world, some principles, paradigms, and tools seem to challenge the *status
    quo* of ‘nothing is forever’. And, in the data area, there is no example of this
    as imposing as the SQL language.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: IT 领域以其不断变化而闻名，每天都有新的工具、新的框架、新的云服务提供商和新的大语言模型（LLMs）被创造出来。然而，即便在这个忙碌的世界中，一些原则、范式和工具似乎在挑战
    *现状*——“没有什么是永恒不变的”。而在数据领域，没有什么能像 SQL 语言一样，给人留下如此深刻的印象。
- en: Since its creation back in the 80s, it passed the age of Data Warehouses, materialized
    itself in the Hadoop/Data-lake/Big Data as Hive, and is still alive today as one
    of the Spark APIs. The world changed a lot but SQL remained not only alive but
    very important and present.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 自从它在80年代诞生以来，SQL 穿越了数据仓库的时代，实现在 Hadoop/数据湖/大数据中如 Hive 的形式，直到今天，作为 Spark API
    之一仍然存在。世界变化了很多，但 SQL 不仅依然存在，而且非常重要和广泛应用。
- en: But SQL is like chess, easy to understand the basic rules but hard to master!
    It is a language with many possibilities, many ways to solve the same problem,
    many functions and keywords, and, unfortunately, many underrated functionalities
    that, if better known, could help us a lot when building queries.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但是 SQL 就像国际象棋，理解基本规则很容易，但要精通却很难！它是一种有着众多可能性、解决同一问题的多种方式、许多函数和关键字的语言，遗憾的是，它还有许多被低估的功能。如果这些功能被更好地了解，可能在构建查询时能为我们带来很大的帮助。
- en: 'Because of this, in this post, I want to talk about one of the not-so-famous
    SQL features that I found extremely useful when building my daily queries: Window
    Functions.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这篇文章中，我想谈谈我在构建日常查询时发现非常有用的一个不太为人所知的 SQL 特性：窗口函数。
- en: What is a Window Function
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是窗口函数
- en: The traditional and most famous SGBDs (PostgreSQL, MySQL, and Oracle) are based
    on relational algebra concepts. In it, the lines are called tuples, and, the tables,
    are relations. A relation is a set (in the mathematical sense) of tuples, i.e.
    there is no ordering or connection between them. Because of that, there is no
    default ordering of lines in a table, and the calculus performed on one line does
    not impact and it is not impacted by the results of another. Even clauses like
    ORDER BY, only order tables, and it is not possible to make calculus in a line
    based on the values of other lines.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的最著名的关系型数据库（如 PostgreSQL、MySQL 和 Oracle）是基于关系代数概念的。在其中，行称为元组（tuples），表格称为关系（relations）。关系是一个元组的集合（从数学意义上讲），也就是说，它们之间没有顺序或连接。因此，表中的行没有默认顺序，并且在一行上执行的计算不会影响也不会受其他行结果的影响。即使是像
    ORDER BY 这样的子句，也仅仅对表格进行排序，无法在一行中基于其他行的值进行计算。
- en: Simply put, window functions fix this, extending the SQL functionalities, and
    allowing us to perform calculations in one row based on the values ​​of other
    lines.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，窗口函数解决了这个问题，扩展了 SQL 功能，允许我们基于其他行的值在一行中执行计算。
- en: Basic cases for understanding/ The Anatomy
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解的基本案例/解剖结构
- en: '**1-Aggregating Without Aggregation**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**1-无聚合的聚合**'
- en: The most trivial example to understand Windows functions is the ability to ‘*aggregate
    without aggregation*’.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 理解窗口函数的最简单例子是能够“*无聚合的聚合*”。
- en: When we made an aggregation with traditional GROUP BY, the whole table is condensed
    into a second table, where each line represents a group’s element. With Windows
    Functions, instead of condensing the lines, it’s possible to create a new column
    in the same table containing the aggregation results.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用传统的 GROUP BY 进行聚合时，整个表格会被压缩成一个新表，其中每一行代表一个组的元素。使用窗口函数时，不是压缩行，而是可以在同一表格中创建一个包含聚合结果的新列。
- en: 'For example, if you need to add up all the expenses in your expense table,
    traditionally you would do:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你需要将支出表中的所有支出加总，传统方法是这样做的：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With Windows functions, you would make something like that:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用窗口函数时，你会做如下操作：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The image below shows the results:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了结果：
- en: '![](../Images/515a0dd1db51ff15a16402b7e56af807.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/515a0dd1db51ff15a16402b7e56af807.png)'
- en: Image 1\. Traditional Group By vs Windows Functions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图1\. 传统的 Group By 与窗口函数。
- en: Rather than creating a new table, it will return the aggregation’s value in
    a new column. Note that the value is the same, but the table was not ‘*summarized*’,
    the original lines were maintained — we just calculated an *aggregation without
    aggregating* the table ;)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 与其创建一个新表，它将在一个新列中返回聚合值。请注意，值是相同的，但表并没有被“*汇总*”，原始的行被保留——我们只是进行了一个*无聚合的聚合* ;)
- en: The OVER clause is the indication that we’re creating a window function. This
    clause defines over which lines the calculation will be made. It is empty in the
    code above, so it will calculate the SUM() over all the lines.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: OVER 子句是我们创建窗口函数的标志。该子句定义了计算将在哪些行上进行。上述代码中它是空的，因此它将在所有行上计算 SUM()。
- en: This is useful when we need to make calculations based on totals (or averages,
    minimums, maximums) of columns. For example, to calculate how much each expense
    contributes in percentage relative to the total.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要基于列的总计（或平均值、最小值、最大值）进行计算时，这非常有用。例如，要计算每项支出相对于总支出的百分比。
- en: 'In real cases, we might also want the detail by some category, like in the
    example in image 2, where we have company expenses by department. Again, we can
    achieve the total spent by each department with a simple GROUP BY:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际案例中，我们可能还希望按某些类别查看详细信息，就像图2中的例子那样，其中列出了按部门划分的公司支出。同样，我们可以通过简单的 GROUP BY 来获得每个部门的总支出：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Or specify a PARTITION logic in the window function:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在窗口函数中指定 PARTITION 逻辑：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'See the result:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 查看结果：
- en: '![](../Images/0947321d3d95e41d31ad0db854d715d5.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0947321d3d95e41d31ad0db854d715d5.png)'
- en: Image 2\. Traditional Group By vs Windows Functions II.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图2\. 传统的 Group By 与窗口函数 II。
- en: This example helps to understand why the operation is called a ‘window’ function
    — the OVER clause defines a set of lines over which the corresponding function
    will operate, a ‘window’ in the table.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子有助于理解为什么该操作被称为“窗口”函数——OVER 子句定义了一组行，函数将在这些行上执行操作，表中的一个“窗口”。
- en: In the case above, the SUM() function will operate in the partitions created
    by the depto column (RH and SALES) — it will sum all the values in the ‘value’
    column for each item in the depto column in isolation. The group the line is part
    of (RH or SALES) determines the value in the ‘Total’ column.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，SUM() 函数将在由 depto 列（RH 和 SALES）创建的分区中操作 —— 它将分别计算 depto 列中每个项目的“value”列的所有值。该行所属的组（RH
    或 SALES）决定了“Total”列中的值。
- en: '**2 — Time and Ordering awareness**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**2 — 时间和排序意识**'
- en: Sometimes we need to calculate the value of a column in a row based on the values
    of other rows. A classic example is the yearly growth in a country’s GDP, computed
    using the current and the previous value.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们需要基于其他行的值来计算某一行中的列的值。一个经典的例子是计算一个国家 GDP 的年增长率，使用当前值和前一年的值来计算。
- en: Computations of this kind, where we need the value of the past year, the difference
    between the current and the next rows, the first value of a series, and so on
    are a testament to the Windows function’s power. In fact, I don’t know if this
    behavior could be achieved with standard SQL commands! It probably could, but
    would be a very complex query…
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这类计算，比如需要前一年值、当前行与下一行的差异、一系列中的第一个值等等，都是窗口函数强大功能的体现。事实上，我不知道是否可以通过标准 SQL 命令实现这种行为！可能可以，但会是一个非常复杂的查询……
- en: 'But windows functions made it straightforward, see the image below (table recording
    some child’s height):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，窗口函数使得这一过程变得简单，见下图（表格记录了某些孩子的身高）：
- en: '![](../Images/d21d9b89afae09daf771815ebdbfa173.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d21d9b89afae09daf771815ebdbfa173.png)'
- en: Image 3\. Analytical Function example.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图像 3\. 分析函数示例。
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The function LAG( ‘column’ ) is responsible for referencing the value of ‘column’
    in the previous row. You can imagine it as a sequence of steps: In the second
    line, consider the value of the first; In the third, the value of the second;
    and so on… The first line doesn’t count (hence the *NULL*), as it has no predecessor.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: LAG( ‘column’ ) 函数负责引用前一行的‘column’值。你可以把它想象成一个步骤序列：在第二行，考虑第一行的值；在第三行，考虑第二行的值；依此类推……第一行不算（因此是*NULL*），因为它没有前一个值。
- en: 'Naturally, some ordering criterion is needed to define what the ‘previous line’
    is. And that’s another important concept in Windows functions: **analytical functions**.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 自然地，需要一些排序标准来定义“前一行”是什么。这是窗口函数中的另一个重要概念：**分析函数**。
- en: 'In contrast to traditional SQL functions, analytical functions (like LAG) consider
    that there exists an ordering in the lines — and this order is defined by the
    clause ORDER BY inside OVER(), i.e., the concept of first, second, third lines
    and so on is defined inside the OVER keyword. The main characteristic of these
    functions is the ability to reference other rows relative to the current row:
    LAG references the previous row, LEAD references the next rows, FIRST references
    the first row in the partition, and so on.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 与传统 SQL 函数不同，分析函数（如 LAG）认为行之间是有排序的 —— 这个排序是由 OVER() 内的 ORDER BY 子句定义的，也就是说，第一行、第二行、第三行等概念是在
    OVER 关键字内定义的。这些函数的主要特点是能够相对于当前行引用其他行：LAG 引用上一行，LEAD 引用下一行，FIRST 引用分区中的第一行，依此类推。
- en: One nice thing about LAG and LEAD is that both accept a second argument, the
    offset, which specifies how many rows forward (for LEAD) or backward (for LAG)
    to look.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: LAG 和 LEAD 的一个优点是，它们都接受第二个参数，即偏移量，指定向前（对于 LEAD）或向后（对于 LAG）查看多少行。
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And it is also perfectly possible to perform calculations with these functions:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 而且，使用这些函数进行计算也是完全可行的：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**3 — Time Awareness and Aggregation**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**3 — 时间意识与聚合**'
- en: Time and space are only one — once said Einsteinm, or something like that, I
    don’t know ¯\_(ツ)_/¯
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 时间与空间其实是统一的 —— 爱因斯坦曾经这么说过，或者类似的话，我不太确定 ¯\_(ツ)_/¯
- en: Now that we know how to partition and order, we can use these two together!
    Going back to the previous example, let’s suppose there are more kids on that
    table and we need to compute the growth rate of each one. It’s very simple, just
    combine ordering and partitioning! Let’s order by year and partition by child
    name.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何进行分区和排序，可以将这两者结合使用！回到之前的例子，假设桌子上有更多的孩子，我们需要计算每个孩子的增长率。非常简单，只需将排序和分区结合起来！我们可以按年份排序，并按孩子的名字进行分区。
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/922cd5ae7576c1932396cd98d0439a81.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/922cd5ae7576c1932396cd98d0439a81.png)'
- en: Image 4\. ORDER BY + PARTITION BY
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图像 4\. ORDER BY + PARTITION BY
- en: The above query does the following — Partitions the table by child and, in each
    partition, orders the values ​​by year and divides the current year height value
    with the previous value (and subtracts the result from one).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询执行以下操作——按子项对表进行分区，并在每个分区中按年份对值进行排序，随后用当前年份的高度值除以前一年的值（并从结果中减去1）。
- en: We’re getting closer to the full concept of ‘window’! It’s a table slice, a
    set of rows grouped by the columns defined in PARTITION BY that are ordered by
    the fields in ORDER BY, where all the computations are made considering only the
    rows in the same group (partition) and a specific ordering.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正逐渐接近‘窗口’的完整概念！它是一个表切片，是一组按PARTITION BY中定义的列分组的行，按ORDER BY中的字段排序，其中所有计算仅考虑同一组（分区）中的行以及特定的排序。
- en: '**4-Ranking and Position**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**4-排名与位置**'
- en: 'Windows functions can be divided into three categories, two of which we already
    talked about: Aggregation functions ( COUNT, SUM, AVG, MAX, … ) and Analytical
    Functions ( LAG, LEAD, FIRST_VALUE, LAST_VALUE, … ).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口函数可以分为三类，其中两类我们已经讨论过：聚合函数（COUNT、SUM、AVG、MAX等）和分析函数（LAG、LEAD、FIRST_VALUE、LAST_VALUE等）。
- en: The third group is the simplest — Ranking Functions, with its greatest exponent
    being the row_number() function, which returns an integer representing the position
    of a row in the group (based on the defined order).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第三组是最简单的——排名函数，其中最常用的函数是row_number()，它返回一个整数，表示行在分组中的位置（基于定义的顺序）。
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Ranking functions, as the name indicates, return values based on the position
    of the line in the group, defined by the ordering criteria. ROW_NUMBER, RANK,
    and NTILE are some of the most used.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 排名函数，顾名思义，根据行在分组中的位置返回值，该位置由排序标准定义。ROW_NUMBER、RANK和NTILE是最常用的几个函数。
- en: '![](../Images/48c1e37784164faa6c962419619ba7d5.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48c1e37784164faa6c962419619ba7d5.png)'
- en: Image 5\. Ranking Function example
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图片5：排名函数示例
- en: In the image above, a row number is created based on each player’s score
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的图片中，行号是根据每个玩家的得分生成的。
- en: … and yes, it commits the atrocious programming sin of starting from 1.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: …是的，它犯了一个可怕的编程错误，那就是从1开始。
- en: '**5-Window size**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**5-窗口大小**'
- en: All the functions presented till this point consider ALL the rows in the partition/group
    when computing the results. For example, the SUM() described in the first example
    considers all department’s rows to compute the total.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，所有展示的函数在计算结果时都会考虑分区/组中的**所有行**。例如，第一示例中描述的SUM()函数会考虑所有部门的行来计算总和。
- en: But it is possible to specify a smaller window size, i.e. how many lines before
    and after the current line should be considered in the computations. This is a
    helpful functionality to calculate moving averages / rolling windows.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 但可以指定一个更小的窗口大小，也就是计算时需要考虑当前行前后多少行。这是一个有用的功能，用于计算移动平均/滚动窗口。
- en: 'Let’s consider the following example, with a table containing the daily number
    of cases of a certain disease, where we need to compute the average number of
    cases considering the current day and the two previous. Note that it’s possible
    to solve this problem with the LAG function, shown earlier:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑以下示例，表格中包含某种疾病的每日病例数，我们需要计算考虑当前日期和前两天的平均病例数。请注意，可以使用之前展示的LAG函数来解决这个问题：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'But we can achieve the same result more elegantly using the concept of **frames**:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们可以使用**框架**的概念更优雅地实现相同的结果：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The frame above specifies that we must calculate the average looking only for
    the two previous (PRECEDING) rows and the current row. If we desire to consider
    the previous, the current line, and the following line, we can change the frame:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 上述框架指定了我们必须仅计算前两行（PRECEDING）和当前行的平均值。如果我们希望考虑前一行、当前行和后一行，可以更改框架：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And that’s all a frame is — a way to limit a function’s reach to a specific
    bound. By default (in most cases), windows functions consider the following frame:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是所谓的框架——限制一个函数作用范围到特定边界的方法。默认情况下（在大多数情况下），窗口函数会考虑以下框架：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/63a58c1627d3e6cb5a9756f33d45be17.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/63a58c1627d3e6cb5a9756f33d45be17.png)'
- en: Image 6\. Exploring Window Size definition
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图片6：探索窗口大小定义
- en: I hope this introduction helps you better understand what Windows functions
    are, how they work, and their syntax in practice. Naturally, many more keywords
    can be added to Windows functions, but I think this introduction already covers
    many commands you’ll likely use in everyday life. Now, let’s see some interesting
    practical applications that I use in my daily routine to solve problems — some
    are very curious!
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这段介绍能帮助你更好地理解什么是窗口函数，它们是如何工作的，以及它们在实际中的语法。自然，窗口函数可以添加更多的关键字，但我认为这段介绍已经涵盖了你在日常工作中很可能使用的许多命令。接下来，让我们看一些我在日常工作中用来解决问题的有趣实际应用
    —— 有些是非常有趣的！
- en: Curious and Interesting use cases for windows functions
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 窗口函数的好奇而有趣的使用案例
- en: Cumulative Sum over time
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随时间的累积和
- en: This is one of the most classic cases of using windows functions.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用窗口函数的经典案例之一。
- en: 'Imagine a table with your salary per month and you want to know how much you
    earned in each month cumulatively (considering all previous months), this is how
    it works:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一张表，记录了你每个月的工资，并且你想知道每个月的累计收入（考虑到所有之前的月份），它是这样工作的：
- en: '![](../Images/8c463284ee60b1bc1514217408428556.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c463284ee60b1bc1514217408428556.png)'
- en: Image 7\. Practical example — Cumulative SUM
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7\. 实际示例 — 累积和
- en: Pretty simple, right?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单，对吧？
- en: An interesting thing to note in this query is that the SUM() function considers
    the current row and all previous rows to calculate the aggregation, as mentioned
    previously.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个查询中，值得注意的一个有趣点是，SUM() 函数会考虑当前行和所有之前的行来计算聚合，就像之前提到的那样。
- en: Duration of events in log tables
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志表中事件的持续时间
- en: I recently used this one in my post [**My First Billion (of Rows) in DuckDB**](/my-first-billion-of-rows-in-duckdb-11873e5edbb5),
    in which I manipulate logs from electronic voting machines in Brazil, it’s worth
    checking if you’re interested in the processing of large volumes of data.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我最近在我的文章[**我在 DuckDB 中的第一亿行（数据）**](/my-first-billion-of-rows-in-duckdb-11873e5edbb5)中使用了这个方法，在文章中我处理了来自巴西电子投票机的日志数据，如果你对处理大数据量感兴趣，这篇文章值得一读。
- en: 'In summary, imagine a log table in which each event is composed of a timestamp
    that indicates when it started, its name, and a unique identifier. Considering
    that each event only starts when the previous one ends, we can easily add a column
    with the event duration as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，假设有一个日志表，每个事件都由一个时间戳组成，表示事件的开始时间、事件的名称以及一个唯一标识符。考虑到每个事件只有在前一个事件结束后才开始，我们可以轻松地添加一个表示事件持续时间的列，如下所示：
- en: '![](../Images/c1bd06a9e78748dcf647153074683b60.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c1bd06a9e78748dcf647153074683b60.png)'
- en: Image 8\. Practical example — Event Duration in Logs
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8\. 实际示例 — 日志中的事件持续时间
- en: Fill missing values (With the last occurrence)
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填充缺失值（使用最后一次出现的值）
- en: Machine learning classic with pandas! Just do a fillna, bfill or whatever, and
    that’s it, we fill in the null values with the last valid occurrence.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pandas 进行机器学习时的经典方法！只需进行 fillna、bfill 或者其他方法，就可以填充空值，用最后一个有效值填补缺失值。
- en: How to do this in SQL? Simple!
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在 SQL 中做到这一点？很简单！
- en: '![](../Images/f641b9eb882d0002c966009bd0bf68da.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f641b9eb882d0002c966009bd0bf68da.png)'
- en: Image 8\. Practical example — Filling Missing Values I
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8\. 实际示例 — 填充缺失值 I
- en: When we first study machine learning, we work a lot with pandas and get used
    to their high-level functions. However, when working on a real project, the data
    volume can be very large, so we may not be lucky enough to use pandas and need
    to switch to tools such as PySpark, Snowflake, Hive+hadoop, etc — all of which,
    in one way or another, can be operated in SQL. Therefore, I think it is important
    to learn how to do these treatments and preprocessing in SQL.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们第一次学习机器学习时，我们经常使用 pandas，并习惯了它们的高级功能。然而，在实际项目中，数据量可能非常庞大，因此我们可能没有运气使用 pandas，而需要切换到
    PySpark、Snowflake、Hive+hadoop 等工具 —— 这些工具都可以以某种方式用 SQL 进行操作。因此，我认为学习如何在 SQL 中进行这些数据处理和预处理是非常重要的。
- en: Filling missing values (With the avg of preceding rows)
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填充缺失值（使用前面行的平均值）
- en: A slightly more elaborate way of filling in null values, but still simple!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 填充空值的稍微复杂一点的方法，但依然简单！
- en: '![](../Images/7c734d992b57a4881e1a4b9376119521.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7c734d992b57a4881e1a4b9376119521.png)'
- en: Image 8\. Practical example — Filling Missing Values II
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8\. 实际示例 — 填充缺失值 II
- en: 'This example highlights that, despite seeming complicated and special, windows
    functions can be used just like normal columns! They can be included in CASE,
    calculations can be done with them and so on. One of the few restrictions I know
    of is that they cannot be placed directly in a WHERE clause:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子突出了尽管窗口函数看起来复杂且特殊，但它们可以像普通列一样使用！它们可以包含在 CASE 语句中，可以用它们进行计算等等。我知道的少数几个限制之一是，它们不能直接放在
    WHERE 子句中：
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Row Deduplication based on a set of columns
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于一组列的行去重
- en: Another classic of windows functions! Sometimes we need to deduplicate rows
    in a table based on just one set of columns.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个窗口函数的经典例子！有时我们需要根据一组列来去重表中的行。
- en: 'Of course, in SQL we have the DISTINCT clause, but it only works if the full
    line is duplicated. If a table has several lines with the same value in an ID
    column but with different values ​​in the remaining columns, it’s possible to
    deduplicate with the following logic:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在 SQL 中我们有 DISTINCT 子句，但它仅在整行重复时有效。如果一个表中有多行 ID 列相同但其他列的值不同的记录，可以通过以下逻辑来去重：
- en: '![](../Images/0419e5ca21c880e1c1b1b7585aad7f1d.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0419e5ca21c880e1c1b1b7585aad7f1d.png)'
- en: Image 9\. Practical example — Deduplication
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9. 实际例子 — 去重
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This operation also allows data versioning! For example, if we save a new line
    for each time a user changed their name in the system with the date of change
    (instead of changing the existing line), we can retrieve each user’s current name:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作还允许数据版本控制！例如，如果我们在系统中每次用户更改姓名时保存一行新记录，并附上更改日期（而不是修改现有记录），我们就可以检索每个用户的当前姓名：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Percentage of occurrences of a group/class over the total number of rows
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个组/类别在所有行中的出现百分比
- en: Consider a table that lists various pets, which can be dogs, cats, or birds.
    We need to add a column to each row indicating the percentage that each pet type
    represents out of the total count of all pets. This task is solved using not one,
    but two window functions!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一个列出了各种宠物的表，这些宠物可以是狗、猫或鸟。我们需要为每一行添加一列，表示每种宠物类型占所有宠物总数的百分比。这个任务通过使用不仅仅一个，而是两个窗口函数来解决！
- en: '![](../Images/9510c84678562ece6e866050e410dbb8.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9510c84678562ece6e866050e410dbb8.png)'
- en: Image 10\. Practical example — Percentage of Occurences
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10. 实际例子 — 出现百分比
- en: In the image above, to make it more educational, I added two columns to represent
    the result of each window function, but only the rightmost column is actually
    created.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的图像中，为了更具教育性，我添加了两列来表示每个窗口函数的结果，但实际上只创建了最右侧的一列。
- en: And you, do you have any interesting windows functions cases that you would
    like to share? Please leave it in the comments!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 那你呢？你有什么有趣的窗口函数案例想要分享吗？请在评论区留下！
- en: Conclusion
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: I wouldn’t dare say that SQL is vintage or classic, as these, although positive,
    refer to the past. For me, SQL is present, pervasive, and, without a doubt, an
    essential language for anyone working in the data area.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我不敢说 SQL 是复古或经典的，因为这些词虽然是褒义的，但指的是过去。对我来说，SQL 是现在的、普遍存在的，而且无疑是任何从事数据领域工作的人必须掌握的语言。
- en: However, several problems may seem complicated to solve using just SQL itself
    and, at these times, having a good knowledge of the language and its capabilities
    is really important. Without windows functions, many problems considered common
    — when looking from a Pythonic perspective — would be very difficult or even impossible
    to solve. But we can do magic if we know how to use the tools correctly!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有些问题仅用 SQL 本身解决可能显得复杂，这时，良好的语言知识和对其能力的了解就显得尤为重要。如果没有窗口函数，很多从 Pythonic 视角看待的常见问题将变得非常困难，甚至无法解决。但只要我们知道如何正确使用工具，就能创造奇迹！
- en: I hope this post has helped you better understand how Windows functions work
    and what types of problems they can solve in practice. All the material presented
    here was mainly based on PostgreSQL syntax and may not necessarily work right
    away in another database, but the most important thing is the logic itself. As
    always, I’m not an expert on the subject and I strongly recommend deeper reading
    — and lots of practice — to anyone interested in the subject.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这篇文章帮助你更好地理解窗口函数是如何工作的，以及它们可以在实际中解决哪些类型的问题。这里展示的所有材料主要基于 PostgreSQL 语法，可能在其他数据库中不一定能立即生效，但最重要的是理解它背后的逻辑。像往常一样，我不是该领域的专家，强烈建议对这个主题感兴趣的朋友深入阅读并多加练习。
- en: Thank you for reading! ;)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！;)
- en: References
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: All the code is available in [this GitHub repository](https://github.com/jaumpedro214/posts/tree/main/sql_window_functions).
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 所有代码均可在[这个GitHub仓库](https://github.com/jaumpedro214/posts/tree/main/sql_window_functions)中找到。
- en: Interested in more works like this one? Visit my [posts repository](https://github.com/jaumpedro214/posts).
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对这类作品感兴趣吗？请访问我的[帖子仓库](https://github.com/jaumpedro214/posts)。
- en: '[1] *Data processing with PostgreSQL window functions*. (n.d.). Timescale.
    [Link](https://www.timescale.com/learn/postgresql-window-functions).'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] *使用PostgreSQL窗口函数进行数据处理*。(n.d.)。Timescale。[Link](https://www.timescale.com/learn/postgresql-window-functions)。'
- en: '[2] Kho, J. (2022, June 5). An easy guide to advanced SQL window functions
    — towards data science. [*Medium*](/a-guide-to-advanced-sql-window-functions-f63f2642cbf9).'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] Kho, J. (2022年6月5日). 高级SQL窗口函数简易指南 — 朝向数据科学。[*Medium*](/a-guide-to-advanced-sql-window-functions-f63f2642cbf9)。'
- en: '[3] Markingmyname. (2023, November 16). *Funções analíticas (Transact-SQL)
    — SQL Server*. [Microsoft Learn](https://learn.microsoft.com/pt-br/sql/t-sql/functions/analytic-functions-transact-sql?view=sql-server-ver16).'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[3] Markingmyname. (2023年11月16日). *分析函数 (Transact-SQL) — SQL Server*。[Microsoft
    Learn](https://learn.microsoft.com/pt-br/sql/t-sql/functions/analytic-functions-transact-sql?view=sql-server-ver16)。'
- en: '[4] PostgreSQL Tutorial. (2021, April 27). *PostgreSQL Window Functions: The
    Ultimate Guide*. [Link](https://www.postgresqltutorial.com/postgresql-window-function/).'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[4] PostgreSQL教程。(2021年4月27日). *PostgreSQL窗口函数：终极指南*。[Link](https://www.postgresqltutorial.com/postgresql-window-function/)。'
- en: '[5] VanMSFT. (2023, May 23). *OVER Clause (Transact-SQL) — SQL Server*. [Microsoft
    Learn](https://learn.microsoft.com/en-us/sql/t-sql/queries/select-over-clause-transact-sql?view=sql-server-ver16).'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[5] VanMSFT. (2023年5月23日). *OVER子句 (Transact-SQL) — SQL Server*。[Microsoft
    Learn](https://learn.microsoft.com/en-us/sql/t-sql/queries/select-over-clause-transact-sql?view=sql-server-ver16)。'
- en: '[6] *Window Functions*. (n.d.). [SQLite Official docs](https://www.sqlite.org/draft/windowfunctions.html).'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[6] *窗口函数*。(n.d.)。[SQLite官方文档](https://www.sqlite.org/draft/windowfunctions.html)。'
- en: '[7] *Window Functions*. (2014, July 24). [PostgreSQL Documentation](https://www.postgresql.org/docs/8.4/functions-window.html).'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[7] *窗口函数*。(2014年7月24日)。[PostgreSQL文档](https://www.postgresql.org/docs/8.4/functions-window.html)。'
- en: '*All images in this post are made by the author.*'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文中的所有图片均由作者制作。*'
