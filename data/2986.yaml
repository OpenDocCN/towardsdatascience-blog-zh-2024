- en: Measuring the Cost of Production Issues on Development Teams
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 衡量生产问题对开发团队的成本
- en: 原文：[https://towardsdatascience.com/measuring-the-cost-of-production-issues-on-development-teams-5efcd13bc9c7?source=collection_archive---------8-----------------------#2024-12-11](https://towardsdatascience.com/measuring-the-cost-of-production-issues-on-development-teams-5efcd13bc9c7?source=collection_archive---------8-----------------------#2024-12-11)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/measuring-the-cost-of-production-issues-on-development-teams-5efcd13bc9c7?source=collection_archive---------8-----------------------#2024-12-11](https://towardsdatascience.com/measuring-the-cost-of-production-issues-on-development-teams-5efcd13bc9c7?source=collection_archive---------8-----------------------#2024-12-11)
- en: Deprioritizing quality sacrifices both software stability and velocity, leading
    to costly issues. Investing in quality boosts speed and outcomes.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 降低对质量的优先级会牺牲软件的稳定性和速度，从而导致昂贵的问题。而投资质量则能提升速度和成果。
- en: '[](https://medium.com/@davettran13?source=post_page---byline--5efcd13bc9c7--------------------------------)[![David
    Tran](../Images/d9efbf43b3059ca6b855d417d41b243d.png)](https://medium.com/@davettran13?source=post_page---byline--5efcd13bc9c7--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--5efcd13bc9c7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--5efcd13bc9c7--------------------------------)
    [David Tran](https://medium.com/@davettran13?source=post_page---byline--5efcd13bc9c7--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@davettran13?source=post_page---byline--5efcd13bc9c7--------------------------------)[![David
    Tran](../Images/d9efbf43b3059ca6b855d417d41b243d.png)](https://medium.com/@davettran13?source=post_page---byline--5efcd13bc9c7--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--5efcd13bc9c7--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--5efcd13bc9c7--------------------------------)
    [David Tran](https://medium.com/@davettran13?source=post_page---byline--5efcd13bc9c7--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--5efcd13bc9c7--------------------------------)
    ·8 min read·Dec 11, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--5efcd13bc9c7--------------------------------)
    ·8分钟阅读·2024年12月11日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/5b74a24780110b6aa90f8e6b380af5ff.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5b74a24780110b6aa90f8e6b380af5ff.png)'
- en: Image by the author. (AI generated Midjourney)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图像由作者提供。（AI生成，使用Midjourney）
- en: Investing in software quality is often easier said than done. Although many
    engineering managers express a commitment to high-quality software, they are often
    cautious about allocating substantial resources toward quality-focused initiatives.
    Pressed by tight deadlines and competing priorities, leaders frequently face tough
    choices in how they allocate their team’s time and effort. As a result, investments
    in quality are often the first to be cut.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 投资软件质量往往说起来容易做起来难。尽管许多工程经理表示他们致力于高质量的软件，但他们通常对将大量资源投入到以质量为重点的计划中持谨慎态度。在紧迫的截止日期和相互竞争的优先事项面前，领导者经常面临如何分配团队时间和精力的艰难抉择。因此，质量方面的投资往往是第一个被削减的项目。
- en: The tension between investing in quality and prioritizing velocity is pivotal
    in any engineering organization and especially with more cutting-edge data science
    and machine learning projects where delivering results is at the forefront. Unlike
    traditional software development, ML systems often require continuous updates
    to maintain model performance, adapt to changing data distributions, and integrate
    new features. Production issues in ML pipelines — such as data quality problems,
    model drift, or deployment failures — can disrupt these workflows and have cascading
    effects on business outcomes. Balancing the speed of experimentation and deployment
    with rigorous quality assurance is crucial for ML teams to deliver reliable, high-performing
    models. By applying a structured, scientific approach to quantify the cost of
    production issues, as outlined in this blog post, ML teams can make informed decisions
    about where to invest in quality improvements and optimize their development velocity.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何工程组织中，投资质量与优先考虑速度之间的紧张关系都至关重要，尤其是在数据科学和机器学习项目中，其中交付结果是重中之重。与传统的软件开发不同，机器学习系统通常需要持续更新，以保持模型性能、适应不断变化的数据分布并集成新功能。机器学习流水线中的生产问题——如数据质量问题、模型漂移或部署失败——可能会扰乱这些工作流程，并对业务成果产生连锁反应。在机器学习团队中，平衡实验和部署的速度与严格的质量保证至关重要，只有这样才能交付可靠、高效的模型。通过应用一种结构化的、科学的方法来量化生产问题的成本，正如本文中所述，机器学习团队可以在质量改进的投资与优化开发速度之间做出明智的决策。
- en: 'Quality often faces a formidable rival: velocity. As pressure to meet business
    goals and deliver critical features intensifies, it becomes challenging to justify
    any approach that doesn’t directly'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 质量往往面临一个强大的对手：速度。随着业务目标和关键功能交付压力的增加，证明任何非直接提升速度的做法变得越来越具有挑战性。
- en: drive output. Many teams reduce non-coding activities to the bare minimum, focusing
    on unit tests while deprioritizing integration tests, delaying technical improvements,
    and relying on observability tools to catch production issues — hoping to address
    them only if they arise.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 推动产出。许多团队将非编码活动减少到最低限度，专注于单元测试，同时降低集成测试的优先级，推迟技术改进，并依赖可观察性工具来捕捉生产问题——希望只在问题出现时再进行处理。
- en: Balancing velocity and quality is rarely a straightforward choice, and this
    post doesn’t aim to simplify it. However, what leaders often overlook is that
    velocity and quality are deeply connected. By deprioritizing initiatives that
    improve software quality, teams may end up with releases that are both bug-ridden
    and slow. Any gains from pushing more features out quickly
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 平衡速度和质量很少是一个简单的选择，这篇文章也没有打算简化这一点。然而，领导者常常忽视的是，速度和质量是密切相关的。通过降低改善软件质量的优先级，团队最终可能会导致发布的内容既充满缺陷又很慢。快速推出更多功能所带来的任何收益
- en: can quickly erode, as maintenance problems and a steady influx of issues ultimately
    undermine the team’s velocity.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 生产力可能迅速衰退，因为维护问题和持续出现的故障最终会削弱团队的速度。
- en: Only by understanding the full impact of quality on velocity and the expected
    ROI of quality initiatives can leaders make informed decisions about balancing
    their team’s backlog.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 只有通过了解质量对速度的全面影响，以及质量措施的预期投资回报率，领导者才能做出明智的决策，以平衡团队的工作负载。
- en: 'In this post, we will attempt to provide a model to measure the ROI of investment
    in two aspects of improving release quality: reducing the number of production
    issues, and reducing the time spent by the teams on these issues when they occur.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将尝试提供一个模型，用来衡量在提高发布质量的两个方面上的投资回报率（ROI）：减少生产问题的数量，以及减少团队在问题发生时花费的时间。
- en: Escape defects, the bugs that make their way to production
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免缺陷，指的是那些进入生产环境的漏洞。
- en: Preventing regressions is probably the most direct, top-of-the-funnel measure
    to reduce the overhead of production issues on the team. Issues that never occurred
    will not weigh the team down, cause interruptions, or threaten business continuity.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 防止回归可能是减少生产问题对团队负担的最直接、最上游的措施。那些从未发生的问题不会拖累团队，造成中断，或威胁到业务的持续性。
- en: As appealing as the benefits might be, there is an inflection point after which
    defending the code from issues can slow releases to a grinding halt. Theoretically,
    the team could triple the number of required code reviews, triple investment in
    tests, and build a rigorous load testing apparatus. It will find itself preventing
    more issues but also extremely slow to release any new content.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管好处可能非常吸引人，但在某个拐点之后，防止代码出现问题的做法可能会导致发布速度的急剧放缓。理论上，团队可以将所需的代码审查次数增加三倍，将测试的投资增加三倍，并建立一个严格的负载测试装置。这样做可以防止更多的问题，但也会让发布新内容变得极为缓慢。
- en: Therefore, in order to justify investing in any type of effort to prevent regressions,
    we need to understand the ROI better. We can try to approximate the cost saving
    of each 1% decrease in regressions on the overall team performance to start establishing
    a framework we can use to balance quality investment.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了证明投资于防止回归的任何努力是值得的，我们需要更好地理解其投资回报率。我们可以尝试估算回归减少1%的成本节省对整个团队表现的影响，从而开始建立一个框架，帮助我们平衡质量投资。
- en: '![](../Images/118bef0e741f2de408ed4b4313770477.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/118bef0e741f2de408ed4b4313770477.png)'
- en: Image by the author.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片。
- en: The direct gain of preventing issues is first of all with the time the team
    spends handling these issues. Studies show teams currently spend anywhere between
    20–40% of their time working on production issues — a substantial drain on productivity.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 防止问题的直接收益首先体现在团队处理这些问题所花费的时间上。研究表明，团队目前花费的时间中，有20%到40%用于处理生产问题——这对生产力是一个巨大的拖累。
- en: 'What would be the benefit of investing in preventing issues? Using simple math
    we can start estimating the improvement in productivity for each issue that can
    be prevented in earlier stages of the development process:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 投资于防止问题的好处是什么？通过简单的数学计算，我们可以开始估算在开发过程的早期阶段防止每个问题所带来的生产力提升：
- en: '![](../Images/da0f8a918487dbdfad1c8fef0248b316.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/da0f8a918487dbdfad1c8fef0248b316.png)'
- en: Image by the author.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片。
- en: 'Where:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '**Tsaved**​ is the time saved through issue prevention.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tsaved**​ 是通过问题预防所节省的时间。'
- en: '**Tissues** is the current time spent on production issues.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tissues** 是目前用于处理生产问题的时间。'
- en: '**P** is the percentage of production issues that could be prevented.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**P** 是可以预防的生产问题的百分比。'
- en: This framework aids in assessing the cost vs. value of engineering investments.
    For example, a manager assigns two developers a week to analyze performance issues
    using observability data. Their efforts reduce production issues by 10%.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架有助于评估工程投资的成本与价值。例如，一位经理指派两名开发人员花费一周时间使用可观测性数据分析性能问题。他们的努力将生产问题减少了10%。
- en: In a 100-developer team where 40% of time is spent on issue resolution, this
    translates to a 4% capacity gain, plus an additional 1.6% from reduced context
    switching. With 5.6% capacity reclaimed, the investment in two developers proves
    worthwhile, showing how this approach can guide practical decision-making.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个100名开发人员的团队中，如果40%的时间用于问题解决，这将转化为4%的容量增益，再加上通过减少上下文切换带来的1.6%。通过回收5.6%的容量，这项投资证明是值得的，展示了这种方法如何指导实际决策。
- en: 'It’s straightforward to see the direct impact of preventing every single 1%
    of production regressions on the team’s velocity. This represents work on production
    regressions that the team would not need to perform. The below table can give
    some context by plugging in a few values:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易看到，预防每一个1%的生产回归问题对团队工作速度的直接影响。这代表了团队不需要执行的生产回归工作。下面的表格可以通过插入一些值来提供一些背景信息：
- en: Given this data, as an example, the **direct** gain in team resources for each
    **1%** improvement for a team that spends **25%** of its time dealing with production
    issues would be **0.25%.** If the team were able to prevent 20% of production
    issues, it would then mean **5**%back to the engineering team. While this might
    not sound like a sizeable enough chunk, there are other costs related to issues
    we can try to optimize as well for an even bigger impact.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些数据，举个例子，对于一个将**25%**的时间花费在处理生产问题的团队，每**1%**的改善带来的**直接**团队资源增益将是**0.25%**。如果团队能够预防20%的生产问题，那么这意味着会有**5%**的资源回到工程团队。虽然这可能听起来不是一个足够大的数值，但还有其他与问题相关的成本可以优化，从而带来更大的影响。
- en: 'Mean Time to Resolution (MTTR): Reducing Time Lost to Issue Resolution'
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平均修复时间（MTTR）：减少因问题解决而浪费的时间。
- en: In the previous example, we looked at the productivity gain achieved by preventing
    issues. But what about those issues that can’t be avoided? While some bugs are
    inevitable, we can still minimize their impact on the team’s productivity by reducing
    the time it takes to resolve them — known as the Mean Time to Resolution (MTTR).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例中，我们讨论了通过预防问题所获得的生产力提升。那么，对于那些无法避免的问题呢？虽然一些漏洞是不可避免的，但我们仍然可以通过减少解决问题所需的时间来最小化它们对团队生产力的影响——这被称为平均修复时间（MTTR）。
- en: 'Typically, resolving a bug involves several stages:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，解决一个bug需要几个阶段：
- en: '**Triage/Assessment:** The team gathers relevant subject matter experts to
    determine the severity and urgency of the issue.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**问题分类/评估**：团队集合相关的主题专家来确定问题的严重性和紧急性。'
- en: '**Investigation/Root Cause Analysis (RCA):** Developers dig into the problem
    to identify the underlying cause, often the most time-consuming phase.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**调查/根本原因分析（RCA）**：开发人员深入研究问题，以识别根本原因，通常是最耗时的阶段。'
- en: '**Repair/Resolution:** The team implements the fix.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**修复/解决**：团队实施修复。'
- en: '![](../Images/1b7f382517de07c70a93bcfd2cb88ebf.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1b7f382517de07c70a93bcfd2cb88ebf.png)'
- en: Image by the author.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者。
- en: Among these stages, the investigation phase often represents the greatest opportunity
    for time savings. By adopting more efficient tools for tracing, debugging, and
    defect analysis, teams can streamline their RCA efforts, significantly reducing
    MTTR and, in turn, boosting productivity.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些阶段中，调查阶段通常代表了节省时间的最大机会。通过采用更高效的追踪、调试和缺陷分析工具，团队可以简化他们的根本原因分析（RCA）工作，显著减少MTTR，从而提升生产力。
- en: During triage, the team may involve subject matter experts to assess if an issue
    belongs in the backlog and determine its urgency. Investigation and root cause
    analysis (RCA) follows, where developers dig into the problem. Finally, the repair
    phase involves writing code to fix the issue.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在问题分类阶段，团队可能会邀请主题专家来评估一个问题是否应该进入待办事项列表，并确定其紧急性。接下来是调查和根本原因分析（RCA）阶段，开发人员会深入研究问题。最后，修复阶段涉及编写代码来解决问题。
- en: Interestingly, the first two phases, especially investigation and RCA, often
    consume 30–50% of the total resolution time. This stage holds the greatest potential
    for optimization, as the key is improving how existing information is analyzed.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，前两个阶段，尤其是调查和根本原因分析（RCA），通常占总解决时间的30%到50%。这一阶段具有最大的优化潜力，因为关键在于改进现有信息的分析方式。
- en: To measure the effect of improving the investigation time on the team velocity
    we can take the the percentage of time the team spends on an issue and reduce
    the proportional cost of the investigation stage. This can usually be accomplished
    by adopting better tooling for tracing, debugging, and defect analysis. We apply
    similar logic to the issue prevention assessment in order to get an idea of how
    much productivity the team could gain with each percentage of reduction in investigation
    time.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了衡量改善调查时间对团队速度的影响，我们可以计算团队在每个问题上所花费的时间百分比，并减少调查阶段的比例成本。这通常可以通过采用更好的跟踪、调试和缺陷分析工具来实现。我们将类似的逻辑应用于问题预防的评估，以便了解每减少一个百分比的调查时间，团队可以获得多少生产力提升。
- en: '![](../Images/2dbea2d7d91f676553fb4737bbbd73a1.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2dbea2d7d91f676553fb4737bbbd73a1.png)'
- en: Image by the author.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者。
- en: '`Tsaved` : Percentage of team time saved'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Tsaved`：节省的团队时间百分比'
- en: '`R`: Reduction in investigation time'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`R`：调查时间的减少'
- en: '`T_investigation` : Time per issue spent on investigation efforts'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`T_investigation`：每个问题上用于调查的时间'
- en: '`T_issues` : Percentage of time spent on production issues'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`T_issues`：处理生产问题所花费的时间百分比'
- en: We can test out what would be the performance gain relative to the `T_investigation`and
    `T_issues`variables. We will calculate the marginal gain for each percent of investigation
    time reduction `R` .
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以测试相对于`T_investigation`和`T_issues`变量，性能提升的表现。我们将计算每减少1%调查时间`R`的边际收益。
- en: As these numbers begin to add up the team can achieve a significant gain. If
    we are able to improve investigation time by 40%, for example, in a team that
    spends 25% of its time dealing with production issues, we would be reclaiming
    another 4% of that team’s productivity.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 随着这些数字的积累，团队可以获得显著的提升。如果我们能够将调查时间减少40%，例如在一个团队中，该团队的25%时间用于处理生产问题，那么我们将重新夺回该团队生产力的4%。
- en: Combining the two benefits
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结合这两项好处
- en: With these two areas of optimization under consideration, we can create a unified
    formula to measure the combined effect of optimizing both issue prevention and
    the time the team spends on issues it is not able to prevent.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这两个优化领域，我们可以创建一个统一的公式来衡量同时优化问题预防和团队在无法预防问题时所花费的时间的综合效果。
- en: '![](../Images/edd6a3b2f4534c8660b9c992a2115c30.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/edd6a3b2f4534c8660b9c992a2115c30.png)'
- en: Image by the author.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者。
- en: Going back to our example organization that spends 25% of the time on prod issues
    and 40% of the resolution time per issue on investigation, a reduction of 40%
    in investigation time and prevention of 20% of the issues would result in an 8.1%
    improvement to the team productivity. However, we are far from done.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们举的例子，假设该团队将25%的时间用于处理生产问题，并且每个问题的解决时间中有40%用于调查。如果能将调查时间减少40%并且预防20%的问题，那么团队的生产力将提升8.1%。然而，我们的工作远未完成。
- en: Accounting for the hidden cost of context-switching
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 考虑到上下文切换的隐性成本
- en: Each of the above naive calculations does not take into account a major penalty
    incurred by work being interrupted due to unplanned production issues — context
    switching (CS). There are numerous studies that repeatedly show that context switching
    is expensive. How expensive? A penalty of anywhere between 20% to 70% extra work
    because of interruptions and switching between several tasks. In reducing interrupted
    work time we can also reduce the context switching penalty.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 以上每一种简单的计算都没有考虑到一个主要的惩罚因素——由于未经计划的生产问题导致工作的中断——即上下文切换（CS）。有大量研究反复表明，上下文切换是昂贵的。多昂贵呢？由于中断和在多个任务之间切换，额外工作量的惩罚在20%到70%之间。在减少中断工作时间的同时，我们也能减少上下文切换的惩罚。
- en: Our original formula did not account for that important variable. A simple though
    naive way of doing that would be to assume that any unplanned work handling production
    issues incur an equivalent context-switching penalty on the backlog items already
    assigned to the team. If we are able to save 8% of the team velocity, that should
    result in an equivalent reduction of context switching working on the original
    planned tasks. In reducing 8% of unplanned work we have also therefore reduced
    the CS penalty of the equivalent 8% of planned work the team needs to complete
    as well.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初的公式没有考虑到这一重要变量。一个简单但天真的方法是假设任何未计划的工作处理生产问题都会对已经分配给团队的待办事项造成相等的上下文切换惩罚。如果我们能够节省8%的团队效率，那应该会导致上下文切换的惩罚也相应减少，尤其是对于原定任务的完成。在减少8%的未计划工作时，我们也就减少了相应的8%计划工作上的上下文切换惩罚。
- en: 'Let’s add that to our equation:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这一点加到我们的方程式中：
- en: '![](../Images/b8c1ea554c303538191baaf50f9caa77.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8c1ea554c303538191baaf50f9caa77.png)'
- en: Image by the author.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供。
- en: Continuing our example, our hypothetical organization would find that the actual
    impact of their improvements is now a little over 11%. For a dev team of 80 engineers,
    that would be more than 8 developers free to do something else to contribute to
    the backlog.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 继续我们的例子，假设的组织会发现他们的改进实际影响现在略超过11%。对于一个80人规模的开发团队来说，这相当于有8名开发人员可以腾出时间做其他事情，为积压工作做出贡献。
- en: Use the ROI calculator
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用ROI计算器
- en: 'To make things easier, I’ve uploaded all of the above formulas as a simple
    HTML calculator that you can access here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化操作，我已将上述所有公式上传为一个简单的HTML计算器，你可以在这里访问：
- en: '[***ROI Calculator***](http://calculatior.s3-website-eu-west-1.amazonaws.com/)'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[***ROI计算器***](http://calculatior.s3-website-eu-west-1.amazonaws.com/)'
- en: Measuring ROI is key
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 衡量ROI是关键
- en: Production issues are costly, but a clear ROI framework helps quantify the impact
    of quality improvements. Reducing Mean Time to Resolution (MTTR) through optimized
    triage and investigation can boost team productivity. For example, a 40% reduction
    in investigation time
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 生产问题很昂贵，但一个清晰的ROI框架有助于量化质量改进的影响。通过优化分诊和调查来减少平均修复时间（MTTR）可以提高团队生产力。例如，调查时间减少40%
- en: recovers 4% of capacity and lowers the hidden cost of context-switching.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 恢复了4%的生产力，并降低了上下文切换的隐性成本。
- en: Use the ROI Calculator to evaluate quality investments and make data-driven
    decisions. Access it [here](http://calculatior.s3-website-eu-west-1.amazonaws.com/)
    to see how targeted improvements enhance efficiency.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ROI计算器评估优质投资，并做出数据驱动的决策。点击[这里](http://calculatior.s3-website-eu-west-1.amazonaws.com/)查看如何通过有针对性的改进提高效率。
- en: '**References:**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考文献：**'
- en: 1\. [How Much Time Do Developers Spend Actually Writing Code?](https://thenewstack.io/how-much-time-do-developers-spend-actually-writing-code/)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. [开发人员实际编写代码的时间有多少？](https://thenewstack.io/how-much-time-do-developers-spend-actually-writing-code/)
- en: 2\. [How to write good software faster (we spend 90% of our time debugging)](https://www.makingdatamistakes.com/how-to-write-good-software-faster-we-spend-90-of-our-time-debugging/)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. [如何更快编写优质软件（我们花费90%的时间进行调试）](https://www.makingdatamistakes.com/how-to-write-good-software-faster-we-spend-90-of-our-time-debugging/)
- en: '3\. [Survey: Fixing Bugs Stealing Time from Development](https://devops.com/survey-fixing-bugs-stealing-time-from-development/)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. [调查：修复漏洞挤占开发时间](https://devops.com/survey-fixing-bugs-stealing-time-from-development/)
- en: 4\. [The Real Costs of Context-Switching](https://theagilecouch.com/2021/05/25/the-real-costs-of-context-switching/)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. [上下文切换的真实成本](https://theagilecouch.com/2021/05/25/the-real-costs-of-context-switching/)
