- en: 'AI Agents: The Intersection of Tool Calling and Reasoning in Generative AI'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AI 代理：生成性 AI 中工具调用与推理的交汇点
- en: 原文：[https://towardsdatascience.com/ai-agents-the-intersection-of-tool-calling-and-reasoning-in-generative-ai-ff268eece443?source=collection_archive---------2-----------------------#2024-10-05](https://towardsdatascience.com/ai-agents-the-intersection-of-tool-calling-and-reasoning-in-generative-ai-ff268eece443?source=collection_archive---------2-----------------------#2024-10-05)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/ai-agents-the-intersection-of-tool-calling-and-reasoning-in-generative-ai-ff268eece443?source=collection_archive---------2-----------------------#2024-10-05](https://towardsdatascience.com/ai-agents-the-intersection-of-tool-calling-and-reasoning-in-generative-ai-ff268eece443?source=collection_archive---------2-----------------------#2024-10-05)
- en: Unpacking problem solving and tool-driven decision making in AI
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拆解 AI 中的解决问题与工具驱动的决策过程
- en: '[](https://medium.com/@tula.masterman?source=post_page---byline--ff268eece443--------------------------------)[![Tula
    Masterman](../Images/c36b3740befd5dfdb8719dc6596f1a99.png)](https://medium.com/@tula.masterman?source=post_page---byline--ff268eece443--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--ff268eece443--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--ff268eece443--------------------------------)
    [Tula Masterman](https://medium.com/@tula.masterman?source=post_page---byline--ff268eece443--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@tula.masterman?source=post_page---byline--ff268eece443--------------------------------)[![Tula
    Masterman](../Images/c36b3740befd5dfdb8719dc6596f1a99.png)](https://medium.com/@tula.masterman?source=post_page---byline--ff268eece443--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--ff268eece443--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--ff268eece443--------------------------------)
    [Tula Masterman](https://medium.com/@tula.masterman?source=post_page---byline--ff268eece443--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--ff268eece443--------------------------------)
    ·11 min read·Oct 5, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--ff268eece443--------------------------------)
    ·阅读时间：11 分钟·2024年10月5日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/3279c4d07b6b2c6d9e752246854f9da1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3279c4d07b6b2c6d9e752246854f9da1.png)'
- en: Image by Author and GPT-4o depicting an AI agent at the intersection of reasoning
    and tool calling
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者与 GPT-4o 创作的图像，描绘了一个位于推理与工具调用交汇点的 AI 代理
- en: 'Introduction: The Rise of Agentic AI'
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言：代理性 AI 的崛起
- en: Today, new libraries and low-code platforms are making it easier than ever to
    build AI agents, also referred to as digital workers. Tool calling is one of the
    primary abilities driving the “agentic” nature of Generative AI models by extending
    their ability beyond conversational tasks. By executing tools (functions), agents
    can take action on your behalf and solve complex, multi-step problems that require
    robust decision making and interacting with a variety of external data sources.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，新的库和低代码平台使得构建 AI 代理（也称为数字工作者）比以往任何时候都更容易。工具调用是推动生成性 AI 模型“代理性”特征的主要能力之一，它扩展了
    AI 模型的功能，使其超越了仅限于对话任务。通过执行工具（功能），代理可以代表你采取行动，解决那些需要强大决策能力和与多种外部数据源交互的复杂多步骤问题。
- en: This article focuses on how reasoning is expressed through tool calling, explores
    some of the challenges of tool use, covers common ways to evaluate tool-calling
    ability, and provides examples of how different models and agents interact with
    tools.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本文聚焦于通过工具调用表达推理，探讨了工具使用中的一些挑战，涵盖了评估工具调用能力的常见方法，并提供了不同模型和代理与工具交互的示例。
- en: Expressions of Reasoning to Solve Problems
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决问题的推理表达方式
- en: 'At the core of successful agents lie two key expressions of reasoning: **reasoning
    through evaluation and planning** and **reasoning through tool use**.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的代理背后有两种关键的推理表达方式：**通过评估和规划进行推理**与**通过工具使用进行推理**。
- en: '**Reasoning through evaluation and planning** relates to an agent’s ability
    to effectively breakdown a problem by iteratively planning, assessing progress,
    and adjusting its approach until the task is completed. Techniques like [Chain-of-Thought](https://arxiv.org/abs/2201.11903)
    (CoT), [ReAct](https://arxiv.org/abs/2210.03629), and [Prompt Decomposition](https://arxiv.org/abs/2210.02406)
    are all patterns designed to improve the model’s ability to reason strategically
    by breaking down tasks to solve them correctly. This type of reasoning is more
    macro-level, ensuring the task is completed correctly by working iteratively and
    taking into account the results from each stage.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过评估和规划进行推理**与智能体通过迭代规划、评估进展并调整方法直到任务完成的能力有关。像[思维链](https://arxiv.org/abs/2201.11903)（CoT）、[ReAct](https://arxiv.org/abs/2210.03629)和[提示分解](https://arxiv.org/abs/2210.02406)等技术，都是为提高模型通过分解任务来战略性推理的能力而设计的。这种类型的推理更具宏观性，确保通过迭代工作并考虑每个阶段的结果来正确完成任务。'
- en: '**Reasoning through tool use** relates to the agents ability to effectively
    interact with it’s environment, deciding which tools to call and how to structure
    each call. These tools enable the agent to retrieve data, execute code, call APIs,
    and more. The strength of this type of reasoning lies in the proper execution
    of tool calls rather than reflecting on the results from the call.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过工具使用进行推理**与智能体有效地与环境互动的能力有关，决定调用哪些工具以及如何构建每个调用。这些工具使得智能体能够检索数据、执行代码、调用
    API 等等。这种推理的优势在于正确执行工具调用，而非反思调用结果。'
- en: While both expressions of reasoning are important, they don’t always need to
    be combined to create powerful solutions. For example, **OpenAI’s new** **o1 model
    excels at reasoning through evaluation and planning** because it was trained to
    reason using chain of thought. This has significantly improved its ability to
    think through and solve complex challenges as reflected on a variety of benchmarks.
    For example, the o1 model has been shown to **surpass human PhD-level accuracy
    on the GPQA benchmark** covering physics, biology, and chemistry, and scored in
    the **86th-93rd percentile on Codeforces** contests. While o1’s reasoning ability
    could be used to generate text-based responses that suggest tools based on their
    descriptions, it currently lacks explicit tool calling abilities (at least for
    now!).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管两种推理方式都很重要，但它们不总是需要结合使用以创造强大的解决方案。例如，**OpenAI的新** **o1模型擅长通过评估和规划进行推理**，因为它经过训练，能够使用思维链进行推理。这大大提高了它思考并解决复杂挑战的能力，且在各种基准测试中得到了体现。例如，o1模型在涵盖物理学、生物学和化学的GPQA基准测试中，**超越了人类博士级准确度**，并在**Codeforces**比赛中得分处于**86-93百分位**。虽然o1的推理能力可以用来生成基于文本的响应，建议根据工具描述选择工具，但目前它缺乏显式的工具调用能力（至少现在是如此！）。
- en: In contrast, **many models are fine-tuned specifically for reasoning through
    tool use** enabling them to generate function calls and interact with APIs very
    effectively. These models are focused on calling the right tool in the right format
    at the right time, but are typically not designed to evaluate their own results
    as thoroughly as o1 might. The [**Berkeley Function Calling Leaderboard**](https://gorilla.cs.berkeley.edu/leaderboard.html)
    **(BFCL) is a great resource for comparing how different models perform on function
    calling tasks**. It also provides an **evaluation suite to compare your own fine-tuned
    model** on various challenging tool calling tasks. In fact, the [latest dataset,
    BFCL v3](https://huggingface.co/datasets/gorilla-llm/Berkeley-Function-Calling-Leaderboard),
    was just released and now includes [multi-step, multi-turn function calling](https://gorilla.cs.berkeley.edu/blogs/13_bfcl_v3_multi_turn.html),
    further raising the bar for tool based reasoning tasks.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，**许多模型专门为通过工具使用进行推理而微调**，使它们能够生成函数调用并非常有效地与API进行互动。这些模型专注于在正确的时间以正确的格式调用正确的工具，但通常并不设计得像o1那样全面评估其结果。[**伯克利函数调用排行榜**](https://gorilla.cs.berkeley.edu/leaderboard.html)
    **(BFCL)是一个很好的资源，用于比较不同模型在函数调用任务中的表现**。它还提供了一个**评估套件，用于比较你自己微调的模型**在各种具有挑战性的工具调用任务中的表现。事实上，[最新数据集BFCL
    v3](https://huggingface.co/datasets/gorilla-llm/Berkeley-Function-Calling-Leaderboard)刚刚发布，现在包括了[多步骤、多轮函数调用](https://gorilla.cs.berkeley.edu/blogs/13_bfcl_v3_multi_turn.html)，进一步提高了基于工具的推理任务的标准。
- en: Both types of reasoning are powerful independently, and when combined, they
    have the potential to create agents that can effectively breakdown complicated
    tasks and autonomously interact with their environment. For more examples of AI
    agent architectures for reasoning, planning, and tool calling [check out my team’s
    survey paper on ArXiv](https://arxiv.org/abs/2404.11584).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种推理方式各自都非常强大，当结合在一起时，它们有可能创建能够有效分解复杂任务并自主与环境互动的代理。有关更多AI代理架构的推理、规划和工具调用的例子，请[查看我团队在ArXiv上的调研论文](https://arxiv.org/abs/2404.11584)。
- en: 'Challenges with Tool-Calling: Navigating Complex Agent Behaviors'
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具调用的挑战：应对复杂的代理行为
- en: Building robust and reliable agents requires overcoming many different challenges.
    When solving complex problems, an agent often needs to balance multiple tasks
    at once including planning, interacting with the right tools at the right time,
    formatting tool calls properly, remembering outputs from previous steps, avoiding
    repetitive loops, and adhering to guidance to protect the system from jailbreaks/prompt
    injections/etc.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 构建强大且可靠的代理需要克服许多不同的挑战。在解决复杂问题时，代理通常需要同时平衡多个任务，包括规划、在正确的时间与合适的工具互动、正确格式化工具调用、记住前一步的输出、避免重复循环，以及遵循指导原则以保护系统免受越狱/提示注入等攻击。
- en: '**Too many demands can easily overwhelm a single agent, leading to a growing
    trend where what may appear to an end user as one agent, is behind the scenes
    a collection of many agents and prompts working together to divide and conquer
    completing the task**. This division allows tasks to be broken down and handled
    in parallel by different models and agents tailored to solve that particular piece
    of the puzzle.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**过多的需求容易让单个代理不堪重负，这导致了一个日益增长的趋势——看似由一个代理提供服务的系统，实际上是由多个代理和提示共同协作、分工合作来完成任务**。这种分工使得任务能够被分解，并由不同的模型和代理并行处理，每个代理专门解决某个特定问题。'
- en: It’s here that models with excellent tool calling capabilities come into play.
    While tool-calling is a powerful way to enable productive agents, it comes with
    its own set of challenges. Agents need to understand the available tools, select
    the right one from a set of potentially similar options, format the inputs accurately,
    call tools in the right order, and potentially integrate feedback or instructions
    from other agents or humans. Many models are fine-tuned specifically for tool
    calling, allowing them to specialize in selecting functions at the right time
    with high accuracy.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，具备优秀工具调用能力的模型发挥了作用。虽然工具调用是一种强大的方式，可以使代理更加高效，但它也带来了自己的一系列挑战。代理需要理解可用的工具，从一组可能相似的选项中选择合适的工具，准确格式化输入，按照正确的顺序调用工具，并可能需要整合来自其他代理或人类的反馈或指令。许多模型经过专门微调，用于工具调用，使它们能够专注于在合适的时机高精度地选择功能。
- en: '**Some of the key considerations when fine-tuning a model for tool calling
    include:**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**在微调模型以进行工具调用时的一些关键考虑因素包括：**'
- en: '**Proper Tool Selection**: The model needs to understand the relationship between
    available tools, make nested calls when applicable, and select the right tool
    in the presence of other similar tools.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**正确的工具选择**：模型需要理解可用工具之间的关系，在适用时进行嵌套调用，并在存在其他相似工具的情况下选择正确的工具。'
- en: '**Handling Structural Challenges**: Although most models use JSON format for
    tool calling, other formats like YAML or XML can also be used. Consider whether
    the model needs to generalize across formats or if it should only use one. Regardless
    of the format, the model needs to include the appropriate parameters for each
    tool call, potentially using results from a previous call in subsequent ones.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**处理结构性挑战**：尽管大多数模型使用JSON格式进行工具调用，但也可以使用YAML或XML等其他格式。需要考虑模型是否需要跨格式进行泛化，或者是否仅使用一种格式。无论使用哪种格式，模型都需要为每次工具调用包含适当的参数，并可能在后续调用中使用前一次调用的结果。'
- en: '**Ensuring Dataset Diversity and Robust Evaluations**: The dataset used should
    be diverse and cover the complexity of multi-step, multi-turn function calling.
    Proper evaluations should be performed to prevent overfitting and avoid benchmark
    contamination.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**确保数据集的多样性和可靠的评估**：使用的数据集应该具有多样性，并涵盖多步骤、多轮次的函数调用的复杂性。应进行适当的评估，以防止过拟合并避免基准污染。'
- en: Common Benchmarks to Evaluate Tool-Calling
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于评估工具调用的常见基准
- en: With the growing importance of tool use in language models, many datasets have
    emerged to help evaluate and improve model tool-calling capabilities. Two of the
    most popular benchmarks today are the Berkeley Function Calling Leaderboard and
    Nexus Function Calling Benchmark, both of which [Meta used to evaluate the performance
    of their Llama 3.1 model series](https://arxiv.org/pdf/2407.21783). A recent paper,
    [ToolACE](https://arxiv.org/abs/2409.00920), demonstrates how agents can be used
    to create a diverse dataset for fine-tuning and evaluating model tool use.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 随着工具使用在语言模型中的重要性不断增长，许多数据集应运而生，以帮助评估和改进模型的工具调用能力。目前最流行的两个基准是伯克利功能调用排行榜和Nexus功能调用基准，这两个基准都是[Meta用来评估其Llama
    3.1系列模型表现的](https://arxiv.org/pdf/2407.21783)。最近的一篇论文，[ToolACE](https://arxiv.org/abs/2409.00920)，展示了如何利用智能体创建一个多样化的数据集，以进行模型工具使用的微调和评估。
- en: 'Let’s explore each of these benchmarks in more detail:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地探讨这些基准：
- en: '**Berkeley Function Calling Leaderboard (**[**BFCL**](https://gorilla.cs.berkeley.edu/leaderboard.html)**):**
    BFCL contains 2,000 question-function-answer pairs across multiple programming
    languages. Today there are 3 versions of the BFCL dataset each with enhancements
    to better reflect real-world scenarios. For example, [BFCL-V2](https://gorilla.cs.berkeley.edu/blogs/12_bfcl_v2_live.html),
    released August 19th, 2024 includes user contributed samples designed to address
    evaluation challenges related to dataset contamination. [BFCL-V3](https://gorilla.cs.berkeley.edu/blogs/13_bfcl_v3_multi_turn.html)
    released September 19th, 2024 adds multi-turn, multi-step tool calling to the
    benchmark. This is critical for agentic applications where a model needs to make
    multiple tool calls over time to successfully complete a task. Instructions for
    e[valuating models on BFCL can be found on GitHub](https://github.com/ShishirPatil/gorilla),
    with the [latest dataset available on HuggingFace](https://huggingface.co/datasets/gorilla-llm/Berkeley-Function-Calling-Leaderboard),
    and the [current leaderboard accessible here](https://gorilla.cs.berkeley.edu/leaderboard.html).
    The Berkeley team has also released various versions of their Gorilla Open-Functions
    model fine-tuned specifically for function-calling tasks.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**伯克利功能调用排行榜（**[**BFCL**](https://gorilla.cs.berkeley.edu/leaderboard.html)**）：**
    BFCL包含2,000个跨多个编程语言的问题-功能-答案对。目前有3个版本的BFCL数据集，每个版本都进行了增强，以更好地反映现实世界的场景。例如，[BFCL-V2](https://gorilla.cs.berkeley.edu/blogs/12_bfcl_v2_live.html)，于2024年8月19日发布，包含了用户贡献的样本，旨在解决与数据集污染相关的评估挑战。[BFCL-V3](https://gorilla.cs.berkeley.edu/blogs/13_bfcl_v3_multi_turn.html)于2024年9月19日发布，增加了多轮、多步工具调用的评估标准。这对于智能体应用至关重要，因为在这些应用中，模型需要在一定时间内进行多次工具调用才能成功完成任务。[关于在BFCL上评估模型的说明可以在GitHub上找到](https://github.com/ShishirPatil/gorilla)，[最新数据集可在HuggingFace上获取](https://huggingface.co/datasets/gorilla-llm/Berkeley-Function-Calling-Leaderboard)，[当前排行榜可在此访问](https://gorilla.cs.berkeley.edu/leaderboard.html)。伯克利团队还发布了多个版本的Gorilla
    Open-Functions模型，专门针对功能调用任务进行了微调。'
- en: '**Nexus Function Calling Benchmark:** This benchmark evaluates models on zero-shot
    function calling and API usage across nine different tasks classified into three
    major categories for single, parallel, and nested tool calls. Nexusflow released
    NexusRaven-V2, a model designed for function-calling. The [Nexus benchmark is
    available on GitHub](https://github.com/nexusflowai/NexusRaven-V2/tree/master#benchmarks)
    and the corresponding [leaderboard is on HuggingFace](https://huggingface.co/spaces/Nexusflow/Nexus_Function_Calling_Leaderboard).'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Nexus功能调用基准：** 该基准评估模型在零-shot功能调用和API使用方面的表现，涵盖九个不同任务，这些任务被分为单一、并行和嵌套工具调用三大类。Nexusflow发布了专为功能调用设计的模型NexusRaven-V2。[Nexus基准可以在GitHub上找到](https://github.com/nexusflowai/NexusRaven-V2/tree/master#benchmarks)，相应的[排行榜可在HuggingFace上查看](https://huggingface.co/spaces/Nexusflow/Nexus_Function_Calling_Leaderboard)。'
- en: '**ToolACE:** The [ToolACE paper](https://arxiv.org/pdf/2409.00920) demonstrates
    a creative approach to overcoming challenges related to collecting real-world
    data for function-calling. The research team created an agentic pipeline to generate
    a synthetic dataset for tool calling consisting of over 26,000 different APIs.
    The dataset includes examples of single, parallel, and nested tool calls, as well
    as non-tool based interactions, and supports both single and multi-turn dialogs.
    The team released a fine-tuned version of Llama-3.1–8B-Instruct, [ToolACE-8B](https://huggingface.co/Team-ACE/ToolACE-8B),
    designed to handle these complex tool-calling related tasks. A [subset of the
    ToolACE dataset is available on HuggingFace](https://huggingface.co/datasets/Team-ACE/ToolACE).'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ToolACE：** [ToolACE论文](https://arxiv.org/pdf/2409.00920)展示了一种创新的方法，克服了与收集现实世界数据以进行函数调用相关的挑战。研究团队创建了一个代理管道，以生成一个包含超过26,000个不同API的合成数据集，用于工具调用。该数据集包括单一、并行和嵌套工具调用的示例，以及非工具基础的交互，支持单轮和多轮对话。团队发布了一个针对这些复杂工具调用任务优化过的Llama-3.1–8B-Instruct版本，[ToolACE-8B](https://huggingface.co/Team-ACE/ToolACE-8B)，旨在处理这些任务。
    [ToolACE数据集的子集可以在HuggingFace上找到](https://huggingface.co/datasets/Team-ACE/ToolACE)。'
- en: Each of these benchmarks facilitates our ability to evaluate model reasoning
    expressed through tool calling. These benchmarks and fine-tuned models reflect
    a growing trend towards developing more specialized models for specific tasks
    and increasing LLM capabilities by extending their ability to interact with the
    real-world.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些基准测试有助于我们评估通过工具调用表达的模型推理能力。这些基准测试和精调模型反映了一个日益增长的趋势，旨在开发更专业化的模型以执行特定任务，并通过扩展它们与现实世界的互动能力来提高LLM能力。
- en: Examples of Tool-Calling in Action
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具调用的实际示例
- en: If you’re interested in exploring tool-calling in action, here are some examples
    to get you started organized by ease of use, ranging from simple built-in tools
    to using fine-tuned models, and agents with tool-calling abilities.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有兴趣了解工具调用的实际应用，以下是一些按易用性组织的示例，从简单的内建工具到使用精调模型和具有工具调用能力的代理，助您入门。
- en: '**Level 1 — ChatGPT**: The best place to start and see tool-calling live without
    needing to define any tools yourself, is through ChatGPT. Here you can use GPT-4o
    through the chat interface to call and execute tools for web-browsing. For example,
    when asked “what’s the latest AI news this week?” ChatGPT-4o will conduct a web
    search and return a response based on the information it finds. *Remember the
    new o1 model does not have tool-calling abilities yet and cannot search the web.*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**第1级 — ChatGPT**：开始并实时查看工具调用而无需自己定义任何工具的最佳地方是通过ChatGPT。在这里，您可以通过聊天界面使用GPT-4o来调用并执行网页浏览工具。例如，当询问“本周最新的AI新闻是什么？”时，ChatGPT-4o会进行网页搜索，并根据找到的信息返回答案。*请记住，新款o1模型尚不具备工具调用能力，无法进行网页搜索。*'
- en: '![](../Images/d4e671c962183b932578d58a05a894c1.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d4e671c962183b932578d58a05a894c1.png)'
- en: Image by author 9/30/24
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 作者图片 2024年9月30日
- en: While this built-in web-searching feature is convenient, most use cases will
    require defining custom tools that can integrate directly into your own model
    workflows and applications. This brings us to the next level of complexity.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个内建的网页搜索功能很方便，但大多数使用场景仍然需要定义自定义工具，这些工具可以直接集成到您自己的模型工作流和应用程序中。这将带我们进入下一个复杂度级别。
- en: '**Level 2 — Using a Model with Tool Calling Abilities and Defining Custom Tools**:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**第2级 — 使用具有工具调用能力的模型并定义自定义工具**：'
- en: This level involves using a model with tool-calling abilities to get a sense
    of how effectively the model selects and uses it’s tools. It’s important to note
    that **when a model is trained for tool-calling, it only generates the text or
    code for the tool call, it does not actually execute the code itself. Something
    external to the model needs to invoke the tool, and it’s at this point — where
    we’re combining generation with execution — that we transition from language model
    capabilities to agentic systems.**
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个级别涉及使用具有工具调用能力的模型，以了解模型如何有效地选择和使用这些工具。需要注意的是，**当一个模型被训练用于工具调用时，它只会生成工具调用的文本或代码，并不会实际执行代码。需要有模型外部的系统来调用工具，正是在这一点——将生成与执行结合起来的地方——我们从语言模型能力过渡到代理系统。**
- en: To get a sense for how models express tool calls we can turn towards the Databricks
    Playground. For example, we can select the model Llama 3.1 405B and give it access
    to the sample tools get_distance_between_locations and get_current_weather. When
    prompted with the user message “I am going on a trip from LA to New York how far
    are these two cities? And what’s the weather like in New York? I want to be prepared
    for when I get there” the model decides which tools to call and what parameters
    to pass so it can effectively reply to the user.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了感受模型如何表达工具调用，我们可以转向Databricks Playground。例如，我们可以选择模型Llama 3.1 405B，并给予它访问样本工具get_distance_between_locations和get_current_weather的权限。当提示用户消息“我将从洛杉矶去纽约，这两个城市有多远？纽约的天气怎么样？我想为到达那里做准备”时，模型决定调用哪些工具以及传递哪些参数，以便有效地回复用户。
- en: '![](../Images/ccc6160bc9393164ecb15310a765b94b.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ccc6160bc9393164ecb15310a765b94b.png)'
- en: Image by author 10/2/2024 depicting using the Databricks Playground for sample
    tool calling
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作者于2024年10月2日描绘了使用Databricks Playground进行示例工具调用的图像
- en: In this example, the model suggests two tool calls. Since the model cannot execute
    the tools, the user needs to fill in a sample result to simulate the tool output
    (e.g., “2500” for the distance and “68” for the weather). The model then uses
    these simulated outputs to reply to the user.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，模型建议了两个工具调用。由于模型无法执行这些工具，用户需要填入一个示例结果来模拟工具输出（例如，“2500”表示距离，“68”表示天气）。然后，模型使用这些模拟的输出回复用户。
- en: This approach to using the Databricks Playground allows you to observe how the
    model uses custom defined tools and is a great way to test your function definitions
    before implementing them in your tool-calling enabled applications or agents.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种使用Databricks Playground的方法允许你观察模型如何使用自定义定义的工具，并且是测试函数定义的绝佳方式，尤其是在将其实现到启用工具调用的应用程序或代理之前。
- en: Outside of the Databricks Playground, we can observe and evaluate how effectively
    different models available on platforms like HuggingFace use tools through code
    directly. For example, we can load different models like Llama 3.2–3B-Instruct,
    ToolACE-8B, NexusRaven-V2–13B, and more from HuggingFace, give them the same system
    prompt, tools, and user message then observe and compare the tool calls each model
    returns. This is a great way to understand how well different models reason about
    using custom-defined tools and can help you determine which tool-calling models
    are best suited for your applications.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在Databricks Playground之外，我们可以直接通过代码观察和评估在像HuggingFace这样的平台上，不同模型如何有效地使用工具。例如，我们可以加载不同的模型，如Llama
    3.2–3B-Instruct、ToolACE-8B、NexusRaven-V2–13B等，从HuggingFace获取它们，给予相同的系统提示、工具和用户消息，然后观察并比较每个模型返回的工具调用。这是理解不同模型如何推理使用自定义定义工具的绝佳方式，能够帮助你确定哪些工具调用模型最适合你的应用程序。
- en: Here is an example demonstrating a tool call generated by Llama-3.2–3B-Instruct
    based on the following tool definitions and user message, the same steps could
    be followed for other models to compare generated tool calls.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，展示了Llama-3.2–3B-Instruct基于以下工具定义和用户消息生成的工具调用，其他模型可以按照相同的步骤进行比较生成的工具调用。
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/c611f529dd5a8b70118f307696a7b85b.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c611f529dd5a8b70118f307696a7b85b.png)'
- en: Image by author sample output demonstrating generated tool call from Llama 3.2–3B-Instruct
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的示例输出，展示了从Llama 3.2–3B-Instruct生成的工具调用
- en: From here we can move to Level 3 where we’re defining Agents that execute the
    tool-calls generated by the language model.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里我们可以进入第3级，在该级别我们定义执行语言模型生成的工具调用的代理。
- en: '**Level 3 Agents (invoking/executing LLM tool-calls)**: Agents often express
    reasoning both through planning and execution as well as tool calling making them
    an increasingly important aspect of AI based applications. Using libraries like
    LangGraph, AutoGen, Semantic Kernel, or LlamaIndex, you can quickly create an
    agent using models like GPT-4o or Llama 3.1–405B which support both conversations
    with the user and tool execution.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**第3级代理（调用/执行LLM工具调用）**：代理通常通过规划和执行以及工具调用来表达推理，使其成为基于AI的应用程序中日益重要的组成部分。使用像LangGraph、AutoGen、Semantic
    Kernel或LlamaIndex这样的库，你可以快速创建一个代理，使用像GPT-4o或Llama 3.1–405B这样的模型，它们既支持与用户的对话，又支持工具执行。'
- en: 'Check out these guides for some exciting examples of agents in action:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 查看这些指南，了解一些激动人心的代理实例：
- en: 'LangGraph: [Local RAG Agent with Llama 3](https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_adaptive_rag_local/)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'LangGraph: [使用Llama 3的本地RAG代理](https://langchain-ai.github.io/langgraph/tutorials/rag/langgraph_adaptive_rag_local/)'
- en: 'AutoGen: [Solve Tasks Requiring Web Info](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_web_info.ipynb)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'AutoGen: [解决需要网页信息的任务](https://github.com/microsoft/autogen/blob/main/notebook/agentchat_web_info.ipynb)'
- en: 'Semantic Kernel: [Getting Started with Agents in Semantic Kernel](https://github.com/microsoft/semantic-kernel/blob/main/dotnet/samples/GettingStartedWithAgents/README.md)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义内核： [在语义内核中使用代理入门](https://github.com/microsoft/semantic-kernel/blob/main/dotnet/samples/GettingStartedWithAgents/README.md)
- en: 'LlamaIndex: [Agent Usage Pattern Documentation](https://docs.llamaindex.ai/en/stable/module_guides/deploying/agents/usage_pattern/)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'LlamaIndex: [代理使用模式文档](https://docs.llamaindex.ai/en/stable/module_guides/deploying/agents/usage_pattern/)'
- en: 'Conclusion:'
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论：
- en: The future of agentic systems will be driven by models with strong reasoning
    abilities enabling them to effectively interact with their environment. As the
    field evolves, I expect we will continue to see a proliferation of smaller, specialized
    models focused on specific tasks like tool-calling and planning.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 代理系统的未来将由具有强大推理能力的模型驱动，这些模型使它们能够有效地与环境互动。随着该领域的发展，我预计我们将继续看到越来越多的小型专用模型，它们将专注于特定任务，如工具调用和规划。
- en: It’s important to consider the current limitations of model sizes when building
    agents. For example, according to the [Llama 3.1 model card](https://www.llama.com/docs/model-cards-and-prompt-formats/llama3_1),
    the Llama 3.1–8B model is not reliable for tasks that involve both maintaining
    a conversation and calling tools. Instead, larger models with 70B+ parameters
    should be used for these types of tasks. This alongside other emerging research
    for fine-tuning small language models suggests that smaller models may serve best
    as specialized tool-callers while larger models may be better for more advanced
    reasoning. By combining these abilities, we can build increasingly effective agents
    that provide a seamless user experience and allow people to leverage these reasoning
    abilities in both professional and personal endeavors.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建代理时，考虑模型大小的当前限制是非常重要的。例如，根据[Llama 3.1模型卡片](https://www.llama.com/docs/model-cards-and-prompt-formats/llama3_1)，Llama
    3.1–8B模型对于既需要保持对话又需要调用工具的任务并不可靠。相反，应该使用具有70B+参数的更大模型来处理这些任务。结合其他针对小型语言模型微调的研究表明，较小的模型可能最适合作为专门的工具调用者，而更大的模型则可能更适合进行更高级的推理。通过结合这些能力，我们可以构建出越来越有效的代理，提供无缝的用户体验，并使人们能够在专业和个人事务中利用这些推理能力。
- en: '*Interested in discussing further or collaborating? Reach out on* [*LinkedIn*](https://www.linkedin.com/in/tula-masterman/)*!*'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '*有兴趣进一步讨论或合作吗？请在* [*LinkedIn*](https://www.linkedin.com/in/tula-masterman/)*上联系我们！*'
