- en: DBSCAN, Explained in 5 Minutes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DBSCAN，5分钟讲解
- en: 原文：[https://towardsdatascience.com/dbscan-explained-in-5-minutes-133f6a9766e4?source=collection_archive---------4-----------------------#2024-08-23](https://towardsdatascience.com/dbscan-explained-in-5-minutes-133f6a9766e4?source=collection_archive---------4-----------------------#2024-08-23)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/dbscan-explained-in-5-minutes-133f6a9766e4?source=collection_archive---------4-----------------------#2024-08-23](https://towardsdatascience.com/dbscan-explained-in-5-minutes-133f6a9766e4?source=collection_archive---------4-----------------------#2024-08-23)
- en: Fastest implementation in python🐍
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中最快的实现🐍
- en: '[](https://medium.com/@alexroz?source=post_page---byline--133f6a9766e4--------------------------------)[![Aleksei
    Rozanov](../Images/748b69bfaccf39c9aa568a9e6f41eec3.png)](https://medium.com/@alexroz?source=post_page---byline--133f6a9766e4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--133f6a9766e4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--133f6a9766e4--------------------------------)
    [Aleksei Rozanov](https://medium.com/@alexroz?source=post_page---byline--133f6a9766e4--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@alexroz?source=post_page---byline--133f6a9766e4--------------------------------)[![Aleksei
    Rozanov](../Images/748b69bfaccf39c9aa568a9e6f41eec3.png)](https://medium.com/@alexroz?source=post_page---byline--133f6a9766e4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--133f6a9766e4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--133f6a9766e4--------------------------------)
    [Aleksei Rozanov](https://medium.com/@alexroz?source=post_page---byline--133f6a9766e4--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--133f6a9766e4--------------------------------)
    ·5 min read·Aug 23, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--133f6a9766e4--------------------------------)
    ·阅读时间5分钟·2024年8月23日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e034fb66930bd44b034406ac41f56803.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e034fb66930bd44b034406ac41f56803.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[作者](https://medium.com/@alexroz)提供。
- en: What’s **DBSCAN** [1]? How to build it in python? There are many articles covering
    this topic, but I think the algorithm itself is so simple and intuitive that it’s
    possible to explain its idea in just *5 minutes*, so let’s try to do that.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是**DBSCAN** [1]？如何用Python构建它？有很多文章介绍了这个话题，但我认为这个算法本身如此简单直观，以至于可以在仅仅*5分钟*内解释清楚它的基本思想，所以让我们试着这样做。
- en: DBSCAN = Density-Based Spatial Clustering of Applications with Noise
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: DBSCAN = 基于密度的空间聚类算法，带噪声
- en: What does it mean?
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这是什么意思？
- en: The algorithm searches for clusters inside the data based on **the spatial distance
    between objects**.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该算法基于**对象之间的空间距离**在数据中搜索聚类。
- en: The algorithm can **identify outliers** (noise).
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该算法可以**识别异常值**（噪声）。
- en: Why do you need DBSCAN at all???
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么你根本需要DBSCAN呢???
- en: '**Extract a new feature.** If the dataset you’re dealing with is large, it
    might be helpful to find obvious clusters inside the data and work with each cluster
    separately (train different models for different clusters).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提取新特征。** 如果你处理的数据集很大，找出数据中明显的聚类并分别处理每个聚类（为不同的聚类训练不同的模型）可能会很有帮助。'
- en: '**Compress the data.** Often we have to deal with millions of rows, which is
    expensive computationally and time consuming. Clustering the data and then keeping
    only X% from each cluster *might save your wicked data science soul*. Therefore,
    you’ll **keep the balance** inside the dataset, but **reduce its size**.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**压缩数据。** 我们经常需要处理数百万行数据，这在计算上是昂贵且耗时的。通过聚类数据，然后从每个聚类中仅保留X%的数据，*可能会拯救你宝贵的数据科学灵魂*。因此，你将**保持数据集内的平衡**，但**减少其大小**。'
- en: '**Novelty detection.** It’s been mentioned before that DBSCAN detects noise,
    but the noise might be a previously unknown feature of the dataset, which you
    can preserve and use in modeling.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新颖性检测。** 前面提到过，DBSCAN可以检测噪声，但噪声可能是数据集中的一个之前未知的特征，你可以保留它并在建模中使用。'
- en: 'Then you may say: but there is the super-reliable and effective **k-means**
    algorithm.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可能会说：但是有一个超可靠且有效的**k均值**算法。
- en: '[](/semantic-segmentation-of-remote-sensing-imagery-using-k-means-e4c165d9218e?source=post_page-----133f6a9766e4--------------------------------)
    [## Semantic Segmentation of Remote Sensing Imagery using k-Means'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/semantic-segmentation-of-remote-sensing-imagery-using-k-means-e4c165d9218e?source=post_page-----133f6a9766e4--------------------------------)
    [## 使用k均值进行遥感影像的语义分割'
- en: From scratch in python🐍
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从零开始用Python实现🐍
- en: towardsdatascience.com](/semantic-segmentation-of-remote-sensing-imagery-using-k-means-e4c165d9218e?source=post_page-----133f6a9766e4--------------------------------)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/semantic-segmentation-of-remote-sensing-imagery-using-k-means-e4c165d9218e?source=post_page-----133f6a9766e4--------------------------------)
- en: Yes, but the sweetest part about DBSCAN is that it overcomes the drawbacks of
    k-means, and you don’t need to specify the number of clusters. **DBSCAN detects
    clusters for you!**
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，但 DBSCAN 最棒的地方是它克服了 k-means 的缺点，而且你不需要指定聚类的数量。**DBSCAN 为你检测聚类！**
- en: 'DBSCAN has two components defined by a user: vicinity, or radius (**𝜀**), and
    the number of neighbors (**N**).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: DBSCAN 有两个由用户定义的组件：邻域或半径（**𝜀**）和邻居数（**N**）。
- en: 'For a dataset consisting of some objects, the algorithm is based on the following
    ideas:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个由若干对象组成的数据集，该算法基于以下思想：
- en: '**Core objets**. An object is called a core object if within distance **𝜀**
    it has *at least* **N** other objects.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**核心对象**。如果一个对象在距离**𝜀**范围内至少有**N**个其他对象，那么它被称为核心对象。'
- en: An non-core object lying within **𝜀**-vicinity of a core-point is called a **border
    object**.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个位于核心点**𝜀**邻域内的非核心对象称为**边界对象**。
- en: A core object forms a **cluster** with all the core and border objects within
    **𝜀**-vicinity.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个核心对象与所有位于**𝜀**邻域内的核心和边界对象形成一个**聚类**。
- en: If an object is neither core or border, it’s called **noise (outlier)**. It
    doesn’t belong to any cluster.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个对象既不是核心对象也不是边界对象，它被称为**噪声（离群点）**。它不属于任何聚类。
- en: 'To implement DBSCAN it’s necessary to create a distance function. In this article
    we will be using the Euclidean distance:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现 DBSCAN，必须创建一个距离函数。在本文中，我们将使用欧几里得距离：
- en: '![](../Images/2fd5387f00392750e94306d81375c782.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2fd5387f00392750e94306d81375c782.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [作者](https://medium.com/@alexroz) 提供。
- en: 'The pseudo-code for our algorithm looks like this:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们算法的伪代码如下：
- en: '![](../Images/511de6d35f92eb58fad5b01d3ea2ee7e.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/511de6d35f92eb58fad5b01d3ea2ee7e.png)'
- en: Image by [2].
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [2] 提供。
- en: '**As always the code of this article you can find on my** [**GitHub**](https://github.com/alexxxroz/Medium/blob/main/DBSCAN.ipynb)**.**'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**和往常一样，本文的代码可以在我的** [**GitHub**](https://github.com/alexxxroz/Medium/blob/main/DBSCAN.ipynb)**
    上找到。**'
- en: 'Let’s begin with the distance function:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从距离函数开始：
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now let’s build the body of the algorithm:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们构建算法的主体：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Done!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 完成！
- en: Let’s check the correctness of our implementation and compare it with **sklearn**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下我们实现的正确性，并与**sklearn**进行比较。
- en: 'Let’s generate some synthetic data:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们生成一些合成数据：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/f27953128084bd76852f0b2e754604f9.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f27953128084bd76852f0b2e754604f9.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [作者](https://medium.com/@alexroz) 提供。
- en: 'Let’s apply our implementation and visualize the results:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们应用我们的实现并可视化结果：
- en: '![](../Images/f10fec3abef911cd001c387b1dee55a2.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f10fec3abef911cd001c387b1dee55a2.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [作者](https://medium.com/@alexroz) 提供。
- en: 'For sklearn implementation we got the same clusters:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 sklearn 的实现，我们得到了相同的聚类：
- en: '![](../Images/727430787a45f9542b63737f659ca610.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/727430787a45f9542b63737f659ca610.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [作者](https://medium.com/@alexroz) 提供。
- en: That’s it, they are identical. 5 minutes and we’re done! When you try DBSCANning
    yourself, don’t forget to tune epsilon and the number of neighbors since they
    highlt influence the final results.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，它们是相同的。5分钟就搞定了！当你自己尝试 DBSCAN 时，别忘了调整 epsilon 和邻居数，因为它们会显著影响最终结果。
- en: ===========================================
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ===========================================
- en: '**Reference:**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考文献：**'
- en: '[1] Ester, M., Kriegel, H. P., Sander, J., & Xu, X. (1996, August). Density-based
    spatial clustering of applications with noise. In *Int. Conf. knowledge discovery
    and data mining* (Vol. 240, №6).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] Ester, M., Kriegel, H. P., Sander, J., & Xu, X. (1996, August). Density-based
    spatial clustering of applications with noise. In *Int. Conf. knowledge discovery
    and data mining* (Vol. 240, №6).'
- en: '[2] Yang, Yang, et al. “An efficient DBSCAN optimized by arithmetic optimization
    algorithm with opposition-based learning.” *The journal of supercomputing* 78.18
    (2022): 19566–19604.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] Yang, Yang, et al. “An efficient DBSCAN optimized by arithmetic optimization
    algorithm with opposition-based learning.” *The journal of supercomputing* 78.18
    (2022): 19566–19604.'
- en: ===========================================
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: ===========================================
- en: '*All my publications on Medium are free and open-access, that’s why I’d really
    appreciate if you followed me here!*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*我在 Medium 上的所有出版物都是免费的开放访问，因此如果你在这里关注我，我将不胜感激！*'
- en: P.s. I’m extremely passionate about (Geo)Data Science, ML/AI and Climate Change.
    So if you want to work together on some project pls contact me in [LinkedIn](https://www.linkedin.com/in/alexxxroz/).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: P.s. 我对（地理）数据科学、机器学习/人工智能以及气候变化充满极大热情。如果你想在某个项目上合作，请通过[LinkedIn](https://www.linkedin.com/in/alexxxroz/)联系我。
- en: 🛰️Follow for more🛰️
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 🛰️关注以获取更多信息🛰️
