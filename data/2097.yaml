- en: Machine Learning Operations (MLOps) For Beginners
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初学者的机器学习操作（MLOps）
- en: 原文：[https://towardsdatascience.com/machine-learning-operations-mlops-for-beginners-a5686bfe02b2?source=collection_archive---------0-----------------------#2024-08-29](https://towardsdatascience.com/machine-learning-operations-mlops-for-beginners-a5686bfe02b2?source=collection_archive---------0-----------------------#2024-08-29)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/machine-learning-operations-mlops-for-beginners-a5686bfe02b2?source=collection_archive---------0-----------------------#2024-08-29](https://towardsdatascience.com/machine-learning-operations-mlops-for-beginners-a5686bfe02b2?source=collection_archive---------0-----------------------#2024-08-29)
- en: End-to-end Project Implementation
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端到端项目实施
- en: '[](https://medium.com/@prasadmahamulkar?source=post_page---byline--a5686bfe02b2--------------------------------)[![Prasad
    Mahamulkar](../Images/ed895003bf372f0c109f70e08458dad8.png)](https://medium.com/@prasadmahamulkar?source=post_page---byline--a5686bfe02b2--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a5686bfe02b2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a5686bfe02b2--------------------------------)
    [Prasad Mahamulkar](https://medium.com/@prasadmahamulkar?source=post_page---byline--a5686bfe02b2--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@prasadmahamulkar?source=post_page---byline--a5686bfe02b2--------------------------------)[![Prasad
    Mahamulkar](../Images/ed895003bf372f0c109f70e08458dad8.png)](https://medium.com/@prasadmahamulkar?source=post_page---byline--a5686bfe02b2--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a5686bfe02b2--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a5686bfe02b2--------------------------------)
    [Prasad Mahamulkar](https://medium.com/@prasadmahamulkar?source=post_page---byline--a5686bfe02b2--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a5686bfe02b2--------------------------------)
    ·19 min read·Aug 29, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a5686bfe02b2--------------------------------)
    ·阅读时间19分钟·2024年8月29日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/4e4347f61e9dc1b6ed4aaddf273822a0.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4e4347f61e9dc1b6ed4aaddf273822a0.png)'
- en: Image created by the author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者创建
- en: Developing, deploying, and maintaining machine learning models in production
    can be challenging and complex. This is where Machine Learning Operations (MLOps)
    comes into play. MLOps is a set of practices that automate and simplify machine
    learning (ML) workflows and deployments. In this article, I will be sharing some
    basic MLOps practices and tools through an end-to-end project implementation that
    will help you manage machine learning projects more efficiently, from development
    to production.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产中开发、部署和维护机器学习模型可能是具有挑战性和复杂的。这就是机器学习操作（MLOps）发挥作用的地方。MLOps 是一套实践，旨在自动化和简化机器学习（ML）工作流和部署。在本文中，我将通过端到端的项目实施，分享一些基本的
    MLOps 实践和工具，帮助你更高效地管理机器学习项目，从开发到生产。
- en: 'After reading this article, you will know:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读完本文后，你将了解到：
- en: How to use **DVC** for data versioning.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用**DVC**进行数据版本控制。
- en: How to track logs, artifacts, and register model versions using **MLflow.**
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用**MLflow**跟踪日志、工件，并注册模型版本。
- en: How to deploy a model using **FastAPI**, **Docker**, and **AWS ECS**.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用**FastAPI**、**Docker**和**AWS ECS**部署模型。
- en: How to monitor a model in production using **Evidently AI**.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用**Evidently AI**监控生产中的模型。
- en: All the code used in this article is available on [GitHub](https://github.com/prsdm/mlops-project).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本文中使用的所有代码都可以在 [GitHub](https://github.com/prsdm/mlops-project) 上找到。
- en: Please note that GIF examples might not load completely in the Medium app but
    should work fine in a browser.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 请注意，GIF 示例可能在 Medium 应用中无法完全加载，但在浏览器中应该可以正常显示。
- en: Before we start, let’s first quickly understand what is MLOps.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始之前，让我们首先快速了解一下什么是 MLOps。
- en: What is MLOps?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 MLOps？
- en: MLOps is a set of techniques and practices designed to simplify and automate
    the lifecycle of machine learning (ML) systems. MLOps aims to improve the efficiency
    and reliability of deploying ML models into production by providing clear guidelines
    and responsibilities for professionals and researchers. It bridges the gap between
    ML development and production, ensuring that machine learning models can be efficiently
    developed, deployed, managed, and maintained in real-world environments. This
    approach helps reduce system design errors, enabling more robust and accurate
    predictions in real-world settings.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: MLOps是一套旨在简化和自动化机器学习（ML）系统生命周期的技术和实践。MLOps的目标是通过为专业人员和研究人员提供清晰的指南和职责，提升将机器学习模型部署到生产环境中的效率和可靠性。它弥合了机器学习开发和生产之间的鸿沟，确保机器学习模型可以在真实环境中高效地开发、部署、管理和维护。这种方法有助于减少系统设计错误，使得在实际环境中能够做出更强大和准确的预测。
- en: '![](../Images/433e86c6688830bd32fc52cd42c760bf.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/433e86c6688830bd32fc52cd42c760bf.png)'
- en: Image created by the author
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图像由作者创建
- en: '**Why do we need MLOps?**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们为什么需要MLOps？**'
- en: Typically, any machine learning project starts with defining the business problem.
    Once the problem is defined, data extraction, data preparation, feature engineering,
    and model training steps are implemented to develop the model. After the model
    is developed, it is usually stored somewhere so that the engineering and operations
    teams can deploy it for production use.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，任何机器学习项目从定义业务问题开始。问题定义后，进行数据提取、数据准备、特征工程和模型训练步骤，以开发模型。模型开发完成后，通常会将其存储在某个地方，以便工程和运维团队可以将其部署到生产环境中。
- en: '**What is wrong with this approach?**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**这种方法有什么问题？**'
- en: It creates a gap between the development and deployment phases, leading to inefficiencies
    and potential errors. Without collaboration between data scientists and engineers,
    models may not be optimized for production, which can result in issues such as
    performance degradation, lack of scalability, and maintenance difficulties.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 它在开发和部署阶段之间创造了一个鸿沟，导致低效和潜在的错误。如果数据科学家和工程师之间缺乏合作，模型可能无法针对生产环境进行优化，从而导致性能下降、缺乏可扩展性和维护困难等问题。
- en: MLOps solves these problems by creating a unified workflow that integrates development
    and operations. It ensures that models are reliable, scalable, and easier to maintain.
    This approach reduces the risk of errors, accelerates deployment, and keeps models
    effective and up-to-date through continuous monitoring.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MLOps通过创建一个统一的工作流程，集成开发和运维，解决了这些问题。它确保模型可靠、可扩展，并且更容易维护。这种方法减少了错误的风险，加快了部署速度，并通过持续监控保持模型的有效性和最新性。
- en: Now that we have a basic understanding of MLOps, let’s move on to the implementation
    part.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对MLOps有了一个基本的了解，接下来进入实现部分。
- en: Project Setup
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目设置
- en: Machine learning project requires a standard project structure to ensure it
    can be easily maintained and modified. A good project structure allows team members
    to collaborate easily and effectively.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习项目需要一个标准的项目结构，以确保项目能够轻松维护和修改。一个良好的项目结构使得团队成员可以轻松且有效地协作。
- en: For this project, we will use a very basic structure that will help us manage
    the entire lifecycle of a machine learning project, including data ingestion,
    preprocessing, model training, evaluation, deployment, and monitoring.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将使用一个非常基础的结构，帮助我们管理机器学习项目的整个生命周期，包括数据摄取、预处理、模型训练、评估、部署和监控。
- en: To begin, clone the mlops-project repository from [GitHub](https://github.com/prsdm/mlops-project)
    and follow along.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从[GitHub](https://github.com/prsdm/mlops-project)克隆mlops-project仓库并跟随操作。
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After cloning the repository the project structure will look something like
    this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 克隆仓库后，项目结构将如下所示：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here is a breakdown of the structure:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是该结构的详细说明：
- en: '**data**: Stores data files used for model training and evaluation.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**data**：存储用于模型训练和评估的数据文件。'
- en: '**docs**: Contains project documentation.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**docs**：包含项目文档。'
- en: '**models**: Stores trained machine learning models.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**models**：存储训练好的机器学习模型。'
- en: '**mlruns**: Contains logs and artifacts generated by MLflow.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mlruns**：包含MLflow生成的日志和工件。'
- en: '**steps**: Includes source code for data ingestion, cleaning, and model training.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**steps**：包括用于数据摄取、清理和模型训练的源代码。'
- en: '**tests**: Includes unit tests to verify the functionality of the code.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**tests**：包括单元测试，以验证代码的功能。'
- en: '**app.py**: Contains the FastAPI application code for deploying the model.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**app.py**：包含用于部署模型的FastAPI应用代码。'
- en: '**config.yml**: Configuration file for storing project parameters and paths.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**config.yml**：用于存储项目参数和路径的配置文件。'
- en: '**data.dvc**: Tracks data files and their versions using DVC.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**data.dvc**：使用DVC跟踪数据文件及其版本。'
- en: '**dataset.py**: Script for downloading or generating data.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dataset.py**：用于下载或生成数据的脚本。'
- en: '**dockerfile**: Used to build a Docker image for containerizing the FastAPI
    application.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dockerfile**：用于构建容器化FastAPI应用程序的Docker镜像。'
- en: '**main.py**: Automates the model training process.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**main.py**：自动化模型训练过程。'
- en: '**Makefile**: Contains commands for automating tasks such as training or testing.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Makefile**：包含用于自动化任务的命令，例如训练或测试。'
- en: '**mkdocs.yml**: Configuration file for MkDocs, used to generate project documentation.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**mkdocs.yml**：用于生成项目文档的MkDocs配置文件。'
- en: '**requirements.txt**: Contains all the required packages for the project.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**requirements.txt**：包含项目所需的所有包。'
- en: '**samples.json**: Contains sample data for testing purposes.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**samples.json**：包含用于测试的示例数据。'
- en: '**monitor.ipynb**: Jupyter notebook for monitoring model performance.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**monitor.ipynb**：用于监控模型性能的Jupyter笔记本。'
- en: '**production_data.html** and **test_data.html**: Stores monitoring results
    for test and production data.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**production_data.html**和**test_data.html**：存储测试数据和生产数据的监控结果。'
- en: This project structure is designed to organize the entire machine learning project,
    from development to monitoring.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目结构旨在组织整个机器学习项目，从开发到监控。
- en: 'Now, let''s create a virtual environment and activate it using the following
    commands:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个虚拟环境并使用以下命令激活它：
- en: '**For bash:**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于bash：**'
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**For cmd:**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**对于cmd：**'
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, install all required packages using the `requirements.txt` file.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`requirements.txt`文件安装所有必需的包。
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Example:'
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '![](../Images/488421180facfca41024fb0e159dc7fd.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/488421180facfca41024fb0e159dc7fd.png)'
- en: Example of project setup
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 项目设置示例
- en: With the environment set up and dependencies installed, we can now move on to
    the model training part.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好环境并安装好依赖项后，我们可以继续进行模型训练部分。
- en: Model Training
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型训练
- en: In model training, the first step is to get data from the source, which could
    be either local storage or remote storage. To do this, run the `dataset.py` file.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型训练中，第一步是从源头获取数据，这些数据可能存储在本地存储或远程存储中。为此，运行`dataset.py`文件。
- en: '[PRE7]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This script retrieves the data from its source, splits it into training and
    testing datasets, and then stores them in the `data/` directory.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这个脚本从源头获取数据，将其分为训练集和测试集，然后将它们存储在`data/`目录中。
- en: 'Example:'
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '![](../Images/8efa34dfc2f40d4e48f1356718dbffe0.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8efa34dfc2f40d4e48f1356718dbffe0.png)'
- en: Example of data extraction
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 数据提取示例
- en: Once the data is stored in the data directory, the next steps include cleaning,
    processing, and model training. The `steps/` folder contains modules for each
    of these stages.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦数据存储在数据目录中，接下来的步骤包括清理、处理和模型训练。`steps/`文件夹包含这些阶段的每个模块。
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let''s take a look at what each file does:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看每个文件的作用：
- en: '`ingestion.py` handles the initial data ingestion, ensuring that data is correctly
    loaded and available for the next stages.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ingestion.py`负责初步数据摄取，确保数据被正确加载并准备好供下一阶段使用。'
- en: '`clean.py` focuses on data cleaning tasks, such as handling missing values,
    removing duplicates, and making other data quality improvements.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean.py`专注于数据清理任务，如处理缺失值、去除重复项和进行其他数据质量改进。'
- en: '`train.py` responsible for training the model on the cleaned data and saving
    the model as `model.pkl` in the `models/` directory.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`train.py`负责在清理后的数据上训练模型，并将模型保存为`model.pkl`，存储在`models/`目录中。'
- en: '`predict.py`is used to evaluate model performance on test data using the trained
    model.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`predict.py`用于使用训练后的模型评估测试数据上的模型性能。'
- en: '**Note:** These files can be changed or removed depending on project requirements.'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 这些文件可以根据项目需求进行更改或删除。'
- en: 'To run all these steps in sequence, execute the `main.py` file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了按顺序运行所有这些步骤，请执行`main.py`文件：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here’s how the `main.py` file looks in this project:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这个项目中`main.py`文件的样子：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Example:**'
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**示例：**'
- en: '![](../Images/6c5658496e301f579e1ff3d2b6d49497.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6c5658496e301f579e1ff3d2b6d49497.png)'
- en: Example of model training
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 模型训练示例
- en: Now, let’s see how we can improve this project using tools like DVC and MLflow.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何使用像DVC和MLflow这样的工具来改进这个项目。
- en: Data Version Control (DVC)
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据版本控制（DVC）
- en: Let’s start with Data Version Control (DVC), a free, open-source tool designed
    to manage large datasets, automate ML pipelines, and handle experiments. It helps
    data science and machine learning teams manage their data more effectively, ensure
    reproducibility, and improve collaboration.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从数据版本控制（DVC）开始，它是一个免费的开源工具，旨在管理大型数据集、自动化机器学习管道并处理实验。它帮助数据科学和机器学习团队更有效地管理数据，确保可重复性，并提高协作。
- en: '**Why use DVC over GitHub?**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么使用DVC而不是GitHub？**'
- en: Git is excellent for versioning source code and text files, but it has limitations
    when dealing with large binary files such as datasets. Git does not provide meaningful
    comparisons between versions of binary files; it only stores new versions without
    showing detailed differences, making it challenging to track changes over time.
    Additionally, storing large datasets or sensitive data in GitHub is not ideal,
    as it can lead to bloated repositories and potential security risks.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Git在源代码和文本文件的版本控制方面表现出色，但在处理大型二进制文件（如数据集）时存在局限性。Git无法对二进制文件的版本进行有意义的比较；它仅存储新版本，而不显示详细差异，这使得随着时间推移跟踪更改变得具有挑战性。此外，将大型数据集或敏感数据存储在GitHub中并不理想，因为这可能导致代码库膨胀，并带来潜在的安全风险。
- en: DVC addresses these issues by managing large files through metadata and external
    storage (such as S3, Google Cloud Storage, or Azure Blob Storage) while maintaining
    detailed tracking of data changes and version history. DVC uses human-readable
    metafiles to define data versions and integrates with Git or any source control
    management (SCM) tool to version and share the entire project, including data
    assets. Additionally, it provides secure collaboration by controlling access to
    project components and sharing them with designated teams and individuals.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: DVC通过元数据和外部存储（如S3、Google Cloud Storage或Azure Blob Storage）管理大文件，同时保持对数据更改和版本历史的详细跟踪，从而解决了这些问题。DVC使用人类可读的元文件来定义数据版本，并与Git或任何源代码管理（SCM）工具集成，以便对整个项目（包括数据资产）进行版本控制和共享。此外，它通过控制项目组件的访问权限并与指定的团队和个人共享，提供了安全的协作方式。
- en: 'To get started with DVC, first install it (if it’s not already installed):'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用DVC，首先安装它（如果尚未安装）：
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, initialize DVC:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，初始化DVC：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This sets up the necessary DVC configuration files.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置必要的DVC配置文件。
- en: 'Now, add data files to DVC:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将数据文件添加到DVC：
- en: '[PRE13]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This tracks the data files with DVC, storing the actual data in external storage.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过DVC跟踪数据文件，并将实际数据存储在外部存储中。
- en: 'Configure remote storage:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 配置远程存储：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Replace `<remote_name>` with a name for remote storage and `<remote_storage_path>`
    with the path to the remote storage (e.g., s3://mybucket/mydata).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 将`<remote_name>`替换为远程存储的名称，将`<remote_storage_path>`替换为远程存储的路径（例如：s3://mybucket/mydata）。
- en: 'Push data to remote storage:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据推送到远程存储：
- en: '[PRE15]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This uploads data to the configured remote storage.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将数据上传到配置的远程存储。
- en: 'Push all committed changes to git:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有已提交的更改推送到git：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Example:'
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '![](../Images/621cfc48be2931844cdb2bfd443bf86f.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/621cfc48be2931844cdb2bfd443bf86f.png)'
- en: Example of DVC push
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: DVC push示例
- en: 'To pull the latest data version from remote storage to the local directory,
    use the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要从远程存储拉取最新的数据版本到本地目录，请使用以下命令：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Example:'
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '![](../Images/486c09f9c048043971f6ceccee56fd54.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/486c09f9c048043971f6ceccee56fd54.png)'
- en: Example of DVC pull
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: DVC pull示例
- en: By integrating DVC, we can manage large datasets efficiently while keeping the
    Git repository focused on source code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过集成DVC，我们可以高效地管理大型数据集，同时保持Git仓库专注于源代码。
- en: '**Note:** We can use DVC to version models just like data files.'
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 我们可以像数据文件一样使用DVC对模型进行版本控制。'
- en: MLflow
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MLflow
- en: After versioning data with DVC, it’s crucial to maintain a clear record of model
    training, version changes, and parameter configurations, even if we are not actively
    experimenting with multiple models.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用DVC对数据进行版本控制之后，维护模型训练、版本变化和参数配置的清晰记录至关重要，即使我们并不主动进行多个模型的实验。
- en: 'Without systematic tracking, several issues can arise:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有系统地进行跟踪，可能会出现几个问题：
- en: '**Loss of Version Details**: Without keeping track of which parameters and
    code changes were used for each model version, it becomes hard to reproduce or
    build on past work. This can slow down the progress and cause repeated mistakes.'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**版本详细信息丢失**：如果没有跟踪每个模型版本使用的参数和代码更改，就很难重现或在过去的工作基础上进行改进。这可能会减缓进度并导致重复的错误。'
- en: '**Difficulty in Version Comparison**: Consistently recording how well each
    model performs helps compare different versions. Without this, it is tough to
    see if a model is improving or not.'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**版本比较的难度**：持续记录每个模型的表现有助于比较不同版本。没有这个，很难看出一个模型是否在进步。'
- en: '**Collaboration Challenges**: In a team, not having a clear way to manage model
    versions can lead to confusion and accidental overwrites of each other’s work,
    complicating the collaborative process.'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**协作挑战**：在团队中，如果没有明确的方式来管理模型版本，可能会导致混乱和不小心覆盖彼此的工作，从而使协作过程更加复杂。'
- en: This is where MLflow comes in. MLflow is not just for experimenting; it also
    plays a critical role in tracking the lifecycle of ML models. It logs metrics,
    artifacts, and parameters, ensuring that every version change is documented and
    easily retrievable. With MLflow, we can monitor each run, and compare different
    versions. So that the most effective model is always identifiable and ready for
    deployment.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是MLflow发挥作用的地方。MLflow不仅仅用于实验，它在跟踪机器学习模型的生命周期中也扮演着至关重要的角色。它记录指标、工件和参数，确保每次版本更改都有文档记录，并且容易检索。通过MLflow，我们可以监控每次运行，并比较不同的版本。这样最有效的模型始终可以被识别并准备好进行部署。
- en: 'To integrate MLflow, first install MLflow (if it’s not already installed):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 若要集成MLflow，首先安装MLflow（如果尚未安装）：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then update the `main.py` file to include logging of parameters, metrics, and
    models. The code will look something like this:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 然后更新`main.py`文件以包含参数、指标和模型的日志记录。代码大致如下：
- en: '[PRE20]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Next, run the `main.py` script and view experiment details using the following
    command:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行`main.py`脚本，并使用以下命令查看实验详情：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Open the provided URL `http://127.0.0.1:5000` in a browser to explore and compare
    logged parameters, metrics, and models.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开提供的URL `http://127.0.0.1:5000`，探索并比较记录的参数、指标和模型。
- en: 'Example:'
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '![](../Images/2b0c5e829afeb61208545943899ba635.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b0c5e829afeb61208545943899ba635.png)'
- en: Example of MLflow tracking
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow跟踪示例
- en: '![](../Images/76fa71c6428e417e297efad96fbdc37b.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/76fa71c6428e417e297efad96fbdc37b.png)'
- en: Example of MLflow model comparison
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow模型比较示例
- en: By using MLflow, we can easily track model versions and manage changes, ensuring
    reproducibility and the ability to select the most effective model for deployment.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用MLflow，我们可以轻松地跟踪模型版本并管理变更，确保可重复性并能够选择最有效的模型进行部署。
- en: Before we move to the deployment part, let’s take a look at the `Makefile` and
    `config.yml` files that are present in the project. These files help simplify
    the workflow and ensure consistency in the project setup and configuration.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入部署部分之前，先看看项目中存在的`Makefile`和`config.yml`文件。这些文件有助于简化工作流程，并确保项目设置和配置的一致性。
- en: Makefile
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Makefile
- en: Using `make` file can be very helpful for managing Python projects. Many Data
    Scientists and ML Engineers don’t realize this but `make`can automate routine
    tasks such as setting up the environment, installing dependencies, model training,
    running tests, and cleaning up files, which saves time and reduces mistakes. `make`
    file is commonly used in software development because it helps manage long and
    complex commands that are difficult to remember.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`make`文件对于管理Python项目非常有帮助。许多数据科学家和机器学习工程师可能没有意识到这一点，但`make`可以自动化例行任务，如设置环境、安装依赖项、模型训练、运行测试和清理文件，这样可以节省时间并减少错误。`make`文件在软件开发中被广泛使用，因为它帮助管理那些难以记住的长命令和复杂命令。
- en: 'The `make` file in this project looks something like this:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中的`make`文件大致如下：
- en: '**bash:**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**bash:**'
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: For Windows (**cmd**), the file needs to be modified a little bit.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows（**cmd**），文件需要稍作修改。
- en: '[PRE23]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here’s a breakdown of each part:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是每个部分的简要说明：
- en: '**make setup**: Creates a virtual environment (`venv`), upgrades `pip`, and
    installs the required packages from `requirements.txt`. This ensures that all
    dependencies are consistently installed across different environments.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**make setup**：创建虚拟环境（`venv`），升级`pip`，并从`requirements.txt`安装所需的软件包。这样可以确保在不同环境中始终如一地安装所有依赖项。'
- en: '**make run**: Executes the `main.py` using the Python interpreter from the
    virtual environment.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**make run**：使用虚拟环境中的Python解释器执行`main.py`。'
- en: '**make mlflow**: Starts the `mlflow ui` for tracking experiments and model
    metrics.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**make mlflow**：启动`mlflow ui`，用于跟踪实验和模型指标。'
- en: '**make test**: This command runs all test cases defined in the project using
    `pytest`.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**make test**: 该命令使用`pytest`运行项目中定义的所有测试用例。'
- en: '**make clean**: Removes cache files such as `__pycache__`, `.pytest_cache`,
    and other temporary files to keep the directory clean.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**make clean**: 删除缓存文件，如 `__pycache__`、`.pytest_cache` 和其他临时文件，以保持目录的清洁。'
- en: '**make remove**: Removes the virtual environment (`venv`) completely from the
    project.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**make remove**: 完全删除项目中的虚拟环境（`venv`）。'
- en: 'Sample commands to run make file:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 make 文件的示例命令：
- en: '[PRE24]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Example:'
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '![](../Images/41fc482a0cc487231ca3bf1574c4647b.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41fc482a0cc487231ca3bf1574c4647b.png)'
- en: Example of Make Commands
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: Make 命令示例
- en: By using the `make` file, we can automate and streamline various tasks, ensuring
    consistency and reducing manual errors across different environments.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `make` 文件，我们可以自动化并简化各种任务，确保一致性并减少在不同环境中的人为错误。
- en: Config.yml
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Config.yml
- en: YAML files are a great way to store and manage configuration settings for Machine
    Learning models. They help manage data/model paths, model parameters, and other
    configurations, making it easier to experiment with different configurations and
    maintain code reusability.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: YAML 文件是存储和管理机器学习模型配置设置的好方法。它们有助于管理数据/模型路径、模型参数和其他配置，使得实验不同配置和保持代码复用变得更加容易。
- en: 'The `Config.yml` file looks like this:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`Config.yml` 文件如下所示：'
- en: '[PRE25]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Here''s what each part does:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是每个部分的作用：
- en: '**data**: Specifies the paths to the training, test, and production (latest)
    datasets. This ensures that the data locations are managed in one place and can
    be easily updated.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**data**: 指定了训练集、测试集和生产集（最新数据集）的路径。这样可以确保数据位置在一个地方进行管理，并且可以轻松更新。'
- en: '**train**: Contains parameters for splitting the data into training and test
    sets, such as `test_size`, `random_state`, and whether to `shuffle` the data.
    These settings help maintain consistent data splitting and reproducibility.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**train**: 包含了将数据分割为训练集和测试集的参数，如 `test_size`、`random_state` 以及是否 `shuffle`
    数据。这些设置有助于保持数据分割的一致性和可复现性。'
- en: '**model**: Defines the model name, its parameters, and the location for storing
    the trained model. This configuration enables easy switching between different
    models, offering flexibility in model selection.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**model**: 定义了模型名称、其参数以及存储训练模型的位置。此配置使得不同模型之间的切换变得容易，从而提供了模型选择的灵活性。'
- en: Using the `config.yml` file simplifies the management of model parameters and
    paths. It allows for easy experimentation with different configurations and models,
    improves reproducibility by keeping parameter settings consistent, and helps maintain
    cleaner code by separating configuration from code logic.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `config.yml` 文件简化了模型参数和路径的管理。它允许轻松实验不同的配置和模型，通过保持参数设置一致性来提高可复现性，并通过将配置与代码逻辑分离来帮助保持代码清晰。
- en: 'Example:'
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: In the following example model is changed to **‘**GradientBoostingClassifier’
    based on the configuration specified in the `config.yml` file.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，`model` 被更改为**‘**GradientBoostingClassifier**’**，这是根据 `config.yml` 文件中指定的配置进行的。
- en: '![](../Images/ece4352cdd5170ffa837850b64d05f68.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ece4352cdd5170ffa837850b64d05f68.png)'
- en: Example of config.yml file
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: config.yml 文件示例
- en: Now, let’s move on to the deployment part, where we will use FastAPI, Docker
    and AWS ECS. This setup will help us create a scalable and easily manageable application
    for serving machine learning model.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进入部署部分，在这里我们将使用 FastAPI、Docker 和 AWS ECS。此设置将帮助我们创建一个可扩展且易于管理的应用程序，用于服务机器学习模型。
- en: FastAPI
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FastAPI
- en: FastAPI is a modern framework for building APIs with Python. It is efficient
    for serving machine learning models due to its speed and simplicity.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 是一个现代化的框架，用于构建 Python API。由于其速度和简洁性，它在为机器学习模型提供服务时非常高效。
- en: 'First, install FastAPI and Uvicorn (if it’s not already installed):'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，安装 FastAPI 和 Uvicorn（如果尚未安装）：
- en: '[PRE26]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Define the FastAPI application and endpoints for serving the model in the `app.py`file.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `app.py` 文件中定义 FastAPI 应用程序和用于服务模型的端点。
- en: '[PRE27]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Then, test the FastAPI server locally at `[http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs.)`using
    the following command:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令在本地测试 FastAPI 服务器：[http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs)。
- en: '[PRE28]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Example:'
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '![](../Images/ff6022408bfec3ee5ca68f5b95dbdc63.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ff6022408bfec3ee5ca68f5b95dbdc63.png)'
- en: Example of FastAPI
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 示例
- en: Let’s now containerize this API using Docker.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用 Docker 容器化这个 API。
- en: Docker
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker
- en: Docker is an open-source platform that simplifies the deployment of software
    applications by packaging them into containers. These containers act as lightweight,
    portable units that include everything needed to run the application across different
    environments.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是一个开源平台，通过将软件应用程序打包成容器，简化了其部署过程。这些容器充当轻量级、可移植的单元，包含运行应用程序所需的所有内容，可以在不同环境中运行应用程序。
- en: '**Why Use Containers?**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么使用容器？**'
- en: Containers offer a streamlined way to isolate and deploy applications, ensuring
    they run consistently across various environments, whether on a developer’s laptop
    or the cloud. This isolation enhances portability and resource efficiency, making
    docker an essential tool for modern software development.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 容器提供了一种简化的方式来隔离和部署应用程序，确保它们在各种环境中始终如一地运行，无论是在开发者的笔记本电脑上，还是在云端。通过这种隔离性，容器增强了可移植性和资源效率，使
    Docker 成为现代软件开发的必备工具。
- en: To install Docker, follow the instructions on the Docker [website](https://docs.docker.com/engine/install/).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Docker，请按照 Docker [官方网站](https://docs.docker.com/engine/install/)上的说明进行操作。
- en: 'Now, create a `Dockerfile` in the project directory to build the Docker image:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在项目目录中创建一个 `Dockerfile` 来构建 Docker 镜像：
- en: '[PRE29]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, build a Docker image using the following command:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下命令构建 Docker 镜像：
- en: '[PRE30]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Example:'
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '![](../Images/6a4b94e713432e4dd043e616c9252956.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a4b94e713432e4dd043e616c9252956.png)'
- en: Example of docker build
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Docker build 示例
- en: 'Finally, run the Docker container to test the API at `[http://localhost:80/predict](http://localhost:8000/predict)`:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，运行 Docker 容器以测试 API，访问 `[http://localhost:80/predict](http://localhost:8000/predict)`：
- en: '[PRE31]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Example:'
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '![](../Images/987e60966002426488027646f2a2da9c.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/987e60966002426488027646f2a2da9c.png)'
- en: Example of docker run
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 运行示例
- en: 'To stop a running Docker container, find the container ID or name of the running
    container using the following command:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止运行中的 Docker 容器，请使用以下命令查找正在运行的容器的 ID 或名称：
- en: '[PRE32]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Once the container ID or name is identified, it can be stopped using the following
    command:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦识别出容器的 ID 或名称，就可以使用以下命令停止该容器：
- en: '[PRE33]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Example:'
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '![](../Images/17f265eb272f9f80a8365c4045e2be0e.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/17f265eb272f9f80a8365c4045e2be0e.png)'
- en: Example of stopping running container
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 停止运行中的容器示例
- en: 'Now, to push the Docker image to Docker Hub, follow these steps:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤将 Docker 镜像推送到 Docker Hub：
- en: 'List all Docker images on the system along with their tags and find the correct
    image to be pushed:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 列出系统中所有 Docker 镜像及其标签，并找到正确的镜像进行推送：
- en: '[PRE34]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Tag the image with the desired repository and name:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 使用所需的仓库和名称标记镜像：
- en: '[PRE35]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Upload the tagged image to Docker Hub using the following command:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令将标记的镜像上传到 Docker Hub：
- en: '[PRE36]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This command will upload the image to the specified repository on [Docker Hub](https://hub.docker.com/r/prsdm17/ml-fastapi).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将把镜像上传到指定的 [Docker Hub](https://hub.docker.com/r/prsdm17/ml-fastapi) 仓库。
- en: 'Example:'
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '![](../Images/6cbeca077321b30125b63f03cf8c8cca.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6cbeca077321b30125b63f03cf8c8cca.png)'
- en: Example of Docker Push Commands
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Push 命令示例
- en: '![](../Images/cd391dafbbf7faacc837a7544a304b52.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cd391dafbbf7faacc837a7544a304b52.png)'
- en: Example of Docker Hub Repository
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Hub 仓库示例
- en: Now that we have pushed the Docker image to [Docker Hub](https://hub.docker.com/r/prsdm17/ml-fastapi),
    we can move on to deploy it on AWS Elastic Container Service (ECS).
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经将 Docker 镜像推送到 [Docker Hub](https://hub.docker.com/r/prsdm17/ml-fastapi)，可以继续在
    AWS 弹性容器服务（ECS）上进行部署。
- en: AWS ECS
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS ECS
- en: 'AWS ECS is a fully managed container orchestration service that allows running
    and scaling Docker containers on AWS easily. It supports both EC2 and Fargate
    launch types. Here is a step-by-step guide:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: AWS ECS 是一个完全托管的容器编排服务，允许在 AWS 上轻松运行和扩展 Docker 容器。它支持 EC2 和 Fargate 启动类型。以下是一步一步的指南：
- en: '**First, create an ECS Cluster:**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**首先，创建一个 ECS 集群：**'
- en: '**Step 1:** Log in to the [AWS](https://aws.amazon.com/console/) account then
    go to the ECS service and create a new ECS cluster by selecting “Create Cluster.”'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 1：** 登录到 [AWS](https://aws.amazon.com/console/) 账户，然后进入 ECS 服务，选择“创建集群”来创建一个新的
    ECS 集群。'
- en: '**Step 2:** Give a name to the cluster, select AWS Fargate (serverless), and
    click on “Create.” (This will take a few minutes.)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 2：** 给集群命名，选择 AWS Fargate（无服务器），然后点击“创建”。（这将需要几分钟时间。）'
- en: '![](../Images/73c0a880af4734335fbe9f7195681157.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/73c0a880af4734335fbe9f7195681157.png)'
- en: Example of AWS Cluster
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 集群示例
- en: '**Then, define a Task Definition:**'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**接下来，定义任务定义：**'
- en: '**Step 1:** In the ECS console, go to “Task Definitions” and create a new task
    definition.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 1：** 在 ECS 控制台中，进入“任务定义”并创建一个新的任务定义。'
- en: '**Step 2:** Give the task a name and configure settings such as memory and
    CPU requirements.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 2：** 给任务命名，并配置内存和 CPU 等要求。'
- en: '**Step 3:** Docker image URL from Docker Hub in the container definitions and
    keep the container port mappings default. Click on “Create.”'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 3：** 在容器定义中填写来自 Docker Hub 的 Docker 镜像 URL，并保持容器端口映射为默认值。点击“创建”。'
- en: '![](../Images/19ce792b71f55a9c6a2631e354032621.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/19ce792b71f55a9c6a2631e354032621.png)'
- en: Example of Task Definition
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 任务定义示例
- en: '**After that, add a Security Group:**'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '**之后，添加一个安全组：**'
- en: '**Step 1:** Go to EC2, then in Networks and Security, select Security Groups
    and click on “Create Security Group.” Give it a name and description.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 1：** 前往 EC2，在网络与安全中选择安全组并点击“创建安全组”。为其命名并填写描述。'
- en: '**Step 2:** In Inbound Rules, select the type HTTP and source Anywhere-IPv4
    first, then do the same for Anywhere-IPv6\. Click “Create Security Group.”'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 2：** 在入站规则中，首先选择 HTTP 类型并设置来源为 Anywhere-IPv4，然后对 Anywhere-IPv6 做相同的设置。点击“创建安全组”。'
- en: '![](../Images/c84e4e7149e7fe304b8dc251c35ec1af.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c84e4e7149e7fe304b8dc251c35ec1af.png)'
- en: Example of AWS security Group
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 安全组示例
- en: '**Then, create a Service:**'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**然后，创建服务：**'
- en: '**Step 1:** Go to the ECS cluster that was created and add a new service.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 1：** 前往已创建的 ECS 集群并添加一个新服务。'
- en: '**Step 2:** Select the ‘launch type’ compute options and ‘Fargate’ launch type.
    Then select the task definition that was created and give the service name in
    the deployment configuration.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 2：** 选择“启动类型”计算选项并选择“Fargate”启动类型。然后选择已创建的任务定义，并在部署配置中输入服务名称。'
- en: '**Step 3:** Finally, select the security group created earlier under Networking
    and click “Create.” (This will take 5–8 minutes to create the service.)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤 3：** 最后，在网络设置下选择之前创建的安全组，然后点击“创建”。（创建服务大约需要 5-8 分钟。）'
- en: '![](../Images/a98607ff0fc23752d7c68c3b904ba920.png)'
  id: totrans-249
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a98607ff0fc23752d7c68c3b904ba920.png)'
- en: Example of services
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 服务示例
- en: '**And Finally, Access the Running Service:**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**最后，访问正在运行的服务：**'
- en: 'Once the service is deployed, go to the ECS cluster’s “Services” tab. Find
    service, go to the “Tasks” tab, and select a running task. Open the public IP
    address of the task to access the FastAPI application. It will look something
    like this:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 服务部署完成后，进入 ECS 集群的“服务”选项卡。找到该服务，进入“任务”选项卡，选择一个正在运行的任务。打开该任务的公共 IP 地址，即可访问 FastAPI
    应用。它会显示如下内容：
- en: '![](../Images/2e699102eb90f96d1c722da9f5ba8dfb.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2e699102eb90f96d1c722da9f5ba8dfb.png)'
- en: Example of Public IP
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 公共 IP 示例
- en: '![](../Images/c29015d8e8feecab646eeb5264dd2d3c.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c29015d8e8feecab646eeb5264dd2d3c.png)'
- en: Example of deployed service
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 部署的服务示例
- en: By following these steps, we can deploy the FastAPI application in a Docker
    container to AWS ECS. This enables a scalable and manageable environment for serving
    machine learning model.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行这些步骤，我们可以将 FastAPI 应用部署到 Docker 容器中，并在 AWS ECS 上运行。这为机器学习模型提供了一个可扩展和可管理的环境。
- en: '**Note:** We can also add Elastic Load Balancing (ELB) if needed.'
  id: totrans-258
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 如果需要，我们还可以添加弹性负载均衡（ELB）。'
- en: After successfully deploying the model, the next step is to continuously monitor
    the model in production to ensure it performs well on production data. Model monitoring
    involves evaluating various factors such as server metrics (e.g., CPU usage, memory
    consumption, latency), data quality, data drift, target drift, concept drift,
    performance metrics, etc.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 模型成功部署后，下一步是持续监控生产环境中的模型，以确保其在生产数据上表现良好。模型监控涉及评估多个因素，如服务器指标（例如 CPU 使用率、内存消耗、延迟）、数据质量、数据漂移、目标漂移、概念漂移、性能指标等。
- en: To keep it beginner-friendly, we are going to focus on a few methods such as
    data drift, target drift, and data quality using Evidently AI.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持对初学者友好，我们将重点介绍一些方法，例如数据漂移、目标漂移和使用 Evidently AI 进行数据质量监控。
- en: Evidently AI
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Evidently AI
- en: Evidently AI is a good tool for monitoring model performance, detecting data
    drift, and data quality over time. It helps ensure that the model remains accurate
    and reliable as new data comes in. Evidently AI provides detailed insights into
    how model performance evolves and identifies any significant shifts in the data
    distribution, which is crucial for maintaining model accuracy in production environments.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: Evidently AI 是一个很好的工具，用于监控模型性能、检测数据漂移和数据质量随时间的变化。它有助于确保模型在新数据输入时依然准确可靠。Evidently
    AI 提供了模型性能变化的详细洞察，并识别数据分布的任何显著变化，这对于在生产环境中维持模型的准确性至关重要。
- en: 'To install Evidently AI use the following command:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 Evidently AI，请使用以下命令：
- en: '[PRE37]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Next, run `monitor.ipynb` file to detect data quality, data drifts, and target
    drifts. The file looks something like this:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，运行 `monitor.ipynb` 文件以检测数据质量、数据漂移和目标漂移。该文件大致如下：
- en: '[PRE38]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Example of Test data:'
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试数据示例：
- en: '![](../Images/909559efedea6b04a1634846dc5d2385.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/909559efedea6b04a1634846dc5d2385.png)'
- en: Example of Test data quality and drift detect
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 测试数据质量和漂移检测示例
- en: 'Example of Production data:'
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生产数据示例：
- en: '![](../Images/1f9483ebcf1b453e4e82edb3bd5c0699.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1f9483ebcf1b453e4e82edb3bd5c0699.png)'
- en: Example of Production data quality and drift detect
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 生产数据质量和漂移检测示例
- en: Run the monitoring script regularly on incoming data to generate reports on
    data drift and model performance. These reports can help us identify when retraining
    is needed and ensure that our model remains accurate and reliable over time.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 定期运行监控脚本，处理进入的数据，生成关于数据漂移和模型性能的报告。这些报告可以帮助我们识别何时需要重新训练，并确保我们的模型随着时间推移保持准确和可靠。
- en: With this step, we have successfully completed the MLOps project implementation.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步中，我们成功完成了 MLOps 项目的实施。
- en: Summary
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this article, we covered basic MLOps practices and tools through a hands-on
    project. We versioned data with DVC, tracked and registered models using MLflow,
    and deployed a model with FastAPI, Docker, and AWS ECR. We also set up model monitoring
    (data quality, data drift, and target drift) with Evidently AI. These steps provide
    a solid foundation for managing machine learning projects using MLOps tools and
    practices, from development to production. As you gain experience with these tools
    and techniques, you can explore more advanced automation and orchestration methods
    to enhance your MLOps workflows.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们通过一个实践项目介绍了基本的 MLOps 实践和工具。我们使用 DVC 对数据进行了版本控制，利用 MLflow 跟踪和注册了模型，并通过
    FastAPI、Docker 和 AWS ECR 部署了模型。我们还通过 Evidently AI 设置了模型监控（数据质量、数据漂移和目标漂移）。这些步骤为使用
    MLOps 工具和实践从开发到生产管理机器学习项目提供了坚实的基础。随着你对这些工具和技术的熟悉，你可以探索更高级的自动化和编排方法，以增强你的 MLOps
    工作流。
- en: Reference
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Machine Learning Operations (MLOps): Overview, Definition, and Architecture.
    ([https://arxiv.org/pdf/2205.02302](https://arxiv.org/pdf/2205.02302))'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 机器学习操作（MLOps）：概述、定义和架构。([https://arxiv.org/pdf/2205.02302](https://arxiv.org/pdf/2205.02302))
- en: 'Data Version Control (DVC): [https://dvc.org/doc](https://dvc.org/doc)'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据版本控制（DVC）：[https://dvc.org/doc](https://dvc.org/doc)
- en: 'MLflow: [https://mlflow.org/docs/latest/index.html](https://mlflow.org/docs/latest/index.html)'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'MLflow: [https://mlflow.org/docs/latest/index.html](https://mlflow.org/docs/latest/index.html)'
- en: 'FastAPI: [https://fastapi.tiangolo.com/tutorial/](https://fastapi.tiangolo.com/tutorial/)'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'FastAPI: [https://fastapi.tiangolo.com/tutorial/](https://fastapi.tiangolo.com/tutorial/)'
- en: 'Docker: [https://docs.docker.com/](https://docs.docker.com/)'
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Docker: [https://docs.docker.com/](https://docs.docker.com/)'
- en: 'Evidently AI: [https://docs.evidentlyai.com/tutorials-and-examples/examples](https://docs.evidentlyai.com/tutorials-and-examples/examples)'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Evidently AI: [https://docs.evidentlyai.com/tutorials-and-examples/examples](https://docs.evidentlyai.com/tutorials-and-examples/examples)'
- en: Subscribe for free to get notified when I publish a new article.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 免费订阅，以便在我发布新文章时收到通知。
- en: '[](https://medium.com/@prasadmahamulkar/subscribe?source=post_page-----a5686bfe02b2--------------------------------)
    [## Get an email whenever Prasad Mahamulkar publishes'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@prasadmahamulkar/subscribe?source=post_page-----a5686bfe02b2--------------------------------)
    [## 每当 Prasad Mahamulkar 发布时，获取电子邮件'
- en: Get an email whenever Prasad Mahamulkar publishes Learn about data science,
    machine learning, and more. By signing up…
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每当 Prasad Mahamulkar 发布时，获取电子邮件，了解数据科学、机器学习等内容。通过注册…
- en: medium.com](https://medium.com/@prasadmahamulkar/subscribe?source=post_page-----a5686bfe02b2--------------------------------)
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: medium.com](https://medium.com/@prasadmahamulkar/subscribe?source=post_page-----a5686bfe02b2--------------------------------)
- en: You can also find me on [LinkedIn](https://www.linkedin.com/in/prasad-mahamulkar/)
    and [Twitter](https://x.com/prsdm_)!
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在 [LinkedIn](https://www.linkedin.com/in/prasad-mahamulkar/) 和 [Twitter](https://x.com/prsdm_)
    上找到我！
