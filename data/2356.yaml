- en: Depth-First Search — Fundamental Graph Algorithm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深度优先搜索 — 基本图算法
- en: 原文：[https://towardsdatascience.com/deep-first-search-fundamental-graph-algorithm-d22991d5c144?source=collection_archive---------16-----------------------#2024-09-26](https://towardsdatascience.com/deep-first-search-fundamental-graph-algorithm-d22991d5c144?source=collection_archive---------16-----------------------#2024-09-26)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/deep-first-search-fundamental-graph-algorithm-d22991d5c144?source=collection_archive---------16-----------------------#2024-09-26](https://towardsdatascience.com/deep-first-search-fundamental-graph-algorithm-d22991d5c144?source=collection_archive---------16-----------------------#2024-09-26)
- en: Python recursive implementation of DFS algorithm with examples and step-by-step
    explanations
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 中 DFS 算法的递归实现，并附带示例和逐步讲解
- en: '[](https://robertkwiatkowski01.medium.com/?source=post_page---byline--d22991d5c144--------------------------------)[![Robert
    Kwiatkowski](../Images/94ec06b3647aef0b65fce2dd97972318.png)](https://robertkwiatkowski01.medium.com/?source=post_page---byline--d22991d5c144--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d22991d5c144--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d22991d5c144--------------------------------)
    [Robert Kwiatkowski](https://robertkwiatkowski01.medium.com/?source=post_page---byline--d22991d5c144--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://robertkwiatkowski01.medium.com/?source=post_page---byline--d22991d5c144--------------------------------)[![Robert
    Kwiatkowski](../Images/94ec06b3647aef0b65fce2dd97972318.png)](https://robertkwiatkowski01.medium.com/?source=post_page---byline--d22991d5c144--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d22991d5c144--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d22991d5c144--------------------------------)
    [Robert Kwiatkowski](https://robertkwiatkowski01.medium.com/?source=post_page---byline--d22991d5c144--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d22991d5c144--------------------------------)
    ·5 min read·Sep 26, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d22991d5c144--------------------------------)
    ·阅读时间 5 分钟·2024年9月26日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e102239d6a800cae7b1add7f322d78db.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e102239d6a800cae7b1add7f322d78db.png)'
- en: Photo by [Shubham Dhage](https://unsplash.com/@theshubhamdhage?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Shubham Dhage](https://unsplash.com/@theshubhamdhage?utm_source=medium&utm_medium=referral)
    提供，来源：[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '**Introduction**'
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: In computer science, algorithms are the backbone of various useful technologies
    (like AI), helping us efficiently tackle a wide range of real-life challenges.
    Among these, graph algorithms hold a special place due to their applicability
    as many problems can be modeled using graphs. A graph is a collection of nodes
    (or vertices) connected by edges, representing relationships (or connections)
    between nodes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中，算法是各种有用技术（如人工智能）的核心，帮助我们高效地解决一系列现实生活中的挑战。其中，图算法因其广泛的应用而占有特殊地位，因为许多问题可以通过图来建模。图是由节点（或顶点）和连接节点的边组成，表示节点之间的关系（或连接）。
- en: 'Some examples:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一些例子：
- en: '**Social Networks:** In a social network, like Facebook or Instagram, users
    can be represented as nodes, and friendships or connections between them are edges.
    [[1](https://www.researchgate.net/publication/368287579_Graph_Models_of_Social_Media_Network_As_Applied_to_Facebook_and_Facebook_Messenger_Groups/citation/download)]'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社交网络**：在社交网络中，如 Facebook 或 Instagram，用户可以被表示为节点，用户之间的友谊或连接则是边。[ [1](https://www.researchgate.net/publication/368287579_Graph_Models_of_Social_Media_Network_As_Applied_to_Facebook_and_Facebook_Messenger_Groups/citation/download)
    ]'
- en: '**Route Planning and Navigation:** In maps, locations (cities, intersections,
    or landmarks) are modeled as nodes, and roads or paths between them are edges.
    [[2](https://www.sciencedirect.com/science/article/pii/S1877050920315799)]'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路线规划与导航**：在地图中，地点（城市、交叉口或地标）被建模为节点，而它们之间的道路或路径则是边。[ [2](https://www.sciencedirect.com/science/article/pii/S1877050920315799)
    ]'
- en: '**Web Crawling**: The web can be seen as a massive graph where web pages are
    nodes, and hyperlinks between them are edges.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网页爬取**：互联网可以看作一个庞大的图，其中网页是节点，它们之间的超链接则是边。'
- en: '**Scheduling and Task Management**: Many task dependencies can be modeled as
    directed acyclic graphs (DAGs), where tasks are nodes and dependencies between
    them are edges.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调度与任务管理**：许多任务之间的依赖关系可以建模为有向无环图（DAGs），其中任务是节点，任务之间的依赖关系是边。'
- en: '**Network Connectivity**: In computer networks, devices (routers, computers)
    are nodes, and communication links are edges.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络连通性**：在计算机网络中，设备（路由器、计算机）是节点，通信链接是边。'
- en: One of the fundamental algorithms used to traverse or explore graphs is **Depth
    First Search (DFS)**. It is used to explore (visit) all nodes in the graph. Another,
    complementary and fundamental algorithm to accomplish that goal is called Breadth
    First Search (BFS) which will be a subject of a separate article.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 用于遍历或探索图的基本算法之一是 **深度优先搜索（DFS）**。它用于探索（访问）图中的所有节点。另一种补充且基础的算法是广度优先搜索（BFS），这将是另一个单独文章的主题。
- en: Here, we will dive into how DFS works, with simple code, intuitive examples,
    and some cool animations showing you how this algorithm works step-by-step.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将深入了解 DFS 是如何工作的，通过简单的代码、直观的例子以及一些很酷的动画，逐步展示这个算法是如何执行的。
- en: 'DFS can be implemented in two ways: iterative and recursive. Here, I’ll show
    you how to do it recursively as IMHO it is easier to understand and to code. This
    is also a fantastic opportunity to learn how recursion works if you’re not familiar
    with it yet. DFS implementation will be in pure Python.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: DFS 可以通过两种方式实现：迭代式和递归式。这里，我将向你展示如何通过递归实现，因为在我看来，递归更容易理解和编码。如果你还不熟悉递归，这也是一个学习递归如何工作的绝佳机会。DFS
    实现将使用纯 Python 代码。
- en: Below there is a code for the DFS algorithm itself.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实现 DFS 算法的代码。
- en: 'There are three inputs to the function: a set of visited nodes (usually initially
    empty), a graph definition and a starting node. The logic is simple, yet effective:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 函数有三个输入：一个已访问节点的集合（通常最初为空）、一个图的定义和一个起始节点。逻辑简单而有效：
- en: 1\. First, we check if we have visited a given node already
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 首先，我们检查是否已经访问了给定节点
- en: a. If yes, skip checking its neighbors
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: a. 如果是，跳过检查它的邻居
- en: b. If no, print the node and start visiting its neighbors (the “for loop”)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: b. 如果没有，打印该节点并开始访问它的邻居（“for 循环”）
- en: 2\. Repeat, till all nodes are in the list of visited nodes
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 重复，直到所有节点都在已访问节点列表中
- en: 'In this case, the function returns None (effectively nothing) because it prints
    the visited nodes and writes them to the set defined externally. We can change
    its behavior to return a set of all visited nodes without printing values like
    that:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，函数返回 None（即什么都不返回），因为它打印了已访问的节点并将它们写入外部定义的集合。我们可以更改它的行为，使其返回一个包含所有已访问节点的集合，而不是像这样打印值：
- en: '**Example 1**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 1**'
- en: First, we must define our exemplary graph. For this, we’ll use the adjacency
    matrix as a Python dictionary. In each key-value pair, a key is a node, and a
    value is a list of nodes connected to it (neighbors).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须定义我们的示例图。为此，我们将使用邻接矩阵作为 Python 字典。在每个键值对中，键是一个节点，值是与该节点连接的节点列表（邻居）。
- en: Below is the code creating the first exemplary graph in the computer memory.
    In this case, it is a directed graph (for clarity and simplicity) but DFS works
    well for undirected ones too.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是创建第一个示例图的代码。在这种情况下，它是一个有向图（为了清晰和简便），但 DFS 同样适用于无向图。
- en: 'After running a function call command the output is a series of nodes that
    were visited:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 执行函数调用命令后，输出将是已访问的节点系列：
- en: '![](../Images/e42a0daac1b8eae9d701370902efba4c.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e42a0daac1b8eae9d701370902efba4c.png)'
- en: '*image by author*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片来自作者*'
- en: 'Or with the alternative version of the code like below. Here we can just make
    a small change to the input not to use any global variable and pass an empty set
    directly. Output then is:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 或者使用下面的替代版本的代码。在这里，我们可以通过小小的改变输入，避免使用任何全局变量，而直接传递一个空集合。输出将是：
- en: '![](../Images/2be81efa6ee462192689ee59ede3e39f.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2be81efa6ee462192689ee59ede3e39f.png)'
- en: '*image by author*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片来自作者*'
- en: Let’s visualize how a functions stack and a final set is being built step-by-step.
    This is depicted on the animation below.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们可视化地展示函数栈和最终集合是如何一步步构建的。下面的动画展示了这一过程。
- en: '![](../Images/936f1ed77a81e5cf952a270f656fcdb3.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/936f1ed77a81e5cf952a270f656fcdb3.png)'
- en: '*image by author*'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图片来自作者*'
- en: '**Example 2**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 2**'
- en: In this example, we will build and traverse a special kind of graph — a decision
    tree. A definition of the graph is below.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将构建并遍历一种特殊类型的图——决策树。图的定义如下。
- en: 'After running the DFS on this graph the output is:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在对这个图执行 DFS 后，输出将是：
- en: '![](../Images/be4a9512a550c4ff4c0ba87c7cd8e4bb.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/be4a9512a550c4ff4c0ba87c7cd8e4bb.png)'
- en: image by author
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: The animation below shows what the graph looks like and how DFS traversed it.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 下方的动画展示了图形的样子以及深度优先搜索（DFS）如何遍历它。
- en: '![](../Images/7fa20b9ce3e24f8cadf6ec4f00bc1908.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7fa20b9ce3e24f8cadf6ec4f00bc1908.png)'
- en: DFS traversing a tree; image by author
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: DFS遍历一棵树；图片来源：作者
- en: '**Summary**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Depth First Search is an essential algorithm in graph theory, widely used across
    multiple domains from social networks to decision trees. Its recursive nature
    makes it easy to understand and implement, as demonstrated by the examples in
    this article. The simplicity of DFS, along with its ability to efficiently explore
    all nodes in a graph, makes it a powerful tool for solving various computational
    problems. Understanding how DFS works lays the groundwork for mastering other
    algorithms such as Breadth First Search (BFS) and path-finding algorithms like
    Dijkstra’s or A*.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 深度优先搜索（DFS）是图论中一个重要的算法，广泛应用于多个领域，从社交网络到决策树。它的递归性质使得理解和实现变得简单，正如本文中的示例所展示的那样。DFS的简单性以及它能够高效地遍历图中的所有节点，使其成为解决各种计算问题的强大工具。理解DFS的工作原理为掌握其他算法，如广度优先搜索（BFS）和路径寻找算法（如Dijkstra或A*）打下了基础。
- en: Try experimenting with larger and more complex graphs, and explore how it behaves
    with different data structures. In future articles, we will explore other traversal
    methods like BFS and further investigate their use cases, advantages, and limitations.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用更大更复杂的图形进行实验，并探索它在不同数据结构下的表现。在未来的文章中，我们将探讨其他遍历方法，如广度优先搜索（BFS），并进一步研究它们的使用案例、优点和局限性。
- en: Keep practicing and pushing your limits, and soon graph algorithms like DFS
    will become second nature. Happy coding!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 继续练习并挑战自己的极限，很快像深度优先搜索（DFS）这样的图算法就会成为你的第二天性。祝编程愉快！
- en: References
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] Tsok, Samuel & Yakubu, Hosea & Solomon, Rwat. (2023). Graph Models of Social
    Media Network As Applied to Facebook and Facebook Messenger Groups. International
    Journal on Computer Science and Engineering. Vol. 9\. Pg 1\. 10.56201/ijcsmt.v9.no1.2023.pg1.12\.
    [[link](https://www.researchgate.net/publication/368287579_Graph_Models_of_Social_Media_Network_As_Applied_to_Facebook_and_Facebook_Messenger_Groups)]'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] Tsok, Samuel & Yakubu, Hosea & Solomon, Rwat. (2023). 社交媒体网络的图模型及其在Facebook和Facebook
    Messenger群组中的应用。《国际计算机科学与工程杂志》。第9卷，第1页，10.56201/ijcsmt.v9.no1.2023.pg1.12。[[链接](https://www.researchgate.net/publication/368287579_Graph_Models_of_Social_Media_Network_As_Applied_to_Facebook_and_Facebook_Messenger_Groups)]'
- en: '[2] Tianlun Dai, Wenchao Zheng, Jiayue Sun, Cun Ji, Tao Zhou, Mingtong Li,
    Wei Hu, Ziqiang Yu, Continuous Route Planning over a Dynamic Graph in Real-Time,
    Procedia Computer Science, Volume 174, 2020 [[link](https://www.sciencedirect.com/science/article/pii/S1877050920315799)]'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] Tianlun Dai, Wenchao Zheng, Jiayue Sun, Cun Ji, Tao Zhou, Mingtong Li,
    Wei Hu, Ziqiang Yu, 实时动态图上的连续路线规划，《计算机科学文集》，第174卷，2020 [[链接](https://www.sciencedirect.com/science/article/pii/S1877050920315799)]'
