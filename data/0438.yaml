- en: Particle Swarm Optimization (PSO) from scratch. Simplest explanation in python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 粒子群优化（PSO）从零开始。用 Python 实现的最简单解释
- en: 原文：[https://towardsdatascience.com/what-the-hell-is-particle-swarm-optimization-pso-simplest-explanation-in-python-be296fc3b1ab?source=collection_archive---------3-----------------------#2024-02-16](https://towardsdatascience.com/what-the-hell-is-particle-swarm-optimization-pso-simplest-explanation-in-python-be296fc3b1ab?source=collection_archive---------3-----------------------#2024-02-16)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/what-the-hell-is-particle-swarm-optimization-pso-simplest-explanation-in-python-be296fc3b1ab?source=collection_archive---------3-----------------------#2024-02-16](https://towardsdatascience.com/what-the-hell-is-particle-swarm-optimization-pso-simplest-explanation-in-python-be296fc3b1ab?source=collection_archive---------3-----------------------#2024-02-16)
- en: How to implement PSO
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现 PSO
- en: '[](https://medium.com/@alexroz?source=post_page---byline--be296fc3b1ab--------------------------------)[![Aleksei
    Rozanov](../Images/748b69bfaccf39c9aa568a9e6f41eec3.png)](https://medium.com/@alexroz?source=post_page---byline--be296fc3b1ab--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--be296fc3b1ab--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--be296fc3b1ab--------------------------------)
    [Aleksei Rozanov](https://medium.com/@alexroz?source=post_page---byline--be296fc3b1ab--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@alexroz?source=post_page---byline--be296fc3b1ab--------------------------------)[![Aleksei
    Rozanov](../Images/748b69bfaccf39c9aa568a9e6f41eec3.png)](https://medium.com/@alexroz?source=post_page---byline--be296fc3b1ab--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--be296fc3b1ab--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--be296fc3b1ab--------------------------------)
    [Aleksei Rozanov](https://medium.com/@alexroz?source=post_page---byline--be296fc3b1ab--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--be296fc3b1ab--------------------------------)
    ·7 min read·Feb 16, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--be296fc3b1ab--------------------------------)
    ·7 分钟阅读·2024年2月16日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d042439b9fca217c92cc9f23072a8af7.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d042439b9fca217c92cc9f23072a8af7.png)'
- en: Photo by [James Wainscoat](https://unsplash.com/@tumbao1949?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自 [James Wainscoat](https://unsplash.com/@tumbao1949?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Before talking about *swarms* and *particles*, let’s briefly discuss **optimization**
    itself. Basically, optimization is the process of finding the minima or maxima
    of some function. For instance, when you need to get to your office ASAP and think
    about which way is the fastest, you’re optimizing your route (in this case it’s
    a function). In math, there are literally hundreds of ways of optimization, and
    among them a sub-group called nature-inspired exists.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈论 *群体* 和 *粒子* 之前，让我们简要讨论一下**优化**本身。基本上，优化是寻找某个函数的最小值或最大值的过程。例如，当你急于赶到办公室，并思考哪条路最快时，你正在优化你的路线（在这种情况下，它是一个函数）。在数学中，有数百种优化方法，其中有一类叫做自然启发式方法。
- en: '**Nature-inspired algorithms** are based on phenomena which draw inspiration
    from natural phenomena or processes. Among the most popular ones are Genetic Algorithm,
    Cuckoo Search, Ant Colony and **Particle Swarm Optimization** [**[1]**](https://www.marksmannet.com/RobertMarks/Classes/ENGR5358/Papers/pso_bySHI.pdf)
    **or PSO**.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**自然启发式算法**基于从自然现象或过程汲取灵感的现象。其中最受欢迎的包括遗传算法、布谷鸟搜索、蚁群算法和**粒子群优化** [**[1]**](https://www.marksmannet.com/RobertMarks/Classes/ENGR5358/Papers/pso_bySHI.pdf)
    **或 PSO**。'
- en: This tutorial is implemented in python using only *numpy* and *matplotlib*.
    To follow up you can use [this notebook](https://github.com/alexxxroz/Medium/blob/main/PSO_explained.ipynb).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用仅包含 *numpy* 和 *matplotlib* 的 Python 实现。你可以使用 [这个笔记本](https://github.com/alexxxroz/Medium/blob/main/PSO_explained.ipynb)进行后续学习。
- en: Let’s start with creating a function which we’ll be optimizing using PSO.
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们从创建一个我们将用 PSO 优化的函数开始。
- en: If someone asks me to think about functions, the first thing that comes to my
    mind (it almost reflexive😂) is parabola. So let’s plot it firstly.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人让我思考函数，首先浮现在我脑海中的（几乎是下意识的😂）就是抛物线。那么我们先画出它。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/fcbfbeae100b6d28c0d7595cb7ac626e.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fcbfbeae100b6d28c0d7595cb7ac626e.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自 [作者](https://medium.com/@alexroz)。
- en: 'In case of this function, y=x², the goal of optimization is to find the point
    x=0, so y has the lowest value possible — 0\. But it’s too easy. Let’s overcomplicate
    everything, but stay in **2D** space. I decided to use the following system of
    equations:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个函数，y=x²，优化的目标是找到点x=0，使得y的值尽可能低——即为0。但这太简单了。让我们把一切弄得更复杂一些，但仍然保持在**二维**空间。我决定使用以下方程组：
- en: '![](../Images/9e910a9f11cfc5b39085024fa10206c7.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9e910a9f11cfc5b39085024fa10206c7.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: 'Or in code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 或者用代码表示：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/085120e0e4cf19b81720c0551f3ce42e.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/085120e0e4cf19b81720c0551f3ce42e.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: 'As you can see I intentionally made two minima: global (left) and local (right).
    Often when optimizing a function, we need to find the lowest (greatest) value
    possible, i.e. global minimum (maximum), so I wanted the PSO algorithm to face
    the challenge of two extrema.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我故意设置了两个极小值：全局（左）和局部（右）。在优化一个函数时，我们通常需要找到最小（最大）值，即全局最小值（最大值），因此我希望PSO算法面临两个极值的挑战。
- en: Now let’s discuss the algorithm itself.
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现在让我们讨论一下算法本身。
- en: 'The underlying idea is based on two terms: **population** and **swarm**. Swarm
    consists of populations which comprise particles.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 基本思想是基于两个术语：**种群**和**群体**。群体由包含粒子的种群组成。
- en: particle — — — > population — — → swarm
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: particle — — — > population — — → swarm
- en: What is a particle in this case then? A particle is a possible solution. Imagine
    that you’re investigating a crime and a bunch of suspects are standing in front
    of you. All of them are “candidates” to be convicted. But in the case of particles,
    the candidates are cooperating and have social influence.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，粒子在这里是什么呢？粒子是一个可能的解。想象一下，你正在调查一起犯罪事件，一堆嫌疑人站在你面前。所有人都是“候选人”可以被定罪。但在粒子的情况下，这些候选人是合作的，并且具有社会影响。
- en: 'The particles themselves has two features — **position** and **velocity** (or
    speed; our particles are flying, right?). So these particles iteratively, one
    step at a time, change their positions. Their velocity is defined by the following
    formula:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子本身有两个特征——**位置**和**速度**（或者说是速度；我们的粒子在飞行，对吧？）。所以这些粒子通过逐步迭代，不断改变它们的位置。它们的速度由以下公式定义：
- en: '![](../Images/910a6732701e5d166f2e8af3748177f9.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/910a6732701e5d166f2e8af3748177f9.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: As you can see, there are three components. The first is **inertia**. This is
    the velocity of the particle from the previous iteration multiplied by an arbitrary
    weight **w**. So it basically defines how much the previous speed of the particle
    affects the current one.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这里有三个组成部分。第一个是**惯性**。它是上一轮迭代中粒子的速度与一个任意权重**w**的乘积。所以它基本上定义了粒子之前的速度对当前速度的影响。
- en: 'The second one is **personal influence**. It has its own coefficients: an arbitrary
    weight *c*₁ and random number *r*₁. In the brackets we have a difference between
    the **best position** of a particle in a **population** and the position of the
    current particle (**p**).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是**个人影响**。它有自己的系数：任意权重 *c*₁ 和随机数 *r*₁。在括号内我们有粒子在**种群**中的**最佳位置**与当前粒子的位置（**p**）之间的差异。
- en: The third part is **social influence**. It has similar arbitrary weight *c*₂
    and random number *r*₂, as well as the difference between the **best position**
    of a particle in a **swarm** and the position of the current particle (**p**).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个部分是**社会影响**。它有类似的任意权重 *c*₂ 和随机数 *r*₂，以及粒子在**群体**中的**最佳位置**与当前粒子的位置（**p**）之间的差异。
- en: 'After calculating the velocity we update the current positions of the particle
    simply by summation:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 计算速度后，我们通过简单的加法更新粒子的当前位置：
- en: '![](../Images/b370df6126ccd1c67f4a480a3fd3e703.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b370df6126ccd1c67f4a480a3fd3e703.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[作者](https://medium.com/@alexroz)。
- en: '*By now there is one big question left:* ***what are these best position in
    the swarm and population?***'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*到目前为止，有一个大问题尚未解答：* ***这些群体和种群中的最佳位置是什么？***'
- en: To calculate them we need a gain/reward function indicating which solution is
    closer to the minimum (maximum). In our example, this gain function is the function
    we plotted. So the particles are Xs, and by substituting each X to the function,
    we can figure out which X gives the lowest (greatest) value of Y.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算这些，我们需要一个增益/奖励函数，来指示哪个解更接近最小值（最大值）。在我们的例子中，这个增益函数就是我们绘制的函数。因此，粒子是X，通过将每个X代入函数，我们可以找出哪个X给出了最小（最大）值的Y。
- en: Thus, the best position in a population is X, which gives the lowest (greatest)
    Y on **the current iteration**. And the best position in a swarm is X which gives
    the lowest (greatest) Y across all **the previous iterations.**
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在一个种群中，最佳位置是X，它在**当前迭代**中给出了最低（最大）的Y。而在一个群体中，最佳位置是X，它在所有**先前的迭代**中给出了最低（最大）的Y。
- en: '*So simplifying everything, we can say that the idea of the algorithm is the
    following:*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*简化来说，我们可以说算法的核心思想如下：*'
- en: '*A bunch of particles, each having a certain position and velocity, are flying
    together in a search of the global minimum (maximum), forming a population. Populations
    appear iteratively and live during only one iteration, but they exchange information
    with each other, so each following population is closer to finding the solution
    than the previous one.*'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*一群粒子，每个粒子都有特定的位置和速度，它们一起飞行寻找全局最小值（最大值），形成一个种群。种群是迭代出现的，每个种群只存在一轮迭代，但它们会相互交换信息，因此每个后续的种群比前一个更接近找到解决方案。*'
- en: '**Now let’s get back to coding and implement in python what we’ve discussed.**'
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**现在让我们回到编码，使用 Python 实现我们所讨论的内容。**'
- en: 'First of all, let’s define our hypoparameters. Like in many other metaheuristic
    algorithms, these variables should be adjusted on the way, and there is no versatile
    set of values. But let’s stick to these ones:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们定义我们的超参数。像许多其他元启发式算法一样，这些变量应该在使用过程中进行调整，并且没有一组通用的值。不过，我们先使用这些值：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now let’s create a function which would generate a random population:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个生成随机种群的函数：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we visualize it, we’ll get something like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将其可视化，我们会得到如下的结果：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/dd8f28abbe9d431893d272b348e1ed37.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd8f28abbe9d431893d272b348e1ed37.png)'
- en: Image by [author](https://medium.com/@alexroz).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[作者](https://medium.com/@alexroz)提供。
- en: Here you can see that I randomly initialized a population of 50 particles, some
    of which are already close to the solution.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你可以看到，我随机初始化了50个粒子的种群，其中一些粒子已经接近解。
- en: Now let’s implement the PSO algorithm itself. I commented each row in the code,
    but if you have any questions, feel free to ask in the comments below.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现PSO算法本身。我对代码中的每一行都做了注释，如果你有任何问题，请随时在下方评论区提问。
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After 30 iteration we’ve got this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 经过30次迭代，我们得到了这个结果：
- en: '![](../Images/d82a4138cb2889322b10be822de4a443.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d82a4138cb2889322b10be822de4a443.png)'
- en: PSO (w=0.2, c1=1, c2=2). Image by [author](https://medium.com/@alexroz).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: PSO（w=0.2，c1=1，c2=2）。图片由[作者](https://medium.com/@alexroz)提供。
- en: As you can see the algorithm fell into the local minimum, which is not what
    we wanted. That’s why we need to tune our hypoparameters and start again. This
    time I decided to set inertia weight **w=0.8**, thus, now the previous velocity
    has a greater impact on the current state.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，算法陷入了局部最小值，这是我们不希望发生的。因此，我们需要调整超参数并重新开始。这一次，我决定将惯性权重设置为**w=0.8**，因此，之前的速度对当前状态的影响更大。
- en: '![](../Images/1d43dcf5b6fa3f9f4e3a55a0be1bcb2f.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1d43dcf5b6fa3f9f4e3a55a0be1bcb2f.png)'
- en: PSO (w=0.9, c1=1, c2=2). Image by [author](https://medium.com/@alexroz).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: PSO（w=0.9，c1=1，c2=2）。图片由[作者](https://medium.com/@alexroz)提供。
- en: And voila, we reached the global minimum of the function. I strongly encourage
    you to play around with POP_SIZE, c₁ and c₂. It’ll allow you to gain a better
    understanding of the code and the idea behind PSO. If you’re interested you can
    complicate the task and optimize some 3D function and make a nice visualization.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，瞧，我们达到了函数的全局最小值。我强烈建议你尝试调整 POP_SIZE、c₁ 和 c₂，这将帮助你更好地理解代码和粒子群优化（PSO）背后的理念。如果你感兴趣，可以让任务更复杂一些，优化一个三维函数并制作一个漂亮的可视化。
- en: ===========================================
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: ===========================================
- en: '[1]Shi Y. Particle swarm optimization //IEEE connections. — 2004\. — Т. 2\.
    — №. 1\. — С. 8–13.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[1]Shi Y. 粒子群优化 //IEEE connections. — 2004年 — 第2卷 — 第1期 — 第8-13页。'
- en: ===========================================
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: ===========================================
- en: '***All my articles on Medium are free and open-access, that’s why I’d really
    appreciate if you followed me here!***'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '***我在 Medium 上的所有文章都是免费的，公开访问的，所以如果你能在这里关注我，我将不胜感激！***'
- en: P.s. I’m extremely passionate about (Geo)Data Science, ML/AI and Climate Change.
    So if you want to work together on some project pls contact me in [LinkedIn](https://www.linkedin.com/in/alexxxroz/).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 附言：我对（地理）数据科学、机器学习/人工智能和气候变化充满热情。如果你有兴趣共同参与项目，请通过[LinkedIn](https://www.linkedin.com/in/alexxxroz/)与我联系。
- en: 🛰️Follow for more🛰️
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 🛰️更多内容请关注🛰️
