- en: Build your Personal Assistant with Agents and Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用代理和工具构建你的个人助手
- en: 原文：[https://towardsdatascience.com/build-your-personal-assistant-with-agents-and-tools-048637ac308e?source=collection_archive---------0-----------------------#2024-11-24](https://towardsdatascience.com/build-your-personal-assistant-with-agents-and-tools-048637ac308e?source=collection_archive---------0-----------------------#2024-11-24)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/build-your-personal-assistant-with-agents-and-tools-048637ac308e?source=collection_archive---------0-----------------------#2024-11-24](https://towardsdatascience.com/build-your-personal-assistant-with-agents-and-tools-048637ac308e?source=collection_archive---------0-----------------------#2024-11-24)
- en: LLMs alone suffer from not being able to access external or real-time data.
    Learn how to build your personal assistant using LangChain agents and Gemini by
    grounding it in external sources.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单独的LLM无法访问外部或实时数据。了解如何通过将LLM与外部资源结合，使用LangChain代理和Gemini构建个人助手。
- en: '[](https://medium.com/@benjamin_47408?source=post_page---byline--048637ac308e--------------------------------)[![Benjamin
    Etienne](../Images/cad8bc2d4b900575e76b7cf9debc9eea.png)](https://medium.com/@benjamin_47408?source=post_page---byline--048637ac308e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--048637ac308e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--048637ac308e--------------------------------)
    [Benjamin Etienne](https://medium.com/@benjamin_47408?source=post_page---byline--048637ac308e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@benjamin_47408?source=post_page---byline--048637ac308e--------------------------------)[![Benjamin
    Etienne](../Images/cad8bc2d4b900575e76b7cf9debc9eea.png)](https://medium.com/@benjamin_47408?source=post_page---byline--048637ac308e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--048637ac308e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--048637ac308e--------------------------------)
    [Benjamin Etienne](https://medium.com/@benjamin_47408?source=post_page---byline--048637ac308e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--048637ac308e--------------------------------)
    ·14 min read·Nov 24, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--048637ac308e--------------------------------)·14分钟阅读·2024年11月24日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: 'Summary:'
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结：
- en: The problem with LLMs
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LLM的问题
- en: What are Agents, Tools and Chains ?
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代理、工具和链是什么？
- en: Creating a simple chat without Tools
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个没有工具的简单聊天
- en: 'Adding Tools to our chat: The Google way with Function Calling'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向我们的聊天添加工具：谷歌式的函数调用方式
- en: 'Adding Tools to our chat : The Langchain way with Agents'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向我们的聊天添加工具：Langchain方式与代理
- en: Adding Memory to our Agent
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向我们的代理添加记忆
- en: Creating a Chain with a Human Validation step
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含人工验证步骤的链条
- en: Using search tools
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用搜索工具
- en: 1\. The problem with LLMs
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1. LLM的问题
- en: 'So you have your favorite chatbot, and you use it for your daily job to boost
    your productivity. It can translate text, write nice emails, tell jokes, etc.
    And then comes the day when your colleague comes to you and asks :'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你有了你最喜欢的聊天机器人，你用它来提升工作效率。它可以翻译文本、写漂亮的邮件、讲笑话等。然后有一天，你的同事走到你面前，问道：
- en: '*“Do you know the current exchange rate between USD and EUR ? I wonder if I
    should sell my EUR…”*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*“你知道美元和欧元的当前汇率吗？我在想是否应该卖掉我的欧元……”*'
- en: 'You ask your favorite chatbot, and the answer pops :'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你向你最喜欢的聊天机器人提问，答案马上就出现：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*What is the problem here ?*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*这里的问题是什么？*'
- en: The problem is that you have stumbled on one of the shortcomings of LLMs. Large
    Language Models (LLMs) are powerful at solving many types of problems, such as
    problem solving, text summarization, generation, etc.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，你已经碰到了LLM的一个短板。大型语言模型（LLM）在解决许多类型的问题时非常强大，例如问题解决、文本摘要、生成等。
- en: 'However, they are constrained by the following limitations:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它们受到以下限制的约束：
- en: '**They are frozen after training, leading to stale knowledge.**'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它们在训练后被“冻结”，导致知识过时。**'
- en: '**They can’t query or modify external data.**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它们无法查询或修改外部数据。**'
- en: Same way as we are using search engines every day, reading books and documents
    or querying databases, we would ideally want to provide this knowledge to our
    LLM to make it more efficient.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们每天使用搜索引擎、阅读书籍和文档或查询数据库一样，我们理想中希望将这些知识提供给我们的LLM，以提高其效率。
- en: 'Fortunately, there is a way to do that: Tools and Agents.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一种方法可以做到：工具和代理。
- en: Foundational models, despite their impressive text and image generation, remain
    constrained by their inability to interact with the outside world. Tools bridge
    this gap, empowering agents to interact with external data and services while
    unlocking a wider range of actions beyond that of the underlying model alone
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管基础模型在文本和图像生成方面令人印象深刻，但它们仍然受到无法与外部世界交互的限制。工具弥补了这一鸿沟，使智能体能够与外部数据和服务交互，同时解锁比单独的基础模型更多的操作。
- en: '*(source : Google Agents whitepaper)*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*(来源：谷歌智能体白皮书)*'
- en: 'Using agents and tools, we could then be able to, from our chat interface:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用智能体和工具，我们可以通过聊天界面：
- en: retrieve data from our own documents
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从我们自己的文档中检索数据
- en: read / send emails
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读/发送电子邮件
- en: interact with internal databases
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与内部数据库进行交互
- en: perform real time Google searches
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行实时谷歌搜索
- en: etc.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等等。
- en: 2\. What are Agents, Tools and Chains ?
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 什么是智能体、工具和链条？
- en: An *agent* is an application which attempts to achieve a goal (or a task) by
    having at its disposal a set of tools and taking decisions based on its observations
    of the environment.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*智能体*是一个应用程序，它试图通过拥有一组工具并根据对环境的观察做出决策来实现一个目标（或任务）。'
- en: 'A good example of an agent could be you, for example: if you need to compute
    a complex mathematical operation (goal), you could use a calculator (tool #1),
    or a programming language (tool #2). Maybe you would choose the calculator to
    do a simple addition, but choose tool #2 for more complex algorithms.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的智能体例子可以是你自己：如果你需要计算一个复杂的数学操作（目标），你可以使用计算器（工具#1）或编程语言（工具#2）。也许你会选择计算器来进行简单的加法，但对于更复杂的算法，你可能会选择工具#2。
- en: 'Agents are therefore made of :'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，智能体由以下部分构成：
- en: 'A model : The brain in our agent is the LLM. It will understand the query (the
    goal), and browse through its tools available to select the best.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型：我们智能体的大脑是大语言模型（LLM）。它将理解查询（目标），并浏览其可用工具以选择最佳工具。
- en: 'One or more *tools* : These are functions, or APIs, that are responsible for
    performing a specific action (ie: retrieving the current currency rate for USD
    vs EUR, adding numbers, etc.)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个或多个*工具*：这些是函数或API，负责执行特定的操作（例如：检索美元与欧元的当前汇率、加法等）。
- en: 'An orchestration process: this is how the model will behave when asked to solve
    a task. It is a cognitive process that defines how the model will analyze the
    problem, refine inputs, choose a tool, etc. Examples of such processes are ReAct,
    CoT (Chain of Thought), ToT (Tree-of-Thought)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个协调过程：这就是模型在被要求解决任务时的行为方式。它是一个认知过程，定义了模型如何分析问题、完善输入、选择工具等。此类过程的示例有ReAct、CoT（思维链）、ToT（思维树）
- en: Here is below a workflow explanation
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个工作流说明
- en: '![](../Images/85a293f46127b027cf0d29236c2e7d04.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85a293f46127b027cf0d29236c2e7d04.png)'
- en: image by author
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '*Chains* are somehow different. Whereas agents can ‘decide’ by themselves what
    to do and which steps to take, chains are just a sequence of predefined steps.
    They can still rely on tools though, meaning that they can include a step in which
    they need to select from available tools. We’ll cover that later.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*链条*有些不同。尽管智能体可以“自行决定”做什么以及采取哪些步骤，但链条仅是预定义步骤的序列。它们仍然可以依赖工具，这意味着它们可以包括一个需要从可用工具中选择的步骤。稍后我们将详细讨论。'
- en: 3\. Creating a simple chat without Tools
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 创建一个没有工具的简单聊天
- en: To illustrate our point, we will first of all see how our LLM performs as-is,
    without any help.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明我们的观点，我们将首先看到没有任何帮助的情况下，我们的LLM如何表现。
- en: 'Let’s install the needed libraries :'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们安装所需的库：
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And create our very simple chat using Google’s Gemini LLM:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 并使用谷歌的Gemini大语言模型创建我们非常简单的聊天：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you run this simple chat and ask a question about the current exchange rate,
    you might probably get a similar answer:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个简单的聊天并询问当前的汇率问题，你可能会得到类似的答案：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Not surprising, as we know LLMs do not have access to real-time data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 并不奇怪，因为我们知道大语言模型（LLMs）无法访问实时数据。
- en: Let’s add a tool for that. Our tool will be little function that calls an API
    to retrieve exchange rate data in real time.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为此添加一个工具。我们的工具将是一个调用API以实时检索汇率数据的小功能。
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now we know how our tools works, we would like to tell our chat LLM to use
    this function to answer our question. We will therefore create a mono-tool agent.
    To do that, we have several options which I will list here:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了工具的工作原理，我们希望告诉我们的聊天LLM使用这个功能来回答问题。因此，我们将创建一个单工具智能体。为此，我们有几个选项，我将在此列出：
- en: Use Google’s Gemini chat API with Function Calling
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用谷歌的Gemini聊天API与功能调用
- en: Use LangChain’s API with Agents and Tools
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用LangChain的API与智能体和工具
- en: Both have their advantages and drawbacks. The purpose of this article is also
    to show you the possibilities and let you decide which one you prefer.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 两者各有优缺点。本文的目的是展示这些可能性，让您决定更喜欢哪一种方式。
- en: '4\. Adding Tools to our chat: The Google way with Function Calling'
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 向我们的聊天添加工具：使用Google的函数调用方式
- en: There are basically two ways of creating a tool out of a function.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 创建工具的基本方法有两种。
- en: 'The 1st one is a “dictionary” approach where you specify inputs and description
    of the function in the Tool. The imporant parameters are:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是“字典”方法，在这种方法中，您指定函数的输入和描述。重要的参数是：
- en: Name of the function (be explicit)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数的名称（请明确）
- en: 'Description : be verbose here, as a solid and exhaustive description will help
    the LLM select the right tool'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述：在这里要详细说明，因为一个扎实且详尽的描述将帮助LLM选择正确的工具
- en: 'Parameters : this is where you specify your arguments (type and description).
    Again, be verbose in the description of your arguments to help the LLM know how
    to pass value to your function'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参数：这是您指定参数的位置（类型和描述）。同样，请在描述参数时进行详细说明，帮助LLM了解如何将值传递给您的函数
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The 2nd way of adding a tool using Google’s SDK is with a `from_func` instantiation.
    This requires editing our original function to be more explicit, with a docstring,
    etc. Instead of being verbose in the Tool creation, we are being verbose in the
    function creation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Google SDK添加工具的第二种方式是通过`from_func`实例化。这需要我们修改原始函数，使其更加明确，并添加文档字符串等内容。与工具创建时冗长不同，我们是在函数创建时进行详细描述。
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The next step is really about creating the tool. For that, we will add our
    FunctionDeclaration to a list to create our Tool object:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步实际上是创建工具。为此，我们将把我们的FunctionDeclaration添加到列表中，以创建我们的Tool对象：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s now pass that to our chat and see if it now can answer our query about
    exchange rates ! Remember, without tools, our chat answered:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将其传递给我们的聊天，看看它是否能够回答我们关于汇率的查询！记住，如果没有工具，我们的聊天回答是：
- en: '![](../Images/8206400b049669a30d50ea74965d1d7a.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8206400b049669a30d50ea74965d1d7a.png)'
- en: 'Let’s try Google’s Function calling tool and see if this helps ! First, let’s
    send our query to the chat:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试Google的函数调用工具，看看这是否有帮助！首先，让我们将查询发送给聊天：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The LLM correctly guessed it needed to use the `get_exchange_rate` function,
    and also correctly guessed the 2 parameters were `USD` and `EUR` .
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: LLM正确猜测它需要使用`get_exchange_rate`函数，并且也正确猜测两个参数是`USD`和`EUR`。
- en: But this is not enough. What we want now is to actually run this function to
    get our results!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 但这还不够。我们现在想要的是实际运行这个函数以获得我们的结果！
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can now see our chat is able to answer our question! It:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到我们的聊天能够回答问题了！它：
- en: Correctly guessed to function to call, `get_exchange_rate`
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确猜测调用的功能是`get_exchange_rate`
- en: 'Correctly assigned the parameters to call the function `{‘currency_from’: ‘USD’,
    ‘currency_to’: ‘EUR’}`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '正确分配了调用函数的参数`{''currency_from'': ''USD'', ''currency_to'': ''EUR''}`'
- en: Got results from the API
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从API获取结果
- en: And nicely formatted the answer to be human-readable!
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且格式化答案，使其易于人类阅读！
- en: Let’s now see another way of doing with LangChain.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看另一种使用LangChain的方法。
- en: '5\. Adding Tools to our chat: The Langchain way with Agents'
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 向我们的聊天添加工具：使用Langchain的代理方式
- en: LangChain is a composable framework to build with LLMs. It is the orchestration
    framework for controllable agentic workflows.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain是一个可组合的框架，用于与LLM一起构建。它是用于可控代理工作流的编排框架。
- en: 'Similar to what we did before the “Google” way, we will build tools in the
    Langchain way. Let’s begin with defining our functions. Same as for Google, we
    need to be exhaustive and verbose in the docstrings:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前采用的“Google”方式类似，我们将使用Langchain的方式构建工具。让我们从定义函数开始。与Google一样，我们需要在文档字符串中详尽且冗长地描述：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In order to spice things up, I will add another tool which can list tables
    in a BigQuery dataset. Here is the code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让事情更加有趣，我将添加另一个可以列出BigQuery数据集中的表的工具。以下是代码：
- en: '[PRE11]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Add once done, we add our functions to our LangChain toolbox !
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，我们将我们的函数添加到LangChain工具箱中！
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To build our agent, we will use the `AgentExecutor`object from LangChain. This
    object will basically take 3 components, which are the ones we defined earlier
    :'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建我们的代理，我们将使用LangChain的`AgentExecutor`对象。这个对象基本上将使用之前定义的三个组件：
- en: A LLM
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LLM
- en: A prompt
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个提示
- en: And tools.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以及工具。
- en: 'Let’s first choose our LLM:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先选择我们的LLM：
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then we create a prompt to manage the conversation:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们创建一个提示来管理对话：
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'And finally, we create the `AgentExecutor` and run a query:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建`AgentExecutor`并运行查询：
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Hmmm. Seems like the agent is missing one argument, or at least asking for
    more information…Let’s reply by giving this information:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，看起来代理缺少一个参数，或者至少需要更多的信息……我们来回应并提供这个信息：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Well, seems we’re back to square one. The LLM has been told the project id but
    forgot about the question. Our agent seems to be lacking memory to remember previous
    questions and answers. Maybe we should think of…
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 好像我们又回到了原点。虽然已经告诉了LLM项目ID，但它忘记了问题。我们的代理似乎缺乏记忆，无法记住之前的问题和答案。也许我们应该考虑……
- en: 6\. Adding Memory to our Agent
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 为我们的代理添加记忆
- en: Memory is another concept in Agents, which basically helps the system to remember
    the conversation history and avoid endless loops like above. Think of memory as
    being a notepad where the LLM keeps track of previous questions and answers to
    build context around the conversation.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 记忆是代理中的另一个概念，它基本上帮助系统记住对话历史，避免像上述情况那样的无休止循环。可以把记忆看作是一个记事本，LLM用它来跟踪之前的问题和答案，从而构建对话的上下文。
- en: 'We will modify our prompt (instructions) to the model to include memory:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改我们的提示（指令），让模型包含记忆：
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will now rerun our query from the beginning:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将从头重新运行我们的查询：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'With an empty chat history, the model still asks for the project id. Pretty
    consistent with what we had before with a memoryless agent. Let’s reply to the
    agent and add the missing information:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有聊天历史的情况下，模型仍然要求提供项目ID。这与之前没有记忆的代理行为一致。我们来回应代理并补充缺失的信息：
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Notice how, in the output:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在输出中：
- en: The `chat history` keeps track of the previous Q&A
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`聊天历史`跟踪之前的问答'
- en: The output now returns the list of the tables!
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出现在返回了表格列表！
- en: '[PRE20]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In some use cases however, certain actions might require special attention because
    of their nature (ie deleting an entry in a database, editing information, sending
    an email, etc.). Full automation without control might leads to situations where
    the agent takes wrong decisions and creates damage.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在某些使用场景中，某些操作可能因其性质需要特别关注（例如删除数据库中的条目、编辑信息、发送电子邮件等）。没有控制的完全自动化可能导致代理做出错误决定并造成损害。
- en: One way to secure our workflows is to add a human-in-the-loop step.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 确保我们的工作流的一种方法是添加一个人工干预步骤。
- en: 7\. Creating a Chain with a Human Validation step
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. 创建一个包含人工验证步骤的链
- en: A chain is somehow different from an agent. Whereas the agent can decide to
    use or not to use tools, a chain is more static. It is a sequence of steps, for
    which we can still include a step where the LLM will choose from a set of tools.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 链与代理有所不同。代理可以决定是否使用工具，而链则更为静态。它是一个步骤序列，我们仍然可以在其中加入一个步骤，让LLM从一组工具中选择。
- en: To build chains in LangChain, we use LCEL.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在LangChain中构建链时，我们使用LCEL。
- en: LangChain Expression Language, or LCEL, is a declarative way to easily compose
    chains together. Chains in LangChain use the pipe `|` operator to indicate the
    orders in which steps have to be executed, such as `step 1 | step 2 | step 3 etc.`
    The difference with Agents is that Chains will always follow those steps, whereas
    Agents can “decide” by themselves and are autonomous in their decision-making
    process.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain表达式语言（LCEL）是一种声明式的方法，可以轻松地将链式操作组合在一起。在LangChain中，链使用管道符号`|`表示步骤的执行顺序，如`step
    1 | step 2 | step 3 等`。与代理的不同之处在于，链始终会按照这些步骤执行，而代理可以“自行决定”并在决策过程中具有自主性。
- en: In our case, we will proceed as follows to build a simple `prompt | llm` chain.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们将按照以下方式构建一个简单的`prompt | llm`链。
- en: '[PRE21]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Remember how in the previous step we passed an agent to our `RunnableWithMessageHistory`?
    Well, we will do the same here, but...
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得在前一个步骤中，我们将一个代理传递给了我们的`RunnableWithMessageHistory`吗？好吧，我们将在这里做同样的事情，但……
- en: '[PRE22]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Unlike the agent, a chain does not provide the answer unless we tell it to.
    In our case, it stopped at the step where the LLM returns the function that needs
    to be called.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 与代理不同，链在没有明确告诉它的情况下不会提供答案。在我们的例子中，它停留在LLM返回需要调用的功能的步骤上。
- en: 'We need to add an extra step to actually *call* the tool. Let’s add another
    function to call the tools:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个额外的步骤来实际*调用*工具。让我们添加另一个函数来调用这些工具：
- en: '[PRE23]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We now get the following output, which shows the API has been successfully
    called:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们得到以下输出，显示API已成功调用：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now we understood how to chain steps, let’s add our human-in-the-loop step !
    We want this step to check that the LLM has understood our requests and will make
    the right call to an API. If the LLM has misunderstood the request or will use
    the function incorrectly, we can decide to interrupt the process.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经理解了如何链式连接步骤，接下来让我们加入“人类在环”步骤！我们希望这个步骤检查 LLM 是否已经理解我们的请求，并将正确地调用 API。如果
    LLM 理解错了请求或将错误地使用该功能，我们可以决定中断这个过程。
- en: '[PRE25]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Next, add this step to the chain before the function call:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在函数调用之前将此步骤添加到链中：
- en: '[PRE26]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You will then be asked to confirm that the LLM understood correctly:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你将被要求确认 LLM 是否正确理解：
- en: '![](../Images/5028f700edfcffd815b18eeb32e9da41.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5028f700edfcffd815b18eeb32e9da41.png)'
- en: This human-in-the-loop step can be very helpful for critical workflows where
    a misinterpretation from the LLM could have dramatic consequences.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个“人类在环”步骤对于关键工作流非常有帮助，因为 LLM 的误解可能会造成严重后果。
- en: 8\. Using search tools
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8\. 使用搜索工具
- en: One of the most convenient tools to retrieve information in real-time are search
    engines . One way to do that is to use `GoogleSerperAPIWrapper` (you will need
    to register to get an API key in order to use it), which provides a nice interface
    to query Google Search and get results quickly.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 获取实时信息的最便捷工具之一是搜索引擎。实现这一点的一种方法是使用 `GoogleSerperAPIWrapper`（你需要注册并获取 API 密钥才能使用它），它提供了一个良好的界面，可以快速查询
    Google 搜索并获取结果。
- en: Luckily, LangChain already provides a tool for you, so we won’t have to write
    the function ourselves.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，LangChain 已经为你提供了一个工具，所以我们不需要自己编写这个函数。
- en: Let’s therefore try to ask a question on yesterday’s event (Nov 20th) and see
    if our agent can answer. Our question is about Rafael Nadal’s last official game
    (which he lost to van de Zandschulp).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们尝试问一个关于昨天事件（11 月 20 日）的问题，看看我们的代理是否能回答。我们的问题是关于拉斐尔·纳达尔的最后一场正式比赛（他输给了范·德·赞斯丘普）。
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Without being able to access Google Search, our model is unable to answer because
    this information was not available at the time it was trained.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果无法访问 Google 搜索，我们的模型将无法回答，因为这些信息在训练时并不可用。
- en: 'Let’s now add our Serper tool to our toolbox and see if our model can use Google
    Search to find the information:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将 Serper 工具加入我们的工具箱，看看我们的模型能否使用 Google 搜索来找到信息：
- en: '[PRE28]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'And rerun our query :'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后重新运行我们的查询：
- en: '[PRE29]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Conclusion
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: LLMs alone often hit a blocker when it comes to using personal, corporate, private
    or real-data. Indeed, such information is generally not available at training
    time. Agents and tools are a powerful way to augment these models by allowing
    them to interact with systems and APIs, and orchestrate workflows to boost productivity.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 仅依靠 LLM，当涉及到使用个人、公司、私密或真实数据时，通常会遇到阻碍。事实上，这类信息在训练时通常不可用。代理和工具是增强这些模型的强大手段，它们允许模型与系统和
    API 交互，并协调工作流以提升生产力。
