- en: Explore Solvable and Unsolvable Equations with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 探索可解与不可解的方程
- en: 原文：[https://towardsdatascience.com/explore-solvable-and-unsolvable-equations-with-python-661ac11f4f20?source=collection_archive---------2-----------------------#2024-10-29](https://towardsdatascience.com/explore-solvable-and-unsolvable-equations-with-python-661ac11f4f20?source=collection_archive---------2-----------------------#2024-10-29)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/explore-solvable-and-unsolvable-equations-with-python-661ac11f4f20?source=collection_archive---------2-----------------------#2024-10-29](https://towardsdatascience.com/explore-solvable-and-unsolvable-equations-with-python-661ac11f4f20?source=collection_archive---------2-----------------------#2024-10-29)
- en: Find closed-form solutions when possible — use numerical methods when necessary
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在可能时寻找封闭解 —— 必要时使用数值方法
- en: '[](https://medium.com/@carlmkadie?source=post_page---byline--661ac11f4f20--------------------------------)[![Carl
    M. Kadie](../Images/9dbe27c76e9567136e5a7dc587f1fb15.png)](https://medium.com/@carlmkadie?source=post_page---byline--661ac11f4f20--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--661ac11f4f20--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--661ac11f4f20--------------------------------)
    [Carl M. Kadie](https://medium.com/@carlmkadie?source=post_page---byline--661ac11f4f20--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@carlmkadie?source=post_page---byline--661ac11f4f20--------------------------------)[![Carl
    M. Kadie](../Images/9dbe27c76e9567136e5a7dc587f1fb15.png)](https://medium.com/@carlmkadie?source=post_page---byline--661ac11f4f20--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--661ac11f4f20--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--661ac11f4f20--------------------------------)
    [Carl M. Kadie](https://medium.com/@carlmkadie?source=post_page---byline--661ac11f4f20--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--661ac11f4f20--------------------------------)
    ·15 min read·Oct 29, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--661ac11f4f20--------------------------------)
    ·15分钟阅读·2024年10月29日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7c1f799be7465f76240afc9db30d3020.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7c1f799be7465f76240afc9db30d3020.png)'
- en: 'A Python Refereeing an Italian Renaissance Mathematics Duel — Source: [https://openai.com/dall-e-2/](https://openai.com/dall-e-2/).
    All other figures from the author.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一位 Python 指导意大利文艺复兴时期的数学决斗 — 来源：[https://openai.com/dall-e-2/](https://openai.com/dall-e-2/)。所有其他图片来自作者。
- en: '**Why can we solve some equations easily, while others seem impossible? And
    another thing: why is this knowledge hidden from us?**'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么有些方程可以轻松解出，而另一些看起来则不可能解出？还有一件事：为什么这些知识对我们是隐藏的？**'
- en: 'As data scientists, applied scientists, and engineers, we often create mathematical
    models. For example, consider the model: *y = x²*. Given a value for *x, w*e can
    apply it forward to compute *y*. For instance, if *x = 3*, then *y = 9*.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据科学家、应用科学家和工程师，我们经常创建数学模型。例如，考虑模型：*y = x²*。给定一个 *x* 的值，我们可以将其代入计算 *y*。例如，如果
    *x = 3*，那么 *y = 9*。
- en: 'We can also apply this model backward. Starting with *y = x²*, we rearrange
    to solve for *x*: *x = ±√y*. If *y = 9*, then *x = ±3*. The expression *x = ±√y*
    is an example of a **closed-form solution** — an expression that uses a finite
    combination of standard operations and functions.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以将这个模型反向应用。从 *y = x²* 开始，我们重新排列以解出 *x*：*x = ±√y*。如果 *y = 9*，那么 *x = ±3*。表达式
    *x = ±√y* 就是一个 **封闭解** 的例子 —— 一个使用有限组合的标准运算和函数的表达式。
- en: However, not all models are so straightforward. Sometimes, we encounter equations
    where we can’t simply “solve for *x*” and get a closed-form expression. In such
    cases, we might hear, “That’s not solvable — you need numerical methods.” Numerical
    methods are powerful. They can provide precise approximations. Still, it frustrates
    me (and perhaps you) that no one ever seems to explain when closed-form solutions
    are possible and when they aren’t.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，并非所有的模型都那么简单。有时候，我们会遇到一些方程，无法简单地“解出 *x*”并得到封闭解。在这种情况下，我们可能会听到：“这个无法解 —— 你需要数值方法。”数值方法非常强大，它们能提供精确的近似解。尽管如此，我（或许你也一样）感到困惑的是，似乎从来没有人解释过，什么时候封闭解是可能的，什么时候又不行。
- en: 'The great Johannes Kepler shared our frustration. When studying planetary motion,
    he created this model:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 伟大的约翰内斯·开普勒也曾分享过我们的困惑。在研究行星运动时，他提出了这个模型：
- en: '*y* = *x* −c sin(*x*)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*y* = *x* −c sin(*x*)'
- en: This equation converts a body’s position along its orbit (*x)* into its time
    along the orbit (*y)*. Kepler sought a closed-form solution for *x* to turn time
    into a position. However, even 400 years later, the best we have are numerical
    methods.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方程将物体沿轨道的位置 (*x*) 转换为它沿轨道的时间 (*y*)。开普勒曾尝试寻找 *x* 的闭式解，以将时间转化为位置。然而，即便是 400
    年后的今天，我们得到的最佳方法仍然是数值方法。
- en: In this article, we’ll build intuition about when to expect a closed-form solution.
    The only way to determine this rigorously is by using advanced mathematics — such
    as Galois theory, transcendental number theory, and algebraic geometry. These
    topics go far beyond what we, as applied scientists and engineers, typically learn
    in our training.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将建立关于何时期望闭式解的直觉。要严格确定这一点的唯一方法是使用高等数学——如伽罗瓦理论、超越数理论和代数几何学。这些主题远远超出了我们作为应用科学家和工程师通常在训练中学到的内容。
- en: Instead of diving into these advanced fields, we’ll cheat. Using **SymPy**,
    a Python-based computer algebra system, we’ll explore different classes of equations
    to see which it can solve with a closed-form expression. For completeness, we’ll
    also apply numerical methods.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会深入这些高级领域，而是采取一些捷径。使用 **SymPy**，一个基于 Python 的计算机代数系统，我们将探索不同类型的方程式，看看它能够用闭式表达式解决哪些问题。为了完整性，我们还将应用数值方法。
- en: 'We’ll explore equations that combine polynomials, exponentials, logarithms,
    and trigonometric functions. Along the way, we’ll discover specific combinations
    that often resist closed-form solutions. We’ll see that if you want to create
    an equation **with** (or **without**) a closed-form solution, you should **avoid**
    (or **try**) the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探索结合多项式、指数、对数和三角函数的方程式。在此过程中，我们将发现一些特定的组合通常无法得到闭式解。我们将看到，如果你希望创建一个**有**（或**没有**）闭式解的方程，你应该**避免**（或**尝试**）以下内容：
- en: Fifth degree and higher polynomials
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 五次及以上的多项式
- en: Mixing *x* with exp(*x*) or log(*x*) — if Lambert’s *W* function is off-limits
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合 *x* 与 exp(*x*) 或 log(*x*) — 如果拉姆贝尔的 *W* 函数不可用
- en: Combining exp(*x*) and log(*x*) within the same equation
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一方程中混合 exp(*x*) 和 log(*x*)
- en: Some pairs of trigonometric functions with commensurate frequencies
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些具有相同频率的三角函数对
- en: Many pairs of trigonometric functions with non-commensurate frequencies
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多具有不相同频率的三角函数对
- en: Mixing trigonometric functions with *x*, exp(x), or log(x)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合三角函数与 *x*、exp(x) 或 log(x)
- en: 'Aside 1: I’m not a mathematician, and my SymPy scripts are not higher mathematics.
    If you find any mistakes or overlooked resources, forgive my oversight. Please
    share them with me, and I’ll gladly add a note.'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 旁注 1：我不是数学家，我的 SymPy 脚本也不是高等数学。如果你发现其中的任何错误或遗漏的资源，请原谅我的疏忽。请与我分享，我将非常乐意加上注释。
- en: ''
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Aside 2: Welch Lab’s recent video, [Kepler’s Impossible Equation](https://www.youtube.com/watch?v=hBkmyJ3TE0g),
    reminded me of my frustration about not knowing when an equation can be solved
    in a closed form. The video sparked the investigation that follows and provides
    our first example.'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 旁注 2：Welch 实验室最近的一个视频，[开普勒的不可解方程](https://www.youtube.com/watch?v=hBkmyJ3TE0g)让我想起了我对何时能解出闭式方程的困惑。这个视频激发了我接下来的调查，并提供了我们的第一个例子。
- en: Kepler’s Equation
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开普勒方程
- en: 'Imagine you are Johannes Kepler’s research programmer. He has created the following
    model of orbital motion:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你是约翰内斯·开普勒的研究程序员。他已经创建了以下轨道运动模型：
- en: '*y* = *x* −*c* sin(*x*)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '*y* = *x* −*c* sin(*x*)'
- en: 'where:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '*x* is the body’s position along its orbit. We measure this position as an
    angle (in radians). The angle starts at 0 radians when the body is closest to
    the Sun. When the body has covered ¼ of its orbit’s distance, the angle is π/2
    radians (90°). When it has covered half of its orbit’s distance, the angle is
    π (180°), and so on. Recall that radians measure angles from 0 to 2π rather than
    from 0 to 360°.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*x* 是物体在轨道上的位置。我们将此位置测量为一个角度（以弧度为单位）。当物体离太阳最近时，角度从 0 弧度开始。当物体完成轨道距离的 ¼ 时，角度为
    π/2 弧度（90°）。当物体完成轨道距离的一半时，角度为 π（180°），以此类推。请记住，弧度是从 0 到 2π 测量角度，而不是从 0 到 360°。'
- en: '*c* is the orbit’s eccentricity, ranging from 0 (a perfect circle) to just
    under 1 (a highly elongated ellipse). Suppose Kepler has observed a comet with
    c = 0.967.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*c* 是轨道的偏心率，范围从 0（完美圆形）到接近 1（高度拉长的椭圆）。假设开普勒观察到一颗彗星的偏心率为 c = 0.967。'
- en: '*y* is the body’s time along its orbit. We measure this time as an angle (in
    radians). For instance, if the comet has an orbital period of 76 Earth years,
    then π/2 (90°) corresponds to ¼ of 76 years, or 19 years. A time of π (180°) corresponds
    to ½ of 76 years, or 38 years. A time of 2π (360°) is the full 76-year orbital
    period.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*y*是天体沿其轨道的时间。我们将这个时间作为角度（弧度）来度量。例如，如果彗星的轨道周期为76个地球年，那么π/2（90°）对应76年中的四分之一，也就是19年。时间为π（180°）时对应76年的一半，即38年。时间为2π（360°）时即是完整的76年轨道周期。'
- en: 'This diagram shows the comet’s position at π/2 radians (90°), which is ¼ of
    the way along its orbit:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表展示了彗星在π/2弧度（90°）时的位置，也就是它轨道上的四分之一：
- en: '![](../Images/9d4348de333abf529adc5317f2f0455f.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9d4348de333abf529adc5317f2f0455f.png)'
- en: 'Kepler asks for the time when the comet reaches position π/2 radians (90°).
    You create and run this Python code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 开普勒询问彗星达到π/2弧度（90°）时的时间。你创建并运行了以下Python代码：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You report back to Kepler:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你向开普勒报告：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Aside: The comet covers 25% of its orbit distance in under 10% of its orbital
    period because it speeds up when closer to the Sun.'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 顺便提一下，彗星在不到其轨道周期的10%时间内完成了25%的轨道距离，因为它在离太阳较近时加速。
- en: 'No good deed goes unpunished. Kepler, fascinated by the result, assigns you
    a new task: “Can you tell me how far along its orbit the comet is after 20 Earth
    years? I want to know the position in radians.”'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 善有善报，但好事多磨。开普勒对结果感到着迷，给你分配了一个新任务：“你能告诉我彗星在20个地球年后，它在轨道上的位置吗？我想知道它的弧度位置。”
- en: “No problem,” you think. “I’ll just use a bit of high school algebra.”
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: “没问题，”你想，“我只需用一点高中代数。”
- en: 'First, you convert 20 Earth years into radians:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你将20个地球年转换为弧度：
- en: time_radians = (20 / 76) × 2π = (10 / 19)π
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: time_radians = (20 / 76) × 2π = (10 / 19)π
- en: Next, you rearrange Kepler’s equation, setting it equal to 0.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你重新排列开普勒方程，将其设为0。
- en: '*x* − 0.967 sin(*x*) − (10 / 19)π = 0'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*x* − 0.967 sin(*x*) − (10 / 19)π = 0'
- en: 'Now you want to find the value of *x* that makes this equation true. You decide
    to graph the equation to see where it crosses zero:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你想找到使这个方程成立的*x*值。你决定通过画图来查看它在哪一点与零相交：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/cb926a0e01695cc42dae35835f1951cb.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cb926a0e01695cc42dae35835f1951cb.png)'
- en: So far, so good. The graph shows that a solution for *x* exists. But when you
    try to rearrange the equation to solve for *x* using algebra, you hit a wall.
    How do you isolate *x* when you have a combination of *x* and sin(*x*)?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 目前为止，一切顺利。图表显示了*x*的解是存在的。但当你尝试通过代数重新排列方程并解出*x*时，你却遇到了困难。如何在方程中有*x*和sin(*x*)的组合时孤立出*x*呢？
- en: “That’s okay,” you think. “We’ve got Python, and Python has the [SymPy package](https://www.sympy.org/),”
    a powerful and free computer algebra system.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: “没关系，”你想，“我们有Python，而Python有[SymPy包](https://www.sympy.org/)，”它是一个强大且免费的计算机代数系统。
- en: 'You pose the problem to SymPy:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你向SymPy提出了问题：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Unfortunately, it replies with an error:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，它返回了一个错误：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: SymPy is quite good at solving equations, but not all equations can be solved
    in what’s called **closed form** — a solution expressed in a finite number of
    **elementary functions** such as addition, multiplication, roots, exponentials,
    logarithms, and trigonometric functions. When we combine a term such as *x* with
    a trigonometric term like sin⁡(*x*), isolating *x* can become fundamentally impossible.
    In other words, these types of mixed equations often lack a closed-form solution.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy在解方程方面非常强大，但并非所有方程都能用所谓的**封闭形式**解决——即通过有限的**初等函数**（如加法、乘法、根号、指数、对数和三角函数）来表示的解。当我们将*x*与像sin(*x*)这样的三角函数项组合时，孤立出*x*就可能变得根本不可能。换句话说，这些类型的混合方程通常没有封闭形式的解。
- en: 'That’s okay. From the graph, we know a solution exists. SymPy can get us arbitrarily
    close to that solution using numerical methods. We use SymPy’s `nsolve()`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 没问题。从图表中我们知道解是存在的。SymPy可以通过数值方法帮助我们接近这个解。我们使用SymPy的`nsolve()`：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Which reports:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 结果报告：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can summarize the results in a table:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将结果总结在一个表格中：
- en: '![](../Images/e3ef29a79ea4e43bbefffc9df2e89bdf.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e3ef29a79ea4e43bbefffc9df2e89bdf.png)'
- en: Are we sure there is not a closed-form solution? We add a question mark to our
    “No” answer. This reminds us that SymPy’s failure is not a mathematical proof
    that no closed-form solution exists. We label the last column “**A** Numeric”
    to remind ourselves that it represents one numerical solution. There could be
    more.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确定没有封闭式解吗？我们在“没有”的回答后加上一个问号。这提醒我们，SymPy的失败并不意味着没有封闭式解。我们将最后一列标记为“**A** 数值解”，以提醒自己这只是一个数值解，可能还有更多解。
- en: In this section, we explored Kepler’s equation and discovered the challenge
    of solving it in closed form. Python’s SymPy package confirmed our struggle, and
    in the end, we had to rely on a numerical solution.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了开普勒方程，并发现了解其闭式解的挑战。Python 的 SymPy 包证实了我们的困难，最终，我们不得不依赖数值解法。
- en: 'This gives us one example of an equation with no apparent closed-form solution.
    But is this typical? Are there classes of equations where we can always — or never
    — find a closed-form solution? Let’s dig deeper by exploring another kind of equation:
    polynomials.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们一个没有明显闭式解的方程的例子。但这是典型的吗？是否有某些类型的方程，我们总是能找到——或者永远找不到——闭式解呢？让我们通过探讨另一种类型的方程：多项式，来深入挖掘。
- en: Polynomials
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多项式
- en: '[Polynomial](https://en.wikipedia.org/wiki/Polynomial) equations such as *x*²
    − *x* − 1 = 0 are the reliable hammer of mathematical modeling — straightforward
    but powerful. We all learn how to solve degree-two polynomials (those with *x*²,
    “quadratic”) in school.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[多项式](https://en.wikipedia.org/wiki/Polynomial)方程，如 *x*² − *x* − 1 = 0，是数学建模中可靠的工具——直观而强大。我们都在学校学过如何解二次多项式（含
    *x*²，“二次方”）。'
- en: 500 years ago, during the Renaissance in Italy, solving polynomials of higher
    degrees became a form of public entertainment. Mathematicians like Tartaglia and
    Cardano competed for glory and recognition in [public math duels](https://old.maa.org/press/maa-reviews/the-secret-formula-how-a-mathematical-duel-inflamed-renaissance-italy-and-uncovered-the-cubic).
    These contests led to solutions for degree-three (cubic) and degree-four (quartic)
    polynomials. But what about degree five?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 500 年前，在意大利的文艺复兴时期，解高次多项式成为一种公众娱乐形式。像塔塔利亚和卡尔达诺这样的数学家在[公开数学决斗](https://old.maa.org/press/maa-reviews/the-secret-formula-how-a-mathematical-duel-inflamed-renaissance-italy-and-uncovered-the-cubic)中争夺荣耀和声望。这些比赛导致了三次（立方）和四次（四次）多项式的解法的出现。但五次多项式呢？
- en: 'Let’s use SymPy to investigate a sample of polynomials:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用 SymPy 来研究一些多项式的样例：
- en: '![](../Images/0f3e71215f730a7a7cffd72d197facf6.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0f3e71215f730a7a7cffd72d197facf6.png)'
- en: For polynomials up to degree four, we can always find closed-form elementary
    solutions. Specifically, these solutions require only a finite expression of basic
    arithmetic operations and roots (such as square roots or cube roots).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于四次及以下的多项式，我们总是能找到闭式的初等解。具体来说，这些解只需要有限的基本算术运算和根式（如平方根或立方根）的表达式。
- en: The number of solutions will never exceed the degree of the polynomial. However,
    some solutions may involve *i*, the square root of −1, which represents complex
    numbers. More on that in a moment.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 解的个数永远不会超过多项式的次数。然而，某些解可能涉及 *i*，即 −1 的平方根，代表复数。稍后会详细介绍这一点。
- en: And what about degree-five polynomials and beyond? Can we always find closed-form
    solutions? The answer is mixed. Sometimes, we can. When a closed-form solution
    exists — for example, for *x*⁵+1=0 above — SymPy typically finds it.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，对于五次及更高次的多项式呢？我们能否总是找到闭式解？答案是复杂的。有时我们可以。当存在闭式解时——例如上面 *x*⁵+1=0 —— SymPy 通常能够找到它。
- en: However, in other cases, such as with *x*⁵-*x*-1=0, SymPy cannot find a closed-form,
    elementary solution. Évariste Galois famously demonstrated the impossibility of
    closed-form solutions for general higher-degree polynomial. However, SymPy’s failure
    on a specific equation is not a proof that no closed-form solution exists. So,
    for this example, we add a question mark and answer “No?”.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在其他情况下，例如 *x*⁵-*x*-1=0，SymPy 无法找到闭式的初等解。Évariste Galois 以证明高次多项式一般无法找到闭式解而闻名。然而，SymPy
    在某个特定方程上的失败并不等于不存在闭式解。所以，对于这个例子，我们加上一个问号，并回答“不？”
- en: 'To explore further, let’s see exactly what SymPy does when given *x*⁵-*x*-1=0:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步探讨，我们来看看 SymPy 在给定 *x*⁵-*x*-1=0 时到底做了什么：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output is:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果是：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Yikes! SymPy is clearly cheating here. It’s saying, “Oh, you want a closed form?
    No problem! I’ll just define a new, one-off function called `CRootOf(x**5 - x
    - 1, 0)` and call that the answer.”
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！SymPy 显然在作弊。它在说：“哦，你想要闭式解？没问题！我只需定义一个新的临时函数 `CRootOf(x**5 - x - 1, 0)`，然后就把它当作答案了。”
- en: This is cheating because it doesn’t answer the question of interest. SymPy is
    essentially giving a new name to an unsolved problem and claiming success.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这算是作弊，因为它并没有回答我们真正关心的问题。SymPy 本质上是给一个未解决的问题起了个新名字，并声称已经解决。
- en: 'SymPy, of course, has good reasons for producing its answer this way. For one
    thing, we can now easily find a numerical solution:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，SymPy 以这种方式给出答案是有充分理由的。首先，我们现在可以轻松找到一个数值解：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Prints `1.16730397826142`.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 输出 `1.16730397826142`。
- en: '**Solutions Even When No Real Solutions Exist:** One surprising thing about
    polynomial equations is that you can always find solutions — at least numerically
    — even when no real solutions exist!'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**即使没有实数解，仍然有解**：关于多项式方程的一件令人惊讶的事是，即使没有实数解，你仍然可以找到解——至少在数值上！'
- en: 'Consider this simple equation of degree two:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个简单的二次方程：
- en: '*x*² + 1 = 0'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*x*² + 1 = 0'
- en: If we plot this equation, it never crosses the *x*-axis, indicating no real
    solutions.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们绘制这个方程，它永远不会与 *x* 轴相交，表明没有实数解。
- en: '![](../Images/58fc36a03afc02e8aa37b6758d984eb1.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/58fc36a03afc02e8aa37b6758d984eb1.png)'
- en: 'However, using SymPy, we can find numerical solutions for any polynomial. For
    example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用SymPy，我们可以为任何多项式找到数值解。例如：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Which prints: `[-1.0*I, 1.0*I]`.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这会打印出：`[-1.0*I, 1.0*I]`。
- en: Notice that the solutions use *i* (the imaginary unit), meaning they are complex
    numbers. This is an illustration of the [Fundamental Theorem of Algebra](https://en.wikipedia.org/wiki/Fundamental_theorem_of_algebra),
    which states that every (non-constant) polynomial equation has at least one complex
    solution, even when no real solutions exist.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，解中使用了 *i*（虚数单位），这意味着它们是复数。这是[代数基本定理](https://en.wikipedia.org/wiki/Fundamental_theorem_of_algebra)的一个例子，该定理表明每个（非常数）多项式方程都有至少一个复数解，即使没有实数解。
- en: 'The takeaway: unless complex numbers are meaningful in your domain, you should
    ignore complex solutions.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 重点：除非复数在你的领域中有意义，否则你应该忽略复数解。
- en: 'To summarize polynomials:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 总结多项式：
- en: '**Degree four and below**: There is always a closed-form solution involving
    basic arithmetic operations and roots.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**四次及以下的次数**：总是存在一个封闭形式的解，涉及基本的算术运算和根。'
- en: '**Degree five and above**: Generally, no closed-form solution exists using
    elementary operations, though SymPy occasionally finds one.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**五次及以上的次数**：通常，使用基本运算无法找到封闭形式的解，尽管SymPy偶尔能找到一个。'
- en: '**Solutions**: Polynomials will always have solutions — at least numerically
    — but these solutions may not be real (both mathematically and practically). You
    should typically ignore them unless complex numbers are meaningful in your domain.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解**：多项式总是有解——至少在数值上——但这些解可能不是实数（无论是数学上还是实际中）。除非复数在你的领域中有意义，否则通常应忽略这些解。'
- en: Next, we’ll add exponentials and logarithms to our equations. In the solutions,
    we discover the Lambert *W* function. Is it a CRootOf-like cheat?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在方程中加入指数和对数。在解中，我们发现了Lambert *W* 函数。这是类似 CRootOf 的技巧吗？
- en: Exp, Log and x
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Exp, Log 和 x
- en: 'When we model data mathematically, we often use exponentials and logarithms.
    Below is a sample of what happens when we try to reverse such models by solving
    their equations with SymPy:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们用数学模型来表示数据时，我们通常使用指数和对数。下面是我们尝试通过SymPy解方程来逆向这些模型时发生的情况：
- en: '![](../Images/6335c6c8cc5569c6cfff858a6b6b4634.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6335c6c8cc5569c6cfff858a6b6b4634.png)'
- en: 'Observations:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 观察：
- en: '**Sometimes you get lucky**: The first equation *x*e*ˣ*=0 has an elementary
    solution *x*=0\. While this isn’t always the case, simple closed-form solutions
    can sometimes be found, even in equations involving exponentials or logarithms.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有时你会运气好**：第一个方程 *x*e*ˣ*=0 有一个初等解 *x*=0。虽然并非总是如此，但即使是涉及指数或对数的方程，有时也能找到简单的封闭形式解。'
- en: '**Every equation in this “family” appears to be solvable, with two caveats:**
    First, I can’t precisely define this family and am unsure if a clear definition
    is possible. Second, solving these equations requires the Lambert *W* function,
    such as *W(1)* and *W₋₁(1/10)*. This function arises when *x* appears both inside
    and outside of an exponential (or logarithmic) expression.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**这个“家族”中的每个方程似乎都能求解，但有两个警告**：首先，我不能精确定义这个家族，也不确定是否可能有明确的定义。其次，求解这些方程需要Lambert
    *W* 函数，例如 *W(1)* 和 *W₋₁(1/10)*。当 *x* 同时出现在指数（或对数）表达式的内外时，这个函数就会出现。'
- en: '**If you don’t accept *W*, you can’t solve these functions in closed form**:
    Equations in this “family” generally have no closed-form elementary solutions
    without the Lambert *W* function.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果你不接受 *W*，你无法以封闭形式解这些函数**：这个“家族”中的方程通常没有封闭的初等解，除非使用Lambert *W* 函数。'
- en: '**We should accept *W*:** The Lambert *W* function is a well-defined, easily
    computable function with applications across math and science. Its late adoption
    relative to *exp*, *log*, *sin*, and *cos* is simply historical.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我们应该接受 *W***：Lambert *W* 函数是一个定义明确、易于计算的函数，在数学和科学中有广泛应用。相对于 *exp*、*log*、*sin*
    和 *cos* 函数，它的晚期采用只是历史原因。'
- en: '**A single *W* can generate multiple solutions**: Similar to how the square
    root function can produce two solutions, a *W* expression can yield zero, one,
    or two real solutions. When two real solutions exist, SymPy lists them separately,
    representing one as *W* (the principal branch) and the other as *W₋₁* (the secondary
    branch). Beyond the real solutions, any *W* expression also generates an infinite
    number of complex solutions.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单一的*W*可以产生多个解：** 类似于平方根函数可以产生两个解，*W*表达式也可以产生零个、一个或两个实数解。当存在两个实数解时，SymPy会将它们分别列出，表示一个为*W*（主分支），另一个为*W₋₁*（次分支）。除了实数解之外，任何*W*表达式还会生成无限多个复数解。'
- en: '**Complex solutions will arise**: Some equations, such as *x* log(*x*)+1=0,
    lead to only complex solutions. As with polynomials, you should ignore complex
    numbers unless they are meaningful in your domain.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复数解将出现：** 一些方程，如*x* log(*x*)+1=0，只会得到复数解。与多项式一样，除非复数在您的领域中有意义，否则应忽略复数。'
- en: '**Degree-five and higher polynomials mixed with exp (or log) remain unsolvable**:
    Even with special functions like the Lambert *W* function, degree-five and higher
    polynomials cannot be solved in closed form using elementary functions.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**五次及更高次的多项式与指数（或对数）的混合仍然无法求解：** 即使使用像Lambert *W*函数这样的特殊函数，五次及更高次的多项式也不能通过初等函数求解封闭形式。'
- en: 'What happens if we use both an exponential and a logarithm in the same equation?
    Generally, we won’t find a closed-form solution — not even with the Lambert *W*
    function:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在同一个方程中同时使用指数和对数会怎样？通常，我们不会找到封闭形式的解——即使使用Lambert *W*函数：
- en: '![](../Images/5829be0bc9a1cd84c0b62c9c3ce9049f.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5829be0bc9a1cd84c0b62c9c3ce9049f.png)'
- en: To summarize, combining exponentials or logarithms with polynomials typically
    makes the equation unsolvable by traditional closed-form methods. However, if
    we allow the Lambert *W* function, equations with exponentials or logarithms (but
    not both) become solvable. We should embrace *W* as a valid tool for handling
    such cases.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，将指数或对数与多项式结合通常会使方程无法通过传统的封闭形式方法求解。然而，如果我们允许使用Lambert *W*函数，含有指数或对数（但不能同时含有两者）的方程是可以求解的。我们应当将*W*视为处理此类问题的有效工具。
- en: Next, let’s generalize Kepler’s problem and see what happens when we introduce
    trigonometric functions into our equations.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们对开普勒问题进行推广，看看当我们将三角函数引入方程时会发生什么。
- en: Trigonometric Equations
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三角方程
- en: '**Simple Trigonometric Equations:** Here is our first batch of trigonometric
    samples:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**简单三角方程：** 这是我们第一批三角函数样本：'
- en: '![](../Images/4cd22357d32d194a39711f98d4d3e16e.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4cd22357d32d194a39711f98d4d3e16e.png)'
- en: SymPy successfully finds closed-form elementary solutions for each equation.
    The solutions involve trigonometric functions, and in some cases, complex numbers
    appear. (Again, we typically ignore the complex solutions unless they are meaningful
    for the problem at hand.)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: SymPy成功地为每个方程找到了封闭形式的初等解。解中涉及三角函数，在某些情况下，复数也会出现。（同样，除非它们对于当前问题有意义，否则我们通常忽略复数解。）
- en: Keep in mind that sine and cosine are periodic, which leads to infinitely many
    solutions. The closed-form solutions that SymPy provides typically represent a
    single cycle.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，正弦和余弦是周期性的，这导致了无限多个解。SymPy提供的封闭形式解通常表示一个单一周期。
- en: '**Commensurate Frequency Equations:** In the preceding equations, we limited
    the trigonometric function’s input to *x*+*b*, where *b* is a constant. What happens
    if we allow inputs like *a*₁*x*+*b*₁ and *a*₂*x*+*b*₂ where *a*₁ is rational and
    *a*₂ is rational? This means the two periodic functions may have different frequencies
    but those frequences can synchronize. (The *a*’s are the frequencies.) We say
    our trigonometric functions have “commensurate frequencies.”'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**同频率方程：** 在之前的方程中，我们将三角函数的输入限制为*x*+*b*，其中*b*是常数。如果我们允许类似*a*₁*x*+*b*₁和*a*₂*x*+*b*₂这样的输入，其中*a*₁是有理数，*a*₂也是有理数，会发生什么？这意味着两个周期函数可能具有不同的频率，但这些频率可以同步。（*a*代表频率。）我们称这些三角函数具有“同频率”。'
- en: '![](../Images/b94534cad076b5a3afdff21207d78ded.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b94534cad076b5a3afdff21207d78ded.png)'
- en: 'Observations:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 观察：
- en: We occasionally get a closed-form elementary solution.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们偶尔会得到一个封闭形式的初等解。
- en: On sin(*x*) + sin(3*x*)+1=0, SymPy returns zero solutions. Plots and numerical
    methods, however, suggest solutions exist. Moreover, when I input [sin(x) + sin(3x)+1=0
    into WolframAlpha](https://www.wolframalpha.com/input?i=sin%28x%29+%2B+sin%283x%29+%2B+1+%3D+0%2C+solve+for+x),
    an on-line computer algebra system, it produces hybrid solutions. (The WolframAlpha
    solutions combine elementary functions with **CRootOf** expressions of degree
    six. As we discussed in the polynomial section, such expressions generally lack
    a closed-form solution.)
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于sin(*x*) + sin(3*x*)+1=0，SymPy返回零解。然而，图表和数值方法表明存在解。此外，当我将[sin(x) + sin(3x)+1=0输入到WolframAlpha](https://www.wolframalpha.com/input?i=sin%28x%29+%2B+sin%283x%29+%2B+1+%3D+0%2C+solve+for+x)，一个在线计算代数系统时，它产生混合解。（WolframAlpha的解将基本函数与六次**CRootOf**表达式结合起来。正如我们在多项式部分讨论的那样，这种表达式通常缺乏封闭形式解。）
- en: SymPy sometimes times out looking for a closed-form solution when numerical
    methods can still provide solutions.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SymPy有时会超时寻找封闭形式解，但数值方法仍然可以提供解决方案。
- en: In other cases, it times out, and both numerical methods and plots confirm there
    are no solutions. Before, instead of no numerical solution, we’d get a complex
    number solution. [WolframAlpha does give [a complex numerical solution](https://www.wolframalpha.com/input?i=sin%283x%29+*+sin%28x+%2B+1%29+%2B1+%3D+0%2C+solve+for+x).]
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在其他情况下，它会超时，数值方法和图表都确认没有解决方案。之前，我们得到的是复数解，而不是没有数值解。[WolframAlpha确实给出了[一个复数数值解](https://www.wolframalpha.com/input?i=sin%283x%29+*+sin%28x+%2B+1%29+%2B1+%3D+0%2C+solve+for+x)。]
- en: Let’s plot the equation that returned zero closed-formed solutions. Let’s also
    plot the one that numerically returned `ValueError:`
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们绘制返回零封闭形式解的方程。让我们也绘制返回数值错误的方程。
- en: '![](../Images/8d65d0f9096833b9596b900a53b9acf7.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8d65d0f9096833b9596b900a53b9acf7.png)'
- en: 'Additional Observations:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 其他观察：
- en: From the blue plot, SymPy’s response of “no solutions” appears to be a bug.
    There are clearly solutions in the plot, and SymPy should either have found them
    or thrown an exception.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从蓝色绘图中，SymPy的“无解”响应似乎是一个错误。图中显然有解，SymPy应该要么找到它们，要么抛出异常。
- en: On the other hand, in the red plot, the numerical result of `ValueError` is
    accurate. There are no solutions.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，在红色绘图中，`ValueError`的数值结果是准确的。没有解决方案。
- en: For all the trigonometric equations we’ve encountered so far, SymPy seems to
    find real-valued closed-form solutions when they exist. When they don’t exist,
    it times out or gives unpredictable errors.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，对于我们遇到的所有三角方程，当存在时，SymPy似乎会找到实值封闭形式解。当不存在时，它会超时或产生不可预测的错误。
- en: '**Non-Commensurate Frequency Equations:** In the preceding equations, we allowed
    trigonometric functions with inputs of the form *ax*+*b*​, where *a*​ is a rational
    constant. What happens if we allow inputs like *a*₁*x*+*b*₁ and *a*₂*x*+*b*₂ where
    *a*₁ is rational and *a*₂ is irrational? This means the two periodic functions
    will never synchronize. We say they have “non-commensurate frequencies.”'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**非共振频率方程：** 在前述方程中，我们允许带有形式为*ax*+*b*的三角函数，其中*a*是有理常数。如果我们允许像*a*₁*x*+*b*₁和*a*₂*x*+*b*₂这样的输入，其中*a*₁是有理数而*a*₂是无理数会发生什么呢？这意味着两个周期函数永远不会同步。我们称它们具有“非共振频率”。'
- en: '![](../Images/8040ccb39120f11492d4509551c293aa.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8040ccb39120f11492d4509551c293aa.png)'
- en: 'Observations:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 观察：
- en: Equations with two trigonometric functions having non-commensurate frequencies
    generally seem unsolvable in closed form. When no elementary solution is available,
    SymPy returns `NotImplementedError.`
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有两个具有非共振频率的三角函数的方程通常在封闭形式中似乎是不可解的。当没有元素解可用时，SymPy返回`NotImplementedError`。
- en: We can still get lucky and occasionally find an equation with an elementary
    solution. In the case above, in which SymPy returned `PolynomialDivisionFailed`,
    [WolframAlpha found a closed-form solution](https://www.wolframalpha.com/input?i=sin%28sqrt%283%29*x%29+%2B+sin%28x%2B1%29%3D+0%2C+solve+for+x).
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们仍然有可能偶然找到一个具有元素解的方程。在上述情况中，SymPy返回`PolynomialDivisionFailed`，[WolframAlpha找到了封闭形式解](https://www.wolframalpha.com/input?i=sin%28sqrt%283%29*x%29+%2B+sin%28x%2B1%29%3D+0%2C+solve+for+x)。
- en: When an equation has no solutions, SymPy produces a `ValueError`, which we can
    confirm through plots (see below). We did not see complex-number results in these
    cases.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当方程没有解时，SymPy会产生`ValueError`，我们可以通过图表确认（见下文）。在这些情况下，我们没有看到复数结果。
- en: '![](../Images/f8314a07ca7e67d95fc55e8deb6699b6.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f8314a07ca7e67d95fc55e8deb6699b6.png)'
- en: The equations do not quite touch zero, so no solutions
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方程未能接近零，因此没有解。
- en: Our conclusion regarding trigonometric equations is that we can often find elementary
    closed-form solutions. The main exception seems to be when the frequencies are
    non-commensurate — for example, in an equation containing sin(*x*) and sin⁡(√3
    *x*).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们关于三角方程的结论是，我们通常可以找到基础的封闭形式解。主要的例外似乎是当频率不成比例时——例如，在包含sin(*x*)和sin⁡(√3 *x*)的方程中。
- en: The final question we’ll explore is what happens when we mix trigonometric functions
    with exponentials and logarithms.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要探索的最后一个问题是，当我们将三角函数与指数和对数混合时，会发生什么。
- en: Trigonometric and x, Exp, Log
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三角函数与x、Exp、Log
- en: Our final set of samples will require only a short discussion. What if we run
    a sample of equations through SymPy, each equation containing one trigonometric
    function combined with either *x*, exp(*x*), or log(*x*)?
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一组样本只需要简短的讨论。如果我们将一组包含一个三角函数并与*x*、exp(*x*)或log(*x*)相结合的方程通过SymPy进行求解会怎样？
- en: '![](../Images/80176233339aefc1eed8143e46e7479b.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/80176233339aefc1eed8143e46e7479b.png)'
- en: 'The results are unanimous: SymPy is unable to produce closed-form solutions
    for any of these combinations. However, it seems that SymPy should have produced
    *x*=0 as the closed-form solution for the first equation, as indeed [WolframAlpha
    does](https://www.wolframalpha.com/input?i=x%2Bsin%28x%29%3D0%2C+solve).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是一致的：SymPy无法为这些组合产生封闭形式的解。然而，SymPy应该为第一个方程产生*x*=0的封闭形式解，正如[WolframAlpha所做](https://www.wolframalpha.com/input?i=x%2Bsin%28x%29%3D0%2C+solve)的那样。
- en: Conclusion
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: So, there you have it — an exploration of which equations tend to lack closed-form
    solutions. If you’re interested in experimenting with the examples in this article,
    you can find my [Python code on GitHub](https://github.com/CarlKCarlK/unsolvable).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这就是结果——一个关于哪些方程往往缺乏封闭形式解的探索。如果你有兴趣实验本文中的示例，可以在我的[GitHub代码库](https://github.com/CarlKCarlK/unsolvable)找到相关代码。
- en: 'As I worked through these sample equations, here is what surprised me:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在我处理这些示例方程时，以下是让我感到惊讶的事情：
- en: '**Kepler’s Equation is wonderfully simple.** I didn’t know one could model
    anellipse — a geometric shape I find complicated — with such elegance.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开普勒方程非常简单。**我不知道可以如此优雅地建模一个我认为很复杂的几何形状——椭圆。'
- en: '**Lambert’s *W* function** proved to be invaluable for handling equations that
    mix terms like *x* and exp⁡(*x*). We should consider it an elementary function.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Lambert的*W*函数**证明在处理混合项如*x*和exp⁡(*x*)的方程时是极其宝贵的。我们应该将其视为一个基础函数。'
- en: '**SymPy** is an excellent, free tool that handles symbolic algebra and trigonometric
    equations far better than many of us could handle manually. While it may not match
    WolframAlpha in some cases, it’s incredibly versatile and accessible.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SymPy**是一个出色的免费工具，它处理符号代数和三角方程的能力远超我们许多人手动解决的水平。尽管在某些情况下它可能不如WolframAlpha，但它非常多功能且易于使用。'
- en: '**Mixing trigonometric functions** with other terms frequently prevents closed-form
    solutions, especially when frequencies are non-commensurate.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将三角函数与其他项混合**常常会阻碍封闭形式解的产生，尤其是当频率不成比例时。'
- en: When closed-form solutions remain out of reach, **plotting and numerical methods**
    step in, delivering practical results.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当封闭形式的解无法获得时，**绘图和数值方法**发挥了作用，提供了实际结果。
- en: Thank you for joining me on this journey. I hope you now have a clearer understanding
    of when you can use equation-solving techniques to reverse models and how much
    SymPy can assist. Also, when an equation resists a closed-form solution, you can
    now understand why and when to rely on numerical methods.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你和我一起踏上这段旅程。我希望你现在更清楚地理解了在何时可以使用方程求解技巧来逆推模型，以及SymPy可以提供多少帮助。同时，当方程无法得到封闭形式解时，你现在也能理解为什么以及何时依赖数值方法。
- en: If you enjoyed exploring **mathematics** with Python and SymPy, you may also
    enjoy using them to explore **Newtonian physics**. Please see this[Towards Data
    Science article](https://medium.com/towards-data-science/perfect-infinite-precision-game-physics-in-python-part-1-698211c08d95)
    and the related, popular [PyData conference talk](https://www.youtube.com/watch?v=52n2qKgwW_Q).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢用Python和SymPy探索**数学**，你可能也会喜欢用它们来探索**牛顿物理学**。请查看这篇[Towards Data Science文章](https://medium.com/towards-data-science/perfect-infinite-precision-game-physics-in-python-part-1-698211c08d95)以及相关的流行[PyData会议演讲](https://www.youtube.com/watch?v=52n2qKgwW_Q)。
- en: '*Interested in future articles? Please* [*follow me on Medium*](https://medium.com/@carlmkadie)*.
    I write about Rust and Python, scientific programming, machine learning, and statistics.
    I tend to write about one article per month.*'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '*对未来的文章感兴趣吗？请* [*在Medium上关注我*](https://medium.com/@carlmkadie)*。我写关于Rust和Python、科学编程、机器学习和统计学的内容。我通常每个月写一篇文章。*'
