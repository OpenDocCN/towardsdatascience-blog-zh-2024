- en: Choosing Between LLM Agent Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在LLM代理框架之间进行选择
- en: 原文：[https://towardsdatascience.com/choosing-between-llm-agent-frameworks-69019493b259?source=collection_archive---------0-----------------------#2024-09-21](https://towardsdatascience.com/choosing-between-llm-agent-frameworks-69019493b259?source=collection_archive---------0-----------------------#2024-09-21)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/choosing-between-llm-agent-frameworks-69019493b259?source=collection_archive---------0-----------------------#2024-09-21](https://towardsdatascience.com/choosing-between-llm-agent-frameworks-69019493b259?source=collection_archive---------0-----------------------#2024-09-21)
- en: '*The tradeoffs between building bespoke code-based agents and the major agent
    frameworks.*'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*构建定制基于代码的代理与主要代理框架之间的权衡。*'
- en: '[](https://aparnadhinak.medium.com/?source=post_page---byline--69019493b259--------------------------------)[![Aparna
    Dhinakaran](../Images/e431ee69563ecb27c86f3428ba53574c.png)](https://aparnadhinak.medium.com/?source=post_page---byline--69019493b259--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--69019493b259--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--69019493b259--------------------------------)
    [Aparna Dhinakaran](https://aparnadhinak.medium.com/?source=post_page---byline--69019493b259--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://aparnadhinak.medium.com/?source=post_page---byline--69019493b259--------------------------------)[![Aparna
    Dhinakaran](../Images/e431ee69563ecb27c86f3428ba53574c.png)](https://aparnadhinak.medium.com/?source=post_page---byline--69019493b259--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--69019493b259--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--69019493b259--------------------------------)
    [Aparna Dhinakaran](https://aparnadhinak.medium.com/?source=post_page---byline--69019493b259--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--69019493b259--------------------------------)
    ·12 min read·Sep 21, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--69019493b259--------------------------------)
    ·12分钟阅读·2024年9月21日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/7f41def86bbb86b6e740c349eac8b70e.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7f41def86bbb86b6e740c349eac8b70e.png)'
- en: Image by author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '*Thanks to John Gilhuly for his contributions to this piece.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢John Gilhuly对本文的贡献。*'
- en: Agents are having a moment. With multiple new frameworks and fresh [investment](https://foundationcapital.com/goodbye-aiops-welcome-agentsres-the-next-100b-opportunity/)
    in the space, modern AI agents are overcoming [shaky origins](https://arxiv.org/html/2405.13966v1)
    to rapidly supplant RAG as an implementation priority. So will 2024 finally be
    the year that autonomous AI systems that can take over writing our emails, booking
    flights, talking to our data, or seemingly any other task?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 代理正处于一个重要时刻。随着多个新框架和新的[投资](https://foundationcapital.com/goodbye-aiops-welcome-agentsres-the-next-100b-opportunity/)的涌入，现代AI代理正在克服[动摇的起源](https://arxiv.org/html/2405.13966v1)，迅速取代RAG成为实施优先事项。那么，2024年是否终于会成为自动化AI系统的元年，这些系统可以接管撰写电子邮件、预订航班、与我们的数据对话，甚至是其他任何任务呢？
- en: Maybe, but much work remains to get to that point. Any developer building an
    agent must not only choose foundations — which model, use case, and architecture
    to use — but also which framework to leverage. Do you go with the long-standing
    LangGraph, or the newer entrant LlamaIndex Workflows? Or do you go the traditional
    route and code the whole thing yourself?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 也许，但还有很多工作需要完成才能到达那个点。任何构建代理的开发者不仅需要选择基础架构——选择使用哪个模型、使用场景和架构——还需要选择利用哪个框架。你是选择长期存在的LangGraph，还是选择新兴的LlamaIndex工作流？或者你选择传统方式，自己编写整个代码？
- en: This post aims to make that choice a bit easier. Over the past few weeks, I
    built the same agent in major frameworks to examine some of the strengths and
    weaknesses of each at a technical level. All of the code for each agent is available
    in [this repo](https://github.com/Arize-ai/phoenix/tree/main/examples/agent_framework_comparison).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本文旨在让这个选择变得更加容易。在过去的几周里，我在主要的框架中构建了相同的代理，以从技术层面考察每个框架的优缺点。每个代理的所有代码都可以在[这个仓库](https://github.com/Arize-ai/phoenix/tree/main/examples/agent_framework_comparison)中找到。
- en: Background on the Agent Used for Testing
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于测试的代理背景
- en: The agent used for testing includes function calling, multiple tools or skills,
    connections to outside resources, and shared state or memory.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 用于测试的代理包括函数调用、多个工具或技能、与外部资源的连接以及共享的状态或记忆。
- en: 'The agent has the following capabilities:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该代理具有以下功能：
- en: Answering questions from a knowledge base
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从知识库回答问题
- en: 'Talking to data: answering questions about telemetry data of an LLM application'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与数据对话：回答关于LLM应用程序遥测数据的问题
- en: 'Analyzing data: analyzing higher-level trends and patterns in retrieved telemetry
    data'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据分析：分析检索到的遥测数据中的更高层次的趋势和模式
- en: 'In order to accomplish these, the agent has three starting skills: RAG with
    product documentation, SQL generation on a trace database, and data analysis.
    A simple gradio-powered interface is used for the agent UI, with the agent itself
    structured as a chatbot.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这些目标，代理有三个初始技能：使用产品文档的RAG、在跟踪数据库上生成SQL、以及数据分析。代理UI使用一个简单的Gradio驱动界面，代理本身则构建为一个聊天机器人。
- en: Code-Based Agent (No Framework)
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于代码的代理（无框架）
- en: The first option you have when developing an agent is to skip the frameworks
    entirely and build the agent fully yourself. When embarking on this project, this
    was the approach I started with.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发代理时，你的第一个选择是完全跳过框架，完全自己构建代理。在开始这个项目时，这就是我选择的方式。
- en: '![](../Images/d10a779ccc5d91bfa0325de4b2665e86.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d10a779ccc5d91bfa0325de4b2665e86.png)'
- en: Image by author
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Pure Code Architecture
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 纯代码架构
- en: The code-based agent below is made up of an OpenAI-powered router that uses
    function calling to select the right skill to use. After that skill completes,
    it returns back to the router to either call another skill or respond to the user.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的基于代码的代理由一个OpenAI驱动的路由器组成，它使用函数调用来选择要使用的正确技能。在该技能完成后，它返回路由器，继续调用另一个技能或回应用户。
- en: The agent keeps an ongoing list of messages and responses that is passed fully
    into the router on each call to preserve context through cycles.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 代理会保持一份持续更新的消息和响应列表，每次调用路由器时，都会将其完整传入，以便在多个周期中保持上下文。
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The skills themselves are defined in their own classes (e.g. GenerateSQLQuery)
    that are collectively held in a SkillMap. The router itself only interacts with
    the SkillMap, which it uses to load skill names, descriptions, and callable functions.
    This approach means that adding a new skill to the agent is as simple as writing
    that skill as its own class, then adding it to the list of skills in the SkillMap.
    The idea here is to make it easy to add new skills without disturbing the router
    code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 技能本身在各自的类中定义（例如：GenerateSQLQuery），这些类统一保存在SkillMap中。路由器本身只与SkillMap交互，使用它加载技能名称、描述和可调用的函数。这种方法意味着，向代理中添加新技能就像编写该技能的类一样简单，然后将其添加到SkillMap中的技能列表中。这里的想法是使添加新技能变得容易，而不干扰路由器的代码。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Overall, this approach is fairly straightforward to implement but comes with
    a few challenges.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，这种方法相对简单易实现，但也存在一些挑战。
- en: Challenges with Pure Code Agents
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 纯代码代理的挑战
- en: The first difficulty lies in structuring the router system prompt. Often, the
    router in the example above insisted on generating SQL itself instead of delegating
    that to the right skill. If you’ve ever tried to get an LLM *not* to do something,
    you know how frustrating that experience can be; finding a working prompt took
    many rounds of debugging. Accounting for the different output formats from each
    step was also tricky. Since I opted not to use structured outputs, I had to be
    ready for multiple different formats from each of the LLM calls in my router and
    skills.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个难点在于构建路由器系统提示。通常，上述例子中的路由器坚持自己生成SQL，而不是将这一任务委托给合适的技能。如果你曾试图让LLM*不*做某件事，你就会知道这个过程是多么令人沮丧；找到有效的提示语经历了多轮调试。考虑到每个步骤的不同输出格式也很棘手。由于我选择不使用结构化输出，我必须为路由器和技能中的每个LLM调用准备应对不同格式的输出。
- en: Benefits of a Pure Code Agent
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 纯代码代理的优势
- en: A code-based approach provides a good baseline and starting point, offering
    a great way to learn how agents work without relying on canned agent tutorials
    from prevailing frameworks. Although convincing the LLM to behave can be challenging,
    the code structure itself is simple enough to use and might make sense for certain
    use cases (more in the analysis section below).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 基于代码的方法提供了一个很好的基础和起点，提供了一种很好的方式来学习代理是如何工作的，而不依赖于现有框架中的现成代理教程。虽然让LLM表现如预期可能有些挑战，但代码结构本身足够简单，适用于某些特定的使用场景（详细分析见下文）。
- en: LangGraph
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LangGraph
- en: LangGraph is one of the longest-standing agent frameworks, first releasing in
    January 2024\. The framework is built to address the acyclic nature of existing
    pipelines and chains by adopting a Pregel graph structure instead. LangGraph makes
    it easier to define loops in your agent by adding the concepts of nodes, edges,
    and conditional edges to traverse a graph. LangGraph is built on top of LangChain,
    and uses the objects and types from that framework.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: LangGraph是最早期的代理框架之一，首次发布于2024年1月。该框架旨在通过采用Pregel图结构来解决现有管道和链的无环性质问题。LangGraph通过将节点、边和条件边的概念添加到图中，使得定义代理中的循环变得更加容易。LangGraph建立在LangChain之上，使用该框架的对象和类型。
- en: '![](../Images/08d1c12009b7fdd2a59ea76f527eeee7.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/08d1c12009b7fdd2a59ea76f527eeee7.png)'
- en: Image by author
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: LangGraph Architecture
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LangGraph架构
- en: The LangGraph agent looks similar to the code-based agent on paper, but the
    code behind it is drastically different. LangGraph still uses a “router” technically,
    in that it calls OpenAI with functions and uses the response to continue to a
    new step. However the way the program moves between skills is controlled completely
    differently.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从表面上看，LangGraph代理与代码基础代理相似，但其背后的代码截然不同。LangGraph仍然技术上使用“路由器”，通过函数调用OpenAI，并使用响应继续执行新步骤。然而，程序在技能之间的切换方式完全不同。
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The graph defined here has a node for the initial OpenAI call, called “agent”
    above, and one for the tool handling step, called “tools.” LangGraph has a built-in
    object called ToolNode that takes a list of callable tools and triggers them based
    on a ChatMessage response, before returning to the “agent” node again.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此处定义的图有一个节点用于初始的OpenAI调用，称为上面的“agent”，还有一个节点用于工具处理步骤，称为“tools”。LangGraph有一个内置的对象叫做ToolNode，它接收一个可调用工具的列表，并根据ChatMessage响应触发这些工具，然后再返回到“agent”节点。
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After each call of the “agent” node (put another way: the router in the code-based
    agent), the should_continue edge decides whether to return the response to the
    user or pass on to the ToolNode to handle tool calls.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用“agent”节点后（换句话说：代码基础代理中的路由器），`should_continue`边缘决定是否将响应返回给用户，还是传递给ToolNode以处理工具调用。
- en: Throughout each node, the “state” stores the list of messages and responses
    from OpenAI, similar to the code-based agent’s approach.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个节点中，“state”存储了来自OpenAI的消息和响应列表，类似于代码基础代理的方法。
- en: Challenges with LangGraph
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LangGraph的挑战
- en: Most of the difficulties with LangGraph in the example stem from the need to
    use Langchain objects for things to flow nicely.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 示例中与LangGraph相关的大多数困难都源于需要使用Langchain对象来确保流程顺畅。
- en: '**Challenge #1: Function Call Validation**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**挑战 #1：函数调用验证**'
- en: In order to use the ToolNode object, I had to refactor most of my existing Skill
    code. The ToolNode takes a list of callable functions, which originally made me
    think I could use my existing functions, however things broke down due to my function
    parameters.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用ToolNode对象，我不得不重构我现有的技能代码。ToolNode接收一个可调用函数的列表，最初我以为可以直接使用现有的函数，然而由于我的函数参数问题，程序出现了错误。
- en: The skills were defined as classes with a callable member function, meaning
    they had “self” as their first parameter. GPT-4o was smart enough to not include
    the “self” parameter in the generated function call, however LangGraph read this
    as a validation error due to a missing parameter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些技能被定义为具有可调用成员函数的类，意味着它们的第一个参数是“self”。虽然GPT-4o足够聪明，能够在生成的函数调用中不包含“self”参数，但LangGraph将其视为一个验证错误，因为缺少该参数。
- en: 'This took hours to figure out, because the error message instead marked the
    third parameter in the function (“args” on the data analysis skill) as the missing
    parameter:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这花了我几个小时才弄明白，因为错误信息却将函数中的第三个参数（在数据分析技能中的“args”）标记为缺失的参数：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It is worth mentioning that the error message originated from Pydantic, not
    from LangGraph.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，错误信息源自Pydantic，而非LangGraph。
- en: I eventually bit the bullet and redefined my skills as basic methods with Langchain’s
    @tool decorator, and was able to get things working.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我下定决心重新定义我的技能，使用Langchain的@tool装饰器，并且成功使其工作。
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Challenge #2: Debugging**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**挑战 #2：调试**'
- en: As mentioned, debugging in a framework is difficult. This primarily comes down
    to confusing error messages and abstracted concepts that make it harder to view
    variables.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，调试框架非常困难。主要原因是令人困惑的错误信息和抽象的概念，使得查看变量变得更加困难。
- en: The abstracted concepts primarily show up when trying to debug the messages
    being sent around the agent. LangGraph stores these messages in state[“messages”].
    Some nodes within the graph pull from these messages automatically, which can
    make it difficult to understand the value of messages when they are accessed by
    the node.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象概念主要在尝试调试代理发送的消息时出现。LangGraph 将这些消息存储在 state[“messages”] 中。图中的一些节点会自动从这些消息中提取内容，这可能使得理解节点访问消息时消息的值变得困难。
- en: '![](../Images/14b7cf88b1c2547c64d82b735e16a194.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/14b7cf88b1c2547c64d82b735e16a194.png)'
- en: '*A sequential view of the agent’s actions (image by author)*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*代理行为的顺序视图（图片由作者提供）*'
- en: LangGraph Benefits
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LangGraph 的优势
- en: One of the main benefits of LangGraph is that it’s easy to work with. The graph
    structure code is clean and accessible. Especially if you have complex node logic,
    having a single view of the graph makes it easier to understand how the agent
    is connected together. LangGraph also makes it straightforward to convert an existing
    application built in LangChain.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: LangGraph 的主要优势之一是它易于使用。图结构代码简洁且易于访问。特别是当你有复杂的节点逻辑时，拥有一个单一的图视图可以更容易理解代理是如何互相连接的。LangGraph
    还使得将现有的基于 LangChain 构建的应用程序转化为此结构变得非常简单。
- en: Takeaway
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重点总结
- en: If you use everything in the framework, LangGraph works cleanly; if you step
    outside of it, prepare for some debugging headaches.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用框架中的所有内容，LangGraph 工作得很干净；如果你跳出框架，准备好面对一些调试上的困难。
- en: LlamaIndex Workflows
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LlamaIndex 工作流
- en: Workflows is a newer entrant into the agent framework space, premiering earlier
    this summer. Like LangGraph, it aims to make looping agents easier to build. Workflows
    also has a particular focus on running asynchronously.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Workflows 是一个较新的代理框架，首次亮相是在今年夏天。像 LangGraph 一样，它旨在让构建循环代理变得更容易。Workflows 还特别关注异步执行。
- en: Some elements of Workflows seem to be in direct response to LangGraph, specifically
    its use of events instead of edges and conditional edges. Workflows use steps
    (analogous to nodes in LangGraph) to house logic, and emitted and received events
    to move between steps.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流中的一些元素似乎是直接响应 LangGraph 的，特别是它使用事件而非边缘和条件边缘。工作流使用步骤（类似于 LangGraph 中的节点）来包含逻辑，并通过发射和接收事件在步骤之间进行转换。
- en: '![](../Images/26b9e664d6cce92214a956f0faf4f485.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/26b9e664d6cce92214a956f0faf4f485.png)'
- en: Image by author
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: The structure above looks similar to the LangGraph structure, save for one addition.
    I added a setup step to the Workflow to prepare the agent context, more on this
    below. Despite the similar structure, there is very different code powering it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的结构看起来与 LangGraph 结构相似，唯一的不同是我为工作流添加了一个设置步骤来准备代理上下文，更多内容请见下文。尽管结构相似，但其背后驱动的代码是完全不同的。
- en: Workflows Architecture
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作流架构
- en: The code below defines the Workflow structure. Similar to LangGraph, this is
    where I prepared the state and attached the skills to the LLM object.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码定义了工作流结构。与 LangGraph 类似，这里是我准备状态并将技能附加到 LLM 对象上的地方。
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is also where I define an extra step, “prepare_agent”. This step creates
    a ChatMessage from the user input and adds it to the workflow memory. Splitting
    this out as a separate step means that we do return to it as the agent loops through
    steps, which avoids repeatedly adding the user message to the memory.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这里也是我定义额外步骤“prepare_agent”的地方。这个步骤根据用户输入创建一个ChatMessage，并将其添加到工作流的记忆中。将其作为一个独立的步骤意味着我们在代理循环执行步骤时会返回到这个步骤，这样可以避免重复将用户消息添加到记忆中。
- en: In the LangGraph case, I accomplished the same thing with a run_agent method
    that lived outside the graph. This change is mostly stylistic, however it’s cleaner
    in my opinion to house this logic with the Workflow and graph as we’ve done here.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 LangGraph 的情况下，我通过一个位于图外的 run_agent 方法实现了相同的功能。这个改变主要是风格上的，然而我认为将这些逻辑与工作流和图结构一起处理会更简洁一些，正如我们在这里所做的。
- en: 'With the Workflow set up, I then defined the routing code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好工作流后，我定义了路由代码：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And the tool call handling code:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 还有工具调用处理代码：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Both of these look more similar to the code-based agent than the LangGraph agent.
    This is mainly because Workflows keeps the conditional routing logic in the steps
    as opposed to in conditional edges — lines 18–24 were a conditional edge in LangGraph,
    whereas now they are just part of the routing step — and the fact that LangGraph
    has a ToolNode object that does just about everything in the tool_call_handler
    method automatically.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这两者与基于代码的代理相比，更像是`LangGraph`代理。这主要是因为`Workflows`将条件路由逻辑保留在步骤中，而不是条件边中——在`LangGraph`中，第18至24行是一个条件边，而现在它们只是路由步骤的一部分——而`LangGraph`有一个`ToolNode`对象，几乎自动完成`tool_call_handler`方法中的所有操作。
- en: Moving past the routing step, one thing I was very happy to see is that I could
    use my SkillMap and existing skills from my code-based agent with Workflows. These
    required no changes to work with Workflows, which made my life much easier.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由步骤之后，有一件事让我非常高兴，那就是我可以使用我的`SkillMap`和基于代码的代理中的现有技能与`Workflows`配合使用。这些技能无需任何修改就能与`Workflows`一起工作，这让我的工作变得更加轻松。
- en: Challenges with Workflows
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Workflows`的挑战'
- en: '**Challenge #1: Sync vs Async**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**挑战 #1：同步与异步**'
- en: While asynchronous execution is preferable for a live agent, debugging a synchronous
    agent is much easier. Workflows is designed to work asynchronously, and trying
    to force synchronous execution was very difficult.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然实时代理更倾向于使用异步执行，但调试同步代理要容易得多。`Workflows`是为了异步执行而设计的，强行实现同步执行非常困难。
- en: I initially thought I would just be able to remove the “async” method designations
    and switch from “achat_with_tools” to “chat_with_tools”. However, since the underlying
    methods within the Workflow class were also marked as asynchronous, it was necessary
    to redefine those in order to run synchronously. I ended up sticking to an asynchronous
    approach, but this didn’t make debugging more difficult.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我最初以为只需要去掉“async”方法标记，并将“achat_with_tools”改为“chat_with_tools”就可以了。然而，由于`Workflow`类中的底层方法也被标记为异步，因此必须重新定义这些方法以便同步执行。我最终还是坚持使用异步方法，但这并没有使调试变得更加困难。
- en: '![](../Images/86bb92ce7e47d92f16d5fb9bdcadc985.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/86bb92ce7e47d92f16d5fb9bdcadc985.png)'
- en: '*A sequential view of the agent’s actions (image by author)*'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*代理操作的顺序视图（图像由作者提供）*'
- en: '**Challenge #2: Pydantic Validation Errors**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**挑战 #2：Pydantic验证错误**'
- en: 'In a repeat of the woes with LangGraph, similar problems emerged around confusing
    Pydantic validation errors on skills. Fortunately, these were easier to address
    this time since Workflows was able to handle member functions just fine. I ultimately
    just ended up having to be more prescriptive in creating LlamaIndex FunctionTool
    objects for my skills:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 与`LangGraph`的问题重演，类似的问题出现在技能的Pydantic验证错误上。幸运的是，这次比较容易解决，因为`Workflows`能够很好地处理成员函数。我最终只是不得不在为我的技能创建`LlamaIndex
    FunctionTool`对象时更加严格：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Excerpt from AgentFlow.__init__ that builds FunctionTools*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*`AgentFlow.__init__`中构建`FunctionTools`的摘录*'
- en: Benefits of Workflows
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`Workflows`的优点'
- en: I had a much easier time building the Workflows agent than I did the LangGraph
    agent, mainly because Workflows still required me to write routing logic and tool
    handling code myself instead of providing built-in functions. This also meant
    that my Workflow agent looked extremely similar to my code-based agent.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我构建`Workflows`代理的难度远低于构建`LangGraph`代理，主要是因为`Workflows`仍然需要我自己编写路由逻辑和工具处理代码，而不是提供内置函数。这也意味着我的`Workflow`代理与我的基于代码的代理非常相似。
- en: 'The biggest difference came in the use of events. I used two custom events
    to move between steps in my agent:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 最大的区别在于事件的使用。我使用了两个自定义事件在我的代理中各个步骤之间移动：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The emitter-receiver, event-based architecture took the place of directly calling
    some of the methods in my agent, like the tool call handler.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 事件驱动的发射器-接收器架构取代了在代理中直接调用一些方法，例如工具调用处理器。
- en: If you have more complex systems with multiple steps that are triggering asynchronously
    and might emit multiple events, this architecture becomes very helpful to manage
    that cleanly.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有更复杂的系统，包含多个异步触发并可能发出多个事件的步骤，那么这种架构在清晰地管理这些步骤时会非常有用。
- en: Other benefits of Workflows include the fact that it is very lightweight and
    doesn’t force much structure on you (aside from the use of certain LlamaIndex
    objects) and that its event-based architecture provides a helpful alternative
    to direct function calling — especially for complex, asynchronous applications.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`Workflows`的其他优点包括其非常轻量级，并且不会强制要求你使用太多结构（除了使用某些`LlamaIndex`对象），而且其基于事件的架构提供了一种有益的替代方法，替代了直接的函数调用——特别是在复杂的异步应用中。'
- en: Comparing Frameworks
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较框架
- en: Looking across the three approaches, each one has its benefits.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 看待这三种方法，每种都有其优点。
- en: The no framework approach is the simplest to implement. Because any abstractions
    are defined by the developer (i.e. SkillMap object in the above example), keeping
    various types and objects straight is easy. The readability and accessibility
    of the code entirely comes down to the individual developer however, and it’s
    easy to see how increasingly complex agents could get messy without some enforced
    structure.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 无框架的方法是最简单的实现方式。由于所有的抽象都是由开发者定义的（例如上例中的SkillMap对象），因此保持各种类型和对象的清晰非常容易。然而，代码的可读性和可访问性完全取决于个人开发者，且不难看出，随着代理的复杂性增加，若没有强制的结构，代码可能会变得混乱。
- en: LangGraph provides quite a bit of structure, which makes the agent very clearly
    defined. If a broader team is collaborating on an agent, this structure would
    provide a helpful way of enforcing an architecture. LangGraph also might provide
    a good starting point with agents for those not as familiar with the structure.
    There is a tradeoff, however — since LangGraph does quite a bit for you, it can
    lead to headaches if you don’t fully buy into the framework; the code may be very
    clean, but you may pay for it with more debugging.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: LangGraph提供了相当多的结构化，这使得代理的定义非常清晰。如果更大的团队在协作开发一个代理，这种结构将有助于强制执行架构。LangGraph对于不太熟悉结构的人来说，也可能是一个很好的起点。然而，这也存在权衡
    —— 由于LangGraph为你做了很多工作，如果你没有完全接受这个框架，可能会带来麻烦；代码可能非常干净，但你可能需要为此付出更多的调试工作。
- en: Workflows falls somewhere in the middle. The event-based architecture might
    be extremely helpful for some projects, and the fact that less is required in
    terms of using of LlamaIndex types provides greater flexibility for those not
    be fully using the framework across their application.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流位于中间位置。基于事件的架构对于某些项目可能非常有用，而且LlamaIndex类型的使用要求较少，为那些没有在整个应用程序中完全使用框架的人提供了更大的灵活性。
- en: '![](../Images/e4c647265b3453dd773d7ac32c1702b3.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e4c647265b3453dd773d7ac32c1702b3.png)'
- en: Image created by author
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者创建的图像
- en: Ultimately, the core question may just come down to “are you already using LlamaIndex
    or LangChain to orchestrate your application?” LangGraph and Workflows are both
    so entwined with their respective underlying frameworks that the additional benefits
    of each agent-specific framework might not cause you to switch on merit alone.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，核心问题可能只是“你是否已经在使用LlamaIndex或LangChain来协调你的应用程序？”LangGraph和工作流与各自的底层框架紧密相连，以至于每个代理特定框架的额外好处可能仅凭优点本身不足以让你做出切换决定。
- en: The pure code approach will likely always be an attractive option. If you have
    the rigor to document and enforce any abstractions created, then ensuring nothing
    in an external framework slows you down is easy.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 纯代码方法可能始终是一个有吸引力的选择。如果你有足够的严格性来文档化并执行任何创建的抽象，那么确保外部框架中的任何部分不会拖慢你是很容易的。
- en: Key Questions To Help In Choosing An Agent Framework
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择代理框架时的关键问题
- en: Of course, “it depends” is never a satisfying answer. These three questions
    should help you decide which framework to use in your next agent project.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，“这取决于情况”从来不是一个令人满意的答案。这三个问题应该能帮助你决定在下一个代理项目中使用哪个框架。
- en: '***Are you already using LlamaIndex or LangChain for significant pieces of
    your project?***'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '***你是否已经在项目中使用LlamaIndex或LangChain的重要部分？***'
- en: If yes, explore that option first.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是，首先探索这个选项。
- en: '***Are you familiar with common agent structures, or do you want something
    telling you how you should structure your agent?***'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '***你熟悉常见的代理结构吗，还是希望有某些指导来告诉你如何构建代理？***'
- en: If you fall into the latter group, try Workflows. If you *really* fall into
    the latter group, try LangGraph.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你属于后者，尝试工作流。如果你*真的*属于后者，尝试LangGraph。
- en: '***Has your agent been built before?***'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '***你的代理是否已经构建过？***'
- en: One of the framework benefits is that there are many tutorials and examples
    built with each. There are far fewer examples of pure code agents to build from.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 框架的一个好处是，每个框架都有许多教程和示例。纯代码代理的示例要少得多。
- en: '![](../Images/f8250fa7aea13c3785aeb32ecd006a74.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f8250fa7aea13c3785aeb32ecd006a74.png)'
- en: Image created by author
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 由作者创建的图像
- en: Conclusion
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Picking an agent framework is just one choice among many that will impact outcomes
    in production for generative AI systems. As always, it pays to have robust guardrails
    and [LLM tracing](https://docs.arize.com/phoenix/tracing/llm-traces) in place
    — and to be agile as new agent frameworks, research, and models upend established
    techniques.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个代理框架只是众多决策中的一项，它将影响生成式AI系统在生产中的结果。像往常一样，设置健全的防护措施和[LLM追踪](https://docs.arize.com/phoenix/tracing/llm-traces)是值得的——并且随着新的代理框架、研究和模型的出现，打破既有技术时要保持灵活性。
