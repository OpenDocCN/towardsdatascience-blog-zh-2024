- en: Data Science Better Practices, Part 2 — Work Together
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学最佳实践，第2部分 — 一起工作
- en: 原文：[https://towardsdatascience.com/data-science-better-practices-part-2-work-together-9ec019f8b79e?source=collection_archive---------8-----------------------#2024-01-05](https://towardsdatascience.com/data-science-better-practices-part-2-work-together-9ec019f8b79e?source=collection_archive---------8-----------------------#2024-01-05)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/data-science-better-practices-part-2-work-together-9ec019f8b79e?source=collection_archive---------8-----------------------#2024-01-05](https://towardsdatascience.com/data-science-better-practices-part-2-work-together-9ec019f8b79e?source=collection_archive---------8-----------------------#2024-01-05)
- en: You can’t just throw more data scientists at this model and expect the accuracy
    to magically increase.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 你不能仅仅投入更多的数据科学家来处理这个模型，并期待准确率神奇地提高。
- en: '[](https://medium.com/@scf1984?source=post_page---byline--9ec019f8b79e--------------------------------)[![Shachaf
    Poran](../Images/ac1ac57b8777c3441ad69358af1d649b.png)](https://medium.com/@scf1984?source=post_page---byline--9ec019f8b79e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--9ec019f8b79e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--9ec019f8b79e--------------------------------)
    [Shachaf Poran](https://medium.com/@scf1984?source=post_page---byline--9ec019f8b79e--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@scf1984?source=post_page---byline--9ec019f8b79e--------------------------------)[![Shachaf
    Poran](../Images/ac1ac57b8777c3441ad69358af1d649b.png)](https://medium.com/@scf1984?source=post_page---byline--9ec019f8b79e--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--9ec019f8b79e--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--9ec019f8b79e--------------------------------)
    [Shachaf Poran](https://medium.com/@scf1984?source=post_page---byline--9ec019f8b79e--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--9ec019f8b79e--------------------------------)
    ·10 min read·Jan 5, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--9ec019f8b79e--------------------------------)
    ·阅读时间10分钟·2024年1月5日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/779611b5d766e019ee32e49510a48cf2.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/779611b5d766e019ee32e49510a48cf2.png)'
- en: 'Photo by Joseph Ruwa: [https://www.pexels.com/photo/set-of-chess-pieces-in-daylight-4038397/](https://www.pexels.com/photo/set-of-chess-pieces-in-daylight-4038397/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：Joseph Ruwa：[https://www.pexels.com/photo/set-of-chess-pieces-in-daylight-4038397/](https://www.pexels.com/photo/set-of-chess-pieces-in-daylight-4038397/)
- en: '[(Part 1 is here)](/data-science-better-practices-part-1-test-your-queries-629ad5209f28)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[(第一部分在这里)](/data-science-better-practices-part-1-test-your-queries-629ad5209f28)'
- en: Not all data science projects were created equal.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有的数据科学项目都一样。
- en: The vast majority of data science projects I’ve seen and built were born as
    a throw-away proof-of-concept. Temporary one-off hacks to make something tangentially
    important work.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我所见过和构建的大多数数据科学项目，最初都是作为一次性证明概念的快速实现而诞生的。临时的单次性解决方案，用来让一些边缘性的工作得以完成。
- en: Some of these projects might end up becoming something else, perhaps a bit bigger
    or more central in helping the organization’s goal.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些项目最终可能会变成别的东西，也许会变得更大或在帮助组织目标实现方面更为核心。
- en: Only a select few get to grow and mature over long periods of time.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 只有少数项目能够在长期内不断成长和成熟。
- en: These special projects are usually those that solve a problem of special interest
    to the organization. For example, a CTR predictor for an online advertising network,
    or an image segmentation model for a visual effects generator, or a profanity
    detector for a content filtering service*.*
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特别的项目通常是解决对组织具有特殊意义的问题。例如，在线广告网络的CTR预测器，或视觉效果生成器的图像分割模型，或内容过滤服务的脏话检测器*。*
- en: These are also the ones that will see considerable company resources used to
    optimize them, and rightly so. When even a minor improvement of some accuracy
    metric can be directly responsible for higher revenue or be the make-or-breaker
    of product launches and funding rounds — the organization should spare no expense.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些项目也通常会投入大量公司资源进行优化，理应如此。当某些准确性指标的微小改进可以直接带来更高的收入，或成为产品发布和融资轮次的成败关键时——组织应该毫不吝啬地投入资源。
- en: The resource we’re talking about in this post is **Data Scientists**.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这篇文章中讨论的资源是**数据科学家**。
- en: If you’ve never managed a project, a team, a company or such — it might sound
    strange to treat people as a “resource”. However keep in mind that these are *experts
    with limited time to offer, and we use this time to accomplish tasks that benefit
    the organization*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从未管理过一个项目、一个团队或公司，可能会觉得把人当作“资源”来对待有些奇怪。但请记住，这些是*有着有限时间的专家，我们利用他们的时间完成有益于组织的任务*。
- en: 'Now take note: ***resources have to be managed, and their use should be optimized***.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在请注意：***资源必须被管理，并且它们的使用应当得到优化***。
- en: Once a model becomes so big and central that more than a couple of Data Scientists
    work on improving it, it’s crucial to make sure that they can work on it without
    stepping on each other’s toes, blocking each other, or otherwise impeding each
    other’s work. Rather, team members should be able to help each other easily, and
    build on each other’s successes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦某个模型变得足够大并且如此核心，以至于有多个数据科学家共同致力于改进它，就必须确保他们能够在不相互干扰、不阻碍对方的情况下进行工作。相反，团队成员应当能够轻松地互相帮助，并在彼此的成功基础上进行建设。
- en: The common practice I witnessed in various places is that each member in the
    team tries their own “thing”. Depending on the peculiarities of the project, that
    may mean different models, optimization algorithms, deep learning architectures,
    engineered features, and so on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我在不同地方见过的常见做法是，每个团队成员尝试自己的“东西”。根据项目的特殊性，这可能意味着不同的模型、优化算法、深度学习架构、工程特征等。
- en: This mode of work may seem to be perpendicular between members as each of them
    can work separately and no dependencies are created that may impede or block one’s
    progress.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作模式在成员之间可能看起来是垂直的，因为每个人都可以独立工作，不会创造出可能阻碍或阻挡他人进展的依赖关系。
- en: However, that’s not entirely the case, as I’ve [ranted](https://digma.ai/blog/coding-horrors-refactoring-and-feature-creep/)
    before.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，情况并非完全如此，正如我曾经在[这里抱怨过](https://digma.ai/blog/coding-horrors-refactoring-and-feature-creep/)。
- en: For example, if a team member strikes gold with a particularly lucrative feature,
    other members might want to try and use the same feature in their models.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果某个团队成员在某个特别有价值的特征上发现了重要突破，其他成员可能希望在他们的模型中尝试使用相同的特征。
- en: At some point in time a specific model might show a leap in performance, and
    quite quickly we’ll have branched versions of that best model, each slightly different
    from the next. This is because optimization processes tend to search for better
    optimums in the vicinity of the current optimum — not only with gradient descent
    but also with human invention.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时间点，一个特定的模型可能会表现出性能的飞跃，很快我们会看到基于那个最佳模型的分支版本，每个版本与下一个稍有不同。这是因为优化过程往往会在当前最优解的附近寻找更好的最优解——不仅仅是通过梯度下降，也包括通过人类的创造力。
- en: This scenario will probably lead to much higher coupling and more dependencies
    than previously anticipated.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况可能会导致比预期更高的耦合性和更多的依赖关系。
- en: Even if we do make sure that not all Data Scientists converge this way, we should
    still try to standardize their work, perhaps enforcing a contract with downstream
    consumers to ease deployment as well as to save Machine Learning Engineers time.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 即便我们确保不是所有数据科学家都朝着同一个方向收敛，我们仍然应该尝试标准化他们的工作，可能还需要强制执行与下游使用者的合同，以便简化部署并节省机器学习工程师的时间。
- en: The premise
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提
- en: We would like to have the Data Scientists work on the same problem in a way
    that allows independence on the one hand, but allows reuse of other’s work at
    the same time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望数据科学家们能够以一种既允许独立工作，又能同时重用他人工作的方式来解决相同的问题。
- en: For the sake of examples we’ll assume we are members of a team working on the
    [Iris flower data set](https://archive.ics.uci.edu/dataset/53/iris). This means
    that the training data will be small enough to hold in a pandas dataframe in memory,
    though the tools we come up with might be applied to any type and size of data.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了举例说明，我们假设自己是一个团队的成员，正在处理[Iris 花卉数据集](https://archive.ics.uci.edu/dataset/53/iris)。这意味着训练数据足够小，可以放入内存中的
    pandas 数据框中，尽管我们提出的工具可以应用于任何类型和规模的数据。
- en: We would like to allow creative freedom, which means that each member is at
    full liberty to choose their modeling framework — be it `scikit-learn`, `Keras`,
    Python-only logic, etc.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够允许创造性的自由，这意味着每个成员可以完全自由地选择自己的建模框架——无论是`scikit-learn`、`Keras`、仅用 Python
    的逻辑等。
- en: Our main tool will be the abstraction of the process applied with OOP principles,
    and the normalization of work of individuals into a unified language.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要工具将是应用面向对象编程（OOP）原则的过程抽象，以及将个人的工作标准化为统一的语言。
- en: Disclaimer
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 免责声明
- en: In this post, I am going to exemplify how one could abstract the Data Science
    process to facilitate teamwork. The main point is *not* the specific abstraction
    we’ll come up with. The main point is that ***data science managers and leaders
    should strive to facilitate data scientists’ work***, be it by abstraction, protocols,
    version control, process streamlining, or any other method.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将举例说明如何将数据科学过程抽象化，以便促进团队协作。重点*不是*我们所提出的具体抽象。重点是***数据科学经理和领导者应努力促进数据科学家的工作***，无论是通过抽象、协议、版本控制、流程简化或其他任何方法。
- en: '*This blog post is in no way promoting* [*reinventing the wheel*](https://en.wikipedia.org/wiki/Reinventing_the_wheel)*.
    The choice whether to use an off-the-shelf product, open source tools, or developing
    an in-house solution should be made together with the data science and machine
    learning engineering teams that are relevant to the project.*'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '*这篇博客文章绝不是在提倡* [*重新发明轮子*](https://en.wikipedia.org/wiki/Reinventing_the_wheel)*。是否使用现成的产品、开源工具或开发内部解决方案的决定，应当与与项目相关的数据科学和机器学习工程团队一起做出。*'
- en: Now that this is out of the way, let’s cut to the chase.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 既然这些已经处理完了，让我们直接切入正题。
- en: Start from the end
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从结尾开始
- en: 'When we’re done, we’d like to have a unified framework to take our model through
    the entire pipeline from training to prediction. So, we start with defining the
    common pipeline:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们希望有一个统一的框架来将我们的模型贯穿于整个流程，从训练到预测。因此，我们从定义公共流程开始：
- en: First we get **training data** as input.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们获取**训练数据**作为输入。
- en: We might want to extract additional **features** to enhance the dataset.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可能想提取额外的**特征**来增强数据集。
- en: We create a model and **train** it repeatedly until we’re satisfied with its
    loss or metrics.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个模型并**反复训练**，直到我们对其损失或指标满意为止。
- en: We then **save** the model to disk or any other persisting mechanism.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将**保存**模型到磁盘或其他持久化机制。
- en: We need to later **load** the model back to memory.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们稍后需要**加载**模型回到内存中。
- en: Then we can apply **prediction** on new unseen data.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以对新的、未见过的数据进行**预测**。
- en: 'Let’s declare a basic structure (aka interface) for a model according to the
    above pipeline:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 根据上述流程，我们来声明一个基本结构（即接口）供模型使用：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note that this is not much more than the interfaces we’re used to from existing
    frameworks — however, each framework has its own little quirks, for example in
    naming: “fit” vs. “train” or the way they persist the models on disk. Encapsulating
    the pipeline within a uniform structure saves us from having to add implementation
    details elsewhere, for example when using the different models in a deployment
    environment.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这与我们在现有框架中使用的接口没有太大区别——然而，每个框架都有其独特之处，例如命名上的差异：“fit”与“train”或它们如何在磁盘上持久化模型。将流程封装在统一的结构内，可以避免我们在其他地方添加实现细节，例如在使用不同的模型进行部署时。
- en: Now, once we’ve defined our basic structure, let’s discuss how we’d expect to
    actually use it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦我们定义了基本结构，让我们讨论一下我们实际如何使用它。
- en: System design
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统设计
- en: Features
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特征
- en: We’d like to have “features” as elements that can be easily passed around and
    added to different models. We should also acknowledge that there may be multiple
    features used for each model.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望“特征”作为可以轻松传递并添加到不同模型中的元素。我们还应当认识到，每个模型可能会使用多个特征。
- en: We’ll try to implement a sort of plugin infrastructure for our `Feature` class.
    We’ll have a base class for all features and then we can have the `Model` class
    materialize the different features sequentially in memory when it gets the input
    data.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试为我们的`Feature`类实现一种插件式的基础设施。我们会有一个所有特征的基类，然后`Model`类在接收到输入数据时，可以顺序地在内存中实例化不同的特征。
- en: Encapsulated models
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 封装的模型
- en: We’d also like to have actual models that we encapsulate in our system to be
    transferrable between team members. However we would like to keep the option to
    change model parameters without writing a lot of new code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还希望将实际的模型封装在我们的系统中，以便在团队成员之间进行传递。但我们希望保持能够在不写大量新代码的情况下更改模型参数的选项。
- en: We’ll abstract them in a different class and name it `ModelInterface` to aviod
    confusion with our `Model` class. The latter will in turn defer the relevant method
    invocations to the former.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会将它们抽象到一个不同的类中，并命名为`ModelInterface`，以避免与我们的`Model`类混淆。后者将转而将相关的方法调用委托给前者。
- en: Features
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特征
- en: Our features can be regarded as functions with a pandas dataframe as an input.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的特征可以视为以 pandas 数据框作为输入的函数。
- en: If we give each feature a unique name and encapsulate it with the same interface
    as the others, we can allow the reuse of these features quite easily.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们为每个特征提供一个唯一名称，并将其封装在与其他特征相同的接口中，我们可以非常容易地重用这些特征。
- en: 'Let’s define a base class:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个基类：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And let’s create an implementation, for example sepal diagonal length:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个实现，比如花萼对角线长度：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We will use an instance of this class, and so I create a separate file where
    I store all features:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个类的一个实例，因此我创建了一个单独的文件来存储所有特征：
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This specific implementation already presents a few decisions we made, whether
    conscious or not:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定的实现已经展示了一些我们做出的决策，无论是有意识的还是无意识的：
- en: The name of the output column is a literal within the function code, and is
    not saved elsewhere. This means that we can’t easily construct a list of known
    columns.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出列的名称是函数代码中的字面量，并未保存在其他地方。这意味着我们无法轻松构建已知列的列表。
- en: We chose to add the new column to the input dataframe within the add_feature
    function rather than return the column itself and then add it in an outer scope.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们选择在`add_feature`函数中将新列添加到输入数据框中，而不是返回列本身并在外部作用域中添加它。
- en: We do not know, other than by reading the function code, which columns this
    feature depends on. If we did, we could have constructed a DAG to decide on feature
    creation order.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不知道，除非通过阅读函数代码，哪些列依赖于这个特征。如果我们知道，我们可以构建一个有向无环图（DAG）来决定特征创建的顺序。
- en: At this point these decisions are easily reversible, however later when we have
    dozens of features built this way we may have to refactor all of them to apply
    a change to the base class. This is to say that **we should decide in advance
    what we expect from our system** as well as be aware of the implications of each
    choice.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，这些决策是容易可逆的，然而当我们建立了几十个这样的特征后，我们可能不得不重构所有这些特征，以便对基类进行更改。也就是说，**我们应该提前决定我们期望系统的表现**，并且意识到每个选择的影响。
- en: 'Let’s expand on our `Model` base class by implementing the `add_features` function:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过实现`add_features`函数来扩展我们的`Model`基类：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now anyone can take the `sepal_diagonal` feature and use it when creating a
    model instance.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，任何人都可以在创建模型实例时使用`sepal_diagonal`特征。
- en: If we didn’t facilitate reusing these features with our abstraction, Alice might
    choose to copy Bob’s logic and change it around a bit to fit with her preprocessing,
    applying different naming on the way, and generally **inflating technical debt**.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有通过抽象来方便地重用这些特征，Alice 可能会选择复制 Bob 的逻辑，并稍作修改以适应她的预处理，同时在过程中使用不同的命名，通常会**增加技术债务**。
- en: A question that may arise is “What about common operations, like addition. Do
    we need to implement an addition each time we want to use it?”.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 可能出现的问题是“那常见操作，比如加法呢？我们每次想使用加法时都需要实现一个加法吗？”。
- en: 'The answer is no. For this we may use the instance fields through the self
    parameter:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是否定的。为此，我们可以通过`self`参数使用实例字段：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So if, for example, we want to add petal length and petal width, we’ll create
    an instance with `petal_sum = AdditionFeature('petalLength', 'petalWidth', 'petalSum')`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，如果我们想要添加花瓣长度和花瓣宽度，我们会通过`petal_sum = AdditionFeature('petalLength', 'petalWidth',
    'petalSum')`来创建一个实例。
- en: For each operator/function you might have to implement a class, which may seem
    intimidating at first, but you will quickly find that the list is quite short.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个操作符/函数，你可能需要实现一个类，乍一看这可能让人觉得很有压力，但你会很快发现，这个列表相当简短。
- en: Model interface
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型接口
- en: 'Here is the abstraction I use for model interfaces:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我为模型接口使用的抽象：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And here’s an example implementation by using a `scikit-learn` model is given
    below:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里给出了一个使用`scikit-learn`模型的示例实现：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, the code is mainly about delegating the different actions to
    the ready-made model. In `train` and `predict` we also translate the target to
    and fro between an enumerated value and a one-hot encoded vector, practically
    between our business need and `scikit-learn`’s interface.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，代码主要是将不同的操作委托给现成的模型。在`train`和`predict`中，我们还将目标值在枚举值和独热编码向量之间来回转换，实际上是在我们的业务需求和`scikit-learn`的接口之间转换。
- en: 'We can now update our `Model` class to accommodate a `ModelInterface` instance.
    Here it is in full:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以更新我们的`Model`类，以适应`ModelInterface`实例。完整代码如下：
- en: '[PRE8]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Once again, I create a file to curate my models and have this line in it:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我创建了一个文件来管理我的模型，并在其中包含这一行：
- en: '[PRE9]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This `best_model_so_far` is a reusable instance, however note that it is not
    trained. To have a reusable trained model instance we’ll need to persist the model.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`best_model_so_far`是一个可重用的实例，但请注意它并未经过训练。要获得一个可重用的训练过的模型实例，我们需要将模型持久化。
- en: Save and load
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保存和加载
- en: I choose to omit the specifics of save and load from this post as it is getting
    wordy, however feel free to check out my [clean data science github repository](https://github.com/scf1984/clean-data-science/tree/main/team_cooperation)
    for a fully operational Hey example.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择在本帖中省略保存和加载的细节，因为内容已经有些冗长，但欢迎查看我的[清洁数据科学 GitHub 仓库](https://github.com/scf1984/clean-data-science/tree/main/team_cooperation)，里面有一个完整操作的Hey示例。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The framework proposed in this post is definitely not a one-size-fits-all solution
    to the problem of standardizing a Data Science team’s work on a single model,
    nor should it be treated as one. Each project has its own nuances and niches that
    should be addressed.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本文提出的框架绝对不是一种适用于所有情况的解决方案，来规范数据科学团队在单个模型上的工作，也不应被视为一种。每个项目都有其独特的细节和需求，这些都需要特别处理。
- en: Rather, the framework proposed here should merely be used as a basis for further
    discussion, putting the subject of ***facilitating Data Scientist work*** in the
    spotlight.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，本文提出的框架应该仅仅作为进一步讨论的基础，把***促进数据科学家工作的主题***放在聚光灯下。
- en: Streamlining the work should be a goal set by Data Science team leaders and
    managers in general, and abstractions are just one item in the toolbox.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 精简工作流程应该是数据科学团队领导和经理们的一项目标，而抽象只是工具箱中的一项内容。
- en: FAQ
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: 'Q: Shouldn’t you use a Protocol instead of ABC if all you need is a specific
    functionality from your subclasses?'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 问：如果你只需要从子类获取特定功能，难道不应该使用协议（Protocol）而不是ABC吗？
- en: 'A: I could, but this is not an advanced Python class. There’s a Hebrew saying
    “The pedant can’t teach”. So, there you go.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 答：我可以这样做，但这不是一个高级的Python课程。有句希伯来谚语说：“书呆子无法教书。”所以，你懂的。
- en: 'Q: What about dropping features? That’s important too!'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 问：那删除特征呢？这也很重要啊！
- en: 'A: Definitely. And you may choose where to drop them! You may use a parameterized
    `Feature` implementation to drop columns or have it done in the `ModelInterface`
    class, for example.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 答：当然可以。你可以选择将它们存放在哪里！你可以使用一个带参数的`Feature`实现来删除列，或者在`ModelInterface`类中完成，例如。
- en: 'Q: What about measuring the models against each other?'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 问：那如何衡量模型之间的表现呢？
- en: 'A: It will be awesome to have some higher-level mechanism to track model metrics.
    That’s out of scope for this post.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 答：有一个更高级的机制来跟踪模型的指标将非常棒。这个问题超出了本帖的范围。
- en: 'Q: How do I keep track of trained models?'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 问：我如何跟踪已训练的模型？
- en: 'A: This could be a list of paths where you saved the trained models. Make sure
    to give them meaningful names.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 答：这可以是你保存训练模型的路径列表。确保给它们起个有意义的名字。
- en: 'Q: Shouldn’t we also abstract the dataset creation (before we pass it to the
    `train` function)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 问：我们是不是也应该将数据集的创建抽象出来（在传递给`train`函数之前）？
- en: 'A: I was going to get around to it, but then I took an arrow in the knee. But
    yeah, it’s a swell idea to have different samples of the full dataset, or just
    multiple datasets that we can pass around like we do with features and model interfaces.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 答：我本来打算提到这个的，但后来我膝盖中箭了。不过，是的，拥有不同的完整数据集样本，或者是我们像处理特征和模型接口一样可以传递的多个数据集，确实是个不错的主意。
- en: 'Q: Aren’t we making it hard on data scientists?'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 问：我们是不是在给数据科学家增加难度？
- en: 'A: We should weigh the pros and cons on this matter. Though it takes some time
    to get used to the restrictive nature of this abstraction, it may save loads of
    time down the line.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 答：我们应该权衡这件事的利弊。虽然习惯于这种抽象的限制性可能需要一些时间，但从长远来看，它可能会节省大量时间。
