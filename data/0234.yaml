- en: Arrays in Python and Excel VBA
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 和 Excel VBA 中的数组
- en: 原文：[https://towardsdatascience.com/arrays-in-python-and-excel-vba-efd73b649d6d?source=collection_archive---------14-----------------------#2024-01-23](https://towardsdatascience.com/arrays-in-python-and-excel-vba-efd73b649d6d?source=collection_archive---------14-----------------------#2024-01-23)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/arrays-in-python-and-excel-vba-efd73b649d6d?source=collection_archive---------14-----------------------#2024-01-23](https://towardsdatascience.com/arrays-in-python-and-excel-vba-efd73b649d6d?source=collection_archive---------14-----------------------#2024-01-23)
- en: Learning about arrays through simple examples
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过简单的例子学习数组
- en: '[](https://medium.com/@himalaya.birshrestha?source=post_page---byline--efd73b649d6d--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page---byline--efd73b649d6d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--efd73b649d6d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--efd73b649d6d--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page---byline--efd73b649d6d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@himalaya.birshrestha?source=post_page---byline--efd73b649d6d--------------------------------)[![Himalaya
    Bir Shrestha](../Images/9766140c1c44381029d0a78154217775.png)](https://medium.com/@himalaya.birshrestha?source=post_page---byline--efd73b649d6d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--efd73b649d6d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--efd73b649d6d--------------------------------)
    [Himalaya Bir Shrestha](https://medium.com/@himalaya.birshrestha?source=post_page---byline--efd73b649d6d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--efd73b649d6d--------------------------------)
    ·8 min read·Jan 23, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--efd73b649d6d--------------------------------)
    ·阅读时间 8 分钟·2024 年 1 月 23 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: As someone without a formal education in programming, my journey has been shaped
    by self-learning. Recognizing the significance of revisiting basic programming
    concepts, I have found that a solid foundation enhances the overall programming
    experience. In this tutorial, we will delve into one such fundamental concept
    — arrays. Specifically, we’ll explore the concept of arrays in both Python and
    Excel VBA through simple examples. Let’s get started.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个没有接受过正式编程教育的人，我的编程旅程一直由自学塑造。意识到回顾基础编程概念的重要性，我发现扎实的基础能够提升整体编程体验。在本教程中，我们将深入探讨一个基本概念——数组。具体来说，我们将通过简单的例子，探讨
    Python 和 Excel VBA 中的数组概念。让我们开始吧。
- en: '![](../Images/f66043ed20c7b741ea145dcadfe8031d.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f66043ed20c7b741ea145dcadfe8031d.png)'
- en: Photo by [Nathan Dumlao](https://unsplash.com/@nate_dumlao?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Nathan Dumlao](https://unsplash.com/@nate_dumlao?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '**1\. Arrays in Python**'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1\. Python 中的数组**'
- en: An array is a special variable that can hold one or multiple values of any data
    type. In Python, there is [no built-in support](https://www.w3schools.com/python/python_arrays.asp)
    for arrays, unlike similar data types such as lists. However, one can create arrays
    using the array module of the [numpy](https://numpy.org/doc/stable/index.html)
    package. The index of a numpy array object always starts with a 0\. The last item
    inside a numpy array can be accessed by referring to -1\. A numpy array can hold
    variables of a particular data type or multiple data types.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是一个特殊的变量，可以保存一个或多个任何数据类型的值。在 Python 中，与类似的数据类型（如列表）不同，[没有内置的数组支持](https://www.w3schools.com/python/python_arrays.asp)。然而，可以使用
    [numpy](https://numpy.org/doc/stable/index.html) 包的 array 模块来创建数组。numpy 数组对象的索引总是从
    0 开始。可以通过引用 -1 来访问 numpy 数组中的最后一个项。一个 numpy 数组可以包含某一特定数据类型的变量或多种数据类型。
- en: This is shown in the code snippet below. The snippet also shows how the shape
    (dimensions i.e., rows, columns), size (number of elements) and length (number
    of items in a container i.e., rows) can be accessed from a numpy array.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段展示了这一点。代码片段还展示了如何从 numpy 数组中访问形状（维度，即行、列）、大小（元素个数）和长度（容器中的项目数量，即行数）。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**1.1 Using numpy arrays for algebraic matrix operations**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**1.1 使用 numpy 数组进行代数矩阵运算**'
- en: Because of their flexible structure, numpy arrays are very handy in creating
    matrix objects of different dimensions and performing operations on them. The
    screenshot above has the examples of 1-dimensional array objects.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其灵活的结构，numpy 数组在创建不同维度的矩阵对象并对其进行操作时非常方便。上面的截图展示了 1 维数组对象的例子。
- en: Below, I have created two array objects `a` and `b` both of which are 2-dimensional
    arrays. They can be considered as 2*2 matrices. Performing the dot product of
    the two matrices is as simple as doing just `np.dot(a, b)`. In dot product, `a`
    and `b` are regarded as vectors (objects having both magnitude and direction).
    In matrix multiplication, each element in matrix `a` is multiplied with the corresponding
    element in matrix `b`. For example, a11 (first row, first column item) is multiplied
    by b11, and so on.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面，我创建了两个数组对象 `a` 和 `b`，它们都是二维数组，可以看作是 2*2 的矩阵。计算这两个矩阵的点积就像执行 `np.dot(a, b)`
    一样简单。在点积中，`a` 和 `b` 被视为向量（既有大小又有方向的对象）。在矩阵乘法中，矩阵 `a` 中的每个元素与矩阵 `b` 中对应的元素相乘。例如，a11（第一行第一列的元素）与
    b11 相乘，以此类推。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Furthermore, one can perform other matrix operations such as addition, subtraction,
    and transpose. To get the determinant of the matrix, one can use `np.linalg.det(a)`.
    To get the multiplicative inverse of a matrix, one can use `np.linalg.inv(a)`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以执行其他矩阵操作，如加法、减法和转置。要获得矩阵的行列式，可以使用 `np.linalg.det(a)`。要获得矩阵的乘法逆，可以使用 `np.linalg.inv(a)`。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**1.2 Creating a m*n shape numpy array from list objects**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**1.2 从列表对象创建 m*n 形状的 numpy 数组**'
- en: I have two lists called `countries_lived` and `capitals` which contain the list
    of countries I have lived in and their corresponding capitals.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我有两个列表，分别叫做 `countries_lived` 和 `capitals`，它们包含我曾居住过的国家及其对应的首都。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: To create an array containing these list objects, I can use `np.array([countries_lived,
    capitals])`. This will return me an array of shape 2*4 (i.e., 2 rows and 4 columns).
    If I want to have a single country and its corresponding capital in the same row,
    I can just transpose the same array.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个包含这些列表对象的数组，我可以使用 `np.array([countries_lived, capitals])`。这将返回一个形状为 2*4（即
    2 行 4 列）的数组。如果我希望每一行包含一个国家及其对应的首都，我只需转置该数组即可。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 1.3 Appending an item to a numpy array and creating a dataframe
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3 向 numpy 数组追加一个元素并创建一个 dataframe
- en: Say I want to append an item France and Paris to `array2` as an additional row,
    this can be done using the syntax `np.append(arr, values, axis = None)`. The values
    must be of the same shape as `arr`, excluding the axis. If the axis is not given,
    both arr and values are flattened before use.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，我想将 France 和 Paris 作为新的一行追加到 `array2` 中，可以使用语法 `np.append(arr, values, axis
    = None)` 来实现。values 必须与 `arr` 具有相同的形状，轴（axis）除外。如果未指定轴，arr 和 values 会在使用之前被展平。
- en: As shown below, I appended the new item as a new row to the array. Finally,
    the `array2` of shape (5,2) is used to create a dataframe object `df` with Country
    and Capital columns.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示，我将新元素作为新的一行追加到数组中。最后，形状为 (5,2) 的 `array2` 被用来创建一个包含 Country 和 Capital 列的数据框对象
    `df`。
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 2\. Arrays in Excel VBA
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2. Excel VBA 中的数组
- en: Similar to Python, arrays are also a collection of variables in Excel VBA. The
    lower bound for arrays can start from either 0 or 1 in Excel VBA. The default
    lower bound is 0\. However, the lower bounds for arrays can be specified by stating
    `Option Base 0` or `Option Base 1` on the top ofeach module.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Python 类似，Excel VBA 中的数组也是一组变量。数组的下界可以从 0 或 1 开始，Excel VBA 的默认下界是 0。但是，可以通过在每个模块顶部声明
    `Option Base 0` 或 `Option Base 1` 来指定数组的下界。
- en: To detect the lower bound and upper bound used for an array, one can use `Lbound(array_name)`
    and `Ubound(array_name)` respectively.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要检测数组的下界和上界，可以分别使用 `Lbound(array_name)` 和 `Ubound(array_name)`。
- en: '**2.1 Declaring an array**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.1 声明数组**'
- en: Arrays can be declared publicly (i.e. globally) by using the `Public` keyword.
    Declaring an array or any other variable publicly in Excel VBA allows it to be
    used in any module or subroutine without declaring again.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以通过使用 `Public` 关键字声明为公共（即全局）数组。在 Excel VBA 中将数组或任何其他变量声明为公共变量，允许在任何模块或子程序中使用，无需重新声明。
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Alternatively, arrays can be declared locally inside a subroutine simply using
    the `Dim` keyword. These arrays can then be used only inside the specific subroutine.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，数组也可以在子程序内局部声明，只需使用 `Dim` 关键字即可。这样声明的数组只能在特定的子程序内部使用。
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the above examples, the size of the arrays is also specified. Specifying
    1 to 4 or only 4 both imply the array of size 4.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，数组的大小也被指定。指定1到4或仅指定4都表示数组的大小为4。
- en: '**2.2 One-dimensional array**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.2 一维数组**'
- en: A one-dimensional array is assigned by declaring the number of rows (e.g., 1
    to 5) i.e., the number of elements to be contained by an array. An example of
    creating a 1-dimensional array of the four countries I have lived in is given
    below. It will print the name of these countries in column A in the worksheet
    of the Excel file.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一维数组是通过声明行数（例如，从1到5），即数组包含的元素数量来赋值的。下面给出了一个创建我曾经居住过的四个国家的一维数组的示例。它将把这些国家的名称打印到Excel文件工作表的A列中。
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the running the `array_1d` subroutine is as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`array_1d`子程序的输出如下：
- en: '![](../Images/98813e9fa922046d745c6bd04c89ee36.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/98813e9fa922046d745c6bd04c89ee36.png)'
- en: Output of array_1d subroutine. Image by Author.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: array_1d子程序的输出。图片来源：作者。
- en: '**2.2 2-dimensional array**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.2 二维数组**'
- en: Two-dimensional arrays are defined by declaring the number of rows and columns.
    In the following example, I declare a 2-dimensional array called `country_capital`.
    The first element in each row corresponds to the element of the `countries`array
    declared in the previous section. The second element in each row corresponds to
    their capital cities which have been declared individually in the code below.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 二维数组通过声明行数和列数来定义。在以下示例中，我声明了一个名为`country_capital`的二维数组。每一行的第一个元素对应上一节中声明的`countries`数组中的元素。每一行的第二个元素对应于这些国家的首都，它们已经在下面的代码中单独声明。
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Running this sub-routine returns the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此子程序返回以下结果：
- en: '![](../Images/bf21b342e5a6abf274ac8e8deed484e9.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf21b342e5a6abf274ac8e8deed484e9.png)'
- en: Output of array_2d subroutine. Image by Author.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: array_2d子程序的输出。图片来源：作者。
- en: '**2.3 Dynamic arrays**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.3 动态数组**'
- en: Dynamic arrays are useful in cases when one is not certain about the size of
    the array and the size of the array can change in the future. In the code below,
    I specify two arrays `countries_visited` and `population` without specifying the
    size of the arrays. Inside the `dynamic_array` subroutine, I specify the size
    of both of these arrays as 4 by using the `ReDim` statement. Next, I specify each
    element of the array individually based on the four countries I have visited and
    their populations.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 动态数组在无法确定数组大小并且数组大小可能在未来发生变化的情况下非常有用。在下面的代码中，我声明了两个数组`countries_visited`和`population`，但没有指定数组的大小。在`dynamic_array`子程序内，我通过使用`ReDim`语句将这两个数组的大小指定为4。接下来，我根据我访问过的四个国家及其人口分别指定了数组的每个元素。
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: After a while, I realize that I have also visited one more country (Portugal).
    I redefine the size of the array while preserving the original contents/elements
    in these arrays. I increase the size of these arrays by 1\. For this, I use the
    `ReDim Preserve` statement as shown below.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一段时间后，我意识到我还访问了一个新国家（葡萄牙）。我在保留这些数组原始内容/元素的情况下重新定义了数组的大小。我通过增加数组的大小1来进行操作。为此，我使用了`ReDim
    Preserve`语句，如下所示。
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The full code is given below:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 完整代码如下：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output of the above code is as shown:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下所示：
- en: '![](../Images/53b0ee04a2d02ab0aaa51c25d3e5f899.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/53b0ee04a2d02ab0aaa51c25d3e5f899.png)'
- en: Output of dynamic_array subroutine. Image by Author.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 动态数组子程序的输出。图片来源：作者。
- en: '**2.4 Declaring arrays to store variables of different data types**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.4 声明数组以存储不同数据类型的变量**'
- en: In the section above, the `countries_visited` array is declared to store the
    variables of the *String* data type and the `population` array is declared to
    store the variables of the *Long* data type. Similar to Python numpy arrays, it
    is also possible to store variables of different data types in arrays in Excel
    VBA. In that case, the array has be to declared as a `Variant` type.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的章节中，`countries_visited`数组声明用于存储*String*数据类型的变量，`population`数组声明用于存储*Long*数据类型的变量。与Python的numpy数组类似，在Excel
    VBA中也可以在数组中存储不同数据类型的变量。在这种情况下，数组必须声明为`Variant`类型。
- en: In the example below, an array `test` is declared as a *Variant*. Its size is
    specified as 3 using the `ReDim` statement. The three elements of types *String*,
    *Integer,* and *Date* are specified inside the `test`. The data types can be identified
    by passing the variable inside the `TypeName()` function.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，声明了一个名为`test`的数组作为*Variant*。其大小通过`ReDim`语句指定为3。`test`中的三个元素分别为*String*、*Integer*和*Date*类型。通过将变量传递给`TypeName()`函数，可以识别这些数据类型。
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output is as shown below:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下所示：
- en: '![](../Images/11ecf26f56ad68da974831b0b645b8b2.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/11ecf26f56ad68da974831b0b645b8b2.png)'
- en: Output of variant_test subroutine. Image by Author.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: variant_test 子程序的输出。图片由作者提供。
- en: Conclusion
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Arrays are a collection of values/variables of one or more data types. Each
    variable is associated with a particular index number in an array. Arrays can
    be of one-dimension, two-dimensions, or multiple dimensions. In Python, there
    is no built-in support for arrays, but one can create arrays using the numpy package.
    Besides storing the values, the numpy arrays are also very useful in performing
    matrix operations. In Excel VBA, arrays are very useful in working with large
    databases of elements. In Excel VBA, an array can be static where the size of
    the array is pre-defined. Or array can be dynamic where the size of the array
    is not pre-defined, but it can be specified as we move along and even resized
    while preserving the elements already stored in the array.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是由一个或多个数据类型的值/变量组成的集合。每个变量都与数组中的特定索引号相关联。数组可以是单维的、二维的或多维的。在Python中，没有内建的数组支持，但可以使用numpy包创建数组。除了存储值，numpy数组在进行矩阵运算时也非常有用。在Excel
    VBA中，数组在处理大型数据元素数据库时非常有用。在Excel VBA中，数组可以是静态的，即数组的大小是预定义的。或者，数组也可以是动态的，即数组的大小不是预定义的，但我们可以在使用过程中指定其大小，甚至在保持已存储元素的情况下调整数组大小。
- en: The Python notebook, Excel workbook along with VBA scripts are available in
    this [GitHub repository](https://github.com/hbshrestha/Data_Analytics). Thank
    you for reading!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 [GitHub 仓库](https://github.com/hbshrestha/Data_Analytics)提供了Python笔记本、Excel工作簿以及VBA脚本。感谢阅读！
