- en: Why Sets Are So Useful in Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么集合在编程中如此有用
- en: 原文：[https://towardsdatascience.com/why-sets-are-so-useful-in-programming-b1157532f7e5?source=collection_archive---------6-----------------------#2024-12-19](https://towardsdatascience.com/why-sets-are-so-useful-in-programming-b1157532f7e5?source=collection_archive---------6-----------------------#2024-12-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/why-sets-are-so-useful-in-programming-b1157532f7e5?source=collection_archive---------6-----------------------#2024-12-19](https://towardsdatascience.com/why-sets-are-so-useful-in-programming-b1157532f7e5?source=collection_archive---------6-----------------------#2024-12-19)
- en: And how you can use them to boost your code performance
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以及如何利用它们提升代码性能
- en: '[](https://medium.com/@afjal.nc?source=post_page---byline--b1157532f7e5--------------------------------)[![Afjal
    Chowdhury](../Images/92814d13296326ea8dc7d5a64a443092.png)](https://medium.com/@afjal.nc?source=post_page---byline--b1157532f7e5--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b1157532f7e5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b1157532f7e5--------------------------------)
    [Afjal Chowdhury](https://medium.com/@afjal.nc?source=post_page---byline--b1157532f7e5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@afjal.nc?source=post_page---byline--b1157532f7e5--------------------------------)[![Afjal
    Chowdhury](../Images/92814d13296326ea8dc7d5a64a443092.png)](https://medium.com/@afjal.nc?source=post_page---byline--b1157532f7e5--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b1157532f7e5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b1157532f7e5--------------------------------)
    [Afjal Chowdhury](https://medium.com/@afjal.nc?source=post_page---byline--b1157532f7e5--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b1157532f7e5--------------------------------)
    ·8 min read·Dec 19, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b1157532f7e5--------------------------------)
    ·8分钟阅读·2024年12月19日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: A *set* is a simple structure defined as a *collection of distinct elements*.
    Sets are most commonly seen in fields like mathematics or logic, but they’re also
    useful in programming for writing efficient code. In this article, I detail cases
    where sets outperform alternative data types like *lists*, and the underlying
    implementation of sets which makes them so useful to programmers.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*集合*是一个简单的结构，定义为*不同元素的集合*。集合通常在数学或逻辑领域中出现，但在编程中，它们也非常有用，可以编写高效的代码。在本文中，我详细介绍了集合在某些情况下优于其他数据类型，如*列表*，以及集合的底层实现，使它们对程序员非常有用。
- en: '![](../Images/aa841073ef120a63e6fbafcfd823d962.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aa841073ef120a63e6fbafcfd823d962.png)'
- en: Bolts that form a Set by [Robert Ruggiero](https://unsplash.com/@robert2301?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由[Robert Ruggiero](https://unsplash.com/@robert2301?utm_source=medium&utm_medium=referral)拍摄的组成集合的螺栓照片，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: A set is an example of a container; these are used to store several elements
    under one variable. When looking for a container datatype, lists (typically defined
    with square brackets [ ]) are the go-to choice, being used extensively in almost
    all programming languages. Sets bare a lot of similarity to lists, most notably
    as they are both **dynamic**, allowing their size to grow or shrink as needed.
    The only differences lie in that lists preserve order of elements and allow duplicates,
    whereas sets do neither, offering a unique advantage in certain scenarios. By
    knowing when to choose sets over lists, you can greatly enhance the performance
    of your programs and improve code readability.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 集合是容器的一种示例；它们用于在一个变量下存储多个元素。在寻找容器数据类型时，列表（通常用方括号 [ ] 定义）是首选，它在几乎所有编程语言中都有广泛应用。集合与列表有很多相似之处，最显著的是它们都是**动态**的，允许根据需要增长或缩小大小。唯一的区别在于，列表会保留元素的顺序并允许重复，而集合则不保留顺序，也不允许重复，这在某些场景中提供了独特的优势。了解何时选择集合而非列表，可以大大提高程序的性能并改善代码的可读性。
- en: In Python, sets can be declared using curly braces, or by using the set constructor.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，集合可以使用花括号声明，或者使用集合构造函数来声明。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Sets do not contain duplicates
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合不包含重复元素
- en: A defining property of a set is that each element is distinct, or unique, so
    there are no repeated entries. A simple application of this could be to **remove
    all duplicate entries** in a list by converting the list into a set.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 集合的一个定义特征是每个元素都是独特的，因此没有重复的条目。一个简单的应用例子是通过将列表转换为集合来**移除所有重复条目**。
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Because a set is used here, the order of the list is not preserved. Use an implementation
    like the first one if order matters.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这里使用了集合，列表的顺序没有被保留。如果顺序很重要，可以使用像第一个实现那样的实现。
- en: The next function **identifies if a list contains any duplicates;** the order
    of elements is not here important, only the *occurrence* of duplicates. The set
    implementation is much more desirable as operations on sets are typically much
    faster than on lists (this is explained in more detail later).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个函数**用于识别列表中是否包含重复元素**；元素的顺序在这里并不重要，重要的是*重复出现的次数*。集合的实现更为理想，因为集合上的操作通常比列表要快得多（这将在后面更详细地解释）。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Note: In cases where a duplicate element appears early, the first implementation
    can outperform the second as it catches the duplicate early and returns False
    without checking every entry, whereas the second implementation always iterates
    through every element. A more optimal solution would involve a similar method
    to the first implementation but using a* ***set*** *as the unique_elements container.*'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：*在存在重复元素较早出现的情况下，第一个实现可能会比第二个更高效，因为它能较早地捕捉到重复并返回`False`，无需检查每个条目，而第二个实现则总是遍历每一个元素。一个更优的解决方案可以采用与第一个实现相似的方法，但使用*
    ***集合*** *作为唯一元素容器。*'
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Even if these applications seem quite crude or simplistic, there are countless
    uses built upon the principle of “removing duplicates” that take some creativity
    to see. For example, [Leetcode 1832](https://leetcode.com/problems/check-if-the-sentence-is-pangram/)
    ‘*Check if the Sentence is a Pangram*’- where you need to detects if all 26 letters
    have been used in an input sentence- can be elegantly solved using a set comprehension.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这些应用看起来相当粗糙或简单，但以“去除重复元素”为基础的无数用例需要一些创意才能看出。例如，[Leetcode 1832](https://leetcode.com/problems/check-if-the-sentence-is-pangram/)
    “*检查句子是否是回文*”- 你需要检测一个输入句子中是否使用了所有26个字母- 就可以优雅地使用集合推导来解决。
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Without sets, this problem would need to utilise nested looping which is both
    harder to write, and less efficient with a complexity of O(n^2).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有集合，这个问题就需要使用嵌套循环来处理，而嵌套循环不仅更难编写，而且效率较低，复杂度为O(n^2)。
- en: 'The key to identifying cases where sets are useful is by considering:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 识别集合有用场景的关键在于考虑：
- en: If we **only care about an occurrence**, like in this problem if the sentence
    contained the word ‘eel’, we only care that the letter ‘e’ occurred, not that
    it occurred twice so we can discard the second and any future ‘e’s.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们**只关心出现的次数**，比如在本问题中，如果句子中包含单词“eel”，我们只关心字母“e”是否出现，而不在乎它是否出现两次，因此我们可以丢弃第二个及之后的“e”。
- en: Building on this principal, in cases where a list is **very large**, it may
    be desirable to remove duplicate elements to continue processing on a much smaller
    list.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于这一原理，在处理**非常大的**列表时，可能希望去除重复元素，以便继续处理更小的列表。
- en: If **we don’t care about the order** of elements. In cases where maintaining
    order is important, like in a priority queue, lists should instead be used.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果**我们不关心元素的顺序**，那么可以使用集合。在需要保持顺序的场景中，比如优先队列，应该使用列表。
- en: Hash maps and lack of order
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈希映射和缺乏顺序
- en: Taking a step back, it might seem that easy duplicate removal is the only benefit
    of using sets. We previously discussed how sets have no order; arrays have indexed
    element which could simply ignored and treated like a set. It appears that arrays
    can do the same job as a set, if not more.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 倒退一步来看，可能会觉得使用集合的唯一好处就是简化重复元素的去除。我们之前讨论过集合没有顺序；数组有索引元素，可以简单地忽略它们并当作集合处理。看起来数组可以像集合一样完成任务，甚至做得更多。
- en: 'However, this simplification enforced by sets opens way to **different underlying
    implementations**. In lists, elements are assigned indices to give each element
    a place in the order. Sets have no need to assign indices, so they instead implement
    a different approach of referencing: hash mapping. These operate by (pseudo)randomly
    allocating addresses to elements, as opposed to storing them in a row. The allocation
    is governed by hashing functions, which use the element as an input to output
    an address.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，集合强制的这一简化方式带来了**不同的底层实现**。在列表中，元素通过索引来分配位置，从而确定每个元素在顺序中的位置。而集合不需要分配索引，因此它们采用了一种不同的引用方法：哈希映射。这些操作通过（伪）随机地为元素分配地址，而不是将元素顺序存储。地址的分配由哈希函数控制，哈希函数以元素为输入，输出一个地址。
- en: '![](../Images/48360d958818c5df76f7a6097855dfa1.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48360d958818c5df76f7a6097855dfa1.png)'
- en: Hashing does not preserve order
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希表不保留顺序。
- en: '*H(x) is deterministic, so the same input always gives the same output, ie.
    there is no RNG within the function H, so H(4) = 6 always in this case.*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*H(x) 是确定性的，因此相同的输入总是会给出相同的输出，即 H 函数内部没有随机数生成（RNG），所以在这种情况下 H(4) 总是等于 6。*'
- en: Running this function takes the same amount of time regardless of the size of
    the set, ie. hashing has O(1) time complexity. This means that the time taken
    to hash is independent of the size of the list, and remains at a constant, quick
    speed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此函数所需的时间与集合的大小无关，即哈希的时间复杂度是 O(1)。这意味着哈希的时间消耗与列表的大小无关，始终保持在一个常数、快速的速度。
- en: Set operations
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合操作
- en: Because hashing is generally quick, a whole host of operations that are typically
    slow on large arrays can be executed very efficiently on a set.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由于哈希通常非常快速，许多在大数组上通常较慢的操作可以在集合上高效执行。
- en: '**Search or Membership Testing**'
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**搜索或成员测试**'
- en: Searching for elements in an array utilises an algorithm called *Linear Search*,
    bychecking each item in the list one by one. In the worst case, where the item
    being searched for does not exist in the list, the algorithm traverses every element
    of the list (*O(n)*). In a very large list, this process takes a long time.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在数组中搜索元素使用的是一种叫做*线性搜索*的算法，它通过逐一检查列表中的每个项来完成。在最坏情况下，如果要查找的元素不在列表中，算法将遍历整个列表的每个元素（*O(n)*）。在一个非常大的列表中，这个过程会花费很长时间。
- en: '![](../Images/57ec2db048f934d327520f813422a9b5.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/57ec2db048f934d327520f813422a9b5.png)'
- en: Linear search on average needs n/2 operations, img by author
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 线性搜索平均需要 n/2 次操作，图像由作者提供
- en: However, as hashing is O(1), Python hashes the item to be found, and either
    returns where it is in memory, or that it doesn’t exist- in a very small amount
    of time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于哈希是 O(1)，Python 将要查找的元素哈希处理，然后要么返回该元素在内存中的位置，要么返回该元素不存在——这一过程所需时间非常短。
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/ee09a8ba99f1baca735980c4270738d5.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ee09a8ba99f1baca735980c4270738d5.png)'
- en: Comparison of search times in lists vs sets
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 列表与集合中的搜索时间对比
- en: '*Note: Searching using a hashmap has an* ***amortized*** *time complexity of
    O(1). This means that in the average case, it runs at constant time but technically,
    in the worst case, searching is O(n). However, this is extremely unlikely and
    comes down to the hashing implementation having a chance of collisions, which
    is when multiple elements in a hashmap/set are hashed to the same address.*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：使用哈希表进行搜索的* ***摊销*** *时间复杂度是 O(1)。这意味着在平均情况下，它的运行时间是常数时间，但从技术上讲，在最坏情况下，搜索是
    O(n)。然而，这种情况极不可能发生，只有当哈希实现发生碰撞时才会出现碰撞，也就是当哈希表/集合中的多个元素被哈希到同一个地址时。*'
- en: '![](../Images/7afe24366b2ac3a3495f2dedd5b2bdb5.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7afe24366b2ac3a3495f2dedd5b2bdb5.png)'
- en: Collisions are rare
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 碰撞是罕见的
- en: Deletion
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除
- en: Deleting an element from a list first involves a search to locate the element,
    and then removing reference to the element by clearing the address. In an array,
    after the O(n) time search, the index of every element following the deleted element
    needs to be shifted down one. This itself is another O(n) process.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中删除一个元素，首先需要搜索以定位该元素，然后通过清除地址来移除对该元素的引用。在数组中，经过 O(n) 时间的搜索后，每个删除元素后面的元素的索引都需要向下移动一个位置。这本身是另一个
    O(n) 的过程。
- en: '![](../Images/96a22105c0fd32bd07e8390552b1013c.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/96a22105c0fd32bd07e8390552b1013c.png)'
- en: Deletion in a list requires roughly n operations
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表中删除元素大约需要 n 次操作
- en: Deleting an element from a set involves the O(1) lookup, and then erasure of
    the memory address which is an O(1) process so deletion also operates in constant
    time. Sets also have more ways to delete elements, such that errors are not raised,
    or such that multiple elements can be removed concisely.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从集合中删除元素涉及 O(1) 查找，然后是删除内存地址，这也是一个 O(1) 的过程，因此删除操作也是常数时间操作。集合还有更多删除元素的方法，这样可以避免错误发生，或者能够简洁地删除多个元素。
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Insertion
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插入
- en: Both appending to a list and adding elements to a set are constant operations;
    adding to a specified index in a list (.insert) however comes with the added time
    to shift elements around.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 向列表追加元素和向集合添加元素都是常数操作；然而，向列表中的指定索引位置添加元素（.insert）则需要额外的时间来移动元素。
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Advanced Set Operations
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级集合操作
- en: Additionally, all the mathematical operations that can be performed on sets
    have implementation in python also. These operations are once again time consuming
    to manually perform on a list, and are once again optimised using hashing.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，所有可以在集合上执行的数学操作，在 Python 中也有实现。这些操作对于列表来说执行起来非常耗时，而使用哈希则再次进行了优化。
- en: '![](../Images/02016ae2904e6d68483df2cfe84bde21.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/02016ae2904e6d68483df2cfe84bde21.png)'
- en: Set Operations
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 集合操作
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This also includes comparison operators, namely proper and relaxed subsets and
    supersets. These operations once again run much faster than their list counterparts,
    operating in O(n) time, where n is the larger of the 2 sets.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这还包括比较运算符，即适当的和放宽的子集与超集。这些操作再次比其列表对应操作快得多，运行时间为O(n)，其中n是两个集合中的较大者。
- en: '![](../Images/3f8510d9a0ffb98f79661f84c025e805.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3f8510d9a0ffb98f79661f84c025e805.png)'
- en: Subset
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 子集
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Frozen Sets
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Frozen Sets
- en: A final small, but underrated feature in python is the *frozen set*, which is
    essentially a read-only or **immutable** set. These offer greater memory efficiency
    and could be useful in cases where you frequently test membership in a tuple.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的一个最终小特性，但被低估的特性是*frozen set*，本质上是一个只读或**不可变**的集合。这些集合提供了更高的内存效率，并且在频繁测试元组中的成员关系时非常有用。
- en: Conclusion
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: The essence of using sets to boost performance is encapsulated by the principle
    of **optimisation by reduction**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用集合来提升性能的精髓可以通过**通过减少优化**的原则来概括。
- en: '![](../Images/48008eb14526a7d051fad8eafbbecf75.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48008eb14526a7d051fad8eafbbecf75.png)'
- en: 'Data structures like lists have the most functionality- being indexed and dynamic-
    but come at the cost of comparatively lower efficiency: speed and memory-wise.
    Identifying which features are essential vs unused to inform what data type to
    use will result in code that runs faster and reads better.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 像列表这样的数据结构功能最强——它们是可索引的且动态的——但代价是效率相对较低：无论是在速度还是内存方面。识别哪些特性是必需的，哪些是未使用的，从而决定使用哪种数据类型，将使代码运行更快，且更易于阅读。
- en: '*All technical diagrams by author.*'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*所有技术图表由作者提供。*'
