- en: 'From Data Scientist to AI Developer: Lessons Building a Generative AI Web App
    in 2023'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据科学家到AI开发者：2023年构建生成式AI Web应用的经验教训
- en: 原文：[https://towardsdatascience.com/from-data-scientist-to-ai-developer-lessons-building-an-generative-ai-web-app-in-2023-95959a00a474?source=collection_archive---------0-----------------------#2024-01-21](https://towardsdatascience.com/from-data-scientist-to-ai-developer-lessons-building-an-generative-ai-web-app-in-2023-95959a00a474?source=collection_archive---------0-----------------------#2024-01-21)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/from-data-scientist-to-ai-developer-lessons-building-an-generative-ai-web-app-in-2023-95959a00a474?source=collection_archive---------0-----------------------#2024-01-21](https://towardsdatascience.com/from-data-scientist-to-ai-developer-lessons-building-an-generative-ai-web-app-in-2023-95959a00a474?source=collection_archive---------0-----------------------#2024-01-21)
- en: A guide of technical tips for any data science enthusiast wanting to build an
    AI web app serving thousands of users
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为任何希望构建能够服务成千上万用户的AI Web应用的数据科学爱好者提供的技术技巧指南
- en: '[](https://iztham.medium.com/?source=post_page---byline--95959a00a474--------------------------------)[![Isaac
    Tham](../Images/57f44f34adc534dbf09791a8cd54e7f3.png)](https://iztham.medium.com/?source=post_page---byline--95959a00a474--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--95959a00a474--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--95959a00a474--------------------------------)
    [Isaac Tham](https://iztham.medium.com/?source=post_page---byline--95959a00a474--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://iztham.medium.com/?source=post_page---byline--95959a00a474--------------------------------)[![Isaac
    Tham](../Images/57f44f34adc534dbf09791a8cd54e7f3.png)](https://iztham.medium.com/?source=post_page---byline--95959a00a474--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--95959a00a474--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--95959a00a474--------------------------------)
    [Isaac Tham](https://iztham.medium.com/?source=post_page---byline--95959a00a474--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--95959a00a474--------------------------------)
    ·12 min read·Jan 21, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--95959a00a474--------------------------------)
    ·阅读时间：12分钟·2024年1月21日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/eb97eaccbbe21c2af01f7cecb07ae29b.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb97eaccbbe21c2af01f7cecb07ae29b.png)'
- en: 'Source: DALLE-3'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：DALLE-3
- en: If you, like me, ventured into the world of data science (be it through college
    or one of the countless online courses), you may have harbored the dream of creating
    an ML/AI software product that people can use. A product just like those our CS
    friends seem to code up effortlessly.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你像我一样，进入了数据科学的领域（无论是通过大学课程还是通过无数在线课程），你可能也曾梦想过创造一个人们可以使用的机器学习/人工智能软件产品。一个像我们计算机科学的朋友们似乎轻松编写出来的产品。
- en: But if you ever tried your hand at full-stack web development, you’d soon face
    the seemingly insurmountable hurdles of configuration, deployment, terminal commands
    and servers and so on.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你曾尝试过全栈网页开发，你很快就会面对配置、部署、终端命令、服务器等看似不可逾越的难题。
- en: '![](../Images/28ce8c12dd701b5e9e013af438fb3b77.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/28ce8c12dd701b5e9e013af438fb3b77.png)'
- en: Just one of the many frustrated convos with my college roommate during the initial
    stages coding my app. Image by author.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在编写应用程序的初期，和我的大学室友之间无数次沮丧对话中的一幕。图片来自作者。
- en: I know this all too well, having spent countless hours floundering helplessly,
    which only deepened my inferiority complex that I’d never manage to craft a functioning
    software app.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我对此深有体会，曾经在无数个小时里感到无助，这只让我更加深信自己永远无法制作出一个能正常运行的软件应用。
- en: But exactly one year ago, on the 21st of January, a weekend unexpectedly made
    free by passport-troubles and a cancelled trip, I embarked on a journey to make
    an AI app. It was a journey that led me to unexpected places — teaming up with
    a co-founder halfway across the world, joining a [San Francisco startup accelerator](https://buildspace.so/s3/demoday/Podsmart),
    and eventually growing to thousands of users with a significant annual revenue
    (check out my app, [Podsmart](http://podsmartai.com)! we summarize podcasts).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是恰好一年前，1月21日，一个因为护照问题和取消的旅行而意外空出的周末，我开始了一个制作AI应用程序的旅程。这是一次带我去到意想不到地方的旅程——我与一个位于世界另一端的联合创始人合作，加入了一个[旧金山初创公司加速器](https://buildspace.so/s3/demoday/Podsmart)，并最终发展到拥有数千用户并创造了可观年收入的规模（查看我的应用程序，[Podsmart](http://podsmartai.com)!
    我们总结播客）。
- en: '![](../Images/ae887cfe6b631727d4e6ef557556600c.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ae887cfe6b631727d4e6ef557556600c.png)'
- en: 'My app’s demo page on the Buildspace startup accelerator. Source: [https://buildspace.so/s3/demoday/Podsmart](https://buildspace.so/s3/demoday/Podsmart)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我的应用演示页面位于 Buildspace 启动加速器上。来源：[https://buildspace.so/s3/demoday/Podsmart](https://buildspace.so/s3/demoday/Podsmart)
- en: But most importantly, it was a journey full of frustrations, backtracking, mistakes
    and rework. It was about navigating the bewildering world of software development
    without a formal CS/SWE background.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但最重要的是，这是一段充满挫折、回溯、错误和返工的旅程。它是关于如何在没有正式计算机科学/软件工程背景的情况下，穿越困惑的开发世界。
- en: So, looking back at the past year building my first software product, I’ve compiled
    a guide of some **technical tips** — this is for any **data science enthusiast**
    who wants to build a **functional web app serving thousands of users**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，回顾过去一年来构建我的第一个软件产品，我整理了一些**技术建议**——这是为任何**数据科学爱好者**准备的，旨在帮助你构建一个**能够服务成千上万用户的功能性
    Web 应用**。
- en: This guide is born from my struggles and learnings over a year, and represents
    advice I would have loved to tell my one-year-younger self.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南源于我一年的挣扎与学习，代表了我希望能告诉年轻一岁的自己的一些建议。
- en: 'Disclaimer: These tips are from my specific personal experiences, and may work
    differently for others. I also do not have any relationship or affiliation with
    any of the tools recommended here.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 免责声明：这些建议来自我的个人经历，可能对其他人效果不同。我与这里推荐的任何工具没有任何关系或合作。
- en: '**Table of Contents**'
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**目录**'
- en: · [What you want to build](#8680)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: · [你想要构建的内容](#8680)
- en: · [The dangers of YouTube web development tutorials](#d511)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: · [YouTube Web 开发教程的危险](#d511)
- en: '∘ [Tip #1: Use Next.js instead of React](#5c6a)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '∘ [提示 #1: 使用 Next.js 代替 React](#5c6a)'
- en: '∘ [Tip #2: Opt for Tailwind CSS instead of Bootstrap for styling](#e5b3)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '∘ [提示 #2: 使用 Tailwind CSS 代替 Bootstrap 进行样式设计](#e5b3)'
- en: · [The trappings of the data science mindset](#91d1)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: · [数据科学思维模式的局限](#91d1)
- en: '∘ [Tip #3: Choose FastAPI over Flask for your backend, and rigorously define
    response models](#f335)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '∘ [提示 #3: 为后端选择 FastAPI 而非 Flask，并严格定义响应模型](#f335)'
- en: '∘ [Tip #4: Use TypeScript instead of JavaScript](#d98b)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '∘ [提示 #4: 使用 TypeScript 代替 JavaScript](#d98b)'
- en: · [About deployment…](#2175)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: · [关于部署……](#2175)
- en: '∘ [Tip #5: Use Modal for GPU backend](#5631)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '∘ [提示 #5: 为 GPU 后端使用 Modal](#5631)'
- en: '∘ [Tip #6: Use AWS Lambda for backend deployment and Vercel for frontend](#c901)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '∘ [提示 #6: 使用 AWS Lambda 部署后端，使用 Vercel 部署前端](#c901)'
- en: · [Making life easier](#858e)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: · [让生活更轻松](#858e)
- en: '∘ [Tip #7: don’t build your own landing page using React](#e97d)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '∘ [提示 #7: 不要用 React 自建着陆页](#e97d)'
- en: '∘ [Tip #8: Firebase + Stripe for user authentication and payments](#1919)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '∘ [提示 #8: Firebase + Stripe 用于用户认证和支付](#1919)'
- en: '∘ [Tip #9: Implement Sentry for error monitoring](#900c)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '∘ [提示 #9: 实现 Sentry 进行错误监控](#900c)'
- en: · [Conclusion](#a25a)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: · [结论](#a25a)
- en: '**What you want to build**'
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**你想要构建的内容**'
- en: To build said functional web app, you need a **web interface** (**frontend**
    or client) for users to interact with, as well as a **server** (**backend**) which
    does data processing, data storage, and calling the ML/AI models.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个功能完整的 Web 应用，你需要一个**Web 界面**（**前端**或客户端）供用户交互，同时还需要一个**服务器**（**后端**）来进行数据处理、数据存储，并调用
    ML/AI 模型。
- en: (You might have heard of [Streamlit](https://streamlit.io/). It’s great for
    the simplest demos, but it really lacks the customizability to make a viable production
    app)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: （你可能听说过[Streamlit](https://streamlit.io/)，它非常适合做最简单的演示，但它确实缺乏自定义功能，无法做出一个可行的生产应用）
- en: '**The dangers of YouTube web development tutorials**'
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**YouTube Web 开发教程的危险**'
- en: As a data scientist, many aspects of software development fill me with trepidation,
    such as the prospect of wasting days on broken configuration. Nothing is more
    frustrating than seeing something break and not know why it broke and how to fix
    it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据科学家，软件开发的许多方面让我充满忧虑，例如配置错误导致浪费数天时间。没有什么比看到某个东西坏掉，却不知道为什么坏掉以及如何修复它更令人沮丧的了。
- en: As a result, I relied desperately on **walkthrough-style tutorials,** especially
    on YouTube, that depicted the entire process, from start to end, of setting up
    a React project, deploying a backend or website etc.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，我非常依赖**逐步教程**，尤其是在 YouTube 上，这些教程展示了从头到尾的整个过程，例如如何设置 React 项目、部署后端或网站等。
- en: 'Looking back, there are two main downsides to this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾过去，这里有两个主要的缺点：
- en: Firstly, confusion at multiple **conflicting** and **potentially outdated tutorials**
    (for instance, as newer versions of React come out). This has often led to me
    following a tutorial until realizing it no longer works.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，困惑于多个**冲突的**和**可能已过时的教程**（例如，随着 React 的新版本发布）。这常常让我在跟着教程做时，突然发现它已经不再适用了。
- en: Secondly, most tutorials are aimed at building cool classroom demos which are
    beginner-friendly. Hence, they use frameworks and reinforce coding patterns which
    have a **low performance ceiling**, which will be **lacking for production and
    scaling**. On hindsight, I’ve picked up many bad coding habits from YouTube tutorials,
    that are now obstacles to further developing my app as a live product serving
    thousands of users.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，大多数教程旨在构建酷炫的课堂演示，适合初学者。因此，它们使用框架并强化那些**性能上限低**的编码模式，这对**生产环境和扩展性**来说是**不够的**。回顾过去，我从
    YouTube 教程中学到很多不好的编码习惯，现在这些习惯已经成为我将应用程序开发成一个可服务成千上万用户的在线产品的障碍。
- en: Since you learn best from failures, this process, though frustrating, was a
    massive learning experience for me throughout the year. Hopefully you can save
    lots of time learning from my failures.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你从失败中学得最多，这个过程尽管令人沮丧，却成为了我这一年中的一次巨大学习经历。希望你能从我的失败中节省大量时间。
- en: '**Tip #1: Use Next.js instead of React**'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**技巧 #1：使用 Next.js，而不是 React**'
- en: '![](../Images/e83c69363b500db47cc3b2f3efda54e4.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e83c69363b500db47cc3b2f3efda54e4.png)'
- en: 'Searching for ‘full stack app tutorial’ on YouTube gives you lots of React
    tutorials. Source: [https://www.youtube.com/results?search_query=full+stack+app+tutorial](https://www.youtube.com/results?search_query=full+stack+app+tutorial)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 YouTube 上搜索“全栈应用教程”会找到很多 React 教程。来源：[https://www.youtube.com/results?search_query=full+stack+app+tutorial](https://www.youtube.com/results?search_query=full+stack+app+tutorial)
- en: Many YouTube tutorials advocate for React, and I initially followed suit.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 很多 YouTube 教程推荐使用 React，最初我也跟风使用了它。
- en: However, eventually I wanted to improve my site’s SEO performance — which is
    crucial to gaining more users. React’s limitations, such as inability to change
    meta tags dynamically, and lack of server-side rendering, were frustrating, necessitating
    a tedious change to Next.js. After switching, the differences in performance were
    just night-and-day.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，最终我希望提高网站的 SEO 性能——这对获取更多用户至关重要。React 的一些局限性，比如无法动态更改 meta 标签，缺乏服务器端渲染，令人沮丧，迫使我做出繁琐的切换，转向
    Next.js。切换后，性能差异简直是天壤之别。
- en: '![](../Images/dff8497750428d823d3e7da9529dbe77.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dff8497750428d823d3e7da9529dbe77.png)'
- en: 'Vercel has lots of Next.js templates for you to jumpstart your web development.
    Source: [https://vercel.com/templates/next.js](https://vercel.com/templates/next.js)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Vercel 提供了大量的 Next.js 模板，供你快速启动网站开发。来源：[https://vercel.com/templates/next.js](https://vercel.com/templates/next.js)
- en: Some people say React is more beginner-friendly, but there are lots of Next.js
    templates online, for example by [Vercel (Next.js creators)](https://vercel.com/templates/next.js),
    especially AI applications. Next.js is really the modern web framework used for
    nearly every AI application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人说 React 更适合初学者，但网上有很多 Next.js 模板，比如 [Vercel（Next.js 的创造者）](https://vercel.com/templates/next.js)，尤其是
    AI 应用。Next.js 真的是几乎所有 AI 应用中使用的现代 Web 框架。
- en: '**Tip #2: Opt for Tailwind CSS instead of Bootstrap for styling**'
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**技巧 #2：为样式选择 Tailwind CSS，而不是 Bootstrap**'
- en: Embarking on my front-end UI journey, I initially, and somewhat naively, followed
    the herd of frontend tutorials, towards Bootstrap. Its allure? The promise of
    ease with ready-made components like dropdowns and accordions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始我的前端 UI 之旅时，我最初有些天真地跟随了一波前端教程，走向了 Bootstrap。它的吸引力？承诺通过现成的组件（如下拉菜单和手风琴组件）来简化开发。
- en: '![](../Images/4d5a4c7e8e2b86bacdd91b84dfe7a537.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d5a4c7e8e2b86bacdd91b84dfe7a537.png)'
- en: The ‘Bootstrap look’ — how ugly my website looked on Feb 20, 2023\. Image by
    author.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: “Bootstrap 外观”——2023 年 2 月 20 日，我的网站看起来有多丑。图片来源：作者。
- en: However, after a while, I realized that my website just looked … really ugly,
    especially when compared to the sleek, modern AI demo pages out there. There was
    this unmistakable ‘Bootstrap look’ — a sort of aesthetic stubbornness that resisted
    customization, entangled in a web of confusingly named CSS classes. So eventually,
    I once again bit the bullet and redid my entire frontend with Tailwind CSS, taking
    3 whole days.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，过了一段时间，我意识到我的网站看起来……真的很丑，尤其是与那些流线型、现代的 AI 演示页面相比。那种明显的“Bootstrap 外观”——一种审美上的固执，抵制自定义，纠缠于一堆混乱命名的
    CSS 类名中。所以，最终，我再次咬紧牙关，重新用 Tailwind CSS 完全重做了我的前端，花了整整三天时间。
- en: '![](../Images/5221bef3add4cb446ac04a25742faf56.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5221bef3add4cb446ac04a25742faf56.png)'
- en: 'This AI demo page was definitely not built by Bootstrap. Source: restorephotos.io'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 AI 演示页面肯定不是用 Bootstrap 构建的。来源：restorephotos.io
- en: If you’ve ever seen an AI demo page with a modern and clean UI, it’s highly
    likely they used [Tailwind CSS](https://tailwindcss.com/).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经见过一页现代且简洁的 AI 演示页面，那么它很有可能使用了 [Tailwind CSS](https://tailwindcss.com/)。
- en: '![](../Images/3994a7cc9b25aaed300f897e34a92ee4.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3994a7cc9b25aaed300f897e34a92ee4.png)'
- en: Tailwind CSS and its utility classes make customizing every component extremely
    easy. Image by author.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Tailwind CSS 及其实用类使得定制每个组件变得异常简单。图像来自作者。
- en: Initially, I was intimidated by Tailwind — its long component definitions brimming
    with what seemed like cryptic utility classes appeared anything but beginner-friendly...
    I thought that Tailwind lacked pre-built components and it would be onerous to
    memorize the utility classes. However, this couldn’t be more untrue! There are
    many great UI component libraries built on Tailwind CSS — I used [Flowbite React](https://www.flowbite-react.com/)
    (it has all the components I need!)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，我对 Tailwind 感到害怕 — 它冗长的组件定义，充满了看起来像是难解的实用类，似乎一点也不适合初学者…我曾认为 Tailwind 缺少预构建的组件，并且记住这些实用类会很麻烦。然而，事实恰恰相反！有许多很棒的
    UI 组件库是基于 Tailwind CSS 构建的 — 我使用了 [Flowbite React](https://www.flowbite-react.com/)（它包含我所需的所有组件！）
- en: '**The trappings of the data science mindset**'
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**数据科学思维方式的陷阱**'
- en: As a data science student, I’ve grown to love Python with its minimalist, powerful
    code syntax. Python’s type-inference spared me the tedium of defining types for
    every variable (a task I found cumbersome, especially in languages I encountered
    in intro CS classes like Java).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名数据科学学生，我逐渐喜欢上了 Python，它简洁且功能强大的代码语法让我受益匪浅。Python 的类型推断免去了我为每个变量定义类型的繁琐工作（这个任务我觉得很麻烦，尤其是在我在入门计算机科学课程中遇到的像
    Java 这样的语言中）。
- en: Hence, I used JavaScript for my frontend and Python for my backend, avoiding
    defining the types of my API endpoints unless necessary.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我使用 JavaScript 作为前端，Python 作为后端，除非必要，否则避免定义 API 端点的类型。
- en: However, as my app grew in complexity, tons of unexpected type errors between
    my frontend and backend eroded my coding productivity. I’m finally understanding
    my CS friends’ insistence on the importance of explicit types. It turns out, the
    meticulous detail in **type definition** isn’t just pedantic — it’s **essential**.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，随着我的应用变得越来越复杂，前后端之间大量意外的类型错误大大降低了我的编码生产力。我终于理解了我的计算机科学朋友们坚持要求显式类型的重要性。事实证明，**类型定义**的细致入微不仅仅是“死板的学究式”
    — 它是**必不可少的**。
- en: '**Tip #3: Choose FastAPI over Flask for your backend, and rigorously define
    response models**'
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**技巧 #3：为你的后端选择 FastAPI，并严格定义响应模型**'
- en: If you search for Python backend tutorials on YouTube, most videos would point
    you to Flask. Just like how a broken clock is right twice a day, I somehow happened
    to choose FastAPI as my Python backend, which was definitely correct decision
    on hindsight.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 YouTube 上搜索 Python 后端教程，大多数视频会指引你使用 Flask。就像坏掉的时钟一天会对两次一样，我不知怎么地选择了 FastAPI
    作为我的 Python 后端，事后看来，确实是正确的决定。
- en: (Though hilariously, I had totally disregarded the benefit of FastAPI. Until
    only recently, I didn’t understand the need to define Pydantic classes for POST
    requests and thought it more of a hassle than a help.)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: （尽管好笑的是，我之前完全忽视了 FastAPI 的这一优势。直到最近，我才理解需要为 POST 请求定义 Pydantic 类，之前我觉得这比帮助还麻烦。）
- en: 'FastAPI has several game-changing benefits:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 具有几个改变游戏规则的优势：
- en: '**automatically-generated API documentatio**n — this will be very useful for
    future engineers you onboard (or your future self) to understand the backend structure!'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动生成的 API 文档** — 这对于未来加入的工程师（或者你未来的自己）理解后端结构将非常有用！'
- en: '**easier to write code** — since FastAPI is built on Json schema, defining
    routes is much easier and shorter using FastAPI than Flask — resultantly, there’s
    lower learning curve for newbies like me'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更容易编写代码** — 由于 FastAPI 基于 Json schema，定义路由比 Flask 更加简洁且易于实现 — 结果是，对于像我这样的新手，学习曲线更低。'
- en: '**better performance** — FastAPI is apparently much faster than Flask and consumes
    less memory — which is great as my app sends around large payloads'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的性能** — FastAPI 显然比 Flask 快得多，并且消耗更少的内存 — 这对于我的应用发送大量负载非常有帮助。'
- en: '![](../Images/2025eb6f59fc6cead298cb352aa26796.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2025eb6f59fc6cead298cb352aa26796.png)'
- en: Use Pydantic to build data models, which you can use to define response types
    for your FastAPI routes. Image by author.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Pydantic 构建数据模型，你可以用它来定义 FastAPI 路由的响应类型。图像来自作者。
- en: But the most important thing is FastAPI’s **type annotations**.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 但最重要的是 FastAPI 的**类型注解**。
- en: FastAPI is built on Pydantic, a data validation library allowing you to define
    the ‘shape’ of data as classes with attributes.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FastAPI 基于 Pydantic，这是一款数据验证库，允许你将数据的“形状”定义为具有属性的类。
- en: With FastAPI, you can annotate the input and output types for each API route,
    using Python type hints and Pydantic-defined classes.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 FastAPI，您可以为每个 API 路由注解输入和输出类型，使用 Python 类型提示和 Pydantic 定义的类。
- en: This ensures that each route has outputs of a consistent data structure. But
    to unleash the full power of this feature, we need to…
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了每个路由的输出都具有一致的数据结构。但要充分发挥这个功能，我们还需要……
- en: '**Tip #4: Use TypeScript instead of JavaScript**'
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**提示 #4：使用 TypeScript 而非 JavaScript**'
- en: For the longest time, I’ve manually written my frontend fetcher methods (once
    again learning from full-stack tutorials), hence adding new routes to my app was
    a long and error-prone process.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 很长一段时间里，我手动编写前端的获取方法（再次学习来自全栈教程），因此将新路由添加到我的应用程序是一个冗长且容易出错的过程。
- en: You can hence imagine my shock when my big-tech SWE friend told me that you
    can **auto-generate Typescript client code using your API specification. (**see
    [here](https://fastapi.tiangolo.com/advanced/generate-clients) for more FastAPI’s
    documentation, one such package is [openapi-typescript-codegen](https://github.com/ferdikoomen/openapi-typescript-codegen))
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我的大科技公司软件工程师朋友告诉我，您可以**通过 API 规范自动生成 TypeScript 客户端代码**时，我感到非常震惊。（**更多 FastAPI
    文档请见[这里](https://fastapi.tiangolo.com/advanced/generate-clients)，其中一个这样的包是 [openapi-typescript-codegen](https://github.com/ferdikoomen/openapi-typescript-codegen)）
- en: '![](../Images/7b720eb2bec8cddc3a2f2e7dd64e6a81.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7b720eb2bec8cddc3a2f2e7dd64e6a81.png)'
- en: With auto-generated TypeScript client code, your fetcher methods have autocompletion
    and documentation based on your FastAPI endpoint response models. Image by author.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过自动生成的 TypeScript 客户端代码，您的获取方法将根据 FastAPI 端点响应模型提供自动补全和文档。图片来自作者。
- en: 'In an instant, I realized that this would solve two major challenges simultaneously:
    removing my manual and error-prone client fetcher writing, and ensuring type consistency
    between my backend and frontend. This significantly reduced the persistent type
    errors that were undermining my app’s reliability.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一瞬间，我意识到这将同时解决两个主要挑战：消除我手动且容易出错的客户端获取编写，并确保后端和前端之间的类型一致性。这显著减少了那些削弱我的应用程序可靠性的持续类型错误。
- en: Of course, having type constraints for your backend routes only helps if your
    frontend enforces those type constraints — which naturally requires **TypeScript**.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，为您的后端路由设置类型约束只有在您的前端也强制执行这些类型约束时才有意义——这自然需要**TypeScript**。
- en: Hence, I’m currently undergoing the arduous process of defining response models
    for my FastAPI backend, and converting my frontend from JavaScript to TypeScript,
    a process that you can avoid if you start with FastAPI and TypeScript from the
    start!
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我目前正在经历定义 FastAPI 后端响应模型的艰难过程，并将我的前端从 JavaScript 转换为 TypeScript。如果您从一开始就使用
    FastAPI 和 TypeScript，这个过程是可以避免的！
- en: '**About deployment…**'
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**关于部署……**'
- en: Through my data science / ML classes, I’ve grown used to hopping onto Google
    Colab, pressing play, and voila, the code runs. So, it’s no surprise that the
    very thought of deployment fills me with dread. But as the founder of the Buildspace
    accelerator puts it, you need to “GTFOL” (Get The F Off Localhost) to make your
    software apps accessible to the world. Hence, I naturally wanted the deployment
    to be as painless as possible.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我的数据科学 / 机器学习课程，我已经习惯了进入 Google Colab，按下播放按钮，然后代码就运行了。所以，部署的想法让我感到恐惧也不足为奇。但正如
    Buildspace 加速器的创始人所说，您需要“GTFOL”（Get The F Off Localhost）才能让您的软件应用对外开放。因此，我自然希望部署过程尽可能无痛。
- en: '**Tip #5: Use Modal for GPU backend**'
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**提示 #5：为 GPU 后端使用 Modal**'
- en: If you want to deploy your own models (e.g. ML models, image recognition, Whisper
    for transcription, or more recently, open-source LLMs like Llama), you will need
    a GPU cloud provider to host your model.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想部署自己的模型（例如机器学习模型、图像识别、Whisper 转录，或最近的开源大语言模型如 Llama），您需要一个 GPU 云服务提供商来托管您的模型。
- en: My advice is to choose [Modal](https://modal.com/) and never look back.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我的建议是选择[Modal](https://modal.com/)，并永远不要回头。
- en: Modal stands out with its superb documentation and learning resources, complete
    with up-to-date sample code for the latest applications — from fine-tuning open-source
    LLMs to serving LLM chatbots, and more.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Modal 以其卓越的文档和学习资源脱颖而出，提供了最新应用程序的示例代码——从微调开源大语言模型到为 LLM 聊天机器人提供服务等等。
- en: I actually started my entire podcast-transcribing app forking Modal’s sample
    [audio-transcription code](https://modal.com/docs/examples/whisper-transcriber),
    and so it isn’t an exaggeration to say that without Modal I wouldn’t have built
    my app.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我的整个播客转录应用是通过分叉 Modal 的示例[音频转录代码](https://modal.com/docs/examples/whisper-transcriber)开始的，所以可以毫不夸张地说，没有
    Modal，我是无法构建我的应用的。
- en: '![](../Images/f819ee82a0792bb0b91397c0af79f527.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f819ee82a0792bb0b91397c0af79f527.png)'
- en: 'Modal’s dashboard is very user-friendly when monitoring and error tracking.
    Image by author. Source: modal.com'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Modal 的仪表板在监控和错误追踪方面非常用户友好。图像来源：作者提供。来源：modal.com
- en: Modal shines in its user-friendliness (and coming from someone who loathes deployment,
    that’s saying a lot). Just write cloud functions on my local code editor, and
    deploy it using one terminal command. Its dashboard is so user-friendly (especially
    compared to AWS), allowing me to track my app’s usage, analyze performance, and
    trace errors very easily.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Modal 在用户友好性方面表现突出（作为一个讨厌部署的人，这已经说明了很多问题）。只需在本地代码编辑器中编写云函数，通过一个终端命令将其部署。它的仪表板非常用户友好（特别是与
    AWS 相比），让我可以轻松地追踪应用的使用情况、分析性能并追踪错误。
- en: Last of all, Modal serves as my escape valve when it comes to functionality
    that Lambda doesn’t have, or is tedious to implement, e.g. file storage (this
    will come in useful in the next point…) and scheduling functions.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Modal 作为我在 Lambda 没有或实现起来麻烦的功能（例如文件存储，这在下一点中会派上用场……）的逃生阀。
- en: '**Tip #6: Use AWS Lambda for backend deployment and Vercel for frontend**'
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**提示 #6: 使用 AWS Lambda 进行后端部署，使用 Vercel 进行前端部署**'
- en: When hosting my Python backend, I was confused over whether to use Amazon EC2
    or AWS Lambda. My app requires the storage of audio files (which could get big),
    and since Lambda’s serverless architecture isn’t meant to store files (it had
    2 GB of ephemeral storage, but it isn’t persistent), I had thought I had to use
    Amazon EC2\. However, EC2 was much more cumbersome to configure, and being an
    always-on dedicated instance, it would be much more expensive and difficult to
    scale.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在托管我的 Python 后端时，我对于是使用 Amazon EC2 还是 AWS Lambda 感到困惑。我的应用需要存储音频文件（这些文件可能很大），而
    Lambda 的无服务器架构并不适合存储文件（它有 2 GB 的临时存储，但不持久），所以我曾认为必须使用 Amazon EC2。但是，EC2 的配置非常繁琐，而且作为一个始终在线的专用实例，它会更贵，并且更难以扩展。
- en: This is where Modal’s free file storage came into the rescue, and I was able
    to structure my backend to be compatible with Lambda, while downloading and storing
    files when needed on Modal.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这时，Modal 提供的免费文件存储成了救星，我能够将我的后端架构调整为兼容 Lambda，同时在需要时将文件下载并存储到 Modal 上。
- en: Thankfully, [this video](https://www.youtube.com/watch?v=VYk3lwZbHBU) was really
    good, and following their instructions exactly enabled me to successfully deploy
    my backend.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，[这个视频](https://www.youtube.com/watch?v=VYk3lwZbHBU)真的非常好，完全按照他们的指示操作，我成功地部署了我的后端。
- en: For my frontend, [Vercel](https://vercel.com/guides/deploying-react-with-vercel)
    was all I needed. The process was hassle-free and, aside from domain name costs,
    entirely free.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的前端，[Vercel](https://vercel.com/guides/deploying-react-with-vercel) 就是我所需要的一切。这个过程非常简单，除了域名费用，完全免费。
- en: '**Making life easier**'
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**让生活更轻松**'
- en: The last 3 miscellaneous tips that would save you from wasting massive amounts
    of time in development…
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的三个杂项提示，可以帮助你避免在开发中浪费大量时间……
- en: '**Tip #7:** **don’t build your own landing page using React**'
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**提示 #7:** **不要使用 React 构建你自己的着陆页**'
- en: Yet another mistake I did because all those full-stack tutorials fooled me into
    thinking I had to code my own landing page with React. Sure, you can (and I did),
    but there’s a low ceiling of performance and aesthetics — precisely the important
    traits you need for a successful landing page.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我又一次犯的错误，因为所有那些全栈教程让我误以为必须用 React 编写自己的着陆页。没错，你可以这么做（我也做了），但是在性能和美学上会有一个低限——而这正是成功的着陆页所需要的关键特点。
- en: React is only better for custom functionality like the actual AI app interface.
    For the landing page with purely static content, you should instead, use no-code
    site builders like [Webflow](https://webflow.com/) or [Framer](https://www.framer.com/)
    to rapidly build landing pages (and outsource landing page creation to your designer
    so you can work on other things!)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: React 更适合用于像实际的 AI 应用界面这样的自定义功能。对于仅包含静态内容的着陆页，你应该使用像[Webflow](https://webflow.com/)或[Framer](https://www.framer.com/)这样的无代码网站构建工具来快速构建着陆页（并将着陆页的创建外包给你的设计师，这样你就可以专注于其他事情！）
- en: '**Tip #8: Firebase + Stripe for user authentication and payments**'
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**提示 #8: 使用 Firebase + Stripe 进行用户认证和支付**'
- en: When it comes to user authentication, the number of options and tutorials out
    there can once again be overwhelming. I needed a solution that not only handled
    authentication but also integrated with a payment system to control access based
    on user subscription status.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户身份验证方面，市面上的选项和教程多得让人眼花缭乱。我需要一个不仅处理身份验证，还能与支付系统集成的解决方案，以根据用户的订阅状态控制访问权限。
- en: After spending days trying and failing to use several different authentication
    solutions e.g. auth0, I found that Stripe + Firebase worked well. Firebase has
    a Stripe integration that updates users’ subscription status upon successful payment,
    and Firebase’s React client does client-side authentication, and Python client
    does server access control well. Following these two videos ([here](https://www.youtube.com/watch?v=P0Udy2Gi7n8)
    and [here](https://www.youtube.com/watch?v=UhrmPH3TLus)) enabled me to successfully
    implement this on my app.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试并失败于使用几种不同的身份验证解决方案（例如auth0）之后，我发现Stripe + Firebase的组合非常有效。Firebase有一个Stripe集成，能在支付成功后更新用户的订阅状态，Firebase的React客户端处理客户端身份验证，而Python客户端则很好地管理服务器访问控制。参考这两段视频（[这里](https://www.youtube.com/watch?v=P0Udy2Gi7n8)和[这里](https://www.youtube.com/watch?v=UhrmPH3TLus)）让我成功地将这一方案实现到我的应用中。
- en: '**Tip #9: Implement Sentry for error monitoring**'
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**技巧#9：实施Sentry进行错误监控**'
- en: For months, I had no clue what bugs users encountered with my app in production.
    Only when myself or a user spots a bug, do I comb through AWS Cloudwatch interface
    to try to find the backend bug.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 几个月来，我完全不知道用户在我的应用上线后遇到了什么bug。只有当我或用户发现bug时，我才会通过AWS Cloudwatch界面去排查后端的bug。
- en: '![](../Images/bf6403d8b346f68bccfc0ff5d1e8a7d6.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf6403d8b346f68bccfc0ff5d1e8a7d6.png)'
- en: 'Sentry tracks errors in your apps in production (both frontend and backend).
    Image by author. Source: sentry.io.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Sentry在你的应用生产环境中追踪错误（包括前端和后端）。图像由作者提供。来源：sentry.io。
- en: This continued until my co-founder introduced me to [Sentry](https://sentry.io),
    a tool for performance monitoring and error tracking of cloud apps. It’s really
    easy to initialize for your frontend and backend, and you can even integrate it
    with Slack to get instant error notifications. Just be careful not to deplete
    your free plan’s monthly error budget on a trivial but frequent error like authentication
    timeout. That’s what happened to me — and I had to subscribe to the paid plan
    to find logs for the important bugs I actually wanted to solve.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切持续了直到我的联合创始人向我介绍了[Sentry](https://sentry.io)，一个用于云应用性能监控和错误追踪的工具。它非常容易为前端和后端初始化，你甚至可以将其与Slack集成，实时接收错误通知。只是要小心不要把你免费计划的每月错误预算浪费在像身份验证超时这样的琐碎但频繁的错误上。这就是我当时遇到的情况——我不得不订阅付费计划才能找到我真正想解决的重要bug的日志。
- en: '**Bonus Tip #10:** don’t try to build a web app using Spotify’s API! I wasted
    my app for 2 months assuming I could integrate Spotify’s API to allow users to
    load their saved podcasts. But to productionize this, you need to apply for a
    quota extension request, which takes more than a month for Spotify to review.
    And they’ll probably reject the application anyway if your app involves any AI/ML
    model (despite my app not actually using Spotify data to train any model, the
    wording that is prohibited in their Developer Policy).'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**额外技巧#10：**不要尝试使用Spotify的API构建Web应用！我浪费了2个月的时间，假设我可以集成Spotify的API，让用户加载他们保存的播客。但是要实现这一点，你需要申请配额扩展请求，而Spotify审核这个请求需要一个多月的时间。如果你的应用涉及任何AI/ML模型（尽管我的应用实际上并没有用Spotify数据训练任何模型），他们可能会拒绝你的申请（根据他们的开发者政策中禁止的措辞）。'
- en: '**Conclusion**'
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结论**'
- en: I hope this technical guide demystifies some aspects of web app development
    for fellow data science enthusiasts.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇技术指南能为其他数据科学爱好者解开一些Web应用开发的神秘面纱。
- en: 'If you found this post helpful:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得这篇文章有帮助：
- en: 'do check out my other Medium articles: [how to summarize long texts using AI](/summarize-podcast-transcripts-and-long-texts-better-with-nlp-and-ai-e04c89d3b2cb),
    [generating music using deep learning](https://medium.com/towards-data-science/generating-music-using-deep-learning-cb5843a9d55e)'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不妨看看我在Medium上的其他文章：[如何使用AI总结长文本](/summarize-podcast-transcripts-and-long-texts-better-with-nlp-and-ai-e04c89d3b2cb)，[使用深度学习生成音乐](https://medium.com/towards-data-science/generating-music-using-deep-learning-cb5843a9d55e)
- en: try out my [app](http://podsmartai.com) — [Podsmart](http://podsmartai.com)
    transcribes and summarizes podcasts and YouTube videos, saving busy intellectuals
    hours of listening
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试我的[应用](http://podsmartai.com) — [Podsmart](http://podsmartai.com)可以转录并总结播客和YouTube视频，帮助忙碌的知识工作者节省大量听力时间。
- en: follow me on [LinkedIn](https://www.linkedin.com/in/isaacthamhy/) or [Twitter/X](https://twitter.com/thamsuppp),
    and reach out via messages or comments! I’ve love to bounce ideas about all things
    data science and AI
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[LinkedIn](https://www.linkedin.com/in/isaacthamhy/)或[Twitter/X](https://twitter.com/thamsuppp)上关注我，或者通过消息或评论与我联系！我很乐意就所有与数据科学和人工智能相关的内容交流想法。
- en: Thanks for reading!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
