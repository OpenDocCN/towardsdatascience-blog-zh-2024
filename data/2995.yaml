- en: 'How X (Twitter) Designed Its Home Timeline API: Lessons to Learn'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何设计 X（Twitter）首页时间线 API：值得借鉴的经验
- en: 原文：[https://towardsdatascience.com/api-design-of-x-twitter-home-timeline-da426f19edfe?source=collection_archive---------7-----------------------#2024-12-12](https://towardsdatascience.com/api-design-of-x-twitter-home-timeline-da426f19edfe?source=collection_archive---------7-----------------------#2024-12-12)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/api-design-of-x-twitter-home-timeline-da426f19edfe?source=collection_archive---------7-----------------------#2024-12-12](https://towardsdatascience.com/api-design-of-x-twitter-home-timeline-da426f19edfe?source=collection_archive---------7-----------------------#2024-12-12)
- en: 'A closer look at X’s API: fetching data, linking entities, and solving under-fetching.'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 详细了解 X 的 API：获取数据、链接实体，并解决数据获取不足的问题。
- en: '[](https://trekhleb.medium.com/?source=post_page---byline--da426f19edfe--------------------------------)[![Oleksii
    Trekhleb](../Images/9419c8111bc8907db115c822b2d11773.png)](https://trekhleb.medium.com/?source=post_page---byline--da426f19edfe--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--da426f19edfe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--da426f19edfe--------------------------------)
    [Oleksii Trekhleb](https://trekhleb.medium.com/?source=post_page---byline--da426f19edfe--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://trekhleb.medium.com/?source=post_page---byline--da426f19edfe--------------------------------)[![Oleksii
    Trekhleb](../Images/9419c8111bc8907db115c822b2d11773.png)](https://trekhleb.medium.com/?source=post_page---byline--da426f19edfe--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--da426f19edfe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--da426f19edfe--------------------------------)
    [Oleksii Trekhleb](https://trekhleb.medium.com/?source=post_page---byline--da426f19edfe--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--da426f19edfe--------------------------------)
    ·17 min read·Dec 12, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--da426f19edfe--------------------------------)
    ·17 分钟阅读·2024 年 12 月 12 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/d08c0fd3e725c601bde9d1ec4e754bf2.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d08c0fd3e725c601bde9d1ec4e754bf2.png)'
- en: 'When designing a system’s API, software engineers often evaluate various approaches,
    such as [REST vs RPC vs GraphQL](https://okso.app/showcase/system-design/page/0d03d895-b5b1-40c6-3549-945df9d98dcd),
    or hybrid models, to determine the best fit for a specific task or project. These
    approaches define how data flows between the backend and frontend, as well as
    the structure of the response data:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计系统的 API 时，软件工程师通常会评估各种方法，如 [REST 与 RPC 与 GraphQL](https://okso.app/showcase/system-design/page/0d03d895-b5b1-40c6-3549-945df9d98dcd)，或者混合模型，以确定最适合特定任务或项目的方法。这些方法定义了数据如何在后端和前端之间流动，以及响应数据的结构：
- en: Should all data be packed into a single “batch” and returned in one response?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否应将所有数据打包成一个“批量”，并在一个响应中返回？
- en: Can the “batch” be configured to include only the required fields for a specific
    client (e.g., browser vs. mobile) to avoid over-fetching?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否可以配置“批量”仅包含特定客户端（例如，浏览器与移动端）所需的字段，以避免过度获取数据？
- en: What happens if the client under-fetches data and requires additional backend
    calls to retrieve missing entities?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果客户端数据获取不足，并需要额外的后端调用来获取缺失的实体，会发生什么情况？
- en: How should parent-child relationships be handled? Should child entities be embedded
    within their parent, or should normalization be applied, where parent entities
    only reference child entity IDs to improve reusability and reduce response size?
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该如何处理父子关系？是否应将子实体嵌套在父实体中，还是应该应用规范化，仅通过父实体引用子实体的 ID，以提高可重用性并减少响应大小？
- en: 'In this article, we explore how the X (formerly Twitter) home timeline API
    (x.com/home) addresses these challenges, including:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们探讨了 X（前身为 Twitter）首页时间线 API（x.com/home）如何解决这些挑战，包括：
- en: Fetching the list of tweets
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取推文列表
- en: Returning hierarchical or linked data (e.g., tweets, users, media)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回层级或关联数据（例如，推文、用户、媒体）
- en: Sorting and paginating results
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对结果进行排序和分页
- en: Retrieving tweet details
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索推文详情
- en: Liking a tweet
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点赞一条推文
- en: Our focus will be on the API design and functionality, treating the backend
    as a black box since its implementation is inaccessible.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的重点将放在 API 设计和功能上，将后端视为黑箱，因为其实现无法访问。
- en: '![](../Images/1ff17b3000177d4493d993014e3ce514.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1ff17b3000177d4493d993014e3ce514.png)'
- en: Example of X home timeline
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: X 首页时间线示例
- en: '*Showing the exact requests and responses here might be cumbersome and hard
    to follow since the deeply nested and repetitive objects are hard to read. To
    make it easier to see the request/response payload structure, I’ve made my attempt
    to “type out” the home timeline API in TypeScript. So when it comes to the request/response
    examples I’ll use the request and response types instead of actual JSON objects.
    Also, remember that the types are simplified and many properties are omitted for
    brevity.*'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*在这里展示确切的请求和响应可能会显得繁琐且难以跟随，因为深层嵌套和重复的对象很难阅读。为了更容易查看请求/响应负载结构，我尝试在 TypeScript
    中“写出”首页时间线 API。因此，在展示请求/响应示例时，我将使用请求和响应类型，而不是实际的 JSON 对象。此外，请记住，这些类型是简化的，许多属性为了简洁被省略。*'
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*You may find all types in* [*types/x.ts*](https://github.com/trekhleb/trekhleb.github.io/blob/master/src/posts/2024/api-design-x-home-timeline/types/x.ts)
    *file or at the bottom of this article in the “Appendix: All types at one place”
    section.*'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*您可以在* [*types/x.ts*](https://github.com/trekhleb/trekhleb.github.io/blob/master/src/posts/2024/api-design-x-home-timeline/types/x.ts)
    *文件中或在本文底部的“附录：所有类型汇总”部分找到所有类型。*'
- en: ''
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: All images, unless othewise noted, are by the author.
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 除非另有说明，所有图片均来自作者。
- en: Fetching the list of tweets
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取推文列表
- en: The endpoint and request/response structure
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 端点和请求/响应结构
- en: 'Fetching the list of tweets for the home timeline starts with the `POST` request
    to the following endpoint:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 获取首页时间线的推文列表从对以下端点的 `POST` 请求开始：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here is a simplified request body type:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个简化的请求体类型：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here is a simplified response body type (we’ll dive deeper into the response
    sub-types below):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个简化的响应体类型（我们将在下面深入探讨响应子类型）：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It is interesting to note here, that “getting” the data is done via “POSTing”,
    which is not common for the REST-like API but it is common for a GraphQL-like
    API. Also, the `graphql` part of the URL indicates that X is using the GraphQL
    flavor for their API.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，“获取”数据是通过“POST 请求”完成的，这对于类 REST API 并不常见，但在类似 GraphQL 的 API 中是很常见的。此外，URL
    中的`graphql`部分表明 X 正在为其 API 使用 GraphQL 风格。
- en: 'I’m using the word *“flavor”* here because the request body itself doesn’t
    look like a pure [GraphQL query](https://graphql.org/learn/queries/), where we
    may describe the required response structure, listing all the properties we want
    to fetch:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里使用*“flavor”*这个词，因为请求体本身不像纯粹的[GraphQL 查询](https://graphql.org/learn/queries/)，我们可能会在其中描述所需的响应结构，列出我们想要获取的所有属性：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The assumption here is that the home timeline API is not a pure GraphQL API,
    but is a mix of several approaches. Passing the parameters in a POST request like
    this seems closer to the “functional” RPC call. But at the same time, it seems
    like the GraphQL features might be used somewhere on the backend behind the *HomeTimeline*
    endpoint handler/controller. A mix like this might also be caused by a legacy
    code or some sort of ongoing migration. But again, these are just my speculations.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的假设是，首页时间线 API 不是一个纯粹的 GraphQL API，而是几种方法的混合体。像这样通过 POST 请求传递参数看起来更接近于“功能性”RPC
    调用。但与此同时，似乎 GraphQL 的特性可能在后台某个地方被使用在 *HomeTimeline* 端点处理程序/控制器中。像这样的混合可能还与遗留代码或某种正在进行的迁移有关。但再说一次，这些仅仅是我的推测。
- en: You may also notice that the same `TimelineRequest.queryId` is used in the API
    URL as well as in the API request body. This queryId is most probably generated
    on the backend, then it gets embedded in the `main.js` bundle, and then it is
    used when fetching the data from the backend. It is hard for me to understand
    how this `queryId` is used exactly since X's backend is a black box in our case.
    But, again, the speculation here might be that, it might be needed for some sort
    of performance optimization (re-using some pre-computed query results?), caching
    (Apollo related?), debugging (join logs by queryId?), or tracking/tracing purposes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还注意到，API URL 和 API 请求体中都使用了相同的`TimelineRequest.queryId`。这个 queryId 很可能是在后台生成的，然后嵌入到
    `main.js` 包中，之后在从后台获取数据时使用它。由于 X 的后台对于我们来说是一个黑箱，我很难理解这个 `queryId` 是如何被使用的。但是，再说一次，推测可能是它对于某种性能优化（重用一些预计算的查询结果？）、缓存（与
    Apollo 相关？）、调试（通过 queryId 连接日志？）或跟踪/追踪目的来说是必要的。
- en: It is also interesting to note, that the `TimelineResponse` contains not a list
    of tweets, but rather a list of instructions, like *"add a tweet to the timeline"*
    (see the `TimelineAddEntries` type), or *"terminate the timeline"* (see the `TimelineTerminateTimeline`
    type).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要注意的是，`TimelineResponse` 并不包含推文列表，而是包含一系列指令，例如 *“将一条推文添加到时间线”*（请参见 `TimelineAddEntries`
    类型），或 *“终止时间线”*（请参见 `TimelineTerminateTimeline` 类型）。
- en: 'The `TimelineAddEntries` instruction itself may also contain different types
    of entities:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`TimelineAddEntries` 指令本身也可能包含不同类型的实体：'
- en: Tweets — see the `TimelineItem` type
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推文 — 请参见 `TimelineItem` 类型
- en: Cursors — see the `TimelineCursor` type
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游标 — 请参见 `TimelineCursor` 类型
- en: Conversations/comments/threads — see the `TimelineModule` type
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对话/评论/线程 — 请参见 `TimelineModule` 类型
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This is interesting from the extendability point of view since it allows a wider
    variety of what can be rendered in the home timeline without tweaking the API
    too much.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从可扩展性的角度来看，这一点很有趣，因为它允许在不大幅修改 API 的情况下，渲染更多种类的内容到首页时间线。
- en: Pagination
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分页
- en: The `TimelineRequest.variables.count` property sets how many tweets we want
    to fetch at once (per page). The default is 20\. However, more than 20 tweets
    can be returned in the `TimelineAddEntries.entries` array. For example, the array
    might contain 37 entries for the first page load, because it includes tweets (29),
    pinned tweets (1), promoted tweets (5), and pagination cursors (2). I'm not sure
    why there are 29 regular tweets with the requested count of 20 though.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`TimelineRequest.variables.count` 属性设置我们希望一次获取多少条推文（每页）。默认值是 20。然而，`TimelineAddEntries.entries`
    数组中可能会返回超过 20 条推文。例如，数组可能在第一页加载时包含 37 条条目，因为它包括推文（29 条）、置顶推文（1 条）、推广推文（5 条）和分页游标（2
    条）。不过，我不确定为什么有 29 条常规推文，而请求的数量是 20 条。'
- en: The `TimelineRequest.variables.cursor` is responsible for the cursor-based pagination.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`TimelineRequest.variables.cursor` 负责基于游标的分页。'
- en: '*“Cursor pagination is most often used for real-time data due to the frequency
    new records are added and because when reading data you often see the latest results
    first. It eliminates the possibility of skipping items and displaying the same
    item more than once. In cursor-based pagination, a constant pointer (or cursor)
    is used to keep track of where in the data set the next items should be fetched
    from.” See the* [*Offset pagination vs Cursor pagination*](https://stackoverflow.com/questions/55744926/offset-pagination-vs-cursor-pagination)
    *thread for the context.*'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“游标分页最常用于实时数据，因为新记录的添加频繁，并且在读取数据时，通常先看到最新的结果。它消除了跳过项和重复显示相同项的可能性。在基于游标的分页中，使用一个常量指针（或游标）来跟踪下一项应从数据集中哪里获取。”请参见*
    [*偏移分页与游标分页*](https://stackoverflow.com/questions/55744926/offset-pagination-vs-cursor-pagination)
    *讨论帖获取相关背景信息。*'
- en: When fetching the list of tweets for the first time the `TimelineRequest.variables.cursor`
    is empty, since we want to fetch the top tweets from the default (most probably
    pre-computed) list of personalized tweets.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次获取推文列表时，`TimelineRequest.variables.cursor` 是空的，因为我们希望从默认的（很可能是预计算的）个性化推文列表中获取顶级推文。
- en: 'However, in the response, along with the tweet data, the backend also returns
    the cursor entries. Here is the response type hierarchy: `TimelineResponse → TimelineAddEntries
    → TimelineCursor`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在响应中，除了推文数据，后端还会返回游标条目。以下是响应类型的层级结构：`TimelineResponse → TimelineAddEntries
    → TimelineCursor`：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Every page contains the list of tweets along with “top” and “bottom” cursors:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 每一页都包含推文列表，以及“顶部”和“底部”游标：
- en: '![](../Images/e7fccea0dff69df5fc3f4350d2e732eb.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e7fccea0dff69df5fc3f4350d2e732eb.png)'
- en: Examples of how cursors are passed along with tweets
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 游标与推文一同传递的示例
- en: 'After the page data is loaded, we can go from the current page in both directions
    and fetch either the “previous/older” tweets using the “bottom” cursor or the
    “next/newer” tweets using the “top” cursor. My assumption is that fetching the
    “next” tweets using the “top” cursor happens in two cases: when the new tweets
    were added while the user is still reading the current page, or when the user
    starts scrolling the feed upwards (and there are no cached entries or if the previous
    entries were deleted for the performance reasons).'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 数据加载后，我们可以从当前页面向两个方向移动，使用“底部”游标获取“之前/更旧”的推文，或使用“顶部”游标获取“下一条/更新”的推文。我猜测，使用“顶部”游标获取“下一条”推文有两种情况：一是当用户仍在浏览当前页面时，新推文已被添加，二是当用户开始向上滚动动态时（如果没有缓存条目，或之前的条目由于性能原因被删除）。
- en: 'The X’s cursor itself might look like this: `DAABCgABGemI6Mk__9sKAAIZ6MSYG9fQGwgAAwAAAAIAAA`.
    In some API designs, the cursor may be a Base64 encoded string that contains the
    id of the last entry in the list, or the timestamp of the last seen entry. For
    example: `eyJpZCI6ICIxMjM0NTY3ODkwIn0= --> {"id": "1234567890"}`, and then, this
    data is used to query the database accordingly. In the case of X API, it looks
    like the cursor is being Base64 decoded into some custom binary sequence that
    might require some further decoding to get any meaning out of it (i.e. via the
    Protobuf message definitions). Since we don''t know if it is a `.proto` encoding
    and also we don''t know the `.proto` message definition we may just assume that
    the backend knows how to query the next batch of tweets based on the cursor string.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 'X的游标本身可能看起来是这样的：`DAABCgABGemI6Mk__9sKAAIZ6MSYG9fQGwgAAwAAAAIAAA`。在一些API设计中，游标可能是一个Base64编码的字符串，包含列表中最后一项的ID，或者是最后一项的时间戳。例如：`eyJpZCI6ICIxMjM0NTY3ODkwIn0=
    --> {"id": "1234567890"}`，然后这些数据会用于相应地查询数据库。在X API的情况下，游标看起来像是被Base64解码成某种自定义的二进制序列，可能需要进一步解码才能得到有意义的内容（例如，通过Protobuf消息定义）。由于我们不知道它是否是`.proto`编码，也不知道`.proto`的消息定义，我们只能假设后端知道如何根据游标字符串查询下一批推文。'
- en: The `TimelineResponse.variables.seenTweetIds` parameter is used to inform the
    server about which tweets from the currently active page of the infinite scrolling
    the client has already seen. This most probably helps ensure that the server does
    not include duplicate tweets in subsequent pages of results.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`TimelineResponse.variables.seenTweetIds`参数用于通知服务器客户端当前活动页面中已经查看过的推文（来自无限滚动）。这很可能有助于确保服务器在后续的结果页面中不包含重复的推文。'
- en: Linked/hierarchical entities
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 链接/层级实体
- en: 'One of the challenges to be solved in the APIs like home timeline (or Home
    Feed) is to figure out how to return the linked or hierarchical entities (i.e.
    `tweet → user`, `tweet → media`, `media → author`, etc):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 像主页时间线（或主页动态）这样的API面临的挑战之一是如何返回链接或层级实体（即`tweet → user`、`tweet → media`、`media
    → author`等）：
- en: Should we only return the list of tweets first and then fetch the dependent
    entities (like user details) in a bunch of separate queries on-demand?
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们是否应该先仅返回推文列表，然后根据需求通过一系列单独的查询获取依赖的实体（如用户详情）？
- en: Or should we return all the data at once, increasing the time and the size of
    the first load, but saving the time for all subsequent calls?
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者我们应该一次性返回所有数据，这样虽然会增加首次加载的时间和大小，但可以节省后续所有调用的时间？
- en: Do we need to normalize the data in this case to reduce the payload size (i.e.
    when the same user is an author of many tweets and we want to avoid repeating
    the user data over and over again in each tweet entity)?
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这种情况下，我们是否需要对数据进行规范化，以减少负载大小（即当同一用户是多条推文的作者时，我们希望避免在每个推文实体中重复用户数据）？
- en: Or should it be a combination of the approaches above?
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还是应该是上述方法的组合？
- en: Let’s see how X handles it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一下X是如何处理的。
- en: 'Earlier in the `TimelineTweet` type the `Tweet` sub-type was used. Let''s see
    how it looks:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在`TimelineTweet`类型中，早些时候使用了`Tweet`子类型。我们来看一下它的样子：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What’s interesting here is that most of the dependent data like `tweet → media`
    and `tweet → author` is embedded into the response on the first call (no subsequent
    queries).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有趣的是，大部分依赖数据，如`tweet → media`和`tweet → author`，在第一次调用的响应中就已经嵌入（无需后续查询）。
- en: Also, the `User` and `Media` connections with `Tweet` entities are not normalized
    (if two tweets have the same author, their data will be repeated in each tweet
    object). But it seems like it should be ok, since in the scope of the home timeline
    for a specific user the tweets will be authored by many authors and repetitions
    are possible but sparse.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`User`和`Media`与`Tweet`实体的连接并没有进行规范化（如果两条推文有相同的作者，那么它们的数据将在每个推文对象中重复）。但似乎这应该没问题，因为在特定用户的主页时间线范围内，推文会由多位作者创作，数据的重复是可能的，但并不频繁。
- en: My assumption was that the `UserTweets` API (that we don't cover here), which
    is responsible for fetching the tweets of *one particular user* will handle it
    differently, but, apparently, it is not the case. The `UserTweets` returns the
    list of tweets of the same user and embeds the same user data over and over again
    for each tweet. It's interesting. Maybe the simplicity of the approach beats some
    data size overhead (maybe user data is considered pretty small in size). I'm not
    sure.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我的假设是，负责获取*某一特定用户*推文的 `UserTweets` API（我们在这里不讨论）会以不同的方式处理，但显然并非如此。`UserTweets`
    返回相同用户的推文列表，并且为每条推文重复嵌入相同的用户数据。这很有趣，也许这种方法的简单性克服了一些数据大小的开销（也许用户数据的大小被认为相对较小）。我不确定。
- en: Another observation about the entities’ relationship is that the `Media` entity
    also has a link to the `User` (the author). But it does it not via direct entity
    embedding as the `Tweet` entity does, but rather it links via the `Media.source_user_id_str`
    property.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 关于实体关系的另一个观察是，`Media` 实体也与 `User`（作者）有链接。但它不是通过直接的实体嵌入（像 `Tweet` 实体那样），而是通过
    `Media.source_user_id_str` 属性进行链接。
- en: The “comments” (which are also the “tweets” by their nature) for each “tweet”
    in the home timeline are not fetched at all. To see the tweet thread the user
    must click on the tweet to see its detailed view. The tweet thread will be fetched
    by calling the `TweetDetail` endpoint (more about it in the "Tweet detail page"
    section below).
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 每个主页时间线中“推文”的“评论”（它们本质上也是“推文”）完全没有被获取。要查看推文线程，用户必须点击推文以查看其详细视图。推文线程将通过调用 `TweetDetail`
    端点来获取（更多关于它的内容将在下文的“推文详情页面”部分中介绍）。
- en: Another entity that each `Tweet` has is `FeedbackActions` (i.e. "Recommend less
    often" or "See fewer"). The way the `FeedbackActions` are stored in the response
    object is different from the way the `User` and `Media` objects are stored. While
    the `User` and `Media` entities are part of the `Tweet`, the `FeedbackActions`
    are stored separately in `TimelineItem.content.feedbackInfo.feedbackKeys` array
    and are linked via the `ActionKey`. That was a slight surprise for me since it
    doesn't seem to be the case that any action is re-usable. It looks like one action
    is used for one particular tweet only. So it seems like the `FeedbackActions`
    could be embedded into each tweet in the same way as `Media` entities. But I might
    be missing some hidden complexity here (like the fact that each action can have
    children actions).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `Tweet` 还有一个实体是 `FeedbackActions`（即“更少推荐”或“更少查看”）。`FeedbackActions` 在响应对象中的存储方式与
    `User` 和 `Media` 对象的存储方式不同。虽然 `User` 和 `Media` 实体是 `Tweet` 的一部分，但 `FeedbackActions`
    是单独存储在 `TimelineItem.content.feedbackInfo.feedbackKeys` 数组中的，并通过 `ActionKey` 进行链接。对我来说这是一个小小的惊讶，因为看起来没有任何动作是可以重用的。似乎每个动作仅用于特定的推文。因此，`FeedbackActions`
    似乎可以像 `Media` 实体一样嵌入到每个推文中。但我可能忽略了某些隐藏的复杂性（例如每个动作可能有子动作）。
- en: More details about the actions are in the “Tweet actions” section below.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 关于动作的更多细节请参见下文的“推文动作”部分。
- en: Sorting
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序
- en: 'The sorting order of the timeline entries is defined by the backend via the
    `sortIndex` properties:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 时间线条目的排序顺序由后端通过 `sortIndex` 属性定义：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `sortIndex` itself might look something like this `'1867231621095096312'`.
    It likely corresponds directly to or is derived from a [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`sortIndex` 本身可能像这样 `''1867231621095096312''`。它可能直接对应或从 [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID)
    派生出来。'
- en: '*Actually most of the IDs you see in the response (tweet IDs) follow the “Snowflake
    ID” convention and look like* `*''1867231621095096312''*`*.*'
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*实际上，您在响应中看到的大多数 ID（推文 ID）都遵循“Snowflake ID”规范，并且看起来像是* `*''1867231621095096312''*`*。'
- en: If this is used to sort entities like tweets, the system leverages the inherent
    chronological sorting of Snowflake IDs. Tweets or objects with a higher sortIndex
    value (a more recent timestamp) appear higher in the feed, while those with lower
    values (an older timestamp) appear lower in the feed.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用来对诸如推文等实体进行排序，系统会利用 Snowflake ID 本身的时间顺序排序。具有较高 `sortIndex` 值（即较新的时间戳）的推文或对象会出现在信息流的更高位置，而具有较低值（即较旧时间戳）的推文则会出现在信息流的较低位置。
- en: 'Here’s the step-by-step decoding of the Snowflake ID (in our case the `sortIndex`)
    `1867231621095096312`:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对 Snowflake ID（在我们这里是 `sortIndex`）`1867231621095096312` 的逐步解码：
- en: '**Extract the Timestamp:**'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提取时间戳：**'
- en: 'The timestamp is derived by right-shifting the Snowflake ID by 22 bits (to
    remove the lower 22 bits for data center, worker ID, and sequence): `1867231621095096312
    → 445182709954`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间戳通过将Snowflake ID右移22位（以去掉数据中心、工作者ID和序列的低22位）得出：`1867231621095096312 → 445182709954`
- en: '**Add Twitter’s Epoch:**'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加Twitter的纪元：**'
- en: 'Adding Twitter’s custom epoch (1288834974657) to this timestamp gives the UNIX
    timestamp in milliseconds: `445182709954 + 1288834974657 → 1734017684611ms`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Twitter的自定义纪元（1288834974657）添加到此时间戳中，得到UNIX时间戳的毫秒数：`445182709954 + 1288834974657
    → 1734017684611ms`
- en: '**Convert to a human-readable date:**'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转换为人类可读的日期：**'
- en: 'Converting the UNIX timestamp to a UTC datetime gives: `1734017684611ms → 2024-12-12
    15:34:44.611 (UTC)`'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将UNIX时间戳转换为UTC日期时间：`1734017684611ms → 2024-12-12 15:34:44.611 (UTC)`
- en: So we can assume here that the tweets in the home timeline are sorted chronologically.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以在这里假设，首页时间线中的推文是按时间顺序排序的。
- en: Tweet actions
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推文操作
- en: Each tweet has an “Actions” menu.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 每条推文都有一个“操作”菜单。
- en: '![](../Images/99e8c98d9b3e8ea09c2e5906f3a0ee5e.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/99e8c98d9b3e8ea09c2e5906f3a0ee5e.png)'
- en: Example of tweet actions
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 推文操作示例
- en: 'The actions for each tweet are coming from the backend in a `TimelineItem.content.feedbackInfo.feedbackKeys`
    array and are linked with the tweets via the `ActionKey`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 每条推文的操作来自后台的`TimelineItem.content.feedbackInfo.feedbackKeys`数组，并通过`ActionKey`与推文关联：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It is interesting here that this flat array of actions is actually a tree (or
    a graph? I didn’t check), since each action may have child actions (see the `TimelineAction.value.childKeys`
    array). This makes sense, for example, when after the user clicks on the "Don't
    Like" action, the follow-up might be to show the "This post isn’t relevant" action,
    as a way of explaining why the user doesn't like the tweet.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，这个扁平的操作数组实际上是一个树（或图形？我没检查），因为每个操作可能有子操作（参见`TimelineAction.value.childKeys`数组）。这是有意义的，例如，当用户点击“不要喜欢”操作时，后续可能会显示“此帖子不相关”操作，用以解释用户为什么不喜欢这条推文。
- en: Tweet detail page
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推文详情页
- en: 'Once the user would like to see the tweet detail page (i.e. to see the thread
    of comments/tweets), the user clicks on the tweet and the `GET` request to the
    following endpoint is performed:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户想查看推文详情页（即查看评论/推文的线程），用户点击推文并发送`GET`请求到以下端点：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: I was curious here why the list of tweets is being fetched via the `POST` call,
    but each tweet detail is fetched via the `GET` call. Seems inconsistent. Especially
    keeping in mind that similar query parameters like `query-id`, `features`, and
    others this time are passed in the URL and not in the request body. The response
    format is also similar and is re-using the types from the list call. I'm not sure
    why is that. But again, I'm sure I might be might be missing some background complexity
    here.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里很好奇，为什么推文列表是通过`POST`请求获取的，而每条推文的详情是通过`GET`请求获取的。这似乎不一致。特别是考虑到类似`query-id`、`features`等查询参数这次是通过URL传递的，而不是通过请求体传递的。响应格式也类似，并且重用了列表调用中的类型。我不确定为什么会这样。但再次强调，我肯定可能会错过一些背景复杂性。
- en: 'Here are the simplified response body types:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是简化后的响应体类型：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The response is pretty similar (in its types) to the list response, so we won’t
    for too long here.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 响应在类型上与列表响应非常相似，因此我们不会在这里停留太久。
- en: One interesting nuance is that the “comments” (or conversations) of each tweet
    are actually other tweets (see the `TimelineModule` type). So the tweet thread
    looks very similar to the home timeline feed by showing the list of `TimelineTweet`
    entries. This looks elegant. A good example of a universal and re-usable approach
    to the API design.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的细节是，每条推文的“评论”（或对话）实际上是其他推文（参见`TimelineModule`类型）。因此，推文线程看起来与首页时间线的推送非常相似，通过显示`TimelineTweet`条目的列表来呈现。这看起来非常优雅。一个很好的例子，展示了API设计中通用且可复用的方法。
- en: Liking the tweet
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点赞推文
- en: 'When a user likes the tweet, the `POST` request to the following endpoint is
    being performed:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点赞推文时，会向以下端点发送`POST`请求：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Here is the request body types:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是请求体类型：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here is the response body types:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是响应体类型：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Looks straightforward and also resembles the RPC-like approach to the API design.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很直接，也类似于RPC风格的API设计方法。
- en: Conclusion
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We have touched on some basic parts of the home timeline API design by looking
    at X’s API example. I made some assumptions along the way to the best of my knowledge.
    I believe some things I might have interpreted incorrectly and I might have missed
    some complex nuances. But even with that in mind, I hope you got some useful insights
    from this high-level overview, something that you could apply in your next API
    Design session.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过查看X的API示例，已经涉及了一些家庭时间线API设计的基本部分。在这个过程中，我尽量根据我的知识做出了一些假设。我相信我可能有一些地方理解得不准确，也可能错过了一些复杂的细微差别。但即便如此，我希望你能从这份高层次的概述中获得一些有用的见解，这些见解可以应用到你下次的API设计会议中。
- en: Initially, I had a plan to go through similar top-tech websites to get some
    insights from Facebook, Reddit, YouTube, and others and to collect battle-tested
    best practices and solutions. I’m not sure if I’ll find the time to do that. Will
    see. But it could be an interesting exercise.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，我计划通过浏览一些顶级技术网站，获取来自Facebook、Reddit、YouTube等的见解，并收集经过实践验证的最佳做法和解决方案。我不确定是否能找到时间去做这件事。到时再看看。但这可能是一个有趣的练习。
- en: 'Appendix: All types in one place'
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录：所有类型汇总
- en: For the reference, I’m adding all types in one go here. You may also find all
    types in [types/x.ts](https://github.com/trekhleb/trekhleb.github.io/blob/master/src/posts/2024/api-design-x-home-timeline/types/x.ts)
    file.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参考，我在这里一次性添加了所有类型。你也可以在[types/x.ts](https://github.com/trekhleb/trekhleb.github.io/blob/master/src/posts/2024/api-design-x-home-timeline/types/x.ts)文件中找到所有类型。
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
