- en: Radical Simplicity in Data Engineering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据工程中的激进简化
- en: 原文：[https://towardsdatascience.com/radical-simplicity-in-data-engineering-86ec3d2bd71c?source=collection_archive---------4-----------------------#2024-07-26](https://towardsdatascience.com/radical-simplicity-in-data-engineering-86ec3d2bd71c?source=collection_archive---------4-----------------------#2024-07-26)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/radical-simplicity-in-data-engineering-86ec3d2bd71c?source=collection_archive---------4-----------------------#2024-07-26](https://towardsdatascience.com/radical-simplicity-in-data-engineering-86ec3d2bd71c?source=collection_archive---------4-----------------------#2024-07-26)
- en: Learn from Software Engineers and Discover the Joy of ‘Worse is Better’ Thinking
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向软件工程师学习，发现“差的就是更好的”思维方式的乐趣
- en: '[](https://medium.com/@caiparryjones96?source=post_page---byline--86ec3d2bd71c--------------------------------)[![Cai
    Parry-Jones](../Images/60b83f5167651f9621a3e73b8d72ccae.png)](https://medium.com/@caiparryjones96?source=post_page---byline--86ec3d2bd71c--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--86ec3d2bd71c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--86ec3d2bd71c--------------------------------)
    [Cai Parry-Jones](https://medium.com/@caiparryjones96?source=post_page---byline--86ec3d2bd71c--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@caiparryjones96?source=post_page---byline--86ec3d2bd71c--------------------------------)[![Cai
    Parry-Jones](../Images/60b83f5167651f9621a3e73b8d72ccae.png)](https://medium.com/@caiparryjones96?source=post_page---byline--86ec3d2bd71c--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--86ec3d2bd71c--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--86ec3d2bd71c--------------------------------)
    [Cai Parry-Jones](https://medium.com/@caiparryjones96?source=post_page---byline--86ec3d2bd71c--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--86ec3d2bd71c--------------------------------)
    ·6 min read·Jul 26, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--86ec3d2bd71c--------------------------------)
    ·6分钟阅读·2024年7月26日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/9427c6236c0c26ea78735c52b9b205e6.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9427c6236c0c26ea78735c52b9b205e6.png)'
- en: 'source: [unsplash.com](https://unsplash.com/)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[unsplash.com](https://unsplash.com/)
- en: 'Recently, I have had the fortune of speaking to a number of data engineers
    and data architects about the problems they face with data in their businesses.
    The main pain points I heard time and time again were:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我有幸与许多数据工程师和数据架构师交流了他们在企业中遇到的数据问题。我一次又一次听到的主要痛点包括：
- en: Not knowing why something broke
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不知道为什么某些东西坏了
- en: Getting burnt with high cloud compute costs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遇到高昂的云计算成本
- en: Taking too long to build data solutions/complete data projects
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建数据解决方案/完成数据项目的时间过长
- en: Needing expertise on many tools and technologies
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要精通许多工具和技术
- en: These problems aren’t new. I’ve experienced them, you’ve probably experienced
    them. Yet, we can’t seem to find a solution that solves all of these issues in
    the long run. You might think to yourself, ‘well point one can be solved with
    {insert data observability tool}’, or ‘point two just needs a stricter data governance
    plan in place’. The problem with these style of solutions is they add additional
    layers of complexity, which cause the final two pain points to increase in seriousness.
    The aggregate sum of pain remains the same, just a different distribution between
    the four points.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题并不新鲜。我自己遇到过，你也许也遇到过。然而，我们似乎无法找到一种能从长远解决所有这些问题的方案。你可能会心想，“第一个问题可以用{插入数据可观测性工具}来解决”，或者“第二个问题只需要一个更严格的数据治理计划”。这些解决方案的问题在于，它们增加了额外的复杂性，这使得最后两个痛点变得更加严重。痛苦的总和保持不变，只是四个痛点之间的分布不同。
- en: '![](../Images/a8dc96143f25d0bb69eacb1128c1193a.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a8dc96143f25d0bb69eacb1128c1193a.png)'
- en: created by the author using [Google Sheets](https://workspace.google.com/intl/en_uk/products/sheets/)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作者使用 [Google Sheets](https://workspace.google.com/intl/en_uk/products/sheets/)
    创建
- en: 'This article aims to present a contrary style of problem solving: radical simplicity.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本文旨在提出一种相反的解决问题方式：激进简化。
- en: '**TL;DR**'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**总结**'
- en: Software engineers have found massive success in embracing simplicity.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件工程师们在拥抱简化方面取得了巨大的成功。
- en: Over-engineering and pursuing perfection can result in bloated, slow-to-develop
    data systems, with sky high costs to the business.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过度工程化和追求完美可能会导致臃肿、开发缓慢的数据系统，并且给企业带来高昂的成本。
- en: Data teams should consider sacrificing some functionality for the sake of simplicity
    and speed.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据团队应考虑为了简化和加速，牺牲一些功能。
- en: '**A Lesson From Those Software Guys**'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**从那些软件工程师那里学到的一课**'
- en: In 1989, the computer scientist [Richard P. Gabriel](https://en.wikipedia.org/wiki/Richard_P._Gabriel)
    wrote a relatively famous essay on computer systems paradoxically called ‘Worse
    Is Better’. I won’t go into the details, you can read the essay [here](https://dreamsongs.com/WorseIsBetter.html)
    if you like, but the underlying message was that software quality does not necessarily
    improve as functionality increases. In other words, on occasions, you can sacrifice
    completeness for simplicity and end up with an inherently ‘better’ product because
    of it.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 1989年，计算机科学家[理查德·P·加布里埃尔](https://en.wikipedia.org/wiki/Richard_P._Gabriel)写了一篇相对著名的文章，标题是《‘Worse
    Is Better’》。我不会深入讲解，如果你感兴趣，可以在[这里](https://dreamsongs.com/WorseIsBetter.html)阅读文章，但文章的核心信息是：软件质量不一定随着功能的增加而提升。换句话说，有时你可以为了简洁性牺牲完整性，最终因为简化而获得一个本质上“更好”的产品。
- en: 'This was a strange idea to the pioneers of computing during the 1950/60s. The
    philosophy of the day was: a computer system needs to be pure, and it can only
    be pure if it accounts for all possible scenarios. This was likely due to the
    fact that most leading computer scientists at the time were academics, who very
    much wanted to treat computer science as a hard science.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于1950/60年代的计算机先驱们来说，这个想法是非常陌生的。那个时代的理念是：计算机系统必须纯粹，只有在考虑了所有可能的情境下，它才能称为纯粹。这很可能是因为当时大多数领先的计算机科学家都是学术界人士，他们非常希望将计算机科学视为一门严谨的学科。
- en: Academics at MIT, the leading institution in computing at the time, started
    working on the operating system for the next generation of computers, called [Multics](https://en.wikipedia.org/wiki/Multics).
    After nearly a decade of development and millions of dollars of investment, the
    MIT guys released their new system. It was unquestionably the most advanced operating
    system of the time, however it was a pain to install due to the computing requirements,
    and feature updates were slow due to the size of the code base. As a result, it
    never caught on beyond a few select universities and industries.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当时计算机领域的领先机构麻省理工学院（MIT）的学者们开始着手开发下一代计算机操作系统，名为[Multics](https://en.wikipedia.org/wiki/Multics)。经过近十年的开发和数百万美元的投资，MIT的团队发布了他们的新系统。毫无疑问，这是当时最先进的操作系统，然而由于计算要求高，安装非常困难，而且由于代码库庞大，功能更新缓慢。因此，它仅在少数几所大学和行业中获得应用。
- en: 'While Multics was being built, a small group supporting Multics’s development
    became frustrated with the growing requirements required for the system. They
    eventually decided to break away from the project. Armed with this experience
    they set their sights on creating their own operating system, one with a fundamental
    philosophy shift:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Multics开发的同时，支持Multics开发的小组对于系统日益增长的要求感到沮丧。他们最终决定脱离这个项目。凭借这些经验，他们开始着手创建自己的操作系统，这个操作系统有着根本性的哲学转变：
- en: The design must be simple, both in implementation and interface. It is more
    important for the implementation to be simple than the interface. Simplicity is
    the most important consideration in a design.
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 设计必须简单，无论是实现还是界面。实现的简单性比界面的简单性更为重要。简洁性是设计中最重要的考虑因素。
- en: ''
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — Richard P. Gabriel
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — 理查德·P·加布里埃尔
- en: Five years after Multics’s release, the breakaway group released their operating
    system, [Unix](https://en.wikipedia.org/wiki/History_of_Unix). Slowly but steadily
    it caught traction, and by the 1990s Unix became the go-to choice for computers,
    with [over 90% of the world’s top 500 fastest supercomputers](https://en.wikipedia.org/wiki/Usage_share_of_operating_systems#Supercomputers)
    using it. To this day, Unix is still widely used, most notably as the system underlying
    macOS.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在Multics发布五年后，这个脱离小组发布了他们的操作系统[Unix](https://en.wikipedia.org/wiki/History_of_Unix)。它缓慢而稳步地获得了认可，到1990年代，Unix成为了计算机的首选操作系统，[全球前500强超级计算机中超过90%](https://en.wikipedia.org/wiki/Usage_share_of_operating_systems#Supercomputers)使用了Unix。直到今天，Unix仍然被广泛使用，最著名的是作为macOS的底层系统。
- en: There were obviously other factors beyond its simplicity that led to Unix’s
    success. But its lightweight design was, and still is, a highly valuable asset
    of the system. That could only come about because the designers were willing to
    sacrifice functionality. The data industry should not be afraid to to think the
    same way.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，除了简洁性之外，还有其他因素促成了Unix的成功。但其轻量级设计是该系统至今依然极为宝贵的资产。这一切的实现，归功于设计师们愿意牺牲一些功能性。数据行业不应害怕以同样的方式思考。
- en: '**Back to Data in the 21st Century**'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**回到21世纪的数据**'
- en: Thinking back at my own experiences, the philosophy of most big data engineering
    projects I’ve worked on was similar to that of Multics. For example, there was
    a project where we needed to automate standardising the raw data coming in from
    all our clients. The decision was made to do this in the data warehouse via dbt,
    since we could then have a full view of data lineage from the very raw files right
    through to the standardised single table version and beyond. The problem was that
    the first stage of transformation was very manual, it required loading each individual
    raw client file into the warehouse, then dbt creates a model for cleaning each
    client’s file. This led to 100s of dbt models needing to be generated, all using
    essentially the same logic. Dbt became so bloated it took minutes for the data
    lineage chart to load in the dbt docs website, and our GitHub Actions for CI ([continuous
    integration](https://docs.github.com/en/actions/automating-builds-and-tests/about-continuous-integration))
    took over an hour to complete for each pull request.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 回想我自己的经历，我参与的大多数大数据工程项目的哲学与Multics项目类似。例如，有一个项目，我们需要自动化地标准化从所有客户处获取的原始数据。我们决定通过数据仓库使用dbt来完成，因为这样我们就可以全面查看数据的血缘关系，从最原始的文件一直到标准化的单一表格版本及之后的内容。问题是，第一阶段的转换非常手动，必须将每个原始客户文件单独加载到仓库中，然后dbt为每个客户的文件创建清理模型。这导致需要生成数百个dbt模型，所有模型本质上使用相同的逻辑。dbt变得过于臃肿，以至于在dbt文档网站上加载数据血缘图表需要几分钟时间，而我们的GitHub
    Actions进行CI（[持续集成](https://docs.github.com/en/actions/automating-builds-and-tests/about-continuous-integration)）每次拉取请求都需要超过一个小时才能完成。
- en: This could have been resolved fairly simply if leadership had allowed us to
    make the first layer of transformations outside of the data warehouse, using AWS
    Lambda and Python. But no, that would have meant the data lineage produced by
    dbt wouldn’t be 100% complete. That was it. That was the whole reason not to massively
    simplify the project. Similar to the group who broke away from the Multics project,
    I left this project mid-build, it was simply too frustrating to work on something
    that so clearly could have been much simpler. As I write this, I discovered they
    are still working on the project.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果领导层允许我们在数据仓库之外进行第一层转换，使用AWS Lambda和Python，这个问题本可以相对简单地解决。但没有，这样的话，dbt生成的数据血缘图就不能做到100%的完整性。仅此而已。这就是不大幅简化项目的唯一理由。就像从Multics项目中脱离出来的小组一样，我在项目中途离开了，因为在一个显然可以更简单的项目上工作实在太令人沮丧了。当我写这些时，我发现他们仍然在继续做这个项目。
- en: So, What the Heck is Radical Simplicity?
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 那么，激进简化到底是什么呢？
- en: Radical simplicity in data engineering isn’t a framework or data-stack toolkit,
    it is simply a frame of mind. A philosophy that prioritises simple, straightforward
    solutions over complex, all-encompassing systems.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 数据工程中的激进简化并不是一种框架或数据栈工具集，而是一种心态。这是一种哲学，优先考虑简单、直接的解决方案，而不是复杂的、包罗万象的系统。
- en: 'Key principles of this philosophy include:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这种哲学的关键原则包括：
- en: 'Minimalism: Focusing on core functionalities that deliver the most value, rather
    than trying to accommodate every possible scenario or requirement.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 极简主义：专注于提供最大价值的核心功能，而不是试图满足每一个可能的场景或需求。
- en: 'Accepting trade-offs: Willingly sacrificing some degree of completeness or
    perfection in favour of simplicity, speed, and ease of maintenance.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受权衡：愿意在简化、速度和维护方便性上牺牲一定的完整性或完美性。
- en: 'Pragmatism over idealism: Prioritising practical, workable solutions that solve
    real business problems efficiently, rather than pursuing theoretically perfect
    but overly complex systems.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实用主义胜过理想主义：优先考虑能够高效解决实际业务问题的可行解决方案，而不是追求理论上完美但过于复杂的系统。
- en: 'Reduced cognitive load: Designing systems and processes that are easier to
    understand, implement, and maintain, thus reducing the expertise required across
    multiple tools and technologies.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 减少认知负担：设计易于理解、实施和维护的系统和流程，从而减少在多个工具和技术中的专业知识要求。
- en: 'Cost-effectiveness: Embracing simpler solutions that often require less computational
    resources and human capital, leading to lower overall costs.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 成本效益：拥抱更简单的解决方案，这些解决方案通常需要更少的计算资源和人力资本，从而降低整体成本。
- en: 'Agility and adaptability: Creating systems that are easier to modify and evolve
    as business needs change, rather than rigid, over-engineered solutions.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 敏捷性与适应性：创建更容易修改和发展的系统，以应对业务需求的变化，而不是僵化的、过度设计的解决方案。
- en: 'Focus on outcomes: Emphasising the end results and business value rather than
    getting caught up in the intricacies of the data processes themselves.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 专注于结果：强调最终成果和业务价值，而不是陷入数据处理过程的复杂细节中。
- en: 'This mindset can be in direct contradiction to modern data engineering solutions
    of adding more tools, processes, and layers. As a result, be expected to fight
    your corner. Before suggesting an alternative, simpler, solution, come prepared
    with a deep understanding of the problem at hand. I am reminded of the quote:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种思维方式可能与现代数据工程解决方案中的增加更多工具、流程和层级相矛盾。因此，你应该做好准备为自己的立场辩护。在提出替代、更简单的解决方案之前，要深入理解当前的问题。我想起了这句名言：
- en: It takes a lot of hard work to make something simple, to truly understand the
    underlying challenges and come up with elegant solutions. […] It’s not just minimalism
    or the absence of clutter. It involves digging through the depth of complexity.
    To be truly simple, you have to go really deep. […] You have to deeply understand
    the essence of a product in order to be able to get rid of the parts that are
    not essential.
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 要把事情做得简单，需要付出大量的努力，真正理解潜在的挑战并提出优雅的解决方案。[...] 这不仅仅是简约主义或去除杂乱，它涉及深入挖掘复杂性的深度。要做到真正的简单，你必须深入其中。[...]
    你必须深刻理解产品的本质，才能去除那些非必要的部分。
- en: ''
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — Steve Jobs
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — 史蒂夫·乔布斯
- en: 'Side note: Be aware that adopting radical simplicity doesn’t mean ignoring
    new tools and advanced technologies. In fact one of my favourite solutions for
    a data warehouse at the moment is using a new open-source database called [duckDB](https://duckdb.org/).
    Check it out, it’s pretty cool.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 旁注：要注意，采纳极简主义并不意味着忽视新工具和先进技术。事实上，我目前在数据仓库方面最喜欢的解决方案之一是使用一个名为[duckDB](https://duckdb.org/)的开源数据库。看看吧，它相当酷。
- en: '**Conclusion**'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**结论**'
- en: The lessons from software engineering history offer valuable insights for today’s
    data landscape. By embracing radical simplicity, data teams can address many of
    the pain points plaguing modern data solutions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程历史中的教训为今天的数据领域提供了宝贵的见解。通过拥抱极简主义，数据团队可以解决许多困扰现代数据解决方案的痛点。
- en: Don’t be afraid to champion radical simplicity in your data team. Be the catalyst
    for change if you see opportunities to streamline and simplify. The path to simplicity
    isn’t easy, but the potential rewards can be substantial.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 不要害怕在数据团队中倡导极简主义。如果你发现有机会精简和简化，成为变革的催化剂。通往简化的道路并不容易，但潜在的回报可能是巨大的。
