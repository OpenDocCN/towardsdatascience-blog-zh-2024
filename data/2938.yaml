- en: How to Build a General-Purpose LLM Agent
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何构建一个通用的大型语言模型（LLM）智能体
- en: 原文：[https://towardsdatascience.com/build-a-general-purpose-ai-agent-c40be49e7400?source=collection_archive---------0-----------------------#2024-12-05](https://towardsdatascience.com/build-a-general-purpose-ai-agent-c40be49e7400?source=collection_archive---------0-----------------------#2024-12-05)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/build-a-general-purpose-ai-agent-c40be49e7400?source=collection_archive---------0-----------------------#2024-12-05](https://towardsdatascience.com/build-a-general-purpose-ai-agent-c40be49e7400?source=collection_archive---------0-----------------------#2024-12-05)
- en: A Step-by-Step Guide
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一步步指南
- en: '[](https://medium.com/@mayamurad?source=post_page---byline--c40be49e7400--------------------------------)[![Maya
    Murad](../Images/ef2b6ee189faf7cf50a9ed738d837c4b.png)](https://medium.com/@mayamurad?source=post_page---byline--c40be49e7400--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--c40be49e7400--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--c40be49e7400--------------------------------)
    [Maya Murad](https://medium.com/@mayamurad?source=post_page---byline--c40be49e7400--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@mayamurad?source=post_page---byline--c40be49e7400--------------------------------)[![Maya
    Murad](../Images/ef2b6ee189faf7cf50a9ed738d837c4b.png)](https://medium.com/@mayamurad?source=post_page---byline--c40be49e7400--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--c40be49e7400--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--c40be49e7400--------------------------------)
    [Maya Murad](https://medium.com/@mayamurad?source=post_page---byline--c40be49e7400--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--c40be49e7400--------------------------------)
    ·11 min read·Dec 5, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--c40be49e7400--------------------------------)
    ·阅读时间11分钟·2024年12月5日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/42cfd9265f8bf7647a3faccc2fbe4a92.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/42cfd9265f8bf7647a3faccc2fbe4a92.png)'
- en: '**High-level Overview of an LLM Agent.** (Image by author)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**LLM智能体的高级概览。** （图片由作者提供）'
- en: '**Why build a general-purpose agent?** Because it’s an excellent tool to prototype
    your use cases and lays the groundwork for designing your own custom agentic architecture.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么要构建一个通用智能体？** 因为它是一个出色的工具，可以快速原型化你的使用案例，并为设计你自己的定制智能架构奠定基础。'
- en: Before we dive in, let’s quickly introduce LLM agents. *Feel free to skip ahead.*
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入之前，先简要介绍一下LLM智能体。*可以随时跳过。*
- en: What is an LLM agent?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是LLM智能体？
- en: An LLM agent is a program whose execution logic is controlled by its underlying
    model.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: LLM智能体是一种程序，其执行逻辑由其底层模型控制。
- en: '![](../Images/96012c20a3e723166e01d95cc009bda4.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/96012c20a3e723166e01d95cc009bda4.png)'
- en: '**From Standalone LLMs to Agentic Systems.** (*Image by author)*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**从独立的LLM到智能系统。** （*图片由作者提供*）'
- en: What sets an LLM agent apart from approaches like few-shot prompting or fixed
    workflows is its ability to define and adapt the steps required to execute a user’s
    query. Given access to a set of tools (like code execution or web search), the
    agent can decide which tool to use, how to use it, and iterate on results based
    on the output. This adaptability enables the system to handle diverse use cases
    with minimal configuration.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: LLM智能体与类似少量提示（few-shot prompting）或固定工作流的方法的区别在于它能够定义并适应执行用户查询所需的步骤。通过访问一组工具（如代码执行或网页搜索），智能体可以决定使用哪种工具，如何使用它，并根据输出对结果进行迭代。这种适应性使系统能够在最少配置的情况下处理多样化的使用场景。
- en: '![](../Images/8d08ae4583742848adec12ed3bc2a7a9.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8d08ae4583742848adec12ed3bc2a7a9.png)'
- en: '**A Spectrum of Agentic Architectures.** (Image by author)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**智能架构的谱系。** （图片由作者提供）'
- en: Agentic architectures exist on a spectrum, ranging from the reliability of fixed
    workflows to the flexibility of autonomous agents. For instance, a fixed flow
    like Retrieval-Augmented Generation ([RAG](https://research.ibm.com/blog/retrieval-augmented-generation-RAG))
    can be enhanced with a self-reflection loop, enabling the program to iterate when
    the initial response falls short. Alternatively, a [ReAct](https://www.promptingguide.ai/techniques/react)
    agent can be equipped with fixed flows as tools, offering a flexible yet structured
    approach. The choice of architecture ultimately depends on the use case and the
    desired trade-off between reliability and flexibility.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 代理架构存在一个谱系，从固定工作流的可靠性到自主代理的灵活性。例如，像检索增强生成（[RAG](https://research.ibm.com/blog/retrieval-augmented-generation-RAG)）这样的固定流程可以通过自我反思循环进行增强，使得程序能够在初始响应不足时进行迭代。或者，像[ReAct](https://www.promptingguide.ai/techniques/react)这样的代理可以装备固定流程作为工具，提供一种灵活而结构化的方法。架构的选择最终取决于使用场景和可靠性与灵活性之间的权衡。
- en: For a deeper overview, check out [this video](https://www.youtube.com/watch?v=F8NKVhkZZWI&t=1s).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 若要深入了解，请查看[这个视频](https://www.youtube.com/watch?v=F8NKVhkZZWI&t=1s)。
- en: Let’s build a general-purpose LLM agent from scratch!
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们从零开始构建一个通用的LLM代理吧！
- en: Step 1\. Select the right LLM
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1步：选择合适的LLM
- en: 'Choosing the right model is critical to achieving your desired performance.
    There are several factors to consider, like licensing, cost, and language support.
    The most important consideration for building an LLM agent is the model’s performance
    on key tasks like coding, tool calling, and reasoning. Benchmarks to evaluate
    include:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 选择正确的模型对于实现预期的性能至关重要。需要考虑的因素包括许可、成本和语言支持。构建LLM代理时最重要的考虑因素是模型在关键任务上的表现，例如编码、工具调用和推理。可以评估的基准包括：
- en: '[Massive Multitask Language Understanding (MMLU)](https://paperswithcode.com/sota/multi-task-language-understanding-on-mmlu)
    (reasoning)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[大规模多任务语言理解（MMLU）](https://paperswithcode.com/sota/multi-task-language-understanding-on-mmlu)（推理）'
- en: '[Berkeley’s Function Calling Leaderboard](https://gorilla.cs.berkeley.edu/leaderboard.html)
    (tool selection & tool calling)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[伯克利的函数调用排行榜](https://gorilla.cs.berkeley.edu/leaderboard.html)（工具选择与工具调用）'
- en: '[HumanEval](https://evalplus.github.io/leaderboard.html) and [BigCodeBench](https://huggingface.co/spaces/bigcode/bigcode-models-leaderboard)
    (coding)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[HumanEval](https://evalplus.github.io/leaderboard.html)和[BigCodeBench](https://huggingface.co/spaces/bigcode/bigcode-models-leaderboard)（编码）'
- en: Another crucial factor is the model’s context window. Agentic workflows can
    eat up a lot of tokens — sometimes 100K or more — a larger context window is really
    helpful.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关键因素是模型的上下文窗口。代理工作流可能会消耗大量的token——有时达到10万或更多——因此较大的上下文窗口非常有帮助。
- en: '**Models to Consider** (at the time of writing)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**值得考虑的模型**（写作时）'
- en: 'Frontier models: [GPT4-o](https://platform.openai.com/docs/models#gpt-4o),
    [Claude 3.5](https://www.anthropic.com/news/claude-3-5-sonnet)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前沿模型：[GPT4-o](https://platform.openai.com/docs/models#gpt-4o)，[Claude 3.5](https://www.anthropic.com/news/claude-3-5-sonnet)
- en: 'Open-source models: [Llama3.2](https://huggingface.co/collections/meta-llama/llama-32-66f448ffc8c32f949b04c8cf),
    [Qwen2.5](https://huggingface.co/collections/Qwen/qwen25-66e81a666513e518adb90d9e).'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源模型：[Llama3.2](https://huggingface.co/collections/meta-llama/llama-32-66f448ffc8c32f949b04c8cf)，[Qwen2.5](https://huggingface.co/collections/Qwen/qwen25-66e81a666513e518adb90d9e)。
- en: In general, larger models tend to offer better performance, but smaller models
    that can run locally are still a solid option. With smaller models, you’ll be
    limited to simpler use cases and might only be able to connect your agent to one
    or two basic tools.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，较大的模型往往能够提供更好的性能，但能够在本地运行的小型模型仍然是一个可靠的选择。使用小型模型时，你将受限于更简单的应用场景，并且可能只能将代理连接到一两个基础工具。
- en: Step 2\. Define the agent’s control logic (aka communication structure)
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2步：定义代理的控制逻辑（即通信结构）
- en: '![](../Images/fbcc79f1334b27e03e7a7701fb7780c0.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fbcc79f1334b27e03e7a7701fb7780c0.png)'
- en: '**Single Agent Architecture**. (Image by author)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**单一代理架构**。（图像来源：作者）'
- en: The main difference between a simple LLM and an agent comes down to the **system
    prompt**.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的LLM与代理之间的主要区别在于**系统提示**。
- en: The [system prompt](https://promptengineering.org/system-prompts-in-large-language-models/),
    in the context of an LLM, is a set of instructions and contextual information
    provided to the model before it engages with user queries.
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在LLM的背景下，[系统提示](https://promptengineering.org/system-prompts-in-large-language-models/)是一组在模型与用户查询互动之前提供给模型的指令和上下文信息。
- en: The agentic behavior expected of the LLM can be codified within the system prompt.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: LLM期望的代理行为可以在系统提示中进行编码。
- en: 'Here are some common agentic patterns, which can be customized to fit your
    needs:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些常见的代理模式，可以根据需要进行自定义：
- en: '**Tool Use:** The agent determines when to route queries to the appropriate
    tool or rely on its own knowledge.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具使用**：代理决定何时将查询路由到合适的工具或依赖其自身的知识。'
- en: '**Reflection:** The agent reviews and corrects its answers before responding
    to the user. A reflection step can also be added to most LLM systems.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反思**：代理在回应用户之前回顾并修正其回答。大多数LLM系统中也可以加入一个反思步骤。'
- en: '**Reason-then-Act (**[**ReAct**](https://www.promptingguide.ai/techniques/react)**):**
    The agent iteratively reasons through how to solve the query, performs an action,
    observes the outcome, and determines whether to take another action or provide
    a response.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**先推理后行动（**[**ReAct**](https://www.promptingguide.ai/techniques/react)**）**：代理反复推理如何解决查询，执行一个行动，观察结果，并决定是否采取另一个行动或提供响应。'
- en: '**Plan-then-Execute:** The agent plans upfront by breaking the task into sub-steps
    (if needed) and then executes each step.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计划后执行**：代理首先通过将任务分解为子步骤（如果需要）进行规划，然后执行每个步骤。'
- en: The last two patterns — **ReAct** and **Plan-then-Execute** — are often the
    best starting point for building a general-purpose single agent.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两种模式——**ReAct**和**计划后执行**——通常是构建通用单一代理的最佳起点。
- en: '![](../Images/fcc5f1655367edc786adf8f32957c5de.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fcc5f1655367edc786adf8f32957c5de.png)'
- en: '**Overview of Common Agentic Patterns.** (Image by author)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**常见代理模式概述**。（图片由作者提供）'
- en: To implement these behaviors effectively, you’ll need to do some prompt engineering.
    You might also want to use a [**structured generation**](https://python.langchain.com/v0.1/docs/modules/model_io/chat/structured_output/)technique.
    This basically means shaping the LLM’s output to match a specific format or schema,
    so the agent’s responses stay consistent with the communication style you’re aiming
    for.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效实施这些行为，你需要进行一些提示工程。你也许还想使用[**结构化生成**](https://python.langchain.com/v0.1/docs/modules/model_io/chat/structured_output/)技术。这基本上意味着将LLM的输出格式化为特定的格式或模式，以便代理的回应保持一致，符合你期望的沟通风格。
- en: '**Example:** Below is a system prompt excerpt for a ReAct style agent from
    the [Bee Agent Framework](https://github.com/i-am-bee/bee-agent-framework/blob/main/src/agents/bee/prompts.ts).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**：以下是来自[Bee Agent Framework](https://github.com/i-am-bee/bee-agent-framework/blob/main/src/agents/bee/prompts.ts)的ReAct风格代理系统提示摘录。'
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Step 3\. Define the agent’s core instructions
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第3步。定义代理的核心指令
- en: We tend to take for granted that LLMs come with a bunch of features right out
    of the box. Some of these are great, but others might not be exactly what you
    need. To get the performance you’re after, it’s important to spell out all the
    features you want — and don’t want — in the system prompt.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们常常理所当然地认为，大型语言模型（LLMs）自带许多功能。虽然其中一些功能很棒，但也有些可能并不是你真正需要的。为了获得理想的表现，重要的是在系统提示中明确列出你想要的——以及不想要的——功能。
- en: 'This could include instructions like:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能包括如下指令：
- en: '**Agent Name and Role:** What the agent is called and what it’s meant to do.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代理名称与角色**：代理被称为何，它的职责是什么。'
- en: '**Tone and Conciseness:** How formal or casual it should sound, and how brief
    it should be.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语气与简洁性**：应该听起来多正式或随意，以及应该多简洁。'
- en: '**When to Use Tools:** Deciding when to rely on external tools versus the model’s
    own knowledge.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时使用工具**：决定何时依赖外部工具与模型自身的知识。'
- en: '**Handling Errors:** What the agent should do when something goes wrong with
    a tool or process.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误处理**：当工具或过程出现问题时，代理应该怎么做。'
- en: '**Example:** Below is a snippet of the instructions section from the [Bee Agent
    Framework](https://github.com/i-am-bee/bee-agent-framework/blob/main/src/agents/bee/prompts.ts).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**：以下是来自[Bee Agent Framework](https://github.com/i-am-bee/bee-agent-framework/blob/main/src/agents/bee/prompts.ts)的指令部分摘录。'
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Step 4\. Define and optimize your core tools
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第4步。定义并优化核心工具
- en: Tools are what give your agents their superpowers. With a narrow set of well-defined
    tools, you can achieve broad functionality. Key tools to include are code execution,
    web search, file reading, and data analysis.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 工具赋予了代理超能力。通过一组定义明确的窄工具，你可以实现广泛的功能。需要包括的关键工具有代码执行、网页搜索、文件读取和数据分析。
- en: 'For each tool, you’ll need to define the following and include it as part of
    the system prompt:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个工具，你需要定义以下内容，并将其作为系统提示的一部分：
- en: '**Tool Name:** A unique, descriptive name for the capability.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具名称**：能力的独特、描述性的名称。'
- en: '**Tool Description:** A clear explanation of what the tool does and when to
    use it. This helps the agent determine when to pick the right tool.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具描述：** 清晰地解释工具的功能以及何时使用它。这有助于代理决定何时选择合适的工具。'
- en: '**Tool Input Schema:** A schema that outlines required and optional parameters,
    their types, and any constraints. The agent uses this to fill in the inputs it
    needs based on the user’s query..'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具输入模式：** 描述所需和可选参数、其类型以及任何约束条件的模式。代理使用此模式根据用户的查询填写所需的输入。'
- en: A pointer to where/how to run the tool.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指示在哪里/如何运行工具。
- en: '**Example:** Below is an excerpt of an Arxiv tool implementation from [Langchain
    Community](https://github.com/langchain-ai/langchain/blob/master/libs/community/langchain_community/tools/arxiv/tool.py).
    This implementation requires an [ArxivAPIWrapper](https://github.com/langchain-ai/langchain/blob/master/libs/community/langchain_community/utilities/arxiv.py)
    implementation.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 以下是 [Langchain Community](https://github.com/langchain-ai/langchain/blob/master/libs/community/langchain_community/tools/arxiv/tool.py)
    中 Arxiv 工具实现的一个摘录。该实现需要一个 [ArxivAPIWrapper](https://github.com/langchain-ai/langchain/blob/master/libs/community/langchain_community/utilities/arxiv.py)
    实现。'
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In certain cases, you’ll need to optimize tools to get the performance you’re
    looking for. This might involve tweaking the tool name or description with some
    prompt engineering, setting up advanced configurations to handle common errors,
    or filtering the tool’s output.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，你需要优化工具，以获得所期望的性能。这可能涉及通过一些提示工程调整工具名称或描述、设置高级配置以处理常见错误，或过滤工具的输出。
- en: Step 5\. Decide on a memory handling strategy
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤 5\. 决定内存处理策略
- en: LLMs are limited by their context window — the number of tokens they can “remember”
    at a time. This memory can fill up fast with things like past interactions in
    multi-turn conversations, lengthy tool outputs, or extra context the agent is
    grounded on. That’s why having a solid memory handling strategy is crucial.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: LLM 的上下文窗口有限——它们每次能“记住”的标记数量。随着多轮对话中的过去交互、冗长的工具输出或代理所依赖的额外上下文的增加，这些内存会很快被填满。这就是为什么拥有一个稳固的内存处理策略至关重要的原因。
- en: '**Memory,** in the context of an agent, refers to the system’s capability to
    store, recall, and utilize information from past interactions. This enables the
    agent to maintain context over time, improve its responses based on previous exchanges,
    and provide a more personalized experience.'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在代理的上下文中，**内存** 指的是系统存储、回忆和利用过去交互信息的能力。这使得代理能够随着时间的推移保持上下文，根据之前的交流改进回应，并提供更加个性化的体验。
- en: '**Common Memory Handling Strategies:**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**常见的内存处理策略：**'
- en: '**Sliding Memory:** Keep the last *k* conversation turns in memory and drop
    the older ones.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滑动内存：** 保留最近的 *k* 轮对话，并删除较旧的对话。'
- en: '**Token Memory:** Keep the last *n* tokens and forget the rest.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**令牌内存：** 保留最近的 *n* 个令牌并忘记其余部分。'
- en: '**Summarized Memory:** Use the LLM to summarize the conversation at each turn
    and drop the individual messages.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总结内存：** 使用 LLM 在每轮对话中总结会话，并丢弃单个消息。'
- en: Additionally, you can also have an LLM detect key moments to store in long-term
    memory. This allows the agent to “remember” important facts about the user, making
    the experience even more personalized.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以让 LLM 检测关键时刻并将其存储到长期记忆中。这使得代理能够“记住”关于用户的重要事实，从而让体验更加个性化。
- en: The five steps we’ve covered so far lay the foundation for setting up an agent.
    But what happens if we run a user query through our LLM at this stage?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所涵盖的五个步骤为设置代理奠定了基础。那么，如果我们在这个阶段通过我们的 LLM 运行用户查询，会发生什么呢？
- en: '![](../Images/c03aedb4ced401c01f08dee317cf332f.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c03aedb4ced401c01f08dee317cf332f.png)'
- en: '**Answer: you get a raw text output.** (Image by author)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**答案：你得到的是原始文本输出。**（图片来源：作者）'
- en: 'Here’s an example of what that might look like:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可能的示例：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: At this point, the agent produces raw text output. So how do we get it to actually
    execute the next step? That’s where parsing and orchestration come in.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在此阶段，代理产生原始文本输出。那么，我们如何让它实际执行下一步呢？这时解析和协调就显得尤为重要。
- en: '**Step 6\. Parse the agent’s raw output**'
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**步骤 6\. 解析代理的原始输出**'
- en: A **parser** is a function that converts raw data into a format your application
    can understand and work with (like an object with properties)
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**解析器** 是一种将原始数据转换为应用程序可以理解和使用的格式（例如具有属性的对象）的功能。'
- en: For the agent we’re building, the parser needs to recognize the communication
    structure we defined in **Step 2** and return a structured output, like JSON.
    This makes it easier for the application to process and execute the agent’s next
    steps.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们正在构建的代理，解析器需要识别我们在**步骤 2**中定义的通信结构，并返回结构化输出，例如JSON。这使得应用程序能够更容易地处理并执行代理的下一步操作。
- en: '*Note: some model providers like* [*OpenAI*](https://openai.com/index/introducing-structured-outputs-in-the-api/),
    *can return parsable outputs by default. For other models, especially open-source
    ones, this would need to be configured.*'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：一些模型提供商，如* [*OpenAI*](https://openai.com/index/introducing-structured-outputs-in-the-api/)，
    *默认情况下可以返回可解析的输出。对于其他模型，尤其是开源模型，需要进行配置。*'
- en: Step 7\. Orchestrate the agent’s next step
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第7步：协调代理的下一步
- en: 'The final step is setting up the orchestration logic. This determines what
    happens after the LLM outputs a result. Depending on the output, you’ll either:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是设置协调逻辑。这决定了LLM输出结果后的处理方式。根据输出，你将：
- en: '**Execute a tool call**, or'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**执行工具调用**，或者'
- en: '**Return an answer** — either the final response to the user’s query or a follow-up
    request for more information.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**返回答案**——这是用户查询的最终响应，或是请求更多信息的后续请求。'
- en: '![](../Images/2cf3fbfd9faabab0ab8405345f963ce5.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2cf3fbfd9faabab0ab8405345f963ce5.png)'
- en: '**Extended single agent architecture.** (Image by author)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展的单代理架构。**（图片由作者提供）'
- en: 'If a tool call is triggered, the tool’s output is sent back to the LLM (as
    part of its working memory). The LLM would then determine what to do with this
    new information: either perform another tool call or return an answer to the user.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果触发了工具调用，工具的输出将被发送回LLM（作为其工作记忆的一部分）。然后，LLM将决定如何处理这些新信息：要么执行另一个工具调用，要么返回答案给用户。
- en: 'Here’s an example of how this orchestration logic might look in code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是这段协调逻辑在代码中的一个示例：
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**And voilà!** You now have a system capable of handling a wide variety of
    use cases — from competitive analysis and advanced research to automating complex
    workflows.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**瞧！** 现在你有了一个能够处理各种不同用例的系统——从竞争分析和高级研究到自动化复杂工作流。'
- en: Where do multi-agent systems come in?
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多代理系统何时发挥作用？
- en: 'While this generation of LLMs is incredibly powerful, they have a key limitation:
    [they struggle with information overload](https://arxiv.org/html/2410.18745v1).
    Too much context or too many tools can overwhelm the model, leading to performance
    issues. A general-purpose single agent will eventually hit this ceiling, especially
    since agents are notoriously token-hungry.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这一代LLM非常强大，但它们有一个关键的限制：[它们在信息过载方面存在困难](https://arxiv.org/html/2410.18745v1)。过多的上下文或过多的工具可能会压倒模型，从而导致性能问题。通用单代理最终会达到这个瓶颈，尤其是代理往往非常消耗
    token。
- en: For certain use cases, a multi-agent setup might make more sense. By dividing
    responsibilities across multiple agents, you can avoid overloading the context
    of a single LLM agent and improve overall efficiency.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些用例，使用多代理设置可能更有意义。通过将职责分配给多个代理，你可以避免单一LLM代理的上下文过载，从而提高整体效率。
- en: 'That said, **a general-purpose single-agent setup is a fantastic starting point
    for prototyping**. It can help you quickly test your use case and identify where
    things start to break down. Through this process, you can:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，**通用单一代理设置是原型设计的绝佳起点**。它可以帮助你快速测试用例并找出问题所在。通过这个过程，你可以：
- en: Understand which parts of the task truly benefit from an agentic approach.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 理解任务的哪些部分真正从代理化方法中受益。
- en: Identify components that can be spun off as standalone processes in a larger
    workflow.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定可以作为独立过程脱离出来的组件，并在更大的工作流中使用。
- en: Starting with a single agent gives you valuable insights to refine your approach
    as you scale to more complex systems.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 从单一代理开始，能为你提供宝贵的见解，帮助你在向更复杂的系统扩展时进行优化。
- en: What is the best way to get started?
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动的最佳方式是什么？
- en: Ready to dive in and start building? Using a framework can be a great way to
    quickly test and iterate on your agent configuration.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好深入研究并开始构建了吗？使用框架可以成为快速测试和迭代代理配置的好方法。
- en: '**Planning on using open-source models like Llama 3?** Try [this starter template](https://github.com/i-am-bee/bee-agent-framework-starter)
    from the [Bee Agent Framework](https://github.com/i-am-bee/bee-agent-framework).'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打算使用开源模型如 Llama 3 吗？** 请尝试[这个起始模板](https://github.com/i-am-bee/bee-agent-framework-starter)，来自[Bee
    Agent Framework](https://github.com/i-am-bee/bee-agent-framework)。'
- en: '**Planning on using frontier models like OpenAI?** Try [this tutorial](https://langchain-ai.github.io/langgraph/how-tos/react-agent-from-scratch/)
    from [LangGraph](https://langchain-ai.github.io/langgraph/).'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打算使用像 OpenAI 这样的前沿模型吗？** 尝试 [这个教程](https://langchain-ai.github.io/langgraph/how-tos/react-agent-from-scratch/)
    来自 [LangGraph](https://langchain-ai.github.io/langgraph/)。'
- en: '*What’s your experience building general-purpose agents?'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '*你在构建通用代理方面有什么经验？*'
- en: Share your in the comments!*
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在评论中分享你的经验吧！*
