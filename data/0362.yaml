- en: Everything You Can Do with Python’s textwrap Module
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你可以用Python的textwrap模块做的一切
- en: 原文：[https://towardsdatascience.com/everything-you-can-do-with-pythons-textwrap-module-0d82c377a4c8?source=collection_archive---------2-----------------------#2024-02-07](https://towardsdatascience.com/everything-you-can-do-with-pythons-textwrap-module-0d82c377a4c8?source=collection_archive---------2-----------------------#2024-02-07)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/everything-you-can-do-with-pythons-textwrap-module-0d82c377a4c8?source=collection_archive---------2-----------------------#2024-02-07](https://towardsdatascience.com/everything-you-can-do-with-pythons-textwrap-module-0d82c377a4c8?source=collection_archive---------2-----------------------#2024-02-07)
- en: Learn about all the things you can do with Python’s `textwrap` module, including
    formatting, text wrapping, trimming and more
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解你可以用Python的`textwrap`模块做的所有事情，包括格式化、文本换行、修剪等等。
- en: '[](https://medium.com/@martin.heinz?source=post_page---byline--0d82c377a4c8--------------------------------)[![Martin
    Heinz](../Images/a8d1540fd32998ee9bda4af0f0232f7d.png)](https://medium.com/@martin.heinz?source=post_page---byline--0d82c377a4c8--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0d82c377a4c8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0d82c377a4c8--------------------------------)
    [Martin Heinz](https://medium.com/@martin.heinz?source=post_page---byline--0d82c377a4c8--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@martin.heinz?source=post_page---byline--0d82c377a4c8--------------------------------)[![Martin
    Heinz](../Images/a8d1540fd32998ee9bda4af0f0232f7d.png)](https://medium.com/@martin.heinz?source=post_page---byline--0d82c377a4c8--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0d82c377a4c8--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0d82c377a4c8--------------------------------)
    [Martin Heinz](https://medium.com/@martin.heinz?source=post_page---byline--0d82c377a4c8--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0d82c377a4c8--------------------------------)
    ·5 min read·Feb 7, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0d82c377a4c8--------------------------------)
    ·阅读时长5分钟·2024年2月7日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/c3d8bf462ca3ad135cf342ed93cd2b6f.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c3d8bf462ca3ad135cf342ed93cd2b6f.png)'
- en: Photo by [Hello Sunday](https://unsplash.com/@hello_sunday?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/black-white-blue-and-pink-floral-textile-COFQgC0V4ks?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[Hello Sunday](https://unsplash.com/@hello_sunday?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)，[Unsplash](https://unsplash.com/photos/black-white-blue-and-pink-floral-textile-COFQgC0V4ks?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
- en: Python has many options for formatting strings and text, including f-strings,
    `format()` function, templates and more. There's however one module that few people
    know about and it's called `textwrap`.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python有许多格式化字符串和文本的选项，包括f-string、`format()`函数、模板等等。然而，有一个模块很少有人知道，它叫做`textwrap`。
- en: This module is specifically built to help you with line-wrapping, indentation,
    trimming and more, and in this article we will look at all the things you can
    use it for.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本模块专门为帮助你处理换行、缩进、修剪等任务而构建，在本文中，我们将探讨你可以用它做的所有事情。
- en: Shorten
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shorten
- en: 'Let’s start with very simple, yet very useful function from the `textwrap`
    module, called `shorten`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`textwrap`模块中的一个非常简单但非常实用的函数——`shorten`开始：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As the name suggests, `shorten` allows us to trim text to certain length ( `width`)
    if the specified string is too long. By default, the placeholder for the trimmed
    text is `[...]`, but that can be overridden with the `placeholder` argument.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，`shorten`允许我们在指定的字符串过长时将文本修剪为一定长度（`width`）。默认情况下，修剪后的文本占位符为`[...]`，但可以通过`placeholder`参数覆盖此默认值。
- en: Wrap
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Wrap
- en: 'A more interesting function from this module is `wrap`. The obvious use-case
    for it is to split long text into lines of same length, but there are more things
    we can do with it:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块中的另一个更有趣的函数是`wrap`。它的明显用途是将长文本拆分为相同长度的多行，但我们还能用它做更多的事情：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example we split a string into equal chunks which can be useful for
    batch processing, rather than just formatting.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将一个字符串分成相等的块，这在批处理时比仅仅格式化更有用。
- en: 'Using this function however, has some caveats:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用这个函数时需要注意一些事项：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should be careful with whitespaces, when using `wrap` - above you can see
    the behaviour with newline, tab and space characters. You can see that the first
    element ( `12`) *"includes"* newline, and 4th element ( `78`) *"includes"* tab,
    those are however, dropped by default, therefore these elements only have 2 characters
    instead of 3.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`wrap`时，您应该小心空格——上面您可以看到换行符、制表符和空格字符的行为。您可以看到第一个元素（`12`）*"包含"*换行符，第4个元素（`78`）*"包含"*制表符，但这些默认会被丢弃，因此这些元素的字符数只有2个，而不是3个。
- en: We can specify the `drop_whitespace` keyword argument to preserve them and maintain
    the proper length of chunks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以指定`drop_whitespace`关键字参数来保留它们并保持块的适当长度。
- en: 'It might be obvious, but `wrap` is also great for reformatting whole files
    to certain line width:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能显而易见，但`wrap`对于将整个文件重新格式化为特定的行宽也是非常有用的：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can also use the `fill` function which is a shorthand for `"\n".join(wrap(text,
    ...))`. The difference between the 2 is that `wrap` will give us a list of lines
    that we would need to concatenate ourselves, and `fill` gives us a single string
    that's already joined using newlines.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用`fill`函数，它是`"\n".join(wrap(text, ...))`的简写。这两者的区别在于，`wrap`会给我们一个行列表，我们需要自己将它们连接起来，而`fill`则会给我们一个已经使用换行符连接的单一字符串。
- en: TextWrapper
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TextWrapper
- en: '`textwrap` module also includes a more powerful version `wrap` function, which
    is a `TextWrapper` class:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`textwrap`模块还包括一个更强大的`wrap`函数，它是一个`TextWrapper`类：'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This class and its `wrap` method are great if we need to call `wrap` with the
    same parameters multiple times as shown above.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要多次使用相同参数调用`wrap`，如上所示，这个类及其`wrap`方法是非常有用的。
- en: 'And while we’re looking that the `TextWrapper`, let''s also try out some more
    keyword arguments:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在查看`TextWrapper`时，让我们也尝试一些其他的关键字参数：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here we can see the use of `initial_indent` and `subsequent_indent` for indenting
    the first line of paragraph and subsequent ones, respectively. There are couple
    more options, which you can find in [docs](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到`initial_indent`和`subsequent_indent`的使用，分别用于缩进段落的第一行和后续行。还有一些其他选项，您可以在[文档](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper)中找到。
- en: 'Furthermore, because `TextWrapper` is a class, we can also extend it and completely
    override some of its methods:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于`TextWrapper`是一个类，我们还可以扩展它并完全重写它的一些方法：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is a nice example of changing the `wrap` method to preserve existing line
    breaks and to print them properly.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的例子，展示了如何修改`wrap`方法，以保留现有的换行符并正确打印它们。
- en: For a more complete example for handling multiple paragraphs with `TextWrapper`,
    check out [this article](https://code.activestate.com/recipes/358228-extend-textwraptextwrapper-to-handle-multiple-para/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用`TextWrapper`处理多个段落的完整示例，请查看[这篇文章](https://code.activestate.com/recipes/358228-extend-textwraptextwrapper-to-handle-multiple-para/)。
- en: Indentation
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩进
- en: 'Finally, `textwrap` also includes two functions for indentation, first one
    being `dedent`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`textwrap`还包括两个用于缩进的函数，第一个是`dedent`：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By default, multiline strings in Python honor any indentation used in the string,
    therefore we need to use the ugly formatting shown in the first variable in the
    snippet above. But we can use the `dedent` function to improve formatting - we
    simply indent the variable value however we like and then call `dedent` on it
    before using it.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Python中的多行字符串会保留字符串中使用的任何缩进，因此我们需要使用上面片段中第一个变量所示的丑陋格式。但我们可以使用`dedent`函数来改善格式——我们只需按自己喜欢的方式缩进变量值，然后在使用它之前调用`dedent`。
- en: Alternatively, we could also use `inspect.cleandoc`, which also strips the leading
    newline. This function however encodes the whitespaces as special characters (`\n`
    and `\t`), so you might need to reformat it again.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们也可以使用`inspect.cleandoc`，它也会去除前导换行符。然而，这个函数会将空格编码为特殊字符（`\n`和`\t`），因此您可能需要重新格式化它。
- en: 'Naturally, when there is `dedent`, then there needs to be also `indent` function:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 自然，当有`dedent`时，也需要有`indent`函数：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We simply supply the text and the string that each line will be indented with
    (here just 4 spaces, we could — for example — use `>>>` to make it look like REPL).
    Additionally, we can supply a predicate that will decide whether the line should
    be indented or not. In the example above, the `lambda` function makes it so that
    first line of string (paragraph) is not indented.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需提供文本和每行将缩进的字符串（这里是4个空格，我们可以——例如——使用`>>>`使其看起来像REPL）。此外，我们还可以提供一个谓词，用来决定该行是否应该缩进。在上面的例子中，`lambda`函数使得字符串的第一行（段落）不被缩进。
- en: Closing Thoughts
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结束语
- en: '`textwrap` is a simple module with just a few functions/methods, but it once
    again shows that Python really comes with *"batteries included"* for things that
    don''t necessarily need to be standard library, but they can save you so much
    time when you happen to need them.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`textwrap` 是一个简单的模块，只有少数几个函数/方法，但它再次证明了Python确实为那些不一定需要标准库的功能提供了*"开箱即用"*的支持，当你恰好需要它们时，它们能为你节省大量时间。'
- en: If you happen to do a lot of text processing, then I also recommend checking
    out the [whole docs section](https://docs.python.org/3/library/text.html) dedicated
    to working with text. There are many more modules and little functions that you
    didn’t know you needed. 😉
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你恰好做很多文本处理工作，那么我也推荐你查看一下专门处理文本的[整个文档部分](https://docs.python.org/3/library/text.html)。这里有许多你可能没意识到需要的模块和小功能。😉
- en: '*This article was originally posted at* [*martinheinz.dev*](https://martinheinz.dev/blog/108)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文最初发布在* [*martinheinz.dev*](https://martinheinz.dev/blog/108)'
- en: You may also like…
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还喜欢…
- en: '[](https://betterprogramming.pub/everything-you-can-do-with-pythons-bisect-module-40bdaadbc22f?source=post_page-----0d82c377a4c8--------------------------------)
    [## Everything You Can Do With Python’s Bisect Module'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://betterprogramming.pub/everything-you-can-do-with-pythons-bisect-module-40bdaadbc22f?source=post_page-----0d82c377a4c8--------------------------------)
    [## 你可以用Python的Bisect模块做的一切'
- en: Learn how to optimize search and keep your data sorted in Python with the "bisect"
    module
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习如何使用Python的“bisect”模块来优化搜索并保持数据排序
- en: betterprogramming.pub](https://betterprogramming.pub/everything-you-can-do-with-pythons-bisect-module-40bdaadbc22f?source=post_page-----0d82c377a4c8--------------------------------)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[betterprogramming.pub](https://betterprogramming.pub/everything-you-can-do-with-pythons-bisect-module-40bdaadbc22f?source=post_page-----0d82c377a4c8--------------------------------)'
