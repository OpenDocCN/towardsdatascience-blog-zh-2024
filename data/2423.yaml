- en: Dynamic GitHub Pages - Panel (pyodide-worker)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态 GitHub Pages - 面板 (pyodide-worker)
- en: 原文：[https://towardsdatascience.com/dynamic-github-pages-panel-pyodide-worker-17c56ca88455?source=collection_archive---------8-----------------------#2024-10-04](https://towardsdatascience.com/dynamic-github-pages-panel-pyodide-worker-17c56ca88455?source=collection_archive---------8-----------------------#2024-10-04)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/dynamic-github-pages-panel-pyodide-worker-17c56ca88455?source=collection_archive---------8-----------------------#2024-10-04](https://towardsdatascience.com/dynamic-github-pages-panel-pyodide-worker-17c56ca88455?source=collection_archive---------8-----------------------#2024-10-04)
- en: How do you create interactive and client-side GitHub Pages ? The first stone
    in an ambitious edifice
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何创建交互式且客户端运行的 GitHub Pages？这是一个雄心勃勃的构建大厦的第一步
- en: '[](https://medium.com/@petoulemonde?source=post_page---byline--17c56ca88455--------------------------------)[![Pierre-Etienne
    Toulemonde](../Images/95fdda47e79e3c194fc96ef29f3a2188.png)](https://medium.com/@petoulemonde?source=post_page---byline--17c56ca88455--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--17c56ca88455--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--17c56ca88455--------------------------------)
    [Pierre-Etienne Toulemonde](https://medium.com/@petoulemonde?source=post_page---byline--17c56ca88455--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@petoulemonde?source=post_page---byline--17c56ca88455--------------------------------)[![Pierre-Etienne
    Toulemonde](../Images/95fdda47e79e3c194fc96ef29f3a2188.png)](https://medium.com/@petoulemonde?source=post_page---byline--17c56ca88455--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--17c56ca88455--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--17c56ca88455--------------------------------)
    [Pierre-Etienne Toulemonde](https://medium.com/@petoulemonde?source=post_page---byline--17c56ca88455--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--17c56ca88455--------------------------------)
    ·10 min read·Oct 4, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--17c56ca88455--------------------------------)
    ·阅读时长10分钟·2024年10月4日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/462c2466e934eadb68aada8cc91dbecb.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/462c2466e934eadb68aada8cc91dbecb.png)'
- en: Photo by [Joshua Sortino](https://unsplash.com/@sortino?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 摄影师：[Joshua Sortino](https://unsplash.com/@sortino?utm_source=medium&utm_medium=referral)
    于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 供图
- en: '**Index**:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**索引**：'
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 引言
- en: Method
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法
- en: Results
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结果
- en: Discussion
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 讨论
- en: 1\. Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. 引言
- en: For several years now, I’ve been dreaming of having a nice portfolio to showcase
    my projects as a budding data scientist. After almost 1 year of reflection, trials,
    failures and a few successes, I created my first portfolio on GitHub Pages. Happy
    with this personal achievement, I wrote an article about it to share the fruit
    of my research with the community, available [here](/full-guide-to-build-a-professionnal-portfolio-with-python-markdown-git-and-github-page-for-66d12f7859f0).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些年来，我一直梦想着拥有一个漂亮的作品集，展示我作为一名初学数据科学家的项目。在经过将近一年的反思、试验、失败和一些成功之后，我在 GitHub Pages
    上创建了我的第一个作品集。为这个个人成就感到高兴后，我写了一篇文章来与社区分享我研究的成果，文章可以在[这里](/full-guide-to-build-a-professionnal-portfolio-with-python-markdown-git-and-github-page-for-66d12f7859f0)找到。
- en: This portfolio was created using the mkdocs python package. Mkdocs is a wonderful
    package for this kind of project, but with a few shortcomings, the main one being
    the total lack of interactivity with the reader. The further I got into creating
    my portfolio, the more frustrated I became by the lack of interactivity. My constraints
    at the time (still true today) were to have everything executed free of charge
    and client-side, so the GitHub Pages solution was perfectly suited to my needs.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个作品集是使用 mkdocs Python 包创建的。Mkdocs 是一个非常适合此类项目的工具包，但也有一些不足之处，主要是完全缺乏与读者的互动。随着我在创建作品集的过程中深入，缺乏互动的情况让我感到越来越沮丧。当时我的限制（至今依然如此）是要求一切都能够免费执行并且在客户端进行，因此
    GitHub Pages 解决方案完全符合我的需求。
- en: 'The further I got into my static portfolio, the more the idea of having a dynamic
    portfolio system popped into my head. My goal was clear: find a solution to create
    a reader-interactive portfolio hosted on GitHub Pages. In my research, I found
    almost no articles dealing with this subject, so I started looking for software,
    packages and code snippets to address this problem.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我在静态作品集创建过程中的深入，拥有一个动态作品集系统的想法越来越浮现在我脑海中。我的目标很明确：寻找一种解决方案，创建一个可以与读者互动的 GitHub
    Pages 作品集。在我的研究中，我几乎没有找到处理这个问题的相关文章，于是我开始寻找相关的软件、包和代码片段来解决这个问题。
- en: 'The research question guiding this article is: how do I create a dynamic, full-client-side
    website? My technical constraints are as follows: Use GitHub Pages.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的研究问题是：如何创建一个动态的全客户端网站？我的技术限制如下：使用GitHub Pages。
- en: About dashboarding package, I choose to limit myself to Panel from the holoviz
    suite, because it’s a great package and I’d like to improve my skills with it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 关于仪表板包，我选择将自己局限于holoviz套件中的Panel，因为它是一个很棒的包，我希望能在这个包上提升自己的技能。
- en: For the purposes of this article, I’ve searched for and found many more or less
    similar solutions. This article is therefore the first in a series of articles,
    the aim of which will be to present different solutions to the same research question.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 就本文而言，我搜索并找到了许多或多或少相似的解决方案。因此，本文是一个系列文章的第一篇，旨在展示针对同一研究问题的不同解决方案。
- en: But what’s the point of having dynamic Github pages? GitHub Pages is a very
    interesting solution for organization/project presentation, 100% hosted by GitHub,
    free of charge, with minimal configuration and no server maintenance. The ability
    to include dynamic content is a powerful way of communicating about your organization
    or project. For data professionals, it’s a very useful solution for quickly generating
    a dynamic and interesting portfolio.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，动态GitHub页面有什么意义呢？GitHub Pages是一个非常有趣的解决方案，用于组织/项目展示，100%由GitHub托管，免费，配置最小且无需服务器维护。能够包含动态内容是一种强有力的方式来展示你的组织或项目。对于数据专业人士来说，这是一个非常有用的解决方案，能够快速生成动态且有趣的作品集。
- en: Holoviz is an exciting and extremely rich set of pacakges. It’s a complete visualization
    and dashboarding solution, powerful on reasonably sized data and big data. This
    solution supports all major input data manipulation packages (polars, pandas,
    dask, X-ray, …), and offers high-level syntax for generating interactive visualizations
    with a minimum of code. This package also allows you to customize the output and,
    in particular, to choose your visualization back-end such as pandas (I’ve written
    [an article](https://medium.com/towards-data-science/the-power-of-pandas-plots-backends-6a08d52071d2)
    about it if you’d like to find out more). To find out more about this great suite
    of packages, I suggest [this article](/3-ways-to-build-a-panel-visualization-dashboard-6e14148f529d).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Holoviz是一个令人兴奋且极其丰富的包集合。它是一个完整的可视化和仪表板解决方案，对于中等规模和大数据非常强大。这个解决方案支持所有主要的输入数据处理包（polars、pandas、dask、X-ray等），并提供了高层次的语法，能够以最少的代码生成交互式可视化。该包还允许你自定义输出，特别是可以选择你的可视化后端，例如pandas（如果你想了解更多，我写过[一篇文章](https://medium.com/towards-data-science/the-power-of-pandas-plots-backends-6a08d52071d2)）。要了解更多关于这个强大包集合的信息，我建议阅读[这篇文章](/3-ways-to-build-a-panel-visualization-dashboard-6e14148f529d)。
- en: 2\. Method
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 方法
- en: 'For this job, my technical background imposes a few contingencies:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这项工作，我的技术背景带来了一些应急情况：
- en: I don’t yet know how to code well enough in JavaScript to make complete scripts
    and write pieces of code directly in JavaScript,
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我目前还不能够熟练地使用JavaScript编写完整的脚本并直接用JavaScript写代码，
- en: the dashboarding package will be Panel in order to improve my skills. If the
    need arises, I won’t rule out repeating the exercise with other dasbhoarding packages
    (such as Dash, strealint, NiceGUI, etc.). However, this is not my priority.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我将使用Panel作为仪表板包，以提高我的技能。如果有需要，我不会排除使用其他仪表板包（例如Dash、streamlit、NiceGUI等）重复练习。不过，这不是我的优先事项。
- en: 'For this article, my technical environment is as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本文，我的技术环境如下：
- en: 'python packages: Panel'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: python包：Panel
- en: I use conda and VSCode for my scripts and environment management. Don’t worry
    if you use other solutions, it won’t have any impact on the rest.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用conda和VSCode进行脚本和环境管理。如果你使用其他解决方案，不用担心，这不会影响其余部分。
- en: 'During my research, I identified 3 scripts of varying complexity and visual
    appeal from my researches, which will serve as good test standards:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的研究过程中，我从我的研究中找出了3个不同复杂度和视觉吸引力的脚本，这些将作为很好的测试标准：
- en: 'A simple application called ‘simple app’:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个简单的应用叫做“简单应用”：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[Source](https://awesome-panel.github.io/holoviz-quarto/getting-started.html)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[来源](https://awesome-panel.github.io/holoviz-quarto/getting-started.html)'
- en: 'A more complex application called ‘big app’:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个更复杂的应用叫做“大应用”：
- en: '[PRE1]python\n{explorer.plot_code()}\n[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1]python\n{explorer.plot_code()}\n[PRE2]'
- en: '[Source](https://panel.holoviz.org/getting_started/build_app.html)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[来源](https://panel.holoviz.org/getting_started/build_app.html)'
- en: 'A dashboard using the ‘Material’ Panel Template, which I call ‘material dasbhoard’:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个使用“Material”Panel模板的仪表板，我称之为“material dashboard”：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[Source](https://panel.holoviz.org/getting_started/build_app.html)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[来源](https://panel.holoviz.org/getting_started/build_app.html)'
- en: 'To meet my goal of deploying both web and GitHub Pages, I will test the deployment
    of each of the :'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现同时部署 Web 和 GitHub Pages 的目标，我将测试每个部署的实现：
- en: on a local python server, generated using `python -m http.server`,
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在本地 Python 服务器上，通过 `python -m http.server` 生成，
- en: GitHub Pages.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Pages。
- en: '**Visualize the optimal operation that dasbhoard should have**'
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**可视化仪表板应具有的最佳操作**'
- en: 'Before I start testing, I need to have a benchmark of how each application
    should work in a perfect world. To do this, I use the local emulation function
    of the :'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始测试之前，我需要有一个基准，了解每个应用程序在理想情况下应该如何工作。为此，我使用：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Explanation:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 解释：
- en: '`panel serve simple_app.py` : visualiaze the dashboard'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`panel serve simple_app.py` ：可视化仪表板'
- en: '` — dev` : reload the dashboard each time the underlying files are modified
    (may require installation of one or more other packages, in particular to track
    whether or not the underlying files have been modified)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '` — dev` ：每次修改底层文件时重新加载仪表板（可能需要安装一个或多个其他包，特别是用于跟踪底层文件是否已被修改）'
- en: 'Here is the expected result:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是预期的结果：
- en: 'The simple app :'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单应用：
- en: '![](../Images/f01f08fb29001d1607a287353acda296.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f01f08fb29001d1607a287353acda296.png)'
- en: Simple app visualization, Image is by the author
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 简单应用可视化，图片由作者提供
- en: 'The big app :'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大应用：
- en: '![](../Images/3451016c654c5ae9a8506c4249b3a130.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3451016c654c5ae9a8506c4249b3a130.png)'
- en: Big app visualization, Image is by the author
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 大应用可视化，图片由作者提供
- en: 'The material dasbhoard :'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 材料仪表板：
- en: '![](../Images/51fbe807607905dd269a0725744af1f1.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/51fbe807607905dd269a0725744af1f1.png)'
- en: Material dashboard visualization, Image is by the author
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 材料仪表板可视化，图片由作者提供
- en: These visualizations will enable me to see if everything is running smoothly
    and within reasonable timescales during my deployment tests.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可视化将帮助我在部署测试期间检查一切是否顺利运行，且时间符合预期。
- en: '**Results**'
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**结果**'
- en: '**First step : transform python script to HTML interactive script**'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**第一步：将 Python 脚本转化为 HTML 交互式脚本**'
- en: 'The Panel package transforms a panel application python script into an HTML
    application in 1 line of code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Panel 包将 Python 脚本转换成 HTML 应用程序，只需一行代码：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Explanation:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 解释：
- en: '`panel convert` : python script conversion panel package command'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`panel convert` ：Python 脚本转换 Panel 包命令'
- en: '`simple_app.py` : python script to convert'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`simple_app.py` ：待转换的 Python 脚本'
- en: '` — to pyodide-worker` : Panel can transcribe the Python application into several
    types of support that can be integrated into HTML productions. In this article,
    I focus on the output `pyodide-worker`'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '` — to pyodide-worker` ：Panel 可以将 Python 应用程序转化为几种支持类型，便于集成到 HTML 生产中。在本文中，我关注的是输出的
    `pyodide-worker`'
- en: '` — out docs` : output folder for the 2 files (HTML and JavaScript) generated.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '` — out docs` ：输出文件夹，用于存放生成的两个文件（HTML 和 JavaScript）。'
- en: 'In the docs folder (‘ — to docs’ part of the line of code), 2 files with the
    same name as the python script and the extensions ‘html’ and ‘js’ should appear.
    These scripts will enable us to integrate our application into web content. This
    code conversion (from python to HTML to JavaScript) is made possible by WebAssembly.
    Pyodide is a port of CPython to WebAssembly/Emscripte (more info here: [https://pyodide.org/en/stable/).](https://pyodide.org/en/stable/).)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 docs 文件夹（代码行中的‘ — to docs’部分），应出现两个与 Python 脚本同名、扩展名分别为‘html’和‘js’的文件。这些脚本将使我们能够将应用程序集成到
    Web 内容中。这种代码转换（从 Python 到 HTML 再到 JavaScript）得益于 WebAssembly。Pyodide 是 CPython
    移植到 WebAssembly/Emscripten 的版本（更多信息请见：[https://pyodide.org/en/stable/](https://pyodide.org/en/stable/)）。
- en: If you’re not familiar with WebAssembly, I invite you to devour [Mozilla’s article](https://developer.mozilla.org/en-US/docs/WebAssembly)
    on the subject. I’ll be doing an article on the history, scope and potential impact
    of WebAssembly, which I think will be a real game changer in the years to come.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不熟悉 WebAssembly，我建议你阅读 [Mozilla 的文章](https://developer.mozilla.org/en-US/docs/WebAssembly)来深入了解。我将会写一篇关于
    WebAssembly 的历史、范围及其潜在影响的文章，我认为 WebAssembly 将在未来几年内带来真正的变革。
- en: '**First test: local web server deployment**'
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**第一次测试：本地 Web 服务器部署**'
- en: '1\. Emulate the local web server with python: `python -m http.server`. This
    command will return a local URL for your browser to connect to (URL like: 127.0.0.1:8000).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 使用 Python 模拟本地 Web 服务器：`python -m http.server`。此命令将返回一个本地 URL，供浏览器连接（如：127.0.0.1:8000）。
- en: 2\. Click on the HTML script of our python application
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 点击我们 Python 应用程序的 HTML 脚本
- en: '*Information*: when browsing our files via the HTML server, to automatically
    launch the desired application when we open its folder, title the HTML and JavaScript
    files ‘index.html’ and ‘index.js’. Example :'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '*信息*：在通过 HTML 服务器浏览文件时，为了在打开文件夹时自动启动所需的应用程序，HTML 和 JavaScript 文件应命名为 ‘index.html’
    和 ‘index.js’。示例：'
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When the app folder is opened in the local HTML server, index.html is automatically
    launched.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用文件夹在本地 HTML 服务器中打开时，index.html 会自动启动。
- en: 'Test report for deployment on local html server:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 本地 HTML 服务器上的部署测试报告：
- en: Simple app:✅
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单应用：✅
- en: Big app:✅
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大型应用：✅
- en: Material Dashboard:✅
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material Dashboard:✅
- en: After testing each of the 3 applications listed above, this solution works perfectly
    with all of them, with no loss of speed in loading and using the applications.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试上述 3 个应用程序之后，这个方案在所有应用程序中都完美运行，加载和使用应用程序时没有任何速度损失。
- en: '**Second test: GitHub Pages deployment**'
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**第二次测试：GitHub Pages 部署**'
- en: In this article, I’ll quickly go over the configuration part of GitHub Pages
    on GitHub, as I described it in detail in my [previous article](/full-guide-to-build-a-professionnal-portfolio-with-python-markdown-git-and-github-page-for-66d12f7859f0).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将快速回顾 GitHub Pages 在 GitHub 上的配置部分，正如我在[上一篇文章](/full-guide-to-build-a-professionnal-portfolio-with-python-markdown-git-and-github-page-for-66d12f7859f0)中详细描述的那样。
- en: 'Warning from step 1: the ‘docs’ file hosting the HTML and JavaScript scripts
    must be named ‘docs’ and placed at the root of the git repository. These are 2
    prerequisites for deploying applications on GitHub Pages. Neither the folder name
    nor its location can be changed.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步的警告：托管 HTML 和 JavaScript 脚本的 ‘docs’ 文件夹必须命名为 ‘docs’，并且放置在 git 仓库的根目录下。这是部署应用到
    GitHub Pages 的 2 个前提条件。文件夹的名称和位置不能更改。
- en: '2 possibilities :'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2 种可能性：
- en: 2.a. Rename the app files ‘index.html’ and ‘index.js’, and place them directly
    in ‘docs’. This solution will open the GitHub Pages of your repository directly
    on the app,
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.a. 将应用程序文件重命名为 ‘index.html’ 和 ‘index.js’，并将其直接放置在 ‘docs’ 文件夹中。此方案将直接在应用程序上打开您的
    GitHub Pages。
- en: 2.b. Create an ‘index.html’ file directly in ‘docs’, and add a path to your
    application’s HTML file.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.b. 在 ‘docs’ 中直接创建一个 ‘index.html’ 文件，并添加指向应用程序 HTML 文件的路径。
- en: 'Here is the content of ‘index.html’ that I created during my deployment tests:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在部署测试中创建的‘index.html’文件的内容：
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Explanation:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 说明：
- en: '`https://petoulemonde.github.io/`: URL of my portfolio'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://petoulemonde.github.io/`: 我的作品集的 URL'
- en: '`article_dynamic_webpages/`: my working repo for this article'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`article_dynamic_webpages/`: 我的工作仓库，用于此文章'
- en: '`simple_app_pyodide/simple_app.html`: HTML folder/application to open. In the
    repo, the file is stored in **docs**/simple_app_pyodide/simple_app.html, but don’t
    mention ‘docs’ in the absolute path. Why this difference between the file explorer
    and the link? GitHub deploys from the docs folder, ‘docs’ is its working root.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`simple_app_pyodide/simple_app.html`: 要打开的 HTML 文件夹/应用程序。在仓库中，该文件存储在 **docs**/simple_app_pyodide/simple_app.html，但在绝对路径中不要提及
    ‘docs’。为什么文件浏览器和链接之间有这个差异？GitHub 是从 docs 文件夹进行部署的，‘docs’ 是其工作根目录。'
- en: 3\. Push in the remote repo (in my previous example, the ‘article_dynamic_webpages’
    repo).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 推送到远程仓库（在我之前的示例中，是‘article_dynamic_webpages’仓库）。
- en: '4\. In the repo, enable the creation of a github project page. In the configuration
    page, here’s how to configure the GitHub page:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 在仓库中启用 GitHub 项目页面的创建。在配置页面中，以下是如何配置 GitHub 页面：
- en: '![](../Images/0a1c760fffbea7c6d821c578de2c7436.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0a1c760fffbea7c6d821c578de2c7436.png)'
- en: Configuration for deployment on GitHub Pages, Image is by the author
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Pages 部署配置，图片由作者提供
- en: This is where the ‘docs’ folder is essential if we want to deploy our application,
    otherwise we won’t be able to enter any deployment branches in ‘master’.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是‘docs’文件夹对于我们部署应用程序至关重要的地方，否则我们将无法在‘master’分支中进行任何部署操作。
- en: 'Test report: Deployment on GitHub pages:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 测试报告：在 GitHub Pages 上部署：
- en: 'Simple app: ✅'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单应用：✅
- en: 'Big app: ✅'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大型应用：✅
- en: 'Material dashboard: ✅'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Material dashboard: ✅'
- en: 'Concerning solution 2.b. : This is a particularly interesting solution, as
    it allows us to have a static home page for our website or portfolio, and then
    distribute it to special dynamic project pages. It opens the door to both static
    and dynamic GitHub Pages, using mkdocs for the static aspect and its pretty design,
    and Panel for the interactive pages. I’ll probably do my next article on this
    mkdocs + Panel (pyodide-worker) deployment solution, and I’ll be delighted to
    count you among my readers once again.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 关于解决方案2.b.：这是一个特别有趣的解决方案，因为它允许我们为网站或个人作品集创建一个静态主页，然后将其分发到特殊的动态项目页面。这为静态和动态的GitHub
    Pages打开了大门，使用mkdocs处理静态部分及其精美的设计，使用Panel处理交互式页面。我可能会将下篇文章写成关于这种mkdocs + Panel（pyodide-worker）部署解决方案的内容，非常高兴能再次把你列为我的读者。
- en: '**Problems encountered**'
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**遇到的问题**'
- en: The dashboards tested so far don’t distribute to other pages on the site/portfolio,
    so the only alternative identified is to create a static home page, which redistributes
    to dashboards within the site. Is it possible to have a site with several pages
    without using a static page? The answer is yes, because dasbhaords can themselves
    integrate links, including links to other dashboards on the same site.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 目前测试过的仪表盘无法分发到站点/作品集的其他页面，因此识别出的唯一替代方案是创建一个静态主页，然后在站点内重新分发到仪表盘页面。是否可以在不使用静态页面的情况下创建一个包含多个页面的站点？答案是肯定的，因为仪表盘本身可以集成链接，包括指向同一站点上其他仪表盘的链接。
- en: 'I’ve modified the Material app code to add a link (adding `pn.pane.HTML(…)`
    ):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经修改了Material应用程序代码，添加了一个链接（添加了`pn.pane.HTML(…)`）：
- en: '[PRE8]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This adds a link to the application’s side bar:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将一个链接添加到应用程序的侧边栏：
- en: '![](../Images/aefbb332533fce49f06f2b038e7884a2.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aefbb332533fce49f06f2b038e7884a2.png)'
- en: Material dashboard with link visualization, Image is by the author
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 带有链接可视化的Material仪表盘，图片来自作者
- en: While the proof here isn’t pretty, it show that a dashboard can integrate links
    to other pages, so it’s possible to create a site with several pages using Panel
    alone — brilliant! In fact, I’m concentrating here on the dasbhoarding part of
    Panel, but Panel can also be used to create static pages, so without even mastering
    mkdocs, you can create sites with several pages combining static and dynamic elements.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这里的证明看起来不太完美，但它表明一个仪表盘可以集成指向其他页面的链接，因此仅使用Panel也可以创建一个包含多个页面的站点——太棒了！实际上，我在这里主要专注于Panel的仪表盘部分，但Panel也可以用来创建静态页面，因此即使不掌握mkdocs，你也可以通过结合静态和动态元素来创建多个页面的站点。
- en: '**Discussion**'
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**讨论**'
- en: Panel is a very interesting and powerful package that lets you create dynamic
    websites easily and hosted on GitHub Pages, thanks in particular to the magic
    of WebAssembly. The package really lets you concentrate on creating the dasbhoard,
    then in just a few lines convert that dasbhoard into web content. Coupled with
    the ease of use of GitHub Pages, Panel makes it possible to rapidly deploy data
    dashboards.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Panel是一个非常有趣且强大的工具包，它使得创建动态网站变得简单，并能够托管在GitHub Pages上，尤其得益于WebAssembly的魔力。这个工具包真正让你可以专注于创建仪表盘，然后通过几行代码将仪表盘转换为网页内容。再加上GitHub
    Pages的易用性，Panel使得数据仪表盘的快速部署成为可能。
- en: This solution, while brilliant, has several limitations that I’ve come across
    in the course of my testing. The first is that it’s not possible to integrate
    user-editable and executable code. I’d like to be able to let users explore the
    data in their own way, by sharing the code I’ve written with them so that they
    can modify it and explore the data in their own way.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个解决方案很棒，但在我的测试过程中，我遇到了一些局限性。第一个问题是无法集成用户可编辑和可执行的代码。我希望能够让用户以自己的方式探索数据，通过与他们分享我编写的代码，使他们能够修改代码并以自己的方式探索数据。
- en: The second and final limitation is that customizing dashboards is not as easy
    as creating them. Hvplot offers, via the *explorer* tool, a visual solution for
    exploring data and creating charts. But once in the code, I find customization
    a little difficult. The packge is awesome in terms of power and functionality,
    and I’m probably still lacking a bit of skill on it, so I think it’s mainly due
    to my lack of practice on this package rather than the package itself.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个也是最后一个局限性是，定制仪表盘不像创建仪表盘那么容易。Hvplot通过*explorer*工具提供了一种可视化的解决方案来探索数据并创建图表。但一旦进入代码中，我发现定制起来有点困难。这个工具包在功能和强大性方面非常棒，我可能仍然缺乏一些技能，因此我认为这主要是由于我对这个工具包的练习不足，而非工具包本身的问题。
- en: If you’ve made it this far, thank you for your attention! Your comments on my
    previous article were very helpful. Thanks to you, I’ve discovered Quarto and
    got some ideas on how to make my articles more interesting for you, the reader.
    Please leave me a comment to tell me how I could improve my article, both technically
    and visually, so that I can write an even more interesting article for you next
    time.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经看到这里，感谢你的关注！你在我上一篇文章上的评论非常有帮助。多亏了你，我发现了Quarto，并获得了一些关于如何让我的文章对你，读者，更加有趣的想法。请留下评论告诉我如何改进我的文章，无论是从技术上还是视觉上，这样我下次就能为你写出更加有趣的文章。
- en: Good luck on your Pythonic adventure!
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 祝你在Python冒险中好运！
- en: Pierre-Etienne
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 皮埃尔·埃蒂安
