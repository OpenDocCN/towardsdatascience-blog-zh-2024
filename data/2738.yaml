- en: Solving the Classic Betting on the World Series Problem Using Hill Climbing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用爬山算法解决经典的世界大赛下注问题
- en: 原文：[https://towardsdatascience.com/solving-the-classic-betting-on-the-world-series-problem-using-hill-climbing-5e9766e1565d?source=collection_archive---------2-----------------------#2024-11-10](https://towardsdatascience.com/solving-the-classic-betting-on-the-world-series-problem-using-hill-climbing-5e9766e1565d?source=collection_archive---------2-----------------------#2024-11-10)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/solving-the-classic-betting-on-the-world-series-problem-using-hill-climbing-5e9766e1565d?source=collection_archive---------2-----------------------#2024-11-10](https://towardsdatascience.com/solving-the-classic-betting-on-the-world-series-problem-using-hill-climbing-5e9766e1565d?source=collection_archive---------2-----------------------#2024-11-10)
- en: A simple example of hill climbing — and solving a problem that’s difficult to
    solve without optimization techniques
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个简单的爬山算法示例——解决一个在没有优化技术的帮助下很难解决的问题
- en: '[](https://medium.com/@wkennedy934?source=post_page---byline--5e9766e1565d--------------------------------)[![W
    Brett Kennedy](../Images/b3ce55ffd028167326c117d47c64c467.png)](https://medium.com/@wkennedy934?source=post_page---byline--5e9766e1565d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--5e9766e1565d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--5e9766e1565d--------------------------------)
    [W Brett Kennedy](https://medium.com/@wkennedy934?source=post_page---byline--5e9766e1565d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@wkennedy934?source=post_page---byline--5e9766e1565d--------------------------------)[![W
    Brett Kennedy](../Images/b3ce55ffd028167326c117d47c64c467.png)](https://medium.com/@wkennedy934?source=post_page---byline--5e9766e1565d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--5e9766e1565d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--5e9766e1565d--------------------------------)
    [W Brett Kennedy](https://medium.com/@wkennedy934?source=post_page---byline--5e9766e1565d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--5e9766e1565d--------------------------------)
    ·15 min read·Nov 10, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--5e9766e1565d--------------------------------)
    ·15分钟阅读·2024年11月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Betting on the World Series is an old, interesting, and challenging puzzle.
    It’s also a nice problem to demonstrate an optimization technique called hill
    climbing, which I’ll cover in this article.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 世界大赛下注是一个古老、有趣且富有挑战性的谜题。这也是一个很好的问题，可以用来展示一种叫做爬山算法的优化技术，我将在本文中详细介绍。
- en: Hill climbing is a well-established, and relatively straightforward optimization
    technique. There are many other examples online using it, but I thought this problem
    allowed for an interesting application of the technique and is worth looking at.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 爬山算法是一种成熟且相对直接的优化技术。网上有许多其他的示例应用它，但我认为这个问题提供了一个有趣的应用案例，值得深入研究。
- en: 'One place the puzzle can be seen in on a page hosted by [UC Davis](https://www.math.ucdavis.edu/~gravner/MAT135A/resources/chpr.pdf).
    To save you looking it up, I’ll repeat it here:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这个谜题可以在[UC Davis](https://www.math.ucdavis.edu/~gravner/MAT135A/resources/chpr.pdf)的网页上看到。为了省去你查找的麻烦，我在这里重复一遍：
- en: '[E. Berlekamp] Betting on the World Series. You are a broker; your job is to
    accommodate your client’s wishes without placing any of your personal capital
    at risk. Your client wishes to place an even $1,000 bet on the outcome of the
    World Series, which is a baseball contest decided in favor of whichever of two
    teams first wins 4 games. That is, the client deposits his $1,000 with you in
    advance of the series. At the end of the series he must receive from you either
    $2,000 if his team wins, or nothing if his team loses. No market exists for bets
    on the entire world series. However, you can place even bets, in any amount, on
    each game individually. What is your strategy for placing bets on the individual
    games in order to achieve the cumulative result demanded by your client?'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[E. Berlekamp] 赌注在世界大赛上。你是一个经纪人；你的工作是满足客户的要求，同时不让个人资本承担任何风险。你的客户希望在世界大赛的结果上下注1,000美元，这是一场棒球比赛，决出先赢得4场比赛的其中一个队伍。也就是说，客户在大赛开始前将1,000美元存入你这里。比赛结束时，如果他的队伍获胜，他需要从你这里获得2,000美元，如果他的队伍失败，则什么也得不到。没有针对整个世界大赛的市场。但你可以在每场比赛上分别下注，金额可以相等。你的策略是什么，以便在单场比赛中下注，从而实现客户要求的累计结果？'
- en: So, it’s necessary to bet on the games one at a time (though also possible to
    abstain from betting on some games, simply betting $0 on those). After each game,
    we’ll either gain or lose exactly what we bet on that game. We start with the
    $1000 provided by our client. Where our team wins the full series, we want to
    end with $2000; where they lose, we want to end with $0.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，有必要逐场进行投注（虽然也可以选择跳过某些比赛，只对这些比赛下注$0）。每场比赛后，我们将获得或失去正好是我们对该场比赛下注的金额。我们从客户提供的$1000开始。如果我们的队伍赢得了整个系列赛，我们希望最终余额为$2000；如果他们输了，我们希望最终余额为$0。
- en: If you’ve not seen this problem before and wish to try to solve it manually,
    now’s your chance before we go into a description of solving this programmatically.
    It is a nice problem in itself, and can be worthwhile looking at solving it directly
    before proceeding with a hill-climbing solution.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前没有见过这个问题，并且希望尝试手动解决，现在是一个机会，在我们介绍如何通过编程解决之前。这个问题本身非常有趣，直接尝试解决它是值得的，之后再考虑使用爬坡算法。
- en: Approaching the problem
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接近问题的解决
- en: For this problem, I’m going to assume it’s okay to temporarily go negative.
    That is, if we’re ever, during the world series, below zero dollars, this is okay
    (we’re a larger brokerage and can ride this out), so long as we can reliably end
    with either $0 or $2000\. We then return to the client the $0 or $2000.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题，我假设暂时亏损是可以接受的。也就是说，在世界大赛期间，如果我们的余额降到零以下，这是可以的（我们是一家规模较大的经纪公司，可以撑过去），只要我们最终能够确保余额为$0或$2000。然后，我们将$0或$2000返还给客户。
- en: It’s relatively simple to come up with solutions for this that work most of
    the time, but not necessarily for every scenario. In fact, I’ve seen a few descriptions
    of this puzzle online that provide some sketches of a solution, but appear to
    not be completely tested for every possible sequence of wins and losses.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为这个问题提出一个大多数情况下有效的解决方案是相对简单的，但并不一定适用于每种情况。实际上，我在网上看到过一些关于这个谜题的描述，它们提供了一些解决方案的草图，但似乎并没有完全测试所有可能的胜负序列。
- en: 'An example of a policy to bet on the (at most) seven games may be to bet: $125,
    $250, $500, $125, $250, $500, $1000\. In this policy, we bet $125 on the first
    game, $250 on the second game, and so on, up to as many games as are played. If
    the series lasts five games, for example, we bet: $125, $250, $500, $125, $250\.
    This policy will work, actually, in most cases, though not all.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一种下注策略的示例是：$125、$250、$500、$125、$250、$500、$1000。在这个策略中，我们对第一场比赛下注$125，对第二场比赛下注$250，以此类推，直到比赛结束。例如，如果系列赛只进行五场比赛，我们下注的金额将是：$125、$250、$500、$125、$250。这个策略在大多数情况下有效，尽管不是对所有情况都适用。
- en: 'Consider the following sequence: 1111, where 0 indicates Team 0 wins a single
    game and 1 indicates Team 1 wins a single game. In this sequence, Team 1 wins
    all four games, so wins the series. Let’s say, our team is Team 1, so we need
    to end with $2000.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下序列：1111，其中0表示团队0赢得一场比赛，1表示团队1赢得一场比赛。在这个序列中，团队1赢得了四场比赛，因此赢得了系列赛。假设我们的队伍是团队1，那么我们需要最终余额为$2000。
- en: 'Looking at the games, bets, and dollars held after each game, we have:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 查看比赛、下注和每场比赛后所持有的金额，我们得到：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That is, we start with $1000\. We bet $125 on the first game. Team 1 wins that
    game, so we win $125, and now have $1125\. We then bet $250 on the second game.
    Team 1 wins this, so we win $250 and now have $1375\. And so on for the next two
    games, betting $500 and $125 on these. Here, we correctly end with $2000.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们从$1000开始。我们在第一场比赛下注$125。团队1赢得了那场比赛，所以我们赢得了$125，现在我们有$1125。接着我们在第二场比赛下注$250。团队1再次获胜，我们赢得$250，现在我们有$1375。接下来，我们对接下来的两场比赛分别下注$500和$125。在这种情况下，我们最终正确地拥有$2000。
- en: 'Testing the sequence 0000 (where Team 0 wins in four games):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 测试序列0000（其中团队0在四场比赛中获胜）：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we correctly (given Team 0 wins the series) end with $0.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正确地（假设团队0赢得了系列赛）最终余额为$0。
- en: 'Testing the sequence 0101011 (where Team 1 wins in seven games):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 测试序列0101011（其中团队1在七场比赛中获胜）：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here we again correctly end with $2000.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们再次正确地最终拥有$2000。
- en: 'However, with the sequence 1001101, this policy does not work:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在序列1001101中，这个策略无法奏效：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, though Team 1 wins the series (with 4 wins in 7 games), we end with only
    $1250, not $2000.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，尽管团队1赢得了系列赛（在7场比赛中赢得4场），但最终我们只有$1250，而不是$2000。
- en: Testing a given policy
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试某个给定的策略
- en: 'Since there are many possible sequences of games, this is difficult to test
    manually (and pretty tedious when you’re testing many possible polices), so we’ll
    next develop a function to test if a given policy works properly: if it correctly
    ends with at least $2000 for all possible series where Team 1 wins the series,
    and at least $0 for all possible series where Team 0 wins the series.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 由于比赛序列可能有很多种，这使得手动测试变得非常困难（而且在测试许多可能的策略时也非常繁琐），所以接下来我们将开发一个函数来测试给定的策略是否正常工作：即它是否能正确地在队伍1赢得系列赛时最终保持至少$2000，在队伍0赢得系列赛时保持至少$0。
- en: This takes a policy in the form of an array of seven numbers, indicating how
    much to bet on each of the seven games. In series with only four, five, or six
    games, the values in the last cells of the policy are simply not used. The above
    policy can be represented as [125, 250, 500, 125, 250, 500, 1000].
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个策略以一个七个数字的数组形式传入，表示在七场比赛中每场的投注金额。在只有四场、五场或六场比赛的系列赛中，策略数组中最后几项的值将不会被使用。上述策略可以表示为[125,
    250, 500, 125, 250, 500, 1000]。
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This starts by creating a string representation of each possible sequence of
    wins and losses. This creates a set of 2⁷ (128) strings, starting with ‘0000000’,
    then ‘0000001’, and so on, to ‘1111111’. Some of these are redundant, since some
    series will end before all seven games are played — once one team has won four
    games. In production, we’d likely clean this up to reduce execution time, but
    for simplicity, we simply loop through all 2⁷ combinations. This does have some
    benefit later, as it treats all 2⁷ (equally likely) combinations equally.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这从创建每种可能的胜负序列的字符串表示开始。这样会创建一个由2⁷（128）个字符串组成的集合，字符串从‘0000000’开始，然后是‘0000001’，依此类推，直到‘1111111’。其中一些是冗余的，因为某些序列会在七场比赛之前结束——一旦某个队伍赢得四场比赛。在实际生产中，我们可能会清理这些冗余序列以减少执行时间，但为了简化，我们仅仅遍历所有2⁷种组合。这在后续有一些好处，因为它平等对待所有2⁷（同样可能的）组合。
- en: For each of these possible sequences, we apply the policy to determine the bet
    for each game in the sequence, and keep a running count of the money held. That
    is, we loop through all 2⁷ possible sequences of wins and losses (quitting once
    one team has won four games), and for each of these sequences, we loop through
    the individual games in the sequence, betting on each of the games one at a time.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些可能的序列，我们应用策略来确定每场比赛的投注，并持续跟踪所持有的资金。也就是说，我们遍历所有2⁷种可能的胜负序列（直到某个队伍赢得四场比赛为止），对于每个序列，我们遍历序列中的每场比赛，逐场进行投注。
- en: In the end, if Team 0 won the series, we ideally have $0; and if Team 1 won
    the series, we ideally have $2000, though there is no penalty (or benefit) if
    we have more.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，如果队伍0赢得了系列赛，我们理想中的金额是$0；如果队伍1赢得了系列赛，我们理想中的金额是$2000，虽然如果超过这个金额也没有惩罚（或好处）。
- en: If we do not end a sequence of games with the correct amount of money, we determine
    how many dollars we’re short; that’s the cost of that sequence of games. We sum
    these shortages up over all possible sequences of games, which gives us an evaluation
    of how well the policy works overall.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在一场比赛序列结束时没有得到正确的资金数额，我们将确定短缺的金额；这就是该序列的成本。我们将所有可能的比赛序列中的短缺金额加起来，从而得到对该策略总体表现的评估。
- en: To determine if any given policy works properly or not, we can simply call this
    method with the given policy (in the form of an array) and check if it returns
    0 or not. Anything higher indicates that there’s one or more sequences where the
    broker ends with too little money.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要确定给定的策略是否正常工作，我们可以简单地调用此方法并传入给定的策略（以数组形式），然后检查它是否返回0。返回值大于0表示存在一个或多个序列，其中经纪人最终剩余的资金过少。
- en: Hill Climbing
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 山地攀登
- en: I won’t go into too much detail about hill climbing, as it’s fairly well-understood,
    and well documented many places, but will describe the basic idea very quickly.
    Hill climbing is an optimization technique. We typically start by generating a
    candidate solution to a problem, then modify this in small steps, with each step
    getting to better and better solutions, until we eventually reach the optimal
    point (or get stuck in a local optima).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会过多详细讨论山地攀登法，因为它已经被广泛理解并且在许多地方有详细文档，但我会快速描述其基本思想。山地攀登是一种优化技术。我们通常从生成问题的候选解决方案开始，然后在小的步骤中修改它，每一步都会得到更好的解决方案，直到我们最终达到最优解（或者被困在局部最优解中）。
- en: 'To solve this problem, we can start with any possible policy. For example,
    we can start with: [-1000, -1000, -1000, -1000, -1000, -1000, -1000]. This particular
    policy is certain to work poorly — we’d actually bet heavily against Team 1 all
    seven games. But, this is okay. Hill climbing works by starting anywhere and then
    progressively moving towards better solutions, so even starting with a poor solution,
    we’ll ideally eventually reach a strong solution. Though, in some cases, we may
    not, and it’s sometimes necessary (or at least useful) to re-run hill climbing
    algorithms from different starting points. In this case, starting with a very
    poor initial policy works fine.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以从任何可能的策略开始。例如，我们可以从[-1000, -1000, -1000, -1000, -1000, -1000, -1000]开始。这个特定的策略肯定效果不好——我们实际上会在所有七场比赛中对Team
    1下注很多。但这没关系。爬山法是从任何地方开始，然后逐步朝更好的解决方案移动，因此即使从一个糟糕的解决方案开始，我们最终也理想地会达到一个强的解决方案。尽管如此，在某些情况下，我们可能无法达到最优解，有时需要（或至少有用）从不同的起点重新运行爬山算法。在这种情况下，从一个非常糟糕的初始策略开始也没问题。
- en: 'Playing with this puzzle manually before coding it, we may conclude that a
    policy needs to be a bit more complex than a single array of seven values. That
    form of policy determines the size of each bet entirely based on which game it
    is, ignoring the numbers of wins and losses so far. What we need to represent
    the policy is actually a 2d array, such as:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码之前先手动操作这个难题，我们可能得出结论，一个策略比单纯的七个值的数组要复杂一些。那种策略形式完全基于是哪场比赛来决定每次下注的大小，而忽略了到目前为止的胜负记录。我们实际需要表示策略的是一个二维数组，如下所示：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There are other ways to do this, but, as we’ll show below, this method works
    quite well.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他方法可以做到这一点，但正如我们下面所展示的，这种方法效果相当好。
- en: 'Here, the rows represent the number of wins so far for Team 1: either 0, 1,
    2, or 3\. The columns, as before, indicate the current game number: either 1,
    2, 3, 4, 5, 6, or 7.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，行表示到目前为止Team 1的获胜场数：0、1、2或3。列，如前所述，表示当前的比赛编号：1、2、3、4、5、6或7。
- en: Again, with the policy shown, we would bet $1000 against Team 1 every game no
    matter what, so almost any random policy is bound to be at least slightly better.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，在这个策略中，我们会在每场比赛中都对Team 1下注$1000，无论如何，因此几乎任何随机策略都可能稍微好一点。
- en: This policy has 4x7, or 28, values. Though, some are unnecessary and this could
    be optimized somewhat. I’ve opted for simplicity over efficiency here, but generally
    we’d optimize this a bit more in a production environment. In this case, we can
    remove some impossible cases, like having 0 wins by games 5, 6, or 7 (with no
    wins for Team 1 by game 5, Team 0 must have 4 wins, thus ending the series). Twelve
    of the 28 cells are effectively unreachable, with the remaining 16 relevant.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个策略有4x7，或者说28个值。虽然其中一些是多余的，可以优化一下。我选择了简单而不是高效，但一般来说，在生产环境中我们会进行更多优化。在这种情况下，我们可以去除一些不可能的情况，比如在第5、6或7场比赛中有0场胜利（如果第5场比赛时Team
    1没有胜利，Team 0必须有4场胜利，从而结束系列赛）。28个单元格中有12个实际上是无法达到的，其余的16个是相关的。
- en: 'For simplicity, it’s not used in this example, but the fields that are actually
    relevant are the following, where I’ve placed a -1000:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，在这个例子中没有使用，但实际上相关的字段如下，我已放置了-1000：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The cells marked ‘n/a’ are not relevant. For example, on the first game, it’s
    impossible to have already had 1, 2, or 3 wins; only 0 wins is possible at that
    point. On the other hand, by game 4, it is possible to have 0, 1, 2, or 3 previous
    wins.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 标记为“n/a”的单元格不相关。例如，在第一场比赛中，不可能已经有1、2或3场胜利；那时只能有0场胜利。另一方面，到第四场比赛时，可能已经有0、1、2或3场胜利。
- en: Also playing with this manually before coding anything, it’s possible to see
    that each bet is likely a multiple of either halves of $1000, quarters of $1000,
    eights, sixteenths, and so on. Though, this is not necessarily the optimal solution,
    I’m going to assume that all bets are multiples of $500, $250, $125, $62.50, or
    $31.25, and that they may be $0.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写任何代码之前，如果先手动操作一下，就能看到每个下注额很可能是$1000的二分之一、四分之一、八分之一、十六分之一等等的倍数。虽然这不一定是最优解，但我将假设所有的下注都是$500、$250、$125、$62.50或$31.25的倍数，并且它们可能是$0。
- en: I will, though, assume that there is never a case to bet against Team 1; while
    the initial policy starts out with negative bets, the process to generate new
    candidate policies uses only bets between $0 and $1000, inclusive.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我假设永远没有反对Team 1下注的情况；虽然初始策略以负数下注开始，但生成新候选策略的过程只使用$0到$1000之间（包括$0和$1000）的下注额。
- en: There are, then, 33 possible values for each bet (each multiple of $31.25 from
    $0 to $1000). Given the full 28 cells, and assuming bets are multiples of 31.25,
    there are 33²⁸ possible combinations for the policy. So, testing them all is infeasible.
    Limiting this to the 16 used cells, there are still 33¹⁶ possible combinations.
    There may be further optimizations possible, but there would, nevertheless, be
    an extremely large number of combinations to check exhaustively, far more than
    would be feasible. That is, directly solving this problem may be possible programmatically,
    but a brute-force approach, using only the assumptions stated here, would be intractable.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每个投注有33种可能的值（从$0到$1000的每个$31.25的倍数）。考虑到完整的28个单元格，并假设投注是31.25的倍数，那么政策可能的组合数为33²⁸。所以，测试所有可能的组合是不可行的。如果将其限制为使用的16个单元格，仍然有33¹⁶种可能的组合。可能会有进一步的优化，但无论如何，要全面检查所有的组合，数量极其庞大，远远超出可行的范围。也就是说，直接用程序解决这个问题是可能的，但如果仅依赖于这里假设的条件，暴力破解法将是无法处理的。
- en: So, an optimization technique such as hill climbing can be quite appropriate
    here. By starting at a random location on the solution landscape (a random policy,
    in the form of a 4x7 matrix), and constantly (metaphorically) moving uphill (each
    step we move to a solution that’s better, even if only slightly, than the previous),
    we eventually reach the highest point, in this case a workable policy for the
    World Series Betting Problem.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，像爬山算法这样的优化技术在这里非常适用。通过从解决方案空间的一个随机位置开始（一个随机的政策，以4x7矩阵的形式表示），不断地（比喻地）向上移动（每次我们都朝着一个比之前稍微更好的解决方案前进），最终我们到达最高点，在这种情况下就是一个适用于世界系列投注问题的可行政策。
- en: Update to the Evaluation Method
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估方法的更新
- en: 'Given that the policies will be represented as 2d matrices and not 1d arrays,
    the code above to determine the current bet will changed from:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于政策将以二维矩阵而非一维数组的形式表示，确定当前投注的代码将从以下内容变更：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'to:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 改为：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That is, we determine the current bet based on both the number of games won
    so far and the number of the current game. Otherwise, the evaluate_policy() method
    is as above. The code above to evaluate a policy is actually the bulk of the code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们根据目前为止赢得的比赛数和当前比赛的编号来确定当前投注。否则，evaluate_policy()方法与上述相同。上述用于评估政策的代码实际上是大部分代码的核心。
- en: Code to find a solution
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻找解决方案的代码
- en: We next show the main code, which starts with a random policy, and then loops
    (up to 10,000 times), each time modifying and (hopefully) improving this policy.
    Each iteration of the loop, it generates 10 random variations of the current-best
    solution, takes the best of these as the new current solution (or keeps the current
    solution if none are better, and simply keeps looping until we do have a better
    solution).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们展示主要代码，它从一个随机政策开始，然后循环（最多10,000次），每次修改并（希望）改进此政策。每次循环，它生成当前最佳解的10个随机变体，选出其中最好的一个作为新的当前解决方案（如果没有更好的解，则保留当前解，并继续循环，直到找到更好的解）。
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Running this, the main loop executed 1,541 times before finding a solution.
    Each iteration, it calls vary_policy() (described below) ten times to generate
    ten variations of the current policy. It then calls evaluate_policy() to evaluate
    each. This was defined above, and provides a score (in dollars), of how short
    the broker can come up using this policy in an average set of 128 instances of
    the world series (we can divide this by 128 to get the expected loss for any single
    world series). The lower the score, the better.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码时，主循环执行了1,541次才找到解决方案。每次迭代，它调用vary_policy()（下面描述）十次来生成当前政策的十个变体。然后它调用evaluate_policy()来评估每个变体。这个方法之前已经定义过，提供一个得分（以美元为单位），表示使用该政策时，代理商在128个世界系列实例的平均集下，能够容忍的亏损金额（我们可以将其除以128，以获得任何单一世界系列的预期损失）。得分越低，结果越好。
- en: The initial solution had a score of 153,656.25, so quite poor, as expected.
    It rapidly improves from there, quickly dropping to around 100,000, then 70,000,
    then 50,000, and so on. Printing the best policies found to date as the code executes
    also presents increasingly more sensible policies.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 初始解决方案的得分为153,656.25，表现非常差，正如预期的那样。从那里开始，快速改善，迅速下降到约100,000，然后是70,000，50,000，以此类推。随着代码执行，打印出迄今为止找到的最佳政策，也会呈现越来越合理的政策。
- en: Method to Generate Random Variations
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成随机变体的方法
- en: 'The following code generates a single variation on the current policy:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码生成当前政策的一个单一变体：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here we first select the number of cells in the 4x7 policy to change, between
    1 and 10\. It’s possible to modify fewer cells, and this can improve performance
    when the scores are getting close to zero. That is, once we have a strong policy,
    we likely wish to change it less than we would near the beginning of the process,
    where the solutions tend to be weak and there is more emphasis on exploring the
    search space.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先选择4x7策略中需要修改的单元格数量，范围在1到10之间。可以修改更少的单元格，这有助于在得分接近零时提升表现。也就是说，一旦我们拥有了一个强大的策略，我们可能希望减少对它的修改，而不是在过程初期进行大量修改，因为初期的解决方案往往较弱，更加注重搜索空间的探索。
- en: However, consistently modifying a small, fixed number of cells does allow getting
    stuck in local optima (sometimes there is no modification to a policy that modifies
    exactly, say, 1 or 2 cells that will work better, and it’s necessary to change
    more cells to see an improvement), and doesn’t always work well. Randomly selecting
    a number of cells to modify avoids this. Though, setting the maximum number here
    to ten is just for demonstration, and is not the result of any tuning.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，始终修改少量固定数量的单元格可能会导致陷入局部最优解（有时没有对策略进行修改，比如修改1或2个单元格后效果会更好，因此必须修改更多的单元格才能看到提升），并不总是能取得良好的效果。随机选择若干个单元格进行修改可以避免这种情况。不过，将这里的最大单元格数设置为10只是为了演示，并不是经过任何调优后的结果。
- en: If we were to limit ourselves to the 16 relevant cells of the 4x7 matrix for
    changes, this code would need only minor changes, simply skipping updates to those
    cells, and marking them with a special symbol (equivalent to ‘n/a’, such as np.NaN)
    for clarity when displaying the matrices.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将自己限制在4x7矩阵中的16个相关单元格内进行修改，这段代码只需做一些小改动，简单地跳过对这些单元格的更新，并在显示矩阵时用一个特殊符号（相当于‘n/a’，如np.NaN）标记它们，以便清晰显示。
- en: Results
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结果
- en: In the end, the algorithm was able to find the following policy. That is, in
    the first game, we will have no wins, so will bet $312.50\. In the second game,
    we will have either zero or one win, but in either case will be $312.50\. In the
    third game, we will have either zero, one, or two wins, so will bet $250, $375,
    or $250, and so on, up to, at most, seven games. If we reach game 7, we must have
    3 wins, and will bet $1000 on that game.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，算法能够找到以下策略。也就是说，在第一场比赛中，我们将没有胜利，因此会投注$312.50。在第二场比赛中，我们可能没有胜利，也可能有一次胜利，但无论哪种情况，我们的投注都是$312.50。在第三场比赛中，我们可能没有胜利，也可能有一次或两次胜利，因此投注额为$250、$375或$250，依此类推，最多为七场比赛。如果我们进入第七场比赛，我们必须有3次胜利，并将在该场比赛中投注$1000。
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'I’ve also created a plot of how the scores for the best policy found so far
    drops (that is, improves — smaller is better) over the 1,541 iterations:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我还制作了一个图表，展示了目前为止找到的最佳策略的得分如何随着1,541次迭代逐步下降（也就是变得更好——数值越小越好）：
- en: '![](../Images/5c39cb7d4cbcf5c116dbd7f8d566388d.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5c39cb7d4cbcf5c116dbd7f8d566388d.png)'
- en: The score for the best policy found so far over each of the iterations until
    a suitable solution (with a score of 0) is found.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代过程中找到的最佳策略的得分，直到找到一个合适的解决方案（得分为0）。
- en: 'This is a bit hard to see since the score is initially quite large, so we plot
    this again, skipping first 15 steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于得分最初较大，这一变化有些难以察觉，因此我们再次绘制图表，跳过前15步：
- en: '![](../Images/c76f13ca9f8e0c1880b82eb146ada8ae.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c76f13ca9f8e0c1880b82eb146ada8ae.png)'
- en: The score for the best policy found so far over each of the iterations (skipping
    the first 15 iterations) until a suitable solution (with a score of 0) is found.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代过程中找到的最佳策略的得分（跳过前15次迭代），直到找到一个合适的解决方案（得分为0）。
- en: We can see the score initially continuing to drop quickly, even after the first
    15 steps, then going into a long period of little improvement until it eventually
    finds a small modification to the current policy that improves it, followed by
    more drops until we eventually reach a perfect score of 0 (being $0 short for
    any possible sequence of wins & losses).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，得分最初会迅速下降，即使在前15步之后，得分仍继续下降，随后进入一个长时间的小幅提升期，直到最终找到对当前策略的小幅调整，使得得分有所提升，然后再次出现下降，直到我们最终达到完美的0分（即对于任何可能的胜负序列，得分都短缺$0）。
- en: Similar types of problems
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相似类型的问题
- en: The problem we worked on here is an example of what is known as a *constraints
    satisfaction problem*, where we simply wish to find a solution that covers all
    the given constraints (in this case, we take the constraints as hard constraints
    — it’s necessary to end correctly with either $0 or $2000 for any possible valid
    sequence of games).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里处理的问题是一个*约束满足问题*的例子，我们只是希望找到一个满足所有给定约束的解决方案（在这种情况下，我们将约束视为硬约束——对于任何可能有效的游戏序列，必须以$0或$2000结束）。
- en: Given two or more full solutions to the problem, there is no sense of one being
    better than the other; any that works is good, and we can stop once we have a
    workable policy. The N Queens problem and Sudoku, are two other examples of problems
    of this type.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 给定两个或更多完整的解决方案时，没有哪个解决方案比另一个更好；任何有效的解决方案都是好的，一旦我们找到了可行的策略，就可以停止。N皇后问题和数独是这种类型问题的两个其他例子。
- en: Other types of problems may have a sense of optimality. For example, with the
    Travelling Salesperson Problem, any solution that visits every city exactly once
    is a valid solution, but each solution has a different score, and some are strictly
    better than others. In that type of problem, it’s never clear when we’ve reached
    the best possible solution, and we usually simply try for a fixed number of iterations
    (or amount of time), or until we’ve reached a solution with at least some minimal
    level of quality. Hill climbing can also be used with these types of problems.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 其他类型的问题可能具有最优性。例如，对于旅行商问题，任何访问每个城市一次的解决方案都是有效的，但每个解决方案的评分不同，有些解决方案优于其他解决方案。在这种类型的问题中，我们通常无法确定何时达到了最优解，我们通常只会尝试固定次数的迭代（或固定时间），或者直到我们找到了一个至少达到某个最低质量水平的解决方案。爬山法也可以用于这些类型的问题。
- en: It’s also possible to formulate a problem where it’s necessary to find, not
    just one, but all workable solutions. In the case of the Betting on World Series
    problem, it was simple to find a single workable solution, but finding all solutions
    would be much harder, requiring an exhaustive search (though optimized to quickly
    remove cases that are equivalent, or to quit evaluation early where policies have
    a clear outcome).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以制定一个问题，要求找到所有可行的解决方案，而不仅仅是一个。在世界大赛投注问题的情况下，找到一个可行的解决方案很简单，但找到所有解决方案会更加困难，需要进行穷举搜索（尽管可以优化，快速排除等价情况，或者在策略具有明显结果时提前停止评估）。
- en: Similarly, we could re-formulate Betting on World Series problem to simply require
    a good, but not perfect, solution. For example, we could accept solutions where
    the broker comes out even most of the time, and only slightly behind in other
    cases. In that case, hill climbing can still be used, but something like a random
    search or grid search are also possible — taking the best policy found after a
    fixed number of trials, may work sufficiently in that case.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以重新制定世界大赛投注问题，只要求一个好的解决方案，而不是完美的解决方案。例如，我们可以接受经纪人大部分时间没有盈亏，仅在其他情况下稍微亏损的解决方案。在这种情况下，爬山法仍然可以使用，但像随机搜索或网格搜索也是可行的——在固定次数的试验后，选择找到的最佳策略，这种方法在这种情况下可能足够有效。
- en: In problems harder than the Betting on World Series problem, simple hill climbing
    as we’ve used here may not be sufficient. It may be necessary, for example, to
    maintain a memory of previous policies, or to include a process called *simulated
    annealing* (where we take, on occasion, a sub-optimal next step — a step that
    may actually have lower quality than the current solution — in order to help break
    away from local optima).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在比世界大赛投注问题更困难的问题中，像我们这里使用的简单爬山法可能不够充分。例如，可能需要保持之前策略的记忆，或者包括一个叫做*模拟退火*的过程（在这种过程中，我们偶尔采取一个次优的步骤——一个可能实际质量低于当前解的步骤——以帮助突破局部最优解）。
- en: For more complex problems, it may be better to use Bayesian Optimization, Evolutionary
    Algorithms, Particle Swarm Intelligence, or other more advanced methods. I’ll
    hopefully cover these in future articles, but this was a relatively simple problem,
    and straight-forward hill climbing worked quite well (though as indicated, can
    easily be optimized to work better).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的问题，可能更适合使用贝叶斯优化、进化算法、粒子群智能或其他更先进的方法。我希望在未来的文章中涵盖这些内容，但这个问题相对简单，直接的爬山法效果很好（尽管如前所述，可以很容易地优化使其效果更好）。
- en: Conclusions
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This article provided a simple example of hill climbing. The problem was relatively
    straight-forward, so hopefully easy enough to go through for anyone not previously
    familiar with hill climbing, or as a nice example even where you are familiar
    with the technique.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章提供了一个简单的爬山法例子。这个问题相对直接，因此希望对于没有接触过爬山法的人来说足够简单，也可以作为一个很好的例子，即使你已经熟悉这种技术。
- en: What’s interesting, I think, is that despite this problem being solvable otherwise,
    optimization techniques such as used here are likely the simplest and most effective
    means to approach this. While tricky to solve otherwise, this problem was quite
    simple to solve using hill climbing.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '我认为有趣的是，尽管这个问题本可以通过其他方式解决，但像这里使用的优化技术可能是最简单且最有效的解决手段。虽然如果不使用这种方法，问题可能很难解决，但使用爬山法后，解决起来相当简单。  '
- en: All images by author
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '所有图片由作者提供  '
