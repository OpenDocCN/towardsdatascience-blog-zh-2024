- en: What Exactly Is An Algorithm? Turing Machines Explained
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是算法？图灵机解释
- en: 原文：[https://towardsdatascience.com/what-exactly-is-an-algorithm-turing-machines-explained-76a32fe71a37?source=collection_archive---------7-----------------------#2024-04-25](https://towardsdatascience.com/what-exactly-is-an-algorithm-turing-machines-explained-76a32fe71a37?source=collection_archive---------7-----------------------#2024-04-25)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/what-exactly-is-an-algorithm-turing-machines-explained-76a32fe71a37?source=collection_archive---------7-----------------------#2024-04-25](https://towardsdatascience.com/what-exactly-is-an-algorithm-turing-machines-explained-76a32fe71a37?source=collection_archive---------7-----------------------#2024-04-25)
- en: A simple guide to Turing Machines, how they came to be, and how they helped
    us define what an algorithm is
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图灵机简明指南：它们是如何诞生的，以及它们如何帮助我们定义算法是什么
- en: '[](https://thiagofpmr.medium.com/?source=post_page---byline--76a32fe71a37--------------------------------)[![Thiago
    Rodrigues](../Images/5208e8d1c3837c616e19cdba4941d6bd.png)](https://thiagofpmr.medium.com/?source=post_page---byline--76a32fe71a37--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--76a32fe71a37--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--76a32fe71a37--------------------------------)
    [Thiago Rodrigues](https://thiagofpmr.medium.com/?source=post_page---byline--76a32fe71a37--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://thiagofpmr.medium.com/?source=post_page---byline--76a32fe71a37--------------------------------)[![Thiago
    Rodrigues](../Images/5208e8d1c3837c616e19cdba4941d6bd.png)](https://thiagofpmr.medium.com/?source=post_page---byline--76a32fe71a37--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--76a32fe71a37--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--76a32fe71a37--------------------------------)
    [Thiago Rodrigues](https://thiagofpmr.medium.com/?source=post_page---byline--76a32fe71a37--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--76a32fe71a37--------------------------------)
    ·8 min read·Apr 25, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--76a32fe71a37--------------------------------)
    ·8分钟阅读·2024年4月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/ede58b020bb325f69a8cca1d5ea9dde2.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ede58b020bb325f69a8cca1d5ea9dde2.png)'
- en: Photo by [Taylor Vick](https://unsplash.com/@tvick?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/cable-network-M5tzZtFCOfs?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Taylor Vick](https://unsplash.com/@tvick?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)提供，来源于[Unsplash](https://unsplash.com/photos/cable-network-M5tzZtFCOfs?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'When we think of algorithms, we often describe them as similar to a *recipe*:
    a series of steps we follow to complete some task. We frequently use that definition
    when writing code, breaking down what must be done into smaller steps and writing
    code that executes them.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想到算法时，我们常常将其描述为类似于*食谱*：一系列我们遵循的步骤以完成某个任务。我们在编写代码时常常使用这个定义，将必须完成的任务分解成更小的步骤，并编写代码来执行这些步骤。
- en: Although that intuitive notion of algorithm serves us well most of the time,
    having a formal definition allows us to do even more. With it, we can prove that
    some problems are fundamentally unsolvable, have a common ground for comparing
    and analyzing algorithms, and develop new ones. Nowadays, the Turing Machine is
    what typically fills that spot.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种直观的算法概念在大多数时候对我们来说足够用，但拥有一个正式的定义让我们能够做更多的事情。有了它，我们可以证明某些问题是根本无法解决的，找到一个比较和分析算法的共同基础，并开发新的算法。如今，图灵机通常填补了这一空缺。
- en: The Birth of the Turing Machine
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图灵机的诞生
- en: 'Until the beginning of the 20th century, even mathematicians didn’t have a
    formal definition of what an algorithm was. Much like most of us do today, they
    relied on that same intuitive concept: a **finite** number of steps by which a
    function could be effectively calculated.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 直到20世纪初，即便是数学家也没有对算法有一个正式的定义。和我们今天的做法类似，他们依赖于那个直观的概念：通过**有限**的步骤有效地计算一个函数。
- en: 'This became a limiting factor for mathematics in the last century. In 1928,
    [David Hilbert](https://en.wikipedia.org/wiki/David_Hilbert), alongside [Wilhelm
    Ackermann](https://en.wikipedia.org/wiki/Wilhelm_Ackermann), proposed the **decision
    problem**, or the *Entscheidungsproblem* in German. The problem went as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这成为了上个世纪数学的一个限制性因素。1928年，[大卫·希尔伯特](https://en.wikipedia.org/wiki/David_Hilbert)和[威廉·阿克曼](https://en.wikipedia.org/wiki/Wilhelm_Ackermann)提出了**决策问题**，即德语中的*Entscheidungsproblem*。问题内容如下：
- en: Is there an algorithm that can definitely answer “yes” or “no” to any mathematical
    statement?
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 是否存在一个算法，可以对任何数学陈述做出明确的“是”或“否”回答？
- en: This question couldn’t be answered without a *proper definition of algorithm*.
    Even before this, in 1900, Hilbert had also proposed 23 problems as challenges
    for the century to come, one of which ran into the same issue. The lack of a formal
    notion had already been plaguing mathematicians for a while.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题无法在没有*算法的恰当定义*的情况下得到解答。甚至在此之前，1900年，希尔伯特就已提出了23个世纪挑战问题，其中一个问题就遇到了同样的问题。缺乏正式的定义已经困扰了数学家们一段时间。
- en: 'Around 1936, two separate solutions to the *Entscheidungsproblem* were published
    independently*.* To solve it, they each proposed a method for how to define an
    algorithm. [Alan Turing](https://en.wikipedia.org/wiki/Alan_Turing) gave birth
    to the **Turing Machine** and [Alonzo Church](https://en.wikipedia.org/wiki/Alonzo_Church)
    invented **λ-Calculus** (lambda calculus). Both reached the same conclusion: *the
    algorithm hypothesized by Hilbert and Ackermann couldn’t exist*.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 大约在1936年，两个独立的解决方案针对*判定问题*相继发表。为了求解这个问题，他们分别提出了定义算法的方法。[艾伦·图灵](https://en.wikipedia.org/wiki/Alan_Turing)发明了**图灵机**，[阿隆佐·丘奇](https://en.wikipedia.org/wiki/Alonzo_Church)则发明了**λ-演算**（lambda
    演算）。两者得出了相同的结论：*希尔伯特和阿克曼提出的算法无法存在*。
- en: The two descriptions were equivalent in terms of power. That is, anything that
    could be described by a Turing machine could be described by λ-calculusand vice-versa.
    We tend to prefer Turing’s definition when discussing computer theory but assume
    both to be perfectly sufficient methods of describing an algorithm. This is known
    as the **Church-Turing thesis.**
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种描述在计算能力上是等效的。也就是说，任何可以通过图灵机描述的内容，也可以通过λ-演算来描述，反之亦然。我们在讨论计算机理论时倾向于采用图灵的定义，但通常假设两者都是描述算法的完全充分的方法。这就是**丘奇-图灵论题**。
- en: A function can only be calculated by an effective method if it is computable
    by a Turing machine (or **λ-calculus**).
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 只有当一个函数能够通过图灵机（或**λ-演算**）计算时，它才可以通过有效方法进行计算。
- en: How Turing Machines Work
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图灵机的工作原理
- en: In simple terms, one can think of a Turing machine as a black box that receives
    a string of characters, processes it in some way, and returns whether it either
    accepts or denies the input.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，可以将图灵机看作一个黑盒，它接收一串字符，以某种方式处理它，然后返回是否接受或拒绝该输入。
- en: '![](../Images/c404703b6fddb571e1d747767d9e5064.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c404703b6fddb571e1d747767d9e5064.png)'
- en: A black-box diagram of a Turing machine. Image by author.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图灵机的黑盒图示。图像由作者提供。
- en: This may seem strange at first, but it’s common in low-level languages like
    C, C++, or even bash script. When writing code in one of these languages, we often
    return 0 at the end of our script to signify a successful execution. We may have
    it instead return a 1 in case of a generic error.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这一现象一开始可能会显得很奇怪，但在像C、C++甚至bash脚本等低级语言中是很常见的。在这些语言中编写代码时，我们通常在脚本的最后返回0以表示执行成功。如果发生一般错误，我们可能会让它返回1。
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These values can then be checked by the operating system or other programs.
    Programming languages also allow for the return of numbers greater than 1 to specify
    a particular type of error but the general gist is still the same. As for what
    it means for a machine to accept or reject a certain input, that’s entirely up
    to the one who designed it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值随后可以由操作系统或其他程序进行检查。编程语言也允许返回大于1的数字来指定某种错误类型，但总体思路还是相同的。至于机器接受或拒绝某一输入的含义，这完全取决于设计它的人。
- en: 'Behind the curtain, the machine is made up of *two core components*: **a control
    block and a tape**. The tape is *infinite* and corresponds to the model’s memory.
    The control block can interact with the tape through a moving head that *can both
    read from and write into the tape*. The head can move left and right across the
    tape. It can go infinitely into the right but can’t go further left than the tape’s
    starting element as the tape only expands indefinitely towards one side.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在幕后，图灵机由*两个核心组件*构成：**控制块和磁带**。磁带是*无限的*，对应于模型的内存。控制块通过一个移动头部与磁带进行交互，*该头部既可以从磁带读取数据，也可以将数据写入磁带*。头部可以左右移动，向右可以无限延伸，但不能向左移动超出磁带的起始元素，因为磁带只在一侧无限扩展。
- en: '![](../Images/456318df9eab24e232b3e8e94681b866.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/456318df9eab24e232b3e8e94681b866.png)'
- en: A simplified diagram of the Turing machine. Image by author.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图灵机的简化图示。图像由作者提供。
- en: At first, the tape is empty, filled only with blank symbols (⊔). When the machine
    reads the input string, it gets placed at the leftmost part of the tape. The head
    is also moved to the leftmost position, allowing the machine to start reading
    the input sequence from there. How it goes about reading the input, whether it
    writes over it, and any other implementation details are defined in the control
    block.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，磁带是空的，仅充满空白符号（⊔）。当机器读取输入字符串时，它会将其放置在磁带的最左端。读写头也会移动到最左端，使得机器可以从那里开始读取输入序列。关于如何读取输入，是否覆盖它，以及其他实现细节，都在控制块中定义。
- en: The control block is made up of a set of states interconnected by a transition
    function. The transitions defined in the transition function specify how to move
    between states depending on what is read from the tape, as well as what to write
    onto it and how to move its head.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 控制块由一组通过转变函数相互连接的状态组成。转变函数中定义的转变指定了根据从磁带读取的内容如何在状态之间移动，并且指定了要写入磁带的内容以及如何移动读写头。
- en: '![](../Images/344534fbadb51febc5e1506c662adccd.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/344534fbadb51febc5e1506c662adccd.png)'
- en: A single transition in a Turing machine and its resulting tape. The read/write
    head reads "a" from the tape, writes "x" in its place and moves to the right.
    Image by author.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图灵机中的一个单一转变及其结果磁带。读写头从磁带读取“a”，将“x”写入其位置并向右移动。图像由作者提供。
- en: 'In the transition above, the first term refers to what is being read from the
    tape. Following the arrow, the next term will be written on the tape. Not only
    does the tape allow for any of the characters in the input to be written on it,
    allowing the head to write "a" or “b” into the tape, but it also permits the usage
    of blank symbols and additional symbols present only in the tape, like "x" or
    "y", which are not part of the input string. Following the comma, the last term
    is the direction in which to move the head: **R** means right and **L** means
    left.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述转变中，第一个项表示从磁带上读取的内容。沿着箭头，接下来的项将被写入磁带。不仅磁带允许将输入中的任何字符写入其中，让读写头能够将“a”或“b”写入磁带，还允许使用空白符号和仅存在于磁带中的额外符号，如“x”或“y”，这些符号并不是输入字符串的一部分。逗号后面的最后一项是指示读写头移动的方向：**R**表示右移，**L**表示左移。
- en: 'Let''s look at a different example: the diagram below describes the inner workings
    of a Turing machine that accepts any string of at least 2 in length that starts
    and ends with 0, with an arbitrary amount of 1s in the middle. Its input is a
    string of 1s and 0s. The transitions are placed next to arrows that point from
    one state to another. Every time the machine reads a character from the tape,
    it will check all the transitions that leave its current state. Then, it transitions
    along the arrow containing that symbol into the next state.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个不同的例子：下图描述了一个接受任何长度至少为2并且以0开始和结束、中间有任意数量1的图灵机的内部工作原理。它的输入是由1和0组成的字符串。状态之间的转变通过箭头标出，箭头指向一个状态到另一个状态。每次机器从磁带读取一个字符时，它会检查所有从当前状态出发的转变。然后，它会沿着包含该符号的箭头转变到下一个状态。
- en: '![](../Images/a2b61ede8fcfc7c6470285a932acac99.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a2b61ede8fcfc7c6470285a932acac99.png)'
- en: State diagram for a Turing machine that accepts L = 01*0 (*1** means a series
    of **n** 1s, where **n** ≥ 0). Image by author.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接受L = 01*0的图灵机的状态图（*1**表示一系列**n**个1，其中**n** ≥ 0）。图像由作者提供。
- en: 'The Turing machine has *3 special states*: a **starting**, an **acceptance**,
    and a **rejection** state. The starting state is indicated in the diagram by an
    arrow that only connects on one end and, as the name suggests, is the state the
    machine starts in. The remaining 2 states are equally straightforward: if the
    machine reaches the acceptance state, it accepts the input, and if it reaches
    the rejection state, it rejects it. Note that **it may also loop eternally, without
    ever reaching either of them**.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图灵机有*3个特殊状态*：一个**起始**状态，一个**接受**状态，和一个**拒绝**状态。起始状态在图中由一个只在一端连接的箭头表示，顾名思义，这是机器开始时所处的状态。剩下的2个状态同样简单明了：如果机器进入接受状态，则接受输入；如果进入拒绝状态，则拒绝输入。注意，**它也可能永远循环下去，永远不会到达这两者中的任何一个**。
- en: The diagram used was one for a deterministic Turing machine. That means every
    state had a transition leaving it for every possible symbol it may have read from
    the tape. In a non-deterministic Turing machine, this wouldn’t be the case. It
    is one of many Turing machine variations. Some may adopt more than one tape, others
    may have a “printer” attached, etc. The one thing to keep in mind with variations
    of the model is that they’re all equivalent in terms of power. That is, anything
    that any Turing machine variation can compute can also be calculated by the deterministic
    model.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所用的图是一个确定性图灵机的示意图。这意味着每个状态都有一个对应的转移，针对它可能从磁带上读取的每一个符号。在非确定性图灵机中，情况并非如此。它是众多图灵机变种之一。有些可能采用多个磁带，有些可能附带一个“打印机”等等。需要记住的是，尽管模型有不同的变种，但它们在能力上是等价的。也就是说，任何一个图灵机变种能够计算的东西，确定性模型也能计算出来。
- en: The picture below is of a simple physical model of a Turing machine built by
    Mike Davey. It has a tape that can be moved left or right by two rotating motors
    and at its center lies a circuit that can read from and write onto the tape, perfectly
    capturing Turing’s concept.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示的是由 Mike Davey 制作的一个简单的图灵机物理模型。它有一个磁带，可以通过两个旋转的电机向左或向右移动，中心有一个电路可以读取和写入磁带，完美地捕捉了图灵的概念。
- en: '![](../Images/c17dad2b2edcb4637493a90793d5dadd.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c17dad2b2edcb4637493a90793d5dadd.png)'
- en: '[A Turing Machine Model By Mike Davey](https://www.aturingmachine.com). Photo
    by Rocky Acosta ([CC BY 3.0](https://creativecommons.org/licenses/by/3.0)).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[Mike Davey 提供的图灵机模型](https://www.aturingmachine.com)。照片由 Rocky Acosta 提供 ([CC
    BY 3.0](https://creativecommons.org/licenses/by/3.0))。'
- en: The Relation to Modern Computers
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与现代计算机的关系
- en: Despite being simple, Turing machines are mighty. As the modern definition of
    an algorithm, it boasts the power to compute anything a modern computer can. After
    all, modern computers are based on the same principles. One might even refer to
    them as highly sophisticated real-world implementations of Turing machines.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管图灵机很简单，但它却非常强大。作为现代算法的定义，它具备计算任何现代计算机能够计算的东西的能力。毕竟，现代计算机基于的正是相同的原理。甚至可以称它们为图灵机的高度复杂的现实世界实现。
- en: That said, the problems dealt with by modern computers and the data structures
    used to tackle them are often much more complex than what we’ve discussed. How
    do Turing machines solve these problems? The trick behind it is **encoding**.
    No matter how complex, any data structure can be represented as a simple string
    of characters.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，现代计算机所处理的问题及其使用的数据结构通常比我们讨论的要复杂得多。那么图灵机是如何解决这些问题的呢？其背后的关键是**编码**。无论多复杂，任何数据结构都可以表示为一串简单的字符。
- en: '![](../Images/b9eca56fc1949b464ec62d9a579aeb5d.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b9eca56fc1949b464ec62d9a579aeb5d.png)'
- en: An undirected graph G and its encoding <G>. Image by author.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 无向图 G 及其编码 <G>。图像由作者提供。
- en: In the example above, we represent an undirected connected graph as a list of
    nodes followed by a list of edges. We use parenthesis and commas to isolate the
    individual nodes and edges. As long as the algorithm implemented by the Turing
    machine considers this representation, it should be able to perform any graph-related
    computations done by modern computers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们将一个无向连通图表示为一个节点列表，后面跟着一个边列表。我们使用括号和逗号来隔离各个节点和边。只要图灵机所实现的算法考虑了这种表示方式，它就能够执行现代计算机所进行的任何图相关计算。
- en: Data structures are stored in much the same way in real computers — just strings
    consisting of ones and zeros. In the end, at the barest level, all modern computers
    do is read and write strings of bits from and onto memory while following some
    logic. And, in doing so, they allow us to solve all kinds of problems from the
    barest to the highest complexity.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 数据结构在真实计算机中的存储方式与此非常相似——仅仅是由零和一组成的字符串。最终，在最基础的层面，所有现代计算机所做的就是按照某种逻辑从内存中读取和写入一串串的比特。通过这样做，它们使我们能够解决从最简单到最复杂的各种问题。
- en: Conclusion
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Understanding Turing machines and how they work provides helpful insight into
    the capabilities and limitations of computers. Beyond giving us a solid theoretical
    foundation to understand the underpinnings of complex algorithms, it allows us
    to determine whether an algorithm can even solve a given problem in the first
    place.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 理解图灵机及其工作原理能帮助我们深入洞察计算机的能力和局限性。除了为我们提供了一个坚实的理论基础来理解复杂算法的底层原理外，它还使我们能够确定一个算法是否能够解决某个特定问题。
- en: They are also central to complexity theory, which studies the difficulty of
    computational problems and how many resources, like time or memory, are required
    to solve them. Analyzing the complexity of an algorithm is an essential skill
    for anyone who works with software. Not only does it allow for the development
    of more efficient models and algorithms, as well as the optimization of existing
    ones, but it’s also helpful in choosing the right algorithm for the job.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它们也是计算复杂性理论的核心，计算复杂性理论研究计算问题的难度，以及解决这些问题所需的资源，比如时间或内存。分析算法的复杂性是任何从事软件开发的人必备的技能。它不仅有助于开发更高效的模型和算法，优化现有算法，还能帮助选择最合适的算法来完成任务。
- en: In conclusion, a deep comprehension of Turing machines not only grants us a
    profound understanding of computers’ capabilities and boundaries but also gives
    us the foundation and tools necessary to ensure the efficiency of our solutions
    and drive innovation forward.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，深入理解图灵机不仅让我们深刻理解计算机的能力和局限性，还为我们提供了确保解决方案效率的基础和工具，推动创新向前发展。
- en: Reference
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[](https://www.amazon.com/Introduction-Theory-Computation-Michael-Sipser-dp-113318779X/dp/113318779X/ref=dp_ob_image_bk?source=post_page-----76a32fe71a37--------------------------------)
    [## Introduction to the Theory of Computation'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://www.amazon.com/Introduction-Theory-Computation-Michael-Sipser-dp-113318779X/dp/113318779X/ref=dp_ob_image_bk?source=post_page-----76a32fe71a37--------------------------------)
    [## 计算理论导论'
- en: Gain a clear understanding of even the most complex, highly theoretical computational
    theory topics in the approachable…
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 即使是最复杂、最具理论性的计算理论主题，也能以易于理解的方式获得清晰的理解……
- en: www.amazon.com](https://www.amazon.com/Introduction-Theory-Computation-Michael-Sipser-dp-113318779X/dp/113318779X/ref=dp_ob_image_bk?source=post_page-----76a32fe71a37--------------------------------)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[www.amazon.com](https://www.amazon.com/Introduction-Theory-Computation-Michael-Sipser-dp-113318779X/dp/113318779X/ref=dp_ob_image_bk?source=post_page-----76a32fe71a37--------------------------------)'
