- en: Resolving Circular Imports in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决 Python 中的循环导入问题
- en: 原文：[https://towardsdatascience.com/resolving-circular-imports-in-python-957db3bfa596?source=collection_archive---------5-----------------------#2024-04-25](https://towardsdatascience.com/resolving-circular-imports-in-python-957db3bfa596?source=collection_archive---------5-----------------------#2024-04-25)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/resolving-circular-imports-in-python-957db3bfa596?source=collection_archive---------5-----------------------#2024-04-25](https://towardsdatascience.com/resolving-circular-imports-in-python-957db3bfa596?source=collection_archive---------5-----------------------#2024-04-25)
- en: PYTHON PROGRAMMING
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PYTHON 编程
- en: Understand and resolve circular imports, a common error occurring when two modules
    import each other simultaneously.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 了解并解决循环导入问题，这是当两个模块相互导入时常见的错误。
- en: '[](https://medium.com/@nyggus?source=post_page---byline--957db3bfa596--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page---byline--957db3bfa596--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--957db3bfa596--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--957db3bfa596--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page---byline--957db3bfa596--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@nyggus?source=post_page---byline--957db3bfa596--------------------------------)[![Marcin
    Kozak](../Images/d7faf62e48ed81dab5d8ad92819fff54.png)](https://medium.com/@nyggus?source=post_page---byline--957db3bfa596--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--957db3bfa596--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--957db3bfa596--------------------------------)
    [Marcin Kozak](https://medium.com/@nyggus?source=post_page---byline--957db3bfa596--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--957db3bfa596--------------------------------)
    ·7 min read·Apr 25, 2024
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--957db3bfa596--------------------------------)
    ·阅读时间 7 分钟·2024年4月25日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/17cfc72a6324bc236ca2020fc41b2bd6.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/17cfc72a6324bc236ca2020fc41b2bd6.png)'
- en: Circular imports lead to a never-ending loop. Photo by [Matt Seymour](https://unsplash.com/@mattseymour?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 循环导入会导致一个永无止境的循环。照片来自[Matt Seymour](https://unsplash.com/@mattseymour?utm_source=medium&utm_medium=referral)在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)上。
- en: Circular imports occur quite often during the development of Python applications
    and packages. The error arises when two modules attempt to import each other simultaneously
    — this creates a loop where neither module can fully load. As a result, this leads
    to an `ImportError` that states, more or less, that you can’t import an object
    from a partially initialized module.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 循环导入在 Python 应用程序和包的开发过程中相当常见。当两个模块尝试同时相互导入时，就会发生这种错误——这会创建一个循环，导致两个模块都无法完全加载。因此，导致的错误是`ImportError`，大致表示无法从部分初始化的模块中导入对象。
- en: Oftentimes, resolving this error is straightforward. Sometimes, however, the
    code needs to be redesigned and refactored — occasionally quite extensively. This
    article aims to support you in this by explaining the methods for resolving the
    error.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个错误通常是直接的。然而，有时代码需要重新设计和重构——有时需要相当广泛的重构。本文旨在通过解释解决该错误的方法来帮助您。
- en: Solutions
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解决方案
- en: We’ll explore methods to resolve circular imports without refactoring the code
    to change its behavior. Sometimes, it’ll suffice to simply redefine the responsibilities
    of your classes so they don’t depend directly on each other. However, this approach
    often won’t be enough. Therefore, we’ll focus on strategies for addressing circular
    imports without changing the behavior of the objects defined in the modules causing
    them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探索在不重构代码以改变其行为的情况下，解决循环导入的方法。有时，只需重新定义类的职责，使其不直接相互依赖即可。但这种方法通常不足以解决问题。因此，我们将重点关注解决循环导入的策略，而不改变导致循环导入的模块中定义的对象的行为。
