- en: 'Dissecting Stockfish Part 3: In-Depth Look at a Chess Engine'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解剖Stockfish 第三部分：深入了解棋类引擎
- en: 原文：[https://towardsdatascience.com/dissecting-stockfish-part-3-in-depth-look-at-a-chess-engine-51b59e532bb4?source=collection_archive---------6-----------------------#2024-07-22](https://towardsdatascience.com/dissecting-stockfish-part-3-in-depth-look-at-a-chess-engine-51b59e532bb4?source=collection_archive---------6-----------------------#2024-07-22)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/dissecting-stockfish-part-3-in-depth-look-at-a-chess-engine-51b59e532bb4?source=collection_archive---------6-----------------------#2024-07-22](https://towardsdatascience.com/dissecting-stockfish-part-3-in-depth-look-at-a-chess-engine-51b59e532bb4?source=collection_archive---------6-----------------------#2024-07-22)
- en: Navigating a chess tree at scale
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大规模浏览棋局树
- en: '[](https://medium.com/@antoine.champion?source=post_page---byline--51b59e532bb4--------------------------------)[![Antoine
    Champion](../Images/dfd05ce8d2081c94e388254731fe7174.png)](https://medium.com/@antoine.champion?source=post_page---byline--51b59e532bb4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--51b59e532bb4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--51b59e532bb4--------------------------------)
    [Antoine Champion](https://medium.com/@antoine.champion?source=post_page---byline--51b59e532bb4--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@antoine.champion?source=post_page---byline--51b59e532bb4--------------------------------)[![Antoine
    Champion](../Images/dfd05ce8d2081c94e388254731fe7174.png)](https://medium.com/@antoine.champion?source=post_page---byline--51b59e532bb4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--51b59e532bb4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--51b59e532bb4--------------------------------)
    [Antoine Champion](https://medium.com/@antoine.champion?source=post_page---byline--51b59e532bb4--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--51b59e532bb4--------------------------------)
    ·5 min read·Jul 22, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--51b59e532bb4--------------------------------)
    ·阅读时间5分钟·2024年7月22日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/e3759642068a88760c83493078f2d5eb.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e3759642068a88760c83493078f2d5eb.png)'
- en: Stockfish Chess Engine, Background photo by [ᴊᴀᴄʜʏᴍ ᴍɪᴄʜᴀʟ](https://unsplash.com/@jachymmichal?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/chess?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Stockfish 棋类引擎，背景照片由[ᴊᴀᴄʜʏᴍ ᴍɪᴄʜᴀʟ](https://unsplash.com/@jachymmichal?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)提供，图片来自[Unsplash](https://unsplash.com/s/photos/chess?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Welcome back to our series on the inner workings of the Stockfish chess engine.
    Our goal is to explain the algorithms and techniques that make Stockfish one of
    the most powerful chess engines in the world. By understanding these mechanisms,
    we can gain deeper insights into the intersection of computer science, artificial
    intelligence, and game theory.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎回到我们关于Stockfish棋类引擎内部运作的系列文章。本系列的目标是解释使Stockfish成为世界上最强大的棋类引擎之一的算法和技术。通过了解这些机制，我们可以深入理解计算机科学、人工智能和博弈论的交汇点。
- en: The previous parts of this series explored how Stockfish finds a playable move
    ([part. 1](https://medium.com/towards-data-science/dissecting-stockfish-part-1-in-depth-look-at-a-chess-engine-7fddd1d83579))
    and evaluates the quality of a position from that move ([part. 2](/dissecting-stockfish-part-2-in-depth-look-at-a-chess-engine-2643cdc35c9a)).
    But how to consider what our opponent can play next? And what would be our possible
    responses?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本系列的前几部分探讨了Stockfish是如何找到一个可行的棋步（[第一部分](https://medium.com/towards-data-science/dissecting-stockfish-part-1-in-depth-look-at-a-chess-engine-7fddd1d83579)）并评估该棋步的局势质量（[第二部分](/dissecting-stockfish-part-2-in-depth-look-at-a-chess-engine-2643cdc35c9a)）。但如何考虑我们的对手接下来可能的棋步呢？我们又该如何回应？
- en: 'To handle this situation, Stockfish relies on one final concept: depth.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了应对这种情况，Stockfish依赖于一个最终概念：深度。
- en: A tree for all moves
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 所有棋步的树
- en: 'The game begins: pawn to e4\. Your opponent responds with e5\. Then Nf3, Nc6,
    and so on. This sequence forms a single branch in the tree of all possible moves.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开始：兵到e4。对手回应e5。然后是Nf3，Nc6，依此类推。这个序列在所有可能的棋步树中形成了一条分支。
- en: Stockfish navigates this tree to determine the best move based on all potential
    outcomes.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Stockfish浏览这个树状结构，以基于所有可能的结果确定最佳棋步。
- en: '![](../Images/16ab623cbace833e3d4b82cb6a350c6a.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/16ab623cbace833e3d4b82cb6a350c6a.png)'
- en: High-level overview — Image by Author
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 高层概述 — 图片由作者提供
- en: The best worst outcome
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最坏的最优结果
- en: 'In game theory, there is a one-fits-all algorithm for turn-based games: the
    **Minimax algorithm**. The crux of it is that, because you cannot predict your
    opponent’s move, you assume they will always choose the best one for themselves.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在博弈论中，有一个适用于回合制游戏的通用算法：**Minimax 算法**。其核心在于，由于无法预测对手的棋步，因此假设对手总是为自己选择最好的棋步。
- en: 'This is illustrated in the diagram below:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示展示了这一点：
- en: '![](../Images/be81af5a92f71021445ee059068626cf.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/be81af5a92f71021445ee059068626cf.png)'
- en: Minimax algorithm for Chess. A positive score means an advantage for white,
    a negative score an advantage for black — Image by Author
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 国际象棋的 Minimax 算法。正分意味着白方占优，负分意味着黑方占优 — 图片由作者提供
- en: For the move *bishop G3*, Stockfish considers all possible responses from the
    opponent.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于*主教到 G3*这一步，Stockfish 会考虑对手的所有可能回应。
- en: Although some moves, like *pawn to A7* or *A6*, yield a positive score, the
    move *rook to E8* results in a disadvantage of -5.6.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管某些棋步，如*兵到 A7*或*A6*，会得到正分，但*车到 E8*的棋步却导致了 -5.6 的不利局面。
- en: This worst-case outcome gives the move *bishop to G3* a score of -5.6, as it
    is assumed the opponent (black player) will find and play their best move.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个最坏的结果使得*主教到 G3*的分数为 -5.6，因为假设对手（黑方）会找到并下出最佳的棋步。
- en: After calculating all moves and responses, Stockfish selects the best option
    for itself (white player), which in this case is *knight to D4*.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算完所有棋步和回应后，Stockfish 为自己（白方）选择了最佳的选项，即*骑士到 D4*。
- en: Although that example illustrated what happens using a single move with the
    opponent’s responses, the Minimax algorithm can be extended recursively up to
    an infinite depth. The limiting factor is computing resources, which leads us
    to the next section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管那个例子展示了如何使用单一棋步及对手的回应，Minimax 算法可以递归地扩展到无限深度。限制因素是计算资源，这也引出了下一部分。
- en: Optimization and tradeoff
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化与权衡
- en: Even though Stockfish can assess millions of moves per second, it still cannot
    evaluate an entire chess position in a reasonable time due to the exponential
    growth of possible moves with each depth level.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Stockfish 每秒可以评估数百万个棋步，但由于每增加一层深度，可能的棋步呈指数级增长，它仍然无法在合理的时间内评估整个棋局。
- en: For example, [Claude Shannon demonstrated](https://en.wikipedia.org/wiki/Shannon_number)
    that to reach a depth of 10 moves from the starting position, one would need to
    evaluate 69 billion positions. Using the Minimax algorithm alone, this would take
    days.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[克劳德·香农证明](https://en.wikipedia.org/wiki/Shannon_number)，要从起始位置达到10步的深度，需要评估690亿个位置。仅使用
    Minimax 算法，这将需要几天时间。
- en: 'Stockfish leverages several improvements to that Minimax algorithm. One such
    improvement is **Alpha-Beta pruning**, which optimizes the traversal of the move
    tree. This is illustrated below:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Stockfish 对 Minimax 算法进行了多项改进。其中之一是**Alpha-Beta 剪枝**，它优化了移动树的遍历。如下图所示：
- en: '![](../Images/30800d0c726948a806121b8fc2cae162.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/30800d0c726948a806121b8fc2cae162.png)'
- en: Alpha-Beta pruning for Chess — Image by Author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 国际象棋中的 Alpha-Beta 剪枝 — 图片由作者提供
- en: Stockfish calculated that the sequence *rook E8 -> knight G4 ->* *bishop G4*
    leads to a disadvantage of -5.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Stockfish 计算得出，序列*车到 E8 -> 骑士到 G4 -> 主教到 G4*将导致 -5 的不利局面。
- en: Another sequence *rook E8 -> bishop C6* has already been explored and led to
    a score of -1, which is better than the branch currently being explored.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一序列*车到 E8 -> 主教到 C6*已经被探索过，并得出了 -1 的分数，这比当前正在探索的分支要好。
- en: 'Therefore, *knight G4* can be discarded in favor of the better option: *bishop
    C6*.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，*骑士到 G4*可以被舍弃，转而选择更好的选项：*主教到 C6*。
- en: 'Additional techniques, such as iterative deepening, further enhance the process:
    when the engine calculates at depth N, it stores the best line of the search,
    so it can explore these moves first when searching at a depth N+1.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 其他技术，如迭代加深，进一步提升了这个过程：当引擎在深度 N 上进行计算时，它会存储搜索的最佳线路，这样在深度 N+1 时，搜索时可以优先探索这些棋步。
- en: 'The resulting, big-picture search algorithm for Stockfish is dense (see [search.cpp](https://github.com/official-stockfish/Stockfish/blob/master/src/search.cpp)),
    and yet utilizes another modern computing technique: multithreading.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Stockfish 的最终大局搜索算法非常复杂（见 [search.cpp](https://github.com/official-stockfish/Stockfish/blob/master/src/search.cpp)），但它利用了另一种现代计算技术：多线程。
- en: Distributed search
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布式搜索
- en: Modern computers can use multiple threads, allowing Stockfish to scale with
    distributed computing power.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现代计算机可以使用多线程，从而使 Stockfish 能够利用分布式计算能力进行扩展。
- en: To do so, Stockfish leverages multiple threads to search for the best move in
    parallel, with each thread communicating through a concurrent memory storage system.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，Stockfish利用多个线程并行搜索最佳走法，每个线程通过并发内存存储系统进行通信。
- en: '![](../Images/cbbe0e8bdfd6d63504325cdb915331fb.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cbbe0e8bdfd6d63504325cdb915331fb.png)'
- en: Parallel computing using a shared dictionary — Image by Author
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用共享字典的并行计算 — 图片由作者提供
- en: The compute threads are searching the tree in parallel.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 计算线程并行搜索树。
- en: When a thread completes a branch, it writes the result to a shared dictionary.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个线程完成一个分支时，它将结果写入共享字典。
- en: When a thread starts a new branch, it checks in that dictionary if any other
    thread already calculated it.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当一个线程开始一个新分支时，它会检查字典中是否有其他线程已经计算过该分支。
- en: 'There is also a main thread that serves as an orchestrator:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个主线程充当协调者：
- en: It stores and launches compute threads from a threadpool.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它从线程池中存储并启动计算线程。
- en: It seeds initial conditions to each compute thread (e.g. ordering offset for
    searching the tree, to increase the search entropy and fill the dictionary faster).
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为每个计算线程提供初始条件（例如，搜索树时的顺序偏移，以增加搜索熵并更快地填充字典）。
- en: It monitors if a thread finished calculating, in which case it halts all the
    compute threads and reads the evaluation results from the dictionary.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它监视线程是否完成计算，若完成，则停止所有计算线程，并从字典中读取评估结果。
- en: Interestingly, the few nanoseconds required by memory locks when accessing a
    “true” concurrent dictionary was too much overhead. Therefore, Stockfish programmers
    developed their own distributed table (see [tt.h](https://github.com/official-stockfish/Stockfish/blob/master/src/tt.h)).
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有趣的是，访问“真正的”并发字典时，内存锁所需的几纳秒会产生过多的开销。因此，Stockfish的程序员开发了自己的分布式表格（参见[tt.h](https://github.com/official-stockfish/Stockfish/blob/master/src/tt.h)）。
- en: Conclusion
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'To summarize:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 总结：
- en: Stockfish generates every candidate move for a given depth.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Stockfish为给定深度生成每一个候选走法。
- en: It evaluates these moves in a tree using various optimizations.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在树中使用各种优化方法评估这些走法。
- en: It increases the evaluation depth, and repeats that process.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它增加了评估深度，并重复这一过程。
- en: Through this series, we’ve uncovered how Stockfish combines classic algorithms
    with modern computing techniques and neural networks to achieve state-of-the-art
    performance.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个系列，我们揭示了Stockfish如何将经典算法与现代计算技术和神经网络结合，实现最先进的性能。
- en: Understanding Stockfish’s inner workings not only demystifies one of the strongest
    chess engines but also offers broader insights into the challenges and solutions
    in computing and AI. Due to its inherent nature, Stockfish focuses primarily on
    efficiency, a theme that is becoming less common in AI as computing power continues
    to increase. Additionally, Stockfish is an example about how to build a complete,
    distributed system out of an AI core.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 理解Stockfish的内部工作原理，不仅能解开这款最强国际象棋引擎之一的神秘面纱，还能为计算和人工智能中的挑战及解决方案提供更广泛的见解。由于其固有特性，Stockfish主要关注效率，这一主题在计算能力不断提升的背景下，已在人工智能领域变得越来越少见。此外，Stockfish还是如何从AI核心构建一个完整的分布式系统的一个范例。
- en: I hope this series has been educational and inspiring. Thank you for reading!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这个系列对你有所启发并具有教育意义。感谢阅读！
- en: For further reading, you can consult the [Chess Programming Wiki](https://www.chessprogramming.org/Main_Page)
    and join the [Computer Chess Club](https://talkchess.com/) forum for discussions
    on chess programming.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 若要进一步阅读，你可以查阅[国际象棋编程百科](https://www.chessprogramming.org/Main_Page)，并加入[计算机国际象棋俱乐部](https://talkchess.com/)论坛，讨论国际象棋编程。
- en: '[https://antoinechampion.com](https://antoinechampion.com/)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://antoinechampion.com](https://antoinechampion.com/)'
