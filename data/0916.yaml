- en: Design an Easy-to-Use Deep Learning Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计一个易于使用的深度学习框架
- en: 原文：[https://towardsdatascience.com/design-an-easy-to-use-deep-learning-framework-52d7c37e415f?source=collection_archive---------6-----------------------#2024-04-10](https://towardsdatascience.com/design-an-easy-to-use-deep-learning-framework-52d7c37e415f?source=collection_archive---------6-----------------------#2024-04-10)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/design-an-easy-to-use-deep-learning-framework-52d7c37e415f?source=collection_archive---------6-----------------------#2024-04-10](https://towardsdatascience.com/design-an-easy-to-use-deep-learning-framework-52d7c37e415f?source=collection_archive---------6-----------------------#2024-04-10)
- en: The three software design principles I learned as an open-source contributor
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为开源贡献者，我学到的三条软件设计原则
- en: '[](https://haifeng-jin.medium.com/?source=post_page---byline--52d7c37e415f--------------------------------)[![Haifeng
    Jin](../Images/705d6ecaed975b6376fac19087f2c02c.png)](https://haifeng-jin.medium.com/?source=post_page---byline--52d7c37e415f--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--52d7c37e415f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--52d7c37e415f--------------------------------)
    [Haifeng Jin](https://haifeng-jin.medium.com/?source=post_page---byline--52d7c37e415f--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://haifeng-jin.medium.com/?source=post_page---byline--52d7c37e415f--------------------------------)[![Haifeng
    Jin](../Images/705d6ecaed975b6376fac19087f2c02c.png)](https://haifeng-jin.medium.com/?source=post_page---byline--52d7c37e415f--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--52d7c37e415f--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--52d7c37e415f--------------------------------)
    [Haifeng Jin](https://haifeng-jin.medium.com/?source=post_page---byline--52d7c37e415f--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--52d7c37e415f--------------------------------)
    ·9 min read·Apr 10, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--52d7c37e415f--------------------------------)
    ·9分钟阅读·2024年4月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f0f2539047f9ad89bd753971d4f517d5.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f0f2539047f9ad89bd753971d4f517d5.png)'
- en: Photo by [Sheldon](https://unsplash.com/@hfestudio?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自[Sheldon](https://unsplash.com/@hfestudio?utm_source=medium&utm_medium=referral)于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Deep learning frameworks are extremely transitory. If you compare the deep learning
    frameworks people use today with what it was eight years ago, you will find the
    landscape is completely different. There were Theano, Caffe2, and MXNet, which
    all went obsolete. Today's most popular frameworks, like TensorFlow and PyTorch,
    were just released to the public.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习框架的变迁非常迅速。如果你将今天人们使用的深度学习框架与八年前的框架进行比较，你会发现整个生态环境已经完全不同。曾经有 Theano、Caffe2
    和 MXNet，它们都已经过时。今天最流行的框架，如 TensorFlow 和 PyTorch，刚刚向公众发布。
- en: Through all these years, Keras has survived as a high-level user-facing library
    supporting different backends, including TensorFlow, PyTorch, and JAX. As a contributor
    to Keras, I learned how much the team cares about user experience for the software
    and how they ensured a good user experience by following a few simple yet powerful
    principles in their design process.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 经过这些年的发展，Keras 作为一个支持不同后端（包括 TensorFlow、PyTorch 和 JAX）的高级用户库得以存活。作为 Keras 的贡献者，我学到了团队是多么重视软件的用户体验，并且他们如何通过遵循一些简单而强大的设计原则，确保了良好的用户体验。
- en: In this article, I will share the 3 most important software design principles
    I learned by contributing to the Keras through the past few years, which may be
    generalizable to all types of software and help you make an impact in the open-source
    community with yours.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将分享过去几年我通过为 Keras 做贡献而学到的三条最重要的软件设计原则，这些原则可能适用于所有类型的软件，并帮助你在开源社区中通过自己的项目产生影响。
- en: Why user experience is important for open-source software
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么用户体验对开源软件很重要
- en: Before we dive into the main content, let’s quickly discuss why user experience
    is so important. We can learn this through the PyTorch vs. TensorFlow case.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入讨论主要内容之前，让我们快速讨论一下为什么用户体验如此重要。我们可以通过 PyTorch 与 TensorFlow 的案例来了解这一点。
- en: They were developed by two tech giants, Meta and Google, and have quite different
    cultural strengths. Meta is good at product, while Google is good at engineering.
    As a result, Google’s frameworks like TensorFlow and JAX are the fastest to run
    and technically superior to PyTorch, as they support sparse tensors and distributed
    training well. However, PyTorch still took away half of the market share from
    TensorFlow because it prioritizes user experience over other aspects of the software.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些框架由两家科技巨头Meta和Google开发，它们具有截然不同的文化优势。Meta擅长产品，而Google擅长工程。因此，Google的框架如TensorFlow和JAX运行速度最快，技术上也优于PyTorch，因为它们在稀疏张量和分布式训练方面做得很好。然而，PyTorch仍然从TensorFlow手中夺走了半壁江山，因为它优先考虑用户体验，而不是软件的其他方面。
- en: Better user experience wins for the research scientists who build the models
    and propagate them to the engineers, who take models from them since they don’t
    always want to convert the models they receive from the research scientists to
    another framework. They will build new software around PyTorch to smooth their
    workflow, which will establish a software ecosystem around PyTorch.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的用户体验对于构建模型并将其传播给工程师的研究人员来说至关重要，因为工程师们不总是愿意将他们从研究人员那里获得的模型转换为另一个框架。他们会围绕PyTorch构建新的软件，以简化他们的工作流程，这样就会在PyTorch周围建立一个软件生态系统。
- en: TensorFlow also made a few blunders that caused its users to lose. TensorFlow’s
    general user experience is good. However, its installation guide for GPU support
    was broken for years before it was fixed in 2022\. TensorFlow 2 broke the backward
    compatibility, which cost its users millions of dollars to migrate.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow也犯了一些错误，导致其用户流失。TensorFlow的整体用户体验良好。然而，其GPU支持的安装指南多年来一直存在问题，直到2022年才得以修复。TensorFlow
    2破坏了向后兼容性，导致用户在迁移过程中损失了数百万美元。
- en: So, the lesson we learned here is that despite technical superiority, user experience
    decides which software the open-source users would choose.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们从这里学到的教训是，尽管技术上具有优势，用户体验决定了开源用户会选择哪款软件。
- en: All deep learning frameworks invest heavily in user experience
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 所有深度学习框架都在用户体验上投入了大量资金
- en: All the deep learning frameworks—TensorFlow, PyTorch, and JAX—invest heavily
    in user experience. Good evidence is that they all have a relatively high Python
    percentage in their codebases.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 所有深度学习框架——TensorFlow、PyTorch和JAX——都在用户体验上投入了大量资金。一个很好的证据是，它们的代码库中Python的比例相对较高。
- en: All the core logic of deep learning frameworks, including tensor operations,
    automatic differentiation, compilation, and distribution are implemented in C++.
    Why would they want to expose a set of Python APIs to the users? It is just because
    the users love Python and they want to polish their user experience.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 深度学习框架的所有核心逻辑，包括张量操作、自动微分、编译和分布式处理，都是用C++实现的。为什么他们要向用户暴露一套Python API？这仅仅是因为用户喜欢Python，并且他们想要打磨用户体验。
- en: Investing in user experience is of high ROI
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 投资用户体验的回报率很高
- en: Imagine how much engineering effort it requires to make your deep learning framework
    a little bit faster than others. A lot.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，要让你的深度学习框架比其他框架稍微快一些需要多少工程努力。很多。
- en: However, for a better user experience, as long as you follow a certain design
    process and some principles, you can achieve it. For attracting more users, your
    user experience is as important as the computing efficiency of your framework.
    So, investing in user experience is of high return on investment (ROI).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了更好的用户体验，只要你遵循一定的设计过程和一些原则，就能够实现这一目标。为了吸引更多用户，用户体验和框架的计算效率同样重要。因此，投资用户体验的回报率很高。
- en: The three principles
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这三条原则
- en: I will share the three important software design principles I learned by contributing
    to Keras, each with good and bad code examples from different frameworks.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我将分享我在为Keras贡献代码过程中学到的三条重要软件设计原则，并附上来自不同框架的好坏代码示例。
- en: 'Principle 1: Design end-to-end workflows'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原则 1：设计端到端工作流
- en: When we think of designing the APIs of a piece of software, you may look like
    this.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们考虑设计一款软件的API时，可能会像这样。
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Define the class and add the documentation. Now, we know all the class names,
    method names, and arguments. However, this would not help us understand much about
    the user experience.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 定义类并添加文档。现在，我们知道了所有的类名、方法名和参数。然而，这并不能帮助我们更好地理解用户体验。
- en: What we should do is something like this.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该做的是类似这样的事情。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We want to write out the entire user workflow of using the software. Ideally,
    it should be a tutorial on how to use the software. It provides much more information
    about the user experience. It may help us spot many more UX problems during the
    design phase compared with just writing out the class and methods.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望写出整个用户使用软件的工作流。理想情况下，它应该是一个关于如何使用软件的教程。它提供了关于用户体验的更多信息。与仅仅写出类和方法相比，它可以帮助我们在设计阶段发现更多的用户体验问题。
- en: Let’s look at another example. This is how I discovered a user experience problem
    by following this principle when implementing KerasTuner.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子。这就是我在实现 KerasTuner 时，通过遵循这一原则发现用户体验问题的方式。
- en: When using KerasTuner, users can use this RandomSearch class to select the best
    model. We have the metrics, and objectives in the arguments. By default, objective
    equals validation loss. So, it helps us find the model with the smallest validation
    loss.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 KerasTuner 时，用户可以使用这个 `RandomSearch` 类来选择最佳模型。我们有度量和目标作为参数。默认情况下，目标等于验证损失。因此，它帮助我们找到具有最小验证损失的模型。
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Again, it doesn’t provide much information about the user experience. So, everything
    looks OK for now.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，它并没有提供太多关于用户体验的信息。所以，现在一切看起来都没问题。
- en: However, if we write an end-to-end workflow like the following. It exposes many
    more problems. The user is trying to define a custom metric function named custom_metric.
    The objective is not so straightforward to use anymore. What should we pass to
    the objective argument now?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们编写一个端到端的工作流，如下所示，它暴露了更多问题。用户试图定义一个名为 `custom_metric` 的自定义度量函数。目标变得不再那么直观。我们现在应该传递什么给目标参数呢？
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It should be just `"val_custom_metric”`. Just use the prefix of `"val_"` and
    the name of the metric function. It is not intuitive enough. We want to make it
    better instead of forcing the user to learn this. We easily spotted a user experience
    problem by writing this workflow.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该只是`"val_custom_metric"`。只需使用前缀`"val_"`和度量函数的名称。这样并不够直观。我们希望改进它，而不是强迫用户学习这个。通过编写这个工作流，我们很容易发现了一个用户体验问题。
- en: If you wrote the design more comprehensively by including the implementation
    of the `custom_metric` function, you will find you even need to learn how to write
    a Keras custom metric. You have to follow the function signature to make it work,
    as shown in the following code snippet.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你通过包含 `custom_metric` 函数的实现来更加全面地编写设计，你会发现你甚至需要学习如何编写 Keras 自定义度量。你必须遵循函数签名才能使其工作，如下面的代码片段所示。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After discovering this problem. We specially designed a better workflow for
    custom metrics. You only need to override `HyperModel.fit()` to compute your custom
    metric and return it. No strings to name the objective. No function signature
    to follow. Just a return value. The user experience is much better right now.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 发现这个问题后，我们特别设计了一个更好的自定义度量工作流。你只需要重写`HyperModel.fit()`来计算自定义度量并返回它。不需要用字符串来命名目标。也不需要遵循函数签名。只需一个返回值。现在的用户体验要好得多。
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: One more thing to remember is we should always start from the user experience.
    The designed workflows backpropagate to the implementation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一点需要记住的是，我们应该始终从用户体验开始。设计的工作流会反向影响实现。
- en: 'Principle 2: Minimize cognitive load'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原则 2：最小化认知负担
- en: Do not force the user to learn anything unless it is really necessary. Let’s
    see some good examples.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除非真的必要，否则不要强迫用户学习任何东西。让我们看看一些好的例子。
- en: The Keras modeling API is a good example shown in the following code snippet.
    The model builders already have these concepts in mind, for example, a model is
    a stack of layers. It needs a loss function. We can fit it with data or make it
    predict on data.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Keras 模型构建 API 是一个好的例子，如下面的代码片段所示。模型构建者已经掌握了这些概念，例如，模型是一个层的堆叠。它需要一个损失函数。我们可以用数据来拟合它，或者让它对数据进行预测。
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: So basically, no new concepts were learned to use Keras.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以基本上，使用 Keras 并不需要学习新的概念。
- en: Another good example is the PyTorch modeling. The code is executed just like
    Python code. All tensors are just real tensors with real values. You can depend
    on the value of a tensor to decide your path with plain Python code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个好的例子是 PyTorch 模型构建。代码就像 Python 代码一样执行。所有张量都是真正的张量，具有实际值。你可以依赖一个张量的值来决定路径，用纯
    Python 代码实现。
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can also do this with Keras with TensorFlow or JAX backend but needs to
    be written differently. All the `if` conditions need to be written with this `ops.cond`
    function as shown in the following code snippet.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 Keras 和 TensorFlow 或 JAX 后端来做这件事，但需要以不同的方式编写。所有的 `if` 条件需要通过这个 `ops.cond`
    函数来编写，如下面的代码片段所示。
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This is teaching the user to learn a new op instead of using the if-else clause
    they are familiar with, which is bad. In compensation, it brings significant improvement
    in training speed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这教会用户学习一种新的操作，而不是使用他们熟悉的if-else语句，这样做并不好。作为补偿，它在训练速度上带来了显著的提升。
- en: Here is the catch of the flexibility of PyTorch. If you ever needed to optimize
    the memory and speed of your model, you would have to do it by yourself using
    the following APIs and new concepts to do so, including the inplace arguments
    for the ops, the parallel op APIs, and explicit device placement. It introduces
    a rather high learning curve for the users.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是PyTorch灵活性的陷阱。如果你曾经需要优化模型的内存和速度，你将不得不自己使用以下API和新概念来实现，包括操作的inplace参数、并行操作API和显式设备分配。这为用户引入了相当高的学习曲线。
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Some other good examples are `keras.ops`, `tensorflow.numpy`, `jax.numpy`. They
    are just a reimplementation of the numpy API. When introducing some cognitive
    load, just reuse what people already know. Every framework has to provide some
    low-level ops in these frameworks. Instead of letting people learn a new set of
    APIs, which may have a hundred functions, they just use the most popular existing
    API for it. The numpy APIs are well-documented and have tons of Stack Overflow
    questions and answers related to it.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 其他一些好的例子包括`keras.ops`、`tensorflow.numpy`、`jax.numpy`。它们只是numpy API的重新实现。当引入一定的认知负担时，只需重用人们已经熟悉的内容。每个框架都必须在这些框架中提供一些低级操作。与其让人们学习一套全新的API（可能有上百个函数），不如直接使用最流行的现有API。numpy的API文档详尽，并且有大量相关的Stack
    Overflow问题和答案。
- en: The worst thing you can do with user experience is to trick the users. Trick
    the user to believe your API is something they are familiar with but it is not.
    I will give two examples. One is on PyTorch. The other one is on TensorFlow.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你在用户体验中能做的最糟糕的事情就是欺骗用户。让用户相信你的API是他们熟悉的，但实际上不是。我将给出两个例子，一个是PyTorch的，另一个是TensorFlow的。
- en: What should we pass as the pad argument in `F.pad()` function if you want to
    pad the input tensor of the shape `(100, 3, 32, 32)` to `(100, 3, 1+32+1, 2+32+2)`
    or `(100, 3, 34, 36)`?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将形状为`(100, 3, 32, 32)`的输入张量填充到`(100, 3, 1+32+1, 2+32+2)`或`(100, 3, 34, 36)`，那么在`F.pad()`函数中应该传递什么作为pad参数？
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: My first intuition is that it should be `((0, 0), (0, 0), (1, 1), (2, 2))`,
    where each sub-tuple corresponds to one of the 4 dimensions, and the two numbers
    are the padding size before and after the existing values. My guess is originated
    from the numpy API.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我的第一直觉是它应该是`((0, 0), (0, 0), (1, 1), (2, 2))`，其中每个子元组对应四个维度中的一个，两个数字是现有值之前和之后的填充值。我的猜测来源于numpy
    API。
- en: However, the correct answer is (2, 2, 1, 1). There is no sub-tuple, but one
    plain tuple. Moreover, the dimensions are reversed. The last dimension goes the
    first.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，正确的答案是(2, 2, 1, 1)。没有子元组，只有一个普通的元组。此外，维度是反转的，最后一个维度变成了第一个。
- en: The following is a bad example from TensorFlow. Can you guess what is the output
    of the following code snippet?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是TensorFlow的一个坏例子。你能猜出以下代码片段的输出是什么吗？
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Without the `tf.function` decorator, the output should be False, which is pretty
    simple. However, with the decorator, the output is True. This is because TensorFlow
    compiles the function and any Python variable is compiled into a new constant.
    Changing the old variable’s value would not affect the created constant.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有`tf.function`装饰器，输出应该是False，这个很简单。然而，使用了装饰器后，输出变为True。这是因为TensorFlow会编译函数，任何Python变量都会被编译成一个新的常量。修改旧变量的值不会影响已创建的常量。
- en: It tricks the user into believing it is the Python code they are familiar with,
    but actually, it is not.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 它让用户相信这是他们熟悉的Python代码，但实际上并不是。
- en: 'Principle 3: Interaction over documentation'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原则3：互动优于文档
- en: No one likes to read long documentation if they can figure it out just by running
    some example code and tweaking it by themselves. So, we try to make the user workflow
    of the software follow the same logic.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户能通过运行一些示例代码并自己调试就能搞明白问题，那么没有人愿意阅读冗长的文档。所以，我们尽量让软件的用户工作流遵循相同的逻辑。
- en: Here is a good example shown in the following code snippet. In PyTorch, all
    methods with the underscore are inplace ops, while the ones without are not. From
    an interactive perspective, these are good, because they are easy to follow, and
    the users do not need to check the docs whenever they want the inplace version
    of a method. However, of course, they introduced some cognitive load. The users
    need to know what does inplace means and when to use them.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个很好的例子，展示在下面的代码片段中。在 PyTorch 中，所有带有下划线的方法都是原地操作（inplace ops），而没有下划线的是非原地操作。从交互的角度来看，这样做很好，因为它们容易跟随，用户在需要使用方法的原地版本时无需查阅文档。然而，当然，这也带来了一些认知负担。用户需要知道什么是原地操作，以及何时使用它们。
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Another good example is the Keras layers. They strictly follow the same naming
    convention as shown in the following code snippet. With a clear naming convention,
    the users can easily remember the layer names without checking the documentation.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个好例子是 Keras 层。它们严格遵循相同的命名约定，正如下面的代码片段所示。通过清晰的命名约定，用户可以轻松记住层的名称，而无需查阅文档。
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Another important part of the interaction between the user and the software
    is the error message. You cannot expect the user to write everything correctly
    the very first time. We should always do the necessary checks in the code and
    try to print helpful error messages.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 用户与软件之间的交互中，另一个重要的部分就是错误信息。你不能指望用户第一次就能完全正确地编写代码。我们应该在代码中进行必要的检查，并尽量输出有用的错误信息。
- en: Let’s see the following two examples shown in the code snippet. The first one
    has not much information. It just says tensor shape mismatch. The
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下代码片段中的两个例子。第一个例子信息不多，只是简单地说了张量形状不匹配。
- en: second one contains much more useful information for the user to find the bug.
    It not only tells you the error is because of tensor shape mismatch, but it also
    shows what is the expected shape and what is the wrong shape it received. If you
    did not mean to pass that shape, you have a better idea
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个例子则包含了更多有用的信息，帮助用户找到 bug。它不仅告诉你错误是由于张量形状不匹配，还显示了期望的形状以及收到的错误形状。如果你并不打算传递这个形状，你就能更清楚地知道问题所在。
- en: of the bug now.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在的 bug。
- en: '[PRE14]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The best error message would be directly pointing the user to the fix. The following
    code snippet shows a general Python error message. It guessed what was wrong with
    the code and directly pointed the user to the fix.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的错误信息应该是直接指引用户如何修复问题。下面的代码片段展示了一个典型的 Python 错误信息。它猜测了代码中的问题，并直接指向了修复方法。
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Final words
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最后总结
- en: So far we have introduced the three most valuable software design principles
    I have learned when contributing to the deep learning frameworks. First, write
    end-to-end workflows to discover more user experience problems. Second, reduce
    cognitive load and do not teach the user anything unless necessary. Third, follow
    the same logic in your API design and throw meaningful error messages so that
    the users can learn your software by interacting with it instead of constantly
    checking the documentation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经介绍了我在为深度学习框架贡献时学到的三条最有价值的软件设计原则。首先，编写端到端工作流程以发现更多用户体验问题。其次，减少认知负担，除非必要，否则不要教给用户任何东西。第三，在
    API 设计中遵循相同的逻辑，抛出有意义的错误信息，让用户通过与软件的交互来学习，而不是不断查阅文档。
- en: However, there are many more principles to follow if you want to make your software
    even better. You can refer to the [Keras API design guidelines](https://github.com/keras-team/governance/blob/24401c1addf521e522fd363f6eb40e7c4c4881d5/keras_api_design_guidelines.md)
    as a complete API design guide.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你想让你的软件更好，还有许多原则需要遵循。你可以参考 [Keras API 设计指南](https://github.com/keras-team/governance/blob/24401c1addf521e522fd363f6eb40e7c4c4881d5/keras_api_design_guidelines.md)
    作为完整的 API 设计指南。
