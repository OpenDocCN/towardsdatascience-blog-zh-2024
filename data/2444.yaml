- en: Using Linear Equations + LLM to Solve LinkedIn Queens Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用线性方程 + LLM 来解决 LinkedIn 皇后游戏
- en: 原文：[https://towardsdatascience.com/using-linear-equations-llm-to-solve-linkedin-queens-game-fe9802d997e9?source=collection_archive---------5-----------------------#2024-10-07](https://towardsdatascience.com/using-linear-equations-llm-to-solve-linkedin-queens-game-fe9802d997e9?source=collection_archive---------5-----------------------#2024-10-07)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/using-linear-equations-llm-to-solve-linkedin-queens-game-fe9802d997e9?source=collection_archive---------5-----------------------#2024-10-07](https://towardsdatascience.com/using-linear-equations-llm-to-solve-linkedin-queens-game-fe9802d997e9?source=collection_archive---------5-----------------------#2024-10-07)
- en: '![](../Images/ad35481c77af475538a173dca31d3d3f.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ad35481c77af475538a173dca31d3d3f.png)'
- en: Queens (generated using Canva)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 皇后（使用 Canva 生成）
- en: Prompting GPT to form and solve the linear equations using PuLP
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提示 GPT 生成并解决使用 PuLP 的线性方程
- en: '[](https://memsranga.com/?source=post_page---byline--fe9802d997e9--------------------------------)[![Shanmukha
    Ranganath](../Images/b362e4a5eb87077e889cb1db702955b3.png)](https://memsranga.com/?source=post_page---byline--fe9802d997e9--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fe9802d997e9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fe9802d997e9--------------------------------)
    [Shanmukha Ranganath](https://memsranga.com/?source=post_page---byline--fe9802d997e9--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://memsranga.com/?source=post_page---byline--fe9802d997e9--------------------------------)[![Shanmukha
    Ranganath](../Images/b362e4a5eb87077e889cb1db702955b3.png)](https://memsranga.com/?source=post_page---byline--fe9802d997e9--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fe9802d997e9--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fe9802d997e9--------------------------------)
    [Shanmukha Ranganath](https://memsranga.com/?source=post_page---byline--fe9802d997e9--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--fe9802d997e9--------------------------------)
    ·11 min read·Oct 7, 2024
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--fe9802d997e9--------------------------------)
    ·阅读时间11分钟·2024年10月7日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: In my [How I Solved LinkedIn Queens Game](https://medium.com/towards-data-science/solving-linkedin-queens-game-cfeea7a26e86)
    article, I’ve discussed solving the LinkedIn Queens game using backtracking, a
    hit-and-trail method. It places a `Queen` on one of the cells of the grid and
    continues to do so, respecting all the constraints until it can’t anymore. At
    this point, it rolls back the last placed`Queen` and keeps repeating this process
    until it finds a solution or exhausts all the cells on the grid. Since LinkedIn
    guarantees there will always be a solution, our backtracking method is perfect
    and will always be successful. However, its time complexity is of `O(n²)` but
    is still solved in less than 0.1 seconds because the max grids (as far as I have
    played) are only 10x10.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的[《我如何解决 LinkedIn 皇后游戏》](https://medium.com/towards-data-science/solving-linkedin-queens-game-cfeea7a26e86)文章中，我讨论了使用回溯法解决
    LinkedIn 皇后游戏的问题，这是一种试探法。它将一个`Queen`放置在网格的某个单元格中，并继续按照约束条件放置，直到无法继续为止。这时，它会回滚上一个放置的`Queen`，并不断重复这一过程，直到找到解答或遍历完网格中的所有单元格。由于
    LinkedIn 保证总是存在解，我们的回溯方法是完美的，必定能成功。然而，它的时间复杂度为`O(n²)`，但仍能在不到0.1秒的时间内解决，因为截至目前我玩过的最大网格只有
    10x10。
- en: '[](/solving-linkedin-queens-game-cfeea7a26e86?source=post_page-----fe9802d997e9--------------------------------)
    [## How I Solved LinkedIn Queens Game Using Backtracking'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/solving-linkedin-queens-game-cfeea7a26e86?source=post_page-----fe9802d997e9--------------------------------)
    [## 我如何使用回溯法解决 LinkedIn 皇后游戏'
- en: Using OpenCV to auto-detect puzzle and redraw the final answer
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 OpenCV 自动检测谜题并重新绘制最终答案
- en: towardsdatascience.com](/solving-linkedin-queens-game-cfeea7a26e86?source=post_page-----fe9802d997e9--------------------------------)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/solving-linkedin-queens-game-cfeea7a26e86?source=post_page-----fe9802d997e9--------------------------------)
- en: Even though backtracking is performing well in terms of time complexity and
    implementation, let’s take it a step further and try to solve it even better.
    Did you know all the constraints of the game can be translated into a set of linear
    equations? When we solve those…
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管回溯法在时间复杂度和实现上表现良好，但我们可以更进一步，尝试寻找更好的解决方法。你知道吗，游戏中的所有约束条件都可以转化为一组线性方程？当我们解决这些方程时……
