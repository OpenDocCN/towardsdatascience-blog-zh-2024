- en: 'PyTorch Tabular: A Review'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch Tabular：一项评测
- en: 原文：[https://towardsdatascience.com/pytorch-tabular-a-review-b99abc663dbe?source=collection_archive---------6-----------------------#2024-07-16](https://towardsdatascience.com/pytorch-tabular-a-review-b99abc663dbe?source=collection_archive---------6-----------------------#2024-07-16)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/pytorch-tabular-a-review-b99abc663dbe?source=collection_archive---------6-----------------------#2024-07-16](https://towardsdatascience.com/pytorch-tabular-a-review-b99abc663dbe?source=collection_archive---------6-----------------------#2024-07-16)
- en: An overview for getting up and running quickly and avoiding confusion
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速上手并避免混淆的概览
- en: '[](https://medium.com/@s.kirmer?source=post_page---byline--b99abc663dbe--------------------------------)[![Stephanie
    Kirmer](../Images/f9d9ef9167febde974c223dd4d8d6293.png)](https://medium.com/@s.kirmer?source=post_page---byline--b99abc663dbe--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b99abc663dbe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b99abc663dbe--------------------------------)
    [Stephanie Kirmer](https://medium.com/@s.kirmer?source=post_page---byline--b99abc663dbe--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@s.kirmer?source=post_page---byline--b99abc663dbe--------------------------------)[![Stephanie
    Kirmer](../Images/f9d9ef9167febde974c223dd4d8d6293.png)](https://medium.com/@s.kirmer?source=post_page---byline--b99abc663dbe--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b99abc663dbe--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b99abc663dbe--------------------------------)
    [Stephanie Kirmer](https://medium.com/@s.kirmer?source=post_page---byline--b99abc663dbe--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b99abc663dbe--------------------------------)
    ·7 min read·Jul 16, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b99abc663dbe--------------------------------)
    ·阅读时间：7分钟·2024年7月16日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/c5c6675af28ac52feb539471f8608a15.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c5c6675af28ac52feb539471f8608a15.png)'
- en: Photo by [Pao Dayag](https://unsplash.com/@wisdomsky?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 摄影：由[Pao Dayag](https://unsplash.com/@wisdomsky?utm_source=medium&utm_medium=referral)拍摄，发布于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: From time to time, we all find ourselves considering whether to try out new
    tooling or experiment with a package, and there’s some risk involved in that.
    What if the tool doesn’t accomplish what I need, or takes days to get running,
    or requires complex knowledge I don’t have? Today I’m sharing a simple review
    of my own experience getting a model up and running using PyTorch Tabular, with
    code examples that should help other users considering it to get going quickly
    with a minimum of fuss.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们时常会考虑是否尝试新的工具或实验一个包，然而这样做也存在一定的风险。如果工具无法完成我的需求，或者需要几天才能运行，或者需要我没有的复杂知识该怎么办？今天，我将分享自己使用PyTorch
    Tabular搭建模型并成功运行的经验，并提供代码示例，帮助其他考虑使用这个工具的用户，快速开始并避免不必要的麻烦。
- en: This project began with a pretty high dimensionality CatBoost model, a supervised
    learning use case with multi-class classification outcome. The dataset has about
    30 highly imbalanced classes, which I’ll describe in more detail in a future post.
    I wanted to try applying a neural network to the same use case, to see what changes
    in performance I might have, and I came across PyTorch Tabular as a good option.
    There are of course other alternatives for applying NNs to tabular data, including
    using base PyTorch yourself, but having a layer on top designed to accommodate
    your specific problem case often makes things easier and quicker for development.
    PyTorch Tabular keeps you from having to think about things like how to convert
    your dataframe to tensors, and gives you a straightforward access point to model
    customizations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目最初是基于一个高维度的CatBoost模型，这是一个具有多类分类结果的监督学习用例。数据集大约有30个高度不平衡的类别，我将在未来的文章中详细描述。我想尝试将神经网络应用于相同的用例，看看性能上会有哪些变化，于是我发现PyTorch
    Tabular是一个不错的选择。当然，应用神经网络到表格数据上还有其他的选择，包括直接使用基础的PyTorch，但在此基础上添加一个专门设计以适应特定问题的层，通常能让开发更加容易和快速。PyTorch
    Tabular让你不用去考虑如何将数据框转换为张量，并提供了一个简单的接口，方便进行模型自定义。
- en: Getting Started
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门指南
- en: The documentation at [https://pytorch-tabular.readthedocs.io/en/latest/](https://pytorch-tabular.readthedocs.io/en/latest/)
    is pretty easy to read and get into, although the main page points you to the
    development version of the docs, so keep that in mind if you have installed from
    pypi.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pytorch-tabular.readthedocs.io/en/latest/](https://pytorch-tabular.readthedocs.io/en/latest/)上的文档非常易读且易于理解，尽管主页会引导你到文档的开发版本，因此如果你是从pypi安装的，请记得这一点。'
- en: I use poetry to manage my working environments and libraries, and poetry and
    PyTorch are known to not get along great all the time, so that’s also a consideration.
    It definitely took me a few hours to get everything installed and working smoothly,
    but that’s not the fault of the PyTorch Tabular developers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用poetry来管理我的工作环境和库，而poetry和PyTorch有时并不完全兼容，所以这是需要考虑的一点。的确，我花了几个小时才将所有东西安装并顺利运行，但这并不是PyTorch
    Tabular开发者的错。
- en: As you may have guessed, this is all optimized for tabular data, so I am bringing
    my engineered features dataset in pandas format. As you’ll see later on, I can
    just dump dataframes directly into the training function with no need to reformat,
    provided my fields are all numeric or boolean.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所猜测的，这一切都是针对表格数据进行优化的，因此我将我的工程化特征数据集以pandas格式带入。正如你稍后将看到的，只要我的字段是数字型或布尔型，我可以直接将数据帧传递到训练函数中，无需重新格式化。
- en: Setup
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'When you begin structuring your code, you’ll be creating several objects that
    the PyTorch Tabular training function requires:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始构建代码时，你将创建一些PyTorch Tabular训练函数所需的对象：
- en: '**DataConfig**: prepares the dataloader, including setting up your parallelism
    for loading.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DataConfig**：准备数据加载器，包括设置加载的并行性。'
- en: '**TrainerConfig**: sets batch sizes and epoch numbers, and also lets you determine
    what processor you’ll use, if you do/don’t want to be on GPU for example.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TrainerConfig**：设置批次大小和周期数，还可以让你确定将使用哪个处理器，比如是否使用GPU。'
- en: '**OptimizerConfig**: Allows you to add whatever optimizer you might like, and
    also a learning rate scheduler, and parameter assignments for each. I didn’t end
    up customizing this for my use case, it [defaults to](https://pytorch-tabular.readthedocs.io/en/latest/tutorials/02-Exploring%20Advanced%20Features%20with%20PyTorch%20Tabular/#3-optimizerconfig)
    `Adam` .'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OptimizerConfig**：允许你添加任何你喜欢的优化器，还可以设置学习率调度器，以及每个优化器的参数。我没有为我的使用场景自定义这一部分，它[默认为](https://pytorch-tabular.readthedocs.io/en/latest/tutorials/02-Exploring%20Advanced%20Features%20with%20PyTorch%20Tabular/#3-optimizerconfig)
    `Adam`。'
- en: '**LinearHeadConfig**: lets you create the model head if you want to customize
    that, I didn’t need to add anything special here.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LinearHeadConfig**：如果你想自定义模型头部，它可以让你创建模型头部。我在这里不需要添加任何特别的内容。'
- en: Then you’ll also create a model config, but the base class will differ depending
    on what kind of model you intend to make. I used the basic CategoryEmbeddingModelConfig
    for mine, and this is where you’ll assign all the model architecture items such
    as layer sizes and order, activation function, learning rate, and metrics.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后你还需要创建一个模型配置，但基础类会根据你打算创建的模型类型而有所不同。我为我的模型使用了基本的CategoryEmbeddingModelConfig，这里是你将分配所有模型架构项的地方，例如层大小、顺序、激活函数、学习率和指标。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Metrics were a little confusing to assign in this section, so I’ll stop and
    briefly explain. I wanted several different metrics to be visible during training,
    and in this framework that requires passing several lists for different arguments.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，指标的设置有些困惑，因此我会暂停并简要解释一下。我希望在训练过程中能看到几种不同的指标，在这个框架中，这需要为不同的参数传递几个列表。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here you can see that I’m returning four metrics, and they each have different
    implementation requirements, so each list represents the same four metrics and
    their attributes. For example, average precision needs parameters that indicate
    that this is a multiclass problem, and it needs to be fed the number of classes
    involved. It also calls for a probability result instead of raw model outputs,
    unlike accuracy.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你可以看到我返回了四个指标，每个指标有不同的实现要求，因此每个列表表示这四个指标及其属性。例如，平均精度需要一些参数来指示这是一个多类问题，并且需要提供涉及的类别数量。与准确率不同，它还要求输入概率结果，而不是原始模型输出。
- en: Once you’ve gotten all of this specified, things are pretty easy- you just pass
    each object into the TabularModel module.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了所有这些配置，事情就变得非常简单——你只需要将每个对象传递到TabularModel模块中。
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And you’re ready to train!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以开始训练了！
- en: Training
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 训练
- en: It’s quite easy to set up training once you have train, test, and validation
    sets created.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了训练集、测试集和验证集，设置训练是非常简单的。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Training with verbosity on will show you a nice progress bar and keep you informed
    as to what batch and epoch you’re on. It may tell you, if you’re not using parallelism
    in your data loader, that there is a data loading bottleneck that you could improve
    by adding more workers — it’s up to you whether this is of interest, but because
    my inference job will have a very sparse environment I opted to not have parallelism
    in my data loader.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 启用详细模式进行训练时，会显示一个进度条并告知你当前的批次和迭代次数。如果你没有在数据加载器中使用并行处理，它可能会告诉你存在数据加载瓶颈，可以通过增加更多的工作线程来改善——是否关注这个问题取决于你，但由于我的推理任务将在一个非常稀疏的环境中运行，我选择不在数据加载器中使用并行处理。
- en: Once the training is complete, you can save the model in two different ways
    — one is as a PyTorch Tabular output, so usable for loading to fine tune or to
    use for inference in an environment where PyTorch Tabular is available. The other
    is as an inference-only version, such as a base PyTorch model, which I found very
    valuable because I needed to use the model object in a much more bare-bones environment
    for production.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 训练完成后，你可以通过两种不同的方式保存模型——一种是作为 PyTorch Tabular 输出，便于加载进行微调或在 PyTorch Tabular
    可用的环境中进行推理。另一种是作为仅用于推理的版本，例如一个基础的 PyTorch 模型，这对我来说非常有价值，因为我需要在一个更加简单的生产环境中使用模型对象。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are some other options available for the `save_model_for_inference` method
    that you can read about in the docs. Note also that the PyTorch Tabular model
    object can’t be transferred from CPU to GPU or vice versa on load- you’re going
    to have to stay on the same compute you used for training, unless you save your
    model as a PyTorch model object.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`save_model_for_inference` 方法还有一些其他选项，你可以在文档中阅读相关内容。还要注意，PyTorch Tabular 模型对象在加载时无法从
    CPU 转移到 GPU 或反之——你必须保持在用于训练的相同计算资源上，除非你将模型保存为 PyTorch 模型对象。'
- en: Inference
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 推理
- en: Reloading the model for inference processes later I found really required having
    both of these objects saved, however, because the PyTorch Tabular model outputs
    a file called `datamodule.sav` which is necessary to consistently format your
    inference data before passing to the model. You could probably put together a
    pipeline of your own to feed into the model, but I found that to be a much more
    tedious prospect than just using the file as directed by the documentation. (Note,
    also, that this file can be rather large- mine turned out over 100mb, and I opted
    to store it separately rather than just place it with the rest of the code for
    deployment.)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以后进行推理过程时重新加载模型，我发现确实需要保存这两个对象。然而，由于 PyTorch Tabular 模型会输出一个名为 `datamodule.sav`
    的文件，这是在将数据传递给模型之前，始终如一地格式化推理数据所必需的。你可能自己搭建一个管道来输入数据，但我发现这比按照文档指示使用该文件要麻烦得多。（另外注意，这个文件可能会相当大——我的文件超过了
    100MB，因此我选择将其单独存储，而不是与其他代码一起放在部署目录下。）
- en: In PyTorch Tabular there are built in helpers for inference, but I found that
    getting my multi-class predictions out with the appropriate labels and in a cleanly
    useful format required pulling out some of the helper code and rewriting it in
    my own codebase. For non-multiclass applications, this might not be necessary,
    but if you do end up going that way, [this is the script I adapted from](https://github.com/manujosephv/pytorch_tabular/blob/main/src/pytorch_tabular/tabular_model.py#L1226).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PyTorch Tabular 中，有内置的推理帮助工具，但我发现要以适当的标签和干净有用的格式输出我的多类别预测，仍然需要提取一些帮助代码并在我的代码库中重新编写。对于非多类别应用，这可能不是必需的，但如果你最终走这条路，[这是我从中改编的脚本](https://github.com/manujosephv/pytorch_tabular/blob/main/src/pytorch_tabular/tabular_model.py#L1226)。
- en: This is how the inference process then looks in code, with feature engineering
    etc omitted. (This runs in Docker on AWS Lambda.)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是推理过程在代码中的表现方式，特征工程等部分省略。（此代码在 AWS Lambda 上的 Docker 中运行。）
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After this point, the predictions are formatted and softmax applied to get the
    probabilities of the different classes, and I can optionally reattach the predictions
    to the original dataset for evaluation purposes later.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，预测结果会被格式化并应用 softmax 以获得不同类别的概率，我还可以选择将预测结果重新附加到原始数据集上，供后续评估使用。
- en: Conclusions
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Overall, I was really pleased with how PyTorch Tabular works for my use case,
    although I’m not sure whether I’m going to end up deploying this model to production.
    My biggest challenges were ensuring that my training process was properly designed
    so that the inference task (mainly the dataloader) would work efficiently in my
    production environment, but once I resolved that things were fine. Frankly, not
    having to think much about formatting tensors was worth the time, too!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，我对 PyTorch Tabular 在我的应用场景中的表现非常满意，尽管我不确定最终是否会将此模型部署到生产环境中。我面临的最大挑战是确保我的训练过程得到了妥善设计，以确保推理任务（主要是数据加载器）能够在我的生产环境中高效运行，但一旦我解决了这个问题，一切都很好。坦率地说，不用再花时间去思考张量格式化的事情，真的很值得！
- en: So, if you want to try adapting a model from classical frameworks like CatBoost
    or LightGBM, I’d recommend giving PyTorch Tabular a try—if nothing else, it should
    be pretty quick to get up and running, so your experimentation turnaround won’t
    be too tedious. Next time, I’ll write about what exactly I was using PyTorch Tabular
    for, and describe performance metrics for the same underlying problem comparing
    CatBoost at PyTorch.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你想尝试将经典框架（如 CatBoost 或 LightGBM）中的模型适配到 PyTorch，我推荐尝试 PyTorch Tabular——至少，它应该能让你快速上手运行，因此你的实验周转不会太繁琐。下次，我将写关于我究竟是如何使用
    PyTorch Tabular 的，并描述在同一问题下比较 CatBoost 和 PyTorch 的性能指标。
- en: Read more of my work at [www.stephaniekirmer.com](http://www.stephaniekirmer.com).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读更多我的作品，请访问 [www.stephaniekirmer.com](http://www.stephaniekirmer.com)。
- en: Further Reading
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[## Exploring Advanced Features with PyTorch Tabular'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[## 探索 PyTorch Tabular 的高级功能'
- en: 'Pre-requisites: Intermediate knowledge of Deep Learning and basic knowledge
    of Tabular Problems like Regression and…'
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 先决条件：具备深度学习的中级知识，并对表格问题（如回归）有基本了解…
- en: pytorch-tabular.readthedocs.io](https://pytorch-tabular.readthedocs.io/en/latest/tutorials/02-Exploring%20Advanced%20Features%20with%20PyTorch%20Tabular/?source=post_page-----b99abc663dbe--------------------------------)
    [](https://pytorch-tabular.readthedocs.io/en/latest/models/?source=post_page-----b99abc663dbe--------------------------------)
    [## Supervised Models
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: pytorch-tabular.readthedocs.io](https://pytorch-tabular.readthedocs.io/en/latest/tutorials/02-Exploring%20Advanced%20Features%20with%20PyTorch%20Tabular/?source=post_page-----b99abc663dbe--------------------------------)
    [](https://pytorch-tabular.readthedocs.io/en/latest/models/?source=post_page-----b99abc663dbe--------------------------------)
    [## 监督模型
- en: Choosing which model to use and what parameters to set in those models is specific
    to a particular dataset. In PyTorch…
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择使用哪种模型以及在这些模型中设置哪些参数是特定于某一数据集的。在 PyTorch 中…
- en: pytorch-tabular.readthedocs.io](https://pytorch-tabular.readthedocs.io/en/latest/models/?source=post_page-----b99abc663dbe--------------------------------)  [##
    Imbalanced classification - PyTorch Tabular
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: pytorch-tabular.readthedocs.io](https://pytorch-tabular.readthedocs.io/en/latest/models/?source=post_page-----b99abc663dbe--------------------------------)  [##
    不平衡分类 - PyTorch Tabular
- en: PyTorch Tabular also allows custom batching strategy through Custom Samplers
    which comes in handy when working with…
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyTorch Tabular 还通过自定义采样器允许自定义批处理策略，这在处理时非常有用…
- en: pytorch-tabular.readthedocs.io](https://pytorch-tabular.readthedocs.io/en/latest/tutorials/06-Imbalanced%20Classification/?source=post_page-----b99abc663dbe--------------------------------)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: pytorch-tabular.readthedocs.io](https://pytorch-tabular.readthedocs.io/en/latest/tutorials/06-Imbalanced%20Classification/?source=post_page-----b99abc663dbe--------------------------------)
