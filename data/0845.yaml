- en: Fabric Madness
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Fabric Madness
- en: 原文：[https://towardsdatascience.com/fabric-madness-96b84dc5f241?source=collection_archive---------6-----------------------#2024-04-01](https://towardsdatascience.com/fabric-madness-96b84dc5f241?source=collection_archive---------6-----------------------#2024-04-01)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/fabric-madness-96b84dc5f241?source=collection_archive---------6-----------------------#2024-04-01](https://towardsdatascience.com/fabric-madness-96b84dc5f241?source=collection_archive---------6-----------------------#2024-04-01)
- en: Predicting basketball games with Microsoft Fabric
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Microsoft Fabric预测篮球比赛
- en: '[](https://medium.com/@roger_noble?source=post_page---byline--96b84dc5f241--------------------------------)[![Roger
    Noble](../Images/869b5b0f237f24b119ca6c41c2e31162.png)](https://medium.com/@roger_noble?source=post_page---byline--96b84dc5f241--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--96b84dc5f241--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--96b84dc5f241--------------------------------)
    [Roger Noble](https://medium.com/@roger_noble?source=post_page---byline--96b84dc5f241--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@roger_noble?source=post_page---byline--96b84dc5f241--------------------------------)[![Roger
    Noble](../Images/869b5b0f237f24b119ca6c41c2e31162.png)](https://medium.com/@roger_noble?source=post_page---byline--96b84dc5f241--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--96b84dc5f241--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--96b84dc5f241--------------------------------)
    [Roger Noble](https://medium.com/@roger_noble?source=post_page---byline--96b84dc5f241--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--96b84dc5f241--------------------------------)
    ·10 min read·Apr 1, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--96b84dc5f241--------------------------------)
    ·10分钟阅读·2024年4月1日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/8c8b9740fc1e7fac643483f34944ee5a.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c8b9740fc1e7fac643483f34944ee5a.png)'
- en: Image by author and ChatGPT. “Design an illustration, focusing on a basketball
    player in action, the design integrates sports and data analytics themes in a
    graphic novel style” prompt. ChatGPT, 4, OpenAI, 28 March. 2024\. [https://chat.openai.com.](https://chat.openai.com./)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者和ChatGPT提供。“设计一个插图，专注于一名篮球运动员在比赛中的动作，设计融合了体育和数据分析主题，采用图画小说风格”提示。ChatGPT,
    4, OpenAI, 2024年3月28日。[https://chat.openai.com.](https://chat.openai.com./)
- en: '*A Huge thanks to* [*Martim Chaves*](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
    *who co-authored this post and developed the example scripts.*'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*特别感谢* [*Martim Chaves*](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
    *共同撰写了这篇文章并开发了示例脚本。*'
- en: At the time of writing, it’s basketball season in the United States, and there
    is a lot of excitement around the men’s and women’s college basketball tournaments.
    The format is single elimination, so over the course of several rounds, teams
    are eliminated, till eventually we get a champion. This tournament is not only
    a showcase of upcoming basketball talent, but, more importantly, a fertile ground
    for data enthusiasts like us to analyse trends and predict outcomes.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，美国正值篮球赛季，男子和女子大学篮球锦标赛引起了极大的关注。比赛采用单场淘汰制，经过几轮淘汰，最终将产生冠军。这个比赛不仅展示了即将崭露头角的篮球人才，更重要的是，它为像我们这样的数据爱好者提供了一个肥沃的土壤，让我们分析趋势并预测结果。
- en: One of the great things about sports is that there is lots of data available,
    and we at [Noble Dynamic](https://nobledynamic.com/) wanted to take a crack at
    it 🤓.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 体育运动的一大优点是有大量的数据可以获取，我们在[Noble Dynamic](https://nobledynamic.com/)希望尝试一下这个领域🤓。
- en: In this series of posts titled *Fabric Madness*, we’re going to be diving deep
    into some of the most interesting features of [Microsoft Fabric](https://www.microsoft.com/en-us/microsoft-fabric),
    for an end-to-end demonstration of how to train and use a machine learning model.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个名为*Fabric Madness*的系列文章中，我们将深入探讨一些[Microsoft Fabric](https://www.microsoft.com/en-us/microsoft-fabric)的最有趣功能，展示如何进行端到端的机器学习模型训练和应用。
- en: 'In this first blog post, we’ll be going over:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇第一篇博文中，我们将讨论：
- en: A first look at the data using [Data Wrangler](https://learn.microsoft.com/en-us/fabric/data-science/data-wrangler).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用[Data Wrangler](https://learn.microsoft.com/en-us/fabric/data-science/data-wrangler)查看数据的初步分析。
- en: Exploratory Data Analysis (EDA) and Feature Engineering
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索性数据分析（EDA）和特征工程
- en: Tracking the performance of different Machine Learning (ML) Models using Experiments
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过实验跟踪不同机器学习（ML）模型的表现
- en: Selecting the best performing model using the ML Model functionality
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ML 模型功能选择最佳表现的模型
- en: The Data
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据
- en: The data used was obtained from the on-going Kaggle competition, the details
    of which can be found [here](https://www.kaggle.com/competitions/march-machine-learning-mania-2024/overview),
    which is licensed under [CC BY 4.0](http://creativecommons.org/licenses/by/4.0/)
    [1]
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的数据来自正在进行的 Kaggle 比赛，详细信息可以在[此处](https://www.kaggle.com/competitions/march-machine-learning-mania-2024/overview)找到，并且该数据已获得[CC
    BY 4.0](http://creativecommons.org/licenses/by/4.0/)许可[1]
- en: Among all of the interesting data available, our focus for this case study was
    on the match-by-match statistics. This data was available for both the regular
    seasons and the tournaments, going all the way back to 2003\. For each match,
    besides the date, the teams that were playing, and their scores, other relevant
    features were made available, such as field goals made and personal fouls by each
    team.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有可用的有趣数据中，我们这次案例研究的重点是逐场比赛统计数据。这些数据涵盖了常规赛和锦标赛，一直到 2003 年。对于每场比赛，除了日期、参赛队伍和得分外，还提供了其他相关特征，例如每个队伍的投篮命中数和个人犯规次数。
- en: Loading the Data
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载数据
- en: The first step was creating a Fabric **Workspace**. Workspaces in Fabric are
    one of the fundamental building blocks of the platform, and are used for grouping
    together related items and for collaboration.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个 Fabric **工作空间**。工作空间是 Fabric 平台的基本构建模块之一，用于将相关项组织在一起，并进行协作。
- en: After downloading all of the CSV files available, a **Lakehouse** was created.
    A Lakehouse, in simple terms, is a mix between a *Database* of Tables (structured)
    and a *Data Lake* of Files (unstructured). The big benefit of a Lakehouse is that
    data is available for every tool in the workspace.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下载所有可用的 CSV 文件后，创建了一个**Lakehouse**。简而言之，Lakehouse 是表格型*数据库*（结构化）与文件型*数据湖*（非结构化）的结合。Lakehouse
    的一个主要优势是，数据可以供工作空间中的每个工具使用。
- en: 'Uploading the files was done using the UI:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 文件上传是通过用户界面完成的：
- en: '![](../Images/5d3b6b5fa058b68609673e75ea3526db.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5d3b6b5fa058b68609673e75ea3526db.png)'
- en: Fig. 1 — Uploading Files. Image by [Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1 — 上传文件。图片来源：[Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
- en: Now that we have a Lakehouse with the CSV files, it was time to dig in, and
    get a first look at the data. To do that, we created a Notebook, using the UI,
    and attached the previously created Lakehouse.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了包含 CSV 文件的 Lakehouse，是时候深入探索并初步查看数据了。为此，我们使用用户界面创建了一个笔记本，并附加了之前创建的 Lakehouse。
- en: '![](../Images/f93f56518fd10171dbe0c20ff82564b2.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f93f56518fd10171dbe0c20ff82564b2.png)'
- en: Fig. 2 — Adding Lakehouse to Notebook. Image by [Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2 — 向笔记本添加 Lakehouse。图片来源：[Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
- en: First Look
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初步查看
- en: After a quick data wrangling, it was found that, as expected with data from
    Kaggle, the quality was great. With no duplicates or missing values.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 经过快速的数据整理后，发现，正如预期的那样，来自 Kaggle 的数据质量非常好，没有重复项或缺失值。
- en: For this task we used [Data Wrangler](https://learn.microsoft.com/en-us/fabric/data-science/data-wrangler),
    a tool built into Microsoft Fabric notebooks. Once an initial DataFrame has been
    created (Spark or Pandas supported), Data Wrangler becomes available to use and
    can attach to any DataFrame in the Notebook. What’s great is that it allows for
    easy analysis of loaded DataFrames.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个任务，我们使用了 [Data Wrangler](https://learn.microsoft.com/en-us/fabric/data-science/data-wrangler)，这是一个内置于
    Microsoft Fabric 笔记本的工具。创建初始 DataFrame（支持 Spark 或 Pandas）后，Data Wrangler 可以开始使用，并且可以连接到笔记本中的任何
    DataFrame。它的优点是，能够方便地分析加载的 DataFrame。
- en: In a Notebook, after reading the files into PySpark DataFrames, in the “Data”
    section, the “Transform DataFrame in Data Wrangler” was selected, and from there
    the several DataFrames were explored. Specific DataFrames can be chosen, carrying
    out a careful inspection.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在笔记本中，将文件读取到 PySpark DataFrame 后，在“数据”部分，选择了“在 Data Wrangler 中转换 DataFrame”，从那里可以探索多个
    DataFrame。可以选择特定的 DataFrame，并进行仔细检查。
- en: '![](../Images/ae7bc9853f50fa142857c6345255b181.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ae7bc9853f50fa142857c6345255b181.png)'
- en: Fig. 3 — Opening Data Wrangler. Image by [Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3 — 打开 Data Wrangler。图片来源：[Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
- en: '![](../Images/c89f0f109d2fd114c56c931e36e23861.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c89f0f109d2fd114c56c931e36e23861.png)'
- en: Fig. 4 — Analysing the DataFrame with Data Wrangler. Image by [Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图4 — 使用数据处理工具分析数据框。图片来自[Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
- en: In the centre, we have access to all of the rows of the loaded DataFrame. On
    the right, a **Summary** tab, showing that indeed there are no duplicates or missing
    values. Clicking in a certain column, summary statistics of that column will be
    shown.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在中间，我们可以访问已加载数据框的所有行。右侧是一个**摘要**标签页，显示确实没有重复值或缺失值。点击某一列后，将显示该列的汇总统计信息。
- en: On the left, in the **Operations** tab, there are several pre-built operations
    that can be applied to the DataFrame. The operations feature many of the most
    common data wrangling tasks, such as filtering, sorting, and grouping, and is
    a quick way to generate boilerplate code for these tasks.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧的**操作**标签页中，有多个预设的操作可以应用到数据框（DataFrame）。这些操作涵盖了许多最常见的数据处理任务，如过滤、排序和分组，是快速生成这些任务的模板代码的一种方式。
- en: In our case, the data was already in good shape, so we moved on to the EDA stage.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，数据已经很完美，所以我们进入了EDA阶段。
- en: Exploratory Data Analysis
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索性数据分析
- en: A short Exploratory Data Analysis (EDA) followed, with the goal of getting a
    general idea of the data. Charts were plotted to get a sense of the distribution
    of the data and if there were any statistics that could be problematic due to,
    for example, very long tails.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 随后进行了一次简短的探索性数据分析（EDA），目的是对数据有一个大致的了解。绘制了图表，以了解数据的分布情况，并查看是否存在由于非常长的尾部等原因可能会导致问题的统计数据。
- en: '![](../Images/6d8f47db68ff58f8e5820bb4d9136cd0.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6d8f47db68ff58f8e5820bb4d9136cd0.png)'
- en: Fig. 5 — Histogram of field goals made. Image by [Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图5 — 投篮命中数的直方图。图片来自[Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
- en: At a quick glance, it was found that the data available from the regular season
    had normal distributions, suitable to use in the creation of features. Knowing
    the importance that good features have in creating solid predictive systems, the
    next sensible step was to carry out feature engineering to extract relevant information
    from the data.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一眼看去，发现来自常规赛的数据呈正态分布，适合用于特征创建。鉴于优秀的特征在构建稳健预测系统中的重要性，下一步的合理操作是进行特征工程，从数据中提取相关信息。
- en: 'The goal was to create a dataset where each sample’s input would be a set of
    features for a game, containing information of both teams. For example, both teams
    average field goals made for the regular season. The target for each sample, the
    desired output, would be 1 if Team 1 won the game, or 0 if Team 2 won the game
    (which was done by subtracting the scores). Here’s a representation of the dataset:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是创建一个数据集，其中每个样本的输入是一个包含两队信息的比赛特征集。例如，两个队伍在常规赛中的场均投篮命中数。每个样本的目标输出是1（如果队伍1赢得比赛），或者0（如果队伍2赢得比赛，方法是通过减去得分来确定）。以下是数据集的表示：
- en: Feature Engineering
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特征工程
- en: 'The first feature that we decided to explore was win rate. Not only would it
    be an interesting feature to explore, but it would also provide a baseline score.
    This initial approach employed a simple rule: the team with the higher win rate
    would be predicted as the winner. This method provides a fundamental baseline
    against which the performance of more sophisticated predictive systems can be
    compared to.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定探索的第一个特征是胜率。它不仅是一个有趣的特征，而且还可以提供一个基准分数。这个初步方法使用了一个简单的规则：胜率较高的队伍将被预测为获胜者。这个方法提供了一个基本的基准，可以用来与更复杂的预测系统的表现进行比较。
- en: 'To evaluate the accuracy of our predictions across different models, we adopted
    the Brier score. The Brier score is the mean of the square of the difference between
    the predicted probability (p) and the actual outcome (o) for each sample, and
    can be described by the following formula:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了评估不同模型在预测准确性方面的表现，我们采用了布赖尔评分（Brier score）。布赖尔评分是每个样本的预测概率（p）与实际结果（o）之间差异的平方的平均值，可以通过以下公式描述：
- en: '![](../Images/4555570882e57072bf20b4054088e29f.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4555570882e57072bf20b4054088e29f.png)'
- en: Image by the author
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: The predicted probability will vary between 0 and 1, and the actual outcome
    will either be 0 or 1\. Thus, the Brier score will always be between 0 and 1\.
    As we want the predicted probability to be as close to the actual outcome as possible,
    the lower the Brier score, the better, with 0 being the perfect score, and 1 the
    worst.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 预测的概率将在0和1之间变化，而实际结果则为0或1。因此，Brier分数始终会介于0和1之间。我们希望预测的概率尽可能接近实际结果，Brier分数越低越好，0为完美分数，1为最差分数。
- en: For the baseline, the previously mentioned dataset structure was followed. Each
    sample of the dataset was a match, containing the win rates for the regular season
    for Team 1 and Team 2\. The actual outcome was considered 1 if Team 1 won, or
    0 if Team 2 won. To simulate a probability, the prediction was a normalised difference
    between T1’s win rate and T2’s win rate. For the maximum value of the difference
    between the win rates, the prediction would be 1\. For the minimum value, the
    prediction would be 0.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 基线采用了之前提到的数据集结构。数据集中的每个样本是一个比赛，包含了队伍1和队伍2常规赛的胜率。如果队伍1获胜，则实际结果为1；如果队伍2获胜，则实际结果为0。为了模拟概率，预测值是队伍1胜率与队伍2胜率之间的标准化差值。胜率差值的最大值时，预测值为1；最小值时，预测值为0。
- en: After calculating the win rate, and then using it to predict the outcomes, we
    got a Brier score of **0.23**. Considering that guessing at random leads to a
    Brier score of **0.25**, it’s clear that this feature alone is not very good 😬.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 计算胜率后，用它来预测结果，我们得到了一个Brier分数为**0.23**。考虑到随机猜测的Brier分数为**0.25**，显然仅凭这一特征效果并不好
    😬。
- en: By starting with a simple baseline, it clearly highlighted that more complex
    patterns were at play. We went ahead to developed another 42 features, in preparation
    for utilising more complex algorithms, machine learning models, that might have
    a better chance.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个简单的基线开始，清晰地揭示了更复杂的模式在起作用。我们接着开发了另外42个特征，为使用更复杂的算法和机器学习模型做准备，这些模型可能有更好的效果。
- en: It was then time to create machine learning models!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是时候创建机器学习模型了！
- en: Models & Machine Learning Experiments
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型与机器学习实验
- en: 'For the models, we opted for simple Neural Networks (NN). To determine which
    level of complexity would be best, we created three different NNs, with an increasing
    number of layers and hyper-parameters. Here’s an example of a small NN, one that
    was used:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于模型，我们选择了简单的神经网络（NN）。为了确定哪种复杂度最合适，我们创建了三个不同的神经网络，层数和超参数逐步增加。以下是一个小型神经网络的示例，曾经使用过的：
- en: '![](../Images/e1e5cdf6b3a9f592f8b1e64c630c99da.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e1e5cdf6b3a9f592f8b1e64c630c99da.png)'
- en: Fig. 6 — Diagram of a Neural Network. Image by [Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
    using [draw.io](https://app.diagrams.net/)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图6 — 神经网络图示。图片由[Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)使用[draw.io](https://app.diagrams.net/)制作
- en: If you’re familiar with NNs, feel free to skip to the [Experiments](https://nobledynamic.com/posts/fabric-madness-1/#what-is-an-experiment)!
    If you’re unfamiliar with NNs think of them as a set of layers, where each layer
    acts as a filter for relevant information. Data passes through successive layers,
    in a step-by-step fashion, where each layer has inputs and outputs. Data moves
    through the network in one direction, from the first layer (the model’s input)
    to the last layer (the model’s output), without looping back, hence the **Sequential**
    function.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉神经网络（NN），可以直接跳到[实验](https://nobledynamic.com/posts/fabric-madness-1/#what-is-an-experiment)部分！如果你不熟悉神经网络，可以将其理解为一组层，每一层作为一个过滤器，用来提取相关信息。数据以逐层的方式通过这些层，每一层都有输入和输出。数据在网络中单向流动，从第一层（模型的输入）到最后一层（模型的输出），没有回路，因此称为**顺序**（Sequential）函数。
- en: Each layer is made up of several neurons, that can be described as nodes. The
    model’s input, the first layer, will contain as many neurons as there are features
    available, and each neuron will hold the value of a feature. The model’s output,
    the last layer, in binary problems such as the one we’re tackling, will only have
    1 neuron. The value held by this neuron should be 1 if the model is processing
    a match where Team 1 won, or 0 if Team 2 won. The intermediate layers have an
    *ad hoc* number of neurons. In the example in the code snippet, 64 neurons were
    chosen.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每一层由多个神经元组成，可以将其描述为节点。模型的输入层，即第一层，将包含与可用特征数量相同的神经元，每个神经元将保存一个特征的值。模型的输出层，即最后一层，在处理我们这个二分类问题时，只有1个神经元。这个神经元保存的值应为1，如果模型处理的是“队伍1获胜”的情况，或者为0，如果是“队伍2获胜”。中间层有一个*特定的*神经元数量。在代码片段中的示例中，选择了64个神经元。
- en: In a **Dense** layer, as is the case here, each neuron in the layer is connected
    to every neuron in the preceding layer. Fundamentally, each neuron **processes**
    the information provided by the neurons from the previous layer.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在**密集**层中，如这里所示，层中的每个神经元都与前一层中的每个神经元相连接。基本上，每个神经元**处理**来自前一层神经元提供的信息。
- en: The processing of the previous layer’s information requires an **activation
    function**. There are many types of activation functions — **ReLU**, standing
    for Rectified Linear Unit, is one of them. It allows only positive values to pass
    and sets negative values to zero, making it effective for many types of data.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 处理前一层信息需要**激活函数**。激活函数有很多类型——**ReLU**，即修正线性单元，就是其中之一。它仅允许正值通过，并将负值设置为零，因此对于许多类型的数据都非常有效。
- en: Note that the final activation function is a **sigmoid** function — this converts
    the output to a number between 0 and 1\. This is crucial for binary classification
    tasks, where you need the model to express its output as a probability.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，最终的激活函数是**sigmoid**函数——它将输出转换为0到1之间的数字。这对于二分类任务至关重要，因为你需要模型将输出表示为一个概率。
- en: Besides these small models, medium and large models were created, with an increasing
    number of layers and parameters. The size of a model affects its ability to capture
    complex patterns in the data, with larger models generally being more capable
    in this regard. However, larger models also require more data to learn effectively
    — if there’s not enough data, issues may occur. Finding the right size is sometimes
    only possible through experimentation, by training different models and comparing
    their performance to identify the most effective configuration.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些小型模型之外，还创建了中型和大型模型，拥有越来越多的层和参数。模型的大小影响其捕捉数据中复杂模式的能力，通常较大的模型在这方面更为有效。然而，较大的模型也需要更多的数据才能有效学习——如果数据不足，可能会出现问题。找到合适的模型大小有时只能通过实验来实现，通过训练不同的模型并比较它们的表现，来确定最有效的配置。
- en: The next step was running the experiments ⚗️!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是运行实验⚗️！
- en: What is an Experiment?
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是实验？
- en: In Fabric, an Experiment can be seen as a group of related runs, where a run
    is an execution of a code snippet. In this context, a run is a training of a model.
    For each run, a model will be trained with a different set of hyper-parameters.
    The set of hyper-parameters, along with the final model score, is logged, and
    this information is available for each run. Once enough runs have been completed,
    the final model scores can be compared, so that the best version of each model
    can be selected.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在Fabric中，实验可以看作是一组相关的运行，其中运行是代码片段的执行。在这种情况下，运行即是模型的训练。对于每一次运行，模型将使用不同的超参数集合进行训练。超参数集合及最终的模型评分会被记录下来，并且这些信息对每次运行都是可用的。一旦足够多的运行完成，就可以比较最终的模型评分，从而选择每个模型的最佳版本。
- en: Creating an Experiment in Fabric can be done via the UI or directly from a Notebook.
    The Experiment is essentially a wrapper for [MLFlow Experiments](https://mlflow.org/).
    One of the great things about using Experiments in Fabric is that the results
    can be shared with others. This makes it possible to collaborate and allow others
    to participate in experiments, either writing code to run experiments, or analysing
    the results.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在Fabric中创建实验可以通过UI或直接从Notebook进行。实验本质上是[MLFlow Experiments](https://mlflow.org/)的包装器。使用Fabric中的实验有一个很棒的优点，那就是结果可以与他人共享。这使得团队协作成为可能，其他人可以参与实验，不论是编写代码运行实验，还是分析结果。
- en: Creating an Experiment
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建实验
- en: Using the UI to create an Experiment simply select Experiment from the **+ New**
    button, and choose a name.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UI创建实验，只需从**+ 新建**按钮中选择“实验”，并选择一个名称。
- en: '![](../Images/16babe28e7df7b00cf239df62d51f397.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/16babe28e7df7b00cf239df62d51f397.png)'
- en: Fig. 7 — Creating an Experiment using the UI. Image by [Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图7 — 使用UI创建实验。图片由[Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)提供
- en: When training each of the models, the hyper-parameters are logged with the experiment,
    as well as the final score. Once completed we can see the results in the UI, and
    compare the different runs to see which model performed best.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练每个模型时，超参数与实验一起记录，以及最终得分。完成后，我们可以在UI中查看结果，并比较不同的实验，看看哪个模型表现最佳。
- en: '![](../Images/05d17570644c450b37baa0c3a2019637.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05d17570644c450b37baa0c3a2019637.png)'
- en: Fig. 8 — Comparing different runs. Image by [Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图8 — 比较不同的实验结果。图片由[Martim Chaves](https://medium.com/u/1c5c115c8045?source=post_page---user_mention--96b84dc5f241--------------------------------)提供
- en: After that we can select the best model and use it to make the final prediction.
    When comparing the three models, the best Brier score was **0.20**, a slight improvement
    🎉!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以选择最佳模型并用它进行最终预测。在比较三种模型时，最佳的Brier得分为**0.20**，略有提高🎉！
- en: Conclusion
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: After loading and analysing data from this year’s US major college basketball
    tournament, and creating a dataset with relevant features, we were able to predict
    the outcome of the games using a simple Neural Network. Experiments were used
    to compare the performance of different models. Finally, the best performing model
    was selected to carry out the final prediction.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载并分析今年美国主要大学篮球锦标赛的数据，并创建了一个包含相关特征的数据集后，我们使用简单的神经网络预测了比赛的结果。实验用于比较不同模型的表现。最后，选择了表现最好的模型进行最终预测。
- en: In the next post we will go into detail on how we created the features using
    pyspark. Stay tuned for more! 👋
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一篇文章中，我们将详细介绍如何使用pyspark创建特征。敬请期待更多内容！👋
- en: '**The full source code for this post can be found** [**here**](https://dev.azure.com/nobledynamic/_git/FabricMadness)**.**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**本文的完整源代码可以在** [**这里**](https://dev.azure.com/nobledynamic/_git/FabricMadness)**找到。**'
- en: '*Originally published at* [*https://nobledynamic.com*](https://nobledynamic.com/posts/fabric-madness-1/)
    *on April 1, 2024.*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*最初发表于* [*https://nobledynamic.com*](https://nobledynamic.com/posts/fabric-madness-1/)
    *于2024年4月1日。*'
- en: References
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] Jeff Sonas, Ryan Holbrook, Addison Howard, Anju Kandru. (2024). March Machine
    Learning Mania 2024\. Kaggle. [https://kaggle.com/competitions/march-machine-learning-mania-2024](https://kaggle.com/competitions/march-machine-learning-mania-2024)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] Jeff Sonas, Ryan Holbrook, Addison Howard, Anju Kandru. (2024). March Machine
    Learning Mania 2024\. Kaggle. [https://kaggle.com/competitions/march-machine-learning-mania-2024](https://kaggle.com/competitions/march-machine-learning-mania-2024)'
