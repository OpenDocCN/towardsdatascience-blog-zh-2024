- en: A Step-By-Step Guide to Building a Programming Language
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建编程语言的逐步指南
- en: 原文：[https://towardsdatascience.com/a-step-by-step-guide-to-building-a-programming-language-5f5b84246991?source=collection_archive---------0-----------------------#2024-06-19](https://towardsdatascience.com/a-step-by-step-guide-to-building-a-programming-language-5f5b84246991?source=collection_archive---------0-----------------------#2024-06-19)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-step-by-step-guide-to-building-a-programming-language-5f5b84246991?source=collection_archive---------0-----------------------#2024-06-19](https://towardsdatascience.com/a-step-by-step-guide-to-building-a-programming-language-5f5b84246991?source=collection_archive---------0-----------------------#2024-06-19)
- en: Building a programming language from scratch in a few hours
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在几小时内从零开始构建一种编程语言
- en: '[](https://medium.com/@physboom?source=post_page---byline--5f5b84246991--------------------------------)[![Matthew
    Chak](../Images/88881eb5a7c8f08c15555bc8c3c613d3.png)](https://medium.com/@physboom?source=post_page---byline--5f5b84246991--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--5f5b84246991--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--5f5b84246991--------------------------------)
    [Matthew Chak](https://medium.com/@physboom?source=post_page---byline--5f5b84246991--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@physboom?source=post_page---byline--5f5b84246991--------------------------------)[![Matthew
    Chak](../Images/88881eb5a7c8f08c15555bc8c3c613d3.png)](https://medium.com/@physboom?source=post_page---byline--5f5b84246991--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--5f5b84246991--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--5f5b84246991--------------------------------)
    [Matthew Chak](https://medium.com/@physboom?source=post_page---byline--5f5b84246991--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--5f5b84246991--------------------------------)
    ·17 min read·Jun 19, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布在 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--5f5b84246991--------------------------------)
    ·阅读时间：17分钟·2024年6月19日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/c544cad7b26dd0bb3008c29eb2dba5e4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c544cad7b26dd0bb3008c29eb2dba5e4.png)'
- en: 'Trees: The Hierarchical Heart of Computer Science. Source: [Jeremy Bishop on
    Unsplash](https://unsplash.com/@jeremybishop)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 树：计算机科学的层次核心。来源：[Jeremy Bishop 在 Unsplash](https://unsplash.com/@jeremybishop)
- en: The world is full of programming languages with all kinds of different use cases.
    Most of these languages, though, are built for very general purposes — sometimes,
    we may want to design a language to fit a very specific use case (e.g. Facebook
    designed React to make it easier to develop their web applications, and Apple
    recently developed [Pkl](https://github.com/apple/pkl), a language designed to
    make configurations easier. There are many more examples of this in various fields).
    As such, knowing how to build a programming language is a useful skill to have
    in your belt.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上充满了各种具有不同用途的编程语言。然而，这些语言大多数都是为非常通用的目的构建的——有时，我们可能想要设计一种语言来适应非常特定的用例（例如，Facebook设计了React来简化其Web应用程序的开发，而苹果最近开发了
    [Pkl](https://github.com/apple/pkl)，一种旨在简化配置的语言。这个例子在各个领域中有很多）。因此，知道如何构建编程语言是一个非常有用的技能。
- en: In this article, we will build an interpreted programming language from scratch
    and learn a little bit about both the lambda calculus and programming languages
    as a whole along the way. The language we build here will be fairly esoteric,
    but the process should hopefully give you an idea of how to design your own use-case-specific
    languages (and teach you useful information about how programming languages function
    under the hood).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将从零开始构建一种解释型编程语言，并在此过程中学习一些关于λ演算和编程语言的知识。我们构建的语言将是相当深奥的，但这个过程应该能给你一个如何设计自己特定用途语言的概念（并教会你一些关于编程语言如何在幕后运行的有用信息）。
- en: The Game Plan
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏计划
- en: 'Since we’re building an interpreted language¹, our overarching flow will look
    something like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在构建一种解释型语言¹，整体流程大致如下：
- en: '![](../Images/9f171ab3d352f80924bec9732bde250b.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9f171ab3d352f80924bec9732bde250b.png)'
- en: The broad flow chart for our language
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们语言的广泛流程图
- en: Basically, we start with some **concrete syntax** (code) written in our **target
    language** (the language that we are trying to write), pass it to some **parser**
    that converts it to an **abstract syntax tree** (a tree representation of the
    code that’s easy to work with), and then pass that to an **interpreter** that
    “runs” the abstract syntax tree to give us a final result. Note that the parser
    and interpreter are written in some already existing **host language** — C’s original
    parser and compiler, for instance, were written in assembly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们从一些用我们**目标语言**（我们要编写的语言）编写的**具体语法**（代码）开始，传递给某个**解析器**，它将其转换为**抽象语法树**（代码的树形表示，易于处理），然后将其传递给**解释器**，由它“运行”抽象语法树，给我们最终结果。请注意，解析器和解释器是用某种已经存在的**宿主语言**编写的——例如，C的原始解析器和编译器就是用汇编语言编写的。
- en: '*** Note: My use of “parser” here encapsulates the entire parsing process.
    Usually, lexing is done prior to “parsing”, but in this case parsing is just the
    process of taking concrete syntax to abstract syntax, whatever that may look like.*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*** 注意：我这里所使用的“解析器”涵盖了整个解析过程。通常，词法分析是在“语法分析”之前完成的，但在这种情况下，语法分析只是将具体语法转换为抽象语法的过程，无论抽象语法是什么样子。*'
- en: 'As an example, consider the following specification for a simple language for
    basic arithmetic:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，考虑以下一个简单语言的基本算术规范：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The above, by the way, is an **EBNF** for a **context-free grammar²**. I won’t
    delve too deeply into what this means here, but all programming languages written
    in a form like this are parse-able in polynomial time via the CYK algorithm. For
    this EBNF, something like `(4 + 4) * 3` is a valid program, but something like
    `def f(x): return 5; f(5)` is not.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '顺便说一下，上面的是**EBNF**（扩展巴科斯范式）形式的**上下文无关文法²**。我不会在这里深入探讨这意味着什么，但所有用这种形式编写的编程语言都可以通过CYK算法在多项式时间内进行解析。对于这个EBNF，像`(4
    + 4) * 3`这样的表达式是一个有效的程序，但像`def f(x): return 5; f(5)`这样的代码就不是。'
- en: 'Suppose we are now given the concrete syntax `(4 + 4) * 3` . After parsing,
    we should get an abstract syntax tree (AST) like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 假设现在给定了具体语法`(4 + 4) * 3`。解析后，我们应该得到如下的抽象语法树（AST）：
- en: '![](../Images/6bd4ba20c268ed4ff1093f4a20ce1820.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6bd4ba20c268ed4ff1093f4a20ce1820.png)'
- en: AST for our concrete syntax
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们具体语法的抽象语法树（AST）
- en: Then our interpreter will start at the root and recursively go down the tree
    until we get our answer, namely 24.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们的解释器将从根节点开始，递归地遍历树，直到我们得到答案，也就是24。
- en: Note quickly that this grammar is **ambiguous** — for instance, how should the
    expression `4 + 4 * 3` parse? It could either parse as the above (that is, `(4
    + 4) * 3`), or it could also parse as `4 + (4 * 3)` — neither parsing is inherently
    more “correct” in the way that we have specified the language, as both are valid
    parse trees. In cases like this, the parser will have to arbitrarily make a decision
    about how to parse our language.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这个语法是**模糊的**——例如，表达式`4 + 4 * 3`应该如何解析？它可以解析为上面那样（即`(4 + 4) * 3`），也可以解析为`4
    + (4 * 3)`——在我们指定的语言中，两种解析方式都没有本质上更“正确”的，因它们都是有效的解析树。在这种情况下，解析器将不得不任意决定如何解析我们的语言。
- en: Designing our Syntax
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计我们的语法
- en: 'By the flow chart, our first step should logically be to design our concrete
    syntax. What you choose to make your syntax is completely up to you. I decided
    to create *EmojiLang*, a (horrible) language that ensures an extremely colorful
    screen while you are typing. The grammar is below:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 根据流程图，我们的第一步应该是设计我们的具体语法。你选择使用什么语法完全取决于你自己。我决定创建*EmojiLang*，这是一种（糟糕的）语言，可以确保你在输入时屏幕非常五彩斑斓。语法如下：
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*** Note: the above specification is written to be used in a tool called ANTLR,
    we’ll get back to this very soon.*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*** 注意：上面的规范是为名为ANTLR的工具编写的，我们很快就会回到这个话题。*'
- en: This language is, of course, ridiculous, but it is interesting for a couple
    of reasons. Firstly, all of our expressions are required to be parenthesized.
    This makes it extremely annoying to code, but also makes our grammar non-ambiguous.
    Secondly, notice how we can only define anonymous functions — there is no equivalent
    syntax for something like `def` in Python. Finally, all functions in this language
    (except for the base computations) have *exactly one argument*. We’ll explore
    the implications of the last two design decisions when we play around with our
    language in a bit.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语言当然很荒谬，但有几个原因让它很有趣。首先，我们的所有表达式都需要加括号。这使得编写代码极为麻烦，但也让我们的语法不含歧义。其次，注意到我们只能定义匿名函数——没有类似于Python中`def`的语法。最后，这种语言中的所有函数（除了基本计算）*只有一个参数*。我们稍后在使用这种语言时会探讨最后两个设计决策的影响。
- en: Parsing
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析
- en: We can, of course, write our own parser. Luckily though, there are tools that
    can parse arbitrary context-free grammars. For this tutorial, we will use **ANTLR
    (**you can download it [here](https://www.antlr.org/)). ANTLR is a very nice and
    easy-to-use tool that takes grammar specifications like the above and creates
    parsers in a variety of target languages (in this tutorial, we will be using Python).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然可以自己编写解析器。不过幸运的是，有一些工具可以解析任意的上下文无关文法。在本教程中，我们将使用**ANTLR**（你可以在[这里](https://www.antlr.org/)下载）。ANTLR是一个非常好用且易于使用的工具，它可以根据类似上面那样的语法规范生成多种目标语言的解析器（在本教程中，我们将使用Python）。
- en: 'Using it is fairly simple, just follow the following steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用它相当简单，只需按照以下步骤操作：
- en: Download the ANTLR Java binaries from [here](https://www.antlr.org/download.html)
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[这里](https://www.antlr.org/download.html)下载ANTLR的Java二进制文件
- en: 'Create a .g4 file (like the above) for your grammar. Note that ANTLR can’t
    actually handle emojis very well, so if you plan to use emojis in your language,
    run the following python script to demojify your grammar:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的语法创建一个.g4文件（如上所示）。注意，ANTLR实际上无法很好地处理表情符号，所以如果你打算在语言中使用表情符号，请运行以下Python脚本来去表情化你的语法：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 3\. Run `java -Xmx500M -cp <path_to_antlr.jar> org.antlr.v4.Tool -Dlanguage=Python3
    <your_grammar.g4>` to generate your parser
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 运行`java -Xmx500M -cp <path_to_antlr.jar> org.antlr.v4.Tool -Dlanguage=Python3
    <your_grammar.g4>`来生成解析器
- en: 'You can then import the generated parsing files and use them as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以导入生成的解析文件并按如下方式使用它们：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You probably won’t have to do the demojizing step in which case you can use
    antlr4’s `FileStream` instead of the `InputStream` , but it really doesn’t matter.
    Now, we have a very nice abstract syntax tree that’s easy to work with, and we
    can move on to the hard part — interpreting³
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能不需要做去表情化的步骤，在这种情况下你可以使用antlr4的`FileStream`代替`InputStream`，但这其实并不重要。现在，我们有了一个非常不错的抽象语法树，容易处理，我们可以进入更难的部分——解释³
- en: Building an Interpreter
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建解释器
- en: Because we are working with trees, our interpreter will naturally be a recursive
    entity. We do have some choices though on how exactly we implement some of its
    features. For this tutorial, we will build an interpreter that uses **environments**
    that bind variables to addresses and then a mutable **store** that maps addresses
    to values. This idea is fairly common, though not ubiquitous, and it allows us
    to maintain proper scope and support variable mutation. For ease of implementation,
    we will also make our interpreter return a common value structure.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们正在处理树结构，所以我们的解释器自然会是递归的实体。不过，我们确实有一些选择，决定如何具体实现其某些特性。对于本教程，我们将构建一个使用**环境**将变量绑定到地址，然后使用可变的**存储**将地址映射到值的解释器。这个想法相当常见，尽管并非无处不在，它允许我们保持正确的作用域并支持变量的变化。为了简化实现，我们还将让我们的解释器返回一个通用的值结构。
- en: Values, Stores, and the Environment
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 值、存储与环境
- en: 'First, let’s define what our interpreter can output. We have three obvious
    base cases in our EBNF (namely booleans, strings, and numbers) so let’s create
    value objects for those:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们定义我们的解释器可以输出什么。在我们的EBNF中有三个明显的基本情况（即布尔值、字符串和数字），因此我们将为这些创建值对象：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To store mappings of variables to values, we will also create an environment
    and a store:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储变量到值的映射，我们还将创建一个环境和一个存储：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Effectively, our environment will store variable → address bindings, and our
    store will hold address → value bindings. The store is perhaps not necessary with
    our current feature set, but if we allowed for mutation for pass-by-reference
    variables, it would be useful⁴.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们的环境将存储变量→地址绑定，而我们的存储将保存地址→值绑定。存储可能在我们当前的功能集下不是必需的，但如果我们允许通过引用传递变量的变化，它将会有用⁴。
- en: 'Ideally, we’d also like to pass functions as variables, so we need one more
    value to represent them. To do this, we create a **closure**, which contains the
    function’s parameter, body, and the environment that it was created in:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们还希望将函数作为变量传递，因此我们需要一个额外的值来表示它们。为此，我们创建了一个**闭包**，它包含了函数的参数、主体以及函数所在的环境：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You may reasonably ask about why we need the environment stored in the function.
    Suppose instead that we had a function value like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，为什么我们需要将环境存储在函数中。假设我们有一个像这样的函数值：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, suppose that we had code equivalent to the following in our language:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设我们在我们的语言中有与以下代码等价的内容：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To ensure that `y` is still in scope for `g` in the top case, we would have
    to implement dynamic scoping (scope where variables are added to the environment
    as the program runs without being cleared) without closures, meaning that the
    bottom code would actually run and print `9`. For the bottom code to properly
    crash though, we can’t implement dynamic scope. Thus we want the functions to
    effectively remember what environment they were created in — hence why we add
    environments to our closure class⁵.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保 `y` 在顶级情况下仍然在 `g` 的作用域内，我们必须实现动态作用域（作用域在程序运行时变量被加入到环境中，而不会被清除），而不使用闭包，这意味着底部代码实际上会运行并打印
    `9`。但是，为了让底部代码正确地崩溃，我们不能实现动态作用域。因此，我们希望函数能够有效地记住它们是在哪个环境中创建的——这就是为什么我们要在闭包类中添加环境的原因⁵。
- en: The Interpreter
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解释器
- en: 'Now, we are ready to write our actual interpreter. In ANTLR, our interpreter
    will extend the `EmojiLangListener` class. We will also need to create a top-level
    environment and give the interpreter a store:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备编写实际的解释器了。在 ANTLR 中，我们的解释器将扩展 `EmojiLangListener` 类。我们还需要创建一个顶级环境，并给解释器提供一个存储：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we need to create an interp method that handles all of our expression
    cases. It will end up looking something as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个 `interp` 方法，来处理我们所有的表达式案例。最终代码将如下所示：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Our base cases (IDs, atoms, function definitions, reading, and printing) are
    fairly simple, so we can just write them in:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基础案例（ID、原子值、函数定义、读取和打印）相对简单，因此我们可以直接写出来：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Our if condition is also fairly simple. We just need to interpret the condition
    and then return the result of interpreting the true case if it's true and the
    false case if its false. The code is thus just
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 if 条件也相当简单。我们只需要解释条件，然后如果条件为真，就返回解释真分支的结果，如果为假，就返回解释假分支的结果。因此，代码就是这样：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Sequential operations are similarly simple, they just need to interpret the
    first expression and then the second. We can thus replace the code in that block
    as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序操作同样简单，它们只需要先解释第一个表达式，再解释第二个表达式。因此，我们可以像这样替换该代码块：
- en: '[PRE13]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next are the base computations. This is a decent amount of code since we need
    to handle a lot of operations, but it’s not super complex:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是基础计算。由于我们需要处理很多操作，所以这段代码相对较长，但并不复杂：
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Perhaps this can also be cleaned up a bit with the use of e.g. dictionaries,
    but that’s not super important. Next we have variable assignments, which are also
    not too complicated. We have a couple choices here on what exactly we want it
    to do — namely, should it allow new variables to come into existence or only modify
    existing ones? I’ll choose the latter case, which makes our code look like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 也许通过使用例如字典的方式，这部分代码还可以稍微清理一下，但这并不是特别重要。接下来是变量赋值，也不太复杂。我们在这里有几个选择，具体想让它做什么——即，它是允许新变量的出现，还是只修改现有的变量？我选择后一种情况，这样我们的代码就像这样：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, we have function applications. Here, we have to do four steps. First,
    we interpret the function we are calling to get our closure. Then, we interpret
    our argument. Then, we bind the argument into a copy of the closure’s environment.
    Finally, we interpret the closure’s body in the new environment. The code ends
    up looking as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们来看看函数应用。在这里，我们需要执行四个步骤。首先，我们解释我们正在调用的函数，以获得我们的闭包。接着，我们解释我们的参数。然后，我们将参数绑定到闭包环境的副本中。最后，我们在新的环境中解释闭包的主体。代码最终如下所示：
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, our interp is fully functional! We need only modify our main program to
    run it now on a program:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的解释器功能完备！我们只需要修改我们的主程序，运行它来解释一个程序：
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Playing With Our Language
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 玩转我们的语言
- en: 'We are now finally ready to start writing programs in our language. Here’s
    a simple hello world program in the emoji language (EML):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在终于准备好开始编写我们的语言程序了。下面是一个简单的 emoji 语言（EML）版本的 hello world 程序：
- en: '[PRE18]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: And to run it, we just do
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行它，我们只需执行：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: (the above, of course, assumes that the program is present in a file called
    `helloworld.eml` )
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: （上述内容，当然假设程序存在于名为`helloworld.eml`的文件中）
- en: Currying
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 柯里化
- en: 'Back in the first section, I noted that our programming language is interesting
    because functions can only take one argument. How then do we create an effect
    similar to multivariate functions? Consider, for instance, the following python
    code:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分中，我提到我们的编程语言有趣之处在于函数只能接受一个参数。那么，我们如何创建类似于多元函数的效果呢？例如，考虑以下Python代码：
- en: '[PRE20]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`f` here has **arity** 2 — that is, it takes two arguments. We can, however,
    write equivalent code that only uses functions of arity one (except addition)
    as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的`f`有**阶数**2——也就是说，它接受两个参数。然而，我们可以编写等效的代码，只使用一元函数（除了加法），如下所示：
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The above concept of turning higher arity functions into unary functions is
    called **currying**. It works for functions of any arity — for a function *f*
    of arity *n*, we can simply perform currying *n-1* times. In emoji language, this
    allows us to write a program like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 上述将高阶函数转化为一元函数的概念叫做**柯里化**。它适用于任何阶数的函数——对于一个阶数为*n*的函数，我们可以简单地进行柯里化*n-1*次。在表情语言中，这使得我们能够编写如下程序：
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: the Python translation of which is
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 其Python翻译为
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Or, more legibly,
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，更易读地，
- en: '[PRE24]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Notice also how the first python iteration used no named functions. It turns
    out that we don’t really need them, though of course they are useful for readability.
    Then we get
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，第一次的Python迭代中没有使用命名函数。事实证明，我们实际上并不需要它们，尽管它们当然有助于提高可读性。然后我们得到
- en: '[PRE25]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Recursion
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 递归
- en: How do we do a loop or recursion in this language though? We have no syntax
    for `for` or `while` , and without names for functions, it may seem like recursion
    is impossible.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，在这个语言中我们如何实现循环或递归呢？我们没有`for`或`while`的语法，而且没有函数的名称，看起来似乎递归是不可能的。
- en: We can, however, do a neat little trick. Since functions are values, we can
    pass functions to *themselves* whenever we call them, thus allowing them to call
    themselves.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们可以做一个小技巧。因为函数是值，我们可以在调用它们时将函数传递给*它们自己*，从而使它们能够调用自己。
- en: 'Take, for instance, the following python code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，考虑以下Python代码：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We can convert this to a recursive version using something like this⁶:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用类似下面的代码将其转换为递归版本⁶：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'But we do have a problem here — namely, notice how `while_loop` calls itself.
    We can’t do that in our language with only anonymous functions, so how do we fix
    that? The answer is that we can do something like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们在这里确实遇到了一个问题——即注意到`while_loop`是如何调用它自己的。我们在只有匿名函数的语言中无法做到这一点，那么我们该如何解决呢？答案是，我们可以做类似下面这样的操作：
- en: '[PRE28]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In effect, we make `while_loop` take *itself* as a parameter. Then, we can call
    `self` inside `while_loop` , allowing `while_loop` to call itself recursively.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们让`while_loop`将*它自己*作为参数。然后，我们可以在`while_loop`内部调用`self`，使得`while_loop`能够递归地调用自己。
- en: 'We still, of course, need to lambda-fy and curry this for our language, so
    we need to make code equivalent to the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们仍然需要将这个进行lambda化并进行柯里化，以适应我们的语言，因此我们需要编写与以下等效的代码：
- en: '[PRE29]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This is a bit of a doozy, but it does work. In emoji lang, this then becomes
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这个有点难以理解，但它确实有效。在表情语言中，这就变成了
- en: '[PRE30]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Then we get
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们得到
- en: '[PRE31]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Bonus: The Y Combinator'
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 奖金：Y组合子
- en: 'It’s somewhat annoying to pass in while to itself each time we want to call
    it, so what if we could create a version of while that already had itself curried?
    It turns out we can with something called the **Y Combinator**. The Y combinator
    is a function that looks as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 每次想调用`while`时传递`while`给它自己确实有些麻烦，那么如果我们能创建一个已经将自己进行柯里化的`while`版本呢？事实证明，我们可以通过一个叫做**Y组合子**的东西来实现。Y组合子是一个函数，形式如下：
- en: '[PRE32]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: It’s completely absurd, but it allows us to effectively “store” a function in
    itself. I won’t go into too much detail about it, but if you’d like to learn more
    I advise looking at [this excellent article](https://www.playfulpython.com/y-combinator-in-python/)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这完全荒谬，但它允许我们有效地“存储”一个函数到它自己中。我不会详细讲解它，但如果你想了解更多，我建议阅读[这篇优秀的文章](https://www.playfulpython.com/y-combinator-in-python/)
- en: 'With the combinator though, we can change our code to the following:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用组合子后，我们可以将代码更改为以下内容：
- en: '[PRE33]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now, notice how our call to while after it has been y-combinated⁷ only involves
    passing the condition and the body — we don’t need to pass itself. and we still
    get
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，注意我们对`while`的调用在经过Y组合子化⁷后，仅涉及传递条件和主体——我们不需要传递它本身。我们仍然能够得到
- en: '[PRE34]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Conclusions
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Congratulations! You have now hopefully built your own programming language
    and coded some fun things in it. Though something like EmojiLang obviously doesn’t
    have much real use, you can imagine some cool use cases for building your own
    languages, e.g. by creating a super case-specific scripting language to speed
    up common tasks.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在可能已经构建了自己的编程语言，并用它编写了一些有趣的东西。尽管像 EmojiLang 这样的语言显然没有太多实际用途，但你可以想象创建自己语言的一些酷用例，例如通过创建一个超具体的脚本语言来加速常见任务。
- en: 'If you’d like some challenges, try the following exercises:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想挑战自己，可以尝试以下练习：
- en: '**Exercise 1:** Build a simple parser and interpreter for the following language
    *without* using ANTLR. Ensure that parenthesis always take precedence, and that
    operations otherwise have equal precedence (e.g. `4 + 4 * 3` should evaluate to
    `24` , not `16` )'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 1：** 为以下语言构建一个简单的解析器和解释器，*不*使用 ANTLR。确保括号始终具有最高优先级，并且其他操作符具有相等优先级（例如，`4
    + 4 * 3` 应该计算为 `24`，而不是 `16`）'
- en: '[PRE35]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '**Exercise 2:** Modify your above code to add operator precedence'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 2：** 修改你之前的代码，以添加操作符优先级'
- en: '**Exercise 3 (Tricky)**: We don’t *have* to make all of our functions anonymous.
    Try implementing an interpreter for the following language (you can use ANTLR,
    but you’ll have to write your own .g4 file):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 3（棘手）**：我们不*必*将所有函数都定义为匿名函数。试着为以下语言实现一个解释器（你可以使用 ANTLR，但你需要自己编写 .g4 文件）：'
- en: '[PRE36]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '**Exercise 4 (Easy →Very Very Hard):** .g4 files for a ton of real languages
    can be found [here](https://github.com/antlr/grammars-v4). Implement an interpreter
    for any one of them.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**练习 4（简单 → 非常非常难）：** 可以在[这里](https://github.com/antlr/grammars-v4)找到大量实际语言的
    .g4 文件。为其中任何一个实现一个解释器。'
- en: '*Please contact mchak@calpoly.edu for any inquiries*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '*如有任何疑问，请联系 mchak@calpoly.edu*'
- en: '*P.S. Thank you to Brian Jones, my CS 430 professor, for teaching me a lot
    of this stuff.*'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*附言：感谢 Brian Jones，我的 CS 430 课程教授，教会了我很多这些内容。*'
- en: '*All images by author unless otherwise stated.*'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者提供。*'
- en: Compiled languages are slightly different. The generated abstract syntax tree
    is instead passed to a compiler that converts it to code in a different existing
    language (most commonly assembly). The outputted code can then be run.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译型语言略有不同。生成的抽象语法树会传递给编译器，编译器将其转换为其他现有语言的代码（通常是汇编语言）。然后，输出的代码可以运行。
- en: Technically, this isn’t actually in EBNF, but it’s close enough. If you’re curious,
    you can read more about the EBNF [here](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form)
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从技术上讲，这其实并不完全是 EBNF，但它足够接近。如果你感兴趣，可以在[这里](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form)阅读更多关于
    EBNF 的内容
- en: 'Note: Some languages may perform some optimizations to the AST before passing
    it to the interpreter. We will not do that here.'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意：一些语言可能会在将抽象语法树（AST）传递给解释器之前进行一些优化。我们这里不会进行这些操作。
- en: We can still allow for mutation by using boxed values in our environment, but
    the store is more akin to what most languages do and is more intuitive, at least
    for me.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们仍然可以通过在环境中使用盒装值来允许变异，但存储更类似于大多数语言的做法，也更直观，至少对我来说是这样。
- en: See [7 Functions Anywhere (brown.edu)](https://cs.brown.edu/courses/cs173/2012/book/higher-order-functions.html#%28part._.Implementing_.Closures%29)
    for more info
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参阅 [7 Functions Anywhere (brown.edu)](https://cs.brown.edu/courses/cs173/2012/book/higher-order-functions.html#%28part._.Implementing_.Closures%29)
    获取更多信息
- en: '6\. Note that we have to use a box here because Python’s environment doesn’t
    really work in the same way ours does, e.g. we can’t do this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 请注意，我们必须在这里使用一个盒子，因为 Python 的环境与我们的环境工作方式不同，例如我们不能这样做：
- en: '[PRE37]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 7\. Really, it has been Z-combinated since our language evaluates stuff eagerly,
    but the effect is the same
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 事实上，由于我们的语言是急切地评估内容的，所以它自始至终都是 Z 组合的，但效果是一样的
