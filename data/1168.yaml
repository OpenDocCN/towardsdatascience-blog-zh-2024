- en: Routing in RAG-Driven Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 RAG 驱动的应用中的路由
- en: 原文：[https://towardsdatascience.com/routing-in-rag-driven-applications-a685460a7220?source=collection_archive---------1-----------------------#2024-05-09](https://towardsdatascience.com/routing-in-rag-driven-applications-a685460a7220?source=collection_archive---------1-----------------------#2024-05-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/routing-in-rag-driven-applications-a685460a7220?source=collection_archive---------1-----------------------#2024-05-09](https://towardsdatascience.com/routing-in-rag-driven-applications-a685460a7220?source=collection_archive---------1-----------------------#2024-05-09)
- en: Directing the application flow based on query intent
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 根据查询意图引导应用流程
- en: '[](https://medium.com/@ssmaameri?source=post_page---byline--a685460a7220--------------------------------)[![Sami
    Maameri](../Images/9e9892fe7d3cc53ad1c4d165145878ef.png)](https://medium.com/@ssmaameri?source=post_page---byline--a685460a7220--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a685460a7220--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a685460a7220--------------------------------)
    [Sami Maameri](https://medium.com/@ssmaameri?source=post_page---byline--a685460a7220--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@ssmaameri?source=post_page---byline--a685460a7220--------------------------------)[![Sami
    Maameri](../Images/9e9892fe7d3cc53ad1c4d165145878ef.png)](https://medium.com/@ssmaameri?source=post_page---byline--a685460a7220--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a685460a7220--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a685460a7220--------------------------------)
    [Sami Maameri](https://medium.com/@ssmaameri?source=post_page---byline--a685460a7220--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a685460a7220--------------------------------)
    ·9 min read·May 9, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a685460a7220--------------------------------)
    ·9分钟阅读·2024年5月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Routing the control flow inside a RAG application based on the intent of the
    user’s query can help us create more useful and powerful Retrieval Augmented Generation
    (RAG) based applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 根据用户查询的意图在 RAG 应用中路由控制流可以帮助我们创建更有用和强大的基于检索增强生成（RAG）的应用。
- en: The data we want to enable the user to interact with may well be coming from
    a diverse range of sources, such as from reports, documents, images, databases,
    and third party systems. For business-based RAG applications, we may want to enable
    the user to interact with information from a range of areas in the business also,
    such as from the sales, ordering and accounting systems.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望用户能够交互的数据可能来自多个不同的来源，例如报告、文档、图像、数据库以及第三方系统。对于基于业务的 RAG 应用，我们可能还希望让用户能够交互来自业务各个领域的信息，例如来自销售、订单和会计系统的信息。
- en: Because of this diverse range of data sources, the way the information is stored,
    and the way we want to interact with it, is likely to be diverse also. Some data
    may be stored in vector stores, some in SQL databases, and some we may need to
    access over API calls as it sits in third party systems.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据来源的多样性，信息的存储方式以及我们希望与其交互的方式也可能是多样的。有些数据可能存储在向量存储中，有些存储在 SQL 数据库中，还有些数据我们可能需要通过
    API 调用来访问，因为它位于第三方系统中。
- en: '![](../Images/34159eb96b878359e44851c2335541d4.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/34159eb96b878359e44851c2335541d4.png)'
- en: RAG system routing to different data sources based on the query intent
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: RAG 系统根据查询意图路由到不同的数据源
- en: There could be different vector stores setup also for the same but of data,
    optimised for different query types. For example one vector store could be setup
    for answering summary type questions, and another for answering specific, directed
    type questions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于相同的数据，可能会设置不同的向量存储，以优化不同的查询类型。例如，可以为回答总结类问题设置一个向量存储，为回答特定、定向类问题设置另一个向量存储。
- en: And we may want to route to **different component types** also, based on the
    question. For example we may want to pass the query to an Agent, VectorStore,
    or just directly to an LLM for processing, all based on the nature of the question
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能还希望根据问题的类型路由到**不同的组件类型**。例如，我们可能希望将查询传递给一个代理、向量存储，或者直接传递给一个 LLM 进行处理，这一切都取决于问题的性质。
- en: '![](../Images/e171242fbcc3f09ba6c6fd62dd48e126.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e171242fbcc3f09ba6c6fd62dd48e126.png)'
- en: Routing to different component types based on the user’s query
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 根据用户查询路由到不同的组件类型
- en: We may even want to customise the prompt templates depending on the question
    being asked.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可能希望根据问题的不同定制提示模板。
- en: '![](../Images/61f627b15df4c09e6ffcf469dcbd9b42.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/61f627b15df4c09e6ffcf469dcbd9b42.png)'
- en: Routing via different prompt templates depending on the user query
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 根据用户查询，通过不同的提示模板进行路由
- en: All in all, there are numerous reasons we would want to change and direct the
    flow of the user’s query through the application. The more use cases our application
    is trying to fulfil, the more likely we are to have routing requirements throughout
    the application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，我们有许多理由希望在应用程序中改变和引导用户查询的流程。我们的应用程序试图满足的用例越多，我们就越有可能在整个应用程序中存在路由需求。
- en: Routers are essentially just If/Else statements we can use to direct the control
    flow of the query.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器本质上只是我们可以用来引导查询控制流的If/Else语句。
- en: What is interesting about them though is it that they **need to make their decisions
    based on natural language input**. So we are looking for a discrete output based
    on a natural language description.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，令它们有趣的是，它们**需要基于自然语言输入做出决策**。因此，我们正在寻找一个基于自然语言描述的离散输出。
- en: And since a lot of the routing logic is based on using LLMs or machine learning
    algorithms, which are non-deterministic in nature, we cannot guarantee that a
    router will always 100% make the right choice. Add to that that we are unlikely
    to be able to predict all the different query variations that come into a router.
    However, using best practices and some testing we should be able to employ Routers
    to help create more powerful RAG applications.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于许多路由逻辑是基于使用大语言模型（LLM）或机器学习算法，这些算法本质上是非确定性的，我们无法保证路由器总是能够100%做出正确的选择。此外，我们也不太可能预测所有进入路由器的不同查询变体。然而，通过使用最佳实践和一些测试，我们应该能够利用路由器帮助创建更强大的RAG应用程序。
- en: Natural Language Routers
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自然语言路由器
- en: We will explore here a few of the natural language routers I have found that
    are implemented by some different RAG and LLM frameworks and libraries.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将探索一些我发现的自然语言路由器，它们是由一些不同的RAG和LLM框架和库实现的。
- en: LLM Completion Routers
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LLM补全路由器
- en: LLM Function Calling Routers
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LLM函数调用路由器
- en: Semantic Routers
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语义路由器
- en: Zero Shot Classification Routers
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 零-shot分类路由器
- en: Language Classification Routers
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言分类路由器
- en: The diagram below gives a description of these routers, along with the frameworks/packages
    where they can be found.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图表描述了这些路由器，并提供了它们可以找到的框架/包。
- en: The diagram also includes Logical Routers, which I am defining as routers that
    work based on discrete logic such as conditions against string length, file names,
    integer values, e.t.c. In other words they are not based on having to understand
    the intent of a natural language query
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 该图还包括逻辑路由器，我将其定义为基于离散逻辑工作的路由器，例如字符串长度、文件名、整数值等条件。换句话说，它们不依赖于理解自然语言查询的意图。
- en: '![](../Images/78163855bb31bbb8345e6d141e77a57b.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/78163855bb31bbb8345e6d141e77a57b.png)'
- en: The different kinds of natural language routers
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 不同类型的自然语言路由器
- en: Let’s explore each of these routers in a little more detail
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地探讨一下这些路由器
- en: LLM Routers
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LLM路由器
- en: These leverage the decision making abilities of LLMs to select a route based
    on the user’s query.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这些利用LLM的决策能力，根据用户的查询选择路由。
- en: LLM Completion Router
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LLM补全路由器
- en: These use an LLM completion call, asking the LLM to return a single word that
    best describes the query, from a list of word options you pass in to its prompt.
    This word can then be used as part of an If/Else condition to control the application
    flow.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些使用LLM的补全调用，要求LLM从你传递给其提示的单词选项列表中返回一个最能描述查询的单词。然后，这个单词可以作为If/Else条件的一部分来控制应用程序的流程。
- en: This is how the [LLM Selector router](https://docs.llamaindex.ai/en/stable/module_guides/querying/router/)
    from LlamaIndex works. And is also the example given for a router inside the [LangChain](https://python.langchain.com/docs/expression_language/how_to/routing/)
    docs.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是[LlamaIndex的LLM选择路由器](https://docs.llamaindex.ai/en/stable/module_guides/querying/router/)的工作原理。这也是[LangChain](https://python.langchain.com/docs/expression_language/how_to/routing/)文档中给出的一个路由器示例。
- en: Let’s look at a code sample, based on the one provided in the LangChain docs,
    to make this a bit more clear. As you can see, coding up one of these on your
    own inside LangChain is pretty straight forward.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个代码示例，基于LangChain文档中提供的示例，来更清楚地说明这一点。正如你所见，在LangChain内部编写这样的代码是非常直接的。
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: LLM Function Calling Router
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: LLM函数调用路由器
- en: This leverages the function-calling ability of LLMs to pick a route to traverse.
    The different routes are set up as functions with appropriate descriptions in
    the LLM Function Call. Then, based on the query passed to the LLM, it is able
    to return the correct function (i.e route), for us to take.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这利用了LLM的函数调用能力来选择要遍历的路由。不同的路由被设置为LLM函数调用中的函数，并附有适当的描述。然后，基于传递给LLM的查询，LLM能够返回正确的函数（即路由），供我们使用。
- en: This is how the [Pydantic Router](https://docs.llamaindex.ai/en/stable/module_guides/querying/router/)
    works inside LlamaIndex. And this is the way most Agents work also to select the
    correct tool to be used. They leverage the Function Calling abilities of LLMs
    in order to select the correct tool for the job based on the user’s query.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是[LlamaIndex](https://docs.llamaindex.ai/en/stable/module_guides/querying/router/)中[PyDantic
    Router](https://docs.llamaindex.ai/en/stable/module_guides/querying/router/)的工作方式。这也是大多数Agent在选择正确工具时所采用的方式。它们利用LLM的函数调用功能来根据用户的查询选择适合的工具。
- en: Semantic Router
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语义路由器
- en: This router type leverages embeddings and similarity searches to select the
    best route to traverse.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种路由器类型利用嵌入和相似度搜索来选择最佳的路径进行遍历。
- en: Each route has a set of example queries associated with it, that become embedded
    and stored as vectors. The incoming query gets embedded also, and a similarity
    search is done against the other sample queries from the router. The route which
    belongs to the query with the closest match gets selected.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每个路由都有一组关联的示例查询，这些查询会被嵌入并存储为向量。传入的查询也会被嵌入，并与来自路由器的其他示例查询进行相似度搜索。与查询最接近的路由将被选中。
- en: There is in fact a python package called [semantic-router](https://github.com/aurelio-labs/semantic-router)
    that does just this. Let’s look at some implementation details to get a better
    idea of how the whole thing works. These examples come straight out of that libraries
    GitHub page.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，有一个名为[semantic-router](https://github.com/aurelio-labs/semantic-router)的Python包可以做到这一点。让我们看一下其中的一些实现细节，以便更好地理解整个过程的工作原理。这些示例直接来自该库的GitHub页面。
- en: Let’s set up two routes, one for questions about politics, and another for general
    chitchat type questions. To each route, we assign a list of questions that might
    typically be asked in order to trigger that route. These example queries are referred
    to as *utterances*. These utterances will be embedded, so that we can use them
    for similarity searches against the user’s query.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置两条路由，一条用于关于政治的问题，另一条用于一般闲聊类型的问题。我们为每条路由分配一组可能会被问到的问题，这些问题通常用于触发该路由。这些示例查询称为*话语*。这些话语将被嵌入，以便我们可以用于与用户查询的相似度搜索。
- en: '[PRE1]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We assign OpenAI as the encoder, though any embedding library will work. And
    next we create our route layer using the routers and encoder.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们指定OpenAI作为编码器，尽管任何嵌入库都可以使用。接下来，我们使用路由器和编码器创建我们的路由层。
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Then, when apply our query against the router layer, it returns the route that
    should be used for query
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当我们将查询应用于路由器层时，它会返回应使用的查询路由。
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So, just to summarise again, this semantic router leverages embeddings and similarity
    searches using the user’s query to select the optimal route to traverse. This
    router type should be faster than the other LLM based routers also, since it requires
    just a single Index query to be processed, as oppose to the other types which
    require calls to an LLM.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，再总结一下，这个语义路由器利用嵌入和相似度搜索，通过用户的查询选择最佳的路径进行遍历。由于只需要处理一个索引查询，相较于其他类型需要调用LLM的路由器，这种路由器的速度应该更快。
- en: Zero Shot Classification Router
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 零-shot 分类路由器
- en: '[“Zero-shot text classification](https://huggingface.co/tasks/zero-shot-classification)
    is a task in natural language processing where a model is trained on a set of
    labeled examples but is then able to classify new examples from previously unseen
    classes”. These routers leverage a Zero-Shot Classification model to assign a
    label to a piece of text, from a predefined set of labels you pass in to the router.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[“Zero-shot文本分类](https://huggingface.co/tasks/zero-shot-classification)是自然语言处理中的一项任务，其中模型在一组标记示例上进行训练，但随后能够对来自先前未见类别的新示例进行分类”。这些路由器利用零-shot分类模型为文本分配标签，标签来自你传入路由器的预定义标签集。'
- en: '**Example:** The [ZeroShotTextRouter](https://docs.haystack.deepset.ai/reference/routers-api#module-zero_shot_text_router)
    in Haystack, which leverages a Zero Shot Classification model from Hugging Face.
    Check out the [source code here](https://github.com/deepset-ai/haystack/blob/main/haystack/components/routers/zero_shot_text_router.py#L130)
    to see where the magic happens.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** Haystack中的[ZeroShotTextRouter](https://docs.haystack.deepset.ai/reference/routers-api#module-zero_shot_text_router)，它利用了来自Hugging
    Face的Zero Shot分类模型。查看[源代码](https://github.com/deepset-ai/haystack/blob/main/haystack/components/routers/zero_shot_text_router.py#L130)，看看魔法发生的地方。'
- en: Language Classification Router
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语言分类路由器
- en: This type of router is able to identify the language that the query is in, and
    routes the query based on that. Useful if you require some sort of multilingual
    parsing abilities in your application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的路由器能够识别查询所使用的语言，并基于此进行路由。如果您的应用需要某种多语言解析能力，这会非常有用。
- en: '**Example:** The [TextClassificationRouter](https://docs.haystack.deepset.ai/reference/routers-api#module-text_language_router)
    from Haystack. [It leverages the langdetect python library](https://github.com/deepset-ai/haystack/blob/main/haystack/components/routers/text_language_router.py#L90)
    to detect the language of of the text, which itself uses a [Naive Bayes](https://www.slideshare.net/shuyo/language-detection-library-for-java)
    algorithm to detect the language.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 来自Haystack的[TextClassificationRouter](https://docs.haystack.deepset.ai/reference/routers-api#module-text_language_router)。
    [它利用langdetect Python库](https://github.com/deepset-ai/haystack/blob/main/haystack/components/routers/text_language_router.py#L90)来检测文本的语言，而langdetect库本身使用了[朴素贝叶斯](https://www.slideshare.net/shuyo/language-detection-library-for-java)算法来检测语言。'
- en: Keyword Router
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键词路由器
- en: This [article](https://betterprogramming.pub/unifying-llm-powered-qa-techniques-with-routing-abstractions-438e2499a0d0)
    from Jerry Liu, the Co-Founder of LlamaIndex, on routing inside RAG applications,
    suggests, among other options, a keyword router that would try to select a route
    by matching keywords between the query and routes list.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇来自LlamaIndex联合创始人Jerry Liu的[文章](https://betterprogramming.pub/unifying-llm-powered-qa-techniques-with-routing-abstractions-438e2499a0d0)，讨论了RAG应用程序中的路由问题，其中提出了一个关键词路由器，它通过匹配查询与路由列表之间的关键词来选择路由，除此之外还提到了其他几种方案。
- en: This Keyword router could be powered by an LLM also to identify keywords, or
    by some other keyword matching library. I have not been able to find any packages
    that implement this router type
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个关键词路由器也可以通过LLM来识别关键词，或者通过其他关键词匹配库来实现。我还没有找到任何实现这种路由器类型的包。
- en: Logical Routers
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逻辑路由器
- en: These use logic checks against variables, such as string lengths, file names,
    and value comparisons to handle how to route a query. They are very similar to
    typical If/Else conditions used in programming.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这些使用逻辑检查来处理变量，例如字符串长度、文件名和数值比较，以决定如何路由查询。它们与编程中常见的If/Else条件非常相似。
- en: In other words, they are not based on having to understand the intent of a natural
    language query but can make their choice based on existing and discrete variables.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，它们并不需要理解自然语言查询的意图，而是基于现有的离散变量来做出选择。
- en: '**Example:** The [ConditionalRouter](https://docs.haystack.deepset.ai/docs/conditionalrouter)
    and [FileTypeRouter](https://docs.haystack.deepset.ai/docs/filetyperouter) from
    HayStack.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例：** 来自Haystack的[ConditionalRouter](https://docs.haystack.deepset.ai/docs/conditionalrouter)和[FileTypeRouter](https://docs.haystack.deepset.ai/docs/filetyperouter)。'
- en: Agents v.s Routers
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 智能体与路由器
- en: At first sight, there is indeed a lot of similarities between routers and agents,
    and it might be difficult to distinguish how they are different.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 初看之下，路由器和智能体之间确实有很多相似之处，可能很难区分它们的不同。
- en: The similarities exist because Agents do in fact perform routing as part of
    their flow. They use a routing mechanism in order to select the correct tool to
    use for the job. They often leverage function calling in order to select the correct
    tool, just like the **LLM Function Calling Routers** described above.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些相似之处的存在是因为智能体实际上在其流程中执行了路由操作。它们使用路由机制来选择正确的工具以完成任务。它们通常利用函数调用来选择正确的工具，就像上面描述的**LLM函数调用路由器**一样。
- en: Routers are much more simple components than Agents though, often with the “simple”
    job of just routing a task to the correct place, as oppose to carrying out any
    of the logic or processing related to that task.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，路由器通常比智能体简单得多，通常只有一个“简单”的任务，就是将任务路由到正确的地方，而不涉及与该任务相关的任何逻辑或处理。
- en: Agents on the other hand are often responsible for processing logic, including
    managing work done by the tools they have access to.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，代理通常负责处理逻辑，包括管理它们所能访问的工具所完成的工作。
- en: Conclusion
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: We covered here a few of the different natural language routers currently found
    inside different RAG and LLM frameworks and packages.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里介绍了当前在不同的RAG和LLM框架及包中找到的一些不同的自然语言路由器。
- en: The concepts and packages and libraries around routing are sure to increase
    as time goes on. When building a RAG application, you will find that at some point,
    not too far in, routing capabilities do become necessary in order to build an
    application that is useful for the user.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 关于路由的概念、包和库，随着时间的推移肯定会增加。在构建RAG应用程序时，你会发现，在某个时候，路由功能确实变得必要，以便构建一个对用户有用的应用程序。
- en: Routers are these basic building blocks that allow you to route the natural
    language requests to your application to the right place, so that the user’s queries
    can be fulfilled as best as possible.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 路由器是这些基本构建块，它们允许你将自然语言请求路由到应用程序的正确位置，以便尽可能最好地满足用户的查询。
- en: '*Hope that was useful! Do* [*subscribe*](https://medium.com/@ssmaameri/subscribe)
    *to get a notification whenever a new article of mine comes out*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*希望这对你有帮助！请* [*订阅*](https://medium.com/@ssmaameri/subscribe) *以便在我发布新文章时收到通知*'
- en: '*Unless otherwise noted, all images are by the author. Icons used in the first
    image by* [*SyafriStudi*](https://www.flaticon.com/free-icons/open-book)*o,* [*Dimitry
    Miroliubovand*](https://www.flaticon.com/free-icons/png)*, and* [*Free Icons PNG*](https://www.freeiconspng.com/img/13315)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图片均由作者提供。第一张图片中使用的图标来自* [*SyafriStudi*](https://www.flaticon.com/free-icons/open-book)*，*
    [*Dimitry Miroliubovand*](https://www.flaticon.com/free-icons/png)*，以及* [*Free
    Icons PNG*](https://www.freeiconspng.com/img/13315)'
