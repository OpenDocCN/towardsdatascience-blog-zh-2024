- en: The Arcane Network
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 《神秘网络》
- en: 原文：[https://towardsdatascience.com/the-arcane-network-95d3f19749be?source=collection_archive---------3-----------------------#2024-12-02](https://towardsdatascience.com/the-arcane-network-95d3f19749be?source=collection_archive---------3-----------------------#2024-12-02)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/the-arcane-network-95d3f19749be?source=collection_archive---------3-----------------------#2024-12-02](https://towardsdatascience.com/the-arcane-network-95d3f19749be?source=collection_archive---------3-----------------------#2024-12-02)
- en: '![](../Images/4302fc9ae4ee9be837e375bae43e5b52.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4302fc9ae4ee9be837e375bae43e5b52.png)'
- en: How to use network science and Python to map out the popular show
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何使用网络科学和Python绘制出这部流行剧集
- en: '[](https://medium.com/@janosovm?source=post_page---byline--95d3f19749be--------------------------------)[![Milan
    Janosov](../Images/b7ede67b165cdd368d96f13f46c68ccb.png)](https://medium.com/@janosovm?source=post_page---byline--95d3f19749be--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--95d3f19749be--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--95d3f19749be--------------------------------)
    [Milan Janosov](https://medium.com/@janosovm?source=post_page---byline--95d3f19749be--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@janosovm?source=post_page---byline--95d3f19749be--------------------------------)[![Milan
    Janosov](../Images/b7ede67b165cdd368d96f13f46c68ccb.png)](https://medium.com/@janosovm?source=post_page---byline--95d3f19749be--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--95d3f19749be--------------------------------)[![面向数据科学](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--95d3f19749be--------------------------------)
    [Milan Janosov](https://medium.com/@janosovm?source=post_page---byline--95d3f19749be--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--95d3f19749be--------------------------------)
    ·7 min read·Dec 2, 2024
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[面向数据科学](https://towardsdatascience.com/?source=post_page---byline--95d3f19749be--------------------------------)
    ·阅读时长7分钟·2024年12月2日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: The second season of *Arcane*, a recent blockbuster series on Netflix based
    on the universe of one of the most popular online video games ever, League of
    Legends, is set in a fantasy world with heavy steampunk design, closed with astonishing
    visuals and a record-breaking budget. As a good network and data scientist with
    a particular interest in turning pop cultural items into data visualization, this
    was all I needed after finishing the closing season to map out the hidden connections
    and turn the storyline of Arcane into a network visualization — using Python.
    Hence, by the end of this tutorial, you will have hands-on skills on how to create
    and visualize the network behind Arcane.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 《神秘之境》第二季是Netflix最近的一部热门剧集，改编自全球最受欢迎的在线电子游戏之一《英雄联盟》的宇宙。剧集设定在一个重蒸汽朋克风格的幻想世界中，以惊人的视觉效果和创纪录的预算收尾。作为一名网络和数据科学家，特别热衷于将流行文化项目转化为数据可视化，这就是我在完成最后一季后所需要的一切，目的是绘制出隐藏的联系，并将《神秘之境》的故事情节转化为网络可视化——使用Python。因此，在本教程结束时，您将掌握如何创建并可视化《神秘之境》背后的网络。
- en: However, these skills and methods are absolutely not specific to this story.
    In fact, they highlight the general approach network science provides to map out,
    design, visualize, and interpret networks of any complex system. These systems
    can range from transportation and COVID-19 spreading network patterns to brain
    networks to various social networks, such as that of the Arcane series.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这些技能和方法绝不是这部故事所特有的。事实上，它们突出了网络科学提供的一般方法，用于绘制、设计、可视化和解释任何复杂系统的网络。这些系统可以从交通和COVID-19传播的网络模式，到大脑网络，再到各种社交网络，例如《神秘之境》系列中的网络。
- en: '*All images created by the author.*'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*所有图像由作者创作。*'
- en: 1\. Collecting the list of characters
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. 收集角色列表
- en: Since here we are going to map out the connections behind all characters, first,
    we need to get a list of each character. For this, the Arcane [fan wiki](https://arcane.fandom.com/wiki/Category:Characters)
    site is an excellent source of free-to-use information (CC BY-SA 3.0), which we
    can easily access by simple web scraping techniques. Namely, we will use urllib
    to download, and with BeautifulSoup, we will extract the names and fan wiki profile
    URLs of each character listed on the main character page.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在这里要绘制出所有角色背后的联系，首先，我们需要获取每个角色的列表。为此，《神秘之境》[粉丝维基](https://arcane.fandom.com/wiki/Category:Characters)网站是一个很好的免费使用信息来源（CC
    BY-SA 3.0），我们可以通过简单的网页抓取技术轻松访问。具体来说，我们将使用urllib进行下载，使用BeautifulSoup提取每个角色在主角页面上列出的名字和粉丝维基个人资料链接。
- en: 'First downloading the character listing site’s html:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先下载角色列表网站的HTML：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then, I extracted all the potentially relevant names. One can easily figure
    out what tags to feed the parsed html stored in the ‘soup’ variable by just right-clicking
    on a desired element (in this case, a character profile) and selecting the element
    inspection option in any browser.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我提取了所有潜在相关的名字。通过右键点击一个想要的元素（在这个案例中是角色档案），并选择浏览器中的元素检查选项，您可以轻松找出要传递给解析的html（存储在‘soup’变量中）的标签。
- en: From this, I learned that the name and url of a character are stored in a line
    which has ‘title=’ in it, but does not contain ‘:’ (which corresponds to categories).
    Additionally, I created a still_character flag, which helped me decide which subpages
    on the character listing page still belong to legitimate characters of the story.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从中，我了解到，角色的名字和网址存储在包含‘title=’的行中，但不包含‘:’（对应于类别）。此外，我创建了一个`still_character`标志，它帮助我确定角色列表页面上的哪些子页面仍属于故事中的合法角色。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The previous code block will create a dictionary (‘names_urls’) which stores
    the name and url of each character as key-value pairs. Now let’s have a quick
    look at what we have and print the name-url dictionary and the total length of
    it:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码块将创建一个字典（‘names_urls’），它以每个角色的名字和网址作为键值对存储。现在，让我们快速查看一下我们得到的内容，并打印出名字-网址字典以及它的总长度：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A sample of the output from this code block, where we can text each link —
    pointing to the biography profile of each character:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码块的输出样本，我们可以测试每个链接——指向每个角色的传记档案：
- en: '![](../Images/3ad33d86437ab3146554e91a80d70500.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3ad33d86437ab3146554e91a80d70500.png)'
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Which code cell returns the result of 67, implying the total number of named
    characters we have to deal with. This means we are already done with the first
    task — we have a comprehensive list of characters as well as easy access to their
    full textual profile on their fan wiki sites.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 哪个代码单元返回67的结果，这意味着我们需要处理的命名角色总数。这表示我们已经完成了第一项任务——我们有一个全面的角色列表，并且可以轻松访问它们在粉丝维基网站上的完整文本档案。
- en: 2\. Collecting profiles
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2. 收集档案
- en: To map out the connections between two characters, we figure out a way to quantify
    the relationship between each two characters. To capture this, I rely on how frequently
    the two character’s biographies reference each other. On the technical end, to
    achieve this, we will need to collect these complete biographies we just got the
    links to. We will get that again using simple web scraping techniques, and then
    save the source of each site in a separate file locally as follows.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绘制两个角色之间的关系，我们需要找出一种方法来量化两个角色之间的关系。为了捕捉这一点，我依赖于这两个角色的传记相互提及的频率。在技术层面上，为了实现这一点，我们需要收集我们刚刚获得链接的完整传记。我们将通过简单的网页抓取技术再次获取这些信息，然后将每个网站的源代码分别保存在本地文件中，如下所示。
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: By the end of this section, our folder ‘fandom_profiles’ should contain the
    fanwiki profiles of each Arcane character — ready to be processed as we work our
    way towards building the Arcane network.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 到了本节末，我们的文件夹‘fandom_profiles’应包含每个《Arcane》角色的粉丝维基档案——准备好在我们构建《Arcane》网络的过程中进行处理。
- en: 3\. The Arcane network
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3. 《Arcane》网络
- en: To build the network between characters, we assume that the intensity of interactions
    between two characters is signaled by the number of times each character’s profile
    mentions the other. Hence, the nodes of this network are the characters, which
    are linked with connections of varying strength based on the number of times each
    character’s wiki site source references any other character’s wiki.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了建立角色之间的网络，我们假设两个角色之间的互动强度由每个角色的档案提到另一个角色的次数来表示。因此，网络的节点是角色，节点之间通过基于每个角色的维基网站源引用其他角色维基的次数的强度不同的连接链接。
- en: Building the network
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建网络
- en: In the following code block, we build up the edge list — the list of connections
    that contains both the source and the target node (character) of each connection,
    as well as the weight (co-reference frequency) between the two characters. Additionally,
    to conduct the in-profile search effectively, I create a names_ids which only
    contains the specific identifier of each character, without the rest of the web
    address.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码块中，我们构建了边列表——包含每个连接的源节点和目标节点（角色），以及这两个角色之间的权重（共同引用频率）的连接列表。此外，为了有效地进行档案内搜索，我创建了一个`names_ids`，它只包含每个角色的特定标识符，而不包括其余的网页地址。
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As this code block runs, it should return around 180 edges.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个代码块运行时，它应该返回大约180条边。
- en: 'Next, we use the NetworkX graph analytics library to turn the edge list into
    a graph object and output the number of nodes and edges the graph has:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用 NetworkX 图分析库将边列表转换为图对象，并输出图中的节点和边的数量：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of this code block:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 该代码块的输出：
- en: '![](../Images/0efcd63ba520a218c408ab4c57c3bcac.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0efcd63ba520a218c408ab4c57c3bcac.png)'
- en: This output tells us that while we started with 67 characters, 16 of them ended
    up not being connected to anyone in the network, hence the smaller number of nodes
    in the constructed graph.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 该输出告诉我们，虽然我们从67个角色开始，其中16个角色最终没有与网络中的任何人建立连接，因此构建的图表中节点的数量较小。
- en: Visualizing the network
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化网络
- en: Once we have the network, we can visualize it! First, let’s create a simple
    draft visualization of the network using Matplotlib and the built-in tools of
    NetworkX.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们拥有网络，就可以将其可视化！首先，让我们使用 Matplotlib 和 NetworkX 内置工具创建一个简单的网络草图可视化。
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The output image of this cell:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 该单元的输出图像：
- en: '![](../Images/3b7a5aa717021a4b84c3d48a813ef25d.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3b7a5aa717021a4b84c3d48a813ef25d.png)'
- en: While this network already gives a few hints about the main structure and most
    frequent characteristics of the show, we can design a much more detailed visualization
    using the open-source network visualization software Gephi. For this, we need
    to export the network into a .gexf graph data file first, as follows.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然该网络已经提供了一些关于节目主要结构和最常见特点的线索，但我们可以使用开源网络可视化软件 Gephi 设计出更为详细的可视化。为此，我们首先需要将网络导出为
    .gexf 图数据文件，如下所示。
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, the tutorial on how to visualize this network using Gephi:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，关于如何使用 Gephi 可视化此网络的教程：
- en: '![](../Images/aae9b3347f0af50a8557d15dbb93153c.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aae9b3347f0af50a8557d15dbb93153c.png)'
- en: 'Video tutorial on Youtube: [https://www.youtube.com/watch?v=utm91FhZalQ](https://www.youtube.com/watch?v=utm91FhZalQ)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 'YouTube 视频教程: [https://www.youtube.com/watch?v=utm91FhZalQ](https://www.youtube.com/watch?v=utm91FhZalQ)'
- en: Extras
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附加内容
- en: Here comes an extension part, which I am referring to in the video. After exporting
    the node table, including the network community indices, I read that table using
    Pandas and assigned individual colors to each community. I got the colors (and
    their hex codes) from ChatGPT, asking it to align with the main color themes of
    the show. Then, this block of code exports the color—which I again used in Gephi
    to color the final graph.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个扩展部分，我在视频中提到过。导出包含网络社区指数的节点表后，我使用 Pandas 读取该表，并为每个社区分配了不同的颜色。我从 ChatGPT
    那里得到了这些颜色（及其十六进制代码），并要求它们与节目主色调对齐。然后，这段代码将颜色导出——我再次在 Gephi 中使用它来给最终图形上色。
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Summary
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: As we color the network based on the communities we found (communities meaning
    highly interconnected subgraphs of the original network), we uncovered four major
    groups, each corresponding to specific sets of characters within the storyline.
    Not so surprisingly, the algorithm clustered together the main protagonist family
    with Jinx, Vi, and Vander (pink). Then, we also see the cluster of the underground
    figures of Zaun (blue), such as Silco, while the elite of Piltover (blue) and
    the militarist enforce (green) are also well-grouped together.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们根据发现的社区为网络着色时（社区指的是原始网络中的高度互联子图），我们揭示了四个主要群体，每个群体对应着故事情节中具体的一组角色。并不令人惊讶的是，算法将主角家庭与金克丝、维和范德（粉色）聚集在了一起。然后，我们还看到了扎恩地下人物（蓝色）的群体，如希尔科，而皮尔托弗的精英（蓝色）和军事执法（绿色）也被很好地分组在一起。
- en: The beauty and use of such community structures is that while such explanations
    put it in context very easily, usually, it would be very hard to come up with
    a similar map only based on intuition. While the methodology presented here clearly
    shows how we can use network science to extract the hidden connections of virtual
    (or real) social systems, let it be the partners of a law firm, the co-workers
    of an accounting firm, and the HR department of a major oil company.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这种社区结构的美妙之处和作用在于，虽然这样的解释可以非常容易地将其置于背景中，但通常仅凭直觉很难得出类似的图示。尽管此处呈现的方法清楚地展示了我们如何利用网络科学提取虚拟（或真实）社交系统的隐藏联系，无论是律师事务所的合伙人、会计师事务所的同事，还是一家大型石油公司的HR部门。
