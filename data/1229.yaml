- en: A Whimsical Journey Through Wait Times
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一次充满奇思妙想的等待时间之旅
- en: 原文：[https://towardsdatascience.com/a-whimsical-journey-through-wait-times-b02a41d337fc?source=collection_archive---------9-----------------------#2024-05-15](https://towardsdatascience.com/a-whimsical-journey-through-wait-times-b02a41d337fc?source=collection_archive---------9-----------------------#2024-05-15)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/a-whimsical-journey-through-wait-times-b02a41d337fc?source=collection_archive---------9-----------------------#2024-05-15](https://towardsdatascience.com/a-whimsical-journey-through-wait-times-b02a41d337fc?source=collection_archive---------9-----------------------#2024-05-15)
- en: From Microwave Countdowns to Never-Ending Call Holds, with Python
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从微波炉倒计时到永无止境的电话等待，使用 Python
- en: '[](https://medium.com/@carlmkadie?source=post_page---byline--b02a41d337fc--------------------------------)[![Carl
    M. Kadie](../Images/9dbe27c76e9567136e5a7dc587f1fb15.png)](https://medium.com/@carlmkadie?source=post_page---byline--b02a41d337fc--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b02a41d337fc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b02a41d337fc--------------------------------)
    [Carl M. Kadie](https://medium.com/@carlmkadie?source=post_page---byline--b02a41d337fc--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@carlmkadie?source=post_page---byline--b02a41d337fc--------------------------------)[![Carl
    M. Kadie](../Images/9dbe27c76e9567136e5a7dc587f1fb15.png)](https://medium.com/@carlmkadie?source=post_page---byline--b02a41d337fc--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b02a41d337fc--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b02a41d337fc--------------------------------)
    [Carl M. Kadie](https://medium.com/@carlmkadie?source=post_page---byline--b02a41d337fc--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b02a41d337fc--------------------------------)
    ·16 min read·May 15, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b02a41d337fc--------------------------------)
    ·阅读时间：16分钟·2024年5月15日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/f115c1bd71d609d4441bd795efbdcef4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f115c1bd71d609d4441bd795efbdcef4.png)'
- en: 'Waiting “on hold”, for popcorn, and for a lottery win — Source: [https://openai.com/dall-e-2/](https://openai.com/dall-e-2/).
    All other figures from the author.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 等待“保持等待”、等待爆米花、等待彩票中奖——来源：[https://openai.com/dall-e-2/](https://openai.com/dall-e-2/)。所有其他图像来自作者。
- en: Ever notice how microwave oven minutes march steadily toward zero, yet phone
    hold minutes stretch into eternity?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有没有注意到微波炉的倒计时总是稳定地向零逼近，而电话等待的分钟数却似乎无限延伸？
- en: 'Consider this: barely a minute into microwaving your popcorn, you’re gathering
    bowls to be ready to serve. But a minute into a call hold? You’re wondering if
    you’ll ever speak to a human again. Fast forward 10 minutes, and you are enjoying
    your popcorn. But on the phone? The hold music has become the soundtrack for an
    endless purgatory.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下：刚刚才开始微波爆米花不到一分钟，你已经开始准备碗盘等待盛放。但如果是电话等待呢？你会想自己是否还会和人类交谈。快进10分钟，你正在享受美味的爆米花。但在电话里呢？等待音乐已变成无尽地狱的配乐。
- en: And lurking in a twilight zone between waiting for popcorn and waiting on hold
    … your weekly lottery ticket. You wait for a win. Each week’s new ticket holds
    a fresh promise, a promise untouched by previous weekly disappointments.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 而在等待爆米花和等待电话接通之间的黄昏地带，潜伏着你的每周彩票。你等待着中奖。每周的新票都带来了新的希望，这个希望未曾被以往的失望所触碰。
- en: 'To summarize, there appears to be three disparate types of waiting:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，似乎有三种不同类型的等待：
- en: “On Hold”-Type — The longer you’ve waited, the longer you expect to wait.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “保持等待”-类型——你等待的时间越长，你预期的等待时间就越长。
- en: “Popcorn”-Type — The longer you’ve waited, the less you expect to wait.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “爆米花”-类型——你等待的时间越长，你预期的等待时间就越短。
- en: “Lottery Win”-Type — Regardless of your wait so far, your expected wait remains
    the same.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “彩票中奖”-类型——不管你目前等了多久，你预期的等待时间依然不变。
- en: Are these disparities in wait-times genuine, or a trick of the mind? We’ll answer
    this question in two parts.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些等待时间的差异是真实存在的，还是大脑的错觉？我们将分两部分来回答这个问题。
- en: Part 1 — Analyzing Data
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一部分 — 数据分析
- en: Part 2 — Modeling Data
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二部分 — 数据建模
- en: For each part, we’ll look at each type of waiting, alternating between detailed
    Python code and a discussion. If you are interested in Python, read the code sections.
    If you are only interested in learning about wait times, you may skip over the
    code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个部分，我们将依次查看每种类型的等待，交替展示详细的 Python 代码和讨论。如果你对 Python 感兴趣，可以阅读代码部分。如果你只对等待时间的学习感兴趣，可以跳过代码部分。
- en: 'Part 1: Analyzing Data'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第一部分：数据分析
- en: “On Hold”-Type Waits — The longer you’ve waited, the longer you expect to wait.
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “保持等待”-类型的等待——你等待的时间越长，你预期的等待时间就越长。
- en: We’d like to start with data, but I don’t have data for “on hold” times. So,
    instead, how about the time between edits of a computer file? One place that I
    see such edit times is on Wikipedia.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望从数据开始，但我没有“等待中”时间的数据。那么，如何考虑计算机文件的编辑时间呢？我看到这种编辑时间的一个地方是在Wikipedia上。
- en: Suppose I place you on a Wikipedia page. Can you look at just the time since
    the last edit and predict how long until the next edit?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我把你放到一个Wikipedia页面上。你能仅通过查看上次编辑的时间来预测下次编辑的时间吗？
- en: 'Aside 1: No fair editing the page yourself.'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 旁白1：不可以自己编辑页面。
- en: 'Aside 2: Analogously, if I somehow place you “on hold” for some number of minutes
    (so far), can you predict how much longer until the call is re-connected?'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 旁白2：类似地，如果我以某种方式让你“等待”了一些分钟（到目前为止），你能预测多久之后通话会重新连接吗？
- en: 'For Wikipedia page edits, how might you express your prediction of the time
    until the next edit? You could try to predict the **exact** moment of the next
    edit, for example: “I predict this page will next be edited in exactly 5 days,
    3 hours, 20 minutes” That, however, seems too specific, and you’d nearly always
    be wrong.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Wikipedia页面的编辑，你如何表达对下次编辑时间的预测呢？你可以尝试预测下次编辑的**准确**时刻，例如：“我预测这个页面将在确切的5天3小时20分钟后被编辑。”然而，这样似乎太具体了，而且几乎总是错误的。
- en: 'You could predict a range of times: “I predict this page will be next edited
    sometime between now and 100 years from now”. That would nearly always be right
    but is vague and uninteresting.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以预测一个时间范围：“我预测这个页面将在现在到100年内的某个时间点被编辑。”这几乎总是正确的，但很模糊且不有趣。
- en: 'A more practical prediction takes the form of the “median next-edit time”.
    You might say: “I predict a 50% chance that this page will be edited within the
    next 5 days, 3 hours, 20 minutes.” I, your adversary, would then pick “before”
    or “after”. Suppose I think the real median next-edit time is 3 days. I would
    then pick “before”. We then wait up to 5 days, 3 hours, 20 minutes. If anyone
    (again, other than us) edits the page in that time, I get a point; otherwise,
    you get a point. With this scoring system, if you’re a better predictor than I,
    you should earn more points.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 更实际的预测形式是“中位数下一次编辑时间”。你可能会说：“我预测50%的概率，这个页面将在接下来的5天3小时20分钟内被编辑。”我，你的对手，会选择“之前”或“之后”。假设我认为实际的中位数下一次编辑时间是3天，那么我会选择“之前”。然后我们等待最多5天3小时20分钟。如果在这段时间内（再次，除了我们之外）有人编辑了页面，我得1分；否则，你得1分。通过这种计分系统，如果你比我更擅长预测，你应该获得更多的分数。
- en: 'Let’s next dive into Python and see how we might make such predictions:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来让我们深入Python，看看我们如何进行这样的预测：
- en: “On Hold”-Type Waits — Python
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “等待中”类型的等待——Python
- en: 'Consider the Wikipedia article about the artist Marie Cochran. We can look
    at the article’s [revision history](https://en.wikipedia.org/w/index.php?title=Marie_Cochran&action=history):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一下关于艺术家Marie Cochran的Wikipedia文章。我们可以查看该文章的[修订历史](https://en.wikipedia.org/w/index.php?title=Marie_Cochran&action=history)：
- en: '![](../Images/73cb643a251b40fd0dfd20c22cdb0e8a.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/73cb643a251b40fd0dfd20c22cdb0e8a.png)'
- en: Screen capture from Wikipedia. Subsequent figures from author.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Wikipedia的屏幕截图。后续图像来自作者。
- en: 'To gather such data from various Wikipedia articles, I wrote a little Python
    script that:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从各种Wikipedia文章中收集这些数据，我写了一个小Python脚本，它：
- en: Picks a random English-language Wikipedia page via `[https://en.wikipedia.org/wiki/Special:Random](https://en.wikipedia.org/wiki/Special:Random)`.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过`[https://en.wikipedia.org/wiki/Special:Random](https://en.wikipedia.org/wiki/Special:Random)`随机选择一个英文Wikipedia页面。
- en: Goes to that page’s revision history, for example, `[https://en.wikipedia.org/w/index.php?title=Marie_Cochran&action=history](https://en.wikipedia.org/w/index.php?title=Marie_Cochran&action=history)`.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到该页面的修订历史，例如，`[https://en.wikipedia.org/w/index.php?title=Marie_Cochran&action=history](https://en.wikipedia.org/w/index.php?title=Marie_Cochran&action=history)`。
- en: Pulls out the date and times of (up to the) last 50 edits. Times are to the
    resolution of a minute.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取（最多）最后50次编辑的日期和时间。时间精确到分钟。
- en: Creates lines made up of the article title, an edit time, and the time of the
    script’s run. All times use the UTC time zone. Tabs separate columns.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建由文章标题、编辑时间和脚本运行时间组成的行。所有时间都使用UTC时区。制表符分隔列。
- en: Appends the lines to a file.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将行追加到文件中。
- en: 'Aside: This approach brings up several issues. First, in what sense `Special:Random`
    random? I don’t know. For the purpose of this demonstration, it seems random enough.
    Why up-to-the-last 50 edits? Why not all the edits? Why not just the most recent
    edit? I don’t have a good reason beyond “up-to-the-last 50” is the default and
    works well enough for this article. Finally, why script against the regular Wikipedia
    server when we could instead retrieve the **full** edit history for **all** articles
    from `[https://dumps.wikimedia.org](https://dumps.wikimedia.org/)`? Because we
    only need a sample. Also, writing this script was easy, but writing a program
    to process the full data would be hard. Sadly, I will not share the easy script
    because I don’t want to enable uncontrolled bots hitting the Wikipedia site. Happily,
    I am sharing on [GitHub](https://raw.githubusercontent.com/CarlKCarlK/wait-times/main/edit_history.txt)
    all the data I collected. You may use it as you wish.'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 旁白：这种方法提出了几个问题。首先，`Special:Random`究竟是什么意思“随机”？我不知道。就这个演示而言，它似乎足够随机。为什么是最后50次编辑？为什么不是所有编辑？为什么不是最新的一次编辑？除了“最后50次”是默认值，并且对这篇文章效果不错，我没有更好的理由。最后，为什么要在常规的维基百科服务器上编写脚本，而我们本可以从`[https://dumps.wikimedia.org](https://dumps.wikimedia.org/)`获取**所有**文章的**完整**编辑历史？因为我们只需要一个样本。此外，编写这个脚本很容易，但编写一个处理完整数据的程序会很难。遗憾的是，我不会分享这个简单的脚本，因为我不想让不受控制的机器人访问维基百科网站。幸运的是，我将我收集的所有数据共享在[GitHub](https://raw.githubusercontent.com/CarlKCarlK/wait-times/main/edit_history.txt)上。你可以根据需要使用它。
- en: 'Here is a fragment of the edit time data:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是编辑时间数据的一个片段：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s read this into a Pandas dataframe and compute `Time Delta`, the wait
    times between edits:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其读取到一个Pandas数据框中，并计算`时间差`，即编辑之间的等待时间：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The resulting Pandas dataframe starts with the alphabetically-first article
    (among those sampled). That article tells readers about [Öndör Gongor](https://en.wikipedia.org/wiki/%C3%96nd%C3%B6r_Gongor),
    a very tall person from Mongolia:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的Pandas数据框从字母表中最先的文章开始（在这些采样中）。该文章介绍了来自蒙古的非常高的[Öndör Gongor](https://en.wikipedia.org/wiki/%C3%96nd%C3%B6r_Gongor)。
- en: '![](../Images/f684364a802b3584aa6e528df26fefb4.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f684364a802b3584aa6e528df26fefb4.png)'
- en: Within that article’s last 50 edits, we first see an edit on January 27th, 2008,
    at 3:13 PM (UTC). We next see an edit 16 minutes later. The edit after that occurs
    within a minute (the limit of the data’s resolution) and so shows `0 days 00:00:00`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在该文章的最后50次编辑中，我们首先看到2008年1月27日下午3:13（UTC）进行了一次编辑。接下来，我们看到16分钟后又进行了一次编辑。之后的编辑发生在一分钟内（数据分辨率的限制），因此显示为`0天
    00:00:00`。
- en: 'Continuing our processing, let’s drop the `NaT` (not-a-time) rows that appear
    at the start of each article. We’ll also sort by the wait times and reset Panda’s
    index:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 继续处理，让我们删除每篇文章开始时出现的`NaT`（不是时间）行。我们还将按等待时间排序，并重置Pandas的索引：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This produces a dataframe that start and ends like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成一个数据框，其开始和结束如下：
- en: '![](../Images/4a429039bac77612e79f5cd06d2c6745.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a429039bac77612e79f5cd06d2c6745.png)'
- en: 'with this statistical summary:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 带有这个统计摘要：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We see that the sampled wait times vary from `0 days 00:00:00` (so, less than
    a minute) to over 13 years. (The 13 year edit wait was for an article about [a
    building at a Virginia university](https://en.wikipedia.org/wiki/The_Rotunda_(Longwood_University)).)
    One quarter of the edits happen within 27 minutes of a previous edit. The median
    time between edits is just over 15 days.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，采样的等待时间从`0天 00:00:00`（即不到一分钟）到超过13年不等。（这13年的编辑等待时间是在一篇关于[弗吉尼亚大学一座建筑](https://en.wikipedia.org/wiki/The_Rotunda_(Longwood_University))的文章中。）四分之一的编辑发生在前一次编辑后的27分钟内。编辑之间的中位时间稍微超过15天。
- en: 'Before we go farther, I want to improve the display of wait times with a little
    function:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我想通过一个小函数来改进等待时间的显示：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `seconds_to_text` function displays 100 seconds as `'1m 40s'`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`seconds_to_text`函数将100秒显示为`''1m 40s''`。'
- en: With this we can construct a “wait wait” table for the Wikipedia data. Given
    the wait so far for the next edit on an article, the table tells our median additional
    wait. (Recall that “median” means that half the time, we expect to wait less than
    this time for an edit. The other half of the time, we expect to wait more than
    this time.)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，我们可以为维基百科数据构建一个“等待等待”表格。给定到下次编辑的等待时间，该表格告诉我们中位数的额外等待时间。（回忆一下，“中位数”意味着一半时间内，我们预计等待时间会少于此时的等待时间，另外一半时间，我们预计等待时间会更长。）
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We’ll discuss the output of this table next.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们将讨论这个表格的输出。
- en: “On Hold”-Type Waits — Discussion
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “等待中”-类型等待 — 讨论
- en: The preceding Python code produces this table. Call it a “wait-wait” table.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的Python代码生成了这个表格。我们称之为“等待-等待”表格。
- en: '![](../Images/7a64fcdaa5c9e78090147ec0fe2295f8.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7a64fcdaa5c9e78090147ec0fe2295f8.png)'
- en: The table says that if we haven’t waited at all (in other words, someone just
    edited the page), we can anticipate the next edit in just over 15 days. However,
    if after a minute, no one has edited the article again, we can anticipate a wait
    of 19 days. Thus, waiting one minute leads to almost 4 days more of additional
    expected waiting. If, after one hour, no one has edited the article, our anticipated
    additional wait more-than-doubles to 47 days.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 表格显示，如果我们完全没有等待过（换句话说，有人刚刚编辑了页面），我们可以预期下一个编辑将在15天左右发生。然而，如果在一分钟后，没有人再次编辑文章，我们可以预期等待19天。因此，等待一分钟会导致额外增加近4天的预期等待时间。如果在一小时后仍没有人编辑文章，我们的预期额外等待时间将增加到47天，几乎是原来的两倍。
- en: 'Aside: When I use the term ‘anticipate’ in this context, I’m referring to the
    median waiting time derived from our historical data. In other words, based on
    past trends, we bet that half of the very next edits will occur sooner than this
    time frame, and half will occur later.'
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 旁注：当我在这个语境中使用“预测”一词时，我指的是从我们的历史数据中推导出的中位等待时间。换句话说，基于过去的趋势，我们预测下一个编辑会在这个时间框架内发生的一半编辑会更早，而另一半则会更晚。
- en: 'One way to think about this phenomenon: When we start our wait for the next
    edit, we don’t know what kind of page we are on. Is this an article about a hot
    pop-culture topic such as `[Taylor Swift](https://en.wikipedia.org/w/index.php?title=Taylor_Swift&action=history)`?
    Or is this an article about a niche, slow-moving topic such as [The Rotunda, a
    building at a 5000-student university](https://en.wikipedia.org/w/index.php?title=The_Rotunda_%28Longwood_University%29&action=history).
    With every minute that passes without an edit, the probabilities shift from this
    being a Taylor-Swift-like article and toward a The-Rotunda-like article.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一种思考这种现象的方式是：当我们开始等待下一个编辑时，我们并不知道我们处于什么类型的页面上。这是一个关于热门流行文化话题的文章，如[泰勒·斯威夫特](https://en.wikipedia.org/w/index.php?title=Taylor_Swift&action=history)？还是一个关于冷门、变化缓慢话题的文章，如[圆顶楼，一个有5000名学生的大学的建筑](https://en.wikipedia.org/w/index.php?title=The_Rotunda_%28Longwood_University%29&action=history)？随着每一分钟的过去，如果没有编辑，概率会从这是一个像泰勒·斯威夫特这样的文章转向类似圆顶楼的文章。
- en: Likewise, when we call customer service and are put on hold — at the start we
    don’t know what kind of customer service we are waiting on. With every passing
    minute, however, we learn that we are likely waiting for poor, slow customer service.
    Our anticipated additional wait, thus, grows.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，当我们拨打客户服务电话并被置于等待时——刚开始时，我们并不知道我们在等待什么样的客户服务。然而，随着每一分钟的过去，我们会意识到我们可能在等待的是糟糕且缓慢的客户服务。因此，我们预测的额外等待时间会增加。
- en: 'Up to this point, we have used the data directly. We can also try to model
    the data with a probability distribution. Before we move to modeling, however,
    let’s look at our other two examples: microwaving popcorn and waiting for a lotto
    win.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经直接使用了数据。我们也可以尝试用概率分布来建模数据。然而，在我们进入建模之前，让我们看看另外两个例子：微波爆米花和等待彩票中奖。
- en: “Popcorn”-type Waits — The longer you’ve waited, the less you expect to wait.
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “爆米花”类型的等待——等待时间越长，你的期望等待时间越短。
- en: Let’s apply the techniques from waiting for Wikipedia edits to waiting for microwave
    popcorn. Rather than collecting real data (as delicious as that might be), I’m
    content to simulate data. We’ll use a random number generator. We assume that
    the time to cook, perhaps based on a sensor, is 5 minutes plus or minus 15 seconds.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将等待Wikipedia编辑的技巧应用到等待微波爆米花上。与其收集真实数据（尽管那样可能很美味），我更愿意模拟数据。我们将使用一个随机数生成器。我们假设烹饪时间，大概基于传感器，是5分钟加减15秒。
- en: “Popcorn”-type Waits — Python
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “爆米花”类型的等待——Python
- en: 'Specifically in Python:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中具体实现：
- en: '[PRE6]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Which produces a Panda dataframe with this statistical summary:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成一个包含统计摘要的Panda数据框：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As expected, when generating data from this normal distribution, the mean is
    5 minutes, and the standard deviation is about 15 seconds. Our simulated waits
    range from 3 minutes 52 seconds to 6 minutes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，当从这个正态分布中生成数据时，均值是5分钟，标准差大约是15秒。我们的模拟等待时间从3分52秒到6分钟不等。
- en: 'We can now generate a “wait-wait” table:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以生成一个“等待-等待”表格：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: “Popcorn”-type Waits — Discussion
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “爆米花”类型的等待——讨论
- en: 'Our “wait-wait” table for popcorn looks like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的“等待-等待”表格对于爆米花是这样的：
- en: '![](../Images/04468d41f7961a6b20b39e48fa20a444.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/04468d41f7961a6b20b39e48fa20a444.png)'
- en: Our table says that at the beginning, we expect a 5-minute wait. After we wait
    for 10 seconds, our additional expected wait falls exactly 10 seconds (to 4 minutes
    50 seconds). After we wait one minute, our additional wait falls to 4 minutes
    and so on. At 5 minutes, the anticipated additional wait continues to go down
    (but not to zero).
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表格显示，刚开始时，我们预计等待5分钟。在等待10秒钟后，我们的额外等待时间减少了恰好10秒钟（到4分钟50秒）。等待1分钟后，我们的额外等待时间降至4分钟，依此类推。等待5分钟时，预计的额外等待时间继续下降（但不会降至零）。
- en: In a later section, we’ll see how to model this data. For now, let’s look next
    at waiting for a lottery win.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在稍后的部分，我们将看到如何对这些数据进行建模。目前，接下来我们来看等待彩票中奖。
- en: “Lottery Win”-Style Waits — Regardless of your wait so far, your expected wait
    remains the same.
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “彩票中奖”式的等待 —— 不论你等待了多久，你的预计等待时间仍然保持不变。
- en: For lottery data, I’m again comfortable creating simulated data. The Washington
    State Lotto offers odds of 1 to 27.1 for a win. (The most common win, pays $3
    for a $1 bet.) Let’s play the lotto for 1 million weeks (about 19,000 years) and
    collect data on our waits between wins.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于彩票数据，我再次愿意创建模拟数据。华盛顿州乐透的获胜几率是1比27.1。（最常见的中奖，投注1美元赢得3美元。）我们将玩1百万周的彩票（约19,000年），并收集我们每次获胜之间的等待数据。
- en: “Lottery Win”-Style Waits — Python
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “彩票中奖”式的等待 —— Python
- en: 'We simulate 1 million weeks of lotto play:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们模拟了1百万周的彩票游戏：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Our shortest possible interval between wins is 7 days. Our longest simulated
    dry spell is over 6 years. Our median wait is 133 days.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们两次获胜之间的最短间隔是7天。我们模拟的最长干旱期超过6年。我们的中位等待时间是133天。
- en: 'We generate the “wait-wait” table with:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下方式生成“等待-等待”表格：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: “Lottery Win”-Style Waits — Discussion
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: “彩票中奖”式的等待 —— 讨论
- en: 'Here is the “wait-wait” table:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是“等待-等待”表格：
- en: '![](../Images/091b3e4d2b53a58d7f313e50ed5b2d4e.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/091b3e4d2b53a58d7f313e50ed5b2d4e.png)'
- en: The table shows that the lotto doesn’t care how long we’ve waited for a win.
    Whether we just won (`Wait So Far < 1s`) or haven’t won for a year, our anticipated
    additional wait until our next win is almost always between 126 days and 133 days.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 表格显示，彩票不会在乎我们为获胜等待了多久。不管我们是刚刚中奖（`等待时间 < 1秒`）还是一年没有中奖，我们预期的下一次中奖的额外等待时间几乎总是在126天到133天之间。
- en: 'Three entries on the table might seem strange. What do you think is going on
    at `7d` and `7d 1s`? Why does the additional wait jump, almost instantly from
    126 days to about 133 days? The answer is at the moment of the weekly drawing,
    the minimum wait for a win shifts from 0 days to 7 days. And what about `5y`?
    Is this showing that if we wait 5 years, we can anticipate a win in just 50 days,
    much less than the usual 133 days? Sadly, no. Rather it shows the limitation of
    our data. In the data, we only see 5-year waits three times:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 表格中的三个条目可能看起来很奇怪。你认为`7d`和`7d 1s`发生了什么？为什么额外的等待时间几乎瞬间从126天跃升至大约133天？答案是，在每周抽奖的时刻，最短的等待时间从0天变为7天。那么`5y`呢？这是否表明，如果我们等待5年，我们可以在50天内预期中奖，这远低于通常的133天？可惜，不是。相反，它显示了我们数据的局限性。在数据中，我们只看到过3次5年的等待：
- en: '[PRE12]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/5d73f7a2e2968fecd5ad995b1a9d3498.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5d73f7a2e2968fecd5ad995b1a9d3498.png)'
- en: Three values lead to a noisy estimate of the median.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 三个数值导致了一个嘈杂的中位数估计。
- en: 'To summarize what we’ve seen so far in real and simulated data:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下我们迄今在真实数据和模拟数据中看到的情况：
- en: Wikipedia Edits —The longer you’ve waited, the longer you expect to wait
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维基百科编辑 —— 你等待的时间越长，你期望等待的时间就越长
- en: Popcorn — The longer you’ve waited, the less you expect to wait
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 爆米花 —— 你等待的时间越长，你期望等待的时间越短
- en: Lottery Wins— Regardless of your wait so far, your expected wait remains the
    same
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 彩票中奖 —— 不论你等待了多久，你的预计等待时间仍然保持不变
- en: In the next section, we’ll look at the hows and (importantly) the whys of modeling.
    We’ll start with our lotto data.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，我们将探讨建模的方式和（更重要的）原因。我们将从我们的乐透数据开始。
- en: 'Part 2: Modeling Data'
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 第2部分：数据建模
- en: In this part, we’ll try to find simple expressions for wait-time predictions.
    Such simplicity is not needed for predictions. What we’ve created so far, called
    an *empirical distribution*, works fine. A simpler expression can, however, be
    more convenient. Also, it may make comparisons between different types of waits
    easier to understand.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将尝试为等待时间预测找出简单的表达式。这种简化对预测来说并非必需。到目前为止，我们创建的叫做*经验分布*，效果很好。然而，简单的表达式可能更方便。此外，它可能使不同类型的等待之间的比较更容易理解。
- en: We will proceed by looking at our three examples starting with the simplest
    (Lottery Wins) to the most complex (Wikipedia Edits). As before, I’ll alternate
    between Python code (that you can skip over) and discussion.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将依次查看三个示例，从最简单的（彩票中奖）到最复杂的（维基百科编辑）。像之前一样，我将在Python代码（你可以跳过）和讨论之间交替进行。
- en: We’ll start by adding a cumulative distribution column to our three wait-time
    dataframes. Recall that we previously sorted the dataframes by `Time Delta`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从为我们的三个等待时间数据框添加一个累积分布列开始。回想一下，我们之前已根据`Time Delta`对数据框进行了排序。
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The column labeled `CDF`, for cumulative distribution function, contains values
    near 0.0 for the shortest wait times and a value of 1.0 for the longest wait time.
    In other words, it is the rank of each row expressed as a fraction. The Wikipedia
    dataframe now looks like:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 标记为`CDF`的列，即累积分布函数，包含对于最短等待时间接近0.0的值，以及对于最长等待时间接近1.0的值。换句话说，它是每一行的排名，以分数形式表示。现在，维基百科的数据框看起来是这样的：
- en: '![](../Images/f87f0a93e618e63753f80656682b2bfe.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f87f0a93e618e63753f80656682b2bfe.png)'
- en: 'We can now plot `CDF` (y-axis) vs. the wait time `Time Delta` (x-axis). Here
    is some plotting code in Python:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以绘制`CDF`（y轴）与等待时间`Time Delta`（x轴）的关系图。以下是用Python绘制的代码：
- en: '[PRE14]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is the CDF plot of Lottery Wins with wait time on a log scale:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这是彩票中奖的CDF图，等待时间以对数刻度显示：
- en: '![](../Images/eba178ed8ad2f3e946719a620171f932.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eba178ed8ad2f3e946719a620171f932.png)'
- en: The curve looks simple so let’s try to fit a simple curve to it. The obvious
    candidate curve is the exponential distribution. It’s the simplest common function
    related to wait times.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这条曲线看起来很简单，所以让我们尝试拟合一条简单的曲线。显然的候选曲线是指数分布。它是与等待时间相关的最简单的常见函数。
- en: Python’s `scipy.stats` package makes it easy to fit an exponential curve to
    our data and to represent the resulting curve as a Python object, here named `lotto_expon_dist`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`scipy.stats`包使得将指数曲线拟合到我们的数据并将结果曲线表示为Python对象变得非常容易，这里命名为`lotto_expon_dist`。
- en: '[PRE15]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This code prints:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码输出：
- en: '`Lottery wins exponential median is 131d 22h 32m 20s. The scale parameter is
    190d 8h 21m.`'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`彩票中奖指数分布的中位数是131天22小时32分钟20秒。scale参数为190天8小时21分钟。`'
- en: The median of the fitted curve, about 132 days, is close to the empirical median
    of 133 days. By convention, we parameterize an exponential curve with a single
    number, here called `scale`. It corresponds to the mean of the distribution, but
    we can easily determine median from mean and vice versa.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 拟合曲线的中位数大约是132天，接近实际的中位数133天。根据惯例，我们用一个单一的数字来参数化指数曲线，这里称为`scale`。它对应于分布的均值，但我们可以很容易地通过均值和中位数相互转换。
- en: 'Here is a plot of the empirical CDF and fitted CDF for Lottery Wins:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是彩票中奖的经验CDF与拟合CDF图：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/b6e0a0cf0a28750d18f06ed80a26079d.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b6e0a0cf0a28750d18f06ed80a26079d.png)'
- en: They match closely. The slight mismatch on the left is caused by the instant
    7-day jump at the moment of the lottery drawing. We’ll ignore this tiny mismatch
    in this article.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 它们非常匹配。左侧的轻微不匹配是由于在抽奖时刻瞬间发生的7天跳跃所致。我们将在本文中忽略这一微小的不匹配。
- en: Exponential works well on our (simulated) lottery win data. Let’s see how it
    works on our Popcorn and Wikipedia data. Here is the code to fit an exponential
    distribution to these dataframes.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 指数分布在我们的（模拟的）彩票中奖数据上表现良好。让我们看看它在我们的爆米花和维基百科数据上如何表现。这里是将指数分布拟合到这些数据框的代码。
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And here are the plots:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是图表：
- en: '![](../Images/83422f297200848b69f412cce3ecb918.png)![](../Images/c9442dbe769a11121b8f180276b80f6c.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/83422f297200848b69f412cce3ecb918.png)![](../Images/c9442dbe769a11121b8f180276b80f6c.png)'
- en: Yikes, these curve fits are terrible! The problem is that exponential distributions
    *only* model “Lottery-Win”-like data. Specifically, waits in which regardless
    of your wait so far, your expected wait remains the same. Because the exponential
    distribution fits waits that ignore your wait so far, it is called *memoryless*.
    Moreover, among continuous distributions, the exponential distribution is the
    *only* memoryless distribution.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，这些曲线拟合得很糟糕！问题在于指数分布*仅*适用于类似“彩票中奖”类型的数据。具体来说，是适用于等待时间中，不管你已经等待了多久，你的期望等待时间始终不变的情况。由于指数分布拟合的是忽略当前等待时间的数据，因此它被称为*无记忆*。而且，在连续分布中，指数分布是*唯一*无记忆的分布。
- en: But what if we need our distribution to have memory? The next simplest distribution
    to try is the Weibull distribution.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果我们需要让我们的分布具有记忆性呢？下一个最简单的分布是威布尔分布。
- en: 'Two parameters, `shape` and `scale` parameterize a Weibull. Let’s give it a
    try starting with the lottery data:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 两个参数，`shape`和`scale`，用来参数化威布尔分布。让我们从彩票数据开始尝试：
- en: '[PRE18]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This produces a fitted curve that looks like the exponential. Indeed, when `shape`
    is 1, a Weibull distribution **is** an exponential distribution. Here shape is
    1.06.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这产生了一个拟合曲线，看起来像指数分布。事实上，当`shape`为1时，威布尔分布**就是**一个指数分布。这里形状参数为1.06。
- en: '![](../Images/de58306913bf8afdcc66e9fc78bd423f.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de58306913bf8afdcc66e9fc78bd423f.png)'
- en: What happens when we try to fit a Weibull to our Popcorn data?
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试将威布尔分布拟合到我们的爆米花数据时，会发生什么呢？
- en: '[PRE19]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](../Images/fcfbcaf877b73111e0f8e805369e1232.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fcfbcaf877b73111e0f8e805369e1232.png)'
- en: 'While not perfect, this fit is much better than the exponential’s fit. Notice
    the shape parameter’s value of 20\. When a Weibull’s shape parameter is greater
    than 1, it indicates: “the longer you’ve waited, the less you expect to wait”.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是完美的，但这个拟合比指数分布的拟合要好得多。注意形状参数的值为20。当威布尔分布的形状参数大于1时，它表明：“你等待的时间越长，你预期的等待时间越短。”
- en: Finally, let’s try the Weibull on the Wikipedia data.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们尝试在维基百科数据上应用威布尔分布。
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](../Images/507d924fff7d2bc30c6aeca9d9d54958.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/507d924fff7d2bc30c6aeca9d9d54958.png)'
- en: This curve fit is less than perfect, but still much better than the exponential’s
    fit. Notice the shape parameter value of 0.292\. When a Weibull’s shape parameter
    is less than 1 that indicates that “the longer you’ve waited, the longer you expect
    to wait”. However, the Weibull is not unique in this. An infinite number of distributions
    also have this property. Indeed, the empirical Wikipedia distribution has this
    property but is not a Weibull.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个曲线拟合不完美，但仍然比指数分布的拟合要好得多。注意形状参数的值是0.292。当威布尔分布的形状参数小于1时，这意味着“你等待的时间越长，你预期的等待时间也越长”。然而，威布尔分布在这方面并不独特。无数其他分布也具备这个特性。事实上，经验性的维基百科分布具有这个特性，但它并不是一个威布尔分布。
- en: 'Aside: I don’t know of a better simple model for the Wikipedia data. The empirical
    curve looks only a little more complicated than the Weibull. Perhaps we just need
    to identify (or invent) a slightly more general distribution with one or two additional
    parameters.'
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 附注：我不知道有比维基百科数据更好的简单模型。经验曲线看起来比威布尔分布稍微复杂一些。也许我们只需要确定（或发明）一个稍微更一般的分布，带有一两个额外的参数。
- en: Conclusion
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In conclusion, you and I are not (necessarily) crazy.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，你和我并不（一定）疯狂。
- en: We have seen that there really are situations for which the longer you have
    waited, the longer you should expect to wait. We see it empirically in the times
    between Wikipedia edits. We also see it in the Weibull distribution when the shape
    parameter is less than 1.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，确实有一些情况，当你等待的时间越长，你应该预期等待的时间也越长。我们在维基百科编辑之间的时间中经验性地看到了这一点。当威布尔分布的形状参数小于1时，我们也可以看到这一点。
- en: Likewise, for some other waits, “The longer you’ve waited, the less you expect
    to wait”. We see that for popcorn. We also see it in the Weibull distribution
    when the shape parameter is greater than 1.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于其他一些等待，“你等待的时间越长，你预期的等待时间越短”。我们在爆米花中看到了这一点。当威布尔分布的形状参数大于1时，我们也看到了这一点。
- en: 'Finally, there exists a third class of waits: memoryless. For these, regardless
    of your wait so far, your expected wait remains the same. We saw this with the
    time between lottery wins. It also corresponds to a Weibull distribution with
    a shape parameter of 1 (which is the same as an exponential distribution).'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，存在第三类等待：无记忆等待。对于这些，无论你等待了多长时间，你的预期等待时间始终保持不变。我们在彩票中奖之间的时间间隔中看到了这一点。这也对应于一个形状参数为1的威布尔分布（这与指数分布相同）。
- en: When you have wait data to analyze, I recommend trying a Weibull distribution.
    Python makes fitting such a curve easy. However, if your data doesn’t fit the
    Weibull well, don’t use the Weibull. Instead, let your data speak for itself by
    using your empirical distribution directly.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有等待数据需要分析时，我建议尝试使用威布尔分布。Python使得拟合这样的曲线变得简单。然而，如果你的数据不适合威布尔分布，千万不要使用威布尔分布。相反，让你的数据自行发声，直接使用你的经验分布。
- en: Thank you for joining me on this journey into wait times. I hope you now better
    understand wait times and their analysis.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢你和我一起探索等待时间的旅程。希望你现在能更好地理解等待时间及其分析。
- en: '*Please* [*follow Carl on Medium*](https://medium.com/@carlmkadie)*. I write
    on scientific programming in Rust and Python, machine learning, and statistics.
    I tend to write about one article per month.*'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '*请* [*在Medium上关注Carl*](https://medium.com/@carlmkadie)*。我写关于Rust和Python中的科学编程、机器学习和统计学的文章。我通常每个月写一篇文章。*'
