- en: How to Interpret Matrix Expressions — Transformations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何解释矩阵表达式 — 变换
- en: 原文：[https://towardsdatascience.com/how-to-interpret-matrix-expressions-transformations-a5e6871cd224?source=collection_archive---------2-----------------------#2024-12-04](https://towardsdatascience.com/how-to-interpret-matrix-expressions-transformations-a5e6871cd224?source=collection_archive---------2-----------------------#2024-12-04)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-interpret-matrix-expressions-transformations-a5e6871cd224?source=collection_archive---------2-----------------------#2024-12-04](https://towardsdatascience.com/how-to-interpret-matrix-expressions-transformations-a5e6871cd224?source=collection_archive---------2-----------------------#2024-12-04)
- en: Matrix algebra for a data scientist
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据科学家的矩阵代数
- en: '[](https://medium.com/@jaroslaw.drapala?source=post_page---byline--a5e6871cd224--------------------------------)[![Jaroslaw
    Drapala](../Images/34de3c52fc32005e36930135254ae45e.png)](https://medium.com/@jaroslaw.drapala?source=post_page---byline--a5e6871cd224--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a5e6871cd224--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a5e6871cd224--------------------------------)
    [Jaroslaw Drapala](https://medium.com/@jaroslaw.drapala?source=post_page---byline--a5e6871cd224--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@jaroslaw.drapala?source=post_page---byline--a5e6871cd224--------------------------------)[![Jaroslaw
    Drapala](../Images/34de3c52fc32005e36930135254ae45e.png)](https://medium.com/@jaroslaw.drapala?source=post_page---byline--a5e6871cd224--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a5e6871cd224--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a5e6871cd224--------------------------------)
    [Jaroslaw Drapala](https://medium.com/@jaroslaw.drapala?source=post_page---byline--a5e6871cd224--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a5e6871cd224--------------------------------)
    ·23 min read·Dec 4, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a5e6871cd224--------------------------------)
    ·阅读时间：23分钟·2024年12月4日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/4070d1bfcdecc387b4685ebc7c1ab93b.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4070d1bfcdecc387b4685ebc7c1ab93b.png)'
- en: Photo by [Ben Allan](https://unsplash.com/@ballonandon?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Ben Allan](https://unsplash.com/@ballonandon?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: This article begins a series for anyone who finds matrix algebra overwhelming.
    My goal is to turn *what you’re afraid of* into *what you’re fascinated by*. You’ll
    find it especially helpful if you want **to understand machine learning concepts
    and methods**.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本文开启了一个系列，专为那些觉得矩阵代数让人感到压倒性的人准备。我的目标是将*你害怕的东西*转变为*你着迷的东西*。如果你想**理解机器学习的概念和方法**，你会发现这篇文章特别有帮助。
- en: '**Table of contents:**'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**目录：**'
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 介绍
- en: Prerequisites
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前提条件
- en: Matrix-vector multiplication
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 矩阵-向量乘法
- en: Transposition
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转置
- en: Composition of transformations
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变换的组合
- en: Inverse transformation
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逆变换
- en: Non-invertible transformations
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不可逆变换
- en: Determinant
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 行列式
- en: Non-square matrices
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非方阵
- en: 'Inverse and Transpose: similarities and differences'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 逆矩阵和转置：相似性与差异
- en: Translation by a vector
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向量平移
- en: Final words
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 结语
- en: 1\. Introduction
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 介绍
- en: You’ve probably noticed that while it’s easy to find materials explaining matrix
    computation algorithms, it’s harder to find ones that teach **how to interpret
    complex matrix expressions**. I’m addressing this gap with my series, focused
    on **the part of matrix algebra that is most commonly used by data scientists**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，虽然很容易找到解释矩阵计算算法的材料，但要找到教授**如何解释复杂矩阵表达式**的资料却更加困难。我通过我的系列文章来填补这个空白，专注于**数据科学家最常用的矩阵代数部分**。
- en: 'We’ll focus more on concrete examples rather than general formulas. I’d rather
    sacrifice generality for the sake of clarity and readability. I’ll often appeal
    to your imagination and intuition, hoping my materials will inspire you to explore
    more formal resources on these topics. For precise definitions and general formulas,
    I’d recommend you look at some good textbooks: the classic one on linear algebra¹
    and the other focused on machine learning².'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更多地关注具体的例子，而不是一般的公式。我宁愿牺牲一般性，以确保清晰性和可读性。我将经常启发你的想象力和直觉，希望我的材料能激发你探索这些主题的更正式资源。对于精确的定义和一般公式，我建议你查阅一些优秀的教科书：经典的线性代数书籍¹和专注于机器学习的另一部著作²。
- en: This part will teach you
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分将教授你
- en: to see a matrix as a representation of the transformation applied to data.
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 将矩阵视为对数据应用的变换的表示。
- en: Let’s get started then — let me take the lead through the world of matrices.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们开始吧——让我引领你进入矩阵的世界。
- en: 2\. Prerequisites
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 前提条件
- en: I’m guessing you can handle the expressions that follow.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我猜你可以处理接下来的表达式。
- en: 'This is **the dot product** written using a row vector and a column vector:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用行向量和列向量表示的**点积**：
- en: '![](../Images/4cc9cca6b5d353563d474f66a9748940.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4cc9cca6b5d353563d474f66a9748940.png)'
- en: '**A matrix** is a rectangular array of symbols arranged in rows and columns.
    Here is an example of a matrix with two rows and three columns:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**矩阵**是一个按行和列排列符号的矩形数组。以下是一个具有两行三列的矩阵示例：'
- en: '![](../Images/73ceb88688619cab30df270d88da304c.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/73ceb88688619cab30df270d88da304c.png)'
- en: You can view it as **a sequence of columns**
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将其视为**一系列列**
- en: '![](../Images/52f93ad2eec4d242106deb5d97e6d084.png)![](../Images/744dcfeea4c9ef2f971961a72eb40350.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/52f93ad2eec4d242106deb5d97e6d084.png)![](../Images/744dcfeea4c9ef2f971961a72eb40350.png)'
- en: 'or **a sequence of rows** stacked one on top of another:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 或者**一系列行**一个接一个地堆叠在一起：
- en: '![](../Images/08bd1c9f80d39bb52e42131cb03da09a.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/08bd1c9f80d39bb52e42131cb03da09a.png)'
- en: As you can see, I used superscripts for rows and subscripts for columns. In
    machine learning, it’s important to clearly distinguish between observations,
    represented as vectors, and features, which are arranged in rows.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我使用了上标表示行，使用下标表示列。在机器学习中，明确区分观察值（表示为向量）和特征（按行排列）是非常重要的。
- en: Other interesting ways to represent this matrix are **A***₂*ₓ*₃* and **A**[*aᵢ*⁽*ʲ*
    ⁾].
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表示该矩阵的其他有趣方式包括**A***₂*ₓ*₃*和**A**[*aᵢ*⁽*ʲ* ⁾]。
- en: '**Multiplying** two matrices **A** and **B** results in a third matrix **C**
    = **AB** containing the scalar products of each row of **A** with each column
    of **B**, arranged accordingly. Below is an example for **C***₂*ₓ*₂*= **A***₂*ₓ*₃***B***₃*ₓ*₂.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**矩阵**A和**B**的乘积结果是第三个矩阵**C** = **AB**，包含每一行的**A**与每一列的**B**的标量积，按照相应的顺序排列。以下是一个例子，表示**C***₂*ₓ*₂*=
    **A***₂*ₓ*₃***B***₃*ₓ*₂*。'
- en: '![](../Images/e80a49676c39ee0ae27f395a452273c6.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e80a49676c39ee0ae27f395a452273c6.png)'
- en: 'where c*ᵢ*⁽*ʲ* ⁾ is the scalar product of the *i*-th column of the matrix **B**
    and the *j*-th row of matrix **A**:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 c*ᵢ*⁽*ʲ* ⁾ 是矩阵**B**的第*i*列与矩阵**A**的第*j*行的标量积：
- en: '![](../Images/7346d6bad0c3048bd4216aa3384a1ac3.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7346d6bad0c3048bd4216aa3384a1ac3.png)'
- en: Note that this definition of multiplication requires the number of rows of *the
    left matrix* to match the number of columns of *the right matrix*. In other words,
    **the inner dimensions of the matrices must match**.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这一定义的矩阵乘法要求*左矩阵*的行数与*右矩阵*的列数相匹配。换句话说，**矩阵的内维度必须匹配**。
- en: Make sure you can manually multiply matrices with arbitrary entries. You can
    use the following code to check the result or to practice multiplying matrices.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你能够手动进行任意项的矩阵乘法。你可以使用以下代码来检查结果或练习矩阵乘法。
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 3\. Matrix-vector multiplication
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 矩阵-向量乘法
- en: 'In this section, I will explain the effect of matrix multiplication on vectors.
    The vector **x** is multiplied by the matrix **A**, producing a new vector **y**:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将解释矩阵乘法对向量的影响。向量**x**与矩阵**A**相乘，产生一个新的向量**y**：
- en: '![](../Images/a9ad5f2b2d114991258d0e67129daed2.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a9ad5f2b2d114991258d0e67129daed2.png)'
- en: This is a common operation in data science, as it enables **a linear transformation
    of data**. The use of matrices to represent linear transformations is highly advantageous,
    as you will soon see in the following examples.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是数据科学中常见的操作，因为它可以实现**数据的线性变换**。使用矩阵来表示线性变换非常有优势，正如你将在以下示例中看到的那样。
- en: 'Below, you can see your grid space and your standard basis vectors: blue for
    the *x*⁽¹⁾ direction and magenta for the *x*⁽²⁾ direction.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下方，你可以看到你的网格空间和标准基向量：蓝色代表*x*⁽¹⁾方向，品红色代表*x*⁽²⁾方向。
- en: '![](../Images/ede926b8ba98086d998573ee431a351e.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ede926b8ba98086d998573ee431a351e.png)'
- en: Standard basis in a Grid Space
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 网格空间中的标准基
- en: A good starting point is to work with transformations that map two-dimensional
    vectors **x** into two-dimensional vectors **y** in the same grid space.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的起点是使用将二维向量**x**映射到二维向量**y**的变换，且它们处在同一个网格空间中。
- en: Describing the desired transformation is a simple trick. You just need to say
    how the coordinates of the basis vectors change after the transformation and use
    these new coordinates as the columns of the matrix **A.**
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 描述期望的变换其实是一个简单的技巧。你只需要说明基向量在变换后的坐标是如何变化的，并使用这些新坐标作为矩阵**A**的列。
- en: As an example, consider a linear transformation that produces the effect illustrated
    below. The standard basis vectors are drawn lightly, while the transformed vectors
    are shown more clearly.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，考虑一个线性变换，它产生如下所示的效果。标准基向量绘制得较淡，而变换后的向量则显示得更清晰。
- en: '![](../Images/f09b964655b91e8cb825ac84b1bad995.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f09b964655b91e8cb825ac84b1bad995.png)'
- en: Standard basis transformed by matrix **A**
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由矩阵**A**变换的标准基底
- en: From the comparison of the basis vectors before and after the transformation,
    you can observe that the transformation involves a 45-degree counterclockwise
    rotation about the origin, along with an elongation of the vectors.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 通过比较变换前后基向量，你可以观察到该变换涉及关于原点的逆时针45度旋转，并伴随着向量的伸长。
- en: 'This effect can be achieved using the matrix **A**, composed as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个效果可以通过矩阵**A**实现，其构成如下：
- en: '![](../Images/f66cf341722a3e4849efd40ec7b764d6.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f66cf341722a3e4849efd40ec7b764d6.png)'
- en: The first column of the matrix contains the coordinates of the first basis vector
    after the transformation, and the second column contains those of the second basis
    vector.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵的第一列包含变换后的第一个基向量的坐标，第二列包含第二个基向量的坐标。
- en: The equation (1) then takes the form
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 方程(1)然后变为如下形式
- en: '![](../Images/6e4894b7838ae46f335906226c11b293.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6e4894b7838ae46f335906226c11b293.png)'
- en: 'Let’s take two example points **x**₁and **x**₂ :'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们取两个示例点**x**₁和**x**₂：
- en: '![](../Images/1c42eca1c9c3c50fef3476bf341dc03a.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1c42eca1c9c3c50fef3476bf341dc03a.png)'
- en: 'and transform them into the vectors **y**₁​ and **y**₂ :'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 并将它们变换为向量**y**₁​和**y**₂：
- en: '![](../Images/641645e3f7274bd47d636b82ec3792ee.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/641645e3f7274bd47d636b82ec3792ee.png)'
- en: 'I encourage you to do these calculations by hand first, and then switch to
    using a program like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你先手工计算这些内容，然后再使用像这样的程序：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The plot below shows the results.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了结果。
- en: '![](../Images/620eb5e9122de60f3e382ce50c0b132b.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/620eb5e9122de60f3e382ce50c0b132b.png)'
- en: Points transformed by matrix **A**
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由矩阵**A**变换的点
- en: 'The **x** points are gray and smaller, while their transformed counterparts
    **y** have black edges and are bigger. If you’d prefer to think of these points
    as arrowheads, here’s the corresponding illustration:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**x**点为灰色且较小，而它们变换后的对应点**y**具有黑色边缘且较大。如果你更愿意将这些点看作箭头的尖端，下面是相应的插图：'
- en: '![](../Images/dd158ce434f6441a15216165f2c6c75e.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dd158ce434f6441a15216165f2c6c75e.png)'
- en: Vectors transformed by matrix **A**
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由矩阵**A**变换的向量
- en: Now you can see more clearly that the points have been rotated around the origin
    and pushed a little away.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以更清楚地看到，点已经围绕原点旋转并略微推远了。
- en: 'Let’s examine another matrix:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来研究另一个矩阵：
- en: '![](../Images/919cdaab273f68fd87846d0a6341dafe.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/919cdaab273f68fd87846d0a6341dafe.png)'
- en: and see how the transformation
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 并查看变换如何作用
- en: '![](../Images/64340ef07ff0a3727dc510b69eef38d3.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/64340ef07ff0a3727dc510b69eef38d3.png)'
- en: 'affects the points on the grid lines:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 影响网格线上的点：
- en: '![](../Images/47bdd0080d88de5d02d7215b668a6ffc.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/47bdd0080d88de5d02d7215b668a6ffc.png)'
- en: Grid lines transformed by matrix **B**
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由矩阵**B**变换的网格线
- en: 'Compare the result with that obtained using **B**/2, which corresponds to dividing
    all elements of the matrix **B** by 2:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 将结果与使用**B**/2得到的结果进行比较，后者对应于将矩阵**B**的所有元素除以2：
- en: '![](../Images/257a75bda25f1cc28659d6452bd54163.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/257a75bda25f1cc28659d6452bd54163.png)'
- en: Grid lines transformed by matrix **B**/2
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由矩阵**B**/2变换的网格线
- en: 'In general, a linear transformation:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，线性变换：
- en: ensures that straight lines remain straight,
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保直线保持直线，
- en: keeps parallel lines parallel,
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持平行线平行，
- en: scales the distances between them by a uniform factor.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按均匀因子缩放它们之间的距离。
- en: To keep things concise, I’ll use ‘*transformation* ***A***‘ throughout the text
    instead of the full phrase ‘*transformation represented by matrix* ***A***’.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁起见，本文中我将使用“*变换* ***A***”这一表述，而不是完整的“*由矩阵* ***A*** *表示的变换*”。
- en: Let’s return to the matrix
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到矩阵
- en: '![](../Images/919cdaab273f68fd87846d0a6341dafe.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/919cdaab273f68fd87846d0a6341dafe.png)'
- en: and apply the transformation to a few sample points.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 并将变换应用于一些示例点。
- en: '![](../Images/70fa29bb0ad01ed57cce3b360d5f3e98.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/70fa29bb0ad01ed57cce3b360d5f3e98.png)'
- en: The effects of transformation **B** on various input vectors
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 变换**B**对各种输入向量的作用
- en: 'Notice the following:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下几点：
- en: point **x**₁​ has been rotated counterclockwise and brought closer to the origin,
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点**x**₁​已被逆时针旋转，并且靠近原点。
- en: point **x**₂​, on the other hand, has been rotated clockwise and pushed away
    from the origin,
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点**x**₂​，另一方面，已经顺时针旋转并且被推离了原点，
- en: point **x**₃​ has only been scaled down, meaning it’s moved closer to the origin
    while keeping its direction,
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点**x**₃​只是被缩小了，意味着它在保持方向不变的情况下移动得更靠近原点，
- en: point **x**₄ has undergone a similar transformation, but has been scaled up.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点**x**₄经历了类似的变换，但被缩放了。
- en: The transformation compresses in the *x*⁽¹⁾-direction and stretches in the *x*⁽²⁾-direction.
    You can think of the grid lines as behaving like an accordion.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 该变换在*x*⁽¹⁾方向上进行了压缩，而在*x*⁽²⁾方向上进行了拉伸。你可以把网格线想象成像手风琴一样变化。
- en: Directions such as those represented by the vectors **x**₃ and **x**₄ play an
    important role in machine learning, but that’s a story for another time.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 像**x**₃和**x**₄所表示的方向在机器学习中扮演着重要角色，但那是另一个话题。
- en: For now, we can call them ***eigen-directions***, because vectors along these
    directions might only be scaled by the transformation, without being rotated.
    Every transformation, except for rotations, has its own set of eigen-directions.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们可以称它们为***特征方向***，因为沿这些方向的向量可能只会被变换缩放，而不会被旋转。除了旋转之外，每个变换都有一组特征方向。
- en: 4\. Transposition
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 转置
- en: Recall that the transformation matrix is constructed by stacking the transformed
    basis vectors in columns. Perhaps you’d like to see what happens if we **swap
    the rows and columns** afterwards (the transposition).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，变换矩阵是通过将变换后的基向量按列堆叠而构建的。也许你想看看如果我们**交换行和列**（即转置）之后会发生什么。
- en: Let us take, for example, the matrix
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们考虑矩阵
- en: '![](../Images/1c78255ae8debe430d0f94d514b8c906.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1c78255ae8debe430d0f94d514b8c906.png)'
- en: where **A**ᵀ stands for the transposed matrix.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 其中**A**ᵀ表示转置矩阵。
- en: From a geometric perspective, *the coordinates of the first* new basis vector
    come from *the first coordinates of all* the old basis vectors, the second from
    the second coordinates, and so on.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 从几何角度来看，*第一个*新基向量的坐标来自于*所有*旧基向量的第一个坐标，第二个新基向量的坐标来自于第二个坐标，依此类推。
- en: 'In NumPy, it’s as simple as that:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在NumPy中，这就是这么简单：
- en: '[PRE4]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: I must disappoint you now, as I cannot provide a simple rule that expresses
    the relationship between the transformations **A** and **A**ᵀ in just a few words.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在必须让你失望，因为我无法用几句话表达变换**A**和**A**ᵀ之间的关系。
- en: Instead, let me show you a property shared by both the original and transposed
    transformations, which will come in handy later.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我向你展示一个原始变换和转置变换都共享的特性，这将在稍后派上用场。
- en: Here is the geometric interpretation of the transformation represented by the
    matrix **A**. The area shaded in gray is called **the parallelogram**.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由矩阵**A**表示的变换的几何解释。灰色阴影区域被称为**平行四边形**。
- en: '![](../Images/cc4da6b270ad59593b66ecd3c2ef9aaf.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cc4da6b270ad59593b66ecd3c2ef9aaf.png)'
- en: Parallelogram spanned by the basis vectors transformed by matrix **A**
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 由矩阵**A**变换的基向量所生成的平行四边形
- en: 'Compare this with the transformation obtained by applying the matrix **A**ᵀ:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将其与应用矩阵**A**ᵀ得到的变换进行比较：
- en: '![](../Images/583dbc483553575dedb38801354a87bd.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/583dbc483553575dedb38801354a87bd.png)'
- en: Parallelogram spanned by the basis vectors transformed by matrix **A**ᵀ
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 由矩阵**A**ᵀ变换的基向量所生成的平行四边形
- en: 'Now, let us consider another transformation that applies entirely different
    scales to the unit vectors:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们考虑另一个变换，它对单位向量应用完全不同的缩放：
- en: '![](../Images/a1f9c9f8bf7aa8baf397057e38941807.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a1f9c9f8bf7aa8baf397057e38941807.png)'
- en: 'The parallelogram associated with the matrix **B** is much narrower now:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 与矩阵**B**相关的平行四边形现在变得窄了许多：
- en: '![](../Images/ce38dffa87078dc19015a4f85f9eff0f.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ce38dffa87078dc19015a4f85f9eff0f.png)'
- en: Parallelogram spanned by the basis vectors transformed by matrix **B**
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 由矩阵**B**变换的基向量所生成的平行四边形
- en: 'but it turns out that it is the same size as that for the matrix **B**ᵀ:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 但结果证明它与矩阵**B**ᵀ的大小是一样的：
- en: '![](../Images/cc8e5ec58859440e7782dd669d504972.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cc8e5ec58859440e7782dd669d504972.png)'
- en: Parallelogram spanned by the basis vectors transformed by matrix **B**ᵀ
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 由矩阵**B**ᵀ变换的基向量所生成的平行四边形
- en: 'Let me put it this way: you have a set of numbers to assign to the components
    of your vectors. If you assign a larger number to one component, you’ll need to
    use smaller numbers for the others. In other words, the total length of the vectors
    that make up the parallelogram stays the same. I know this reasoning is a bit
    vague, so if you’re looking for more rigorous proofs, check the literature in
    the references section.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我这样说吧：你有一组数字需要分配给向量的各个分量。如果你给某个分量分配一个较大的数字，那么你就需要给其他分量分配较小的数字。换句话说，构成平行四边形的向量的总长度保持不变。我知道这个推理有点模糊，如果你想要更严谨的证明，可以查阅参考文献部分的相关文献。
- en: 'And here’s the kicker at the end of this section: the area of the parallelograms
    can be found by calculating **the determinant** of the matrix. What’s more, *the
    determinant of the matrix and its transpose are identical.*'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这一部分的关键：可以通过计算矩阵的**行列式**来找到平行四边形的面积。更重要的是，*矩阵的行列式与其转置的行列式是相同的*。
- en: '![](../Images/bf71b3faf8c4ed8e5cefabaf78bd14c4.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf71b3faf8c4ed8e5cefabaf78bd14c4.png)'
- en: More on the determinant in the upcoming sections.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于行列式的内容将在接下来的部分中介绍。
- en: 5\. Composition of transformations
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 变换的组合
- en: 'You can apply a sequence of transformations — for example, start by applying
    **A** to the vector **x**, and then pass the result through **B**. This can be
    done by first multiplying the vector **x** by the matrix **A**, and then multiplying
    the result by the matrix **B**:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以应用一系列变换——例如，首先对向量**x**应用**A**，然后将结果传递给**B**。这可以通过先将向量**x**与矩阵**A**相乘，然后将结果与矩阵**B**相乘来完成：
- en: '![](../Images/73685f1fe740347c23835e6168605d91.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/73685f1fe740347c23835e6168605d91.png)'
- en: 'You can multiply the matrices **B** and **A** to obtain the matrix **C** for
    further use:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将矩阵**B**和**A**相乘，以获得矩阵**C**供进一步使用：
- en: '![](../Images/a037c7b0cac6eeaba19b52edb0676319.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a037c7b0cac6eeaba19b52edb0676319.png)'
- en: 'This is the effect of the transformation represented by the matrix **C**:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这是矩阵**C**所表示的变换效果：
- en: '![](../Images/02125514614c2a36bce4c5c3554da5eb.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/02125514614c2a36bce4c5c3554da5eb.png)'
- en: Transformation described by the composite matrix **BA**
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 由复合矩阵**BA**描述的变换
- en: 'You can perform the transformations in reverse order: first apply **B**, then
    apply **A**:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按相反的顺序进行变换：首先应用**B**，然后应用**A**：
- en: '![](../Images/0c26a616bd0701edcb29b3ed70669815.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c26a616bd0701edcb29b3ed70669815.png)'
- en: 'Let **D** represent the sequence of multiplications performed in this order:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 让**D**表示按此顺序执行的乘法序列：
- en: '![](../Images/fdfb4328d6ef70c8e8a91f2804af571e.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fdfb4328d6ef70c8e8a91f2804af571e.png)'
- en: 'And this is how it affects the grid lines:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它如何影响网格线的：
- en: '![](../Images/0c89d832d86f8f2760a4d66e95a16555.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c89d832d86f8f2760a4d66e95a16555.png)'
- en: Transformation described by the composite matrix **AB**
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 由复合矩阵**AB**描述的变换
- en: So, you can see for yourself that **the order of matrix multiplication matters**.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你可以亲自看到**矩阵乘法的顺序很重要**。
- en: 'There’s a cool property with **the transpose of a composite transformation**.
    Check out what happens when we multiply **A** by **B**:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**复合变换的转置**有一个很酷的性质。来看一下当我们将**A**乘以**B**时会发生什么：'
- en: '![](../Images/e80a49676c39ee0ae27f395a452273c6.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e80a49676c39ee0ae27f395a452273c6.png)'
- en: 'and then transpose the result, which means we’ll apply (**AB**)ᵀ:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 然后转置结果，这意味着我们将应用（**AB**)ᵀ：
- en: '![](../Images/79c2894f91e4ef014cd9c69a778c1421.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/79c2894f91e4ef014cd9c69a778c1421.png)'
- en: 'You can easily extend this observation to the following rule:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以很容易地将这个观察结果扩展为以下规则：
- en: '![](../Images/7052600e654ee7c2d565c38b444116f3.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7052600e654ee7c2d565c38b444116f3.png)'
- en: 'To finish off this section, consider the inverse problem: is it possible to
    recover matrices **A** and **B** given only **C** = **AB**?'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在结束这一部分之前，我们考虑逆问题：仅给定**C** = **AB**，是否可以恢复矩阵**A**和**B**？
- en: This is **matrix factorization**, which, as you might expect, doesn’t have a
    unique solution. Matrix factorization is a powerful technique that can provide
    insight into transformations, as they may be expressed as a composition of simpler,
    elementary transformations. But that’s a topic for another time.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是**矩阵分解**，正如你所预料的，它没有唯一的解。矩阵分解是一种强大的技术，可以提供对变换的深入理解，因为变换可以表示为多个更简单、基本变换的组合。但这是另一个话题，我们稍后再谈。
- en: 6\. Inverse transformation
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. 逆变换
- en: 'You can easily construct a matrix representing a **do-nothing transformation**
    that leaves the standard basis vectors unchanged:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以很容易地构造一个表示**不做任何变换**的矩阵，它不会改变标准基向量：
- en: '![](../Images/028f2bbe2eefcad91f2fb3710204af8c.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/028f2bbe2eefcad91f2fb3710204af8c.png)'
- en: It is commonly referred to as **the identity matrix**.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 它通常被称为**单位矩阵**。
- en: 'Take a matrix **A** and consider the transformation that undoes its effects.
    The matrix representing this transformation is **A**⁻¹. Specifically, when applied
    after or before **A**, it yields the identity matrix **I**:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 取矩阵**A**并考虑一个能够逆转其效果的变换。表示该变换的矩阵是**A**⁻¹。具体来说，当在**A**之后或之前应用时，它会得到单位矩阵**I**：
- en: '![](../Images/278a35da36dddd4d8ee7104d5b3d5733.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/278a35da36dddd4d8ee7104d5b3d5733.png)'
- en: There are many resources that explain how to calculate the inverse by hand.
    I recommend learning [Gauss-Jordan method](https://www.mathsisfun.com/algebra/matrix-inverse-row-operations-gauss-jordan.html)
    because it involves simple row manipulations on the augmented matrix. At each
    step, you can swap two rows, rescale any row, or add to a selected row a weighted
    sum of the remaining rows.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多资源解释如何手动计算逆矩阵。我推荐学习[高斯-约旦法](https://www.mathsisfun.com/algebra/matrix-inverse-row-operations-gauss-jordan.html)，因为它涉及对增广矩阵进行简单的行操作。在每一步中，你可以交换两行、重新缩放任意一行，或者将其余行的加权和加到选定的行上。
- en: 'Take the following matrix as an example for hand calculations:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下矩阵为手动计算的例子：
- en: '![](../Images/5dcbd283762d34da02b7985a74828053.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5dcbd283762d34da02b7985a74828053.png)'
- en: 'You should get the inverse matrix:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到逆矩阵：
- en: '![](../Images/04d869f86b763751c24a5bfdf843fd18.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/04d869f86b763751c24a5bfdf843fd18.png)'
- en: Verify by hand that equation (4) holds. You can also do this in NumPy.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 手动验证方程(4)是否成立。你也可以在NumPy中进行验证。
- en: '[PRE6]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Take a look at how the two transformations differ in the illustrations below.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的插图，了解这两种变换的区别。
- en: '![](../Images/6841442f62d2e5076f36dd59040ad1e1.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6841442f62d2e5076f36dd59040ad1e1.png)'
- en: Transformation **A**
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 变换**A**
- en: '![](../Images/40d8f35857e15029116e004221c177f1.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/40d8f35857e15029116e004221c177f1.png)'
- en: Transformation **A**⁻¹
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 变换**A**⁻¹
- en: At first glance, it’s not obvious that one transformation reverses the effects
    of the other.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，很难看出一个变换是否能逆转另一个变换的效果。
- en: However, in these plots, you might notice a fascinating and far-reaching **connection
    between the transformation and its inverse**.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在这些图表中，你可能会注意到一个迷人且深远的**变换与其逆变换之间的联系**。
- en: Take a close look at the first illustration, which shows the effect of transformation
    **A** on the basis vectors. The original unit vectors are depicted semi-transparently,
    while their transformed counterparts, resulting from multiplication by matrix
    **A**, are drawn clearly and solidly. Now, imagine that these newly drawn vectors
    are the basis vectors you use to describe the space, and you perceive the original
    space from their perspective. Then, the original basis vectors will appear smaller
    and, secondly, will be oriented towards the east. And this is exactly what the
    second illustration shows, demonstrating the effect of the transformation **A**⁻¹.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细看看第一个插图，它展示了变换**A**对基向量的作用。原始单位向量以半透明的方式呈现，而由矩阵**A**乘法得到的变换后向量则清晰、实心地描绘出来。现在，想象这些新画出的向量是你用来描述空间的基向量，你从它们的视角来看待原始空间。那么，原始的基向量会显得更小，第二，它们将朝东偏移。这正是第二个插图所展示的，说明了变换**A**⁻¹的效果。
- en: This is a preview of an upcoming topic I’ll cover in the next article about
    *using matrices to represent different perspectives on data*.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在下一篇文章中将讨论的一个主题预告，内容是*使用矩阵表示数据的不同视角*。
- en: 'All of this sounds great, but there’s a catch: **some transformations can’t
    be reversed**.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切听起来很棒，但有个问题：**有些变换是无法逆转的**。
- en: 7\. Non-invertible transformations
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. 不可逆的变换
- en: 'The workhorse of the next experiment will be the matrix with 1s on the diagonal
    and *b* on the antidiagonal:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 下一次实验的主力将是对角线上全是1，反对角线上全是*b*的矩阵：
- en: '![](../Images/25a3ab7eb1f2fd31c21e71336ca8abf6.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25a3ab7eb1f2fd31c21e71336ca8abf6.png)'
- en: 'where *b* is a fraction in the interval (0, 1). This matrix is, by definition,
    symmetrical, as it happens to be identical to its own transpose: **A**=**A**ᵀ,
    but I’m just mentioning this by the way; it’s not particularly relevant here.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，*b*是区间(0, 1)中的一个分数。根据定义，这个矩阵是对称的，因为它恰好与其自身的转置相同：**A**=**A**ᵀ，但我只是顺便提一下，这在这里并不特别相关。
- en: 'Invert this matrix using the Gauss-Jordan method, and you will get the following:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 使用高斯-约旦法逆转这个矩阵，你将得到以下结果：
- en: '![](../Images/68a558db28b1988e8a1dff107e943aec.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/68a558db28b1988e8a1dff107e943aec.png)'
- en: You can easily find online the rules for calculating the determinant of 2x2
    matrices, which will give
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在网上轻松找到计算2x2矩阵行列式的规则，它会给出
- en: '![](../Images/c3a5f7cf3fe401637edefe31ba794594.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c3a5f7cf3fe401637edefe31ba794594.png)'
- en: This is no coincidence. In general, it holds that
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是巧合。一般来说，成立的是
- en: '![](../Images/18c6939aaad77b3e9af3c75059ab77a9.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18c6939aaad77b3e9af3c75059ab77a9.png)'
- en: Notice that when *b* = 0, the two matrices are identical. This is no surprise,
    as **A** reduces to the identity matrix **I**.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当 *b* = 0 时，两个矩阵是相同的。这并不令人惊讶，因为 **A** 退化为单位矩阵 **I**。
- en: Things get tricky when *b* = 1, as the det(**A)** = 0 and det**(A**⁻¹) becomes
    infinite. As a result, **A**⁻¹ does not exist for a matrix **A** consisting entirely
    of 1s. In algebra classes, teachers often warn you about a zero determinant. However,
    when we consider where the matrix comes from, it becomes apparent that an infinite
    determinant can also occur, resulting in *a fatal error*. Anyway,
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 当 *b* = 1 时，事情变得棘手，因为 det(**A**) = 0，det(**A**⁻¹) 变为无穷大。因此，**A**⁻¹ 对于一个完全由 1
    组成的矩阵 **A** 是不存在的。在代数课程中，老师通常会警告你零行列式的问题。然而，当我们考虑矩阵的来源时，很明显，行列式为无穷大的情况也可能发生，从而导致
    *致命错误*。无论如何，
- en: a zero determinant means the transformation is non-ivertible.
  id: totrans-197
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 行列式为零意味着该变换是不可逆的。
- en: Now, the stage is set for experiments with different values of *b*. We’ve just
    seen how calculations fail at the limits, so let’s now visually investigate what
    happens as we carefully approach them.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为不同的 *b* 值进行实验的条件已经具备。我们刚刚看到，在极限处计算会失败，现在我们将通过可视化方式，仔细观察当我们接近这些极限时会发生什么。
- en: We start with *b* = ½​ and end up near 1.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 *b* = ½ 开始，最终接近 1。
- en: Step 1)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 1)
- en: '![](../Images/eeace7b7e5bd790b47317dff9520bf3d.png)![](../Images/0c0250b06e9b3484f32e994538d49b5e.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eeace7b7e5bd790b47317dff9520bf3d.png)![](../Images/0c0250b06e9b3484f32e994538d49b5e.png)'
- en: Transformation **A**
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 变换 **A**
- en: '![](../Images/07ae76e1916792ee122d8cf9e4f8f7ad.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/07ae76e1916792ee122d8cf9e4f8f7ad.png)'
- en: Transformation **A**⁻¹
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 变换 **A**⁻¹
- en: Step 2)
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 2)
- en: '![](../Images/32a130667236785712ba893d8dc5385e.png)![](../Images/1dacc8d80f399a3697998a94b3b87bed.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/32a130667236785712ba893d8dc5385e.png)![](../Images/1dacc8d80f399a3697998a94b3b87bed.png)'
- en: Transformation **A**
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 变换 **A**
- en: '![](../Images/75c303220d28ee0aa41f487cdc6a6144.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/75c303220d28ee0aa41f487cdc6a6144.png)'
- en: Transformation **A**⁻¹
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 变换 **A**⁻¹
- en: Recall that **the determinant of the matrix representing the transformation
    corresponds to the area of the parallelogram** formed by the transformed basis
    vectors.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，**表示变换的矩阵的行列式对应于由变换后的基向量形成的平行四边形的面积**。
- en: 'This is in line with the illustrations: the smaller the area of the parallelogram
    for transformation **A**, the larger it becomes for transformation **A**⁻¹. What
    follows is: the narrower the basis for transformation **A**, the wider it is for
    its inverse. Note also that I had to extend the range on the axes because the
    basis vectors for transformation **A** are getting longer.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这与插图一致：变换 **A** 的平行四边形面积越小，变换 **A**⁻¹ 的面积就越大。接下来是：变换 **A** 的基向量越窄，其逆变换的基向量就越宽。还要注意，我不得不扩展坐标轴的范围，因为变换
    **A** 的基向量变得更长。
- en: By the way, notice that
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，请注意
- en: the transformation **A** has the same eigen-directions as **A**⁻¹.
  id: totrans-213
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 变换 **A** 和 **A**⁻¹ 具有相同的特征方向。
- en: Step 3) *Almost there…*
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 3) *快完成了……*
- en: '![](../Images/762d7551521b13fdada37d678056e7a3.png)![](../Images/51eb1cc88dc35bd03432b484d5d8ce04.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/762d7551521b13fdada37d678056e7a3.png)![](../Images/51eb1cc88dc35bd03432b484d5d8ce04.png)'
- en: Transformation **A**
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 变换 **A**
- en: '![](../Images/88d3105ae207249f20bb3ad02e74fcec.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/88d3105ae207249f20bb3ad02e74fcec.png)'
- en: Transformation **A**⁻¹
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 变换 **A**⁻¹
- en: The gridlines are squeezed so much that they almost overlap, which eventually
    happens when *b* hits 1\. The basis vectors of are stretched so far that they
    go beyond the axis limits. When *b* reaches exactly 1, both basis vectors lie
    on the same line.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 网格线被压得非常紧，几乎重叠，这最终发生在 *b* 达到 1 时。基向量被拉伸得太长，以至于超出了坐标轴的限制。当 *b* 恰好等于 1 时，两个基向量会重合在同一条线上。
- en: Having seen the previous illustrations, you’re now ready to guess the effect
    of applying a non-invertible transformation to the vectors. Take a moment to think
    it through first, then either try running a computational experiment or check
    out the results I’ve provided below.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 看过前面的插图后，你现在可以猜测应用一个不可逆变换到向量上会有什么效果。先花点时间思考一下，然后可以尝试运行一个计算实验，或者查看我下面提供的结果。
- en: .
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: Think of it this way.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这样考虑一下。
- en: When the basis vectors are not parallel, meaning they form an angle other than
    0 or 180 degrees, you can use them to address any point on the entire plane (mathematicians
    say that the vectors ***span*** the plane). Otherwise, the entire plane can no
    longer be spanned, and only points along the line covered by the basis vectors
    can be addressed.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 当基向量不平行时，意味着它们形成的角度不是0度或180度，你可以用它们来表示整个平面上的任何点（数学家称这些向量***张成***平面）。否则，整个平面就无法再被张成，只有沿着基向量所覆盖的直线上的点可以被表示。
- en: .
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: 'This is what it looks like when you apply the non-invertible transformation
    to randomly selected points:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是当你将不可逆变换应用于随机选定的点时的效果：
- en: '![](../Images/c9043605861f4f0c4cdf577eca6881d4.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c9043605861f4f0c4cdf577eca6881d4.png)'
- en: A non-invertible matrix **A** reduces the dimensionality of the data
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不可逆矩阵**A**会降低数据的维度。
- en: A consequence of applying a non-invertible transformation is that the two-dimensional
    space collapses to a one-dimensional subspace. After the transformation, it is
    no longer possible to uniquely recover the original coordinates of the points.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 应用不可逆变换的一个后果是，二维空间会塌缩成一个一维子空间。变换后，不再可能唯一恢复点的原始坐标。
- en: Take a look at the entries of matrix **A**. When *b* = 1, both columns (and
    rows) are identical, implying that the transformation matrix effectively behaves
    as if it were a 1 by 2 matrix, mapping two-dimensional vectors to a scalar.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下矩阵**A**的条目。当*b* = 1时，两列（或行）是相同的，这意味着变换矩阵实际上表现得像一个1×2矩阵，将二维向量映射到一个标量。
- en: 'You can easily verify that the problem would be the same if one row were a
    multiple of the other. This can be further generalized for matrices of any dimensions:
    if any row can be expressed as a weighted sum (*linear combination*) of the others,
    it implies that a dimension collapses. The reason is that such a vector lies within
    the space spanned by the other vectors, so it does not provide any additional
    ability to address points beyond those that can already be addressed. You may
    consider this vector ***redundant***.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以轻松验证，如果一行是另一行的倍数，问题将是相同的。这可以进一步推广到任何维度的矩阵：如果任意一行可以表示为其他行的加权和（*线性组合*），则意味着一个维度塌缩。原因是这样的向量位于其他向量张成的空间内，因此不能提供超出已经能表示的点的能力。你可以将这个向量视为***冗余的***。
- en: From section 4 on transposition, we can infer that **if there are redundant
    rows, there must be an equal number of redundant columns**.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 从第4节的转置部分可以推断出，**如果有冗余的行，那么必定有相等数量的冗余列**。
- en: 8\. Determinant
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8\. 行列式
- en: You might now ask if there’s a non-geometrical way to verify whether the columns
    or rows of the matrix are redundant.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能会问是否有一种非几何的方式来验证矩阵的列或行是否冗余。
- en: Recall the parallelograms from Section 4 and the scalar quantity known as the
    determinant. I mentioned that
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下第4节中的平行四边形和被称为行列式的标量。我提到过
- en: the determinant of a matrix indicates how the area of a unit parallelogram changes
    under the transformation.
  id: totrans-239
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 矩阵的行列式表示在变换下，单位平行四边形的面积如何变化。
- en: The exact definition of the determinant is somewhat tricky, but as you’ve already
    seen, its graphical interpretation should not cause any problems.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 行列式的精确定义有点棘手，但正如你已经看到的，它的图形解释应该不会引起任何问题。
- en: 'I will demonstrate the behavior of two transformations represented by matrices:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我将展示由矩阵表示的两种变换的行为：
- en: '![](../Images/983afc1e1e9040443ea782b7f54a953c.png)![](../Images/5188224ee675e76f85ee6713653134e0.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/983afc1e1e9040443ea782b7f54a953c.png)![](../Images/5188224ee675e76f85ee6713653134e0.png)'
- en: det(**A**) = 2
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: det(**A**) = 2
- en: '![](../Images/65e63a7a0e367989ad88d94d9c41f7ba.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/65e63a7a0e367989ad88d94d9c41f7ba.png)'
- en: det(**B**) = -3/4
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: det(**B**) = -3/4
- en: The magnitude of the determinant indicates how much the transformation stretches
    (if greater than 1) or shrinks (if less than 1) the space overall. While the transformation
    may stretch along one direction and compress along another, the overall effect
    is given by the value of the determinant.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 行列式的大小表示变换总体上如何拉伸（若大于1）或缩小（若小于1）空间。虽然变换可能在一个方向上拉伸，在另一个方向上压缩，但总体效果由行列式的值决定。
- en: Also, a negative determinant indicates a reflection; note that matrix **B**
    reverses the order of the basis vectors.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，负的行列式表示一个反射；注意，矩阵**B**会反转基向量的顺序。
- en: A parallelogram with zero area corresponds to a transformation that collapses
    a dimension, meaning **the determinant can be used to test for redundancy in the
    basis vectors of a matrix**.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 一个面积为零的平行四边形对应一个压缩了一个维度的变换，这意味着**行列式可以用来检测矩阵基向量中的冗余**。
- en: Since the determinant measures the area of a parallelogram under a transformation,
    we can apply it to a sequence of transformations. If det(**A**) and det(**B**)
    represent the scaling factors of unit areas for transformations **A** and **B**,
    then the scaling factor for the unit area after applying both transformations
    sequentially, that is, **AB**, is equal to det(**AB**). As both transformations
    act independently and one after the other, the total effect is given by det(**AB**)
    = det(**A**) det(**B**). Substituting matrix **A**⁻¹ for matrix **B** and noting
    that det(**I**) = 1 leads to equation (5) introduced in the previous section.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 由于行列式衡量的是在变换下平行四边形的面积，我们可以将其应用于一系列的变换。如果det(**A**)和det(**B**)分别表示变换**A**和**B**的单位面积的缩放因子，那么在依次应用这两个变换后，单位面积的缩放因子，即**AB**，等于det(**AB**)。由于这两个变换独立且顺序执行，总效果由det(**AB**)
    = det(**A**) det(**B**)给出。将矩阵**A**⁻¹代入矩阵**B**并注意到det(**I**) = 1，得到了上一节引入的方程（5）。
- en: 'Here’s how you can calculate the determinant using NumPy:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何使用NumPy计算行列式的方法：
- en: '[PRE8]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 9\. Non-square matrices
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9\. 非方阵
- en: Until now, we’ve focused on square matrices, and you’ve developed a geometric
    intuition of the transformations they represent. Now is a great time to expand
    these skills to **matrices with any number of rows and columns**.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们专注于方阵，并且你已经培养了对它们所代表变换的几何直觉。现在是时候将这些技能扩展到**具有任意行列数的矩阵**了。
- en: Wide matrices
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 宽矩阵
- en: 'This is an example of **a wide matrix**, which has more columns than rows:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个**宽矩阵**的例子，它的列数多于行数：
- en: '![](../Images/0642b7a3ca839f9e87d0d3f3f53b968d.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0642b7a3ca839f9e87d0d3f3f53b968d.png)'
- en: From the perspective of equation (1), **y** = **Ax**, it maps three-dimensional
    vectors **x** to two-dimensional vectors **y**.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 从方程（1）**y** = **Ax**的角度来看，它将三维向量**x**映射到二维向量**y**。
- en: In such a case, one column can always be expressed as a multiple of another
    or as a weighted sum of the others. For example, the third column here equals
    3/4 times the first column plus 5/4 times the second.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，一列总是可以表示为另一列的倍数，或者是其他列的加权和。例如，这里第三列等于第一列的3/4倍加上第二列的5/4倍。
- en: Once the vector **x** has been transformed into **y**, it’s no longer possible
    to reconstruct the original **x** from **y**. We say that the transformation **reduces
    the dimensionality of the input data**. These types of transformations are very
    important in machine learning.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦向量**x**被转换为**y**，就无法从**y**中重建原始的**x**。我们说这种变换**降低了输入数据的维度**。这类变换在机器学习中非常重要。
- en: Sometimes, a wide matrix disguises itself as a square matrix, but you can reveal
    it by checking whether its determinant is zero. We’ve had this situation before,
    remember?
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，一个宽矩阵会伪装成一个方阵，但你可以通过检查其行列式是否为零来揭示它。我们以前遇到过这种情况，记得吗？
- en: 'We can use the matrix **A** to create two different square matrices. Try deriving
    the following result yourself:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用矩阵**A**来创建两个不同的方阵。试着自己推导出以下结果：
- en: '![](../Images/80f2cae52ac384fcb9146da7c1fa37a9.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/80f2cae52ac384fcb9146da7c1fa37a9.png)'
- en: 'and also determinants (I recommend simplified formulas for working with [2×2](https://brilliant.org/wiki/expansion-of-determinants/)
    and [3×3](https://en.wikipedia.org/wiki/Rule_of_Sarrus) matrices):'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 以及行列式（我推荐使用简化公式来处理[2×2](https://brilliant.org/wiki/expansion-of-determinants/)和[3×3](https://en.wikipedia.org/wiki/Rule_of_Sarrus)矩阵）：
- en: '![](../Images/24633e4af77690f9c245aa92ac05590f.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/24633e4af77690f9c245aa92ac05590f.png)'
- en: The matrix **A**ᵀ**A** is composed of the dot products of all possible pairs
    of columns from matrix **A**, some of which are definitely redundant, thereby
    transferring this redundancy to **A**ᵀ**A**.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵**A**ᵀ**A**由矩阵**A**中所有可能列对的点积组成，其中一些列对显然是冗余的，从而将这种冗余转移到**A**ᵀ**A**。
- en: Matrix **AA**ᵀ, on the other hand, contains only the dot products of the rows
    of matrix **A**, which are fewer in number than the columns. Therefore, the vectors
    that make up matrix **AA**ᵀ are most likely (though not entirely guaranteed) linearly
    independent, meaning that one vector cannot be expressed as a multiple of another
    or as a weighted sum of the others.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，矩阵**AA**ᵀ只包含矩阵**A**行的点积，这些行的数量少于列的数量。因此，构成矩阵**AA**ᵀ的向量很可能（虽然不能完全保证）是线性独立的，这意味着一个向量不能表示为另一个向量的倍数或其他向量的加权和。
- en: What would happen if you insisted on determining **x** from **y**, which was
    previously computed as **y** = **Ax**? You could left-multiply both sides by **A**⁻¹
    to get equation **A**⁻¹**y** = **A**⁻¹**Ax** and, since **A**⁻¹**A = I**, obtain
    **x** = **A**⁻¹**y**. But this would fail from the very beginning, because matrix
    **A**⁻¹, being non-square, is certainly non-invertible (at least not in the sense
    that was previously introduced).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你坚持从之前计算得到的**y** = **Ax**中确定**x**会发生什么？你可以将方程两边左乘**A**⁻¹，得到方程**A**⁻¹**y**
    = **A**⁻¹**Ax**，并且因为**A**⁻¹**A = I**，得到**x** = **A**⁻¹**y**。但这一切从一开始就会失败，因为矩阵**A**⁻¹是非方阵，肯定是不可逆的（至少在之前所介绍的意义上）。
- en: However, you can extend the original equation **y** = **Ax** to include a square
    matrix where it’s needed. You just need to left-multiply matrix **A**ᵀ on both
    sides of the equation, yielding **A**ᵀ**y** = **A**ᵀ**Ax**. On the right, we now
    have a square matrix **A**ᵀ**A**. Unfortunately, we’ve already seen that its determinant
    is zero, so it appears that we have once again failed to reconstruct **x** from
    **y**.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可以扩展原始方程**y** = **Ax**，以包含一个在需要的地方使用的方阵。你只需要在方程两边左乘矩阵**A**ᵀ，从而得到**A**ᵀ**y**
    = **A**ᵀ**Ax**。右边现在是一个方阵**A**ᵀ**A**。不幸的是，我们已经看到它的行列式为零，因此看起来我们再次无法从**y**中重建**x**。
- en: Tall matrices
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高矩阵
- en: Here is an example of a **tall matrix**
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个**高矩阵**的例子
- en: '![](../Images/a4113e8d05109a6962e31b4e136ed46a.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a4113e8d05109a6962e31b4e136ed46a.png)'
- en: that maps two-dimensional vectors **x** into three-dimensional vectors **y**.
    I made a third row by simply squaring the entries of the first row. While this
    type of extension doesn’t add any new information to the data, it can surprisingly
    improve the performance of certain machine learning models.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 它将二维向量**x**映射到三维向量**y**。我通过简单地将第一行的条目平方来创建了第三行。虽然这种扩展并没有给数据添加任何新的信息，但它却能出奇地改善某些机器学习模型的性能。
- en: You might think that, unlike wide matrices, tall matrices allow the reconstruction
    of the original **x** from **y**, where **y** = **Bx**, since no information is
    discarded — only added.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为，与宽矩阵不同，高矩阵允许从**y**中重建原始的**x**，其中**y** = **Bx**，因为没有信息被丢弃——只是添加了信息。
- en: 'And you’d be right! Look at what happens when we left-multiply by matrix **B**ᵀ,
    just like we tried before, but without success: **B**ᵀ**y** = **B**ᵀ**Bx**. This
    time, matrix **B**ᵀ**B** is invertible, so we can left-multiply by its inverse:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 你说得对！看看当我们像之前尝试过的那样左乘矩阵**B**ᵀ时会发生什么，但这次成功了：**B**ᵀ**y** = **B**ᵀ**Bx**。这次，矩阵**B**ᵀ**B**是可逆的，所以我们可以左乘它的逆矩阵：
- en: '**(B**ᵀ**B)**⁻¹**B**ᵀ**y** = **(B**ᵀ**B)**⁻¹**(B**ᵀ**B)x**'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '**(B**ᵀ**B)**⁻¹**B**ᵀ**y** = **(B**ᵀ**B)**⁻¹**(B**ᵀ**B)x**'
- en: 'and finally obtain:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 最终得到：
- en: '![](../Images/f7a2a74813ff1fef6d8bbd655f4619c7.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f7a2a74813ff1fef6d8bbd655f4619c7.png)'
- en: 'This is how it works in Python:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它在Python中的实现方式：
- en: '[PRE10]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To summarize: the determinant measures the redundancy (or linear independence)
    of the columns and rows of a matrix. However, it only makes sense when applied
    to square matrices. Non-square matrices represent transformations between spaces
    of different dimensions and necessarily have linearly dependent columns or rows.
    If the target dimension is higher than the input dimension, it’s possible to reconstruct
    lower-dimensional vectors from higher-dimensional ones.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下：行列式衡量矩阵列和行的冗余性（或线性独立性）。然而，只有在应用于方阵时，它才有意义。非方阵表示不同维度空间之间的变换，并且必然具有线性相关的列或行。如果目标维度高于输入维度，便有可能从高维向量中重建低维向量。
- en: '10\. Inverse and Transpose: similarities and differences'
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10\. 逆矩阵与转置矩阵：相似性与差异
- en: You’ve certainly noticed that the inverse and transpose operations play a key
    role in matrix algebra. In this section, we bring together the most useful identities
    related to these operations.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 你肯定已经注意到，逆运算和转置运算在矩阵代数中发挥了关键作用。在本节中，我们将汇总与这些运算相关的最有用的恒等式。
- en: Whenever I apply the inverse operator, I assume that the matrix being operated
    on is square.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我应用逆运算符时，我假设被操作的矩阵是方阵。
- en: We’ll start with the obvious one that hasn’t appeared yet.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从尚未出现的显而易见的那个开始。
- en: '![](../Images/ec979c5c54f3212d0be3d698b6e191b6.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec979c5c54f3212d0be3d698b6e191b6.png)'
- en: 'Here are the previously given identities (2) and (5), placed side by side:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是先前给出的恒等式（2）和（5），并排放置：
- en: '![](../Images/147f2a2d2ee0053d27fe2ee37563b518.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/147f2a2d2ee0053d27fe2ee37563b518.png)'
- en: 'Let’s walk through the following reasoning, starting with the identity from
    equation (4), where **A** is replaced by the composite **AB**:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下推理，首先从方程（4）中的恒等式开始，其中**A**被复合矩阵**AB**替代：
- en: '![](../Images/7d0da538c70be86d7770cfa67ef8182d.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7d0da538c70be86d7770cfa67ef8182d.png)'
- en: The parentheses on the right are not needed. After removing them, I right-multiply
    both sides by the matrix **B**⁻¹ and then by **A**⁻¹.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 右边的括号是多余的。去掉它们后，我将矩阵**B**⁻¹右乘到等式两边，然后是**A**⁻¹。
- en: '![](../Images/c71c62e2e8f8911aea2ae49a4b949246.png)![](../Images/7711ca2ab945fb221b91d72f15936b4f.png)![](../Images/db6b16f6655d291f2de92931dc97448f.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c71c62e2e8f8911aea2ae49a4b949246.png)![](../Images/7711ca2ab945fb221b91d72f15936b4f.png)![](../Images/db6b16f6655d291f2de92931dc97448f.png)'
- en: 'Thus, we observe the next similarity between inversion and transposition (see
    equation (3)):'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们观察到反演和转置之间的下一个相似性（参见方程（3））：
- en: '![](../Images/10eaf1e5d985dceca4fe6a9e09a7c33a.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10eaf1e5d985dceca4fe6a9e09a7c33a.png)'
- en: You might be disappointed now, as the following only applies to transposition.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可能会失望，因为接下来的内容只适用于转置。
- en: '![](../Images/2587c3c2b63f52999284d1f62a5b1816.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2587c3c2b63f52999284d1f62a5b1816.png)'
- en: But imagine if **A** and **B** were scalars. The same for the inverse would
    be a mathematical scandal!
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 但是假设**A**和**B**是标量。对于逆操作来说，这将是一个数学丑闻！
- en: 'For a change, the identity in equation (4) works only for the inverse:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 为了变化，方程（4）中的恒等式仅适用于逆操作：
- en: '![](../Images/468ae0bc1d92eed062816ab96280ed17.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/468ae0bc1d92eed062816ab96280ed17.png)'
- en: I’ll finish off this section by discussing the interplay between inversion and
    transposition.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我将通过讨论反演和转置之间的相互作用来结束这一部分。
- en: 'From the last equation, along with equation (3), we get the following:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 从最后一个方程和方程（3）结合，我们得到以下结果：
- en: '![](../Images/39ef86a68fba2679de18655cbb169a98.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/39ef86a68fba2679de18655cbb169a98.png)'
- en: 'Keep in mind that **I**ᵀ = **I**. Right-multiplying by the inverse of **A**ᵀ
    yields the following identity:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，**I**ᵀ = **I**。右乘**A**ᵀ的逆矩阵将得到以下恒等式：
- en: '![](../Images/3ab87eb0e07fe889ebd9802afde5b1f4.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3ab87eb0e07fe889ebd9802afde5b1f4.png)'
- en: 11\. Translation by a vector
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11\. 通过一个向量平移
- en: You might be wondering why I’m focusing only on the operation of multiplying
    a vector by a matrix, while neglecting the translation of a vector by adding another
    vector.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么我只关注将向量与矩阵相乘的运算，而忽略了通过加上另一个向量来平移向量的操作。
- en: One reason is purely mathematical. Linear operations offer significant advantages,
    such as ease of transformation, simplicity of expressions, and algorithmic efficiency.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个原因纯粹是数学上的。线性运算提供了显著的优势，比如变换的便利性、表达式的简洁性和算法的高效性。
- en: 'A key property of linear operations is that a linear combination of inputs
    leads to a linear combination of outputs:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 线性运算的一个关键特性是，输入的线性组合会导致输出的线性组合：
- en: '![](../Images/5a0cacd0a12470f99c0fbb5d74385709.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a0cacd0a12470f99c0fbb5d74385709.png)'
- en: where *α* *, β* are real scalars, and *Lin* represents a linear operation.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 其中*α*，*β*是实数标量，*Lin*表示一个线性操作。
- en: 'Let’s first examine the matrix-vector multiplication operator *Lin*[**x**]
    = **Ax** from equation (1):'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先检查方程（1）中的矩阵-向量乘法算子*Lin*[**x**] = **Ax**：
- en: '![](../Images/7fa1ced0afa32aacbed05cb51a10d0a8.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7fa1ced0afa32aacbed05cb51a10d0a8.png)'
- en: This confirms that matrix-vector multiplication is a linear operation.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这证实了矩阵与向量相乘是一个线性操作。
- en: 'Now, let’s consider a more general transformation, which involves a shift by
    a vector **b**:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们考虑一个更一般的变换，它涉及通过向量**b**的平移：
- en: '![](../Images/011c6dfe8c7ba8d4d26c0489900894d8.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/011c6dfe8c7ba8d4d26c0489900894d8.png)'
- en: Plug in a weighted sum and see what comes out.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 代入一个加权和，看看会得到什么结果。
- en: '![](../Images/9ba9c54b156a84f7cd1ec877c294e76d.png)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9ba9c54b156a84f7cd1ec877c294e76d.png)'
- en: You can see that adding **b** disrupts the linearity. Operations like this are
    called **affine** to differentiate them from linear ones.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，添加**b**会破坏线性。像这样的操作被称为**仿射**，以区别于线性操作。
- en: Don’t worry though — there’s a simple way to eliminate the need for translation.
    Simply shift the data beforehand, for example, by centering it, so that the vector
    **b** becomes zero. This is a common approach in data science.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 不过不用担心——有一种简单的方法可以消除翻译的需要。只需事先对数据进行平移处理，例如通过居中，使得向量**b**变为零。这是数据科学中常用的方法。
- en: Therefore, the data scientist only needs to worry about matrix-vector multiplication.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，数据科学家只需要关注矩阵-向量乘法。
- en: 12\. Final words
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 12. 结语
- en: I hope that linear algebra seems easier to understand now, and that you’ve got
    a sense of how interesting it can be.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望现在线性代数看起来更容易理解了，也希望你已经感受到它有多么有趣。
- en: If I’ve sparked your interest in learning more, that’s great! But even if it’s
    just that you feel more confident with the course material, that’s still a win.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我激发了你进一步学习的兴趣，那太好了！但即便只是让你对课程内容更有信心，那也是一种收获。
- en: Bear in mind that this is more of a semi-formal introduction to the subject.
    For more rigorous definitions and proofs, you might need to look at specialised
    literature.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这更像是对该主题的半正式介绍。要了解更严谨的定义和证明，您可能需要查阅专门的文献。
- en: '*Unless otherwise noted, all images are by the author*'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有注明，所有图片均由作者提供*'
- en: References
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] Gilbert Strang. *Introduction to linear algebra*. Wellesley-Cambridge Press,
    2022.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '[1] Gilbert Strang. *线性代数导论*. 威尔斯利-剑桥出版社, 2022年。'
- en: '[2] Marc Peter Deisenroth, A. Aldo Faisal, Cheng Soon Ong. *Mathematics for
    machine learning*. Cambridge University Press, 2020.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '[2] Marc Peter Deisenroth, A. Aldo Faisal, Cheng Soon Ong. *机器学习中的数学*. 剑桥大学出版社,
    2020年。'
