- en: Supercharging Prompt Engineering via Symbolic Program Search
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过符号程序搜索超充提示工程
- en: 原文：[https://towardsdatascience.com/supercharging-prompt-engineering-via-symbolic-program-search-c6c353bc80a4?source=collection_archive---------1-----------------------#2024-04-22](https://towardsdatascience.com/supercharging-prompt-engineering-via-symbolic-program-search-c6c353bc80a4?source=collection_archive---------1-----------------------#2024-04-22)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/supercharging-prompt-engineering-via-symbolic-program-search-c6c353bc80a4?source=collection_archive---------1-----------------------#2024-04-22](https://towardsdatascience.com/supercharging-prompt-engineering-via-symbolic-program-search-c6c353bc80a4?source=collection_archive---------1-----------------------#2024-04-22)
- en: Find better prompts by exploring a large set of prompt variants automatically
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过自动探索大量提示变体来找到更好的提示
- en: '[](https://medium.com/@toschnab?source=post_page---byline--c6c353bc80a4--------------------------------)[![Tobias
    Schnabel](../Images/92a6c1addc602dae8e8d54fec5116385.png)](https://medium.com/@toschnab?source=post_page---byline--c6c353bc80a4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--c6c353bc80a4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--c6c353bc80a4--------------------------------)
    [Tobias Schnabel](https://medium.com/@toschnab?source=post_page---byline--c6c353bc80a4--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@toschnab?source=post_page---byline--c6c353bc80a4--------------------------------)[![Tobias
    Schnabel](../Images/92a6c1addc602dae8e8d54fec5116385.png)](https://medium.com/@toschnab?source=post_page---byline--c6c353bc80a4--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--c6c353bc80a4--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--c6c353bc80a4--------------------------------)
    [Tobias Schnabel](https://medium.com/@toschnab?source=post_page---byline--c6c353bc80a4--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--c6c353bc80a4--------------------------------)
    ·8 min read·Apr 22, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--c6c353bc80a4--------------------------------)
    ·阅读时间8分钟·2024年4月22日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/bfbe607a7b9395877d23744afe241481.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bfbe607a7b9395877d23744afe241481.png)'
- en: Photo by [Icons8 Team](https://unsplash.com/@icons8?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Icons8 Team](https://unsplash.com/@icons8?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: It’s no secret that much of the success of LLMs still depends on our ability
    to prompt them with the right instructions and examples. As newer generation LLMs
    become more and more powerful, prompts have become complex enough to be considered
    [programs themselves](/intro-to-dspy-goodbye-prompting-hello-programming-4ca1c6ce3eb9).
    These prompt programs are a lot like recipes — both have a set of instructions
    to follow and transform raw materials, be it data or ingredients.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 不是什么秘密，LLM（大规模语言模型）的成功很大程度上依赖于我们能够为它们提供正确的提示和示例。随着新一代LLM变得越来越强大，提示已经变得足够复杂，以至于可以被视为[程序本身](/intro-to-dspy-goodbye-prompting-hello-programming-4ca1c6ce3eb9)。这些提示程序与食谱非常相似——它们都有一组需要遵循的指令，并将原材料（无论是数据还是食材）转化为最终的成果。
- en: Prompt engineering is thus similar to improving a recipe. Home chefs will often
    stick to the overall recipe but make some small changes — for example leaving
    out garlic or adding parsley in a pasta dish. Frameworks like [DSPy](https://github.com/stanfordnlp/dspy)
    are following this overall paradigm when they optimize the in-context examples.
    Pro-level chefs, however, use the recipe as inspiration, and often re-interpret
    components of the dish completely. For example, they might see spaghetti in pasta
    dish as the starchy component and might swap it for freshly made gnocchi to achieve
    a similar composition.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 提示工程类似于改进一个食谱。家庭厨师通常会遵循整体食谱，但会做一些小的修改——例如在意面菜肴中去掉大蒜或加入香菜。[DSPy](https://github.com/stanfordnlp/dspy)这样的框架在优化上下文示例时遵循了这种总体范式。然而，专业厨师将食谱视为灵感来源，并且经常完全重新解释菜肴的组成部分。例如，他们可能会将意面视为富含淀粉的组成部分，并将其换成新鲜制作的意大利饺子，以达到类似的效果。
- en: What is it that allows pro-level chefs to work so creatively? It’s that they
    think about recipes in an abstract way, like in the pasta example above. Manual
    prompt engineering is similar to pro-level cooking. It can get impressive results
    but requires [a lot of time and knowledge](https://medium.com/the-generator/the-perfect-prompt-prompt-engineering-cheat-sheet-d0b9c62a2bba).
    What we really want is the creativity of manual prompt engineering but without
    the effort.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 是什么让专业级厨师能如此富有创意地工作呢？正是因为他们以抽象的方式思考食谱，就像上面提到的意面例子一样。手动提示工程类似于专业级烹饪。它可以获得令人印象深刻的结果，但需要[大量的时间和知识](https://medium.com/the-generator/the-perfect-prompt-prompt-engineering-cheat-sheet-d0b9c62a2bba)。我们真正想要的是手动提示工程的创造力，但无需付出那么多努力。
- en: The power of abstract prompts
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 抽象提示的强大之处
- en: 'Let’s say we want to improve a prompt for labeling speaker responses. We’ll
    eventually run it with many different inputs, but plug in a concrete one for now:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想改进一个用于标注发言人回应的提示。我们最终会使用许多不同的输入，但暂时先插入一个具体的例子：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Assume, for a moment, that we had an abstract representation of this prompt
    that pulls out its separate components and is easy to manipulate. Maybe something
    like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 假设，暂时我们有一个抽象的提示表示，它提取出单独的组件并且易于操作。也许是这样的：
- en: '![](../Images/f419eb3d7a2cb20fc0c6a90b9918af6a.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f419eb3d7a2cb20fc0c6a90b9918af6a.png)'
- en: A simple prompt for a classification task represented as an abstract symbolic
    program. Image by author.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的分类任务提示，以抽象符号程序表示。图片由作者提供。
- en: With this, you could automate a lot of the (semi)-manual tinkering you have
    to do during prompt prototyping. Making small edits such as paraphrasing would
    be just the start. Want to try out [Chain-of-Thought reasoning](/chain-of-thought-prompting-for-llms-33c963eead38)?
    Add a paragraph that says “Let’s think step-by-step.” How about changing the data
    formatting to JSON? Simply change the `format`attribute of the InputData parameters.
    You can also explore
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，你可以自动化在提示原型过程中需要进行的大量（半）手动调整。像改写这样的简单编辑只是开始。想试试[链式思维推理](https://chain-of-thought-prompting-for-llms-33c963eead38)吗？添加一段话说“让我们一步一步思考”。怎么样更改数据格式为JSON？只需更改`format`参数的属性。你还可以探索
- en: Going from single examples to batch annotation
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从单一示例到批量注释
- en: Changing your retriever and ranking function in a RAG scenario
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在RAG场景中更改你的检索器和排序函数
- en: Re-ordering some of the paragraphs
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新排序一些段落
- en: Compressing certain parts of the instructions
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩指令中的某些部分
- en: Etc.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等等。
- en: Essentially, plug in your favorite prompt engineering heuristic. This abstract
    representation of prompts allows us to truly get creative and automatically explore
    a large space of possible prompts. But how can we represent prompts as abstract
    and modifiable programs in Python? Read on.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，插入你最喜欢的提示工程启发式方法。提示的这种抽象表示方式使我们能够真正发挥创意，并自动探索大量可能的提示空间。那么，我们如何将提示表示为抽象且可修改的程序呢？继续阅读。
- en: Turning prompts into abstract programs
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将提示转换为抽象程序
- en: “Any problem in computer science can be solved by another layer of indirection.”
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “计算机科学中的任何问题都可以通过另一层间接性来解决。”
- en: ''
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[David J. Wheeler](https://en.wikipedia.org/wiki/David_Wheeler_(computer_scientist))'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[David J. Wheeler](https://en.wikipedia.org/wiki/David_Wheeler_(computer_scientist))'
- en: 'To represent abstract prompts, let’s first convert it into a *non-symbolic
    prompt program* by breaking them into individual components, implemented as Python
    classes:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表示抽象提示，首先让我们将其转换为*非符号提示程序*，通过将它们拆解为单独的组件，并作为Python类实现：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So far, so good. It’s similar to what DSpy does, albeit more general as we also
    represent the internal structure of a prompt.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，进展不错。这类似于DSpy所做的，尽管更加通用，因为我们还表示了提示的内部结构。
- en: Next, we turn it into a *symbolic prompt program* so that we canmake arbitrary
    changes (this is also beyond static DSPy programs). This can be done with [pyGlove](https://pyglove.readthedocs.io/en/latest/notebooks/intro/birdview.html),
    a library for symbolic object-oriented programming (SOOP). pyGlove turns Python
    classes into manipulable, symbolic objects whose properties remain fully editable
    after instantiation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将其转换为*符号提示程序*，以便可以进行任意更改（这也超出了静态DSPy程序的范围）。这可以通过[pyGlove](https://pyglove.readthedocs.io/en/latest/notebooks/intro/birdview.html)库完成，这是一个用于符号面向对象编程（SOOP）的库。pyGlove将Python类转化为可操作的符号对象，其属性在实例化后仍然可以完全编辑。
- en: 'With pyGlove, all we need to do is add the `pg.symbolize` decorator:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用pyGlove，我们只需要添加`pg.symbolize`装饰器：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can now query and modify prompt programs via a whole host of specifiers,
    similar to working with a DOM tree. Let’s say we’d like to transform our program
    above into the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过一系列说明符查询和修改提示程序，类似于操作DOM树。假设我们希望将上面的程序转换成以下内容：
- en: '![](../Images/7df9a7710a1fb272046f66ae8c63ad21.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7df9a7710a1fb272046f66ae8c63ad21.png)'
- en: The target prompt program we want to achieve. Image by author.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望实现的目标提示程序。图片来源：作者。
- en: 'Note that we’re now asking “Does the response mean yes?” and not providing
    output labels of yes and no. To get there, we need to (i) change the instruction
    text and (ii) delete the third node. With pyGlove, this is very easy:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们现在在问“回应是表示肯定吗？”而不是提供肯定和否定的输出标签。要做到这一点，我们需要（i）更改指令文本，和（ii）删除第三个节点。使用pyGlove，这非常简单：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The printout confirms that we’re successful:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 输出确认了我们的成功：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Voilà! Essentially, pyGlove gives us a way to work with Python classes (and
    functions) as if they were still source code with little overhead. Now that we
    have flexible and easily manipulable representations, let’s put them to use.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 瞧！本质上，pyGlove为我们提供了一种方式，可以像操作源代码一样使用Python类（和函数），几乎没有额外的开销。现在我们有了灵活且易于操作的表示方式，让我们开始使用它们吧。
- en: Wait a minute. We might have a way to represent and modify prompts now, but
    we’re still missing a process to optimize them automatically.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下。我们现在可能有了一种表示和修改提示的方法，但我们仍然缺少一个自动优化它们的过程。
- en: Once chefs understand the abstraction and components of a recipe, they’ll try
    out many variants, refining the taste, cost, or presentation, until it feels right.
    To do the same with prompt abstractions, we need a search algorithm, an objective
    as well as set of labeled samples to know that we’re making progress.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦厨师理解了食谱的抽象和组成部分，他们就会尝试多种变体，精炼味道、成本或外观，直到感觉合适。要做同样的事情来优化提示抽象，我们需要一个搜索算法、一个目标以及一组标注样本，以便知道我们在取得进展。
- en: Sounds like a lot to implement yourself? Meet [SAMMO](https://github.com/microsoft/sammo),
    a Python library for building and optimizing symbolic prompt programs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 听起来需要自己实现很多东西？认识一下[SAMMO](https://github.com/microsoft/sammo)，一个用于构建和优化符号提示程序的Python库。
- en: 'Warming up: Instruction tuning with SAMMO'
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 热身：使用SAMMO进行指令调优
- en: To illustrate SAMMO’s core workflow, we’ll now show how to tune the instructions
    part of our prompt example from above. Once we’ve worked through this toy example,
    we’ll be ready to discuss more advanced applications, like RAG optimization or
    compression.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明SAMMO的核心工作流程，我们现在将展示如何调整上述提示示例中的指令部分。一旦我们完成了这个简单示例，我们就可以准备讨论更高级的应用，比如RAG优化或压缩。
- en: The key steps are
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 关键步骤是
- en: Defining your starting prompt
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义你的初始提示
- en: Getting the data ready — a few hundred labeled examples are enough.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备数据——几百个标注样本就足够了。
- en: Defining the objective
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义目标
- en: Choosing a set of mutators
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一组变异器
- en: Running the optimization
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行优化
- en: 'Step 1: Defining your starting prompt'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤1：定义你的初始提示
- en: We’ve pretty much already done this above. SAMMO expects a function, so we’ll
    have to wrap it in one. If you’d like to store extra information, wrap it in a
    [Callable](/python-callables-the-basics-and-the-secrets-ba88bf0729aa) instead.
    We’ll also wrap it in an Output component to run it.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上已经做到了这一点。SAMMO期望一个函数，所以我们必须将其包装在一个函数中。如果你想存储额外的信息，可以将其包装在[可调用对象](/python-callables-the-basics-and-the-secrets-ba88bf0729aa)中。我们还会将它包装在一个输出组件中以运行它。
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Step 2: Getting your data ready'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤2：准备你的数据
- en: SAMMO uses a simple data structure called DataTable to pair inputs with outputs
    (labels). This will help us with evaluation and bookkeeping.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: SAMMO使用一种简单的数据结构，称为DataTable，用于将输入与输出（标签）配对。这将帮助我们进行评估和记账。
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Step 3: Defining the objective'
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤3：定义目标
- en: 'We’re interested in optimizing the accuracy, so that’s what we’re implementing
    below:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是优化准确性，所以我们将在下面实现这个目标：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Step 4: Choosing a set of mutators'
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤4：选择一组变异器
- en: Here is where you can be as creative as you’d like. You can implement your own
    operators that generate new prompt variants, or simply rely on the pre-built mutation
    operators that SAMMO offers.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以尽情发挥创造力。你可以实现自己的运算符来生成新的提示变体，或者仅仅依赖于SAMMO提供的预构建突变运算符。
- en: Below, we do the latter and go for a mix of paraphrasing and inducing instructions
    from a few labeled examples, essentially implementing [Automatic Prompt Engineering
    (APE)](https://cobusgreyling.medium.com/automatic-prompt-engineering-907e230ece0).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面，我们采用后者，混合使用释义和从一些标注示例中引导指令，实质上是在实现[自动提示工程（APE）](https://cobusgreyling.medium.com/automatic-prompt-engineering-907e230ece0)。
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Step 5: Running the optimization'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第五步：运行优化
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The introductory example prompt was actually taken from the [BigBench implicatures
    task](https://github.com/google/BIG-bench/tree/main/bigbench/benchmark_tasks/implicatures)
    which we’ll use to run this experiment. If you run the optimization with 100 samples
    for training and testing and a budget of 48 candidates evaluations, you’ll see
    that SAMMO improves the starting prompt accuracy from **0.56** to **0.77** — a
    **37.5%** improvement. What instructions worked best?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍性示例提示实际上取自于[BigBench含义任务](https://github.com/google/BIG-bench/tree/main/bigbench/benchmark_tasks/implicatures)，我们将使用它来运行本次实验。如果您使用100个样本进行训练和测试，并设置48个候选项评估预算，您将看到SAMMO将起始提示的准确率从**0.56**提升到**0.77**——提高了**37.5%**。哪些指令效果最好？
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Interestingly, different LLMs prefer quite different instructions. GPT-3.5
    liked generic instructions the best as seen above. Llama-2’s best prompt selected
    by SAMMO with the same training and budget setup used an empty string in the instructions
    part:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，不同的LLM偏好不同的指令。如上所见，GPT-3.5最喜欢通用指令。SAMMO为Llama-2选择的最佳提示，在相同的训练和预算设置下，指令部分使用了一个空字符串：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Getting practical: RAG tuning'
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践操作：RAG调优
- en: We’ll now show how to convert a RAG pipeline into a symbolic program and tune
    it with SAMMO. We’ll use semantic parsing as our application task where we want
    to translate user queries into domain-specific language (DSL) constructs, for
    example, to query some database or call an external API.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将展示如何将RAG管道转换为符号程序，并使用SAMMO进行调优。我们将使用语义解析作为应用任务，在该任务中，我们希望将用户查询转换为领域特定语言（DSL）结构，例如查询某些数据库或调用外部API。
- en: To create the starting prompt, we include a list of all operators, use an embedding-based
    retriever to get five fewshot examples and then instruct the LLM to output its
    answer in the same format as the examples.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建起始提示，我们包括了所有操作符的列表，使用基于嵌入的检索器获取五个少样本示例，然后指示LLM按与示例相同的格式输出答案。
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now that we have a symbolic program, let’s get creative. For the mutations,
    we explore
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个符号程序，让我们发挥创意。对于突变，我们进行探索
- en: varying numbers of fewshot examples
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同数量的少样本示例
- en: different formats (XML, JSON, line-by-line) for the fewshot examples
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为少样本示例提供不同格式（XML、JSON、逐行格式）
- en: providing additional information about the DSL or not
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 是否提供关于DSL的额外信息
- en: showing input-output pairs or groups of inputs and outputs
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示输入输出对或输入输出组
- en: Running SAMMO with these and a total budget of 24 candidates to try out, we
    can see a clear trend. Below are test set accuracies for three different datasets
    across four different LLMs. In the overwhelming majority of cases, we can see
    that SAMMO can lift performance substantially, even for the highest-performing
    LLMs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些并尝试总共24个候选项时，我们可以看到一个明显的趋势。以下是三个不同数据集在四个不同LLM上的测试集准确率。在绝大多数情况下，我们可以看到SAMMO显著提升了性能，即使对于表现最好的LLM也是如此。
- en: '![](../Images/b8b5eb0779ecd8d30ded3ab902eba027.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8b5eb0779ecd8d30ded3ab902eba027.png)'
- en: Even with a small budget of 24 candidates evaluations we can get major lifts
    in performance. Image by author.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 即使预算只有24个候选项的评估，我们也能在性能上获得显著提升。图片由作者提供。
- en: Conclusions
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Converting your prompts into symbolic programs is a really powerful idea to
    explore a large design space of possible prompts and settings. Just as a pro-level
    chef deconstructs and reinterprets recipes to create culinary innovations, symbolic
    programming lets us apply the same level of creativity and experimentation to
    automatic prompt engineering.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 将提示转换为符号程序是一个非常强大的想法，可以探索大量可能的提示和设置设计空间。就像一位专业厨师解构并重新诠释食谱以创造烹饪创新一样，符号编程让我们能够将同样的创造力和实验精神应用于自动化提示工程。
- en: SAMMO implements symbolic program search through a set of mutation operators
    and search routine. Empirically, this can translate into large improvements in
    accuracy for both instruction tuning and RAG tuning, independent of the backend
    LLM.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: SAMMO通过一组突变操作符和搜索例程实现了符号程序搜索。根据经验，这可以在指令调优和RAG调优中带来准确率的大幅提升，与后端LLM无关。
- en: You can extend SAMMO with custom mutation operators to include your favorite
    prompt engineering techniques or implement objectives to go beyond accuracy (e.g.,
    cost). Happy prompt cooking!
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过自定义突变操作符扩展SAMMO，加入您最喜欢的提示工程技巧，或实现超越准确度（例如，成本）的目标。祝您愉快地进行提示创作！
- en: '*Disclaimer:**I am the author of SAMMO.*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*免责声明：* 我是SAMMO的作者。'
- en: Resources
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 资源
- en: '**Code & Jupyter Notebooks:** [Instruction tuning](https://github.com/microsoft/sammo/blob/main/docs/tutorials/5_instruction_optimization.ipynb)
    and [RAG tuning](https://github.com/microsoft/sammo/blob/main/examples/rag_tuning.py)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码与 Jupyter 笔记本：** [指令调优](https://github.com/microsoft/sammo/blob/main/docs/tutorials/5_instruction_optimization.ipynb)
    和 [RAG 调优](https://github.com/microsoft/sammo/blob/main/examples/rag_tuning.py)'
- en: '**Reading:** [SAMMO user guide](https://microsoft.github.io/sammo/tutorials/0_quickstart.html)
    and [paper on arXiv](https://arxiv.org/abs/2404.02319) with more details'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阅读：** [SAMMO 用户指南](https://microsoft.github.io/sammo/tutorials/0_quickstart.html)
    和 [arXiv 上的论文](https://arxiv.org/abs/2404.02319)，包含更多细节'
