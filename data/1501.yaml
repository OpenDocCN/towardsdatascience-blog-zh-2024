- en: Multi AI Agent Systems 101
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多智能体系统101
- en: 原文：[https://towardsdatascience.com/multi-ai-agent-systems-101-bac58e3bcc47?source=collection_archive---------0-----------------------#2024-06-16](https://towardsdatascience.com/multi-ai-agent-systems-101-bac58e3bcc47?source=collection_archive---------0-----------------------#2024-06-16)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/multi-ai-agent-systems-101-bac58e3bcc47?source=collection_archive---------0-----------------------#2024-06-16](https://towardsdatascience.com/multi-ai-agent-systems-101-bac58e3bcc47?source=collection_archive---------0-----------------------#2024-06-16)
- en: Automating Routine Tasks in Data Source Management with CrewAI
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CrewAI自动化数据源管理中的常规任务
- en: '[](https://miptgirl.medium.com/?source=post_page---byline--bac58e3bcc47--------------------------------)[![Mariya
    Mansurova](../Images/b1dd377b0a1887db900cc5108bca8ea8.png)](https://miptgirl.medium.com/?source=post_page---byline--bac58e3bcc47--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--bac58e3bcc47--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--bac58e3bcc47--------------------------------)
    [Mariya Mansurova](https://miptgirl.medium.com/?source=post_page---byline--bac58e3bcc47--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://miptgirl.medium.com/?source=post_page---byline--bac58e3bcc47--------------------------------)[![Mariya
    Mansurova](../Images/b1dd377b0a1887db900cc5108bca8ea8.png)](https://miptgirl.medium.com/?source=post_page---byline--bac58e3bcc47--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--bac58e3bcc47--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--bac58e3bcc47--------------------------------)
    [Mariya Mansurova](https://miptgirl.medium.com/?source=post_page---byline--bac58e3bcc47--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--bac58e3bcc47--------------------------------)
    ·26 min read·Jun 16, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--bac58e3bcc47--------------------------------)
    ·阅读时间：26分钟·2024年6月16日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/a5a6e119bd80a1c3c4af2c7c64b02bb6.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a5a6e119bd80a1c3c4af2c7c64b02bb6.png)'
- en: Image by DALL-E 3
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自 DALL-E 3
- en: Initially, when ChatGPT just appeared, we used simple prompts to get answers
    to our questions. Then, we encountered issues with hallucinations and began using
    RAG (Retrieval Augmented Generation) to provide more context to LLMs. After that,
    we started experimenting with AI agents, where LLMs act as a reasoning engine
    and can decide what to do next, which tools to use, and when to return the final
    answer.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，当ChatGPT刚刚出现时，我们使用简单的提示来获得我们问题的答案。随后，我们遇到了幻觉问题，开始使用RAG（检索增强生成）来为LLM提供更多上下文。之后，我们开始尝试AI代理，其中LLM作为推理引擎，决定接下来做什么、使用什么工具以及何时返回最终答案。
- en: 'The next evolutionary step is to create teams of such agents that can collaborate
    with each other. This approach is logical as it mirrors human interactions. We
    work in teams where each member has a specific role:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步的进化是创建这样的代理团队，使其能够相互协作。这种方法是合乎逻辑的，因为它反映了人类的互动方式。我们在团队中工作，每个成员都有一个特定的角色：
- en: The product manager proposes the next project to work on.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品经理提出下一个要处理的项目。
- en: The designer creates its look and feel.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计师创造其外观和感觉。
- en: The software engineer develops the solution.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件工程师开发解决方案。
- en: The analyst examines the data to ensure it performs as expected and identifies
    ways to improve the product for customers.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析师检查数据，以确保其按预期执行，并找出改进产品以满足客户需求的方法。
- en: Similarly, we can create a team of AI agents, each focusing on one domain. They
    can collaborate and reach a final conclusion together. Just as specialization
    enhances performance in real life, it could also benefit the performance of AI
    agents.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以创建一个AI代理团队，每个代理专注于一个领域。它们可以协作并共同达成最终结论。正如专业化提升现实生活中的表现一样，它也能提高AI代理的表现。
- en: Another advantage of this approach is increased flexibility. Each agent can
    operate with its own prompt, set of tools and even LLM. For instance, we can use
    different models for different parts of our system. You can use GPT-4 for the
    agent that needs more reasoning and GPT-3.5 for the one that does only simple
    extraction. We can even fine-tune the model for small specific tasks and use it
    in our crew of agents.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的另一个优势是更高的灵活性。每个代理可以使用自己独立的提示、工具集甚至是LLM。例如，我们可以为系统的不同部分使用不同的模型。你可以为需要更多推理的代理使用GPT-4，而为只做简单提取的代理使用GPT-3.5。我们甚至可以为小型特定任务对模型进行微调，并将其用于我们的代理团队中。
- en: The potential drawbacks of this approach are time and cost. Multiple interactions
    and knowledge sharing between agents require more calls to LLM and consume additional
    tokens. This could result in longer wait times and increased expenses.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的潜在缺点是时间和成本。多个智能体之间的交互和知识共享需要更多的 LLM 调用，并消耗额外的令牌。这可能导致更长的等待时间和增加的费用。
- en: There are several frameworks available for multi-agent systems today.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 今天有几个框架可以用于多智能体系统。
- en: 'Here are some of the most popular ones:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些最流行的框架：
- en: '[AutoGen](https://github.com/microsoft/autogen?ref=blog.langchain.dev): Developed
    by Microsoft, AutoGen uses a conversational approach and was one of the earliest
    frameworks for multi-agent systems,'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AutoGen](https://github.com/microsoft/autogen?ref=blog.langchain.dev)：由微软开发，AutoGen
    使用对话式的方法，是最早的多智能体系统框架之一。'
- en: '[LangGraph](https://github.com/langchain-ai/langgraph): While not strictly
    a multi-agent framework, LangGraph allows for defining complex interactions between
    actors using a graph structure. So, it can also be adapted to create multi-agent
    systems.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[LangGraph](https://github.com/langchain-ai/langgraph)：虽然 LangGraph 并不是严格意义上的多智能体框架，但它允许使用图结构定义演员之间的复杂交互。因此，它也可以被改编为创建多智能体系统。'
- en: '[CrewAI](https://github.com/joaomdmoura/crewAI?ref=blog.langchain.dev): Positioned
    as a high-level framework, CrewAI facilitates the creation of “crews” consisting
    of role-playing agents capable of collaborating in various ways.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CrewAI](https://github.com/joaomdmoura/crewAI?ref=blog.langchain.dev)：CrewAI
    作为一个高级框架，便于创建由角色扮演智能体组成的“团队”，这些智能体能够以多种方式协作。'
- en: I’ve decided to start experimenting with multi-agent frameworks from CrewAI
    since it’s quite widely popular and user friendly. So, it looks like a good option
    to begin with.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定从 CrewAI 开始尝试多智能体框架，因为它非常流行且易于使用。因此，它看起来是一个很好的入门选择。
- en: In this article, I will walk you through how to use CrewAI. As analysts, we’re
    the domain experts responsible for documenting various data sources and addressing
    related questions. We’ll explore how to automate these tasks using multi-agent
    frameworks.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将向你展示如何使用 CrewAI。作为分析师，我们是负责记录各种数据源并回答相关问题的领域专家。我们将探讨如何使用多智能体框架来自动化这些任务。
- en: Setting up the environment
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: Let’s start with setting up the environment. First, we need to install the CrewAI
    main package and an extension to work with tools.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从设置环境开始。首先，我们需要安装 CrewAI 主包以及一个扩展来与工具一起使用。
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: CrewAI was developed to work primarily with OpenAI API, but I would also like
    to try it with a local model. According to [the ChatBot Arena Leaderboard](https://chat.lmsys.org/?leaderboard=),
    the best model you can run on your laptop is Llama 3 (8b parameters). It will
    be the most feasible option for our use case.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: CrewAI 是为了主要与 OpenAI API 配合使用而开发的，但我也想尝试在本地模型上使用它。根据 [ChatBot Arena 排行榜](https://chat.lmsys.org/?leaderboard=)，你可以在笔记本电脑上运行的最佳模型是
    Llama 3（8b 参数）。这将是我们使用案例中最可行的选择。
- en: We can access Llama models using Ollama. Installation is pretty straightforward.
    You need to download Ollama from [the website](https://ollama.com/download) and
    then go through the installation process. That’s it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 Ollama 访问 Llama 模型。安装过程非常简单。你需要从 [官方网站](https://ollama.com/download)
    下载 Ollama，然后按照安装过程进行操作。就是这样。
- en: Now, you can test the model in CLI by running the following command.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以通过运行以下命令在 CLI 中测试模型。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: For example, you can ask something like this.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以提问类似这样的问题。
- en: '![](../Images/b47f272e89a01f843e909b4d4e5cf665.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b47f272e89a01f843e909b4d4e5cf665.png)'
- en: Let’s create a custom Ollama model to use later in CrewAI.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个自定义的 Ollama 模型，以便在 CrewAI 中稍后使用。
- en: We will start with a ModelFile ([documentation](https://github.com/ollama/ollama/blob/main/docs/modelfile.md)).
    I only specified the base model (`llama3`), temperature and stop sequence. However,
    you might add more features. For example, you can determine the system message
    using `SYSTEM` keyword.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 ModelFile 开始（[文档](https://github.com/ollama/ollama/blob/main/docs/modelfile.md)）。我只指定了基础模型（`llama3`）、温度和停止序列。不过，你可以添加更多的功能。例如，你可以使用
    `SYSTEM` 关键字来确定系统消息。
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I’ve saved it into a `Llama3ModelFile` file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经将它保存在 `Llama3ModelFile` 文件中。
- en: Let’s create a bash script to load the base model for Ollama and create the
    custom model we defined in ModelFile.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个 bash 脚本来加载 Ollama 的基础模型，并创建我们在 ModelFile 中定义的自定义模型。
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let’s execute this file.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行这个文件。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can find both files on GitHub: [Llama3ModelFile](https://github.com/miptgirl/miptgirl_medium/blob/main/crewai_answering_questions/Llama3ModelFile)
    and [llama3_setup.sh](https://github.com/miptgirl/miptgirl_medium/blob/main/crewai_answering_questions/llama3_setup.sh)'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到这两个文件：[Llama3ModelFile](https://github.com/miptgirl/miptgirl_medium/blob/main/crewai_answering_questions/Llama3ModelFile)
    和 [llama3_setup.sh](https://github.com/miptgirl/miptgirl_medium/blob/main/crewai_answering_questions/llama3_setup.sh)
- en: We need to initialise the following environmental variables to use the local
    Llama model with CrewAI.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要初始化以下环境变量以使用本地的Llama模型与CrewAI。
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We’ve finished the setup and are ready to continue our journey.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了设置，并准备继续我们的旅程。
- en: 'Use cases: working with documentation'
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例：与文档一起工作
- en: As analysts, we often play the role of subject matter experts for data and some
    data-related tools. In my previous team, we used to have a channel with almost
    1K participants, where we were answering lots of questions about our data and
    the ClickHouse database we used as storage. It took us quite a lot of time to
    manage this channel. It would be interesting to see whether such tasks can be
    automated with LLMs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 作为分析师，我们经常扮演数据和一些与数据相关工具的专家角色。在我之前的团队中，我们曾经有一个拥有近1K参与者的频道，我们在那里回答了很多关于我们的数据和我们用作存储的ClickHouse数据库的问题。我们花了相当多的时间来管理这个频道。看看这些任务是否可以通过LLM自动化执行将是很有趣的。
- en: For this example, I will use the ClickHouse database. If you’re interested,
    You can learn more about ClickHouse and how to set it up locally in [my previous
    article](https://clickhouse.com/). However, we won’t utilise any ClickHouse-specific
    features, so feel free to stick to the database you know.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，我将使用ClickHouse数据库。如果您感兴趣，您可以在[我的先前文章](https://clickhouse.com/)中了解更多关于ClickHouse以及如何在本地设置它的信息。但是，我们不会使用任何特定于ClickHouse的功能，因此请随意使用您了解的数据库。
- en: 'I’ve created a pretty simple data model to work with. There are just two tables
    in our DWH (Data Warehouse): `ecommerce_db.users` and `ecommerce_db.sessions`.
    As you might guess, the first table contains information about the users of our
    service.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建了一个非常简单的数据模型来使用。在我们的DWH（数据仓库）中只有两个表：`ecommerce_db.users` 和 `ecommerce_db.sessions`。正如你可能猜到的那样，第一个表包含有关我们服务的用户的信息。
- en: '![](../Images/3de9376c5434676a728a3ee7f0d87037.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3de9376c5434676a728a3ee7f0d87037.png)'
- en: The `ecommerce_db.sessions` table stores information about user sessions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`ecommerce_db.sessions`表存储有关用户会话的信息。'
- en: '![](../Images/6ac727891735b98720fced70326530c0.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6ac727891735b98720fced70326530c0.png)'
- en: Regarding data source management, analysts typically handle tasks like writing
    and updating documentation and answering questions about this data. So, we will
    use LLM to write documentation for the table in the database and teach it to answer
    questions about data or ClickHouse.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 关于数据源管理，分析师通常处理编写和更新文档以及回答有关这些数据的问题等任务。因此，我们将使用LLM为数据库中的表编写文档，并教它回答有关数据或ClickHouse的问题。
- en: But before moving on to the implementation, let’s learn more about the CrewAI
    framework and its core concepts.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但在继续实施之前，让我们更多地了解CrewAI框架及其核心概念。
- en: CrewAI basic concepts
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CrewAI基本概念
- en: The cornerstone of a multi-agent framework is an [**agent**](https://docs.crewai.com/core-concepts/Agents/)
    concept. In CrewAI, agents are powered by role-playing. Role-playing is a tactic
    when you ask an agent to adopt a persona and behave like a top-notch backend engineer
    or helpful customer support agent. So, when creating a CrewAI agent, you need
    to specify each agent's role, goal, and backstory so that LLM knows enough to
    play this role.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 多代理框架的基石是[**代理**](https://docs.crewai.com/core-concepts/Agents/)概念。在CrewAI中，代理由角色扮演驱动。角色扮演是一种策略，当你要求一个代理扮演一个角色并像顶尖后端工程师或乐于助人的客服代理一样行事时。因此，在创建CrewAI代理时，您需要指定每个代理的角色、目标和背景故事，以便LLM了解足够的信息来扮演这个角色。
- en: The agents’ capabilities are limited without [**tools**](https://docs.crewai.com/core-concepts/Tools/)
    (functions that agents can execute and get results). With CrewAI, you can use
    one of the predefined tools (for example, to search the Internet, parse a website,
    or do RAG on a document), create a custom tool yourself or use LangChain tools.
    So, it’s pretty easy to create a powerful agent.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 代理的能力在没有[**工具**](https://docs.crewai.com/core-concepts/Tools/)（代理可以执行并获得结果的功能）的情况下是有限的。使用CrewAI，您可以使用预定义工具之一（例如，搜索互联网、解析网站或在文档上执行RAG），自己创建自定义工具或使用LangChain工具。因此，创建强大的代理非常容易。
- en: Let’s move on from agents to the work they are doing. Agents are working on
    [**tasks**](https://docs.crewai.com/core-concepts/Tasks/#task-attributes) (specific
    assignments). For each task, we need to define a description, expected output
    (definition of done), set of available tools and assigned agent. I really like
    that these frameworks follow the managerial best practices like a clear definition
    of done for the tasks.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从智能体转到它们正在做的工作。智能体正在处理[**任务**](https://docs.crewai.com/core-concepts/Tasks/#task-attributes)（具体的任务）。对于每个任务，我们需要定义一个描述、期望的输出（完成的定义）、可用工具的集合和分配的智能体。我非常喜欢这些框架遵循管理最佳实践，例如对任务的清晰完成定义。
- en: 'The next question is how to define the execution order for tasks: which one
    to work on first, which ones can run in parallel, etc. CrewAI implemented [**processes**](https://docs.crewai.com/core-concepts/Processes/)
    to orchestrate the tasks. It provides a couple of options:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个问题是如何定义任务的执行顺序：首先做哪个任务，哪些任务可以并行执行，等等。CrewAI 实现了[**流程**](https://docs.crewai.com/core-concepts/Processes/)来协调任务。它提供了几个选项：
- en: '**Sequential** —the most straightforward approach when tasks are called one
    after another.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**顺序性** — 当任务一个接一个地被调用时，这是一种最直接的方式。'
- en: '**Hierarchical** — when there’s a manager (specified as LLM model) that creates
    and delegates tasks to the agents.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**层级化** — 当有一个经理（指定为LLM模型）创建并委派任务给智能体时。'
- en: Also, CrewAI is working on a consensual process. In such a process, agents will
    be able to make decisions collaboratively with a democratic approach.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，CrewAI 正在处理一个共识过程。在这样的过程中，智能体将能够通过民主的方式协作做出决策。
- en: 'There are other levers you can use to tweak the process of tasks’ execution:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他一些手段，你可以用来调整任务执行的过程：
- en: You can mark tasks as “asynchronous”, then they will be executed in parallel,
    so you will be able to get an answer faster.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以将任务标记为“异步”，然后它们将并行执行，这样你将能更快得到答案。
- en: You can use the “human input” flag on a task, and then the agent will ask for
    human approval before finalising the output of this task. It can allow you to
    add an oversight to the process.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在任务上使用“人工输入”标志，然后智能体将在最终确定该任务输出之前请求人类批准。这可以让你在过程中加入监督。
- en: We’ve defined all the primary building blocks and can discuss the holly grail
    of CrewAI — [**crew**](https://docs.crewai.com/core-concepts/Crews/#crew-attributes)
    concept. The crew represents the team of agents and the set of tasks they will
    be working on. The approach for collaboration (processes we discussed above) can
    also be defined at the crew level.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经定义了所有的基本构件，并可以讨论CrewAI的圣杯——[**小组**](https://docs.crewai.com/core-concepts/Crews/#crew-attributes)概念。小组代表智能体团队和他们将要处理的任务集合。协作的方式（我们之前讨论的流程）也可以在小组级别进行定义。
- en: 'Also, we can set up the [**memory**](https://docs.crewai.com/core-concepts/Memory/)for
    a crew. Memory is crucial for efficient collaboration between the agents. CrewAI
    supports three levels of memory:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以为一个小组设置[**记忆**](https://docs.crewai.com/core-concepts/Memory/)。记忆对于智能体之间的高效协作至关重要。CrewAI
    支持三种记忆级别：
- en: Short-term memory stores information related to the current execution. It helps
    agents to work together on the current task.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 短期记忆存储与当前执行相关的信息。它帮助智能体在当前任务中协作。
- en: Long-term memory is data about the previous executions stored in the local database.
    This type of memory allows agents to learn from earlier iterations and improve
    over time.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长期记忆是存储在本地数据库中的关于先前执行的数据。这种类型的记忆使得智能体能够从早期的迭代中学习并随时间改进。
- en: Entity memory captures and structures information about entities (like personas,
    cities, etc.)
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体记忆捕捉并结构化关于实体的信息（如角色、城市等）。
- en: Right now, you can only switch on all types of memory for a crew without any
    further customisation. However, it doesn’t work with the Llama models.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，你只能为小组开启所有类型的记忆，而无法进行进一步的自定义。不过，这在Llama模型上不起作用。
- en: We’ve learned enough about the CrewAI framework, so it’s time to start using
    this knowledge in practice.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学到了足够多的CrewAI框架内容，现在是时候将这些知识付诸实践了。
- en: 'Use case: writing documentation'
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例：编写文档
- en: 'Let’s start with a simple task: putting together the documentation for our
    DWH. As we discussed before, there are two tables in our DWH, and I would like
    to create a detailed description for them using LLMs.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个简单的任务开始：为我们的DWH编写文档。正如我们之前讨论过的，DWH中有两个表，我希望使用LLM创建它们的详细描述。
- en: First approach
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第一种方法
- en: In the beginning, we need to think about the team structure. Think of this as
    a typical managerial task. Who would you hire for such a job?
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，我们需要考虑团队结构。这就像一个典型的管理任务。你会为这样的工作雇佣谁？
- en: 'I would break this task into two parts: retrieving data from a database and
    writing documentation. So, we need a database specialist and a technical writer.
    The database specialist needs access to a database, while the writer won’t need
    any special tools.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把这个任务分为两部分：从数据库中检索数据和编写文档。因此，我们需要一位数据库专家和一位技术写作者。数据库专家需要访问数据库，而写作者则不需要任何特殊工具。
- en: '![](../Images/38ecf57b23d0f2c2cc2dd8f8031f6b1b.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/38ecf57b23d0f2c2cc2dd8f8031f6b1b.png)'
- en: Now, we have a high-level plan. Let’s create the agents.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了一个高层次的计划。让我们创建这些代理。
- en: For each agent, I’ve specified the role, goal and backstory. I’ve tried my best
    to provide agents with all the needed context.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个代理，我已经指定了角色、目标和背景故事。我尽力为代理提供了所有需要的上下文。
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We will use a simple sequential process, so there’s no need for agents to delegate
    tasks to each other. That’s why I specified `allow_delegation = False`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个简单的顺序过程，因此代理之间无需相互委派任务。这就是为什么我指定了`allow_delegation = False`。
- en: The next step is setting the tasks for agents. But before moving to them, we
    need to create a custom tool to connect to the database.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是为代理设置任务。但在进行这些任务之前，我们需要创建一个自定义工具来连接数据库。
- en: First, I put together a function to execute ClickHouse queries using HTTP API.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我编写了一个函数，用于通过HTTP API执行ClickHouse查询。
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: When working with LLM agents, it’s important to make tools fault-tolerant. For
    example, if the database returns an error (`status_code != 200`), my code won’t
    throw an exception. Instead, it will return the error description to the LLM so
    it can attempt to resolve the issue.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用LLM代理时，确保工具具有容错性非常重要。例如，如果数据库返回错误（`status_code != 200`），我的代码不会抛出异常。相反，它会将错误描述返回给LLM，以便LLM尝试解决问题。
- en: To create a CrewAI custom tool, we need to derive our class from `crewai_tools.BaseTool`,
    implement the `_run` method and then create an instance of this class.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建CrewAI自定义工具，我们需要从`crewai_tools.BaseTool`派生类，实施`_run`方法，然后创建该类的实例。
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, we can set the tasks for the agents. Again, providing clear instructions
    and all the context to LLM is crucial.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以为代理设置任务。同样，向LLM提供清晰的指示和所有上下文是至关重要的。
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You might have noticed that I’ve used `{table}` placeholder in the tasks’ descriptions.
    We will use `table` as an input variable when executing the crew, and this value
    will be inserted into all placeholders.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我在任务描述中使用了`{table}`占位符。我们将在执行团队任务时，将`table`作为输入变量，这个值将被插入到所有占位符中。
- en: Also, I’ve specified the output file for the table documentation task to save
    the final result locally.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我已经为表格文档任务指定了输出文件，以便将最终结果保存在本地。
- en: We have all we need. Now, it’s time to create a crew and execute the process,
    specifying the table we are interested in. Let’s try it with the users table.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拥有所需的一切。现在，是时候创建一个团队并执行流程，指定我们感兴趣的表格了。让我们试试“users”表。
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It’s an exciting moment, and I’m really looking forward to seeing the result.
    Don’t worry if execution takes some time. Agents make multiple LLM calls, so it’s
    perfectly normal for it to take a few minutes. It took 2.5 minutes on my laptop.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个令人兴奋的时刻，我真的很期待看到结果。如果执行过程需要一些时间，请不要担心。代理会多次调用LLM，因此花费几分钟是完全正常的。我在我的笔记本上花了2.5分钟。
- en: We asked LLM to return the documentation in markdown format. We can use the
    following code to see the formatted result in Jupyter Notebook.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要求LLM以Markdown格式返回文档。我们可以使用以下代码在Jupyter Notebook中查看格式化后的结果。
- en: '[PRE11]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: At first glance, it looks great. We’ve got the valid markdown file describing
    the users' table.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 第一眼看起来不错。我们得到了一个有效的Markdown文件，描述了“users”表。
- en: '![](../Images/e98ec48f91dc2754b39ac5b0c59424e2.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e98ec48f91dc2754b39ac5b0c59424e2.png)'
- en: But wait, it’s incorrect. Let’s see what data we have in our table.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，这不对。让我们看看表格中有哪些数据。
- en: '![](../Images/3de9376c5434676a728a3ee7f0d87037.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3de9376c5434676a728a3ee7f0d87037.png)'
- en: The columns listed in the documentation are completely different from what we
    have in the database. It’s a case of LLM hallucinations.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 文档中列出的列与我们数据库中的完全不同。这是LLM幻觉的一个例子。
- en: We’ve set `verbose = 2` to get the detailed logs from CrewAI. Let’s read through
    the execution logs to identify the root cause of the problem.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将`verbose = 2`设置为从CrewAI获取详细的日志。让我们浏览执行日志，以找出问题的根本原因。
- en: First, the database specialist couldn’t query the database due to complications
    with quotes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，数据库专家由于引用符号的问题，无法查询数据库。
- en: '![](../Images/966fcf095524bc7809853c882d83ab57.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/966fcf095524bc7809853c882d83ab57.png)'
- en: 'The specialist didn’t manage to resolve this problem. Finally, this chain has
    been terminated by CrewAI with the following output: `Agent stopped due to iteration
    limit or time limit`.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 专家未能解决这个问题。最终，这个链条已被CrewAI终止，输出为：`Agent stopped due to iteration limit or time
    limit`。
- en: This means the technical writer didn’t receive any factual information about
    the data. However, the agent continued and produced completely fake results. That’s
    how we ended up with incorrect documentation.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着技术写作者没有收到任何关于数据的事实性信息。然而，代理继续执行并产生了完全虚假的结果。最终我们得到了错误的文档。
- en: Fixing the issues
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修复问题
- en: 'Even though our first iteration wasn’t successful, we’ve learned a lot. We
    have (at least) two areas for improvement:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们的第一次迭代没有成功，但我们学到了很多。我们至少有两个可以改进的方面：
- en: Our database tool is too difficult for the model, and the agent struggles to
    use it. We can make the tool more tolerant by removing quotes from the beginning
    and end of the queries. This solution is not ideal since valid SQL can end with
    a quote, but let’s try it.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的数据库工具对模型来说太复杂，代理难以使用它。我们可以通过去掉查询开始和结束的引号来使工具更具容错性。这个解决方案并不理想，因为有效的SQL可能以引号结尾，但我们还是试试看。
- en: Our technical writer isn’t basing its output on the input from the database
    specialist. We need to tweak the prompt to highlight the importance of providing
    only factual information.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的技术写作者没有基于数据库专家的输入来生成输出。我们需要调整提示，强调只提供事实性信息的重要性。
- en: So, let’s try to fix these problems. First, we will fix the tool — we can leverage
    `strip` to eliminate quotes.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们尝试修复这些问题。首先，我们将修复工具——我们可以利用`strip`来去除引号。
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Then, it’s time to update the prompt. I’ve included statements emphasizing the
    importance of sticking to the facts in both the agent and task definitions.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，到了更新提示的时候。我已经在代理和任务定义中加入了强调坚持事实重要性的语句。
- en: '[PRE13]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let’s execute our crew once again and see the results.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次执行我们的团队任务，看看结果。
- en: '![](../Images/f79b2d4b9cfb0046ab1a6f48b6a4acb7.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f79b2d4b9cfb0046ab1a6f48b6a4acb7.png)'
- en: We’ve achieved a bit better result. Our database specialist was able to execute
    queries and view the data, which is a significant win for us. Additionally, we
    can see all the relevant fields in the result table, though there are lots of
    other fields as well. So, it’s still not entirely correct.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取得了一些更好的结果。我们的数据库专家能够执行查询并查看数据，这是我们的一项重大胜利。此外，我们可以在结果表中看到所有相关的字段，尽管还有许多其他字段。所以，它仍然不是完全正确的。
- en: I once again looked through the CrewAI execution log to figure out what went
    wrong. The issue lies in getting the list of columns. There’s no filter by database,
    so it returns some unrelated columns that appear in the result.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我再次查看了CrewAI执行日志，试图弄清楚问题出在哪里。问题出在获取列列表时。没有按数据库进行过滤，因此它返回了一些与结果无关的列。
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Also, after looking at multiple attempts, I noticed that the database specialist,
    from time to time, executes `select * from <table>` query. It might cause some
    issues in production as it might generate lots of data and send it to LLM.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在查看了多次尝试后，我注意到数据库专家偶尔执行`select * from <table>`查询。它可能在生产环境中引发一些问题，因为它可能会生成大量数据并将其发送到LLM。
- en: More specialised tools
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更专业的工具
- en: We can provide our agent with more specialised tools to improve our solution.
    Currently, the agent has a tool to execute any SQL query, which is flexible and
    powerful but prone to errors. We can create more focused tools, such as getting
    table structure and top-N rows from the table. Hopefully, it will reduce the number
    of mistakes.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为我们的代理提供更多专业的工具来改进我们的解决方案。目前，代理有一个可以执行任何SQL查询的工具，这个工具灵活且强大，但容易出错。我们可以创建更专注的工具，例如获取表结构和从表中提取前N行数据。希望这样可以减少错误的发生。
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, we need to specify these tools in the task and re-run our script. After
    the first attempt, I got the following output from the Technical Writer.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在任务中指定这些工具并重新运行我们的脚本。在第一次尝试后，我从技术写作者那里得到了以下输出。
- en: '[PRE16]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: More focused tools helped the database specialist retrieve the correct table
    information. However, even though the writer had all the necessary information,
    we didn’t get the expected result.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 更加专注的工具帮助数据库专家检索了正确的表信息。然而，尽管写作者拥有所有必要的信息，我们仍未得到预期的结果。
- en: As we know, LLMs are probabilistic, so I gave it another try. And hooray, this
    time, the result was pretty good.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，LLM是概率性的，所以我又尝试了一次。太好了，这次结果非常好。
- en: '![](../Images/536e784233791190a9045928c534d537.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/536e784233791190a9045928c534d537.png)'
- en: It’s not perfect since it still includes some irrelevant comments and lacks
    the overall description of the table. However, providing more specialised tools
    has definitely paid off. It also helped to prevent issues when the agent tried
    to load all the data from the table.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 它还不完美，因为仍然包括一些无关的评论，并且缺少表格的整体描述。然而，提供更多专业工具显然是值得的。这也有助于防止在代理尝试加载表格中的所有数据时出现问题。
- en: Quality assurance specialist
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 质量保证专家
- en: We’ve achieved pretty good results, but let’s see if we can improve them further.
    A common practice in multi-agent setups is quality assurance, which adds the final
    review stage before finalising the results.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经取得了相当不错的结果，但让我们看看是否能进一步改善它们。多代理设置中的常见做法是质量保证，它在最终确定结果之前添加了最后的审核阶段。
- en: '![](../Images/b452393cdc89394850940fa99040c1ef.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b452393cdc89394850940fa99040c1ef.png)'
- en: Let’s create a new agent — a Quality Assurance Specialist, who will be in charge
    of review.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个新的代理——质量保证专家，负责审核工作。
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, it’s time to describe the review task. I’ve used the `context` parameter
    to specify that this task requires outputs from both `table_description_task`
    and `table_documentation_task`.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，到了描述审核任务的时候了。我使用了`context`参数，指定此任务需要`table_description_task`和`table_documentation_task`的输出。
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Let’s update our crew and run it.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新我们的团队并运行它。
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We now have more structured and detailed documentation thanks to the addition
    of the QA stage.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 由于加入了QA阶段，我们现在有了更结构化和详细的文档。
- en: '![](../Images/207c43201fa01049208b438839e28ebb.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/207c43201fa01049208b438839e28ebb.png)'
- en: Delegation
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 委派
- en: With the addition of the QA specialist, it would be interesting to test the
    delegation mechanism. The QA specialist agent might have questions or requests
    that it could delegate to other agents.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 随着质量保证（QA）专家的加入，测试委派机制会变得非常有趣。QA专家代理可能会有一些问题或请求，可以将其委派给其他代理。
- en: I tried using the delegation with Llama 3, but it didn’t go well. Llama 3 struggled
    to call the co-worker tool correctly. It couldn’t specify the correct co-worker’s
    name.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我尝试使用Llama 3进行委派，但结果不太理想。Llama 3在正确调用同事工具时遇到了困难，无法指定正确的同事姓名。
- en: We achieved pretty good results with a local model that can run on any laptop,
    but now it’s time to switch gears and use a way more powerful model — GPT-4o.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用本地模型在任何笔记本电脑上都能取得相当不错的结果，但现在是时候换个思路，使用更强大的模型——GPT-4o了。
- en: To do it, we just need to update the following environment variables.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们只需更新以下环境变量。
- en: '[PRE20]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: To switch on the delegation, we should specify `allow_delegation = True` for
    the QA specialist agent.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开启委派功能，我们应该为QA专家代理指定`allow_delegation = True`。
- en: Also, we can use handy memory functionality for OpenAI models, as mentioned
    above. The memory will allow our agents to share their knowledge with each other
    during execution and leverage long-term memory to get information from previous
    executions.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以使用OpenAI模型的便捷记忆功能，如上所述。记忆功能将允许我们的代理在执行过程中互相分享知识，并利用长期记忆从以前的执行中获取信息。
- en: '[PRE21]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Let’s see the CrewAI execution logs to understand how delegation works. Here
    are all the logs for the QA specialist. We can see that it reached out to the
    database specialist to double-check the information.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看CrewAI的执行日志，了解委派是如何工作的。这里是QA专家的所有日志。我们可以看到它联系了数据库专家以核实信息。
- en: '[PRE22]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: When I tried the delegation for the first time, I didn’t enable memory, which
    led to incorrect results. The data specialist and the technical writer initially
    returned the correct information. However, when the QA specialist returned with
    the follow-up questions, they started to hallucinate. So, it looks like delegation
    works better when memory is enabled.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当我第一次尝试委派时，没有启用记忆功能，这导致了不正确的结果。数据专家和技术写作者最初返回了正确的信息。然而，当QA专家返回后续问题时，他们开始出现幻觉。因此，看起来当启用记忆功能时，委派效果会更好。
- en: Here’s the final output from GPT-4o. The result looks pretty nice now. We definitely
    can use LLMs to automate documentation.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是GPT-4o的最终输出。现在结果看起来非常不错。我们完全可以使用LLM来自动化文档编写。
- en: '![](../Images/ccca4f521728af6e15a2d73bc450db2a.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ccca4f521728af6e15a2d73bc450db2a.png)'
- en: So, the first task has been solved!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，第一个任务已经解决！
- en: I used the same script to generate documentation for the `ecommerce_db.sessions`
    table as well. It will be handy for our next task. So, let’s not waste any time
    and move on.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用相同的脚本为`ecommerce_db.sessions`表生成文档。这对我们的下一个任务很有用。所以，让我们不要浪费时间，继续前进。
- en: 'Use case: answering questions'
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例：回答问题
- en: Our next task is answering questions based on the documentation since it’s common
    for many data analysts (and other specialists).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一个任务是根据文档回答问题，因为这对许多数据分析师（以及其他专家）来说是常见的。
- en: 'We will start simple and will create just two agents:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从简单开始，只创建两个代理人：
- en: The documentation support specialist will be answering questions based on the
    docs,
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档支持专家将根据文档回答问题，
- en: The support QA agent will review the answer before sharing it with the customer.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持QA代理人将在与客户分享答案之前对其进行审查。
- en: '![](../Images/211478ae8b1f633d5693c883fea42a40.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/211478ae8b1f633d5693c883fea42a40.png)'
- en: We will need to empower the documentation specialist with a couple of tools
    that will allow them to see all the files stored in the directory and read the
    files. It’s pretty straightforward since CrewAI has implemented such tools.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为文档专家提供一些工具，使他们能够查看存储在目录中的所有文件并阅读这些文件。这很简单，因为CrewAI已经实现了这样的工具。
- en: '[PRE23]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: However, since Llama 3 keeps struggling with quotes when calling tools, I had
    to create a custom tool on top of the `FileReaderTool` to overcome this issue.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于Llama 3在调用工具时仍然在处理引号的问题，我不得不在`FileReaderTool`之上创建一个自定义工具来解决这个问题。
- en: '[PRE24]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Next, as we did before, we need to create agents, tasks and crew.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要像之前一样创建代理人、任务和团队。
- en: '[PRE25]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '{question}'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '{问题}'
- en: '[PRE26]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Let’s see how it works in practice.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它在实践中是如何运作的。
- en: '[PRE27]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We’ve got a polite, practical and helpful answer in return. That’s really great.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了一份有礼貌、实用和有帮助的答复。这真的很棒。
- en: '[PRE28]sql'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE28]sql'
- en: SELECT COUNT(*)
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT COUNT(*)
- en: FROM ecommerce_db.sessions
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: FROM ecommerce_db.sessions
- en: WHERE os = 'Windows'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: WHERE os = 'Windows'
- en: AND action_date BETWEEN '2023-01-01' AND '2023-12-31'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: AND action_date BETWEEN '2023-01-01' AND '2023-12-31'
- en: GROUP BY os;
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: GROUP BY os;
- en: '[PRE29]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Let’s complicate the task a bit. Suppose we can get not only questions about
    our data but also about our tool (ClickHouse). So, we will have another agent
    in the crew — ClickHouse Guru. To give our CH agent some knowledge, I will share
    a documentation website with it.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们稍微复杂化任务。假设我们不仅可以得到关于我们的数据的问题，还可以得到关于我们的工具（ClickHouse）的问题。因此，我们的团队中将有另一个代理人——ClickHouse专家。为了给我们的CH代理人一些知识，我将与它分享一个文档网站。
- en: '[PRE30]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If you need to work with a lengthy document, you might try using RAG (Retrieval
    Augmented generation) — [WebsiteSearchTool](https://docs.crewai.com/tools/WebsiteSearchTool/).
    It will calculate embeddings and store them locally in ChromaDB. In our case,
    we will stick to a simple website scraper tool.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要处理长篇文档，可以尝试使用RAG（检索增强生成）—[WebsiteSearchTool](https://docs.crewai.com/tools/WebsiteSearchTool/)。它将计算嵌入并将其存储在ChromaDB中。在我们的情况下，我们将坚持使用简单的网站爬虫工具。
- en: Now that we have two subject matter experts, we need to decide who will be working
    on the questions. So, it’s time to use a hierarchical process and add a manager
    to orchestrate all the tasks.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了两位主题专家，我们需要决定谁将负责回答问题。因此，现在是使用分层过程并添加经理来协调所有任务的时候了。
- en: '![](../Images/1e8a9048cb1cf80662b17df62655fd37.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1e8a9048cb1cf80662b17df62655fd37.png)'
- en: CrewAI provides the manager implementation, so we only need to specify the LLM
    model. I’ve picked the GPT-4o.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: CrewAI提供了经理实现，因此我们只需要指定LLM模型。我选择了GPT-4o。
- en: '[PRE31]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: At this point, I had to switch from Llama 3 to OpenAI models again to run a
    hierarchical process since it hasn’t worked for me with Llama (similar to [this
    issue](https://github.com/joaomdmoura/crewAI/issues/657)).
  id: totrans-188
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这一点上，我不得不再次从Llama 3切换到OpenAI模型以运行分层过程，因为使用Llama对我来说没有效果（类似于[此问题](https://github.com/joaomdmoura/crewAI/issues/657)）。
- en: Now, we can try our new crew with different types of questions (either related
    to our data or ClickHouse database).
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以尝试使用不同类型的问题来测试我们的新团队（无论是与我们的数据还是ClickHouse数据库相关的问题）。
- en: '[PRE32]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: If we look at the final answers and logs (*I’ve omitted them here since they
    are quite lengthy, bu*t *you can find them and full logs on* [*GitHub*](https://github.com/miptgirl/miptgirl_medium/blob/main/crewai_answering_questions/rag_documentation_poc_openai.ipynb)),
    we will see that the manager was able to orchestrate correctly and delegate tasks
    to co-workers with relevant knowledge to address the customer's question. For
    the first (ClickHouse-related) question, we got a detailed answer with examples
    and possible implications of using `WITH TOTALS` functionality. For the data-related
    question, models returned roughly the same information as we’ve seen above.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看最终的答案和日志（*我在这里省略了它们，因为它们相当冗长，但* *你可以在* [*GitHub*](https://github.com/miptgirl/miptgirl_medium/blob/main/crewai_answering_questions/rag_documentation_poc_openai.ipynb)
    *找到它们和完整日志*），我们会看到管理器能够正确地协调并将任务委派给拥有相关知识的同事，以解答客户的问题。对于第一个（与ClickHouse相关）问题，我们得到了一个详细的答案，包含了示例以及使用`WITH
    TOTALS`功能的潜在影响。对于数据相关的问题，模型返回的信息大致与我们上面看到的相同。
- en: So, we’ve built a crew that can answer various types of questions based on the
    documentation, whether from a local file or a website. I think it’s an excellent
    result.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们构建了一个可以根据文档回答各种问题的团队，无论是来自本地文件还是网站。我认为这是一个非常棒的结果。
- en: You can find all the code on [GitHub](https://github.com/miptgirl/miptgirl_medium/tree/main/crewai_answering_questions).
  id: totrans-193
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以在[GitHub](https://github.com/miptgirl/miptgirl_medium/tree/main/crewai_answering_questions)上找到所有的代码。
- en: Summary
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this article, we’ve explored using the CrewAI multi-agent framework to create
    a solution for writing documentation based on tables and answering related questions.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们探讨了如何使用CrewAI多智能体框架创建一个基于表格撰写文档并回答相关问题的解决方案。
- en: Given the extensive functionality we’ve utilised, it’s time to summarise the
    strengths and weaknesses of this framework.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们所使用的广泛功能，现在是总结这个框架的优缺点的时候了。
- en: 'Overall, I find [CrewAI](https://www.crewai.com/) to be an incredibly useful
    framework for multi-agent systems:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，我认为[CrewAI](https://www.crewai.com/)是一个非常有用的多智能体系统框架：
- en: It’s straightforward, and you can build your first prototype quickly.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它简单明了，你可以快速构建你的第一个原型。
- en: Its flexibility allows to solve quite sophisticated business problems.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的灵活性使得可以解决相当复杂的商业问题。
- en: It encourages good practices like role-playing.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它鼓励像角色扮演这样的良好实践。
- en: It provides many handy tools out of the box, such as RAG and a website parser.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了许多开箱即用的实用工具，如RAG和网站解析器。
- en: The support of different types of memory enhances the agents’ collaboration.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持不同类型的记忆增强了智能体之间的协作。
- en: Built-in guardrails help prevent agents from getting stuck in repetitive loops.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置的防护措施有助于防止智能体陷入重复的循环中。
- en: 'However, there are areas that could be improved:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍有一些可以改进的地方：
- en: While the framework is simple and easy to use, it’s not very customisable. For
    instance, you currently can’t create your own LLM manager to orchestrate the processes.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管该框架简单且易于使用，但它的可定制性不强。例如，目前你无法创建自己的LLM管理器来协调这些过程。
- en: Sometimes, it’s quite challenging to get the full detailed information from
    the documentation. For example, it’s clear that CrewAI implemented some guardrails
    to prevent repetitive function calls, but the documentation doesn’t fully explain
    how it works.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有时，从文档中获取完整详细的信息是相当具有挑战性的。例如，显然CrewAI实现了一些防护措施，以防止重复的函数调用，但文档并没有完全解释它是如何工作的。
- en: Another improvement area is transparency. I like to understand how frameworks
    work under the hood. For example, in Langchain, you can use `langchain.debug =
    True` to see all the LLM calls. However, I haven’t figured out how to get the
    same level of detail with CrewAI.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个改进的方向是透明度。我喜欢了解框架是如何在背后工作的。例如，在Langchain中，你可以使用`langchain.debug = True`来查看所有LLM调用。然而，我还没有弄清楚如何在CrewAI中获得相同级别的详细信息。
- en: The full support for the local models would be a great addition, as the current
    implementation either lacks some features or is difficult to get working properly.
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对本地模型的全面支持将是一个很大的补充，因为当前的实现要么缺少某些功能，要么难以正确运行。
- en: The domain and tools for LLMs are evolving rapidly, so I’m hopeful that we’ll
    see a lot of progress in the near future.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: LLM领域和工具正在迅速发展，因此我希望在不久的将来会看到许多进展。
- en: Thank you a lot for reading this article. I hope this article was insightful
    for you. If you have any follow-up questions or comments, please leave them in
    the comments section.
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 非常感谢你阅读这篇文章。希望这篇文章对你有所启发。如果你有任何后续问题或评论，请在评论区留下。
- en: Reference
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: This article is inspired by the [“Multi AI Agent Systems with CrewAI”](https://www.deeplearning.ai/short-courses/multi-ai-agent-systems-with-crewai/)
    short course from DeepLearning.AI.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 本文灵感来源于DeepLearning.AI的[“带CrewAI的多AI智能体系统”](https://www.deeplearning.ai/short-courses/multi-ai-agent-systems-with-crewai/)短期课程。
