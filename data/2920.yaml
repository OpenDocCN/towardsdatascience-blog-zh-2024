- en: 'PostgreSQL: Query Optimization for Mere Humans'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PostgreSQL：仅为普通人优化查询
- en: 原文：[https://towardsdatascience.com/query-optimization-for-mere-humans-in-postgresql-875ab864390a?source=collection_archive---------4-----------------------#2024-12-03](https://towardsdatascience.com/query-optimization-for-mere-humans-in-postgresql-875ab864390a?source=collection_archive---------4-----------------------#2024-12-03)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/query-optimization-for-mere-humans-in-postgresql-875ab864390a?source=collection_archive---------4-----------------------#2024-12-03](https://towardsdatascience.com/query-optimization-for-mere-humans-in-postgresql-875ab864390a?source=collection_archive---------4-----------------------#2024-12-03)
- en: Understanding a PostgreSQL execution plan with practical examples
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 PostgreSQL 执行计划并通过实际示例讲解
- en: '[](https://medium.com/@Eyaltra?source=post_page---byline--875ab864390a--------------------------------)[![Eyal
    Trabelsi](../Images/60562caa76b824eac9e21f1c0a2933fc.png)](https://medium.com/@Eyaltra?source=post_page---byline--875ab864390a--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--875ab864390a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--875ab864390a--------------------------------)
    [Eyal Trabelsi](https://medium.com/@Eyaltra?source=post_page---byline--875ab864390a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@Eyaltra?source=post_page---byline--875ab864390a--------------------------------)[![Eyal
    Trabelsi](../Images/60562caa76b824eac9e21f1c0a2933fc.png)](https://medium.com/@Eyaltra?source=post_page---byline--875ab864390a--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--875ab864390a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--875ab864390a--------------------------------)
    [Eyal Trabelsi](https://medium.com/@Eyaltra?source=post_page---byline--875ab864390a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--875ab864390a--------------------------------)
    ·8 min read·Dec 3, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--875ab864390a--------------------------------)
    ·阅读时间 8 分钟 ·2024年12月3日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/4f384f53a80ad0fe12427dcc5b83524a.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4f384f53a80ad0fe12427dcc5b83524a.png)'
- en: Photo by [Greg Rakozy](https://unsplash.com/@grakozy?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    on [Unsplash](https://unsplash.com/photos/silhouette-photography-of-person-oMpAz-DN-9I?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Greg Rakozy](https://unsplash.com/@grakozy?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
    于 [Unsplash](https://unsplash.com/photos/silhouette-photography-of-person-oMpAz-DN-9I?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash)
- en: Today, users have high expectations for the programs they use. Users expect
    programs to have amazing features, to be fast, and to consume a reasonable amount
    of resources.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，用户对所使用的程序有很高的期望。用户希望程序具备惊人的功能，速度快，并且合理地消耗资源。
- en: As developers, we should thrive to give our users the best experience possible.
    It’s pretty common that the database becomes the bottleneck, and optimizing queries
    and eliminating the bottlenecks is not an easy task. Unfortunately, as programs
    become more and more complex, and as the data become bigger, it becomes harder
    to write flawless SQL queries.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，我们应该努力为用户提供最佳的体验。数据库成为瓶颈是很常见的情况，优化查询并消除瓶颈并非易事。不幸的是，随着程序变得越来越复杂，数据量也越来越大，编写完美的
    SQL 查询变得愈加困难。
- en: Today, I am going to focus on a technique to find those bottlenecks, using the
    *Explain* clause. My goal today is to show you that finding and eliminating those
    bottlenecks is not rocket science. Everyone can find their bottlenecks without
    breaking a sweat.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，我将重点介绍一种通过使用 *Explain* 子句来找到瓶颈的技术。今天的目标是向你展示，找到并消除这些瓶颈并非难事，任何人都可以轻松发现瓶颈所在。
- en: The code for this article can be found on [GitHub](https://github.com/eyaltrabelsi/my-notebooks/blob/master/Lectures/query_optimization_for_mere_humans/Query%20Optimization%20for%20Mere%20Humans.ipynb).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的代码可以在 [GitHub](https://github.com/eyaltrabelsi/my-notebooks/blob/master/Lectures/query_optimization_for_mere_humans/Query%20Optimization%20for%20Mere%20Humans.ipynb)
    上找到。
- en: 'Note: All images, unless otherwise noted, are by the author.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注：所有图片，除非另有说明，均由作者提供。
- en: Let’s explain Explain 📜
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们解释一下 Explain 📜
- en: Interactions with databases are done using declarative languages, where SQL
    is the most common one. The database decides how and what to do behind the scenes
    and the only glimpse it provides is the execution plan.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与数据库的交互是通过声明式语言进行的，其中 SQL 是最常用的语言。数据库决定了背后如何以及做什么，唯一提供的视角是执行计划。
- en: This limitation makes implementing proper debugging tools, and profilers almost
    impossible in practice. **So we are kind of stuck with execution plans.**
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这种限制使得在实践中实现合适的调试工具和性能分析器几乎不可能。**所以我们在执行计划上有点困住了。**
- en: Buzzword alert 🐝!! my goal is to democratize execution plans.
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行业术语警告 🐝！！我的目标是让执行计划大众化。
- en: 'In PostgreSQL in order to get the execution plan one should use *Explain*/*Explain
    analyze* clauses:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PostgreSQL 中，要获取执行计划，应该使用 *Explain*/*Explain analyze* 子句：
- en: '*EXPLAIN* shows what the planner planned to do.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*EXPLAIN* 显示了计划者打算做什么。'
- en: '*EXPLAIN ANALYZE* what the planner plans to do, **execute the query,** and
    also show how it did it.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*EXPLAIN ANALYZE* 显示计划执行者的计划，**执行查询，** 并展示它是如何执行的。'
- en: '**Pro Tip #1**💃: go over an execution plan at least once in your career. It''s
    similar across databases, and it is a rare skill in companies.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**专家提示 #1**💃：在你的职业生涯中至少看一次执行计划。这在不同的数据库中类似，而且在公司中是一个稀缺的技能。'
- en: '**Pro Tip #2** 💃: prefer *EXPLAIN ANALYZE* as it holds more information for
    most cases.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**专家提示 #2** 💃：更倾向于使用 *EXPLAIN ANALYZE*，因为它在大多数情况下包含更多信息。'
- en: '**Warning #1** ⚠️ don’t use *EXPLAIN ANALYZE* on destructive operations like
    *DELETE/UPDATE, EXPLAIN* will suffice and it doesn’t run the query.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告 #1** ⚠️ 不要在像 *DELETE/UPDATE* 这样的破坏性操作上使用 *EXPLAIN ANALYZE*，*EXPLAIN* 就足够了，它不会执行查询。'
- en: '**Warning #2** ⚠️ don’t use *EXPLAIN ANALYZE* when resources are scarce like
    production monitoring, and when a query never finishes*, EXPLAIN* will suffice
    and it doesn’t run the query.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告 #2** ⚠️ 当资源紧张时（例如生产环境监控），不要使用 *EXPLAIN ANALYZE*，如果查询永远不会完成，*EXPLAIN* 就足够了，它不会执行查询。'
- en: '*Explain* is an awesome tool as it can imply reasons why a query was slow including:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*Explain* 是一个很棒的工具，因为它可以解释查询慢的原因，包括：'
- en: Missing/Overused indices/partitions.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺失/过度使用的索引/分区。
- en: Unoptimized database configurations.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未优化的数据库配置。
- en: Redundant Operations.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 冗余操作。
- en: Stale statistics.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过时的统计信息。
- en: Too much I/O.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过多的 I/O 操作。
- en: 'For the more thorough people you can see the *Explain* clause syntax in the
    next figure:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更细致的人，你可以在下图中看到 *Explain* 子句的语法：
- en: '![](../Images/61acb4497b1c5ad8f1db4fcd7a3597b8.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/61acb4497b1c5ad8f1db4fcd7a3597b8.png)'
- en: PostgreSQL Explain Clause Syntax
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL Explain 子句语法。
- en: Understanding Explain Anatomy🫀
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Explain 解剖学🫀
- en: 'We will use it as an example of a simple query: we want to count the number
    of users that don’t have Twitter handles.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将用它作为一个简单查询的示例：我们想计算没有 Twitter 句柄的用户数量。
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/9a8f28ed38a9fe982ff8f92ce75497f5.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9a8f28ed38a9fe982ff8f92ce75497f5.png)'
- en: We can see the execution plan returned from the EXPLAIN ANALYZE clause
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到从 EXPLAIN ANALYZE 子句返回的执行计划。
- en: It looks cryptic at first, and It’s even longer than our query, and that on
    a small example of real-world execution plans can be overwhelming if you don't
    focus 😭.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 起初它看起来很神秘，而且比我们的查询还长，甚至在一个小的实际执行计划示例中，如果不集中注意力，它会让人感到压倒。
- en: '**But it does provide useful information.** We can see that the query execution
    took 1.27 seconds, while the query planning took only 0.4 milli-seconds (negligible
    time).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**但它确实提供了有用的信息。** 我们可以看到查询执行花费了1.27秒，而查询计划只花费了0.4毫秒（可忽略的时间）。'
- en: '![](../Images/d5e57f45b5c3501eb7d865b1efe9c8d4.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d5e57f45b5c3501eb7d865b1efe9c8d4.png)'
- en: We can see the time the query planning and execution took
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到查询计划和执行所花费的时间。
- en: The execution plan is structured as an inverse tree. In the next figure, you
    can see the execution plan is divided into different nodes each one of which represents
    a different operation whether it's an *Aggregation* or a *Scan.*
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 执行计划的结构是一个反向树。在下图中，你可以看到执行计划被分成不同的节点，每个节点代表不同的操作，不管是 *聚合* 还是 *扫描*。
- en: '![](../Images/6a7ccef3d946eef093a5bca9a3c0c39d.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a7ccef3d946eef093a5bca9a3c0c39d.png)'
- en: We can see the time the query planning and execution took
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到查询计划和执行所花费的时间。
- en: There are many kinds of nodes operations, from Scan related (*‘Seq Scan’, ‘Index
    Only Scan’, etc…*), Join related( *‘Hash Join’, ’Nested Loop’, etc…),* Aggregation
    related *(‘GroupAggregate’, ’Aggregate’, etc…)* and others *( ‘Limit’, ‘Sort’,
    ‘materialize’, etc..).* **Fortunately you need to remember any of this.**
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多种节点操作，从与扫描相关的（*‘Seq Scan’，‘Index Only Scan’ 等等*），与连接相关的（*‘Hash Join’，‘Nested
    Loop’ 等等*），与聚合相关的（*‘GroupAggregate’，‘Aggregate’ 等等*）以及其他的（*‘Limit’，‘Sort’，‘materialize’
    等等*）。**幸运的是，你不需要记住这些。**
- en: '**Pro Tip #3** 💃: Focus is key, look only on nodes that are problematic.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**专家提示 #3** 💃：集中注意力，专注于有问题的节点。'
- en: '**Pro Tip #4** 💃: Cheat ! on the problematic nodes search what they mean in
    the [explain glossary](https://www.pgmustard.com/docs/explain).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**专家提示 #4** 💃：作弊！在有问题的节点上搜索它们在 [explain 词汇表](https://www.pgmustard.com/docs/explain)
    中的含义。'
- en: Now, let's drill down into how we know which node is the problematic one.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入探讨如何识别出问题节点。
- en: '![](../Images/5765a24e17bb9ae9361b2481951954f0.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5765a24e17bb9ae9361b2481951954f0.png)'
- en: There is a lot of information we can see on each node
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在每个节点中看到大量信息。
- en: Let's drill down to what those metrics actually mean.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解这些度量指标的实际含义。
- en: '**Actual Loops**: the number of loops the same node executed is 1\. To get
    the total time and rows, the actual time and rows need to be multiplied by loops
    values.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实际循环数**：相同节点执行的循环次数为 1。为了获得总时间和行数，实际时间和行数需要乘以循环次数的值。'
- en: '**Actual Rows**: the actual number of produced rows of the *Aggregate* node
    is 1 (per-loop average and we have loops is 1).'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实际行数**：*聚合* 节点生成的实际行数为 1（每次循环的平均值，循环次数为 1）。'
- en: '**Plan Rows**: the estimated number of produced rows of the *Aggregate* node
    is 1\. The estimated number of rows can be off depending on statistics.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计划行数**：*聚合* 节点的估算生成行数为 1。行数的估算值可能会根据统计数据有所偏差。'
- en: '**Actual Startup Time**: the time it took to return the first row in milliseconds
    of the *Aggregate* node is 1271.157 (aggregated and includes previous operations).'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实际启动时间**：返回 *聚合* 节点第一行所花费的时间，单位为毫秒，为 1271.157（已聚合并包含之前的操作）。'
- en: '**Startup Cost**: arbitrary units that represent the estimated time to return
    the first row of the *Aggregate* node is 845110(aggregated and includes previous
    operations).'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动成本**：表示返回 *聚合* 节点第一行的估算时间的任意单位为 845110（已聚合并包含之前的操作）。'
- en: '**Actual Total Time**: the time it took to return all the rows in ms of the
    *Aggregate* node is 1271.158 (per-loop average and we have loops is 1 and aggregated
    and include previous operations).'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实际总时间**：返回所有行所花费的时间（单位：毫秒）在 *聚合* 节点中为 1271.158（每次循环的平均值，循环次数为 1，已聚合并包含之前的操作）。'
- en: '**Total Cost**: arbitrary units that represent the estimated time to return
    all the rows of *Aggregate* node is 845110 (aggregated).'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**总成本**：表示返回 *聚合* 节点所有行的估算时间的任意单位为 845110（已聚合）。'
- en: '**Plan Width**: the estimated average size of rows of the *Aggregate* node
    is 8 bytes.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计划宽度**：*聚合* 节点的估算行大小为 8 字节。'
- en: '**Pro Tip #5** 💃: be wary of loops, remember to multiply loops when you care
    about *Actual Rows* and *Actual Total Time.*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**专业小贴士 #5** 💃：注意循环，记住当关心 *实际行数* 和 *实际总时间* 时，要乘以循环次数。'
- en: We will drill in the next section on a practical example.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中讲解一个实际的例子。
- en: 'Example: Performance Optimization🐆'
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例：性能优化🐆
- en: We will use the same query as before.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用与之前相同的查询。
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/c9d940c226ab0b75dc4f477da4b96027.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c9d940c226ab0b75dc4f477da4b96027.png)'
- en: We will focus on the Seq Scan node which has the longest actual time
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将聚焦于实际时间最长的 Seq Scan 节点。
- en: We focus on the longest operation which is the [sequential scan](https://www.pgmustard.com/docs/explain/sequential-scan)
    on the users' table. The scan filters out 2,487,813 rows and takes us 1.27 seconds
    out of 1.271.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们聚焦于最耗时的操作，即对用户表的[顺序扫描](https://www.pgmustard.com/docs/explain/sequential-scan)。该扫描筛选出了
    2,487,813 行，占用了 1.27 秒（总时间为 1.271 秒）。
- en: '**But we are mere humans that don’t tell us anything.** Let''s google it (you
    can use ChatGPT as well) !!!.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**但我们毕竟只是人类，这并没有给我们带来任何线索。**让我们用 Google 搜索一下（你也可以使用 ChatGPT）!!!。'
- en: '![](../Images/e202c10e9f78a7914c4ec6e1224da7c4.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e202c10e9f78a7914c4ec6e1224da7c4.png)'
- en: Googling how to make seq scan faster in PostgreSQL
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Google 上搜索如何加速 PostgreSQL 中的顺序扫描。
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/2dbebcdb3d427e75d385fb1194604613.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2dbebcdb3d427e75d385fb1194604613.png)'
- en: We are doing much better, but the Scan node is still the longest in terms of
    actual time
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的表现已经好多了，但“扫描”节点在实际时间上仍然是最慢的。
- en: We can see that now we perform an [index only scan](https://www.pgmustard.com/docs/explain/index-only-scan)
    on the users' table. It takes us 0.29 seconds instead of 1.27 seconds, which is
    awesome but not enough for us.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，现在我们在用户表上执行的是[仅索引扫描](https://www.pgmustard.com/docs/explain/index-only-scan)。它只用了
    0.29 秒，而不是 1.27 秒，这非常棒，但对我们来说仍然不够。
- en: '**Pro Tip #6**💃: optimize your queries one baby step at a time.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**专业小贴士 #6**💃：一步一步地优化你的查询。'
- en: To understand how much data is passed to the scan. We could use the buffers
    parameter as you can see down below.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解传递给扫描的数据量，我们可以使用下方的缓存参数。
- en: '**Pro Tip #7**💃: When comparing execution plans, look at several metrics.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**专业小贴士 #7**💃：在比较执行计划时，关注多个度量指标。'
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/93d19daed446727c8e7c2a33d3a8c6c9.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/93d19daed446727c8e7c2a33d3a8c6c9.png)'
- en: We can see quite a lot of information about how much data hit the cache or disk
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到很多关于数据命中缓存或磁盘的信息。
- en: We have 51,854 pages to read all from the cache (400 MB), so improving configurations
    probably won’t change things drastically.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有51,854页需要从缓存中读取（400 MB），因此改进配置可能不会带来剧烈变化。
- en: But, we are not out of options. Since the scan filters out 2,487,813 rows, we
    can change the index into a partial index but it doesn’t come for free. It will
    cause writes to take longer, and it will take additional storage, which is quite
    impactful on systems that scale vertically.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们并非没有选择。由于扫描排除了2,487,813行数据，我们可以将索引更改为部分索引，但这并不是免费的。这会导致写入时间变长，并且需要额外的存储，这对垂直扩展的系统影响较大。
- en: '**Pro Tip #8** 💃: there is no free lunch.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**专业提示 #8** 💃：世上没有免费的午餐。'
- en: Good optimization options🤞🏻
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 良好的优化选项🤞🏻
- en: 'I won’t delve into too many details as this blog is already quite long. These
    are the first things one might want to tackle when he has slow queries:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我不会深入讲解太多细节，因为这篇博客已经相当长了。这些是当你遇到慢查询时，可能首先需要解决的问题：
- en: Picking the right scan method.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择正确的扫描方法。
- en: Picking the right join method.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择正确的连接方法。
- en: Picking the right join order.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择正确的连接顺序。
- en: Push Filters as soon as possible.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽早推送过滤器。
- en: Reducing disk IO operations when needed.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在需要时减少磁盘IO操作。
- en: In order to manually check specific optimization one can enable/disable settings.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 为了手动检查特定的优化，可以启用/禁用一些设置。
- en: '[PRE4]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Warning #3** ⚠️: enable/disable settings only after you tried the most basic
    optimizations as most of the time, PostgreSQL knows what it is doing.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告 #3** ⚠️：只有在你尝试过最基本的优化之后，才可以启用/禁用设置，因为大多数情况下，PostgreSQL知道自己在做什么。'
- en: Aren’t there easier ways?!🙏
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 难道没有更简单的方法吗？！🙏
- en: 'Unfortunately, *Explain* is not perfect and there are reasons why it’s not
    in every developer toolbox:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，*Explain*并不完美，且有一些原因导致它并不在每个开发者的工具箱中：
- en: '**You don’t have a history of all the execution plans in production.**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**你没有生产环境中所有执行计划的历史记录。**'
- en: We can overcome the lack of history by using tools like [auto_explain](https://www.postgresql.org/docs/current/auto-explain.html)
    and [pg_stat_plans](https://github.com/2ndQuadrant/pg_stat_plans) to record the
    execution plans on certain conditions such that they won’t have a major effect
    on production. Another way is to record what queries run at what time and try
    to reproduce it, but it’s more complicated than it looks.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用像[auto_explain](https://www.postgresql.org/docs/current/auto-explain.html)和[pg_stat_plans](https://github.com/2ndQuadrant/pg_stat_plans)这样的工具来记录在特定条件下的执行计划，从而弥补缺乏历史记录的问题，且它们不会对生产环境造成重大影响。另一种方法是记录哪些查询在何时运行，并尝试重现它，但这比看起来更复杂。
- en: '**Tuning complex queries is not a trivial task with “bare execution plans”**,
    as they tend to be long and challenging to read. Moreover, they often fail to
    provide insights into why a particular optimization is not being utilized or offer
    guidance on how to effectively rewrite the queries for better performance.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**调优复杂查询并非一项简单任务，尤其是使用“裸执行计划”**，因为它们通常很长且难以阅读。此外，它们往往无法提供为何某个特定优化未被利用的洞察，也不能提供如何有效重写查询以提升性能的指导。'
- en: 'However, this challenge can be addressed by adopting a highly opinionated structure
    and metadata using specialized tools. **These help you/the LLM focus on what matter**
    (whether its schema, whats the bottlenecks and so on). Some of the most prominent
    tools are:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这一挑战可以通过采用高度特定结构和元数据，并使用专业工具来解决。**这些工具帮助你/LLM专注于重要事项**（无论是架构、瓶颈等）。一些最著名的工具包括：
- en: '[eversql](https://www.eversql.com/) — a mature solution that aims to suggest
    changes to your *PostgreSQL* queries.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[eversql](https://www.eversql.com/) — 一款成熟的解决方案，旨在为你的*PostgreSQL*查询提供变更建议。'
- en: '[metis](https://www.metisdata.io/) — aims to suggest changes as a guarding
    mechanism as part of your development and CI/CD processes for *PostgreSQL* databases.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[metis](https://www.metisdata.io/) — 旨在为你的*PostgreSQL*数据库提供变更建议，作为开发和CI/CD过程中的一项防护机制。'
- en: '[QueryFlow](https://github.com/eyaltrabelsi/query-flow) — an open-source tool
    that allows identifying bugs and performance tuning multiple queries (as the hardest
    queries to debug behave nicely in isolation).'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[QueryFlow](https://github.com/eyaltrabelsi/query-flow) — 一款开源工具，允许识别多个查询的错误和性能调优（因为最难调试的查询在孤立时表现得很平稳）。'
- en: '**Pro Tip #9** 💃: use tools to make your life easy.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**专业提示 #9** 💃：使用工具让你的生活更轻松。'
- en: I will give you a taste of how convenient it is to use tools like QueryFlow
    (For more details you can read the following).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我将给你展示使用像QueryFlow这样的工具有多方便（更多细节可以阅读下面的内容）。
- en: '![](../Images/8b7368c085df0fdc6607ce2201a3a0b9.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8b7368c085df0fdc6607ce2201a3a0b9.png)'
- en: QueryFlow visualization of execution plan focusing on duration
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: QueryFlow 执行计划的可视化，专注于持续时间
- en: It should be extremely easy to see that the *Index Only Scan* width is much
    bigger than the aggregation and indicate this is where we should focus. On multiple
    complex queries, other tools tend to lack
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 应该很容易看出，*仅索引扫描*的宽度远大于聚合宽度，这表明我们应该将重点放在这里。在多个复杂查询中，其他工具往往缺乏这种能力。
- en: Last words
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的话
- en: In this article, we reviewed some of the most common reasons that can cause
    otherwise perfectly good SQL to be too slow for any time-sensitive applications,
    and **walk through a mythological way to identify those and avoid them**.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们回顾了一些最常见的原因，这些原因可能导致本来完全正常的 SQL 在任何对时间敏感的应用中变得过于缓慢，并**介绍了一种神话般的方法来识别并避免这些问题**。
- en: Due to the extent of the topic, there are many optimizations I haven’t covered.
    For this reason, I have added additional resources in the end if you want to go
    the extra mile.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于话题的广泛性，有许多优化措施我没有涵盖。因此，如果你想更深入了解，我在最后添加了额外的资源。
- en: I am optimistic about the future. I believe these kinds of tools will be as
    easy as [*opening files in python*](https://www.w3schools.com/python/python_file_open.asp),
    either by integrating into IDEs, and clients, or providing SAS solutions. This
    will enable us to become proactive instead of reactive.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我对未来充满信心。我相信这些工具将变得和 [*在 Python 中打开文件*](https://www.w3schools.com/python/python_file_open.asp)一样简单，无论是通过集成到
    IDE 和客户端，还是提供 SAS 解决方案。这将使我们能够变得更加主动，而不是被动应对。
- en: I hope I was able to share my enthusiasm for this fascinating topic and that
    you find it useful, and as always I am open to any kind of constructive feedback.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我能够传达我对这个迷人话题的热情，并且你觉得这些内容对你有帮助，像往常一样，我愿意接受任何建设性的反馈。
- en: Additional Resources 📚
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附加资源 📚
- en: '[Deeper Understanding of PostgreSQL Execution Plan (video)](https://www.youtube.com/watch?v=Ls-uE1V31lE&list=WL&index=5&ab_channel=PostgresConference)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PostgreSQL 执行计划的更深入理解（视频）](https://www.youtube.com/watch?v=Ls-uE1V31lE&list=WL&index=5&ab_channel=PostgresConference)'
- en: '[EXPLAIN Explained (video)](https://www.youtube.com/watch?v=mCwwFAl1pBU&ab_channel=SouthernCaliforniaLinuxExpo)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[EXPLAIN 解析（视频）](https://www.youtube.com/watch?v=mCwwFAl1pBU&ab_channel=SouthernCaliforniaLinuxExpo)'
- en: '[Understanding Explain](https://public.dalibo.com/exports/conferences/_archives/_2012/201211_explain/understanding_explain.pdf)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解 EXPLAIN](https://public.dalibo.com/exports/conferences/_archives/_2012/201211_explain/understanding_explain.pdf)'
