- en: 'Pandas: From Messy To Beautiful'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Pandas: 从杂乱到优雅'
- en: 原文：[https://towardsdatascience.com/pandas-from-messy-to-beautiful-b03b0c32f767?source=collection_archive---------2-----------------------#2024-03-31](https://towardsdatascience.com/pandas-from-messy-to-beautiful-b03b0c32f767?source=collection_archive---------2-----------------------#2024-03-31)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/pandas-from-messy-to-beautiful-b03b0c32f767?source=collection_archive---------2-----------------------#2024-03-31](https://towardsdatascience.com/pandas-from-messy-to-beautiful-b03b0c32f767?source=collection_archive---------2-----------------------#2024-03-31)
- en: This is how to make your pandas code human readable & bulletproof.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 这就是如何让你的 pandas 代码既易于阅读又坚不可摧。
- en: '[](https://medium.com/@azawadzka?source=post_page---byline--b03b0c32f767--------------------------------)[![Anna
    Zawadzka](../Images/bcdd9dfb9faeace44e831c057984bc63.png)](https://medium.com/@azawadzka?source=post_page---byline--b03b0c32f767--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b03b0c32f767--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b03b0c32f767--------------------------------)
    [Anna Zawadzka](https://medium.com/@azawadzka?source=post_page---byline--b03b0c32f767--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@azawadzka?source=post_page---byline--b03b0c32f767--------------------------------)[![Anna
    Zawadzka](../Images/bcdd9dfb9faeace44e831c057984bc63.png)](https://medium.com/@azawadzka?source=post_page---byline--b03b0c32f767--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b03b0c32f767--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b03b0c32f767--------------------------------)
    [Anna Zawadzka](https://medium.com/@azawadzka?source=post_page---byline--b03b0c32f767--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b03b0c32f767--------------------------------)
    ·9 min read·Mar 31, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b03b0c32f767--------------------------------)
    ·阅读时间 9 分钟 ·2024年3月31日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/85b2209904b2b7ed17ff3d5b5e960141.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85b2209904b2b7ed17ff3d5b5e960141.png)'
- en: Scripting around a pandas `DataFrame` can turn into an awkward pile of (not-so-)good
    old spaghetti code. Me and my colleagues use this package a lot and while we try
    to stick to good programming practices, like splitting code in modules and unit
    testing, sometimes we still get in the way of one another by producing confusing
    code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas `DataFrame` 上编写脚本可能会变成一堆尴尬的（并不那么）老式意大利面式代码。我和我的同事们经常使用这个包，尽管我们尽力遵循良好的编程实践，比如将代码拆分成模块和进行单元测试，但有时我们还是会互相妨碍，编写出令人困惑的代码。
- en: I have gathered some tips and pitfalls to avoid in order to make pandas code
    clean and infallible. Hopefully you’ll find them useful too. We'll get some help
    from Robert C. Martin's classic “Clean code” specifically for the context of the
    pandas package. TL;DR at the end.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我收集了一些技巧和陷阱，帮助避免在编写 pandas 代码时出现问题，从而使代码更加清晰和万无一失。希望你也能从中受益。我们将借助 Robert C.
    Martin 的经典著作《Clean Code》，特别是结合 pandas 包的背景进行讨论。简短总结见文末。
- en: Dont’s
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不该做的事
- en: Let’s begin by observing some faulty patterns inspired by real life. Later on,
    we’ll try to rephrase that code in order to favor readability and control.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一些受真实案例启发的错误模式开始分析。稍后，我们将尝试重构这些代码，以提升可读性和可控性。
- en: Mutability
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可变性
- en: Pandas `DataFrames` are value-**mutable** [[2](https://pandas.pydata.org/pandas-docs/stable/getting_started/overview.html#mutability-and-copying-of-data),
    [3]](https://realpython.com/python-mutable-vs-immutable-types/) objects. Whenever
    you alter a mutable object, it affects the exact same instance that you originally
    created and its physical location in memory remains unchanged. In contrast, when
    you modify an **immutable** object (eg. a string), Python goes to create a whole
    new object at a new memory location and swaps the reference for the new one.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas `DataFrame` 是值**可变**的 [[2](https://pandas.pydata.org/pandas-docs/stable/getting_started/overview.html#mutability-and-copying-of-data),
    [3]](https://realpython.com/python-mutable-vs-immutable-types/) 对象。每当你更改一个可变对象时，它会影响你最初创建的相同实例，并且它在内存中的物理位置保持不变。相比之下，当你修改一个**不可变**对象（例如字符串）时，Python
    会创建一个全新的对象，并将其存储在新的内存位置，然后替换为对该新对象的引用。
- en: 'This is the crucial point: in Python, objects get passed to the function **by
    assignment** [[4](https://medium.com/techtofreedom/5-levels-of-understanding-the-mutability-of-python-objects-a5ed839d6c24),
    [5]](https://realpython.com/python-pass-by-reference/)**.** See the graph: the
    value of `df` has been assigned to variable `in_df` when it was passed to the
    function as an argument. Both the original `df` and the `in_df` inside the function
    point to the same memory location (numeric value in parentheses), even if they
    go by different variable names. During the modification of its attributes, the
    location of the mutable object remains unchanged. Now all other scopes can see
    the changes too — they reach to the same memory location.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关键点：在 Python 中，对象通过**赋值**传递给函数[[4](https://medium.com/techtofreedom/5-levels-of-understanding-the-mutability-of-python-objects-a5ed839d6c24),
    [5]](https://realpython.com/python-pass-by-reference/)**。** 看图：`df` 的值在作为参数传递给函数时被赋值给变量
    `in_df`。即使它们使用不同的变量名，原始的 `df` 和函数内部的 `in_df` 都指向相同的内存位置（括号中的数字值）。在修改其属性时，可变对象的位置保持不变。现在，所有其他作用域也能看到这些变化——它们都指向相同的内存位置。
- en: '![](../Images/388fcc4c3aa872d7d1d0775d63fd45ee.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/388fcc4c3aa872d7d1d0775d63fd45ee.png)'
- en: Modification of a mutable object in Python memory.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 修改可变对象在 Python 内存中的情况。
- en: 'Actually, since we have modified the original instance, it’s redundant to return
    the `DataFrame` and assign it to the variable. This code has the exact same effect:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，由于我们已修改了原始实例，因此返回 `DataFrame` 并将其赋值给变量是多余的。这个代码有相同的效果：
- en: '![](../Images/5d40a39701f5dcc10a5cad4a1a5bbbce.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5d40a39701f5dcc10a5cad4a1a5bbbce.png)'
- en: Modification of a mutable object in Python memory, redundant assignment removed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 修改可变对象在 Python 内存中的情况，冗余赋值已被移除。
- en: 'Heads-up: the function now returns `None`, so be careful not to overwrite the
    `df` with `None` if you do perform the assignment: `df = modify_df(df)`.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒：现在函数返回 `None`，因此要小心不要将 `df` 覆盖为 `None`，如果你确实执行赋值：`df = modify_df(df)`。
- en: In contrast, if the object is immutable, it will change the memory location
    throughout the modification just like in the example below. Since the red string
    cannot be modified (strings are immutable), the green string is created on top
    of the old one, but as a brand new object, claiming a new location in memory.
    The returned string is not the same string, whereas the returned `DataFrame` was
    the exact same `DataFrame`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果对象是不可变的，它会在整个修改过程中改变内存位置，就像下面的例子一样。由于红色字符串无法修改（字符串是不可变的），绿色字符串是在旧字符串之上创建的，但它是一个全新的对象，声明了一个新的内存位置。返回的字符串不是同一个字符串，而返回的
    `DataFrame` 是完全相同的 `DataFrame`。
- en: '![](../Images/749363a0bcce3c499a1c18844d6814c5.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/749363a0bcce3c499a1c18844d6814c5.png)'
- en: Modification of an immutable object in Python memory.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 修改不可变对象在 Python 内存中的情况。
- en: 'The point is, mutating `DataFrames` inside functions has a **global effect**.
    If you don’t keep that in mind, you may:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是，在函数内修改 `DataFrame` 会产生**全局效果**。如果你没有牢记这一点，可能会：
- en: accidentally modify or remove part of your data, thinking that the action is
    only taking place inside the function scope — it is not,
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 意外修改或删除部分数据，以为操作只发生在函数作用域内——其实并非如此，
- en: lose control over what is added to your `DataFrame` and when it's added, for
    example in nested function calls.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失去对何时向 `DataFrame` 添加内容的控制，例如在嵌套的函数调用中。
- en: Output arguments
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出参数
- en: We’ll fix that problem later, but here is another `don't` before we pass to
    `do`'s
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会解决这个问题，但在我们进入`do`之前，这里还有另一个`don't`
- en: The design from the previous section is actually an anti-pattern called **output
    argument** [1 p.45]. Typically, **inputs** of a function will be used to create
    an **output** value. If the sole point of passing an argument to a function is
    to modify it, so that the input argument changes its state, then it’s challenging
    our intuitions. Such behavior is called **side effect** [1 p.44] of a function
    and those should be well documented and minimized because they force the programmer
    to remember the things that go in the background, therefore making the script
    error-prone.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节的设计实际上是一种反模式，称为**输出参数**[1 p.45]。通常，函数的**输入**将用于创建**输出**值。如果传递一个参数给函数的唯一目的是修改它，使得输入参数改变其状态，那么这就挑战了我们的直觉。这种行为被称为函数的**副作用**[1
    p.44]，应当做好文档记录并尽量减少，因为它们迫使程序员记住那些发生在后台的事情，从而使得脚本容易出错。
- en: '*When we read a function, we are used to the idea of information going in to
    the function through arguments and out through the return value. We don’t usually
    expect information to be going out through the arguments. [1 p.41]*'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*当我们阅读一个函数时，我们习惯了信息通过参数进入函数并通过返回值输出。我们通常不期望信息会通过参数输出。[1 p.41]*'
- en: 'Things get even worse if the function has a double responsibility: to modify
    the input **and** to return an output. Consider this function:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数有双重责任：既修改输入**又**返回输出，情况会变得更糟。考虑这个函数：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: It does return a value as you would expect, but it also permanently modifies
    the original `DataFrame`. The side effect takes you by surprise - nothing in the
    function signature indicated that our input data was going to be affected. In
    the next step, we'll see how to avoid this kind of design.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它的确返回了一个值，正如你所期望的，但它也永久修改了原始的`DataFrame`。这个副作用会让你感到惊讶——函数签名中没有任何东西表明我们的输入数据会被影响。在下一步中，我们将看到如何避免这种设计。
- en: Do’s
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应该做的事
- en: Reduce modifications
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 减少修改
- en: 'To eliminate the side effect, in the code below we have created a new temporary
    variable instead of modifying the original `DataFrame`. The notation `lengths:
    pd.Series` indicates the datatype of the variable.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '为了消除副作用，在下面的代码中，我们创建了一个新的临时变量，而不是修改原始的`DataFrame`。符号`lengths: pd.Series`表示该变量的数据类型。'
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This function design is better in that it encapsulates the intermediate state
    instead of producing a side effect.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这种函数设计更好，因为它封装了中间状态，而不是产生副作用。
- en: 'Another heads-up: please be mindful of the differences between **deep and shallow
    copy** [[6]](https://realpython.com/copying-python-objects/) of elements from
    the `DataFrame`. In the example above we have modified each element of the original
    `df["name"]` `Series`, so the old `DataFrame` and the new variable have no shared
    elements. However, if you directly assign one of the original columns to a new
    variable, the underlying elements still have the same references in memory. See
    the examples:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个提醒：请注意**深拷贝和浅拷贝**的区别[[6]](https://realpython.com/copying-python-objects/)。在上面的示例中，我们修改了原始`df["name"]`
    `Series`的每个元素，因此旧的`DataFrame`和新的变量没有共享的元素。然而，如果你直接将原始列之一赋值给一个新变量，底层元素在内存中仍然引用相同的对象。请参阅以下示例：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can print out the `DataFrame` after each step to observe the effect. Remember
    that creating a deep copy will allocate new memory, so it’s good to reflect whether
    your script needs to be memory-efficient.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在每一步后打印出`DataFrame`，以观察效果。记住，创建深拷贝会分配新的内存，所以考虑一下你的脚本是否需要高效地使用内存。
- en: Group similar operations
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分组相似的操作
- en: Maybe for whatever reason you want to store the result of that length computation.
    It’s still not a good idea to append it to the `DataFrame` inside the function
    because of the **side effect** breach as well as the accumulation of **multiple
    responsibilities** inside a single function.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 也许由于某种原因，你想存储那个长度计算的结果。把它附加到函数内部的`DataFrame`中依然不是一个好主意，因为这违反了**副作用**的规则，并且使一个函数承担了**多重责任**。
- en: 'I like the **One Level of Abstraction per Function** rule that says:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢**每个函数一个抽象层次**的规则，它的意思是：
- en: '*We need to make sure that the statements within our function are all at the
    same level of abstraction.*'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*我们需要确保函数中的所有语句都处于相同的抽象层次。*'
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Mixing levels of abstraction within a function is always confusing. Readers
    may not be able to tell whether a particular expression is an essential concept
    or a detail. [1 p.36]*'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*在一个函数内混合不同的抽象层次总是令人困惑。读者可能无法分辨某个表达式是核心概念还是细节。[1 p.36]*'
- en: Also let’s employ the **Single responsibility principle** [1 p.138] from OOP,
    even though we’re not focusing on object-oriented code right now.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，尽管我们现在并不专注于面向对象代码，但我们还是可以借鉴OOP中的**单一职责原则**[1 p.138]。
- en: 'Why not prepare your data beforehand? Let’s split data preparation and the
    actual computation in separate functions:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不提前准备好数据呢？我们将数据准备和实际计算分成不同的函数：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The individual task of creating the `name_len` column has been outsourced to
    another function. It does not modify the original `DataFrame` and it performs
    **one task at a time**. Later we retrieve the max element by passing the new column
    to another dedicated function. Notice how the aggregating function is generic
    for `Collections`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`name_len`列的单一任务已外包给另一个函数。它不会修改原始的`DataFrame`，并且**一次只执行一个任务**。稍后我们通过将新列传递给另一个专用函数来获取最大元素。注意，聚合函数对于`Collections`来说是通用的。
- en: 'Let’s brush the code up with the following steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤来优化代码：
- en: We could use `concat` function and extract it to a separate function called
    `prepare_data`, which would group all data preparation steps in a single place,
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用`concat`函数，并将其提取到一个名为`prepare_data`的单独函数中，这样可以将所有数据准备步骤集中在一个地方，
- en: We could also make use of the `apply` method and work on individual texts instead
    of `Series` of texts,
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以利用`apply`方法，处理单个文本，而不是`Series`中的文本，
- en: 'Let’s remember to use shallow vs. deep copy, depending on whether the original
    data should or should not be modified:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们记住使用浅拷贝和深拷贝，具体取决于是否应该修改原始数据：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Reusability
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可重用性
- en: The way we have split the code really makes it easy to go back to the script
    later, take the entire function and reuse it in another script. We like that!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拆分代码的方式确实让我们以后很容易回到脚本，拿出整个函数并在另一个脚本中重用。我们喜欢这样！
- en: 'There is one more thing we can do to increase the level of reusability: pass
    column names as parameters to functions. The refactoring is going a little bit
    over the top, but sometimes it pays for the sake of flexibility or reusability.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一件事我们可以做，以提高可重用性：将列名作为参数传递给函数。重构有点过头，但有时为了灵活性或可重用性，还是值得的。
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Testability
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可测试性
- en: Did you ever figure out that your preprocessing was faulty after weeks of experiments
    on the preprocessed dataset? No? Lucky you. I actually had to repeat a batch of
    experiments because of broken annotations, which could have been avoided if I
    had tested just a couple of basic functions.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾在对预处理数据集进行几周的实验后，才发现预处理有问题？没有？真幸运。我实际上因为注释错误不得不重复一批实验，如果我在一开始测试过一些基本的函数，完全可以避免这种情况。
- en: 'Important scripts should be **tested** [1 p.121, 7]. Even if the script is
    just a helper, I now try to test at least the crucial, most low-level functions.
    Let’s revisit the steps that we made from the start:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的脚本应该进行**测试** [1 p.121, 7]。即使这个脚本只是一个辅助工具，我现在也会尝试至少测试最关键的、最底层的函数。让我们回顾一下从一开始到现在的步骤：
- en: '1\. I am not happy to even think of testing this, it’s very redundant and we
    have paved over the side effect. It also tests a bunch of different features:
    the computation of name length and the aggregation of result for the max element.
    Plus it fails, did you see that coming?'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 我甚至不愿意考虑测试这个，它非常冗余，我们已经忽视了副作用。它还测试了许多不同的功能：计算名称长度和聚合最大元素的结果。而且它失败了，你预见到了吗？
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 2\. This is much better — we have focused on one single task, so the test is
    simpler. We also don’t have to fixate on column names like we did before. However,
    I think that the format of the data gets in the way of verifying the correctness
    of the computation.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 这样好多了——我们集中精力处理一个任务，因此测试变得简单。我们也不需要像之前那样过于关注列名。然而，我认为数据格式阻碍了验证计算正确性。
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 3\. Here we have cleaned up the desk. We test the computation function inside
    out, leaving the pandas overlay behind. It’s easier to come up with edge cases
    when you focus on one thing at a time. I figured out that I’d like to test for
    `None` values that may appear in the `DataFrame` and I eventually had to improve
    my function for that test to pass. A bug caught!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 这里我们清理了桌面。我们彻底测试了计算函数，抛开了Pandas的封装。在专注于一个问题时，更容易想到边界情况。我发现我想测试`DataFrame`中可能出现的`None`值，最终我不得不改进我的函数，以使这个测试通过。一个bug被发现了！
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '4\. We’re only missing the test for `find_max_element`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 我们只差对`find_max_element`的测试了：
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: One additional benefit of unit testing that I never forget to mention is that
    it is a way of **documenting your code**, as someone who doesn’t know it (like
    **you** from the future) can easily figure out the inputs and expected outputs,
    including edge cases, just by looking at the tests. Double gain!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我从不忘提到的单元测试的另一个好处是，它是**文档化代码**的一种方式，因为不懂代码的人（比如**未来的你**）可以仅通过查看测试，轻松了解输入和期望输出，包括边界情况。双重收获！
- en: Conclusion
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: These are some tricks I found useful while coding and reviewing other people’s
    code. I’m far from telling you that one or another way of coding is the only correct
    one — you take what you want from it, you decide whether you need a quick scratch
    or a highly polished and tested codebase. I hope this thought piece helps you
    structure your scripts so that you’re happier with them and more confident about
    their infallibility.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我在编写代码和审查别人代码时发现有用的一些技巧。我并不是告诉你某种编码方式就是唯一正确的——你可以从中选择你需要的，你决定是要一个快速的临时解决方案，还是要一个高度精炼和经过测试的代码库。我希望这篇文章能帮助你更好地组织脚本，使你对它们更加满意并对它们的可靠性感到更加自信。
- en: If you liked this article, I would love to know about it. Happy coding!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢这篇文章，请告诉我。我很高兴能得到反馈。祝你编码愉快！
- en: TL;DR
  id: totrans-75
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 摘要
- en: ''
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'There’s no one and only correct way of coding, but here are some inspirations
    for scripting with pandas:'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 没有一种唯一正确的编码方式，但以下是一些使用pandas进行脚本编写的灵感：
- en: ''
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Dont’s:'
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 禁止事项：
- en: ''
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- don’t mutate your `*DataFrame*` too much inside functions, because you may
    lose control over what and where gets appended/removed from it,'
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 在函数内尽量不要频繁修改你的`*DataFrame*`，因为这样你可能会失去对其中内容的控制，无法知道哪些数据被追加或移除。'
- en: ''
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- don’t write methods that mutate a `*DataFrame*` and return nothing because
    that''s confusing.'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 不要编写修改`*DataFrame*`并且不返回任何结果的方法，因为这会让人感到困惑。'
- en: ''
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Do’s:'
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 必做事项：
- en: ''
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- create new objects instead of modifying the source `*DataFrame*` and remember
    to make a deep copy when needed,'
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 创建新对象，而不是修改原始的`*DataFrame*`，并记得在需要时进行深拷贝，'
- en: ''
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- perform only similar-level operations inside a single function,'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 在一个函数内只执行类似层次的操作，'
- en: ''
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- design functions for flexibility and reusability,'
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 设计灵活且可重用的函数，'
- en: ''
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- test your functions because this helps you design cleaner code, secure against
    bugs and edge cases and document it for free.'
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '- 测试你的函数，因为这能帮助你设计更简洁的代码，防止出现错误和边界情况，还能免费为代码生成文档。'
- en: References
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[1] Robert C. Martin, Clean code A Handbook of Agile Software Craftsmanship
    (2009), Pearson Education, Inc.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1] Robert C. Martin，《代码整洁之道：敏捷软件工艺手册》（2009），Pearson Education, Inc.'
- en: '[2] pandas documentation - Package overview — Mutability and copying of data,
    [https://pandas.pydata.org/pandas-docs/stable/getting_started/overview.html#mutability-and-copying-of-data](https://pandas.pydata.org/pandas-docs/stable/getting_started/overview.html#mutability-and-copying-of-data)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2] pandas文档 - 包概述 — 数据的可变性与拷贝，[https://pandas.pydata.org/pandas-docs/stable/getting_started/overview.html#mutability-and-copying-of-data](https://pandas.pydata.org/pandas-docs/stable/getting_started/overview.html#mutability-and-copying-of-data)'
- en: '[3] Python’s Mutable vs Immutable Types: What’s the Difference?, [https://realpython.com/python-mutable-vs-immutable-types/](https://realpython.com/python-mutable-vs-immutable-types/)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3] Python的可变类型与不可变类型：有何区别？，[https://realpython.com/python-mutable-vs-immutable-types/](https://realpython.com/python-mutable-vs-immutable-types/)'
- en: '[4] 5 Levels of Understanding the Mutability of Python Objects, [https://medium.com/techtofreedom/5-levels-of-understanding-the-mutability-of-python-objects-a5ed839d6c24](https://medium.com/techtofreedom/5-levels-of-understanding-the-mutability-of-python-objects-a5ed839d6c24)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4] 理解Python对象的可变性：5个层次，[https://medium.com/techtofreedom/5-levels-of-understanding-the-mutability-of-python-objects-a5ed839d6c24](https://medium.com/techtofreedom/5-levels-of-understanding-the-mutability-of-python-objects-a5ed839d6c24)'
- en: '[5] Pass by Reference in Python: Background and Best Practices, [https://realpython.com/python-pass-by-reference/](https://realpython.com/python-pass-by-reference/)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5] Python中的引用传递：背景与最佳实践，[https://realpython.com/python-pass-by-reference/](https://realpython.com/python-pass-by-reference/)'
- en: '[6] Shallow vs Deep Copying of Python Objects, [https://realpython.com/copying-python-objects/](https://realpython.com/copying-python-objects/)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[6] Python对象的浅拷贝与深拷贝，[https://realpython.com/copying-python-objects/](https://realpython.com/copying-python-objects/)'
- en: '[7] Brian Okken, Python Testing with pytest, Second Edition (2022), The Pragmatic
    Programmers, LLC.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[7] Brian Okken，《Python Testing with pytest》，第二版（2022），The Pragmatic Programmers,
    LLC.'
- en: The graphs were created by me using [Miro](https://miro.com/). The cover image
    was also created by me using the [Titanic](https://www.openml.org/search?type=data&sort=runs&id=40945&status=active)
    dataset and GIMP (smudge effect).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这些图表是我使用[Miro](https://miro.com/)制作的。封面图片也是我使用[Titanic](https://www.openml.org/search?type=data&sort=runs&id=40945&status=active)数据集和GIMP（涂抹效果）制作的。
