- en: Low-Code Data Connectors and Destinations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 低代码数据连接器和目标
- en: 原文：[https://towardsdatascience.com/low-code-data-connectors-and-destinations-b044128c72ca?source=collection_archive---------11-----------------------#2024-10-10](https://towardsdatascience.com/low-code-data-connectors-and-destinations-b044128c72ca?source=collection_archive---------11-----------------------#2024-10-10)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/low-code-data-connectors-and-destinations-b044128c72ca?source=collection_archive---------11-----------------------#2024-10-10](https://towardsdatascience.com/low-code-data-connectors-and-destinations-b044128c72ca?source=collection_archive---------11-----------------------#2024-10-10)
- en: Get started with Airbyte and Cloud Storage
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用Airbyte和云存储
- en: '[](https://hectormrejia.medium.com/?source=post_page---byline--b044128c72ca--------------------------------)[![Hector
    Andres Mejia Vallejo](../Images/e794e545531eeea552986ce7ceb6162f.png)](https://hectormrejia.medium.com/?source=post_page---byline--b044128c72ca--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b044128c72ca--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b044128c72ca--------------------------------)
    [Hector Andres Mejia Vallejo](https://hectormrejia.medium.com/?source=post_page---byline--b044128c72ca--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://hectormrejia.medium.com/?source=post_page---byline--b044128c72ca--------------------------------)[![Hector
    Andres Mejia Vallejo](../Images/e794e545531eeea552986ce7ceb6162f.png)](https://hectormrejia.medium.com/?source=post_page---byline--b044128c72ca--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--b044128c72ca--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--b044128c72ca--------------------------------)
    [Hector Andres Mejia Vallejo](https://hectormrejia.medium.com/?source=post_page---byline--b044128c72ca--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b044128c72ca--------------------------------)
    ·11 min read·Oct 10, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--b044128c72ca--------------------------------)
    ·阅读时长11分钟·2024年10月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Coding the connectors yourself? Think very carefully
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自己编写连接器代码？请三思。
- en: 'Creating and maintaining a data platform is a hard challenge. Not only do you
    have to make it scalable and useful, but every architectural decision builds up
    over time. Data connectors are an essential part of such a platform. Of course,
    how else are we going to get the data? And building them yourself from scratch
    gives you **full control of how you want them to behave**. But beware, with ever-increasing
    data sources in your platform, that can only mean the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和维护一个数据平台是一项艰巨的挑战。你不仅需要让它具有可扩展性和实用性，而且每一个架构决策都会随着时间的推移积累。数据连接器是这样一个平台的重要组成部分。毕竟，我们还能如何获取数据呢？从头开始自己构建连接器让你**完全控制它们的行为方式**。但要小心，随着平台中数据源的不断增加，这只能意味着以下几点：
- en: Creating large volumes of code for every new connector.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个新连接器编写大量代码。
- en: Maintaining complex code for every single data connector.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每一个数据连接器维护复杂的代码。
- en: Functions and definitions between classes may diverge over time, resulting in
    even more complex maintenance.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类之间的函数和定义可能会随着时间的推移而发生偏离，从而导致更复杂的维护。
- en: Of course, all three **can be mitigated** with well-defined practices in object-oriented
    programming. But even still, **it will take many hours of coding** that could
    be used in later stages to serve your data consumers faster.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，所有这三者**都可以通过在面向对象编程中定义良好的实践来缓解**。但即便如此，**仍然需要许多小时的编码**，这些时间本可以在后期用来更快速地为数据消费者提供服务。
- en: '![](../Images/3a353f00b105a05e5bc1d3df787f9e00.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3a353f00b105a05e5bc1d3df787f9e00.png)'
- en: Data flowing like cars in a highway. Photo by [Stephan Seeber](https://unsplash.com/@stywo?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 数据像高速公路上的汽车一样流动。图片由[Stephan Seeber](https://unsplash.com/@stywo?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: What if you try low-code connectors?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果你尝试低代码连接器会怎样？
- en: 'Other options still give you the flexibility to define what data you want to
    ingest and how with no to very little code involved. With this option, you get:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 其他选项仍然可以让你灵活地定义你想要摄取的数据及其方式，几乎不需要或只需要极少的代码。在这个选项下，你可以得到：
- en: 'Connectors with standardized behavior given the extraction methodology: No
    divergent classes for two connectors that use REST APIs at their core, for instance.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据提取方法标准化行为的连接器：例如，对于使用REST API作为核心的两个连接器，不会有分歧的类。
- en: Simple, but powerful user interfaces to build connections between sources and
    destinations.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单但强大的用户界面，用于构建源和目标之间的连接。
- en: Connectors that are maintained by the teams building the tools and the community.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由构建工具的团队和社区维护的连接器。
- en: These benefits allow you to **build data connections in minutes, instead of
    hours.**
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这些好处使你能够在**几分钟内构建数据连接，而不是几个小时。**
- en: Nevertheless, I am not trying to sell you these tools; if and when you need
    highly customizable logic for data ingestion, you are going to need to implement
    it. So, do what is best for your application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我并不是想向你推销这些工具；如果你需要为数据摄取实现高度可定制的逻辑，那么你将不得不自己实现它。因此，做最适合你应用的事。
- en: 'The exercise: Airbyte with ADLS Gen2'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习：使用 ADLS Gen2 部署 Airbyte
- en: Let’s jump right into it. I am using Azure for this tutorial. You can sign up
    and get $200 worth of services for free to try the platform.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直接进入正题。我在本教程中使用的是 Azure。你可以注册并免费获得 $200 的服务，尝试该平台。
- en: We are going to deploy Airbyte Open Source using an Azure Kubernetes cluster
    and use Azure Storage (ADLS) Gen 2 for cloud storage.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Azure Kubernetes 集群部署 Airbyte Open Source，并使用 Azure 存储 (ADLS) Gen 2 作为云存储。
- en: Creating the infrastructure
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基础设施
- en: 'First, create the following resources:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建以下资源：
- en: '**Resource group** with the name of your choosing.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源组**，可以选择你喜欢的名称。'
- en: '**Azure Kubernetes Services**. To avoid significant costs, set a single node
    pool with one node. However, that node needs enough resources. Otherwise, the
    Airbyte syncs won’t start. An appropriate node size is ***Standard_D4s_v3.***'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Kubernetes 服务**。为了避免高额费用，设置一个单节点池并使用一个节点。然而，该节点需要足够的资源，否则 Airbyte 同步将无法启动。一个合适的节点大小是
    ***Standard_D4s_v3.***'
- en: '**Azure Storage Account**. While creating git, turn on the hierarchical namespace
    feature so the storage account becomes ADLS Gen2\. Now create a storage container
    with any name you like.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure 存储账户**。创建 Git 时，开启分层命名空间功能，以便将存储账户转为 ADLS Gen2。现在，创建一个你喜欢的名称的存储容器。'
- en: '***Production Tip: Why the hierarchical namespace?*** *Object stores by default
    have a flat storage environment. This has the benefit of infinite scalability,
    with an important downside. For analytics workloads, this results in additional
    overhead when reading, modifying, or moving files as the whole container has to
    be scanned. Enabling this features brings hierarchical directories from filesystems
    to scalable object storage.*'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***生产提示：为什么要使用分层命名空间？*** *对象存储默认具有扁平的存储环境，这具有无限可扩展性的优点，但也有一个重要的缺点。对于分析工作负载，这会导致额外的开销，因为在读取、修改或移动文件时，必须扫描整个容器。启用此功能将文件系统中的分层目录带到可扩展的对象存储中。*'
- en: Deploying Airbyte to Kubernetes
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Airbyte 部署到 Kubernetes
- en: 'You need to install a few things on your shell first:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要先在你的 shell 中安装几个工具：
- en: '[Azure-CLI](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Azure-CLI](https://learn.microsoft.com/en-us/cli/azure/install-azure-cli)'
- en: '[Helm](https://helm.sh/docs/intro/install/)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Helm](https://helm.sh/docs/intro/install/)'
- en: '[Kubernetes command line tools (kubectl)](https://kubernetes.io/docs/tasks/tools/)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes 命令行工具 (kubectl)](https://kubernetes.io/docs/tasks/tools/)'
- en: 'Now, follow these steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，按照以下步骤操作：
- en: Log into your Azure account using the shell.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 shell 登录到你的 Azure 账户。
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Set the cluster credentials.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 设置集群凭证。
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Add remote helm repository and search for the Airbyte chart.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 添加远程 Helm 仓库并搜索 Airbyte chart。
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Create a unique Kubernetes namespace for the Airbyte deployments. I called it
    ***dev-airbyte****.*
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Airbyte 部署创建一个唯一的 Kubernetes 命名空间。我将其命名为 ***dev-airbyte***。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Deploy Airbyte.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 Airbyte。
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Wait a few minutes until the deployment is completed. Run the following command
    to check if the pods are running:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 等待几分钟，直到部署完成。运行以下命令检查 pods 是否正在运行：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/d52e441afa2593ab414f0da47a0cf780.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d52e441afa2593ab414f0da47a0cf780.png)'
- en: Airbyte pods ready! Screen capture taken by me.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Airbyte pod 已就绪！截图由我拍摄。
- en: '**Accessing the Airbyte web app locally**'
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**本地访问 Airbyte Web 应用**'
- en: After Airbyte is deployed you can get the container and port, and then run a
    port forwarding command to map a port in your local machine to the port in the
    Kubernetes web app pod. This will allow us to access the application using localhost.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 部署 Airbyte 后，你可以获取容器和端口，然后运行端口转发命令，将本地机器的端口映射到 Kubernetes Web 应用 pod 中的端口。这将允许我们通过
    localhost 访问应用程序。
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If you go to ***127.0.0.1:8080*** on your machine, you should see the application.
    Now, we can start adding data connectors!
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在你的机器上访问 ***127.0.0.1:8080***，你应该能看到应用程序界面。现在，我们可以开始添加数据连接器了！
- en: '***Production Tip:*** *Port forwarding works only for your local machine and
    must be done every time the shell is started. However, for data teams in real
    scenarios, Kubernetes allows you to expose your application throughout a* [*virtual
    private network*](https://learn.microsoft.com/en-us/azure/aks/internal-lb?tabs=set-service-annotations)*.
    For that, you will need to switch to* [*Airbyte Self-managed enterprise*](https://docs.airbyte.com/enterprise-setup/)
    *which provides* [*Single Sign-On*](https://docs.airbyte.com/access-management/sso-providers/azure-entra-id)
    *with Cloud identity providers like Azure Active Directory to secure your workspace.*'
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***生产提示：*** *端口转发仅适用于本地机器，且每次启动Shell时都必须执行。但是，对于实际场景中的数据团队，Kubernetes允许你通过*
    [*虚拟专用网络*](https://learn.microsoft.com/en-us/azure/aks/internal-lb?tabs=set-service-annotations)*公开你的应用程序*。为此，你需要切换到*
    [*Airbyte自托管企业版*](https://docs.airbyte.com/enterprise-setup/) *，它提供* [*单点登录*](https://docs.airbyte.com/access-management/sso-providers/azure-entra-id)
    *与像Azure Active Directory这样的云身份提供商一起保护你的工作区。*'
- en: Setting up the data source
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置数据源
- en: The provider for the data in this exercise is called [Tiingo](https://www.tiingo.com/documentation/general/overview),
    which serves very valuable information from the companies in the stock market.
    They offer [a free license](https://www.tiingo.com/documentation/general/overview)
    that will give you access to the end-of-day prices endpoint for any asset and
    fundamental analysis for companies in the DOW 30\. Be mindful that **with the
    free license, their data are for your eyes only**. If you want to share your creations
    based on Tiingo, you must pay for a commercial license. For now, I will use the
    free version and guide you through the tutorial without showing their actual stock
    data to remain compliant with their rules.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 本次练习中的数据提供商是[Tiingo](https://www.tiingo.com/documentation/general/overview)，它提供来自股市公司非常有价值的信息。他们提供[免费许可证](https://www.tiingo.com/documentation/general/overview)，可以让你访问任何资产的每日收盘价接口以及DOW
    30公司基本面分析。请注意，**使用免费许可证时，他们的数据仅供个人查看**。如果你想分享基于Tiingo的创作，你必须购买商业许可证。目前，我将使用免费版并指导你完成教程，但不会展示他们的实际股票数据，以遵守他们的规则。
- en: '[Create the account](https://www.tiingo.com/documentation/general/overview).
    Then, copy the API key provided to you. We are now ready to set up the source
    in Airbyte.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[创建账户](https://www.tiingo.com/documentation/general/overview)。然后，复制提供给你的API密钥。我们现在准备好在Airbyte中设置数据源。'
- en: '**Creating a data source in Airbyte**'
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**在Airbyte中创建数据源**'
- en: In the Airbyte app, go to ***Builder > Start from Scratch***.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Airbyte应用中，进入***Builder > Start from Scratch***。
- en: '![](../Images/812b3c82e58da3bdf5f9e49a7b75fe01.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/812b3c82e58da3bdf5f9e49a7b75fe01.png)'
- en: Airbyte connector builder screen. Image captured by me.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Airbyte连接器构建器界面。图片由我拍摄。
- en: 'In the API Base URL write [***https://api.tiingo.com/tiingo/***](https://api.tiingo.com/tiingo/)and
    for the configuration click on the YAML button. Enter the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在API基本URL中写入[***https://api.tiingo.com/tiingo/***](https://api.tiingo.com/tiingo/)，然后点击YAML按钮进行配置。输入以下内容：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will allow the API token to be inserted in the header of every request.
    Now, let’s add your first stream by clicking on the plus icon (+) on the left.
    See the image below for guidance.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许API令牌插入到每个请求的头部。现在，点击左侧的加号(+)来添加你的第一个流。下面的图片可以作为参考。
- en: '![](../Images/bf9e5f12c1dc47849a790faba83a3d82.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf9e5f12c1dc47849a790faba83a3d82.png)'
- en: Building the data source. Global Configuration. Image captured by me.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 构建数据源。全局配置。图片由我拍摄。
- en: '**URL and stream partitioning**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**URL和流分区**'
- en: 'At the top write ***End of Day Prices***. This will be our stream name and
    the URL path will be:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶部写入***End of Day Prices***。这将是我们的流名称，URL路径将是：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What is this placeholder between ***{{}}***? These are variables filled by Airbyte
    at runtime. In this case, Airbyte supports what they call stream partitioning,
    which allows the connector to **make as many requests as the number of values
    you have on your partition array**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '***{{}}***之间的占位符是什么？这些是Airbyte在运行时填充的变量。在这种情况下，Airbyte支持他们称之为流分区的功能，允许连接器**根据你分区数组中的值的数量发出请求**。'
- en: '![](../Images/68fe3ef2cb53068555465ea2fc4323ac.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/68fe3ef2cb53068555465ea2fc4323ac.png)'
- en: Defining URL path and primary key. Image captured by me.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 定义URL路径和主键。图片由我拍摄。
- en: 'Scroll down to parameterized requests, and check the box. In the parameter
    values dropdown, click User Input, and on the value textbox enter:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动到参数化请求，勾选该框。在参数值下拉菜单中，点击用户输入，并在值文本框中输入：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that the ***config*** variable used here is also referenced in the API
    Key in the global configuration. This variable holds the user inputs. Moreover,
    the user input ***tickers_arr*** will hold an array of stock IDs.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这里使用的***config***变量也在全局配置中的 API 密钥中引用。该变量保存用户输入的值。此外，用户输入的***tickers_arr***将保存股票
    ID 的数组。
- en: Next, on the ***Current Parameter Value Identifier*** textbox enter ***ticker***.
    This is the key that is added to the **stream_partition** variable and references
    a single stock ID from the array ***tickers_arr*** for a single HTTP request.
    Below you can find screenshots of this process.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在***当前参数值标识符***文本框中输入***ticker***。这是添加到**stream_partition**变量中的键，并引用来自数组***tickers_arr***的单个股票
    ID，以进行单个 HTTP 请求。下面是该过程的截图。
- en: '![](../Images/7344e59366784a9b8e46e92d42c22883.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7344e59366784a9b8e46e92d42c22883.png)'
- en: Defining the parameterized requests. Image captured by me.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 定义参数化请求。图片由我拍摄。
- en: 'We are going to test it with 4 stock tickers:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 4 个股票代码进行测试：
- en: '**BA** for Boeing Corp'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BA** 代表波音公司'
- en: '**CAT** for Caterpillar'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CAT** 代表卡特彼勒公司'
- en: '**CVX** for Chevron Corp'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CVX** 代表雪佛龙公司'
- en: '**KO** for Coca-Cola'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KO** 代表可口可乐公司'
- en: 'With the stream partitioning set up, the connector will make 4 requests to
    the Tiingo server as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 配置好流分区后，连接器将向 Tiingo 服务器发出 4 个请求，如下所示：
- en: '[***https://api.tiingo.com/tiingo/***](https://api.tiingo.com/tiingo/)***daily/BA/prices***'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[***https://api.tiingo.com/tiingo/***](https://api.tiingo.com/tiingo/)***daily/BA/prices***'
- en: '[***https://api.tiingo.com/tiingo/***](https://api.tiingo.com/tiingo/)***daily/CAT/prices***'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[***https://api.tiingo.com/tiingo/***](https://api.tiingo.com/tiingo/)***daily/CAT/prices***'
- en: '[***https://api.tiingo.com/tiingo/***](https://api.tiingo.com/tiingo/)***daily/CVX/prices***'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[***https://api.tiingo.com/tiingo/***](https://api.tiingo.com/tiingo/)***daily/CVX/prices***'
- en: '[***https://api.tiingo.com/tiingo/daily/KO/prices***](https://api.tiingo.com/tiingo/daily/KO/prices)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[***https://api.tiingo.com/tiingo/daily/KO/prices***](https://api.tiingo.com/tiingo/daily/KO/prices)'
- en: Pretty cool, huh?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 很酷吧？
- en: '***Production Tip:*** *Airbyte supports a parent stream, which allows us to
    get the list for the partitioning using a request to some other endpoint, instead
    of issuing the array elements ourselves. We are not doing that in this exercise,
    but you can check it out* [*here*](https://docs.airbyte.com/connector-development/connector-builder-ui/partitioning#parent-stream)*.*'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***生产提示：*** *Airbyte 支持父流，这使我们可以通过请求其他端点来获取分区列表，而无需自己发出数组元素。在这个练习中我们没有这样做，但你可以查看*
    [*这里*](https://docs.airbyte.com/connector-development/connector-builder-ui/partitioning#parent-stream)*。*'
- en: '**Incremental Sync**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**增量同步**'
- en: 'Airbyte supports syncing data in Incremental Append mode i.e.: syncing only
    *new* or *modified* data. This prevents re-fetching data that you have already
    replicated from a source. If the sync is running for the first time, it is equivalent
    to a [Full Refresh](https://docs.airbyte.com/using-airbyte/core-concepts/sync-modes/full-refresh-append)
    since all data will be considered as *new*.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Airbyte 支持在增量追加模式下同步数据，即：仅同步*新增*或*修改*的数据。这可以防止重新获取已从源头复制的数据。如果是第一次运行同步，它相当于[完全刷新](https://docs.airbyte.com/using-airbyte/core-concepts/sync-modes/full-refresh-append)，因为所有数据都会被视为*新增*数据。
- en: To implement this in our connector, scroll to **Incremental Sync** and check
    the box. In the **cursor** field textbox write date since, according to the documentation,
    that is the name of the date field indicating when the asset was updated. For
    the cursor DateTime Formats, enter
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的连接器中实现此功能，请滚动到**增量同步**并勾选复选框。在**游标**字段文本框中输入日期，因为根据文档说明，这是表示资产更新时间的日期字段名称。对于游标日期时间格式，输入
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This is the output format suggested by the API docs.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 API 文档建议的输出格式。
- en: 'In the **Start DateTime dropdown** click Custom and on the textbox enter the
    following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在**开始日期时间下拉菜单**中点击自定义，并在文本框中输入以下内容：
- en: '[PRE11]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It will tell Airbyte to insert the date corresponding to yesterday. For the
    **End Datetime** leave the dropdown in **Now** to get data from the start date,
    up until today. The screenshot below depicts these steps.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 它会告诉 Airbyte 插入昨天的日期。对于**结束日期时间**，将下拉菜单保持在**现在**，以便获取从开始日期到今天的数据。以下截图展示了这些步骤。
- en: '![](../Images/5cd1f3a8416f313df9514724e7611cca.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5cd1f3a8416f313df9514724e7611cca.png)'
- en: Adding Incremental Start Datetime and End Datetime. Image captured by me.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 添加增量开始日期时间和结束日期时间。图片由我拍摄。
- en: 'Finally, check the boxes to inject the start and end time into the outgoing
    HTTP request. The parameter names should be startDate and endDate, respectively.
    These parameter names come from Tiingo documentation as well. An example request
    will now look like:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，勾选框以将开始时间和结束时间注入到传出的 HTTP 请求中。参数名称应分别为 startDate 和 endDate。这些参数名称也来自 Tiingo
    文档。一个示例请求现在将如下所示：
- en: '[***https://api.tiingo.com/tiingo/daily/BA/prices?startDate=2024-09-20T13%3A54%3A20.000000Z&endDate=2024-09-23T13%3A54%3A20.000000Z***](https://api.tiingo.com/tiingo/daily/BA/prices?startDate=2024-09-20T13%3A54%3A20.000000Z&endDate=2024-09-23T13%3A54%3A20.000000Z)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[***https://api.tiingo.com/tiingo/daily/BA/prices?startDate=2024-09-20T13%3A54%3A20.000000Z&endDate=2024-09-23T13%3A54%3A20.000000Z***](https://api.tiingo.com/tiingo/daily/BA/prices?startDate=2024-09-20T13%3A54%3A20.000000Z&endDate=2024-09-23T13%3A54%3A20.000000Z)'
- en: '![](../Images/7ce827f23bcbac38adc32536fd8e1fc3.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ce827f23bcbac38adc32536fd8e1fc3.png)'
- en: Start and End Time parameters for our incremental loads. Image captured by me.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 用于增量加载的开始和结束时间参数。图片由我拍摄。
- en: '**Control Fields**'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制字段**'
- en: We are going to insert some information to enrich the data. For this, scroll
    to the transformations section and check the box. Inside the transformation dropdown,
    click on Add Field. The path is just the column name to be added, write process_date
    with the value {{ today_utc() }}. This will just indicate the timestamp for which
    the records were ingested into our system.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将插入一些信息以丰富数据。为此，滚动到转换部分并勾选框。在转换下拉菜单中，点击“添加字段”。路径就是要添加的列名，写 process_date，值为
    {{ today_utc() }}。这将指示记录被导入系统的时间戳。
- en: Now, according to the documentation, the ticker of the asset is not returned
    in the response, but we can easily add it using an additional transformation.
    So, for path, write ticker and the value should be {{ stream_partition[‘ticker’]
    }}. This will add the ticker value of the current stream partition as a column.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，根据文档，资产的股票代码不会在响应中返回，但我们可以通过额外的转换轻松地将其添加进去。所以，对于路径，写 ticker，值应为 {{ stream_partition[‘ticker’]
    }}。这将把当前流分区的 ticker 值作为一列添加进去。
- en: '![](../Images/5dd6fdc264b64ad6b7c3c34da2125965.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5dd6fdc264b64ad6b7c3c34da2125965.png)'
- en: Adding our control fields to the API response. Image captured by me.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的控制字段添加到 API 响应中。图片由我拍摄。
- en: '**Testing**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试**'
- en: 'On the Testing values button, enter the list of tickers. A comma separates
    each ticker: BA, CAT, CVX, KO.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在“测试值”按钮中，输入股票代码列表。每个股票代码用逗号分隔：BA、CAT、CVX、KO。
- en: You should see something similar to the following image.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到类似下面的图像。
- en: '![](../Images/c84d4c77e7b89e4b42052eccee1835d6.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c84d4c77e7b89e4b42052eccee1835d6.png)'
- en: Notice the two example partitions. These are two separate, parameterized requests
    that Airbyte performed. You can also get information about the actual content
    in your request, the generated schema of the data, and state information.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 注意两个示例分区。这是 Airbyte 执行的两个独立的参数化请求。你还可以获得有关请求的实际内容、生成的数据架构以及状态信息。
- en: Go to the top right corner and click **publish** to save this connector. Give
    it any name you want, I just called it Tiingo Connector.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 转到右上角并点击 **发布** 以保存此连接器。可以给它任何名称，我只是叫它 Tiingo Connector。
- en: '**Connecting Airbyte to the object store**'
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**将 Airbyte 连接到对象存储**'
- en: 'Let’s return to our storage service, go to ***Security + Networking > Access
    keys***. Copy the account name and one of the access keys. Note: we need the access
    key, not the connection string.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们返回到存储服务，进入 ***Security + Networking > Access keys***。复制帐户名称和一个访问密钥。注意：我们需要的是访问密钥，而不是连接字符串。
- en: '![](../Images/a0a893eec48cc4699adfa60c0e0ce34f.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a0a893eec48cc4699adfa60c0e0ce34f.png)'
- en: Getting the access keys for the azure storage account. Image captured by me.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 获取 Azure 存储帐户的访问密钥。图片由我拍摄。
- en: Next, go to your Airbyte app, select ***Destinations> Marketplace,*** and click
    ***Azure Blob Storage***. Enter the account name, account key, and leave the other
    configurations as in the image. Additionally, in the Optional fields, enter the
    name of the container you created. Next, click on **Set up destination.**
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，进入你的 Airbyte 应用，选择 ***Destinations> Marketplace***，然后点击 ***Azure Blob Storage***。输入帐户名称、帐户密钥，并保持其他配置如图所示。此外，在可选字段中，输入你创建的容器名称。接下来，点击
    **设置目标**。
- en: '![](../Images/905e407aa641d36903b82425992f7582.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/905e407aa641d36903b82425992f7582.png)'
- en: Setting up the destination in Airbyte. Image captured by me.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Airbyte 中设置目标。图片由我拍摄。
- en: '***Production Tip:*** *Data assets from your organization need to be secured
    so that the individuals or teams have access to only the files they need. You
    can set up role-based access control at the storage account level with the Access
    Control (IAM) button, and also set Access Control Lists (ACLs) when right clicking
    folders, containers, or files.*'
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '***生产提示：*** *你组织的数据资产需要得到保护，以确保只有需要访问文件的个人或团队能够访问。你可以在存储帐户级别通过访问控制（IAM）按钮设置基于角色的访问控制，也可以通过右键点击文件夹、容器或文件来设置访问控制列表（ACLs）。*'
- en: '**Creating a connection from source to destination**'
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**从源到目标创建连接**'
- en: There are four steps to build a connection in Airbyte and it will use the Tiingo
    Connector and the Azure Storage.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Airbyte 中建立连接有四个步骤，它将使用 Tiingo 连接器和 Azure 存储。
- en: '**Defining the source**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义源**'
- en: In the Airbyte app, go to connections and create one. The first step is to set
    up the source. Click ***Set up a new source.*** Then, on the ***Custom*** tab,
    select the Tiingo connector we just created.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Airbyte 应用中，进入连接设置并创建一个连接。第一步是设置源。点击 ***设置新源***。然后，在 ***自定义*** 标签下，选择我们刚刚创建的
    Tiingo 连接器。
- en: '![](../Images/3e8af663b6df1908980692dfe2bfae4e.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3e8af663b6df1908980692dfe2bfae4e.png)'
- en: Creating a source for the connection. Image captured by me.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为连接创建源。图片由我拍摄。
- en: It will prompt you to enter the API Keys and stock tickers. Just copy the ones
    you used while testing the source. Now click on ***Set up source***. It will test
    the connector with your configuration.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 它会提示你输入 API 密钥和股票代码。只需复制你在测试源时使用的密钥。现在点击 ***设置源***。它将使用你的配置测试连接器。
- en: '![](../Images/67cf7b9b74f85e75cfd47462c052a461.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/67cf7b9b74f85e75cfd47462c052a461.png)'
- en: Adding user inputs for the source. Image captured by me.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为源添加用户输入。图片由我拍摄。
- en: '**Defining the destination**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义目标**'
- en: Once it has passed, we will set up the destination, which is the one created
    in the above section. At this time, Airbyte will also test the destination.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦同步通过，我们将设置目标，目标是上述部分中创建的那个。此时，Airbyte 也将测试目标。
- en: '![](../Images/90840b72922681efa4ccac4eb4e1ef68.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/90840b72922681efa4ccac4eb4e1ef68.png)'
- en: Adding the destination for the connection. Image captured by me.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为连接添加目标。图片由我拍摄。
- en: '**Defining streams**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义流**'
- en: 'The third step is to select the streams and the sync mode. As we only defined
    one stream called ***End of Day Prices***, this is the only one available. As
    for the sync modes, these are the options available for this exercise:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 第三步是选择流和同步模式。由于我们只定义了一个名为 ***日终价格*** 的流，所以这是唯一可用的流。至于同步模式，这些是本次操作可用的选项：
- en: '**Full Refresh | Overwrite:** This mode will retrieve all the data and replace
    any existing data in the destination.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完全刷新 | 覆盖：** 该模式将检索所有数据，并替换目标中任何现有的数据。'
- en: '**Full Refresh | Append**: This mode will also retrieve all of the data, but
    it will append the new data to the destination. You must deduplicate or transform
    your data properly to suit your needs afterward.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完全刷新 | 追加：** 该模式也会检索所有数据，但它会将新数据追加到目标中。你必须适当地去重或转换数据，以满足你后续的需求。'
- en: '**Incremental | Append:** This mode requests data given the incremental conditions
    we defined while building the connector. Then, it will append the data to the
    destination.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增量 | 追加：** 该模式根据我们在构建连接器时定义的增量条件请求数据。然后，它会将数据追加到目标位置。'
- en: You can read more about synch modes [here](https://docs.airbyte.com/using-airbyte/core-concepts/sync-modes/).
    For now, choose ***Incremental | Append.***
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[这里](https://docs.airbyte.com/using-airbyte/core-concepts/sync-modes/)阅读更多关于同步模式的信息。现在，选择
    ***增量 | 追加***。
- en: '![](../Images/2a3c9165f9bb4530b65b269f360fc0ec.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2a3c9165f9bb4530b65b269f360fc0ec.png)'
- en: Selecting the streams to ingest. Image captured by me.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 选择要获取的流。图片由我拍摄。
- en: '**Final connection configurations**'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**最终连接配置**'
- en: Here you can define the schedule you want, plus other additional settings. Click
    ***finish and sync*** to prompt your first data extraction and ingestion.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以定义所需的计划以及其他附加设置。点击 ***完成并同步***，以启动第一次数据提取和获取。
- en: '![](../Images/0a7793c13f18d5914054a5f9d456a619.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0a7793c13f18d5914054a5f9d456a619.png)'
- en: Running the first synching process. Image captured by me.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 运行第一次同步过程。图片由我拍摄。
- en: And that’s it! The data is now ingested. Head back to the storage container
    and you will see a new folder with one CSV file. With the append mode chosen,
    whenever a sync is triggered, a new file appears in the folder.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！数据已经被获取。返回存储容器，你将看到一个新文件夹，其中有一个 CSV 文件。选择追加模式后，每当触发同步时，新的文件将出现在该文件夹中。
- en: '![](../Images/3377672c7a3c6cf036baef6f8e84e9a1.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3377672c7a3c6cf036baef6f8e84e9a1.png)'
- en: A new folder with the name of the stream is created. Image captured by me.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一个以流名称命名的新文件夹已创建。图片由我拍摄。
- en: '![](../Images/26caccaa6abe9cc899f7da740c84fbc1.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/26caccaa6abe9cc899f7da740c84fbc1.png)'
- en: Data files as a result of multiple syncs in Airbyte. Image captured by me.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Airbyte 多次同步后的数据文件。图片由我拍摄。
- en: Conclusion
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: You can clearly see the power of these kinds of tools. In this case, Airbyte
    allows you to get started with ingesting critical data in a matter of minutes
    with production-grade connectors, without the need to maintain large amounts of
    code. In addition, it allows incremental and full refresh modes with append or
    overwrite capabilities. In this exercise, only the Rest API sources were demonstrated,
    but there are many other source types, such as traditional databases, data warehouses,
    object stores, and many other platforms. Finally, it also offers a variety of
    destinations where your data can land and be analyzed further, greatly speeding
    up the development process and allowing you to take your products to market faster!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以清楚地看到这些工具的强大功能。在这种情况下，Airbyte 让你能够在几分钟内通过生产级连接器开始获取关键数据，而无需维护大量代码。此外，它还支持增量刷新和全量刷新模式，并具有附加或覆盖的功能。在这个练习中，仅演示了
    Rest API 数据源，但还有许多其他类型的数据源，例如传统数据库、数据仓库、对象存储和其他平台。最后，它还提供多种目标位置，你的数据可以存储在这些位置并进一步分析，极大加快了开发过程，让你能够更快地将产品推向市场！
- en: Thank you for reading this article! If you enjoyed it, please give it a clap
    and share. I do my best to write about the things I learn in the data world as
    an appreciation for this community that has taught me so much.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读本文！如果你喜欢这篇文章，请点赞并分享。我尽力写出我在数据领域学到的东西，以此表达对这个教会我很多的社区的感谢。
- en: Till the next time!
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 下次再见！
