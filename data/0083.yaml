- en: 'Out-of-Office Emails Are Boring: Making Them Pop with Generative AI'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外出邮件很无聊：用生成式 AI 让它们更生动
- en: 原文：[https://towardsdatascience.com/making-out-of-office-emails-pop-with-generative-ai-876d4fb81342?source=collection_archive---------10-----------------------#2024-01-09](https://towardsdatascience.com/making-out-of-office-emails-pop-with-generative-ai-876d4fb81342?source=collection_archive---------10-----------------------#2024-01-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/making-out-of-office-emails-pop-with-generative-ai-876d4fb81342?source=collection_archive---------10-----------------------#2024-01-09](https://towardsdatascience.com/making-out-of-office-emails-pop-with-generative-ai-876d4fb81342?source=collection_archive---------10-----------------------#2024-01-09)
- en: I just couldn’t get myself to write yet another out-of-office message, so I
    developed an AI-powered app to make my digital presence felt while I was off on
    a month-long holiday.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我实在是写不下去另一封外出邮件了，于是我开发了一个由 AI 驱动的应用，在我度过一个月长假期间，依然能够保持我的数字存在感。
- en: '[](https://osheikhomar.medium.com/?source=post_page---byline--876d4fb81342--------------------------------)[![Omar
    Ali Sheikh](../Images/e4fe8498d467204e79a562cd0491e581.png)](https://osheikhomar.medium.com/?source=post_page---byline--876d4fb81342--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--876d4fb81342--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--876d4fb81342--------------------------------)
    [Omar Ali Sheikh](https://osheikhomar.medium.com/?source=post_page---byline--876d4fb81342--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://osheikhomar.medium.com/?source=post_page---byline--876d4fb81342--------------------------------)[![Omar
    Ali Sheikh](../Images/e4fe8498d467204e79a562cd0491e581.png)](https://osheikhomar.medium.com/?source=post_page---byline--876d4fb81342--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--876d4fb81342--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--876d4fb81342--------------------------------)
    [Omar Ali Sheikh](https://osheikhomar.medium.com/?source=post_page---byline--876d4fb81342--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--876d4fb81342--------------------------------)
    ·18 min read·Jan 9, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--876d4fb81342--------------------------------)
    ·18分钟阅读·2024年1月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '*TLDR; This article outlines the development of a web-app for crafting non-traditional
    out-of-office emails with Generative AI. Should you choose to peruse this article,
    dear reader, you will be rewarded with a large number of words strung together
    to describe how I designed and built a Python app that utilizes GPT-4 and DALL-E
    3 for generating auto-reply messages with accompanying pictures. If, on the other
    hand, you just want to try out the app yourself, I got your back; the source code
    is up for grabs on* [*GitHub*](https://github.com/sheikhomar/roll)*.*'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*TLDR; 本文概述了一个用生成式 AI 编写非传统外出邮件的 Web 应用的开发过程。如果亲爱的读者选择继续阅读，您将会收获一大堆文字，详细描述我如何设计并构建了一个利用
    GPT-4 和 DALL-E 3 生成自动回复邮件和配图的 Python 应用。另一方面，如果您只想亲自试试这个应用，我为您准备好了；源代码可以在* [*GitHub*](https://github.com/sheikhomar/roll)*
    上找到。*'
- en: '![](../Images/85ff7ba640459bff178059f0d2b8124e.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85ff7ba640459bff178059f0d2b8124e.png)'
- en: A screenshot of the app I built for constructing out-of-office emails with Generative
    AI. This UI allows users to manage the auto-reply creations and programmatically
    set up Outlook out-of-office settings. Although the shown text is in Danish, the
    generative model can produce texts in other languages with a slight change in
    the prompt for the model. A short screencast of the user interface can be found
    towards the end of this article. Image by the author.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我为构建带有生成式 AI 的外出邮件所开发的应用截图。此用户界面允许用户管理自动回复的创建，并以编程方式设置 Outlook 的外出设置。尽管显示的文本是丹麦语，但生成模型可以通过稍微修改提示语来生成其他语言的文本。文章的最后可以找到一个短小的用户界面演示视频。图片来自作者。
- en: Embracing Generative AI for Auto-Replies
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拥抱生成式 AI 进行自动回复
- en: Out-of-office emails are bland.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 外出邮件太单调了。
- en: There, I’ve said it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我说出来了。
- en: But do they have to be this way? Why not use Large Language Models to sprinkle
    some flair into these messages? And for that extra pizzazz, why not use Text-to-Image
    models to generate snazzy images that accompany these texts?
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但真的必须这么做吗？为什么不使用大语言模型来为这些邮件增添一些特色呢？为了更具创意，为什么不使用文本到图像模型来生成一些炫酷的图像，配合这些文字呢？
- en: With generative models just a few API calls away, making auto-reply emails pop
    couldn’t be easier. In this article, I’ll show you how. We’ll take Python and
    Open AI’s API for a test drive. We’ll create whimsical yet professional out-of-office
    emails and integrate them into Outlook. And for those who prefer to dive straight
    into the code, it’s all there for you on [GitHub](https://github.com/sheikhomar/roll).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于生成模型仅需几次 API 调用，制作出吸引眼球的自动回复邮件变得前所未有的简单。在本文中，我将展示如何做到这一点。我们将使用 Python 和 OpenAI
    的 API 进行测试。我们将创建既俏皮又专业的外出自动回复邮件，并将其集成到 Outlook 中。对于那些喜欢直接跳入代码的朋友，所有代码都可以在 [GitHub](https://github.com/sheikhomar/roll)
    上找到。
- en: '[](https://github.com/sheikhomar/roll?source=post_page-----876d4fb81342--------------------------------)
    [## GitHub - sheikhomar/roll: A Gen AI-based app for adding flair to your auto-reply
    messages'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/sheikhomar/roll?source=post_page-----876d4fb81342--------------------------------)
    [## GitHub - sheikhomar/roll：一个基于生成式 AI 的应用，用于为自动回复消息增添趣味'
- en: ROLL takes care of your Outlook inbox, dutifully informing others while you’re
    out of the office, whether on a holiday, in a day-long workshop, or just taking
    a long nap after a hearty lunch.
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ROLL 负责管理你的 Outlook 收件箱，忠实地告知他人你不在办公室，无论是度假、参加一天的研讨会，还是在丰盛午餐后小睡片刻。
- en: github.com](https://github.com/sheikhomar/roll?source=post_page-----876d4fb81342--------------------------------)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/sheikhomar/roll?source=post_page-----876d4fb81342--------------------------------)
- en: What is the Endgame here?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这里的最终目标是什么？
- en: As any self-respecting software engineer knows, we can’t get into the technical
    wizardry before we know what we want to achieve.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 任何一个自尊心强的软件工程师都知道，在知道我们想要实现什么之前，我们不能开始进行技术上的魔法操作。
- en: '**Goal 1:** We want to get an LLM to whip up Danish texts that tickle the funny
    bone. Not only that, it would be neat to pair these messages with relevant images,
    because who would not appreciate cartoonish images in their inbox?'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标 1：** 我们希望让大型语言模型（LLM）生成能够逗乐的丹麦语文本。不仅如此，将这些消息与相关的图片搭配使用也会很有趣，因为谁不喜欢在收件箱里看到卡通图片呢？'
- en: '**Goal 2:** Quality is vital. Especially since these auto-reply messages are
    sent from my work inbox. Outputs from current AI models are far from perfect.
    Even powerful LLMs like GPT-4 occasionally trip over the grammar rules in Danish.
    We need make sure that the generated content is both correct and appropriate.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标 2：** 质量至关重要，特别是因为这些自动回复消息是从我的工作邮箱发送的。目前的 AI 模型输出远非完美。即使是强大的 LLM，如 GPT-4，有时也会在丹麦语的语法规则上出错。我们需要确保生成的内容既正确又得体。'
- en: '**Goal 3:** Anyone who wrestled with Outlook knows the absurd number of clicks
    it takes to manually change out-of-office settings. Automation is not just a buzzword
    here, but as necessary as a cup of Espresso on a Monday morning.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标 3：** 任何与 Outlook 打过交道的人都知道，手动更改外出设置需要点击无数次。自动化不仅仅是一个流行词汇，而是像周一早晨的一杯浓缩咖啡一样必要。'
- en: '**Goal 4:** Even if generative models cooked up the perfect auto-reply email,
    the magic will soon wear off, if the same text is served every time. So, we want
    the emails to change frequently. Either every time an auto-reply is sent or on
    a schedule, say, every 24 hours.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标 4：** 即使生成模型编写出了完美的自动回复邮件，如果每次发送的都是相同的文本，这种魔力很快就会消失。因此，我们希望邮件内容能够频繁变化。无论是每次发送自动回复时，还是按计划变动，比如每
    24 小时更换一次。'
- en: In this article, we’ll focus on goals 1 to 3\. We’ll save the scheduling part
    of the project for a future article because it can get quite complicated and deserves
    its own write-up.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将重点讨论目标 1 到 3。我们会将项目中的调度部分留到未来的文章中，因为它可能会变得相当复杂，值得单独撰写。
- en: How to Stack Code Blocks Without Toppling the Tower?
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何堆叠代码块而不让塔倒塌？
- en: 'Requirements gathering: check. Time to code, right?'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 需求收集：完成。该开始编码了，对吧？
- en: Wrong!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 错！
- en: We can’t just start typing away like caffeinated code monkeys. We need to think
    about how to structure our code. We are engineers, after all.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能像喝了咖啡的程序猿一样胡乱开始编码。我们需要考虑如何构建我们的代码。毕竟，我们是工程师。
- en: 'A quick drawing on a blank endpaper of the book *C# 4.0 The Complete Reference
    —* which, by the way, is an excellent book for adjusting the height of computer
    monitors — yields a structure with three ‘layers’:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在《C# 4.0 完全参考》一书的空白页上快速画了一张图——顺便提一句，这本书对于调整电脑显示器高度非常有用——图中显示了一个有三层的结构：
- en: '![](../Images/8682194c03c0fabd7260f1037f1e5e1d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8682194c03c0fabd7260f1037f1e5e1d.png)'
- en: A drawing that maps out our strategy for organizing the code into independent
    units, [each with its own responsibility.](https://en.wikipedia.org/wiki/Single_responsibility_principle)
    Image created by yours truly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一张图展示了我们如何将代码组织成独立单元的策略，[每个单元都有自己的责任。](https://en.wikipedia.org/wiki/Single_responsibility_principle)
    图片由我亲自制作。
- en: 'At the bottom layer are the components that deal with external systems:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层是处理外部系统的组件：
- en: '**Generate AI API** is a unit of abstraction for the generative models. In
    this project, we’ll rely on OpenAI’s models. Specifically, GPT-4 for drafting
    the texts and DALL-E 3 for the visuals in our auto-replies.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生成AI API**是生成模型的抽象单元。在这个项目中，我们将依赖OpenAI的模型。具体来说，使用GPT-4来起草文本，使用DALL-E 3来生成我们的自动回复中的视觉内容。'
- en: '**Data Repository** serves as our digital library to store our creations. We’ll
    keep things simple and store everything as files on disk.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据仓库**是我们的数字图书馆，用来存储我们的创作。我们将保持简单，所有内容都作为文件存储在磁盘上。'
- en: '**Outlook Client** is our interface with Microsoft Outlook. It allows us to
    set the out-of-office settings programmatically, thereby automating what would
    otherwise be a click-fest worthy of a League of Legends tournament.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Outlook客户端**是我们与Microsoft Outlook的接口。它允许我们以编程方式设置外出设置，从而自动化原本需要反复点击的过程，简直可以媲美英雄联盟锦标赛中的点击盛宴。'
- en: 'In the middle layer, we have a service layer, which contains the components
    that perform all the heavy lifting:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在中间层，我们有一个服务层，其中包含执行所有繁重任务的组件：
- en: '**Content Generator** churns out texts, but also generates images that accompany
    these texts. It relies on the Generative AI component to deliver its output.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容生成器**生成文本，同时也生成伴随文本的图像。它依赖生成AI组件来提供输出。'
- en: '**File Downloader** is necessary as DALL-E’s creations have a shelf-life of
    just 24 hours. This component downloads these fleeting masterpieces off the internet
    before they vanish into thin air.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件下载器**是必要的，因为DALL-E的创作只能保存24小时。这个组件将在它们消失之前将这些稍纵即逝的杰作从互联网上下载下来。'
- en: '**Image Optimizer** trims the excess bytes off of images generated by DALL-E.
    This can be done by resizing them and maybe applying a quantization algorithm.
    The idea is to make emails containing images faster to transmit over the wire.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像优化器**会去除DALL-E生成的图像中的多余字节。这可以通过调整图像大小，或许还可以应用量化算法来实现。目标是使包含图像的电子邮件在传输时更为高效。'
- en: '**HTML Creator** is responsible for formatting a given text message and an
    optimized image as HTML text ready to be sent as an auto-reply email.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML创建器**负责将给定的文本信息和优化后的图像格式化为HTML文本，准备作为自动回复电子邮件发送。'
- en: Capping it all off at the top layer is the **User Interface**, our command-and-control
    center, where we oversee everything. Here, we ensure that when the LLM decides
    to produce prose containing made-up words that almost seem to be, but not entirely,
    Danish, we can step in and save the day.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在最顶层是**用户界面**，我们的指挥控制中心，在这里我们可以监督一切。我们确保当LLM（大语言模型）决定生成包含虚构词汇的文本时，这些词汇几乎看起来像是丹麦语，但又不完全是，我们可以及时介入并拯救局面。
- en: The UI also allows us to generate new images based on the text. And most importantly,
    this is where we can configure the out-of-office settings in Outlook with a click
    of a button — freeing up precious seconds for other rather enjoyable cognitive
    endeavors such as optimizing exact *k*-nearest-neighbor search algorithms.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面还允许我们根据文本生成新的图像。最重要的是，在这里我们可以通过点击按钮配置Outlook的外出设置——为其他愉快的认知活动腾出宝贵的秒数，比如优化精确的*k*-最近邻搜索算法。
- en: Now that we have laid out the software design , it’s time for coding.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设计好了软件架构，接下来是编码阶段。
- en: Let’s roll!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: How to Build the Tower Brick by Brick?
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何一步步建立塔楼？
- en: This section details in broad strokes how to implement each component described
    in the previous section. The aim is not to explain each line of code in detail
    but to provide enough context to clarify the intention of what is happening in
    the code. The comments in the code and naming should cover the rest. If that is
    not the case, you are welcome to direct a comment my way.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本节大致介绍了如何实现上一节中描述的每个组件。目标不是详细解释每一行代码，而是提供足够的上下文来澄清代码背后的意图。代码中的注释和命名应该涵盖剩下的部分。如果还有不清楚的地方，欢迎向我提出意见。
- en: Generative AI API
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成AI API
- en: To implement the Generative AI component, we can go down the well-trodden path
    of utilizing libraries like [LangChain](https://github.com/langchain-ai/langchain)
    and [OpenAI’s official Python SDK](https://github.com/openai/openai-python). Instead,
    let’s veer off onto another, more well-structured trail and use [AIConfig](https://github.com/lastmile-ai/aiconfig).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现生成式AI组件，我们可以走一条众所周知的道路，利用像[LangChain](https://github.com/langchain-ai/langchain)和[OpenAI官方Python
    SDK](https://github.com/openai/openai-python)这样的库。相反，让我们偏离传统路径，走一条更有结构的路线，使用[AIConfig](https://github.com/lastmile-ai/aiconfig)。
- en: Interestingly, AIConfig emphasizes on managing the Generative AI parts of a
    system through configuration files. This should strike a chord with senior software
    engineers. By decoupling the behavior of the AI from the application code, we
    get a more maintainable codebase, which is a cornerstone of high-quality software
    engineering. Plus, the config-driven approach structures our experiments and allows
    us to tweak the prompts faster without changing our code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，AIConfig强调通过配置文件管理系统中的生成式AI部分。这应该会引起资深软件工程师的共鸣。通过将AI的行为与应用代码解耦，我们获得了一个更易维护的代码库，这是高质量软件工程的基石。而且，基于配置的方法结构化了我们的实验，使我们能够更快地调整提示，而无需修改代码。
- en: 'If this piqued your curiosity, check out Sarmad’s insightful article:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这引起了你的兴趣，看看Sarmad的深刻文章：
- en: '[](https://blog.lastmileai.dev/open-sourcing-aiconfig-6fbab53a59f7?source=post_page-----876d4fb81342--------------------------------)
    [## Open-sourcing AIConfig'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://blog.lastmileai.dev/open-sourcing-aiconfig-6fbab53a59f7?source=post_page-----876d4fb81342--------------------------------)
    [## 开源AIConfig'
- en: A config-driven, source-control-friendly AI application development framework
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于配置驱动、适合源代码管理的AI应用开发框架
- en: blog.lastmileai.dev](https://blog.lastmileai.dev/open-sourcing-aiconfig-6fbab53a59f7?source=post_page-----876d4fb81342--------------------------------)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: blog.lastmileai.dev](https://blog.lastmileai.dev/open-sourcing-aiconfig-6fbab53a59f7?source=post_page-----876d4fb81342--------------------------------)
- en: 'With AIConfig, the code for interacting with the AI becomes refreshingly simple.
    We just need to instantiate an instance of `AIConfigRuntime` from a configuration
    file, and then issue calls to the appropriate model using named settings:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用AIConfig，与AI交互的代码变得异常简单。我们只需要从配置文件实例化一个`AIConfigRuntime`对象，然后使用命名设置调用相应的模型：
- en: '[PRE0]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Banking on AIConfig in our project, the Generative AI component boils down to
    a few lines of code. For this reason, we are not going to write a custom wrapper
    code for this component, as we would have, if we were implementing it with LangChain.
    Less headache and no need to hurl choice words at LangChain for its convoluted
    design and shaky abstractions. Another delightful upside of using AIConfig is
    that we don’t have to roll out our own configuration logic e.g. with [Hydra](https://github.com/facebookresearch/hydra).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中依赖AIConfig，生成式AI组件只需几行代码。正因如此，我们不会为这个组件编写自定义封装代码，像我们在使用LangChain时那样。少了麻烦，也不需要因为LangChain复杂的设计和不稳定的抽象而对其进行吐槽。使用AIConfig的另一个愉快优势是，我们不必自己实现配置逻辑，例如使用[Hydra](https://github.com/facebookresearch/hydra)。
- en: Data Repository
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据仓库
- en: 'Data Repository ensures that our content can be stored and retrieved reliably
    as files on disk. It uses a data class named `AutoReplyRecord` to organize the
    information and JSON as the serialization format. Our implementation `DataRepository`
    exposes CRU operations, i.e., the standard CRUD operations but without allowing
    for deletion:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 数据仓库确保我们的内容可以作为文件可靠地存储和检索。它使用一个名为`AutoReplyRecord`的数据类来组织信息，并使用JSON作为序列化格式。我们的实现`DataRepository`暴露了CRU操作，即标准的CRUD操作，但不允许删除：
- en: '[PRE1]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Outlook Client
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Outlook客户端
- en: Automating Outlook becomes child’s play, when you have a tool like [exchangelib](https://github.com/ecederstrand/exchangelib).
    It is a Python library that lets you interact with the Microsoft Exchange API
    like a champ. An excellent piece of software that we’ll use in this project.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当你拥有像[exchangelib](https://github.com/ecederstrand/exchangelib)这样的工具时，自动化Outlook变得轻而易举。它是一个Python库，可以像高手一样与Microsoft
    Exchange API进行交互。这是一个优秀的软件，我们将在本项目中使用它。
- en: For this particular app, we just want to play with Outlook’s out-of-office settings.
    Therefore, we’ll put together a wrapper class that provides two pieces of functionality;
    backing up the current out-of-office settings and applying new settings.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个特定的应用，我们只想玩弄Outlook的外出设置。因此，我们将编写一个封装类，提供两个功能：备份当前的外出设置和应用新的设置。
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Content Generator
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容生成器
- en: 'Now, to the heart of our project: the Content Generator. We need generate two
    types of content. First, we craft an auto-reply text using GPT-4\. Then, we let
    DALL-E 3 generate an image incorporating elements from the generated text.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进入我们项目的核心：内容生成器。我们需要生成两种类型的内容。首先，我们使用 GPT-4 构建自动回复文本。然后，我们让 DALL-E 3 生成一张结合生成文本元素的图像。
- en: Unfortunately, DALL-E 3 has a [limit on its prompt](https://cookbook.openai.com/articles/what_is_new_with_dalle_3).
    To work around this, we use GPT-4 to craft a concise prompt for DALL-E 3 that
    incorporates aspects extracted from a given text.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，DALL-E 3 对其提示词有一个 [限制](https://cookbook.openai.com/articles/what_is_new_with_dalle_3)。为了解决这个问题，我们使用
    GPT-4 来生成一个简洁的提示词，供 DALL-E 3 使用，且该提示词包含从给定文本中提取的元素。
- en: 'This process requires three distinct calls to the AI models:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程需要三次不同的调用到 AI 模型：
- en: '`generate-text` asks GPT-4 to concoct new text that can be used in an auto-reply
    email.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate-text` 请求 GPT-4 编写新文本，用于自动回复电子邮件。'
- en: '`generate-dall-e-prompt` calls GPT-4, prompting it to come up with a prompt
    designed specifically for DALL-E 3 based on our generated text from the first
    call. This is a bit meta, like writing code to generate code.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate-dall-e-prompt` 调用 GPT-4，促使其基于我们从第一次调用生成的文本，设计一个专门用于 DALL-E 3 的提示词。这有点像写代码来生成代码。'
- en: '`generate-image` asks DALL-E 3 to generate an image that should accompany the
    auto-reply message. Here, we use prompt generated by the `generate-dall-e-prompt`
    call.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate-image` 请求 DALL-E 3 生成一张图像，用于搭配自动回复消息。在这里，我们使用由 `generate-dall-e-prompt`
    调用生成的提示词。'
- en: 'We’ll let AIConfig orchestrate the entire process. For that, it needs a configuration
    file that describes how to achieve our desired result. We create a configuration
    file that contains three named prompts:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将让 AIConfig 来协调整个过程。为此，它需要一个描述如何实现我们期望结果的配置文件。我们创建了一个配置文件，包含三个命名的提示词：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'It is relatively straightforward to read the configuration file, once you understand
    the configuration schema:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你理解了配置架构，读取配置文件相对简单：
- en: '[## AIConfig Specification | AIConfig'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[## AIConfig 规格说明 | AIConfig'
- en: aiconfig files are source-control friendly JSON documents that contain generative
    AI model settings, prompt inputs and outputs, and flexible multi-purpose metadata.
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: aiconfig 文件是源代码控制友好的 JSON 文档，包含生成性 AI 模型设置、提示输入和输出，以及灵活的多用途元数据。
- en: aiconfig.lastmileai.dev](https://aiconfig.lastmileai.dev/docs/overview/ai-config-format?source=post_page-----876d4fb81342--------------------------------)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: aiconfig.lastmileai.dev](https://aiconfig.lastmileai.dev/docs/overview/ai-config-format?source=post_page-----876d4fb81342--------------------------------)
- en: 'Next, we construct a class that exposes two main methods: `generate_message`
    and `generate_image`. Inside these methods, we inject our configuration file into
    AIConfig and let it perform its magic:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们构建一个类，暴露两个主要方法：`generate_message` 和 `generate_image`。在这些方法内部，我们将配置文件注入到
    AIConfig 中，并让它发挥魔力：
- en: '[PRE4]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: File Downloader
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件下载器
- en: 'Just like there are numerous programming language, there are a plethora of
    ways to download a file from the internet with Python. But as a wise engineer
    may say: “Choose the tool as you would choose your programming language, carefully
    and with regard to your project’s requirements”. We’ll roll with the asynchronous
    [aiohttp](https://github.com/aio-libs/aiohttp) library paired with [tqdm](https://github.com/tqdm/tqdm)
    for that satisfying visual feedback of download progress, because why the hell
    not:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 就像有许多编程语言一样，使用 Python 从互联网上下载文件也有多种方式。但正如一位明智的工程师所说：“选择工具就像选择编程语言一样，要谨慎并考虑项目的需求。”我们将使用异步的
    [aiohttp](https://github.com/aio-libs/aiohttp) 库，并搭配 [tqdm](https://github.com/tqdm/tqdm)
    来提供下载进度的视觉反馈，因为，为什么不呢：
- en: '[PRE5]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Image Optimizer
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像优化器
- en: 'We can reduce the file sizes of DALL-E 3 creations significantly by resizing
    and quantizing them. With [Pillow](https://github.com/python-pillow/Pillow), these
    two operations require few lines of code. We wrap these in a class:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过调整大小和量化 DALL-E 3 生成的图像来显著减小文件大小。使用 [Pillow](https://github.com/python-pillow/Pillow)，这两个操作只需要少量代码。我们将它们封装在一个类中：
- en: '[PRE6]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: HTML Creator
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML 创建器
- en: Once we generate some text and pair it with an image, we transform the content
    into a single email artifact. The alternative, using linked images, entails figuring
    out how to host images for our out-of-office emails. Is it worth it? Not for a
    project of this scale.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们生成了一些文本并与图像配对，我们就将内容转化为单一的电子邮件作品。另一种做法是使用链接的图像，这需要弄清楚如何为我们的外出回复电子邮件托管图像。值得吗？对于这个规模的项目来说，不值得。
- en: We can easily sidestep the hassle of image hosting. [MIME](https://en.wikipedia.org/wiki/MIME)
    is a standard that allows us to combine text and images by constructing an HTML-based
    email with the image embedded in the markup.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以轻松避免麻烦的图像托管问题。[MIME](https://en.wikipedia.org/wiki/MIME) 是一个标准，它允许我们通过构建一个嵌入图像的
    HTML 格式电子邮件来结合文本和图像。
- en: 'For the email layout, we create an external file to use as an HTML template.
    No point in hard-coding it, as nobody wants that code smell lingering around.
    This template contains three customizable fields: one for the text and the other
    two fields for the image.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于电子邮件布局，我们创建了一个外部文件作为 HTML 模板来使用。没有必要将其硬编码，因为没有人希望那种代码味道在周围 lingering。该模板包含三个可自定义的字段：一个用于文本，另外两个字段用于图像。
- en: We give the text a touch of HTML styling. Nothing too gaudy, just enough to
    make it have the proper spacing. To encode the image binary into text so it can
    be embedded in the markup, we apply Base64.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为文本添加了一些 HTML 样式。没有太过花哨，只是足够让它有合适的间距。为了将图像二进制数据编码成文本以便嵌入到标记中，我们使用了 Base64
    编码。
- en: 'Here is the code:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: User Interface
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户界面
- en: 'The last missing piece is the user interface. For this, we use [Streamlit](https://github.com/streamlit/streamlit)
    to create a basic web interface as our needs are simple:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个缺失的部分是用户界面。为此，我们使用了[Streamlit](https://github.com/streamlit/streamlit)来创建一个基本的网页界面，因为我们的需求很简单：
- en: A neat list displaying previously crafted digital masterpieces.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个整洁的列表，展示之前制作的数字杰作。
- en: Buttons to cook up a pair of fresh text message and image.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮用于制作一对新的文本消息和图像。
- en: A place to tweak the text message to ironing out any creases.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个地方用于调整文本消息，解决任何小问题。
- en: A button to set out-of-office setting in Outlook programmatically.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个按钮，用于通过编程设置 Outlook 的外出自动回复。
- en: 'The UI makes use of all of our components to deliver the above functionality.
    In the code listing below, I’ve tried to spare you, dear reader, the nitty-gritty
    of the entire code. If you are interested, you are welcome to peruse the full
    implementation on [GitHub](https://github.com/sheikhomar/roll/blob/main/tools/streamlit_ui.py):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 用户界面利用了我们所有的组件来实现上述功能。在下面的代码清单中，我尽力省略了详细的代码，亲爱的读者。如果你感兴趣，可以在[GitHub](https://github.com/sheikhomar/roll/blob/main/tools/streamlit_ui.py)上查阅完整的实现：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Below is a screencast of the user interface. The sidebar on the left is a gallery,
    which displays our past creations. Clicking the edit (✏️) button in the sidebar
    brings the content to the main stage on the right. Here, we can tweak the existing
    message or conjure up a new one, along with its visual counterpart. You can easily
    let the LLM produce texts in other languages, just tweak the prompt in the AIConfig
    file as discussed in the article. The `Set out-of-office` button takes the displayed
    content and sets it as our Outlook out-of-office message.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用户界面的屏幕录制。左侧的侧边栏是一个画廊，展示了我们过去的作品。点击侧边栏中的编辑（✏️）按钮会将内容带到右侧的主界面。在这里，我们可以调整现有的消息，或创造一个新消息，以及它的视觉对应物。你可以轻松地让
    LLM 生成其他语言的文本，只需按文章中讨论的方式调整 AIConfig 文件中的提示。`设置外出消息`按钮会将显示的内容作为我们的 Outlook 外出自动回复消息进行设置。
- en: '![](../Images/e622741baaabb1c6bf3a07fd21bec94d.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e622741baaabb1c6bf3a07fd21bec94d.png)'
- en: A short screencast of the user interface, courtesy of yours truly.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一段简短的用户界面屏幕录制，由我亲自提供。
- en: Time to Wrap Up
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是时候总结了
- en: We went through the process of developing a Python program that creates atypical
    out-of-office emails using GPT-4 and DALL-E 3.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了开发一个 Python 程序的过程，该程序使用 GPT-4 和 DALL-E 3 创建非典型的外出自动回复电子邮件。
- en: Sure, we could slap together a monstrous 1000-line script to achieve our goals
    quickly. But we didn’t. We followed our software engineering principles — ingrained
    into us by years of brainwashing, and eager to do the same for the new generation
    of wide-eyed software engineers.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们可以快速拼凑一个庞大的 1000 行脚本来实现我们的目标。但我们没有。我们遵循了我们的软件工程原则——这些原则通过多年的“洗脑”深深植入我们脑海，并渴望为新一代充满好奇心的软件工程师们做到同样的事。
- en: Instinctively, we recalled that software engineering is more about thoughtful
    design than mere coding. Therefore, we started the undertaking by carefully considering
    how to structure the code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本能地，我们回想起软件工程更多的是关于深思熟虑的设计，而非单纯的编码。因此，我们从仔细考虑如何结构化代码开始了这项工作。
- en: We attempted to organize our code into classes, using descriptive names and
    type hints for clarity. Trying to write as little code as possible, we relied
    on other engineers’ work by using their Python libraries to solve our problems.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尝试将代码组织成类，使用描述性名称和类型提示以提高代码的清晰度。在尽量编写最少代码的同时，我们通过使用其他工程师的Python库来解决问题。
- en: While we’ve set aside the scheduling aspect for a later, unspecified date, we’ve
    laid a solid foundation. Our app can generate whimsical yet professional auto-replies
    with relevant images. On top of that, it allows us to seamlessly integrate the
    emails into Outlook with a single click of a button.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们已将调度方面的工作推迟到一个未来未确定的日期，但我们已经打下了坚实的基础。我们的应用程序可以生成富有创意却又专业的自动回复，并附带相关图片。此外，它还允许我们通过一键操作将邮件无缝地集成到Outlook中。
- en: So, next time you’re away — whether on a holiday, in a full-day workshop, or
    just taking a nap after a hearty lunch — why not let Generative AI generate your
    auto-relies, which may leave your colleagues smiling and, perhaps, wanting more.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，下次你不在时——无论是在度假、全天研讨会中，还是在丰盛午餐后小睡片刻——何不让生成式AI为你生成自动回复，或许这会让你的同事们会心一笑，甚至还想要更多。
- en: '*Thank you for reading. If you fancy more articles like this in the future,
    follow me on Medium or connect on* [*LinkedIn*](https://www.linkedin.com/in/osheikhomar/)*.*'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢阅读。如果你以后喜欢类似的文章，可以在Medium上关注我，或通过* [*LinkedIn*](https://www.linkedin.com/in/osheikhomar/)*与我联系。*'
