- en: Intersect two 3D Rays (Closest Point)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 相交两条3D射线（最近点）
- en: 原文：[https://towardsdatascience.com/3d-ray-intersection-closest-point-dc8c72122224?source=collection_archive---------8-----------------------#2024-02-12](https://towardsdatascience.com/3d-ray-intersection-closest-point-dc8c72122224?source=collection_archive---------8-----------------------#2024-02-12)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/3d-ray-intersection-closest-point-dc8c72122224?source=collection_archive---------8-----------------------#2024-02-12](https://towardsdatascience.com/3d-ray-intersection-closest-point-dc8c72122224?source=collection_archive---------8-----------------------#2024-02-12)
- en: '*Let’s unravel the math behind 3D rays and demonstrate that it’s not significantly
    more challenging than the conventional 2D case.*'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '*让我们解开3D射线背后的数学，展示它其实并不比传统的2D情况更具挑战性。*'
- en: '[](https://medium.com/@thom01.rouch?source=post_page---byline--dc8c72122224--------------------------------)[![Thomas
    Rouch](../Images/a8440bbed59cd8d9cdd752cf1fea2831.png)](https://medium.com/@thom01.rouch?source=post_page---byline--dc8c72122224--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--dc8c72122224--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--dc8c72122224--------------------------------)
    [Thomas Rouch](https://medium.com/@thom01.rouch?source=post_page---byline--dc8c72122224--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@thom01.rouch?source=post_page---byline--dc8c72122224--------------------------------)[![Thomas
    Rouch](../Images/a8440bbed59cd8d9cdd752cf1fea2831.png)](https://medium.com/@thom01.rouch?source=post_page---byline--dc8c72122224--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--dc8c72122224--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--dc8c72122224--------------------------------)
    [Thomas Rouch](https://medium.com/@thom01.rouch?source=post_page---byline--dc8c72122224--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--dc8c72122224--------------------------------)
    ·7 min read·Feb 12, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--dc8c72122224--------------------------------)
    ·7分钟阅读·2024年2月12日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/2e951c331eed729eaafe73a0d22c9723.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2e951c331eed729eaafe73a0d22c9723.png)'
- en: Photo by [Tobias Cornille](https://unsplash.com/@tobiasc?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 摄影：由 [Tobias Cornille](https://unsplash.com/@tobiasc?utm_source=medium&utm_medium=referral)
    拍摄，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 1\. Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 介绍
- en: Motivation
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动机
- en: In fields like computer graphics, autonomous vehicle navigation or augmented
    reality, where immersive experiences are created through the manipulation of 3D
    environments, a deep understanding of ray intersection and triangulation algorithms
    empowers data scientists to craft lifelike simulations and interactive virtual
    worlds.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机图形学、自动驾驶导航或增强现实等领域，通过操控3D环境来创造沉浸式体验，深刻理解射线相交和三角剖分算法，使数据科学家能够制作栩栩如生的模拟和互动虚拟世界。
- en: It also demonstrates that mathematical principles such as pseudo-inverse matrices,
    least squares optimization, Cramer’s rule or triple scalar products aren’t just
    theoretical; they’re practical tools for solving real-world problems!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它还展示了诸如伪逆矩阵、最小二乘法优化、克莱姆法则或三重标量积等数学原理，不仅仅是理论；它们是解决现实世界问题的实际工具！
- en: Ray Definition
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 射线定义
- en: A Ray starts from a given position and extends infinitely in a given direction,
    just like a laser beam or a ray of light.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 射线从给定位置开始，并沿着给定方向无限延伸，就像激光束或光线一样。
- en: Think of a ray as a one-way street with a fixed starting point, while a line
    is like a two-way street that stretches endlessly in both directions.
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 可以把射线看作是单行道，有一个固定的起点，而直线则像一条双向街道，无限延伸。
- en: Mathematically, a ray is defined by its origin `o` and direction `d`. Since
    it’s a 1D space, any point along the ray is parametrized by its positive distance
    (or time) `t` with respect to the origin.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从数学上讲，一条射线由其起点`o`和方向`d`定义。由于射线是1维空间，射线上任意一点可以通过其相对于原点的正距离（或时间）`t`来参数化。
- en: '![](../Images/b203aab18b69d9958f77df43a81e9975.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b203aab18b69d9958f77df43a81e9975.png)'
- en: Ray Intersection
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 射线相交
- en: Finding the intersection of two rays `r1` and `r2` means finding the two parameters
    `t1` and `t2`, respectively on the first and second ray, that result in the exact
    same point in space.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 找到两条射线`r1`和`r2`的交点意味着找到两个参数`t1`和`t2`，分别位于第一条和第二条射线上，使它们在空间中结果为完全相同的点。
- en: '![](../Images/fa6b317505532185f1eb8b32ccdf6611.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fa6b317505532185f1eb8b32ccdf6611.png)'
- en: An interesting point to note is that we haven’t specified the dimension of the
    space in which our ray lives. It could be 2D, like a line drawn on a piece of
    paper, 3D like a laser beam, or even exist in higher dimensions!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的点是，我们并没有指定光线所在空间的维度。它可以是二维的，比如纸上的一条直线，三维的，如激光束，甚至可以存在于更高维度的空间中！
- en: Since we’re looking for the values of `t1` and `t2`, let’s concatenate them
    in a colum vector `x`. It allows us to vectorize this equation into the canonical
    linear system `Ax=b`. For better clarity, there’s an annotation below each term
    indicating the shape of the matrix or vector, with `n` being the dimension of
    the space in which the ray is defined.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们要找的是`t1`和`t2`的值，我们将它们连接成一个列向量`x`。这使我们能够将这个方程向量化成标准的线性系统`Ax=b`。为了更清晰，每个项下方都有注释，指明了矩阵或向量的形状，其中`n`是定义光线的空间维度。
- en: '![](../Images/3c2ddf4a94f00d44736eae162b06d844.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c2ddf4a94f00d44736eae162b06d844.png)'
- en: N.B. The matrix A is built by concatenating side by side the two directions
    as column vectors, with the second one being flipped.
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意：矩阵A是通过将两个方向作为列向量并排连接构建的，第二个方向是反向的。
- en: Solving `Ax=b` gives us `t1` and `t2`. However, if either of these parameters
    is negative, it indicates that the intersection point lies behind one of the ray
    origins, meaning there’s no intersection between both rays.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 解线性方程`Ax=b`可以得到`t1`和`t2`。然而，如果这两个参数中的任何一个是负数，则表示交点位于某个光线的原点之后，意味着两条光线之间没有交点。
- en: '![](../Images/8fb70caa8ddffaa0cae50ec66ecc0fc9.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8fb70caa8ddffaa0cae50ec66ecc0fc9.png)'
- en: Photo by [Mehdi MeSSrro](https://unsplash.com/@messrro?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Mehdi MeSSrro](https://unsplash.com/@messrro?utm_source=medium&utm_medium=referral)拍摄，来自[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 2\. 2D Ray Intersection
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 2D光线相交
- en: Introduction
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引言
- en: The 2D case is the easiest one. Typically, unless they’re exactly parallel,
    two 2D lines will always converge at a unique common point.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 2D情况是最简单的。通常，除非它们完全平行，否则两条二维线总是会在一个唯一的公共点相交。
- en: In the image below, `r1` and `r2` intersect. However, `r3` doesn’t intersect
    any ray because it’s parallel to `r2` and meets `r1` behind its origin.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在下图中，`r1`和`r2`相交。然而，`r3`没有与任何光线相交，因为它与`r2`平行，并且在原点之后与`r1`相交。
- en: '![](../Images/df05979d9169ef6e2dcab4efa40e235f.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/df05979d9169ef6e2dcab4efa40e235f.png)'
- en: 2D Ray intersection — Diagram by the author
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 2D光线相交——图示由作者提供
- en: Solving the linear system
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解线性系统
- en: The linear system of equations `Ax=b` introduced above has `n` equations and
    2 unknowns. Thus, in the 2D case we end up with a system of 2 equations and 2
    unknowns, meaning we just have to invert the matrix `A`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上面介绍的线性方程`Ax=b`有`n`个方程和2个未知数。因此，在二维情况下，我们最终得到的是一个有2个方程和2个未知数的系统，这意味着我们只需要求解矩阵`A`的逆。
- en: '![](../Images/7524335da956aea1d4916fa9e6155511.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7524335da956aea1d4916fa9e6155511.png)'
- en: If the rays are parallel, the matrix `A` won’t be invertible because its two
    columns, `d1` and `-d2`, will be collinear.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果光线是平行的，矩阵`A`将不可逆，因为它的两列，`d1`和`-d2`，是共线的。
- en: If you’re not interesting in `t1` and `t2` and just want to know if there’s
    an intersection, computing the determinant of `A` and comparing it against 0 is
    all you need.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不关心`t1`和`t2`，只想知道是否存在相交，计算矩阵`A`的行列式并将其与0比较就是你所需要的全部。
- en: If you’re not interesting in having both `t1` and `t2`, e.g. if you’re looking
    for the actual 2D position of the intersection point, using Cramer’s rule is a
    smart trick. It expresses the solution using determinants of `A` and modified
    matrices, where one column of `A` is replaced by `b`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不关心同时得到`t1`和`t2`，例如如果你只关心交点的实际二维位置，使用克拉梅法则是一个聪明的技巧。它通过矩阵`A`和修改过的矩阵的行列式来表示解，其中`A`的其中一列被`b`替换。
- en: '![](../Images/f0408dbffe70f7d8077ce6d0bd328742.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f0408dbffe70f7d8077ce6d0bd328742.png)'
- en: Cramer’s rule to identify t1 and t2\. Operator |.| is the determinant. Commas
    separate matrix columns.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 克拉梅法则用于识别`t1`和`t2`。运算符`|.|`表示行列式。逗号用于分隔矩阵列。
- en: '![](../Images/7915c7a151b0da57ffde63bd3b2a1c73.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7915c7a151b0da57ffde63bd3b2a1c73.png)'
- en: Photo by [Vince Fleming](https://unsplash.com/@vincefleming?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Vince Fleming](https://unsplash.com/@vincefleming?utm_source=medium&utm_medium=referral)拍摄，来自[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 3D Ray Intersection
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3D光线相交
- en: Introduction
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 引言
- en: Unlike the 2D case, it’s highly unlikely for two 3D rays to intersect. For instance,
    trying to make two laser pointers held by two different people intersect is very
    challenging.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 与二维情况不同，两个三维射线相交的可能性非常小。例如，试图让两个人手持的激光指示器相交是非常具有挑战性的。
- en: The linear system `Ax=b` ends up having 3 equations for 2 unknowns, making it
    unsolvable unless there’s redundancy within the equations.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 线性系统`Ax=b`最终有3个方程和2个未知数，除非方程中有冗余，否则无法求解。
- en: Least-Squares
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小二乘法
- en: Given the absence of a solution in most cases, the shortest line segment between
    both rays can be viewed as their intersection. Let’s denote `p1` and `p2` as the
    endpoints of this optimal segment, located on `r1` and `r2` respectively.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 由于大多数情况下没有解，两个射线之间的最短线段可以视为它们的交点。我们将`p1`和`p2`分别表示为位于`r1`和`r2`上的这段最优线段的端点。
- en: '![](../Images/4894170beb6c75c51efbae2d6f75a13a.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4894170beb6c75c51efbae2d6f75a13a.png)'
- en: 3D Ray Intersection — Diagram by the author
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 3D射线交点 — 作者图示
- en: Our task now transforms into a least-squares minimization problem. Its formulation
    is straightforward given that `Ax-b` already represents the vector between `p2`
    and `p1`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在的任务转化为一个最小二乘法优化问题。由于`Ax-b`已经表示了`p2`和`p1`之间的向量，所以其公式化非常简单。
- en: '![](../Images/6d39d07af994d5b66dbde274fe1eb9fe.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6d39d07af994d5b66dbde274fe1eb9fe.png)'
- en: It’s a well-known problem. Zeroing the gradient at the optimum gives us the
    solution using the pseudo-inverse matrix, which is a convenient way to build a
    square and thus invertible matrix.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个众所周知的问题。在最优解处将梯度归零可以通过伪逆矩阵得到解，这是构建一个方阵并使其可逆的便捷方法。
- en: '![](../Images/1ced4f49ef7b4ff584077985aa5387e8.png)![](../Images/a6ec95ccf0a2d28401791aef1556ebac.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1ced4f49ef7b4ff584077985aa5387e8.png)![](../Images/a6ec95ccf0a2d28401791aef1556ebac.png)'
- en: Orthogonality
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 正交性
- en: While it appears on the diagram above that the shortest segment is perpendicular
    to both rays, we have yet to formally prove this, even-though it sounds intuitive.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在上面的图示中最短线段似乎垂直于两条射线，但我们还未正式证明这一点，尽管这看起来是直观的。
- en: The zero gradient also implies that the dot product between the segment defined
    by `p1` and `p2` and both ray directions `d1` and `d2` is zero, which proves the
    orthogonality.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 零梯度也意味着由`p1`和`p2`定义的线段与两个射线方向`d1`和`d2`之间的点积为零，从而证明了正交性。
- en: '![](../Images/e2faa09fa96ff1eec553d68ebe4d10a1.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e2faa09fa96ff1eec553d68ebe4d10a1.png)'
- en: Alternative Linear System
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 替代线性系统
- en: The Least-Squares approach works perfectly fine, but we can also introduce a
    third unknown variable to make our linear system solvable.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最小二乘法方法完全有效，但我们也可以引入第三个未知变量，使得我们的线性系统可以求解。
- en: Given that the vectors `d1`, `d2` and `p2-p1` constitute an orthogonal basis,
    we can build an orthogonal frame with `o1` as the origin. The points `p1` and
    `p2` can then be derived by expressing the local coordinates of `o2` with respect
    to this frame.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到向量`d1`、`d2`和`p2-p1`构成了一个正交基，我们可以以`o1`为原点构建一个正交框架。然后，可以通过表达`o2`相对于该框架的局部坐标来推导出点`p1`和`p2`。
- en: Note that the direction of the segment `p2-p1` is given by the cross product
    between both ray directions. We’ll introduce the signed scale δ along this direction
    in the orthogonal basis. The actual distance between the two rays can be obtained
    by multiplying |δ| by the norm of the cross product.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，线段`p2-p1`的方向由两个射线方向的叉积给出。我们将在该方向上引入带符号的比例δ，并且在正交基中使用该比例。两条射线之间的实际距离可以通过将|δ|与叉积的范数相乘得到。
- en: '![](../Images/aa98e49dbef95149487fb995fd4046b9.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aa98e49dbef95149487fb995fd4046b9.png)'
- en: t1, δ and t2 can then be retrieved using a linear system of equations.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: t1、δ和t2可以通过线性方程组求解。
- en: '![](../Images/4d7b7ddccdaff497a2b02f78cd18d4aa.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d7b7ddccdaff497a2b02f78cd18d4aa.png)'
- en: The determinant of a 3x3 matrix can be derived via the scalar triple product,
    which involves the dot product of one column with the cross product of the other
    two.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 3x3矩阵的行列式可以通过标量三重积来推导，标量三重积涉及一个列向量与其他两个列向量的叉积的点积。
- en: '![](../Images/b20e72c430c427bae012dfff6fa8e9bc.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b20e72c430c427bae012dfff6fa8e9bc.png)'
- en: In our case, simplifying the determinant equation is straightforward as the
    second column is already a cross product. Note that inserting the cross product
    as the final column would have resulted in the negation of the norm instead.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，简化行列式方程是直接的，因为第二列已经是叉积。请注意，将叉积插入为最后一列将导致范数的否定。
- en: '![](../Images/8fe3951f383fdbfd31267ff4acd218a9.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8fe3951f383fdbfd31267ff4acd218a9.png)'
- en: Solving with Cramer’s rule gives us the optimal `t1` and `t2` , but also the
    signed scale δ.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用克拉默法则求解可以得到最优的`t1`和`t2`，还可以得到带符号的尺度δ。
- en: '![](../Images/01a30c132c755c622503cb50496ebbe2.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/01a30c132c755c622503cb50496ebbe2.png)'
- en: If you love clean equations, you can re-order and swap columns to remove minus
    signs and make it look better!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢简洁的方程式，可以重新排列和交换列，去除负号，使其看起来更整洁！
- en: '![](../Images/168bcd7adb3da59d325b4d21709a8d84.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/168bcd7adb3da59d325b4d21709a8d84.png)'
- en: Intersection Point
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 交点
- en: The intersection point can be defined as the middle of the shortest segment,
    i.e. `0.5(p1+p2)`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 交点可以定义为最短线段的中点，即`0.5(p1+p2)`。
- en: Distance between rays
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 射线之间的距离
- en: As said previously, the signed scale δ must be multiplied by the norm of the
    cross product of both rays to retrieve the true distance between the rays.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，带符号的尺度δ必须乘以两个射线叉积的模长，才能获得射线之间的真实距离。
- en: '![](../Images/89088b762943928dfe2be9d4f8d8b6c1.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/89088b762943928dfe2be9d4f8d8b6c1.png)'
- en: Conclusion
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: I hope you enjoyed reading this article and that it gave you more insights on
    how to intersect 2D or 3D rays!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢阅读这篇文章，并且它能为你提供更多关于如何求交2D或3D射线的洞见！
