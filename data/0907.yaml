- en: Generate “Verified” Python Code Using AutoGen Conversable Agents
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AutoGen可交互代理生成“验证过的”Python代码
- en: 原文：[https://towardsdatascience.com/generate-verified-python-code-using-autogen-conversable-agents-2102b4f706ba?source=collection_archive---------9-----------------------#2024-04-09](https://towardsdatascience.com/generate-verified-python-code-using-autogen-conversable-agents-2102b4f706ba?source=collection_archive---------9-----------------------#2024-04-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/generate-verified-python-code-using-autogen-conversable-agents-2102b4f706ba?source=collection_archive---------9-----------------------#2024-04-09](https://towardsdatascience.com/generate-verified-python-code-using-autogen-conversable-agents-2102b4f706ba?source=collection_archive---------9-----------------------#2024-04-09)
- en: Leverage multi-agentic workflows for code testing and debugging
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用多代理工作流进行代码测试和调试
- en: '[](https://medium.com/@shahzebnaveed?source=post_page---byline--2102b4f706ba--------------------------------)[![Shahzeb
    Naveed](../Images/cdf5a3f205eac63306d1f8384fa634ab.png)](https://medium.com/@shahzebnaveed?source=post_page---byline--2102b4f706ba--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--2102b4f706ba--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--2102b4f706ba--------------------------------)
    [Shahzeb Naveed](https://medium.com/@shahzebnaveed?source=post_page---byline--2102b4f706ba--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@shahzebnaveed?source=post_page---byline--2102b4f706ba--------------------------------)[![Shahzeb
    Naveed](../Images/cdf5a3f205eac63306d1f8384fa634ab.png)](https://medium.com/@shahzebnaveed?source=post_page---byline--2102b4f706ba--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--2102b4f706ba--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--2102b4f706ba--------------------------------)
    [Shahzeb Naveed](https://medium.com/@shahzebnaveed?source=post_page---byline--2102b4f706ba--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--2102b4f706ba--------------------------------)
    ·8 min read·Apr 9, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--2102b4f706ba--------------------------------)
    ·阅读时长：8分钟·2024年4月9日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/743dc56e1a6501a8f27b1ed2ffcf407f.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/743dc56e1a6501a8f27b1ed2ffcf407f.png)'
- en: '“Two AI bots solving an Error” —Source: Adobe Firefly (Image generated by author)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: “两个AI机器人解决一个错误” — 来源：Adobe Firefly（图片由作者生成）
- en: It’s April 2024 and it’s been about 17 months since we’ve been using LLMs like
    ChatGPT to aid us in code generation and debugging tasks. While it has added a
    great level of productivity, there are indeed times when the code generated is
    full of bugs and makes us take the good ole StackOverflow route.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是2024年4月，自从我们开始使用像ChatGPT这样的LLM来辅助代码生成和调试任务，已经过去了大约17个月。虽然这极大提高了生产力，但确实有时候生成的代码充满了错误，让我们不得不走老路——StackOverflow。
- en: In this article, I’ll give a quick demonstration on how we can address this
    lack of “verification” using Conversable Agents offered by AutoGen.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将简要演示如何使用AutoGen提供的可交互代理来解决缺乏“验证”的问题。
- en: 'Full AutoGen Course: [https://www.youtube.com/playlist?list=PLlHeJrpDA0jXy_zgfzt2aUvQu3_VS5Yx_](https://www.youtube.com/playlist?list=PLlHeJrpDA0jXy_zgfzt2aUvQu3_VS5Yx_)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的AutoGen课程：[https://www.youtube.com/playlist?list=PLlHeJrpDA0jXy_zgfzt2aUvQu3_VS5Yx_](https://www.youtube.com/playlist?list=PLlHeJrpDA0jXy_zgfzt2aUvQu3_VS5Yx_)
- en: '**What is AutoGen?**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是AutoGen？**'
- en: “AutoGen is a framework that enables the development of LLM applications using
    multiple agents that can converse with each other to solve tasks.”
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “AutoGen是一个框架，能够使用多个能够相互对话的代理来开发LLM应用，以解决任务。”
- en: '**Presenting LeetCode Problem Solver:**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**展示LeetCode问题求解器：**'
- en: 'Start with quietly installing autogen:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从静默安装autogen开始：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'I’m using Google Colab so I entered by OPENAI_API_KEY in the Secrets tab, and
    securely loaded it along with other modules:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用Google Colab，因此我在Secrets标签页中输入了我的OPENAI_API_KEY，并与其他模块一起安全加载
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I’m using `gpt-3.5-turbo` only because it’s cheaper than `gpt4`. If you can
    afford more expensive experimentation and/or you’re doing things more “seriously”,
    you should obviously use a stronger model.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我只使用`gpt-3.5-turbo`，因为它比`gpt4`便宜。如果你能够承担更昂贵的实验，或者你做的是更“严肃”的事情，显然应该使用更强的模型。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, I’ll copy the problem statement from my favourite LeetCode problem [*Two
    Sum*](https://leetcode.com/problems/two-sum/description/)*.* It’s one of the most
    commonly asked questions in leetcode-style interviews and covers basic concepts
    like caching using hashmaps and basic equation manipulation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将从我最喜欢的LeetCode问题[*Two Sum*](https://leetcode.com/problems/two-sum/description/)中复制问题陈述。它是Leetcode风格面试中最常见的题目之一，涵盖了诸如使用哈希映射进行缓存和基本方程式处理等基本概念。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can now define both of our agents. One agent acts as the “assistant” agent
    that suggests the solution and the other serves as a proxy to us, the user and
    is also responsible for executing the suggested Python code.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以定义我们的两个代理。一个代理充当“助手”代理，提供解决方案，另一个代理充当我们（用户）的代理，并负责执行建议的 Python 代码。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I set the `human_input_mode` to “NEVER” because I’m not planning to give any
    inputs myself and `max_consecutive_auto_reply` to 4 to limit the back-and-forth
    turns in the conversation. The Assistant agent has been instructed to respond
    with the word “TERMINATE” that tells the UserProxyAgent when to conclude the conversation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我将 `human_input_mode` 设置为“NEVER”，因为我不打算自己提供任何输入，并将 `max_consecutive_auto_reply`
    设置为 4，以限制对话中的来回轮次。助手代理已被指示以“TERMINATE”响应，告知用户代理何时结束对话。
- en: Now, the fun time! We’ll initiate the conversation by sending a message from
    our UserProxyAgent to our Assistant.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进入有趣的部分！我们将通过从用户代理发送消息给助手来启动对话。
- en: One added benefit of using AutoGen (even for non-agentic workflows) is that
    it provides explicit caching capability to help you save API costs during development.
    Here, I’m caching responses on the disk but you can also integrate redis for this
    purpose.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AutoGen 的一个额外好处（即使是非代理工作流）是它提供了显式的缓存功能，帮助你在开发过程中节省 API 成本。在这里，我将响应缓存到磁盘，但你也可以为此集成
    redis。
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Output:**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE6]python'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE6]python'
- en: 'filename: two_sum.py'
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '文件名: two_sum.py'
- en: 'def two_sum(nums, target):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 'def two_sum(nums, target):'
- en: num_dict = {}
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: num_dict = {}
- en: 'for i, num in enumerate(nums):'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for i, num in enumerate(nums):'
- en: complement = target - num
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: complement = target - num
- en: 'if complement in num_dict:'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 complement 在 num_dict 中：
- en: return [num_dict[complement], i]
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return [num_dict[complement], i]
- en: num_dict[num] = i
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: num_dict[num] = i
- en: Test the function with the given examples
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用给定示例测试函数
- en: nums1 = [2, 7, 11, 15]
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: nums1 = [2, 7, 11, 15]
- en: target1 = 9
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: target1 = 9
- en: 'print(two_sum(nums1, target1))  # Output: [0, 1]'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(two_sum(nums1, target1))  # 输出: [0, 1]'
- en: nums2 = [3, 2, 4]
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: nums2 = [3, 2, 4]
- en: target2 = 6
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: target2 = 6
- en: 'print(two_sum(nums2, target2))  # Output: [1, 2]'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(two_sum(nums2, target2))  # 输出: [1, 2]'
- en: nums3 = [3, 3]
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: nums3 = [3, 3]
- en: target3 = 6
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: target3 = 6
- en: 'print(two_sum(nums3, target3))  # Output: [0, 1]'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(two_sum(nums3, target3))  # 输出: [0, 1]'
- en: '[PRE7]python'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7]python'
- en: 'filename: two_sum.py'
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '文件名: two_sum.py'
- en: import time
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: import time
- en: 'def two_sum(nums, target):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 'def two_sum(nums, target):'
- en: num_dict = {}
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: num_dict = {}
- en: 'for i, num in enumerate(nums):'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for i, num in enumerate(nums):'
- en: complement = target - num
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: complement = target - num
- en: 'if complement in num_dict:'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果 complement 在 num_dict 中：
- en: return [num_dict[complement], i]
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return [num_dict[complement], i]
- en: num_dict[num] = i
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: num_dict[num] = i
- en: Test the function with the given examples and measure the total run-time
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用给定示例测试函数并测量总运行时间
- en: nums1 = [2, 7, 11, 15]
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: nums1 = [2, 7, 11, 15]
- en: target1 = 9
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: target1 = 9
- en: start_time = time.time()
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: start_time = time.time()
- en: 'print(two_sum(nums1, target1))  # Output: [0, 1]'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(two_sum(nums1, target1))  # 输出: [0, 1]'
- en: end_time = time.time()
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: end_time = time.time()
- en: print("Total run-time:", (end_time - start_time) * 1000, "ms")
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: print("总运行时间:", (end_time - start_time) * 1000, "毫秒")
- en: nums2 = [3, 2, 4]
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: nums2 = [3, 2, 4]
- en: target2 = 6
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: target2 = 6
- en: start_time = time.time()
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: start_time = time.time()
- en: 'print(two_sum(nums2, target2))  # Output: [1, 2]'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(two_sum(nums2, target2))  # 输出: [1, 2]'
- en: end_time = time.time()
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: end_time = time.time()
- en: print("Total run-time:", (end_time - start_time) * 1000, "ms")
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: print("总运行时间:", (end_time - start_time) * 1000, "毫秒")
- en: nums3 = [3, 3]
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: nums3 = [3, 3]
- en: target3 = 6
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: target3 = 6
- en: start_time = time.time()
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: start_time = time.time()
- en: 'print(two_sum(nums3, target3))  # Output: [0, 1]'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(two_sum(nums3, target3))  # 输出: [0, 1]'
- en: end_time = time.time()
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: end_time = time.time()
- en: print("Total run-time:", (end_time - start_time) * 1000, "ms")
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: print("总运行时间:", (end_time - start_time) * 1000, "毫秒")
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is what’s happening here:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是这里发生的事情：
- en: The UserProxyAgent asks the Assistant to solve the problem based on the task
    description.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户代理要求助手根据任务描述解决问题。
- en: The Assistant suggests a solution with a Python block
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 助手建议了一个带有 Python 代码块的解决方案
- en: The UserProxyAgent executes the python code.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户代理执行 Python 代码。
- en: The Assistant reads the console output and responds back with a modified solution
    (with time measurement functionality. Honestly, I would’ve expected this modified
    solution right away but this behavior can be tuned through prompt engineering
    or by employing a stronger LLM).
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 助手读取控制台输出并返回修改后的解决方案（包含时间测量功能。老实说，我本来希望立即得到这个修改后的解决方案，但这种行为可以通过提示工程或采用更强的 LLM
    来调整）。
- en: With AutoGen, you can also display the cost of the agentic workflow.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AutoGen，你还可以显示代理工作流的成本。
- en: '[PRE9]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Concluding Remarks:**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**总结：**'
- en: 'Thus, by using AutoGen’s conversable agents:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过使用 AutoGen 的可交互代理：
- en: We automatically verified that the Python code suggested by the LLM actually
    works.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们自动验证了 LLM 提议的 Python 代码实际上是可行的。
- en: And created a framework by which the LLM can further respond to syntax or logical
    errors by reading the output in the console.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并创建了一个框架，通过该框架，LLM 可以通过读取控制台中的输出进一步响应语法或逻辑错误。
- en: '*Thanks for reading! Please follow me and subscribe to be the first when I
    post a new article! :)*'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢阅读！请关注我并订阅，以便我发布新文章时您可以第一时间看到！ :)*'
- en: '*Check out my other articles:*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*查看我的其他文章：*'
- en: '[*A Deep Dive into Evaluation in Azure Prompt Flow*](https://medium.com/thedeephub/a-deep-dive-into-evaluation-in-azure-prompt-flow-dd898ebb158c)'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[*深入探讨 Azure Prompt Flow 中的评估*](https://medium.com/thedeephub/a-deep-dive-into-evaluation-in-azure-prompt-flow-dd898ebb158c)'
- en: '[*Develop a UI for Azure Prompt Flow with Streamlit*](https://medium.com/thedeephub/develop-a-ui-for-azure-prompt-flow-with-streamlit-f425342029ce)'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[*使用 Streamlit 为 Azure Prompt Flow 开发 UI*](https://medium.com/thedeephub/develop-a-ui-for-azure-prompt-flow-with-streamlit-f425342029ce)'
- en: '[*Build a custom Chatbot using Hugging Face Chat UI and Cosmos DB on Azure
    Kubernetes Service*](https://medium.com/thedeephub/build-a-custom-chatbot-using-hugging-face-chat-ui-and-cosmos-db-on-azure-kubernetes-service-0e391c00cd78)'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[*在 Azure Kubernetes 服务上使用 Hugging Face Chat UI 和 Cosmos DB 构建自定义聊天机器人*](https://medium.com/thedeephub/build-a-custom-chatbot-using-hugging-face-chat-ui-and-cosmos-db-on-azure-kubernetes-service-0e391c00cd78)'
- en: '[*Deploy Hugging Face Text Generation Inference on Azure Container Instance*](https://medium.com/thedeephub/deploy-hugging-face-text-generation-inference-on-azure-container-instance-3709eb3d3187)'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[*在 Azure 容器实例上部署 Hugging Face 文本生成推理*](https://medium.com/thedeephub/deploy-hugging-face-text-generation-inference-on-azure-container-instance-3709eb3d3187)'
