- en: 'Coding in Cipher: Encrypted Data Structures and Algorithms'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在密码中编程：加密数据结构和算法
- en: 原文：[https://towardsdatascience.com/coding-in-cipher-encrypted-data-structures-and-algorithms-dd99e584a655?source=collection_archive---------11-----------------------#2024-05-09](https://towardsdatascience.com/coding-in-cipher-encrypted-data-structures-and-algorithms-dd99e584a655?source=collection_archive---------11-----------------------#2024-05-09)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/coding-in-cipher-encrypted-data-structures-and-algorithms-dd99e584a655?source=collection_archive---------11-----------------------#2024-05-09](https://towardsdatascience.com/coding-in-cipher-encrypted-data-structures-and-algorithms-dd99e584a655?source=collection_archive---------11-----------------------#2024-05-09)
- en: '![](../Images/6a8a6b11fead440f4da38081f96c99fe.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a8a6b11fead440f4da38081f96c99fe.png)'
- en: Image created by the author using Pixlr.com
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者使用 Pixlr.com 创建
- en: Welcome, developers! If you’ve spent time mastering data structures and algorithms,
    have you considered their encrypted data potential?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 欢迎，开发者们！如果你已经花时间掌握了数据结构和算法，是否考虑过它们在加密数据领域的潜力？
- en: '[](https://alextmn1.medium.com/?source=post_page---byline--dd99e584a655--------------------------------)[![Alex
    Shpurov](../Images/e563c8a09a4efe41dabc827b150b3dcb.png)](https://alextmn1.medium.com/?source=post_page---byline--dd99e584a655--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--dd99e584a655--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--dd99e584a655--------------------------------)
    [Alex Shpurov](https://alextmn1.medium.com/?source=post_page---byline--dd99e584a655--------------------------------)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://alextmn1.medium.com/?source=post_page---byline--dd99e584a655--------------------------------)[![Alex
    Shpurov](../Images/e563c8a09a4efe41dabc827b150b3dcb.png)](https://alextmn1.medium.com/?source=post_page---byline--dd99e584a655--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--dd99e584a655--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--dd99e584a655--------------------------------)
    [Alex Shpurov](https://alextmn1.medium.com/?source=post_page---byline--dd99e584a655--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--dd99e584a655--------------------------------)
    ·12 min read·May 9, 2024
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--dd99e584a655--------------------------------)
    ·12分钟阅读·2024年5月9日
- en: --
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Introducing the world of Fully Homomorphic Encryption (FHE), a groundbreaking
    approach that allows for computations on encrypted data without ever needing to
    decrypt it. This means you can perform operations on data while maintaining complete
    privacy. This employs post-quantum cryptographic methods, allowing encrypted data
    to remain secure on public networks such as clouds or blockchains.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍完全同态加密（FHE）的世界，这是一种革命性的技术，它允许对加密数据进行计算，而无需解密。这意味着你可以在保持完全隐私的同时，对数据执行操作。它采用后量子加密方法，使得加密数据在公共网络（如云计算或区块链）上依然安全。
- en: In this series of articles, we explore how traditional data structures and algorithms,
    like binary search trees, sorting algorithms, and even dynamic programming techniques,
    can be implemented in an encrypted domain using FHE. Imagine performing a binary
    search on a dataset that remains entirely encrypted, or sorting data that is not
    visible in its raw form, all while ensuring that the privacy and security of the
    data are never compromised.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一系列文章中，我们探讨了如何在加密领域中使用完全同态加密（FHE）实现传统数据结构和算法，如二叉搜索树、排序算法，甚至是动态规划技术。想象一下，在一个完全加密的数据集上执行二叉搜索，或在数据以原始形式无法见到的情况下进行排序，同时确保数据的隐私和安全性始终得到保障。
- en: We’ll dive into how FHE works at a fundamental level and the implications it
    has for both data security and algorithm design. Later in this series we’ll also
    explore real-world applications and the potential challenges developers face when
    implementing these encrypted algorithms, such as fraud detection, payments, and
    more. This isn’t just about enhancing security; it’s about rethinking how we interact
    with data and pushing the boundaries of what’s possible in software development.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将深入探讨 FHE 的基本原理及其对数据安全和算法设计的影响。在本系列的后续文章中，我们还将探索实际应用及开发人员在实现这些加密算法时面临的潜在挑战，例如欺诈检测、支付等。这不仅仅是提升安全性；它是关于重新思考我们如何与数据互动，并推动软件开发中可能性的边界。
- en: Whether you’re a seasoned developer or new to the concept of encrypted computing,
    this article will provide you with insights into how you can integrate advanced
    cryptographic techniques into your programming projects. Let’s embark on this
    journey together and unlock the potential of coding in cipher, transforming everyday
    data operations into secure, privacy-preserving computations that pave the way
    for a new era of secure digital innovation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是经验丰富的开发者还是刚接触加密计算概念的新人，本文将为你提供如何将先进的加密技术融入你的编程项目的见解。让我们一起开始这段旅程，解锁加密编程的潜力，将日常数据操作转变为安全、隐私保护的计算，为数字创新的新纪元铺平道路。
- en: Fully Homomorphic Encryption Basics
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完全同态加密基础
- en: 'The two primary types of operations that can be performed on ciphertexts in
    FHE are addition and multiplication, though these serve as building blocks for
    more complex operations. For instance, you can add two encrypted values, and the
    result, when decrypted, will be the sum of the original plaintext values. Complex
    computations can be constructed using combinations of these basic operations,
    allowing for algorithms and functions to be executed on encrypted data. For example,
    we have a function F that takes two input values *x* and *y* and computes *x +
    x * y.* A mathematical representation of this function is written as F*(x, y)
    = x + x * y*, which can also be represented as a circuit, which is in other words,
    a direct acyclic graph:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 FHE 中，可以对密文执行的两种主要操作是加法和乘法，尽管这些操作只是更复杂操作的构建模块。例如，你可以对两个加密值进行加法运算，结果解密后将是原始明文值的和。复杂的计算可以通过这些基本操作的组合来构建，从而在加密数据上执行算法和函数。例如，我们有一个函数
    F，它接受两个输入值 *x* 和 *y*，并计算 *x + x * y*。这个函数的数学表示是 F*(x, y) = x + x * y*，也可以表示为一个电路，换句话说，就是一个有向无环图：
- en: '![](../Images/4a95c4f70c5e9626bcc574ba4e89b68e.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a95c4f70c5e9626bcc574ba4e89b68e.png)'
- en: FHE Circuit, *x + x * y*
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: FHE 电路，*x + x * y*
- en: Noise
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 噪声
- en: While FHE allows computations on encrypted data, it comes with the added challenge
    of noise growth within ciphertexts, which can eventually lead to decryption errors
    if not properly managed. In FHE schemes, every ciphertext includes some amount
    of noise that ensures security. This noise is small initially but grows as more
    operations are performed on the ciphertext. When performing an addition operation,
    the noise is relatively small, however, when multiplying, the noise from each
    of the two ciphertexts multiplies together in the product. This in turn results
    in a much higher noise level. Specifically, if you multiply two ciphertexts with
    noise levels n1 and n2, the noise in the resulting ciphertext can be approximated
    as n1 * n2, or a function growing much faster than either n1 or n2 alone.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 FHE 允许在加密数据上进行计算，但它面临着密文噪声增长的挑战，如果不加以正确管理，最终可能导致解密错误。在 FHE 方案中，每个密文都包含一定量的噪声以确保安全性。这个噪声最初很小，但随着对密文进行更多操作，噪声会不断增长。当执行加法操作时，噪声相对较小；然而，当进行乘法操作时，两个密文的噪声会在乘积中相乘，从而导致噪声水平大幅上升。具体来说，如果你将噪声水平为
    n1 和 n2 的两个密文相乘，结果密文的噪声水平大致为 n1 * n2，或者是一个增长速度远快于 n1 或 n2 的函数。
- en: '![](../Images/edf855e202d53f71d76c62e9ad037cce.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/edf855e202d53f71d76c62e9ad037cce.png)'
- en: noise in FHE
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: FHE 中的噪声
- en: There are a few ways to mange the noise in FHE schemas, but for the sake of
    article length, the main focus is on the noise reduction technique called *bootstrapping*.
    Bootstrapping reduces the noise level of a ciphertext, thus restoring the noise
    budget and allowing more computations. Essentially, bootstrapping applies the
    decryption and re-encryption algorithms homomorphically. This requires evaluating
    the entire decryption circuit of the FHE scheme as an encrypted function. The
    output is a new ciphertext that represents the same plaintext as before but with
    reduced noise. Bootstrapping is a critical technique in FHE that allows for essentially
    unlimited computations on encrypted data.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以管理 FHE 方案中的噪声，但为了节省篇幅，本文的重点将放在一种称为 *引导* 的噪声减少技术上。引导技术通过减少密文的噪声水平，恢复噪声预算，从而允许更多的计算。实际上，引导通过同态地应用解密和重新加密算法。这需要将
    FHE 方案的整个解密电路作为加密函数进行评估。输出将是一个新的密文，代表与之前相同的明文，但噪声被降低了。引导是 FHE 中一种至关重要的技术，它使得在加密数据上进行几乎无限的计算成为可能。
- en: From Theory to Practice
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从理论到实践
- en: 'To make your very first steps in exploring FHE, you may delve into the premade
    circuits in the open source IDE found at [fhe-studio.com](http://fhe-studio.com),
    which is based on the [Concrete FHE library](https://docs.zama.ai/concrete). Concrete’s
    FHE schema (a variation of the TFHE schema) is binary based, so each bit is individually
    encrypted. The implementation automatically selects bits per integer using the
    developer’s example. Concrete also allows for automatic noise management, greatly
    reducing complexity and increasing accessibility for novice users. Let’s look
    into a simple [circuit that adds 2 numbers](https://fhe-studio.com/fhe-editor?id=65201a737b2b7b6f13517593):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了探索 FHE 的第一步，你可以深入了解开源 IDE 中的预制电路，该 IDE 位于 [fhe-studio.com](http://fhe-studio.com)，并基于
    [Concrete FHE 库](https://docs.zama.ai/concrete)。Concrete 的 FHE 模式（TFHE 模式的变体）是基于二进制的，因此每个比特都是单独加密的。该实现会根据开发者的示例自动选择每个整数的比特。Concrete
    还支持自动噪声管理，极大地降低了复杂性并提高了初学者的可访问性。我们来看一个简单的 [加法电路](https://fhe-studio.com/fhe-editor?id=65201a737b2b7b6f13517593)：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The compiler then compiles the circuit into a format called MLIR, which is
    visible to the user after compilation is complete:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器随后将电路编译为一种名为 MLIR 的格式，编译完成后用户可以看到该格式：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Once the circuit is compiled, you can add it into your *FHE Vault* and you can
    share your circuit for others to perform the same encrypted computations.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦电路编译完成，你可以将其添加到你的 *FHE Vault* 中，并可以与他人共享你的电路，以便他们执行相同的加密计算。
- en: '![](../Images/fd1c2ce5ca43be324a34cc11a8fc91a7.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd1c2ce5ca43be324a34cc11a8fc91a7.png)'
- en: Encrypted Computations in the FHE Studio Cloud Vault
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: FHE Studio 云保管库中的加密计算
- en: FHE Operations
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FHE 操作
- en: 'The FHE schema used in the IDE natively supports the following operations:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: IDE 中使用的 FHE 模式原生支持以下操作：
- en: 1\. Addition
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 加法
- en: 2\. Multiplication
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 乘法
- en: 3\. Extract a bit (since every bit is encrypted individually)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 提取比特（因为每个比特都是单独加密的）
- en: 4\. Table lookup
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 表查找
- en: 'The first three are pretty straightforward, however, the last one requires
    some attention. Let’s look at the example below:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个比较直观，然而最后一个需要一些关注。我们来看下面的示例：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It acts as a regular table — if x=0, then f = 2 and same for the rest: f(1)
    = -1; f(2) = 3; f(3) = 0.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它充当一个普通的表——如果 x=0，则 f = 2，其它情况同理：f(1) = -1；f(2) = 3；f(3) = 0。
- en: Table Lookups are very flexible. All operations except addition, subtraction,
    multiplication with non-encrypted values, tensor manipulation operations, and
    a few operations built with primitive operations (e.g. matmul, conv) are converted
    to Table Lookups under the hood. They allow *Concrete* to support many operations,
    but they are expensive. The exact cost depends on many variables (hardware used,
    error probability, etc.), but they are always much more expensive compared to
    other operations. You should try to avoid them as much as possible. While it’s
    not always possible to avoid them completely, you should try to reduce the total
    number of table lookups, instead replacing some of them with other primitive operations.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 表查找非常灵活。除了加法、减法、与未加密值的乘法、张量操作以及一些基于原始操作（例如 matmul、conv）构建的操作外，所有其他操作都在后台转换为表查找。它们使得
    *Concrete* 支持许多操作，但代价较高。具体的成本取决于许多变量（硬件使用、错误概率等），但与其他操作相比，它们总是要贵得多。你应该尽量避免使用表查找。虽然不总是能完全避免它们，但你应该尽量减少表查找的总数量，尝试用其他原始操作替代其中一些。
- en: IF Operator / Branching
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IF 操作符 / 分支
- en: 'The IF operator is not native to FHE, and it needs to be used in an arithmetical
    way. Let’s look at the following example:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: IF 操作符在 FHE 中不是原生支持的，需要以算术方式使用。我们来看一个以下的示例：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In FHE, we will have to take care of all the branching because it is not possible
    to directly see the data, so the code becomes the sum of two expressions where
    one is 0 , and the other is 1:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 FHE 中，我们必须处理所有的分支，因为无法直接查看数据，因此代码变成了两个表达式的和，其中一个是 0，另一个是 1：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Recall, that *a > 0* is not a native in FHE. The most simple implementation
    is to use a lookup table . Let’s assume that the positive variable *a* is 2 bit,
    then a> 0 for all the (4) outcomes, except when a equals 0\. We can build a table
    for all the outcomes of the two bits of a: {0,1,1,1} . Then the circuit will look
    like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，*a > 0* 在 FHE 中不是原生支持的。最简单的实现方式是使用查找表。假设正变量 *a* 是 2 比特，则对于所有 (4) 种结果，除了当
    a 等于 0 时，a > 0。我们可以为 a 的两个比特的所有结果构建一个表：{0,1,1,1}。然后电路将如下所示：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It is important to note that, if *a* becomes larger than 2 bits, the size of
    the corresponding lookup table grows very fast, resulting in an increase in size
    of the evaluating key for the circuit. In Concrete FHE implementation this approach
    is a default functionality for the comparison operator. For example, [this circuit](https://fhe-studio.com/fhe-editor?id=65206121ff956a2c8e3a1d65):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，如果*a*变得大于2位，相应的查找表的大小会迅速增长，导致电路的评估密钥大小增加。在具体的FHE实现中，这种方法是比较操作符的默认功能。例如，[这个电路](https://fhe-studio.com/fhe-editor?id=65206121ff956a2c8e3a1d65)：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Upon compiling and inspecting the MLIR (compiled circuit), we can observe the
    produced lookup table.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译并检查MLIR（已编译电路）时，我们可以观察到生成的查找表。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Comparing two number using carry
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用进位比较两个数字
- en: The method of comparing two binary numbers by using subtraction to determine
    which one is greater can be efficiently done in FHE using simple arithmetic. Binary
    comparison by subtraction leverages the properties of binary arithmetic. The core
    idea is that subtracting one number from another reveals information about their
    relative sizes based on the result and certain flags (like the carry flag in processors)
    set during the operation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用减法比较两个二进制数来确定哪个更大的方法，可以通过简单的算术运算在FHE中高效实现。通过减法进行二进制比较利用了二进制算术的性质。核心思想是，从一个数字中减去另一个数字，可以通过结果和操作过程中设置的某些标志（如处理器中的进位标志）揭示它们的相对大小。
- en: In binary subtraction, if A is greater than or equal to B, the result is non-negative.
    If B is greater, the result is negative, causing the carry flag to be 1.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在二进制减法中，如果A大于或等于B，则结果为非负。如果B较大，结果为负，导致进位标志为1。
- en: '![](../Images/32f46ed6b9d04989213d6841f3de3bc3.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/32f46ed6b9d04989213d6841f3de3bc3.png)'
- en: if A>B then the carry flag is set to be 1
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果A>B，则进位标志设置为1
- en: This is means, if A>B, then carry=1, and 0 otherwise. We have to compute the
    carry bit form right to left and the last carry is the final result. To speed
    up FHE calculation we could compute 1+ A - B for each bit to make it positive.
    This example needs only 2 bits to hold the residual. Then we left shift (<<) the
    carry bit by 2 positions and add the residual. The total number of all outcomes
    will be 8, which we can use together with the lookup table to output the next
    carry bit, [like in this circuit](https://fhe-studio.com/fhe-editor?id=65ade87ae3b6f89b1e412fef).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，如果A>B，则进位=1，否则为0。我们需要从右到左计算进位位，最后的进位是最终结果。为了加速FHE计算，我们可以为每一位计算1 + A - B，使其变为正数。这个示例只需要2位来保存残余。然后，我们将进位位左移（<<）2位，并加上残余。所有结果的总数为8，我们可以将其与查找表一起使用，以输出下一个进位位，[就像在这个电路中](https://fhe-studio.com/fhe-editor?id=65ade87ae3b6f89b1e412fef)。
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This method is far more computationally expensive than just using a lookup table,
    like in the example before this one. However, the memory complexity is far less
    here, because the lookup table holds only 8 values, resulting in smaller evaluation
    keys. And yes, as usual, nothing is perfect, as there is a trade off between memory
    usage vs CPU usage and key sizes, depending on the method you select.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法在计算上比仅使用查找表要昂贵得多，就像之前的示例。然而，这里的内存复杂度要低得多，因为查找表仅包含8个值，从而导致评估密钥更小。是的，像往常一样，没有什么是完美的，因为在选择方法时，内存使用、CPU使用和密钥大小之间存在权衡。
- en: Sorting
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序
- en: '[Let’s look at the Bubble Sort](https://fhe-studio.com/fhe-editor?id=6639782cf9ed036703c04500),
    which is a simple comparison-based sorting algorithm that repeatedly steps through
    the list to be sorted, compares each pair of adjacent items, and swaps them if
    they are in the wrong order. The algorithm gets its name because smaller elements
    “bubble” to the top of the list (beginning of the array), while larger elements
    sink to the bottom (end of the array) with each iteration.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[让我们来看看冒泡排序](https://fhe-studio.com/fhe-editor?id=6639782cf9ed036703c04500)，这是一种简单的基于比较的排序算法，它反复遍历待排序列表，比较每对相邻的元素，如果它们的顺序错误，则交换它们。该算法得名于较小的元素会“冒泡”到列表的顶部（数组的开头），而较大的元素会在每次迭代中下沉到底部（数组的末尾）。'
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Bubble sort is quite slow [O(n²)] but very memory efficient [O(1)]. For a more
    CPU efficient algorithm, you can use ***Merge Sort***. It works on the principle
    of breaking down a list into smaller, more manageable parts (ideally down to individual
    elements), sorting those parts, and then merging them back together in the correct
    order.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 冒泡排序速度较慢 [O(n²)]，但非常节省内存 [O(1)]。对于更高效的CPU算法，可以使用***归并排序***。归并排序基于将一个列表分解为更小、更易管理的部分（理想情况下，分解到单个元素），对这些部分进行排序，然后再按正确的顺序将它们合并回去。
- en: '![](../Images/3881292edb00fdc7ad4c8748d8a6f593.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3881292edb00fdc7ad4c8748d8a6f593.png)'
- en: merge sort
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 归并排序
- en: The merge sort has a complexity of O(n log n) , making it one of the most efficient
    sorting algorithms for large datasets. However, the space complexity is O(n),
    as it requires additional space proportional to the array size for the temporary
    merging process.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 归并排序的时间复杂度为O(n log n)，使其成为处理大数据集时最有效的排序算法之一。然而，其空间复杂度为O(n)，因为它需要额外的空间来进行临时合并操作，这与数组的大小成正比。
- en: Dynamic programming
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态规划
- en: Dynamic programming is a method for solving complex problems by breaking them
    down into simpler subproblems and solving each of these subproblems just once,
    storing their solutions. The idea is that if you can solve the smaller subproblems
    efficiently, you can then use these solutions to tackle the larger problem. Let’s
    take a Fibonacci numbers as an example.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 动态规划是一种通过将复杂问题分解为更简单的子问题，并仅求解一次每个子问题，存储其解的方法。其理念是，如果能够高效地解决较小的子问题，就可以利用这些解来解决更大的问题。我们以斐波那契数列为例。
- en: The Fibonacci sequence is a series of numbers where each number is the sum of
    the two preceding ones, usually starting with 0 and 1\. The sequence typically
    goes 0, 1, 1, 2, 3, 5, 8, 13, and so forth. When solving for the nth Fibonacci
    number using dynamic programming, the approach can be significantly more efficient
    than the naive recursive approach by avoiding redundant calculations.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列是一组数字，每个数字是前两个数字的和，通常从0和1开始。该序列通常为0, 1, 1, 2, 3, 5, 8, 13，以此类推。在使用动态规划求解第n个斐波那契数时，该方法比天真的递归方法显著高效，因为它避免了冗余的计算。
- en: '![](../Images/da1b690ff57dd9ba2b004b00626a3a28.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/da1b690ff57dd9ba2b004b00626a3a28.png)'
- en: 'Fibonacci sequence: F[i] = F[i-1] + F[i-2]'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 斐波那契数列：F[i] = F[i-1] + F[i-2]
- en: 'As you can see, to solve for F(6), we need to resolve two subproblems recursively:
    F(5) and F(4) and so forth. You can note the solutions are overlapping, so the
    calculation of F(4) happens both on the left and on the right size of the tree.
    Obviously, we should cache each unique result and thus compute it only once. Then
    our tree becomes very simple. This approach is called memoization.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，要计算F(6)，我们需要递归地解决两个子问题：F(5)和F(4)，依此类推。你会注意到这些解是重叠的，因此F(4)的计算会在树的左右两侧都发生。显然，我们应该缓存每个唯一的结果，从而只计算一次。这样我们的树结构变得非常简单。这种方法称为记忆化。
- en: '![](../Images/2460bd26251e8d69a0639c2c4a5cb982.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2460bd26251e8d69a0639c2c4a5cb982.png)'
- en: Fibonacci sequence with memoization
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 记忆化的斐波那契数列
- en: However, in the context of Fully Homomorphic Encryption (FHE), memoization cannot
    typically be used due to the fundamental characteristics and security constraints
    of FHE. The reason for this is that FHE allows operations to be performed on encrypted
    data, meaning the actual data values remain concealed throughout the computation.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在完全同态加密（FHE）的背景下，通常不能使用记忆化，因为FHE的基本特性和安全约束。原因在于，FHE允许对加密数据进行操作，这意味着实际的数据值在整个计算过程中都保持隐秘。
- en: 'The other approach for dynamic programming is called *tabulation*. Tabulation
    is a bottom-up approach where you solve smaller subproblems first and use their
    solutions to build solutions to bigger problems. This method is particularly effective
    for FHE due to its non recursive nature. Tabulation uses a table where on each
    step, you update the current value. In this example we initialize a table of 6
    elements with the base conditions requiring the first element to be 0 and the
    second element to be 1\. The rest of the elements are then initialized to zero:
    [0,1,0,0,0,0]. Then, we progress from left to right.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 动态规划的另一种方法叫做*表格法*。表格法是一种自底向上的方法，其中首先解决较小的子问题，并利用其解构建更大问题的解。由于其非递归的特性，表格法在完全同态加密（FHE）中尤其有效。表格法使用一个表格，在每一步中更新当前值。在这个例子中，我们初始化了一个包含6个元素的表格，基本条件要求第一个元素为0，第二个元素为1。其余的元素初始化为零：[0,1,0,0,0,0]。然后，我们从左到右进行计算。
- en: '![](../Images/22a2fccb9b65f403fe607d9d2303a14f.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/22a2fccb9b65f403fe607d9d2303a14f.png)'
- en: '*tabulation, bottom up approach*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*制表，自下而上的方法*'
- en: '*This article marks the beginning of a series on Encrypted Data Structures
    and Algorithms. Up next, I’ll delve into the use of Graphs and Trees, Machine
    Learning and AI within the realm of Fully Homomorphic Encryption (FHE). Subsequent
    installments will explore practical applications within financial industry.*'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文标志着“加密数据结构与算法”系列文章的开始。接下来，我将深入探讨图形和树、机器学习与人工智能在完全同态加密（FHE）领域的应用。后续章节将探讨在金融行业中的实际应用。*'
- en: —
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: —
- en: Ready to Transform Your Coding with Encryption?
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备好用加密技术改变你的编码方式了吗？
- en: Dive deeper into the world of encrypted data structures and algorithms with
    the open source IDE at [FHE-Studio.com](http://FHE-Studio.com). Whether you’re
    looking to enhance your projects with top-tier security protocols or simply curious
    about the next generation of data privacy in software development, FHE Studio
    is a free and open source gateway to the FHE world. Develop, test and share your
    circuits, and get feedback from peers!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过开源IDE [FHE-Studio.com](http://FHE-Studio.com)，深入了解加密数据结构和算法的世界。无论你是想通过顶级安全协议提升项目，还是对下一代软件开发中的数据隐私感到好奇，FHE
    Studio都是通往FHE世界的免费开源门户。开发、测试和分享你的电路，并获得同行的反馈！
- en: Looking for specialized expertise? Our team at FHE Studio can help you integrate
    fully homomorphic encryption into your existing projects or develop new encrypted
    solutions tailored to your needs.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找专业的技术支持？FHE Studio团队可以帮助你将完全同态加密集成到现有项目中，或为你量身定制新的加密解决方案。
- en: Support us
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持我们
- en: If you’ve found value in our project, [consider supporting us](https://github.com/sponsors/artifirm).
    We’re committed to keeping FHE-Studio open and accessible, and every contribution
    helps us expand the project.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在我们的项目中发现了价值，[请考虑支持我们](https://github.com/sponsors/artifirm)。我们致力于保持FHE-Studio的开放性和可访问性，每一份贡献都帮助我们扩展项目。
- en: References
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: '[FHE-STUDIO.COM](https://fhe-studio.com/), an open source FHE IDE'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[FHE-STUDIO.COM](https://fhe-studio.com/)，一个开源的FHE IDE'
- en: 2\. FHE Studio docs and sources, [https://github.com/artifirm](https://github.com/artifirm/fhe-studio-docs)
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2\. FHE Studio文档和资源，[https://github.com/artifirm](https://github.com/artifirm/fhe-studio-docs)
- en: '3\. Concrete FHE compiler: [https://docs.zama.ai/concrete](https://docs.zama.ai/concrete)'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '3\. Concrete FHE编译器: [https://docs.zama.ai/concrete](https://docs.zama.ai/concrete)'
- en: 4\. Concrete ML is an open-source, privacy-preserving, machine learning framework
    based on Fully Homomorphic Encryption (FHE). [https://docs.zama.ai/concrete-ml](https://docs.zama.ai/concrete-ml)
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 4\. Concrete ML是一个开源的、保护隐私的机器学习框架，基于完全同态加密（FHE）。[https://docs.zama.ai/concrete-ml](https://docs.zama.ai/concrete-ml)
- en: 5\. Microsoft SEAL, an open source FHE library [https://www.microsoft.com/en-us/research/project/microsoft-seal/](https://www.microsoft.com/en-us/research/project/microsoft-seal/)
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 5\. Microsoft SEAL，一个开源的FHE库 [https://www.microsoft.com/en-us/research/project/microsoft-seal/](https://www.microsoft.com/en-us/research/project/microsoft-seal/)
- en: 6\. HELib, a FHE library [https://github.com/homenc/HElib](https://github.com/homenc/HElib)
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 6\. HELib，一个FHE库 [https://github.com/homenc/HElib](https://github.com/homenc/HElib)
- en: Unless otherwise noted, all images are by the author.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，所有图片均为作者提供。
