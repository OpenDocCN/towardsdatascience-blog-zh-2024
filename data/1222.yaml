- en: SQL Server’s Secret Feature — Run Python and Add-Ons Natively In SQL Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL Server 的秘密功能 — 在 SQL Server 中本地运行 Python 和附加组件
- en: 原文：[https://towardsdatascience.com/sql-servers-secret-feature-run-python-and-add-ons-natively-in-sql-server-7f3c4efe5c00?source=collection_archive---------2-----------------------#2024-05-15](https://towardsdatascience.com/sql-servers-secret-feature-run-python-and-add-ons-natively-in-sql-server-7f3c4efe5c00?source=collection_archive---------2-----------------------#2024-05-15)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/sql-servers-secret-feature-run-python-and-add-ons-natively-in-sql-server-7f3c4efe5c00?source=collection_archive---------2-----------------------#2024-05-15](https://towardsdatascience.com/sql-servers-secret-feature-run-python-and-add-ons-natively-in-sql-server-7f3c4efe5c00?source=collection_archive---------2-----------------------#2024-05-15)
- en: Import Python libraries, manipulate and output SQL tables and more, all without
    leaving SQL server.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入 Python 库，操作和输出 SQL 表等，一切都可以在 SQL Server 中完成，无需离开 SQL Server。
- en: '[](https://medium.com/@sasha.korovkina2003?source=post_page---byline--7f3c4efe5c00--------------------------------)[![Sasha
    Korovkina](../Images/14eac2bafa3c5b417b8aecdef61e6ac3.png)](https://medium.com/@sasha.korovkina2003?source=post_page---byline--7f3c4efe5c00--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--7f3c4efe5c00--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--7f3c4efe5c00--------------------------------)
    [Sasha Korovkina](https://medium.com/@sasha.korovkina2003?source=post_page---byline--7f3c4efe5c00--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@sasha.korovkina2003?source=post_page---byline--7f3c4efe5c00--------------------------------)[![Sasha
    Korovkina](../Images/14eac2bafa3c5b417b8aecdef61e6ac3.png)](https://medium.com/@sasha.korovkina2003?source=post_page---byline--7f3c4efe5c00--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--7f3c4efe5c00--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--7f3c4efe5c00--------------------------------)
    [Sasha Korovkina](https://medium.com/@sasha.korovkina2003?source=post_page---byline--7f3c4efe5c00--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--7f3c4efe5c00--------------------------------)
    ·8 min read·May 15, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--7f3c4efe5c00--------------------------------)
    ·阅读时长 8 分钟·2024年5月15日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: The Problem
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Within this project, we confront the challenge of managing 37,000 company names
    sourced from two distinct origins. The complexity lies in the potential discrepancy
    between how identical companies are listed across these sources.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，我们面临着管理 37,000 个公司名称的挑战，这些公司名称来源于两个不同的来源。复杂性在于这些来源中相同公司可能被列出为不同的名称。
- en: The goal
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标
- en: The goal of this article is to teach you to run Python natively within Microsoft
    SQL server. To use add-ons and external libraries, as well as perform further
    processing on the resulting tables with SQL.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的目标是教你如何在 Microsoft SQL Server 中本地运行 Python。使用附加组件和外部库，以及对生成的表进行进一步的 SQL 处理。
- en: '![](../Images/48680f2725a6dfcc1b493153fd74a2e8.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48680f2725a6dfcc1b493153fd74a2e8.png)'
- en: Photo by [Christin Hume](https://unsplash.com/@christinhumephoto?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Christin Hume](https://unsplash.com/@christinhumephoto?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 上
- en: Initial Algorithm Build
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初步算法构建
- en: 'Here is the strategy I will follow when building the algorithms:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在构建算法时遵循的策略：
- en: '**Blocking** — Dividing datasets into smaller blocks or groups based on common
    attributes to reduce computational complexity in comparing records. It narrows
    down the search space and enhances efficiency in similarity search tasks.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**阻塞** — 根据共同属性将数据集划分为更小的块或组，以减少比较记录时的计算复杂度。它缩小了搜索空间，提高了相似性搜索任务的效率。'
- en: '**Pre-processing** — Cleaning and standardizing raw data to prepare it for
    analysis by tasks like lowercase conversion, punctuation removal, and stop word
    elimination. This step improves data quality and reduces noise.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**预处理** — 清洗和标准化原始数据，为分析做好准备，包括小写转换、标点符号移除和停止词去除等任务。此步骤提高了数据质量，减少了噪音。'
- en: '**Similarity search model application** — Applying models to compute similarity
    or distance between pairs of records based on tokenized representations. This
    helps identify similar pairs, using metrics like cosine similarity or edit distance,
    for tasks like record linkage or deduplication.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**相似性搜索模型应用** — 应用模型计算基于标记化表示的记录对之间的相似性或距离。这有助于识别相似的记录对，使用诸如余弦相似度或编辑距离等度量，进行记录连接或去重等任务。'
- en: Blocking
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阻塞
- en: My datasets are highly disproportional — I have 1,361,373 entities in one table
    and only 37,171 company names in the second table. If I attempt to match on the
    unprocessed table, the algorithm would take a very long time to do so.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我的数据集非常不平衡——我在一个表中有1,361,373个实体，在第二个表中只有37,171个公司名称。如果我试图在未经处理的表上进行匹配，算法将需要非常长的时间。
- en: 'In order to block the tables, we need to see what common characteristics there
    are between 2 datasets. In my case, the companies are all associated with internal
    projects. Hence I will do the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了封锁表，我们需要查看2个数据集之间的共同特征。在我的案例中，公司都与内部项目相关。因此，我将执行以下操作：
- en: Extract the distinct company name and project code from the smaller table.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从较小的表中提取唯一的公司名称和项目代码。
- en: Loop through the project codes and try to find them in the larger table.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历项目代码，并尝试在较大的表中找到它们。
- en: Map all of the funds for that project and take it out of the large table.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 映射该项目的所有基金并将其从大表中提取。
- en: '*Repeat for the next project!*'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*为下一个项目重复！*'
- en: This way, I will be reducing the large dataset with each iteration, while also
    making sure that the mapping is rapid due to a smaller, filtered dataset on the
    project level.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，我将在每次迭代中减少大型数据集，同时确保由于项目级别的小型过滤数据集，映射过程迅速。
- en: A simple script to extract the distinct project code and fund name.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的脚本，用于提取唯一的项目代码和基金名称。
- en: 'Now, I will filter both tables by the project code, like so:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我将按项目代码过滤两个表，像这样：
- en: A code example of filtered tables based on the project code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 基于项目代码过滤表的代码示例。
- en: With this approach, our small table only has 406 rows for project ‘ABC’ for
    us to map, while the big table has 15,973 rows for us to map against. This is
    a big reduction from the raw table.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方法，我们的小表格仅包含406行项目“ABC”的数据来进行映射，而大表格则有15,973行数据需要匹配。这是从原始表格中大幅度减少的数据量。
- en: Program Structure
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 程序结构
- en: 'This project will consist of both Python and SQL functions on SQL server; here
    is a quick sketch of how the program will work to have a clearer understanding
    of each step:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目将包含Python和SQL函数，运行在SQL服务器上；以下是一个程序如何工作的简要概述，旨在帮助更清晰地理解每个步骤：
- en: '![](../Images/8c0b4c640314563a02be34915c0316ca.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c0b4c640314563a02be34915c0316ca.png)'
- en: Program structure. Image created by author.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 程序结构。图片由作者创建。
- en: 'Program execution:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 程序执行：
- en: 'Printing the project code in a loop is the simplest version of this function:'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在循环中打印项目代码是该函数的最简单版本：
- en: Code to recursively print out the names of companies.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 递归打印公司名称的代码。
- en: It quickly becomes apparent that the SQL cursor uses up too many resources.
    In short, this happens because cursors operate at row level and go through every
    row to make an operation.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 很快就可以看出SQL游标消耗了过多的资源。简而言之，这是因为游标是在行级别操作的，并且会遍历每一行以执行操作。
- en: 'More information on why cursors in SQL are inefficient and it is best to avoid
    them can be found here: [https://stackoverflow.com/questions/4568464/sql-server-temporary-tables-vs-cursors](https://stackoverflow.com/questions/4568464/sql-server-temporary-tables-vs-cursors)
    (answer 2)'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 关于为什么SQL中的游标效率低，最好避免使用它们的更多信息可以在这里找到：[https://stackoverflow.com/questions/4568464/sql-server-temporary-tables-vs-cursors](https://stackoverflow.com/questions/4568464/sql-server-temporary-tables-vs-cursors)（答案2）
- en: 'To increase the performance, I will use temporary tables and remove the cursor.
    Here is the resulting function:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高性能，我将使用临时表并移除游标。以下是得到的函数：
- en: A function to select all values from the large mapping table based on the project
    code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数，用于根据项目代码从大型映射表中选择所有值。
- en: This now takes about 3 seconds per project to select the project code and the
    data from the large mapping table, filtered by that project.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每个项目需要大约3秒钟的时间来选择项目代码及其相关数据，并从大型映射表中过滤出该项目的数据。
- en: For demonstration purposes, I will only focus on 2 projects, however I will
    return to running the function on all projects when doing so on production.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我将只关注2个项目，然而，在生产环境中，我会在所有项目上运行该函数。
- en: 'The final function we will be working with looks like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的最终函数如下所示：
- en: I have commented out the function definition to make the code easier to debug
    and set a limit on the first 2 projects
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我已注释掉函数定义，以便让代码更容易调试，并且限制为前2个项目
- en: Mapping Table Preparation
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 映射表准备
- en: 'The next step is to prepare the data for the Python pre-processing and mapping
    functions, for this we will need 2 datasets:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是为Python预处理和映射函数准备数据，为此我们将需要2个数据集：
- en: The filtered data by project code from the large mapping table
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 来自大映射表按项目代码过滤的数据
- en: The filtered data by project code from the small companies table
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 来自小型公司表按项目代码过滤的数据
- en: 'Here is what the updated function looks like with the data from 2 tables being
    selected:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用来自 2 个表的数据选择后更新的函数样子：
- en: Selecting the small companies table and the large mapping table from the database.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库中选择小型公司表和大映射表。
- en: 'Important: pythonic functions in SQL only take in **1 table input.** Make sure
    to put your data into a **single wide table** before feeding it into a Python
    function in SQL.'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 重要提示：SQL 中的 Python 函数只接受**1个表格输入**。确保在将数据输入 SQL 中的 Python 函数之前，将数据放入**单一宽表**中。
- en: Tables with sources
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 带有来源的表格
- en: As a result of this function, we get the projects, the company names and the
    sources for each project.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 作为此功能的结果，我们获得了每个项目的项目、公司名称和来源。
- en: '*Now we are ready for Python!*'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*现在我们准备好使用 Python 了！*'
- en: Python Execution in SQL
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 中的 Python 执行
- en: Python in SQL Server, through `sp_execute_external_script`, allows you to run
    Python code directly within SQL Server.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `sp_execute_external_script`，SQL Server 允许你直接在 SQL Server 中运行 Python 代码。
- en: It enables integration of Python's capabilities into SQL workflows with data
    exchange between SQL and Python. In the provided example, a Python script is executed,
    creating a pandas DataFrame from input data.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 它使得将 Python 的功能集成到 SQL 工作流中成为可能，并实现 SQL 与 Python 之间的数据交换。在提供的示例中，执行了一个 Python
    脚本，从输入数据中创建了一个 pandas DataFrame。
- en: The result is returned as a single output.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 结果作为单个输出返回。
- en: '*How cool is that!*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*多酷啊！*'
- en: A simple example from [https://learn.microsoft.com/en-us/sql/machine-learning/tutorials/quickstart-python-create-script?view=sql-server-ver16](https://learn.microsoft.com/en-us/sql/machine-learning/tutorials/quickstart-python-create-script?view=sql-server-ver16)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 [https://learn.microsoft.com/en-us/sql/machine-learning/tutorials/quickstart-python-create-script?view=sql-server-ver16](https://learn.microsoft.com/en-us/sql/machine-learning/tutorials/quickstart-python-create-script?view=sql-server-ver16)
    的简单示例
- en: 'There are a few important things to note about running Python in SQL:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中运行 Python 时有几个重要事项需要注意：
- en: Strings are defined by double quotes (“), not single quotes (‘). Make sure to
    check this especially if you are using regex expressions, to avoid spending time
    on error tracing
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字符串应由双引号（“）定义，而不是单引号（‘）。尤其在使用正则表达式时，请确保检查这一点，以避免在错误跟踪上浪费时间。
- en: There is only 1 output permitted — so your Python code will result in 1 table
    on output
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只允许 1 个输出——因此你的 Python 代码将产生 1 个输出表。
- en: 'You can use print statements for debugging and see the results be printed to
    the ‘Messages’ tab within your SQL server. Like so:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用 `print` 语句进行调试，并查看结果在 SQL 服务器的“消息”选项卡中打印出来。如下所示：
- en: '![](../Images/eabb77002323fc84ca4d5e14307e5c1b.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eabb77002323fc84ca4d5e14307e5c1b.png)'
- en: Image created by author.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图像由作者制作。
- en: Python Libraries In SQL
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL 中的 Python 库
- en: 'In SQL Server, several libraries come pre-installed and are readily accessible.
    To view the complete list of these libraries, you can execute the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL Server 中，几个库是预安装的并且可以直接访问。要查看这些库的完整列表，可以执行以下命令：
- en: Code to retrieve all Python libraries available in SQL
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 用于检索 SQL 中所有可用 Python 库的代码
- en: 'Here is what the output will look like:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是输出的样子：
- en: '![](../Images/a0005c7da80a325bcfebd4fd488fa4f0.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a0005c7da80a325bcfebd4fd488fa4f0.png)'
- en: You can import these packages just as you would do in a normal Python script
    (import …). Image created by author.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像在普通 Python 脚本中一样导入这些包（import ...）。图像由作者制作。
- en: Matching Text With Python
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 匹配文本
- en: Coming back to our generated table, we can now match the company names from
    different sources using Python. Our Python procedure will take in the long table
    and output a table with the mapped entities. It should show the match it thinks
    is most likely from the large mapping table next to each record from the small
    company table.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们生成的表格，现在我们可以使用 Python 匹配来自不同来源的公司名称。我们的 Python 程序将接受长表并输出一个包含映射实体的表。它应该显示它认为最有可能匹配的小公司表中的每个记录旁边的大映射表中的匹配项。
- en: '![](../Images/3faaa5ea0e419159d1b79f2598c15a7e.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3faaa5ea0e419159d1b79f2598c15a7e.png)'
- en: Assuming that Company 1.1 is the closest match to Company 1, the output should
    look like the output above. Image created by author.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 假设公司 1.1 是公司 1 的最接近匹配项，输出应该看起来像上面的输出。图像由作者制作。
- en: 'To do this, let’s first add a Python function to our SQL procedure. The first
    step is to simply feed in the dataset into Python, I will do this with a sample
    dataset and then with our data, here is the code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个目标，首先让我们向SQL过程添加一个Python函数。第一步是将数据集简单地输入到Python中，我将使用一个示例数据集，然后再使用我们的数据，以下是代码：
- en: Code which feeds the data into the database — both tables are present in the
    Python function.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据输入到数据库中的代码——这两个表都存在于Python函数中。
- en: This system allows us to feed in both of our tables into the pythonic function
    as inputs, it then prints both tables as outputs.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该系统允许我们将两个表都作为输入传递给Python函数，然后它会将两个表作为输出打印出来。
- en: Pre-Processing In Python
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的预处理
- en: 'In order to match our strings effectively, we must conduct some preprocessing
    in Python, this includes:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地匹配字符串，我们必须在Python中进行一些预处理，这包括：
- en: Remove accents and other language-specific special characters
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 去除重音符号和其他语言特有的特殊字符
- en: Remove the white spaces
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 去除空格
- en: Remove punctuation
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 去除标点符号
- en: The first step will be done with collation in SQL, while the other 2 will be
    present in the preprocessing step of the Python function.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步将通过SQL中的排序完成，而其他两步将在Python函数的预处理步骤中完成。
- en: 'Here is what our function with preprocessing looks like:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这是带有预处理的函数样子：
- en: The result of this is 3 columns, one with the name of the company in small,
    lower cap and no space letters, the second column is the project column and the
    third column is the source.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是三个列，一个是小写且无空格的公司名称，第二列是项目列，第三列是来源列。
- en: Matching Strings In Python
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Python中匹配字符串
- en: Here we have to be creative as we are pretty limited with the number of libraries
    which we can use. Therefore, let’s first identify how we would want our output
    to look.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们需要发挥创意，因为我们可以使用的库数量非常有限。因此，让我们首先确定输出应该是什么样子的。
- en: We want to match the data coming from source 2, to the data in source 1\. Therefore,
    for each value in source 2, we should have a bunch of matching values from source
    1 with scores to represent the closeness of the match.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望将来自来源2的数据与来源1中的数据进行匹配。因此，对于来源2中的每个值，我们应该有一堆来自来源1的匹配值，并附带得分表示匹配的紧密度。
- en: '![](../Images/4657f47f36ebc80037d84480da67c89d.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4657f47f36ebc80037d84480da67c89d.png)'
- en: Output table structure. Image created by author.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 输出表结构。图像由作者创建。
- en: We will use **python built-in libraries** first, to avoid the need for library
    imports and hence simplify the job.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先使用**Python内置库**，以避免需要导入外部库，从而简化工作。
- en: 'The logic:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑：
- en: Loop through each project
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 遍历每个项目
- en: Make a table with the funds by source, where source 1 is the large table with
    the mapping data and 2 is the initial company dataset
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据资金来源制作一个表格，其中来源1是带有映射数据的大表，来源2是最初的公司数据集
- en: Select the data from the small dataset into an array
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从小型数据集中选择数据并将其放入数组
- en: Compare each element in the resulting array to each element in the large mapping
    data frame
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将结果数组中的每个元素与大映射数据框中的每个元素进行比较
- en: Return the scores for each entity
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回每个实体的得分
- en: 'The code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 代码：
- en: Code to map data from the large dataset to a small subset of data. Keep in mind
    to use your own joins and data structure.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 用于将大数据集的数据映射到小数据集子集的代码。请记住使用你自己的连接和数据结构。
- en: 'And here is the final output:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终的输出：
- en: '![](../Images/8e758c53c4c91f9cf28880d0f716c184.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8e758c53c4c91f9cf28880d0f716c184.png)'
- en: This is made-up data to demonstrate the result, however the structure should
    be identical for your dataset. Image generated by author.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是为了演示结果而创建的虚拟数据，然而结构应该与你的数据集相同。图像由作者生成。
- en: In this table, we have each company name, the project which it belongs to and
    the source — whether it is from the large mapping table or the small companies
    table. The score on the right indicates the similarity metric between the company
    name from source 2 and source 1\. It is important to note that company4, which
    came from source 2, will always have a score of 1–100% match, as it is being matched
    against itself.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个表格中，我们有每个公司名称、它所属的项目以及来源——无论是来自大的映射表还是小的公司表。右侧的得分表示来源2中的公司名称与来源1之间的相似度度量。需要注意的是，来自来源2的company4将始终有一个1的得分——100%的匹配度，因为它与自身进行匹配。
- en: Executing Python scripts within SQL Server via the Machine Learning Services
    is a powerful feature that allows for in-database analytics and machine learning
    tasks. This integration enables direct data access without the need for data movement,
    significantly optimizing performance and security for data-intensive operations.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过机器学习服务在 SQL Server 中执行 Python 脚本是一个强大的功能，允许在数据库内进行分析和机器学习任务。此集成使得数据可以直接访问，无需数据迁移，从而显著优化性能和数据密集型操作的安全性。
- en: However, there are limitations to be aware of. The environment supports a **single
    input**, which might restrict the complexity of tasks that can be performed directly
    within the SQL context. Additionally, only a **limited set of Python libraries
    are available**, which may require alternative solutions for certain types of
    data analysis or machine learning tasks not supported by the default libraries.
    Furthermore, users must navigate the intricacies of SQL Server’s environment,
    such as complex spacing in T-SQL queries that include Python code, which can be
    a source of errors and confusion.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，需要注意的是存在一些限制。该环境支持**单一输入**，这可能限制了可以在 SQL 上下文中直接执行的任务的复杂性。此外，只有**有限的 Python
    库可用**，这可能需要为某些不被默认库支持的数据分析或机器学习任务寻找替代方案。此外，用户还需要应对 SQL Server 环境中的一些复杂性，比如包含 Python
    代码的 T-SQL 查询中的复杂空格，这可能会导致错误和困惑。
- en: 'Despite these challenges, there are numerous applications where executing Python
    in SQL Server is advantageous:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些挑战，但在许多场景中，在 SQL Server 中执行 Python 是非常有优势的：
- en: 1\. **Data Cleansing and Transformation —** Python can be used directly in SQL
    Server to perform complex data preprocessing tasks, like handling missing data
    or normalizing values, before further analysis or reporting.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. **数据清理和转换** — Python 可以直接在 SQL Server 中使用，执行复杂的数据预处理任务，如处理缺失数据或规范化数值，之后再进行进一步的分析或报告。
- en: 2\. **Predictive Analytics** — Deploying Python machine learning models directly
    within SQL Server allows for real-time predictions, such as customer churn or
    sales forecasting, using live database data.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. **预测分析** — 在 SQL Server 中直接部署 Python 机器学习模型可以实现实时预测，如客户流失或销售预测，使用的是实时数据库数据。
- en: 3\. **Advanced Analytics** — Python’s capabilities can be leveraged to perform
    sophisticated statistical analysis and data mining directly on the database, aiding
    in decision-making processes without the latency of data transfer.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. **高级分析** — Python 的功能可以用来直接在数据库上执行复杂的统计分析和数据挖掘，帮助决策过程，而无需数据传输的延迟。
- en: 4\. **Automated Reporting and Visualization** — Python scripts can generate
    data visualizations and reports directly from SQL Server data, enabling automated
    updates and dashboards.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. **自动化报告和可视化** — Python 脚本可以直接从 SQL Server 数据生成数据可视化和报告，实现自动更新和仪表盘。
- en: 5\. **Operationalizing Machine Learning Models** — By integrating Python in
    SQL Server, models can be updated and managed directly within the database environment,
    simplifying the operational workflow.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. **机器学习模型的操作化** — 通过将 Python 集成到 SQL Server 中，模型可以直接在数据库环境中进行更新和管理，简化了操作工作流。
- en: In conclusion, while the execution of Python in SQL Server presents some challenges,
    it also opens up a wealth of possibilities for enhancing and simplifying data
    processing, analysis, and predictive modeling directly within the database environment.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，虽然在 SQL Server 中执行 Python 存在一些挑战，但它也为在数据库环境中直接增强和简化数据处理、分析和预测建模开辟了丰富的可能性。
- en: 'PS to see more of my articles, you can follow me on LinkedIn here: [https://www.linkedin.com/in/sasha-korovkina-5b992019b/](https://www.linkedin.com/in/sasha-korovkina-5b992019b/)'
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 若要查看更多我的文章，可以在 LinkedIn 上关注我：[https://www.linkedin.com/in/sasha-korovkina-5b992019b/](https://www.linkedin.com/in/sasha-korovkina-5b992019b/)
