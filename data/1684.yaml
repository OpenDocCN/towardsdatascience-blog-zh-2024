- en: How to Test Machine Learning Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何测试机器学习系统
- en: 原文：[https://towardsdatascience.com/how-to-test-machine-learning-systems-d53623d32797?source=collection_archive---------4-----------------------#2024-07-10](https://towardsdatascience.com/how-to-test-machine-learning-systems-d53623d32797?source=collection_archive---------4-----------------------#2024-07-10)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-test-machine-learning-systems-d53623d32797?source=collection_archive---------4-----------------------#2024-07-10](https://towardsdatascience.com/how-to-test-machine-learning-systems-d53623d32797?source=collection_archive---------4-----------------------#2024-07-10)
- en: '**From concepts to practical code snippets for effective testing**'
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**从概念到有效测试的实用代码片段**'
- en: '[](https://medium.com/@Eyaltra?source=post_page---byline--d53623d32797--------------------------------)[![Eyal
    Trabelsi](../Images/60562caa76b824eac9e21f1c0a2933fc.png)](https://medium.com/@Eyaltra?source=post_page---byline--d53623d32797--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d53623d32797--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d53623d32797--------------------------------)
    [Eyal Trabelsi](https://medium.com/@Eyaltra?source=post_page---byline--d53623d32797--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@Eyaltra?source=post_page---byline--d53623d32797--------------------------------)[![Eyal
    Trabelsi](../Images/60562caa76b824eac9e21f1c0a2933fc.png)](https://medium.com/@Eyaltra?source=post_page---byline--d53623d32797--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--d53623d32797--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--d53623d32797--------------------------------)
    [Eyal Trabelsi](https://medium.com/@Eyaltra?source=post_page---byline--d53623d32797--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d53623d32797--------------------------------)
    ·14 min read·Jul 10, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--d53623d32797--------------------------------)
    ·14分钟阅读·2024年7月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/86f08b665dafcd4e8acdc7008bd32c24.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/86f08b665dafcd4e8acdc7008bd32c24.png)'
- en: Image by the author
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Testing in software development is crucial as **it safeguards the value delivered
    to your customers.** Delivering a successful product isn’t a one-time effort;
    it’s an ongoing process. To ensure continuous delivery, we must define success,
    curate the data, and then train and deploy our models while continuously monitoring
    and testing our work.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 软件开发中的测试至关重要，因为**它保障了交付给客户的价值**。交付成功的产品不是一次性的努力，而是一个持续的过程。为了确保持续交付，我们必须定义成功标准、精心策划数据，然后训练并部署我们的模型，同时不断监控和测试我们的工作。
- en: To deliver continuously, we must Define success, curate the data, and then train
    and deploy our models while continuously monitoring and testing our work. **“Trust”
    in ML Systems requires more than just testing; it must be integrated into the
    entire lifecycle** (as shown in another blog of mine)**.**
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现持续交付，我们必须定义成功、精心策划数据，然后训练并部署我们的模型，同时不断监控和测试我们的工作。**机器学习系统中的“信任”不仅仅需要测试；它必须被整合到整个生命周期中**（如我另一篇博客所示）。
- en: '![](../Images/c52c3c0fb594e33d68cd59bc020d2b0f.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c52c3c0fb594e33d68cd59bc020d2b0f.png)'
- en: The machine learning flow of TRUST can be described in [“How to build TRUST
    in Machine Learning, the sane way”](https://medium.com/bigabids-dataverse/how-to-build-trust-in-machine-learning-the-sane-way-39d879f22e69)
    (Image by the author).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: TRUST的机器学习流程可以在[“如何以理性方式建立机器学习中的信任”](https://medium.com/bigabids-dataverse/how-to-build-trust-in-machine-learning-the-sane-way-39d879f22e69)中描述（图片由作者提供）。
- en: Before diving into the detailed sections, here’s a quick TL;DR for everyone,
    followed by more in-depth information tailored for ML practitioners.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入详细章节之前，这里有一个简短的TL;DR，接下来是为机器学习从业者量身定制的更深入信息。
- en: TL;DR
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TL;DR
- en: '[**Testing machine learning is hard**](https://medium.com/@Eyaltra/d53623d32797#78cd)
    because it’s probabilistic by nature, and must account for diverse data and dynamic
    real-world conditions.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[**测试机器学习非常困难**](https://medium.com/@Eyaltra/d53623d32797#78cd)，因为它本质上是概率性的，必须考虑多样化的数据和动态的现实世界条件。'
- en: '[**You should start with a basic CI pipeline.**](https://medium.com/@Eyaltra/d53623d32797#ffab)
    Focus on the most valuable tests for your use case: [Syntax Testing](https://medium.com/@Eyaltra/d53623d32797#34f1),
    [Data Creation Testing](https://medium.com/@Eyaltra/d53623d32797#65d9), [Model
    Creation Testing](https://medium.com/@Eyaltra/d53623d32797#eef4), [E2E Testing](https://medium.com/@Eyaltra/d53623d32797#82c6),
    and [Artifact Testing](https://medium.com/@Eyaltra/d53623d32797#afbe). **Most
    of the time the most valuable test is** **E2E Testing****.**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[**你应该从基础的 CI 流水线开始。**](https://medium.com/@Eyaltra/d53623d32797#ffab) 专注于最有价值的测试，符合你的使用场景：[语法测试](https://medium.com/@Eyaltra/d53623d32797#34f1)、[数据创建测试](https://medium.com/@Eyaltra/d53623d32797#65d9)、[模型创建测试](https://medium.com/@Eyaltra/d53623d32797#eef4)、[端到端测试](https://medium.com/@Eyaltra/d53623d32797#82c6)和[工件测试](https://medium.com/@Eyaltra/d53623d32797#afbe)。**大多数时候，最有价值的测试是**
    **端到端测试**。'
- en: 'To understand what value each kind of test brings we define the following table:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解每种测试带来的价值，我们定义了以下表格：
- en: '**Confidence Gain:** Ensures correctness of the system.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**信心提升：** 确保系统的正确性。'
- en: '**Test Churn:** Indicates how often tests need updates or modifications.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试变动：** 表示测试需要更新或修改的频率。'
- en: '**Run Cost:** Represents the computational and time cost of executing the tests.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行成本：** 表示执行测试时的计算和时间成本。'
- en: '**Case Variation:** Diversity of scenarios covered by the tests.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**案例变异性：** 测试所涵盖的场景多样性。'
- en: '**Pinpointing Issues:** Effectiveness in identifying and locating issues.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题定位：** 在识别和定位问题方面的有效性。'
- en: To be effective in testing machine learning models, it’s important to follow
    some [**best practices that are unique to ML testin**](https://medium.com/@Eyaltra/d53623d32797#951a)**g**,
    as it differs significantly from regular software testing.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效测试机器学习模型，重要的是遵循一些[**针对机器学习测试的最佳实践**](https://medium.com/@Eyaltra/d53623d32797#951a)**g**，因为它与常规软件测试有很大不同。
- en: Now that you’ve got the quick overview, let’s dive deeper into the details for
    a comprehensive understanding.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了快速概览，接下来让我们深入探讨细节，以便全面理解。
- en: Why Testing ML is Hard
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么测试机器学习系统很困难
- en: 'Testing machine learning systems introduces unique complexities and challenges:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 测试机器学习系统带来了独特的复杂性和挑战：
- en: '**Data Complexity:** Handling data effectively is challenging; it needs to
    be valid, accurate, consistent, and timely, and it keeps changing.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据复杂性：** 有效处理数据是一个挑战；数据需要有效、准确、一致和及时，且数据会不断变化。'
- en: '**Resource-Intensive Processes:** Both the development and operation of ML
    systems can be costly and time-consuming, demanding significant computational
    and financial resources.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源密集型过程：** 机器学习系统的开发和运行可能是高成本且耗时的，要求大量的计算和财力资源。'
- en: '**Complexity:** ML systems include many components, and there are a lot of
    places things can go wrong. In addition, integration often requires proper communication.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂性：** 机器学习系统包含许多组件，且有很多环节可能出现问题。此外，集成通常需要良好的沟通。'
- en: '**System Dynamics and Testing Maturity:** Machine learning systems are prone
    to frequent changes and silent failures.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统动态性和测试成熟度：** 机器学习系统容易发生频繁变化和静默故障。'
- en: '**Probabilistic Nature:** Machine learning models often produce outputs that
    are not deterministic. In addition, the data fetched may not be deterministic.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**概率性质：** 机器学习模型通常生成非确定性的输出。此外，获取的数据也可能是非确定性的。'
- en: '**Specialized Hardware Requirements:** ML systems often require advanced hardware
    setups, such as GPUs.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专业硬件需求：** 机器学习系统通常需要先进的硬件配置，例如 GPU。'
- en: '![](../Images/f0273c16788ad1270d7e97ee6948f503.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f0273c16788ad1270d7e97ee6948f503.png)'
- en: Traditional system testing VS ML projects testing ([Source](https://research.google/pubs/the-ml-test-score-a-rubric-for-ml-production-readiness-and-technical-debt-reduction/))
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 传统系统测试与机器学习项目测试的对比 ([来源](https://research.google/pubs/the-ml-test-score-a-rubric-for-ml-production-readiness-and-technical-debt-reduction/))
- en: How to Start
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何开始
- en: '**Always start with setting up the CI workflow, as it’s straightforward and
    reduces the barrier to testing.** Setting up CI involves automating your build
    and test processes, ensuring that code changes are continuously integrated and
    tested. This automation makes the process more consistent and helps avoid many
    potential issues.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**总是从设置 CI 工作流开始，因为它简单直接，并能降低测试的门槛。** 设置 CI 涉及自动化构建和测试过程，确保代码更改能够持续集成和测试。这种自动化使得过程更加一致，有助于避免许多潜在问题。'
- en: '**The good news is that this process is quite repetitive and can be easily
    automated.** Pre-commit will handle executing the syntax validation process, ensuring
    that your code “compiles”. Meanwhile, pytest will run the tests to verify that
    your code behaves as expected.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**好消息是，这个过程非常重复，可以轻松自动化。** Pre-commit 将处理执行语法验证过程，确保你的代码“编译”通过。同时，pytest 会运行测试，验证你的代码行为是否符合预期。'
- en: 'Here’s a code snippet for a GitHub Action that sets up this workflow:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 GitHub Action 的代码片段，用于设置这个工作流：
- en: This snippet configures a basic CI pipeline for testing.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段配置了一个基本的 CI 流水线来进行测试。
- en: Now that we have a running CI pipeline, we can explore which tests we should
    run according to the tests’ value.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经有了一个运行中的 CI 流水线，我们可以根据测试的价值来探索应该运行哪些测试。
- en: '**You can start small and gradually expand your tests as you discover bugs,
    adding tests for each issue you encounter.** **As long as the CI pipeline is in
    place, the main barrier to testing is simply knowing what to test.**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**你可以从小做起，随着发现 bug，逐步扩展你的测试，为遇到的每个问题添加测试。** **只要 CI 流水线到位，测试的主要障碍就是知道该测试什么。**'
- en: '**Syntax Testing**'
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**语法测试**'
- en: 'When executing machine learning code, it’s important to verify syntax-related
    elements early in the development process to identify potential issues before
    they escalate. Given that machine learning workflows typically consist of a mix
    of Python code, SQL queries, and configuration files, each component demands specific
    validation checks:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行机器学习代码时，重要的是在开发过程的早期验证语法相关的元素，以便在问题升级之前识别潜在问题。由于机器学习工作流通常由 Python 代码、SQL
    查询和配置文件混合组成，因此每个组件都需要特定的验证检查：
- en: '**Python Code Validation**'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**Python 代码验证**'
- en: Validating Python code through syntax checks using AST and type checks using
    MyPy helps prevent runtime errors and functional discrepancies that could impact
    the entire machine-learning pipeline.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 AST 进行语法检查和使用 MyPy 进行类型检查来验证 Python 代码，有助于防止运行时错误和功能差异，这些错误和差异可能会影响整个机器学习流水线。
- en: Here’s a code snippet for pre-commit to test Python syntax and typing.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 pre-commit 的代码片段，用于测试 Python 语法和类型。
- en: This snippet configures a pre-commit hook to check the syntax and typing on
    Python files.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段配置了一个 pre-commit 钩子，用于检查 Python 文件的语法和类型。
- en: '**SQL Query Validation**'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**SQL 查询验证**'
- en: Validating SQL queries is crucial for ensuring that data retrieval processes
    are structured correctly and are free from errors. For static checks like syntax,
    tools like SQLFluff can be integrated with pre-commit hooks to automatically lint
    SQL code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 验证 SQL 查询对于确保数据检索过程结构正确且没有错误至关重要。对于像语法这样的静态检查，可以将像 SQLFluff 这样的工具与 pre-commit
    钩子集成，自动检查 SQL 代码。
- en: Here’s a code snippet for pre-commit to test SQL syntax.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 pre-commit 的代码片段，用于测试 SQL 语法。
- en: This snippet configures a pre-commit hook to check the syntax of SQL files using
    sqlfluff.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段配置了一个 pre-commit 钩子，用于使用 sqlfluff 检查 SQL 文件的语法。
- en: However, to handle runtime issues such as verifying the existence of a column,
    we would need to use the `EXPLAIN` statement on all SQL. This is effective as
    it only plans the queries but does not execute them. If a query is invalid, the
    `EXPLAIN` command will fail. This method is supported by most SQL dialects but
    requires database connectivity to execute.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，要处理运行时问题，例如验证列的存在，我们需要在所有 SQL 语句上使用 `EXPLAIN` 语句。这是有效的，因为它只是规划查询，而不执行它们。如果查询无效，`EXPLAIN`
    命令将失败。这种方法被大多数 SQL 方言支持，但需要数据库连接才能执行。
- en: Here’s a code snippet to test SQL syntax and metadata using pytest.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个代码片段，用于使用 pytest 测试 SQL 语法和元数据。
- en: This snippet configures the pytest test to check the syntax of SQL files.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段配置了 pytest 测试，用于检查 SQL 文件的语法。
- en: '**Configuration File Validation**'
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**配置文件验证**'
- en: Ensuring the validity of configuration files is critical as they often control
    the operational parameters of a machine learning model, typically in JSON or YAML
    formats. For basic validation, it’s essential to check that these files are syntactically
    correct.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 确保配置文件的有效性至关重要，因为它们通常控制机器学习模型的操作参数，通常采用 JSON 或 YAML 格式。对于基本验证，必须检查这些文件的语法是否正确。
- en: Here’s a code snippet for pre-commit to test YAML and JSON syntax.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 pre-commit 的代码片段，用于测试 YAML 和 JSON 语法。
- en: This snippet configures a pre-commit hook to check the syntax of YAML and JSON
    files.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段配置了一个 pre-commit 钩子，用于检查 YAML 和 JSON 文件的语法。
- en: However, syntax validation alone is insufficient. It's crucial to also ensure
    that the settings—like hyperparameters, input/output configurations, and environmental
    variables—are suitable for your application. Using a tool like [cerberus](https://docs.python-cerberus.org/usage.html)
    via pytest enables comprehensive validation against a predefined schema, ensuring
    that the configurations are correct and practical.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仅仅进行语法验证是不够的。确保设置—如超参数、输入/输出配置和环境变量—适合你的应用程序同样至关重要。通过 pytest 使用像[cerberus](https://docs.python-cerberus.org/usage.html)这样的工具可以进行全面的验证，确保配置符合预定义的模式，并且是正确和实用的。
- en: By testing the syntax of code, queries, and configurations, developers can substantially
    enhance the stability and reliability of machine learning systems, enabling smoother
    deployments and operations.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过测试代码、查询和配置的语法，开发人员可以显著增强机器学习系统的稳定性和可靠性，从而实现更顺畅的部署和操作。
- en: '**I’d suggest incorporating these checks into every project.** They’re pretty
    straightforward to replicate and can help you avoid many unnecessary issues. Plus,
    they’re essentially copy-paste, making them easy to implement.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**我建议将这些检查纳入每个项目中。** 它们非常简单，可以复制，有助于避免许多不必要的问题。而且，它们本质上是复制粘贴，容易实现。'
- en: '**Data Creation Testing**'
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**数据创建测试**'
- en: Data Creation Testing ensures your feature engineering work correctly, following
    the idea of *“garbage in, garbage out”*.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 数据创建测试确保你的特征工程正确工作，遵循 *“垃圾进，垃圾出”* 的理念。
- en: In software testing, various methods such as unit tests, property-based testing,
    component tests, and integration tests each have their own strengths and weaknesses.
    We will explore each of these strategies in more detail shortly.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件测试中，单元测试、基于属性的测试、组件测试和集成测试等各种方法各有优缺点。稍后我们将详细探讨每一种策略。
- en: We will explore all the testing options by starting with an example from the
    Titanic dataset, where we calculate `get_family_size`, where family size is based
    on the number of parents and siblings.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过从 Titanic 数据集中开始一个示例来探索所有的测试选项，计算 `get_family_size`，其中家庭成员数基于父母和兄弟姐妹的数量。
- en: This function calculates the family size by adding the number of siblings and
    parents/children and then adding one to include the individual.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数通过加上兄弟姐妹和父母/子女的数量，然后再加一来计算家庭成员数，以包括个人。
- en: Data Creation **Unit Tests**
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据创建**单元测试**
- en: Tests are used for validating the business logic of individual functions, primarily
    focusing on optimal scenarios, or “happy paths,” but they also help identify issues
    in less ideal scenarios, known as “paths of sorrow.”
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 测试用于验证单个函数的业务逻辑，主要聚焦于最优场景或“快乐路径”，但它们也有助于识别不太理想场景中的问题，称为“悲伤路径”。
- en: 'Here is an example of a unit test that checks the `get_family_size` functionality:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个单元测试的示例，检查 `get_family_size` 功能：
- en: Testing basic functionality for calculating family size
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 测试计算家庭成员数量的基本功能
- en: In different modalities, including vision, NLP, and generative AI, unit tests
    are used a bit differently. For example, in NLP and large language models (LLMs),
    testing the tokenizer is critical as it ensures accurate text processing by correctly
    splitting text into meaningful units. In image recognition, tests can check the
    model’s ability to handle object rotation and varying lighting conditions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的模式下，包括视觉、自然语言处理（NLP）和生成性 AI，单元测试的使用方式略有不同。例如，在 NLP 和大型语言模型（LLMs）中，测试分词器至关重要，因为它确保通过正确地将文本分割成有意义的单元来进行准确的文本处理。在图像识别中，测试可以检查模型处理物体旋转和不同光照条件的能力。
- en: However, [unit tests alone are not enough](https://tyrrrz.me/blog/unit-testing-is-overrated)
    because they focus on specific functions and miss side effects or interactions
    with other components. While great for checking logical code blocks like loops
    and conditions, their narrow scope, often using test doubles, can overlook behavior
    changes in areas not directly tested.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，[单元测试本身并不够](https://tyrrrz.me/blog/unit-testing-is-overrated)，因为它们专注于特定的功能，忽略了副作用或与其他组件的交互。虽然它们非常适合检查诸如循环和条件等逻辑代码块，但它们的局限性，通常使用测试替代物，可能会忽视在未直接测试的领域中行为的变化。
- en: Data Creation **Property-Based Testing**
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据创建**基于属性的测试**
- en: Property-based testing is a testing approach where properties or characteristics
    of input data are defined, and test cases are automatically generated to check
    if these properties hold true for the system under test.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 基于属性的测试是一种测试方法，在该方法中，定义了输入数据的属性或特征，并自动生成测试用例，检查这些属性是否对被测试的系统成立。
- en: Property-based testing ensures the system does not encounter issues with extreme
    or unusual inputs. This method can uncover problems that example-based tests might
    miss.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 基于属性的测试确保系统在遇到极端或不寻常输入时不会出现问题。这种方法可以发现示例测试可能遗漏的问题。
- en: 'Some good/common properties you should test:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一些你应该测试的常见/重要属性：
- en: The code does not crash. This one is extremely effective.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码不会崩溃。这个方法非常有效。
- en: Equivalent functions return the same results.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等效的函数返回相同的结果。
- en: Great expectation Invariants.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极好的期望不变式。
- en: Correct schemas.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确的模式。
- en: Other properties like Idempotent, commutative, associative, etc.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他属性，如幂等性、交换性、结合性等。
- en: 'Here is an example of a property-based test that ensures `get_family_size`
    behaves correctly under a range of edge cases and input variations:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个基于属性的测试的例子，确保`get_family_size`在各种边缘情况和输入变化下正确运行：
- en: Testing functionality at input boundaries for calculating family size
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算家庭大小时测试输入边界的功能。
- en: Property tests, while powerful, often overlook the complexities of software
    dependencies, interdependencies, and external systems. Running in isolation, they
    may miss interactions, state, and real-world environmental factors.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 属性测试虽然强大，但通常忽略了软件依赖、相互依赖以及外部系统的复杂性。在孤立环境中运行时，它们可能会错过交互、状态和真实世界的环境因素。
- en: Data Creation **Component Tests**
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据创建 **组件测试**
- en: Component testing validates individual parts of a software system in isolation
    to ensure they function correctly before integration. Excel helps uncover unusual
    user behaviors and edge cases that unit and property tests might miss, representing
    the system’s status closely and anticipating ‘creative’ user interactions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 组件测试验证软件系统的各个部分是否正确运行，确保它们在集成之前能够正常工作。Excel有助于发现单元测试和属性测试可能遗漏的异常用户行为和边缘情况，能更接近地反映系统的状态并预测“创造性”的用户交互。
- en: To keep these tests maintainable and fast, data samples are used. One should
    choose the right source data and sample sizes required.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持这些测试的可维护性和高效性，使用了数据样本。应选择合适的源数据和所需的样本大小。
- en: 'Here is an example of a component test that ensures `get_family_size` behaves
    correctly on real data, with real dependencies:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个组件测试的例子，确保`get_family_size`在真实数据和真实依赖下正确运行：
- en: Testing functionality according to real traffic and calculating family size
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 根据真实流量测试功能并计算家庭大小。
- en: Picking Production or Staging for Data Creation
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为数据创建选择生产环境或预发布环境
- en: To keep data volumes manageable, modify your queries or dataset for continuous
    integration (CI) by injecting a `LIMIT`clause or an aggressive `WHERE`clause.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持数据量的可控性，可以通过在查询或数据集上注入`LIMIT`子句或激进的`WHERE`子句，调整持续集成（CI）。
- en: '**Choosing a staging environment for more controlled, smaller-volume tests
    is often the best approach**. This environment offers easier reproducibility and
    fewer privacy concerns. However, since it is not production, **you must verify
    that the staging and production schemas are identical.**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**选择预发布环境进行更可控、较小规模的测试通常是最佳方案**。该环境提供了更易复现性和更少的隐私问题。然而，由于它不是生产环境，**你必须验证预发布和生产环境的模式是否一致**。'
- en: The following code snippet verify production Athena table has the same schema
    as staging Athena table.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段验证生产环境中的Athena表与预发布环境中的Athena表模式是否一致。
- en: Verify Athena schema for both tables are the same aka staging is not stale.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 验证Athena模式对于两个表是一致的，也就是说，预发布环境没有过时。
- en: Choose production to see how features operate with real user data. This environment
    provides a full-fledged view of system performance and user interaction.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 选择生产环境以查看功能如何与真实用户数据一起运行。这个环境提供了系统性能和用户交互的完整视图。
- en: Data Creation **Integration Tests**
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据创建 **集成测试**
- en: While component tests provide a focused view, a broader perspective is sometimes
    necessary. Integration tests evaluate the cooperation between different modules,
    ensuring they function together seamlessly.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然组件测试提供了一个集中的视角，但有时需要更广泛的视角。集成测试评估不同模块之间的合作，确保它们无缝地协同工作。
- en: The goal of integration testing is to ensure that the pipeline makes sense,
    not necessarily to verify every small detail for correctness, **so avoid brittle
    assertion sections**.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试的目标是确保管道是合理的，而不是验证每一个小细节的正确性，**所以要避免脆弱的断言部分**。
- en: 'Here is an example of an integration test that ensures `feature_engineering`
    behaves correctly on real data, with real dependencies:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个集成测试的例子，确保`feature_engineering`在真实数据和真实依赖下正确运行：
- en: Verify the feature engineering process produces a dataframe with the correct
    schema.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 验证特征工程过程是否生成具有正确模式的数据框。
- en: Using property tests for a wide portion of feature engineering processes (like
    integration tests) is not ideal. These tests often require extensive setup and
    maintenance, and their complexity increases significantly.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于属性的测试对大量特征工程过程进行测试（如集成测试）并不理想。这些测试通常需要大量的设置和维护，而且复杂度会显著增加。
- en: 'Here is an example to show how complicated property-based testing can become:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个例子，展示了基于属性的测试可能变得多么复杂：
- en: Verify the feature engineering with property-based testing will be brittle.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 验证使用基于属性的测试进行特征工程时会变得脆弱。
- en: Data Creation Testing Strategy
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据创建测试策略
- en: 'Choosing the right testing strategy is crucial for ensuring robust and maintainable
    code. Here’s a breakdown of when and how to use different types of tests:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 选择正确的测试策略对于确保代码的健壮性和可维护性至关重要。以下是何时以及如何使用不同类型测试的概述：
- en: '**Unit Tests**: unit tests are ideal for validating individual functions. They
    can be fragile, often requiring updates or replacements as the code evolves. While
    useful early on, their relevance may diminish as the project progresses.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**：单元测试非常适合验证单独的函数。它们可能很脆弱，通常需要随着代码的演变进行更新或替换。虽然在项目初期非常有用，但随着项目的进展，它们的相关性可能会减少。'
- en: '**Property-Based Testing**: Best for cases where edge cases could be critical
    and requirements are stable. These tests are designed to cover a wide range of
    inputs and validate behavior under theoretical conditions, which makes them robust
    but sometimes complex to maintain.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于属性的测试**：最适合边缘情况可能至关重要且需求稳定的场景。这些测试旨在涵盖广泛的输入并验证在理论条件下的行为，使其具有鲁棒性，但有时也难以维护。'
- en: '**Component Tests**: These offer a practical balance, being easier to set up
    than property-based tests. Component tests effectively mimic real-world scenarios,
    and their relative simplicity allows for easier replication and adaptation. They
    provide a useful layer of testing that adapts well to changes in the system.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件测试**：这些测试提供了一个实用的平衡，比基于属性的测试更容易设置。组件测试有效地模拟了现实场景，它们相对简单，便于复制和适应。它们提供了一层有用的测试，能够很好地适应系统的变化。'
- en: '**Integration Tests**: Positioned to confirm the overall system correctness,
    integration tests blend a high-level view with enough detail to aid in debugging.
    They focus on the interaction between system parts under realistic conditions,
    generally checking the properties of outputs rather than exact values. This approach
    makes integration tests less precise but easier to maintain, avoiding the trap
    of tests becoming too cumbersome.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成测试**：集成测试用于确认整体系统的正确性，集成测试将高层视角与足够的细节相结合，有助于调试。它们侧重于系统各部分在现实条件下的交互，通常检查输出的属性而非确切值。这种方法使得集成测试的精确度较低，但更易于维护，避免了测试变得过于繁琐的陷阱。'
- en: '**Model Creation Testing**'
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**模型创建测试**'
- en: The next set of tests focuses on verifying whether the process of creating a
    model works properly. The distinction I make in this section, compared to tests
    related to artifacts, is that these tests do not require a lot of data and should
    be performed for every pull request.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 下一组测试重点验证创建模型的过程是否正确。与与工件相关的测试相比，我在这一部分做出的区别是，这些测试不需要大量的数据，应该在每个拉取请求（pull request）中执行。
- en: There are many types of tests to ensure the correctness of model training. Below
    is a non-exhaustive list of some crucial tests you should consider.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多类型的测试可以确保模型训练的正确性。以下是一些关键测试的非详尽列表，您应该考虑进行这些测试。
- en: '**Verify Training is Done Correctly**'
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**验证训练是否正确完成**'
- en: '**To verify correct training, track key indicators such as the loss function**;
    a consistently decreasing loss signals effective learning. For example, signs
    of overfitting by comparing performance on training and validation.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**为了验证正确的训练，跟踪关键指标，如损失函数**；持续递减的损失信号表示有效的学习。例如，通过比较训练和验证性能来识别过拟合的迹象。'
- en: 'The following code snippet validates that the training loss is monotonically
    decreasing:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段验证训练损失是否单调递减：
- en: Ensure the training process produces monotonically decreasing training losses,
    verifying the sanity of the metric during model training.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 确保训练过程产生单调递减的训练损失，验证在模型训练期间度量指标的合理性。
- en: The same strategy for verifying correct training applies to different modalities
    like NLP, LLM, and vision models.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 验证正确训练的相同策略适用于不同的模式，如自然语言处理（NLP）、大型语言模型（LLM）和视觉模型。
- en: '**Ability to Overfit**'
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**过拟合能力**'
- en: Test the model’s capacity to learn from a very small amount of data by making
    it overfit to this batch and checking for perfect alignment between predictions
    and labels. **This is important because it ensures that the model can effectively
    learn patterns and memorize data, which is a fundamental aspect of its learning
    capability.**
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通过让模型在非常少量的数据上过拟合，并检查预测和标签之间的完美对齐，测试模型从少量数据中学习的能力。**这很重要，因为它确保模型能够有效地学习模式并记忆数据，这是其学习能力的基本方面。**
- en: 'The following tests validate that given enough signal the model can learn:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下测试验证在有足够信号的情况下，模型能够学习：
- en: Verify that the model can overfit by introducing data leakage
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 通过引入数据泄露来验证模型是否会过拟合。
- en: The same strategy for verifying correct training applies to different modalities
    like NLP, LLM, and vision models.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 验证正确训练的相同策略适用于不同的模态，如自然语言处理（NLP）、大语言模型（LLM）和视觉模型。
- en: '**GPU/CPU Consistency**'
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**GPU/CPU 一致性**'
- en: Confirming that the model provides consistent output and performance on different
    computing platforms is crucial for reliability and reproducibility. This ensures
    that the model performs as expected across various environments, maintaining user
    trust and delivering a robust machine-learning solution.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 确保模型在不同计算平台上提供一致的输出和性能对可靠性和可重复性至关重要。这可以确保模型在各种环境中按预期运行，维护用户信任，并提供强大的机器学习解决方案。
- en: 'The following code snippet validate that the model gives the same predictions
    for CPU and GPU versions:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段验证模型在CPU和GPU版本上是否给出相同的预测：
- en: Verify that a model produces consistent predictions whether run on a GPU or
    CPU by comparing their outputs on the same input data.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 验证模型在GPU或CPU上运行时是否能产生一致的预测，通过比较它们在相同输入数据上的输出。
- en: The same strategy for verifying correct training applies to different modalities
    like NLP, LLM, and vision models.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 验证正确训练的相同策略适用于不同的模态，如自然语言处理（NLP）、大语言模型（LLM）和视觉模型。
- en: '**Training is Reproducible**'
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**训练是可复现的**'
- en: Ensuring the model training process can be consistently replicated is crucial
    for reliability and credibility. It facilitates debugging and aids collaboration
    and transparency.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 确保模型训练过程可以一致地复现对可靠性和可信度至关重要。这有助于调试、促进协作并增强透明度。
- en: 'The following code snippet validates the model training is reproducible:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段验证模型训练是否可复现：
- en: Verify the reproducibility of the training process by verifying that two models
    trained on the same data produce nearly identical predictions.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 通过验证在相同数据上训练的两个模型是否产生几乎相同的预测来验证训练过程的可重复性。
- en: The same strategy for verifying correct training applies to different modalities
    like NLP, LLM, and vision models.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 验证正确训练的相同策略适用于不同的模态，如自然语言处理（NLP）、大语言模型（LLM）和视觉模型。
- en: '**These tests run on small data to provide a sanity check that the model’s
    basic functionality makes sense.** Further validation and evaluation on larger
    datasets are necessary to ensure the model delivers real value and performs well
    in production in the following section.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**这些测试在小数据集上运行，以提供一个基本功能的合理性检查，确保模型的基本功能是合理的。** 在更大的数据集上进行进一步的验证和评估是必要的，以确保模型能够提供实际价值，并在生产环境中良好表现，下一部分将进一步说明。'
- en: 4\. **E2E Testing**
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. **端到端（E2E）测试**
- en: E2E testing in machine learning involves testing the combined parts of a pipeline
    to ensure they work together as expected. This includes data pipelines, feature
    engineering, model training, and model serialization and export. **The primary
    goal is to ensure that modules interact correctly when combined and that system
    and model standards are met.**
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习中的端到端测试涉及测试管道中各部分的组合，以确保它们按预期协同工作。这包括数据管道、特征工程、模型训练以及模型序列化和导出。**主要目标是确保模块在结合时正确交互，并且符合系统和模型的标准。**
- en: Conducting E2E tests reduces the risk of deployment failures and ensures effective
    production operation. It’s important to keep the assertion section not brittle,
    the goal of the integration test is to make sure the pipeline makes sense, not
    that it’s correct.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 进行端到端（E2E）测试可降低部署失败的风险，并确保有效的生产操作。保持断言部分不脆弱非常重要，集成测试的目标是确保管道是合理的，而不是确保它是正确的。
- en: Integration testing ensures cohesion by verifying that different parts of the
    machine learning workflow. It detects system-wide issues, such as data format
    inconsistencies and compatibility problems, and verifies end-to-end functionality,
    confirming that the system meets overall requirements from data collection to
    model output.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试通过验证机器学习工作流的不同部分来确保一致性。它检测系统范围的问题，如数据格式不一致和兼容性问题，并验证端到端功能，确认系统从数据收集到模型输出符合整体要求。
- en: '**Since machine learning systems are complex and brittle, You should add integration
    tests as early as possible.**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**由于机器学习系统复杂且脆弱，因此应尽早添加集成测试。**'
- en: 'The following snippet is integration tests of the entire ML pipeline:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下片段是整个机器学习管道的集成测试：
- en: Verify the end-to-end integration of the machine learning workflow, from data
    sampling to model training, exporting, and inference, ensuring the predictions
    are valid.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 验证机器学习工作流的端到端集成，从数据采样到模型训练、导出和推理，确保预测有效。
- en: Integration tests require careful planning due to their complexity and resource
    demands and execution time. Even for integration tests, smaller ones are better.
    These tests can be complex to set up and maintain, especially as systems scale
    and evolve.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 由于集成测试的复杂性、资源需求和执行时间，它们需要仔细规划。即使是集成测试，也应该尽量保持小规模。随着系统的扩展和演变，这些测试的设置和维护可能变得复杂。
- en: 5\. Artifact Testing
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5. 模型成果测试
- en: Once the model has been trained on a sufficiently large dataset, it is crucial
    to validate and evaluate the resulting model artifact. This section focuses on
    ensuring that the trained model not only functions correctly but also delivers
    meaningful and valuable predictions. Comprehensive validation and evaluation processes
    are necessary to confirm the model’s performance, robustness, and ability to generalize
    to new, unseen data.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模型在足够大的数据集上进行了训练，就必须验证和评估最终的模型成果。此部分侧重于确保训练后的模型不仅能正常工作，还能提供有意义和有价值的预测。全面的验证和评估过程对于确认模型的性能、鲁棒性以及在新数据上的泛化能力至关重要。
- en: There are many types of tests to ensure the correctness of model training. Below
    is a non-exhaustive list of some crucial tests you should consider.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为确保模型训练的正确性，存在多种类型的测试。以下是一些您应考虑的关键测试的非详尽列表。
- en: '**Model Inference Latency**'
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**模型推理延迟**'
- en: Measure how long the model takes to make predictions to ensure it meets performance
    criteria. In scenarios like Adtech, fraud detection, and e-commerce, the model
    must return results within a few milliseconds; otherwise, it cannot be used.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 测量模型进行预测所需的时间，以确保其符合性能标准。在广告技术、欺诈检测和电子商务等场景中，模型必须在几毫秒内返回结果；否则，它将无法使用。
- en: 'The following code snippet validates that model latency is acceptable:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段验证模型延迟是否在可接受范围内：
- en: This test asserts the inference latency of a trained model is made within 200
    milliseconds.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 该测试断言已训练模型的推理延迟在200毫秒内。
- en: The same strategy for verifying correct training applies to different modalities
    like NLP, LLM, and vision models.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 验证正确训练的相同策略适用于不同的模式，如自然语言处理（NLP）、大语言模型（LLM）和视觉模型。
- en: '**Metamorphic Testing Invariance Tests**'
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**变换测试的不变性测试**'
- en: Metamorphic testing involves creating tests that verify the consistency of a
    model’s behavior under certain transformations of the input data. Invariance tests
    are a specific type of metamorphic testing that focuses on the model’s stability
    by ensuring that changes in inputs that should be irrelevant do not affect the
    outputs.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 变换测试涉及创建验证模型在某些输入数据变换下行为一致性的测试。不变性测试是变换测试的一种特殊类型，侧重于通过确保应为无关的输入变化不影响输出，来验证模型的稳定性。
- en: 'The following code snippet aims to make sure a change in a column that should
    not affect the model prediction, actually doesn’t affect the model prediction:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段旨在确保一个不应影响模型预测的列变更，实际上并未影响模型预测：
- en: This test checks for model predictions to remain consistent when changing the
    “Embarked” feature to “B.”
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 该测试检查在将“Embarked”特征更改为“B”时，模型预测是否保持一致。
- en: It can be useful for other modalities as well. In NLP, an invariance metamorphic
    test could verify that adding punctuation or stopwords to a sentence does not
    alter the sentiment analysis outcome. In LLM applications, a test could ensure
    that rephrasing a question without changing its meaning does not affect the generated
    answer. In vision, an invariance test might check that minor changes in background
    color do not impact the image classification results.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于其他模态也很有用。在自然语言处理（NLP）中，不变性形态变化测试可以验证向句子中添加标点符号或停用词不会改变情感分析的结果。在大语言模型（LLM）应用中，测试可以确保在不改变含义的情况下重新措辞问题不会影响生成的答案。在计算机视觉中，不变性测试可能检查背景颜色的细微变化不会影响图像分类结果。
- en: '**Metamorphic Testing** **Directional Tests**'
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**形态变化测试** **方向性测试**'
- en: Metamorphic testing involves creating tests that verify the consistency of a
    model’s behavior under certain transformations of the input data. Directional
    tests, a subset of metamorphic testing, focus on ensuring that changes in relevant
    inputs lead to predictable logic in one direction in the outputs.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 形态变化测试（Metamorphic testing）涉及创建测试，以验证在输入数据的特定变换下，模型行为的一致性。方向性测试（Directional
    tests）是形态变化测试的一个子集，专注于确保相关输入的变化导致输出逻辑在一个方向上是可预测的。
- en: 'The following code snippet aims to make sure a change that travelers that paid
    mode will have better chances of surviving according to model prediction:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段旨在确保根据模型预测，支付模式更高的旅行者有更好的生存机会：
- en: This test ensures that the model’s predictions for the higher paying travel
    are higher on average.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 该测试确保模型对高支付旅行的预测结果更高，且平均值较高。
- en: It can be useful for other modalities as well, In NLP, a directional metamorphic
    test could involve verifying that increasing the length of a coherent text improves
    the language model’s perplexity score. In LLM applications, a test could ensure
    that adding more context to a question-answering prompt leads to more accurate
    and relevant answers.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于其他模态也很有用。在自然语言处理（NLP）中，方向性形态变化测试可能包括验证增加连贯文本的长度会改善语言模型的困惑度（perplexity）评分。在大语言模型（LLM）应用中，测试可以确保在问答提示中增加更多上下文会导致更准确和相关的答案。
- en: '**Model Learnt Reasonably**'
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**模型合理学习**'
- en: Ensure that the model achieves acceptable performance across the entire dataset,
    closely related to model evaluation, verifying its overall effectiveness and reliability.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 确保模型在整个数据集上达到了可接受的性能，这与模型评估密切相关，验证其整体效果和可靠性。
- en: 'The following code snippet that validates model performance is acceptable:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下验证模型性能的代码片段是可接受的：
- en: This test asserts the model’s performance achieves an AUC score greater than
    0.8.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 该测试断言模型的性能达到了大于0.8的AUC评分。
- en: It’s pretty common to have high-priority segments that need targeted testing
    to ensure comprehensive model evaluation. Identifying important use cases and
    testing them separately is crucial to make sure that a model update does not compromise
    them. For instance, in a cancer detection scenario, certain types of cancer, such
    as aggressive or late-stage cancers, maybe more critical to detect accurately
    than more treatable forms.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 高优先级的部分通常需要针对性的测试，以确保全面评估模型。识别重要的使用场景并单独测试它们至关重要，以确保模型更新不会影响这些场景。例如，在癌症检测场景中，某些类型的癌症（如侵袭性癌症或晚期癌症）可能比其他类型的癌症更为关键，需要更精确的检测。
- en: The same strategy for verifying correct training applies to different modalities
    like NLP, LLM, and vision models.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 验证正确训练的相同策略适用于不同模态，如自然语言处理（NLP）、大语言模型（LLM）和计算机视觉模型。
- en: Best Practices for ML Testing
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习测试的最佳实践
- en: '**Automate Tests**: this will ensure consistency and save time later.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动化测试**：这将确保一致性并节省后续的时间。'
- en: '**Be Pragmatic:** Perfect coverage isn’t necessary; each project has its own
    tolerance for errors.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**务实一些**：完美的覆盖率并不是必须的；每个项目都有其容错范围。'
- en: '**Avoid testing fatigue and understand the blast radius.**'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免测试疲劳并了解爆炸半径（blast radius）。**'
- en: '**Don’t Test External Libraries**'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要测试外部库**'
- en: '**Configurable Parameters**: Code should be composable. To test code, you want
    the DataFrame to be injectable to the test, and so on.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可配置参数**：代码应具备可组合性。为了测试代码，您希望能够将DataFrame注入到测试中，等等。'
- en: '**Tests Should Run in Reasonable Time**: Use small, simple data samples. If
    your test requires substantial time, consider when to run it. For example, it’s
    useful to create tests that can be executed manually or scheduled.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试应在合理的时间内运行**：使用小型、简单的数据样本。如果您的测试需要大量时间，请考虑何时运行它。例如，创建可以手动执行或安排的测试是有用的。'
- en: 'The following code snippet makes the CI run on demand and once a day:'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下代码片段使得CI可以按需运行，并且每天运行一次：
- en: Add the ability to trigger workflow on a daily schedule at midnight, and manually
    through a workflow dispatch.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 添加触发工作流的能力，在每天午夜按计划运行，并通过工作流调度手动触发。
- en: '**Contract Validation and Documentation**: Increase the use of assertions within
    your code to actively check for expected conditions (active comments), reducing
    the reliance on extensive unit testing.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**契约验证与文档：** 增加代码中断言的使用，主动检查预期条件（主动注释），减少对大量单元测试的依赖。'
- en: '**Prioritize Integration Tests**: While unit tests are crucial, integration
    tests ensure that components work together smoothly. Remember, the biggest lie
    in software development is, “I finished 99% of the code, I just need to integrate
    it.”'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先考虑集成测试：** 虽然单元测试至关重要，但集成测试确保各个组件能够顺利协同工作。记住，软件开发中最大的谎言是：“我完成了99%的代码，只需要进行集成。”'
- en: '**Continuous improvement**: When you encounter errors in production or during
    manual testing, include them in your testing suite.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续改进：** 当你在生产环境或手动测试中遇到错误时，将其纳入测试套件。'
- en: '**Avoid Mocking Your Functions**: Mocking your functions can lead to more work
    and a lot of false alarms.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免模拟你的函数：** 模拟函数可能会导致更多的工作和大量的误报。'
- en: '**Tests Should Aim to Represent Real Scenarios.**'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试应当尽量代表真实场景。**'
- en: '**Aim for Maintainable and Reliable Tests**: Address flaky tests that fail
    inconsistently. Flakiness is not linear; even a small percentage of failures can
    significantly impact overall reliability.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**力求编写可维护且可靠的测试：** 解决不稳定的测试问题。测试的不稳定性并非线性；即便是少量的失败也会显著影响整体可靠性。'
- en: '**Each Type of Test Has its Own Properties:** This table outlines the properties,
    advantages, and disadvantages of each testing strategy. While the table remains
    unchanged, the properties of each test may vary slightly depending on the use
    case.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**每种测试类型都有其独特的属性：** 该表格概述了每种测试策略的属性、优点和缺点。虽然表格保持不变，但每种测试的属性可能会根据具体使用场景有所不同。'
- en: '**Confidence Gain:** Ensures correctness of the system.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '**信心提升：** 确保系统的正确性。'
- en: '**Test Churn:** Indicates how often tests need updates or modifications.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试变更频率：** 表示测试需要更新或修改的频率。'
- en: '**Run Cost:** Represents the computational and time cost of executing the tests.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行成本：** 表示执行测试所需的计算和时间成本。'
- en: '**Case Variation:** Diversity of scenarios covered by the tests.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**案例变化：** 测试覆盖的场景多样性。'
- en: '**Pinpointing Issues:** Effectiveness in identifying and locating issues.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题定位：** 在识别和定位问题方面的有效性。'
- en: Last words
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的话
- en: In this article, we discussed the challenges of testing machine learning models.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们讨论了测试机器学习模型的挑战。
- en: I hope I was able to share my enthusiasm for this fascinating topic and that
    you find it useful. Feel free to reach out to me via [email](http://eyaltrabelsi@gmail.com/)
    or [LinkedIn](https://www.linkedin.com/in/eyaltrabelsi/).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望我能够分享我对这个迷人话题的热情，并且希望你觉得它有用。如有任何问题，请随时通过[电子邮件](http://eyaltrabelsi@gmail.com/)或[LinkedIn](https://www.linkedin.com/in/eyaltrabelsi/)与我联系。
- en: Thanks to [Almog Baku](https://medium.com/u/fbcd18957436) and [Ron Itzikovitch](https://medium.com/u/10fa2c0e33e8)
    for reviewing this post and making it much clearer.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢[Almog Baku](https://medium.com/u/fbcd18957436)和[Ron Itzikovitch](https://medium.com/u/10fa2c0e33e8)审阅本文并使其更清晰。
- en: 'The following testing resources are great :'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些很棒的测试资源：
- en: '- [Don’t Mock Machine Learning Models In Unit Tests](https://eugeneyan.com/writing/unit-testing-ml/)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '- [不要在单元测试中模拟机器学习模型](https://eugeneyan.com/writing/unit-testing-ml/)'
- en: '- [How to Test Machine Learning Code and Systems](https://eugeneyan.com/writing/testing-ml/)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '- [如何测试机器学习代码和系统](https://eugeneyan.com/writing/testing-ml/)'
- en: '- [Effective testing for machine learning systems](https://www.jeremyjordan.me/testing-ml/)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '- [有效的机器学习系统测试](https://www.jeremyjordan.me/testing-ml/)'
- en: '- [Metamorphic Testing of Machine-Learning Based Systems](/metamorphic-testing-of-machine-learning-based-systems-e1fe13baf048)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '- [机器学习系统的变异测试](/metamorphic-testing-of-machine-learning-based-systems-e1fe13baf048)'
