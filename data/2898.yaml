- en: 'Dunder Methods: The Hidden Gems of Python'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 双下划线方法：Python 的隐藏宝石
- en: 原文：[https://towardsdatascience.com/dunder-methods-the-hidden-gems-of-python-a234e29b192d?source=collection_archive---------0-----------------------#2024-11-30](https://towardsdatascience.com/dunder-methods-the-hidden-gems-of-python-a234e29b192d?source=collection_archive---------0-----------------------#2024-11-30)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/dunder-methods-the-hidden-gems-of-python-a234e29b192d?source=collection_archive---------0-----------------------#2024-11-30](https://towardsdatascience.com/dunder-methods-the-hidden-gems-of-python-a234e29b192d?source=collection_archive---------0-----------------------#2024-11-30)
- en: Real-world examples on how actively using special methods can simplify coding
    and improve readability.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过实际例子展示如何主动使用特殊方法可以简化编码并提高可读性。
- en: '[](https://medium.com/@federico.zabeo29?source=post_page---byline--a234e29b192d--------------------------------)[![Federico
    Zabeo](../Images/387bdad1380d507c9ace1cbea24a694c.png)](https://medium.com/@federico.zabeo29?source=post_page---byline--a234e29b192d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a234e29b192d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a234e29b192d--------------------------------)
    [Federico Zabeo](https://medium.com/@federico.zabeo29?source=post_page---byline--a234e29b192d--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@federico.zabeo29?source=post_page---byline--a234e29b192d--------------------------------)[![Federico
    Zabeo](../Images/387bdad1380d507c9ace1cbea24a694c.png)](https://medium.com/@federico.zabeo29?source=post_page---byline--a234e29b192d--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--a234e29b192d--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--a234e29b192d--------------------------------)
    [Federico Zabeo](https://medium.com/@federico.zabeo29?source=post_page---byline--a234e29b192d--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a234e29b192d--------------------------------)
    ·8 min read·Nov 30, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--a234e29b192d--------------------------------)
    ·阅读时长 8 分钟·2024 年 11 月 30 日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: Dunder methods, though possibly a basic topic in Python, are something I have
    often noticed being understood only superficially, even by people who have been
    coding for quite some time.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 双下划线方法，尽管可能是 Python 中的基础话题，但我常常注意到，即使是一些编程已经有相当经验的人，也常常只对其有表面的理解。
- en: '**Disclaimer:** This is a forgivable gap, as in most cases, actively using
    dunder methods “simply” speeds up and standardize tasks that can be done differently.
    Even when their use is essential, programmers are often unaware that they are
    writing special methods that belong to the broader category of dunder methods.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**免责声明：** 这是一个可以原谅的疏漏，因为在大多数情况下，主动使用双下划线方法（dunder methods）“简单地”加速和规范了那些本可以用其他方式完成的任务。即使它们的使用是必不可少的，程序员们也常常未意识到自己正在编写属于双下划线方法这一广泛类别的特殊方法。'
- en: Anyway, if you code in Python and are not familiar with this topic, or if you
    happen to be a code geek intrigued by the more native aspects of a programming
    language like I am, this article might just be what you’re looking for.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，如果你在 Python 中编程并且不熟悉这个话题，或者你恰好是像我一样对编程语言更原生的方面感兴趣的代码极客，这篇文章可能正是你在寻找的内容。
- en: '**Appearances can deceive… even in Python!**'
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**表面现象往往能欺骗你……即使是在 Python 中！**'
- en: If there is one thing I learned in my life is that not everything is what it
    seems like at a first look, and Python is no exception.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我在生活中学到了一件事，那就是并非一切如初看时所见，Python 也不例外。
- en: '![](../Images/07c8e26ee7f55de29278f00feb2ff468.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/07c8e26ee7f55de29278f00feb2ff468.png)'
- en: Photo by [Robert Katzki](https://unsplash.com/@ro_ka?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Robert Katzki](https://unsplash.com/@ro_ka?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'Let us consider a seemingly simple example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个看似简单的例子：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is the “emptiest” custom class we can define in Python, as we did not define
    attributes or methods. It is so empty you would think you can do nothing with
    it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在 Python 中可以定义的“最空的”自定义类，因为我们没有定义任何属性或方法。它空得让你以为根本无法做任何事情。
- en: 'However, this is not the case. For example, Python will not complain if you
    try to create an instance of this class or even compare two instances for equality:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事实并非如此。例如，Python 并不会抱怨你尝试创建这个类的实例，甚至也不会在比较两个实例是否相等时出错：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Of course, this is not magic. Simply, leveraging a standard ***object*** interface,
    any object in Python inherits some default attributes and methods that allow the
    user to always have a minimal set of possible interactions with it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这不是魔法。简单来说，通过利用一个标准的 ***object*** 接口，Python 中的任何对象都会继承一些默认的属性和方法，这些方法允许用户始终与其进行一组最小的交互。
- en: 'While these methods may seem hidden, they are not invisible. To access the
    available methods, including the ones assigned by Python itself, just use the
    ***dir()*** built-in function. For our empty class, we get:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些方法看起来可能隐藏，但它们并不是不可见的。要访问可用的方法，包括 Python 本身分配的那些方法，只需使用内建函数 ***dir()***。对于我们的空类，我们得到：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It is these methods that can explain the behaviour we observed earlier. For
    example, since the class actually has an ***__init__*** method we should not be
    surprised that we can instantiate an object of the class.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正是这些方法能够解释我们之前观察到的行为。例如，由于该类实际上具有 ***__init__*** 方法，因此我们不应感到惊讶，能够实例化该类的对象。
- en: '**Meet the Dunder Methods**'
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**认识 dunder 方法**'
- en: All the methods shown in the last output belongs to the special group of — guess
    what — dunder methods. The term “dunder” is short for double underscore, referring
    to the double underscores at the beginning and end of these method names.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个输出中显示的所有方法都属于特殊的——猜猜看——dunder 方法。术语“dunder”是“double underscore”（双下划线）的缩写，指的是这些方法名称前后各有的双下划线。
- en: 'They are special for several reasons:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 它们之所以特殊，有几个原因：
- en: '**They are built into every object**: every Python object is equipped with
    a specific set of dunder methods determined by its type.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**它们被内建到每个对象中**：每个 Python 对象都配备了一组特定的 dunder 方法，这些方法由其类型决定。'
- en: '**They are invoked implicitly**: many dunder methods are triggered automatically
    through interactions with Python’s native operators or built-in functions. For
    example, comparing two objects with ***==*** is equivalent to calling their ***__eq__***
    method.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**它们是隐式调用的**：许多 dunder 方法会通过与 Python 的原生运算符或内建函数的交互自动触发。例如，用 ***==*** 比较两个对象等同于调用它们的
    ***__eq__*** 方法。'
- en: '**They are customizable**: you can override existing dunder methods or define
    new ones for your classes to give them custom behavior while preserving their
    implicit invocation.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**它们是可定制的**：你可以重写现有的 dunder 方法，或者为你的类定义新的方法，以便为它们提供自定义行为，同时保持它们的隐式调用。'
- en: For most Python developers, the first dunder they encounter is ***__init__***,
    the constructor method. This method is automatically called when you create an
    instance of a class, using the familiar syntax ***MyClass(*args, **kwargs)***
    as a shortcut for explicitly calling ***MyClass.__init__(*args, **kwargs).***
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大多数 Python 开发者来说，遇到的第一个 dunder 方法是 ***__init__***，即构造方法。这个方法在你创建类的实例时自动调用，使用熟悉的语法
    ***MyClass(*args, **kwargs)*** 来简化显式调用 ***MyClass.__init__(*args, **kwargs)***。
- en: Despite being the most commonly used, ***__init__*** is also one of the most
    specialized dunder methods. It does not fully showcase the flexibility and power
    of dunder methods, which can allow you to redefine how your objects interact with
    native Python features.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管是最常用的，***__init__*** 也是最具专业性的 dunder 方法之一。它并未完全展示 dunder 方法的灵活性和强大功能，因为 dunder
    方法可以让你重新定义对象与 Python 本身功能的交互方式。
- en: Make an object pretty
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使对象更美观
- en: Let us define a class representing an item for sale in a shop and create an
    instance of it by specifying the name and price.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个表示商店中待售物品的类，并通过指定名称和价格来创建一个实例。
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'What happens if we try to display the content of the *item* variable? Right
    now, the best Python can do is tell us what type of object it is and where it
    is allocated in memory:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试显示 *item* 变量的内容，会发生什么？现在，Python 能做到的最好效果就是告诉我们它是什么类型的对象以及它在内存中的位置：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Let’s try to get a more informative and pretty output!
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试获取更具信息性和更漂亮的输出！
- en: '![](../Images/fd7e5e5454f250598838a4907fdd0424.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd7e5e5454f250598838a4907fdd0424.png)'
- en: Photo by [Shamblen Studios](https://unsplash.com/@shamblenstudios?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Shamblen Studios](https://unsplash.com/@shamblenstudios?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: To do that, we can override the ***__repr__*** dunder, which output will be
    exactly what gets printed when typing a class instance in the interactive Python
    console but also — as soon as the other dunder method ***__str__*** is not override
    — when attempting a ***print()*** call.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们可以重写 ***__repr__*** dunder 方法，其输出将正是当在交互式 Python 控制台中输入类实例时打印的内容，但同样——一旦其他
    dunder 方法 ***__str__*** 未被重写——当调用 ***print()*** 时也会发生同样的情况。
- en: '**Note**: it is a common practice to have ***__repr__*** provide the necessary
    syntax to recreate the printed instance. So in that latter case we expect the
    output to be *Item(name=”Milk (1L)”, price=0.99).*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：通常的做法是让***__repr__***提供必要的语法来重新创建打印的实例。因此，在后者的情况下，我们期望输出为*Item(name="Milk
    (1L)", price=0.99)*。'
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Nothing special, right? And you would be right: we could have implemented the
    same method and named it *my_custom_repr* without getting indo dunder methods.
    However, while anyone immediately understands what we mean with ***print(item)***
    or just ***item***, can we say the same for something like ***item.my_custom_repr()***?'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 没什么特别的，对吧？你说得对：我们本可以实现相同的方法并将其命名为*my_custom_repr*，而无需使用双下划线方法。然而，虽然每个人都能立刻理解我们通过***print(item)***或仅仅***item***表示的意思，但我们能否说出类似***item.my_custom_repr()***的东西呢？
- en: '**Define interaction between an object and Python’s native operators**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义对象与Python原生运算符之间的交互**'
- en: Imagine we want to create a new class*, Grocery*, that allows us to build a
    collection of *Item* along with their quantities.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要创建一个新的类*Grocery*，它允许我们构建一个*Item*的集合以及它们的数量。
- en: 'In this case, we can use dunder methods for allowing some standard operations
    like:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以使用双下划线方法来允许一些标准操作，如：
- en: Adding a specific quantity of *Item* to the *Grocery* using the ***+*** operator
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用***+***运算符向*Grocery*中添加特定数量的*Item*
- en: Iterating directly over the *Grocery* class using a ***for*** loop
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用***for***循环直接迭代*Grocery*类
- en: Accessing a specific Item from the Grocery class using the bracket ***[]***
    notation
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用括号***[]***符号从Grocery类中访问特定的Item
- en: To achieve this, we will **define (**we already see thata generic class do not
    have these methods by default) the dunder methods ***__add__***, ***__iter__***
    and ***__getitem__*** respectively.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们将**定义**（我们已经看到，通用类默认没有这些方法）双下划线方法***__add__***、***__iter__***和***__getitem__***。
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let us initialize a *Grocery* instance and print the content of its main attribute,
    *items.*
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们初始化一个*Grocery*实例并打印其主要属性*items*的内容。
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Then, we use the ***+*** operator to add a new Item and verify the changes have
    taken effect.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用***+***运算符添加一个新的Item，并验证更改已生效。
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Friendly and explicit, right?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 友好且明确，对吧？
- en: The ***__iter__*** method allows us to loop through a *Grocery* object following
    the logic implemented in the method (i.e., implicitly the loop will iterate over
    the elements contained in the iterable attribute *items*).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '***__iter__***方法允许我们根据方法中实现的逻辑循环遍历*Grocery*对象（即，隐式地，循环将迭代包含在可迭代属性*items*中的元素）。'
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Similarly, accessing elements is handled by defining the ***__getitem__***
    dunder:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，访问元素是通过定义***__getitem__***双下划线方法来处理的：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In essence, we assigned some standard dictionary-like behaviours to our Grocery
    class while also allowing some operations that would not be natively available
    for this data type.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，我们为Grocery类分配了一些标准的字典般行为，同时还允许了一些此数据类型本不具备的操作。
- en: '**Enhance functionality: make classes callable for simplicity and power.**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**增强功能：使类可调用以简化和增强功能。**'
- en: Let us wrap up this deep-dive on dunder methods with a final eample showcasing
    how they can be a powerful tool in our arsenal.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个最终示例来总结这个深入探讨的双下划线方法，展示它们如何成为我们工具库中的强大工具。
- en: '![](../Images/98a9fbb88437116ee9565a35777a3ad6.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/98a9fbb88437116ee9565a35777a3ad6.png)'
- en: Photo by [Marek Studzinski](https://unsplash.com/@jccards?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Marek Studzinski](https://unsplash.com/@jccards?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Imagine we have implemented a function that performs deterministic and slow
    calculations based on a certain input. To keep things simple, as an example we
    will use an identity function with a built-in ***time.sleep*** of some seconds.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们实现了一个根据特定输入执行确定性和缓慢计算的函数。为了简化，我们将使用一个带有内置***time.sleep***几秒钟的恒等函数作为示例。
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: What happens if we run the function twice on the same input? Well, right now
    calculation would be executed twice, meaning that we twice get the same output
    waiting two time for the whole execution time (i.e., a total of 10 seconds).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对相同的输入运行两次该函数会发生什么？好吧，现在计算会执行两次，这意味着我们要等待整个执行时间（即总共10秒）才能得到两次相同的输出。
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Does this make sense? Why should we do the same calculation (which leads to
    the same output) for the same input, especially if it’s a slow process?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这样说有道理吗？为什么我们要对相同的输入执行相同的计算（并得到相同的输出），尤其是当它是一个缓慢的过程时？
- en: One possible solution is to “wrap” the execution of this function inside the
    ***__call__*** dunder method of a class.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一种可能的解决方案是将此函数的执行“包装”在类的 ***__call__*** 双下划线方法中。
- en: This makes instances of the class callable just like functions — meaning we
    can use the straightforward syntax ***my_class_instance(*args, **kwargs)*** —
    while also allowing us to use attributes as a cache to cut computation time.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得类的实例可以像函数一样调用——意味着我们可以使用简单的语法 ***my_class_instance(*args, **kwargs)*** ——同时也允许我们使用属性作为缓存，从而减少计算时间。
- en: With this approach we also have the flexibility to create multiple process (i.e.,
    class instances), each with its own local cache.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这种方法，我们还可以灵活地创建多个进程（即类实例），每个进程都有自己的本地缓存。
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As expected, the function is cached after the first run, eliminating the need
    for the second computation and thus cutting the overall time in half.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，函数在第一次运行后被缓存，消除了第二次计算的需求，从而将整体时间减少了一半。
- en: As above mentioned, we can even create separate instances of the class, each
    with its own cache, if needed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们甚至可以在需要时创建该类的独立实例，每个实例都有自己的缓存。
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here we are! A simple yet powerful optimization trick made possible by dunder
    methods that not only reduces redundant calculations but also offers flexibility
    by allowing local, instance-specific caching.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们到了！这是一个简单而强大的优化技巧，通过双下划线方法（dunder methods）实现，不仅减少了冗余计算，还通过允许本地实例特定的缓存提供了灵活性。
- en: My final considerations
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我的最终思考
- en: Dunder methods are a broad and ever-evolving topic, and this writing does not
    aim to be an exhaustive resource on the subject (for this purpose, you can refer
    to the [3\. Data model — Python 3.12.3 documentation](https://docs.python.org/3/reference/datamodel.html)).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 双下划线方法是一个广泛且不断发展的主题，这篇文章并不旨在成为该主题的详尽资料（如果需要，您可以参考[3. 数据模型 — Python 3.12.3 文档](https://docs.python.org/3/reference/datamodel.html)）。
- en: My goal here was rather to explain clearly what they are and how they can be
    used effectively to handle some common use cases.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里的目标是清晰地解释它们是什么，以及如何有效地使用它们来处理一些常见的使用场景。
- en: While they may not be mandatory for all programmers all the time, once I got
    a good grasp of how they work they have made a ton of difference for me and hopefully
    they may work for you as well.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它们对于所有程序员来说并非总是必需的，但一旦我掌握了它们的工作原理，它们对我产生了极大的帮助，并且希望它们也能对你有所帮助。
- en: Dunder methods indeed are a way to avoid reinventing the wheel. They also align
    closely with Python’s philosophy, leading to a more concise, readable and convention-friendly
    code. And that never hurts, right?
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 双下划线方法的确是一种避免重新发明轮子的方式。它们也与 Python 的哲学紧密契合，从而导致更简洁、可读且符合约定的代码。而这一点永远不会有坏处，对吧？
