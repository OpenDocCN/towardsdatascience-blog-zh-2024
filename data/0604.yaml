- en: Visualizing Dynamical Behavior in Agent-Based Models
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在基于代理的模型中可视化动态行为
- en: 原文：[https://towardsdatascience.com/visualizing-dynamical-behavior-in-agent-based-models-70bb81dc0e93?source=collection_archive---------9-----------------------#2024-03-05](https://towardsdatascience.com/visualizing-dynamical-behavior-in-agent-based-models-70bb81dc0e93?source=collection_archive---------9-----------------------#2024-03-05)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/visualizing-dynamical-behavior-in-agent-based-models-70bb81dc0e93?source=collection_archive---------9-----------------------#2024-03-05](https://towardsdatascience.com/visualizing-dynamical-behavior-in-agent-based-models-70bb81dc0e93?source=collection_archive---------9-----------------------#2024-03-05)
- en: '![](../Images/535063d1630e3ce67be8af53598f0beb.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/535063d1630e3ce67be8af53598f0beb.png)'
- en: And encountering emergent complexity along the way
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并在过程中遇到涌现的复杂性
- en: '[](https://medium.com/@Dani_Lisle?source=post_page---byline--70bb81dc0e93--------------------------------)[![Dani
    Lisle](../Images/2933bbbca26cf198e7964547a91b2751.png)](https://medium.com/@Dani_Lisle?source=post_page---byline--70bb81dc0e93--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--70bb81dc0e93--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--70bb81dc0e93--------------------------------)
    [Dani Lisle](https://medium.com/@Dani_Lisle?source=post_page---byline--70bb81dc0e93--------------------------------)'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@Dani_Lisle?source=post_page---byline--70bb81dc0e93--------------------------------)[![Dani
    Lisle](../Images/2933bbbca26cf198e7964547a91b2751.png)](https://medium.com/@Dani_Lisle?source=post_page---byline--70bb81dc0e93--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--70bb81dc0e93--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--70bb81dc0e93--------------------------------)
    [Dani Lisle](https://medium.com/@Dani_Lisle?source=post_page---byline--70bb81dc0e93--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--70bb81dc0e93--------------------------------)
    ·9 min read·Mar 5, 2024
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--70bb81dc0e93--------------------------------)
    ·阅读时间 9 分钟 ·2024年3月5日
- en: --
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: In my research into streamlining strategic knowledge extraction in game theoretic
    problems, I recently realized that I needed a better way to simply and intuitively
    visualize the behavior of agents with defined dynamical behavior.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在我进行博弈论问题中战略知识提取优化的研究时，我最近意识到我需要一种更好的方式来简单直观地可视化具有定义的动态行为的代理行为。
- en: This led me to build a simple library for visualizing agent behavior as an animation
    using PyPlot. But before jumping into the tutorial, here’s a quick catch-up on
    the core concepts at play here.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这促使我建立了一个简单的库，用于通过 PyPlot 将代理行为可视化为动画。但在进入教程之前，先简要回顾一下这里涉及的核心概念。
- en: A Quick Primer on Dynamical Agent-Based Modeling
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态代理模型的快速入门
- en: Agent based modeling (ABM) offers an excellent way to simulate players in many
    game theoretic environments. It lets us model and study the behavior and cognitive
    processes of each individual player, rather than just analyzing trends. When it
    isn’t practical to represent agents using simplistic binary state machines like
    cellular automata grids, ABM lets us capture scenarios by representing the agents’
    positions in a dimensional space, where each dimension has its own unique rules.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 基于代理的建模（ABM）提供了一种优秀的方式来模拟许多博弈论环境中的玩家。它让我们能够模拟和研究每个个体玩家的行为和认知过程，而不仅仅是分析趋势。当使用简化的二元状态机（如细胞自动机网格）表示代理不切实际时，ABM
    让我们通过在一个维度空间中表示代理的位置来捕捉场景，在这个空间中，每个维度都有自己独特的规则。
- en: Agents in Position and State Space
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代理的位置和状态空间
- en: By utilizing both spatial and state dimensions we can accurately model proximity
    as well as incorporate attributes that allow for subtle interactions, such as
    similarity in characteristics. Furthermore, storing the “positions” of agents
    in state space allow us to keep track of and compare detailed and dynamic state
    information about agents (i.e. a player’s fatigue in a model of football).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用空间维度和状态维度，我们可以准确地建模接近度，并结合允许细微交互的属性，比如特征的相似性。此外，将代理的“位置”存储在状态空间中，让我们能够跟踪并比较代理的详细和动态状态信息（例如，在一个足球模型中玩家的疲劳状态）。
- en: Compared to network models, wherein the existence of connections between two
    objects indicate relationships, position-state-space information lets us to define
    and explore more complex and higher-dimensional relationships between agents.
    In this paradigm, Euclidean distance in state-space could represent a strong measure
    of the state similarity between two agents.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与网络模型相比，后者通过两个对象之间的连接来表示关系，而位置-状态-空间信息则允许我们定义并探索代理之间更复杂、更高维的关系。在这种范式中，欧几里得距离在状态空间中的度量可以表示两个代理之间状态相似度的强度。
- en: Dynamical Systems Theory for Behavior and Interaction
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于行为和交互的动力学系统理论
- en: We can make such a model even more powerful by using dynamical systems theory
    to describe how the state of one agent influences those of others. It provides
    a robust way to define rules a system’s evolution over time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用动力学系统理论来描述一个代理的状态如何影响其他代理的状态，从而使这种模型变得更加强大。它提供了一种强有力的方法来定义系统随时间演化的规则。
- en: In socioeconomic systems, differential equations can be used to model communication,
    mimicry, and more complex adaptive processes, as well as describe how individual
    actions can produce group dynamics.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在社会经济系统中，微分方程可以用来模拟交流、模仿以及更复杂的适应性过程，并且描述个体行为如何产生群体动态。
- en: Visualization Needs in Time and Space
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在时间和空间中的可视化需求
- en: For my problem, I wanted to be able see the position of each agent and its movement
    over time at a glance, and some basic state information (i.e. one or two variables
    per agent).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我的问题，我希望能够一目了然地看到每个代理的位置及其随时间的移动，并且展示一些基本的状态信息（即每个代理的一个或两个变量）。
- en: There are currently several libraries that meet the need for visualizing ABMs,
    including NetLogo and Mesa (for Python). However, they are built primarily for
    visualizing discrete-space, rather than continuous-space models. For my purposes,
    I was interested in the latter, and so began the side quest. If you’d like to
    follow along or test out the code for yourself, it’s all stored at [github.com/dreamchef/abm-viz](https://github.com/dreamchef/abm-dynamics-viz).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，有几个库满足了可视化代理基础模型（ABM）的需求，包括NetLogo和Mesa（Python版）。然而，它们主要是为了可视化离散空间模型，而非连续空间模型。对于我的目的，我对后者更感兴趣，因此开始了这个附带任务。如果你想跟着一起学习或亲自测试代码，所有代码都存储在[github.com/dreamchef/abm-viz](https://github.com/dreamchef/abm-dynamics-viz)。
- en: Building the Classes and Animation in Python
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python中构建类和动画
- en: For starters, I needed to represent and store the agents and the world, and
    their state and dynamics. I chose to do this using Python classes. I defined an
    Agent class with a set of variables that I thought might be relevant to many possible
    modeling tasks. I also defined a plottable circle object (with PyPlot) for each
    agent within the class structure.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我需要表示和存储代理和世界的状态及其动态。我选择使用Python类来实现这一点。我定义了一个Agent类，并为其设置了一组我认为对许多可能的建模任务有用的变量。我还为每个代理在类结构内定义了一个可绘制的圆形对象（使用PyPlot）。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, after a bit of experimentation, I found that it in the spirit of good
    objected-oriented programming principles, it would be best to define a World (think
    game or system) class as well. In included both the state information for the
    world and the information for the plots and axes in the class structure:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在进行了一些实验后，我发现按照良好的面向对象编程原则，定义一个世界（想象成游戏或系统）类是最好的做法。在这个类的结构中，既包括了世界的状态信息，也包含了图形和坐标轴的信息：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: I wrote this class so that the programmer can simply specify the desired number
    of agents (along with other parameters such as a world size and spawn area size)
    rather than manually creating and adding agents in the main section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我编写这个类是为了让程序员能够简单地指定所需的代理数量（以及世界大小、生成区域大小等其他参数），而不是在主程序中手动创建和添加代理。
- en: 'With this basic structure defined and agents being generated with randomized
    positions and initial velocities in the world, I then used PyPlot library’s animation
    features to create a method which would begin the visualization:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了这个基本结构并且在世界中生成了具有随机位置和初始速度的代理后，我使用了PyPlot库的动画功能来创建一个方法，开始进行可视化：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This function references the figure, stored in the World instance, some specifications
    for the speed and length of the animation, and an update function, which is also
    defined in the World class:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数引用了存储在World实例中的图形、动画的速度和时长的规格，以及一个更新函数，后者也在World类中定义：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The World.updatePosition function simply added each agent’s static velocity
    to the current position. This preliminary work was able to generate simple animations
    like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: World.updatePosition 函数仅将每个代理的静态速度添加到当前位置。这项初步工作能够生成像这样的简单动画：
- en: '![](../Images/62630e7bd868ec7c0f0e00b752b71c05.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/62630e7bd868ec7c0f0e00b752b71c05.png)'
- en: Constant Velocities
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 恒定速度
- en: With this basic functionality, we’d now like to be able to visualize more interesting
    dynamics.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个基本功能，我们现在希望能够可视化更有趣的动态。
- en: Visualizing “Social” Dynamic Behavior
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化“社会”动态行为
- en: 'I first chose to define a dynamic where each agent would change its direction
    of movement based on the average direction of movement of other agents around
    it. In equation form:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先选择定义一个动态，其中每个代理根据周围其他代理的平均运动方向改变自己的运动方向。用方程形式表示：
- en: '![](../Images/3a277f060187732ccbdba91e6e82777d.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3a277f060187732ccbdba91e6e82777d.png)'
- en: 'I encoded the dynamic in Python via an Agent.updatePosition() and an Agent.updateVelocity()
    method, which are run on each animation frame:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我通过 Agent.updatePosition() 和 Agent.updateVelocity() 方法在 Python 中编码了该动态，这些方法在每一帧动画中运行：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the PyPlot animation below, the agents begin with very different velocities,
    but quickly adjust and begin traveling in the same direction. In this case, the
    average direction was roughly upward in the Y-direction at first.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的 PyPlot 动画中，代理从不同的速度开始，但很快就调整并开始朝同一方向移动。在这种情况下，平均方向最初大致是 Y 方向上的向上。
- en: '![](../Images/c71a52a10d0d946ff5df87bb544bff4b.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c71a52a10d0d946ff5df87bb544bff4b.png)'
- en: Converging Upward
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 向上汇聚
- en: This time, the group had initialized with a roughly leftward velocity with one
    “straggling”, who quickly adjusts.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，群体初始化时大致以向左的速度运动，并且有一个“滞后者”，它很快调整过来。
- en: '![](../Images/fc77372a07139faeff1b8014388fb0f4.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fc77372a07139faeff1b8014388fb0f4.png)'
- en: Single Straggler to Leftward Convergence
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 单个滞后者向左汇聚
- en: Displaying Velocity Vectors
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示速度向量
- en: 'Next I realized it would be helpful to see the velocity of the agents more
    clearly, so I implemented arrows to show each agent’s magnitude and direction:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我意识到将代理的速度显示得更加清晰会很有帮助，所以我实现了箭头来显示每个代理的大小和方向：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: That modification gave more helpful animations like this one. We can still notice
    the converging-velocities dynamic at a glance, but see the rates of acceleration
    more clearly now as well.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这一修改带来了更有帮助的动画，例如这个。我们仍然可以一眼看到速度汇聚的动态，但现在可以更清楚地看到加速度的变化率。
- en: '![](../Images/8322d6407c8d74f5dbba398bd6d03b5a.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8322d6407c8d74f5dbba398bd6d03b5a.png)'
- en: Velocity Arrows
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 速度箭头
- en: For the animation above, I also adjusting the dynamic to be dependent on a sight
    range variable. In other words, agents only adjust their velocities to match agents
    that are nearby (within 300 units in this case).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上面的动画，我还调整了动态，使其依赖于一个视距变量。换句话说，代理只会调整它们的速度，以匹配附近的代理（在这种情况下为 300 单位以内）。
- en: I also modified the code so that each agent would only modify its direction
    of movement, not its speed. Keep this in mind for the next section.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我还修改了代码，使得每个代理只修改其运动方向，而不是速度。请在下一个部分中记住这一点。
- en: More Complex, State-Wise Dynamics
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更复杂的状态—逐个动态
- en: Up until this point, I had only implemented dynamics which considered the positions
    and velocities of each agent. But as I alluded to in the overview section, consider
    non-spatial, state information as well can make our modeling approach much more
    generalizable.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我只实现了考虑每个代理位置和速度的动态。但正如我在概述部分提到的，考虑非空间的状态信息也可以使我们的建模方法更加具有广泛的适用性。
- en: Using Agent Hue and Saturation To Represent State Variables
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用代理的色调和饱和度来表示状态变量
- en: I made use an auxiliary state tied to the RGB color of each agent. Foreshadowing
    the evolutionary game theoretic goals of my research, I call this the agent “species”,
    and implement it as follows.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我利用了一个与每个代理的 RGB 颜色相关联的辅助状态。预示着我研究的进化博弈理论目标，我将其称为代理的“物种”，并如下实现：
- en: 'In the Agent.__init__ method, I added random species generation and individual
    mapping to the color of the agent’s marker on the plot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Agent.__init__ 方法中，我添加了随机物种生成，并将个体映射到代理在图中的标记颜色：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Specifically, I assigned this to the hue of the object, to reserve the saturation
    (roughly grey-ness) for other variables of potential interest (i.e. remaining
    lifespan or health). This practice of dividing hue and saturation has precedent
    in the visualization of complex-valued functions, which I go into in [this article](https://medium.com/towards-data-science/today-i-was-pouring-through-my-complex-variables-and-analytic-functions-book-written-by-the-e9205f71485d).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我将这个分配给了物体的色调，将饱和度（大致是灰度）保留给其他潜在有趣的变量（例如剩余寿命或健康）。这种将色调和饱和度分开的做法在复数值函数的可视化中已有先例，我在[这篇文章](https://medium.com/towards-data-science/today-i-was-pouring-through-my-complex-variables-and-analytic-functions-book-written-by-the-e9205f71485d)中有详细介绍。
- en: Dependence of Acceleration on Species State Variable
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加速度对物种状态变量的依赖
- en: With examples of herding behavior in nature that occurs between animals of the
    same species, but not between those of differing species, I decided to change
    our toy dynamics to consider species. This change meant that each agent will only
    modify its direction for agents that are sufficiently close in the world and sufficiently
    similar in species (i.e. similarly colored circles).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在自然界中，群体行为通常发生在同一物种的动物之间，而不同物种之间则不会发生这种行为。基于这一点，我决定将我们的玩具动力学修改为考虑物种的因素。这一改变意味着，每个代理只会对世界中足够接近且物种相似的代理（即颜色相似的圆圈）调整方向。
- en: 'Now, this is where things, began to get **very, very interesting**. Before
    you continue reading, ask yourself:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，事情开始变得**非常，非常有趣**了。在继续阅读之前，问问自己：
- en: '*What behavior do you expect to see in the next animation?*'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*你期待在下一个动画中看到什么样的行为？*'
- en: A relatively naive experimenter (such as myself most of the time) would expect
    agents to organize themselves by species and travel in herds, with each herd tending
    to travel in different directions and mostly ignoring each other. To see if either
    of us is right, let’s continue.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一个相对天真的实验者（比如大多数时候的我）会期望代理们按物种组织自己，并成群结队地移动，每群代理通常朝不同方向移动，并大多数情况下互不理睬。为了看看我们是否正确，接着往下看。
- en: 'To encode this behavior I modified the calculation of herd velocity with respect
    to an agent in the following way:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编码这种行为，我修改了与代理相关的群体速度计算，方式如下：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That change resulted in animations like this one. To see the interesting behavior
    here, I started recording this about 20 seconds into the animation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这一变化导致了像这样的动画。为了看到其中有趣的行为，我在动画开始大约20秒后开始录制。
- en: '![](../Images/72c034b975c1a23e2db32ccf1cc87b42.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/72c034b975c1a23e2db32ccf1cc87b42.png)'
- en: Emergent Behavior
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 涌现行为
- en: It’s okay if the behavior isn’t immediately obvious. It’s subtle. And if you
    think you predicted it correctly, great job!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果行为没有立刻显现出来也没关系。这是微妙的。如果你认为自己预测正确，做得很好！
- en: As it turned out, the agents didn’t organize themselves into herds by species
    very well at all. Instead, the only agents who seem to stick together are the
    ones who have both similar species and similar travel speed. You can see this
    happening most often with the slower green agents, the pair of blue agents, and
    the fast blue and purple agents shooting across the bottom of the screen. Notably,
    the agents seem to prioritize speed over species similarity when “choosing” who
    to travel with. You can see this most often with the light, dark blue, and even
    purple agents.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，代理们并没有很好地按物种组织成群。相反，唯一似乎聚在一起的代理是那些既有相似物种又有相似旅行速度的代理。你可以最常见地看到这种现象发生在速度较慢的绿色代理、那对蓝色代理，以及在屏幕底部快速移动的蓝色和紫色代理之间。值得注意的是，代理似乎在“选择”与谁一起旅行时，更看重速度而非物种相似性。你可以在浅蓝色、深蓝色，甚至紫色代理之间最常看到这种现象。
- en: This makes perfect sense in the dynamics we defined, since each agent’s speed
    is constant, and agents with different speeds will ultimately fall behind or run
    away from their comrades. And yet, its somewhat surprising.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这在我们定义的动态中是完全合理的，因为每个代理的速度是恒定的，速度不同的代理最终会落后或者甩开他们的同伴。然而，这有点出乎意料。
- en: Fundamentally, this is because the behavior is emergent. In other words, we
    didn’t explicitly tell the agents to behave in this way as a group. Rather, they
    “derived” this behavior from the simple set of instructions, which we gave to
    each individual agent in an identical encoded format.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上讲，这是因为行为是涌现的。换句话说，我们并没有明确告诉代理按这种方式作为一个群体来表现。相反，他们从我们给每个代理的相同编码格式的简单指令中“推导”出了这种行为。
- en: Visualization, Emergence, and Data Insights
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化、涌现与数据洞察
- en: We began this journey with the simple goal of visualizing an ABM to make sure
    on a high level that the dynamics we would set up would work as intended. But
    in addition to accomplishing this, we stumbled upon an emergent behavior which
    we may not have even considered when creating the model.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们开始这段旅程的简单目标是可视化一个ABM，以确保我们设置的动态在高层次上能够按预期工作。但除了实现这一目标外，我们还偶然发现了一个可能在创建模型时根本没有考虑过的涌现行为。
- en: This illustrates an important partnership with respect to visualization in data
    science, simulations, and modeling across the board. Discovering emergent behavior
    in complex systems can be accelerated by new perspectives on the model or dataset.
    This isn’t only true for agent-based modeling. It applies to obtaining insights
    across the rest of data science as well. And creating new and creative visualizations
    provides a sure-fire way to get such perspectives.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这说明了在数据科学、模拟和建模领域，关于可视化的重要合作关系。通过对模型或数据集的新视角，可以加速发现复杂系统中的涌现行为。这不仅仅适用于基于代理的建模，它同样适用于在数据科学的其他领域获得洞见。而且，创建新的富有创意的可视化图像提供了一种确保获得此类视角的有效途径。
- en: If you’d like to play around with this model and visualization further, you
    can get the code at [github.com/dreamchef/abm-viz](https://github.com/dreamchef/abm-dynamics-viz).
    I’d love to hear what else you may find, or your thoughts on my work, in the comments!
    Feel free to reach out to me on [Twitter](https://twitter.com/dani_lisle) and
    [LinkedIn](https://www.linkedin.com/in/danilisle/) as well. Have a great day!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想进一步尝试这个模型和可视化，你可以在[github.com/dreamchef/abm-viz](https://github.com/dreamchef/abm-dynamics-viz)获取代码。我很想听听你发现的其他内容，或者对我的工作的看法，欢迎在评论中告诉我！也可以随时通过[Twitter](https://twitter.com/dani_lisle)和[LinkedIn](https://www.linkedin.com/in/danilisle/)与我联系。祝你有个愉快的一天！
- en: '*Unless otherwise noted, all images and animations were created by the author.*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*除非另有说明，所有图像和动画均由作者创建。*'
