- en: 'Interpretable Outlier Detection: Frequent Patterns Outlier Factor (FPOF)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可解释的异常值检测：频繁模式异常值因子（FPOF）
- en: 原文：[https://towardsdatascience.com/interpretable-outlier-detection-frequent-patterns-outlier-factor-fpof-0d9cbf51b17a?source=collection_archive---------0-----------------------#2024-05-25](https://towardsdatascience.com/interpretable-outlier-detection-frequent-patterns-outlier-factor-fpof-0d9cbf51b17a?source=collection_archive---------0-----------------------#2024-05-25)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/interpretable-outlier-detection-frequent-patterns-outlier-factor-fpof-0d9cbf51b17a?source=collection_archive---------0-----------------------#2024-05-25](https://towardsdatascience.com/interpretable-outlier-detection-frequent-patterns-outlier-factor-fpof-0d9cbf51b17a?source=collection_archive---------0-----------------------#2024-05-25)
- en: An outlier detector method that supports categorical data and provides explanations
    for the outliers flagged
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一种支持分类数据并为标记为异常值的数据提供解释的异常值检测方法
- en: '[](https://medium.com/@wkennedy934?source=post_page---byline--0d9cbf51b17a--------------------------------)[![W
    Brett Kennedy](../Images/b3ce55ffd028167326c117d47c64c467.png)](https://medium.com/@wkennedy934?source=post_page---byline--0d9cbf51b17a--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0d9cbf51b17a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0d9cbf51b17a--------------------------------)
    [W Brett Kennedy](https://medium.com/@wkennedy934?source=post_page---byline--0d9cbf51b17a--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@wkennedy934?source=post_page---byline--0d9cbf51b17a--------------------------------)[![W
    Brett Kennedy](../Images/b3ce55ffd028167326c117d47c64c467.png)](https://medium.com/@wkennedy934?source=post_page---byline--0d9cbf51b17a--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--0d9cbf51b17a--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--0d9cbf51b17a--------------------------------)
    [W Brett Kennedy](https://medium.com/@wkennedy934?source=post_page---byline--0d9cbf51b17a--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0d9cbf51b17a--------------------------------)
    ·10 min read·May 25, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--0d9cbf51b17a--------------------------------)
    ·阅读时间10分钟·2024年5月25日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: 'Outlier detection is a common task in machine learning. Specifically, it’s
    a form of unsupervised machine learning: analyzing data where there are no labels.
    It’s the act of finding items in a dataset that are unusual relative to the others
    in the dataset.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 异常值检测是机器学习中的一个常见任务。具体来说，它是一种无监督机器学习：分析没有标签的数据。它是从数据集中找到相对于其他数据项而言非常不寻常的项目。
- en: There can be many reasons to wish to identify outliers in data. If the data
    being examined is accounting records and we’re interested in finding errors or
    fraud, there are usually far too many transactions in the data to examine each
    manually, and it’s necessary to select a small, manageable number of transactions
    to investigate. A good starting point can be to find the most unusual records
    and examine these; this is with the idea the errors and fraud should both be rare
    enough to stand out as outliers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据中识别异常值可能有多种原因。如果所检查的数据是会计记录，且我们有兴趣查找错误或欺诈，数据中的交易通常太多，无法逐一手动检查，因此需要选择少量可管理的交易进行调查。一个好的起点是找到最不寻常的记录并进行检查；这一做法的假设是错误和欺诈应该足够罕见，以至于能够作为异常值突出显示。
- en: That is, not all outliers will be interesting, but errors and fraud will likely
    be outliers, so when looking for these, identifying the outliers can be a very
    practical technique.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，并非所有异常值都是有趣的，但错误和欺诈很可能是异常值，因此在寻找这些时，识别异常值可以是一个非常实用的技巧。
- en: Or, the data may contain credit card transactions, sensor readings, weather
    measurements, biological data, or logs from websites. In all cases, it can be
    useful to identify the records suggesting errors or other problems, as well as
    the most interesting records.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，数据可能包含信用卡交易、传感器读数、天气测量、生物数据或网站日志。在所有这些情况下，识别可能表示错误或其他问题的记录，以及最有趣的记录，都非常有用。
- en: Often as well, outlier detection is used as part of business or scientific discovery,
    to better understand the data and the processes being described in the data. With
    scientific data, for example, we’re often interested in finding the most unusual
    records, as these may be the most scientifically interesting.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 异常值检测通常也作为商业或科学发现的一部分，用于更好地理解数据以及数据中描述的过程。例如，在科学数据中，我们通常对找到最不寻常的记录感兴趣，因为这些记录可能是最具科学价值的。
- en: The need for interpretability in outlier detection
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异常值检测中的可解释性需求
- en: 'With classification and regression problems, it’s often preferable to use interpretable
    models. This can result in lower accuracy (with tabular data, the highest accuracy
    is usually found with boosted models, which are quite uninterpretable), but is
    also safer: we know how the models will handle unseen data. But, with classification
    and regression problems, it’s also common to not need to understand why individual
    predictions are made as they are. So long as the models are reasonably accurate,
    it may be sufficient to just let them make predictions.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于分类和回归问题，通常更倾向于使用可解释的模型。这样可能会导致较低的准确性（对于表格数据，通常使用提升模型能够获得最高的准确性，而这些模型通常是难以解释的），但也更安全：我们知道模型如何处理未见过的数据。但在分类和回归问题中，通常也不需要理解为何做出个别的预测。只要模型的准确性足够高，简单地让模型进行预测可能就足够了。
- en: With outlier detection, though, the need for interpretability is much higher.
    Where an outlier detector predicts a record is very unusual, if it’s not clear
    why this may be the case, we may not know how to handle the item, or even if we
    should believe it is anomalous.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于异常值检测来说，对可解释性的需求要高得多。当异常值检测器预测某一记录非常不寻常时，如果我们不清楚为什么会这样，我们可能不知道该如何处理这个项，甚至是否应该相信它是异常的。
- en: In fact, in many situations, performing outlier detection can have limited value
    if there isn’t a good understanding of why the items flagged as outliers were
    flagged. If we are checking a dataset of credit card transactions and an outlier
    detection routine identifies a series of purchases that appear to be highly unusual,
    and therefore suspicious, we can only investigate these effectively if we know
    what is unusual about them. In some cases this may be obvious, or it may become
    clear after spending some time examining them, but it is much more effective and
    efficient if the nature of the anomalies is clear from when they are discovered.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在许多情况下，如果没有很好地理解为什么某些被标记为异常值的项被标记为异常，进行异常值检测可能会有很有限的价值。如果我们正在检查一个信用卡交易数据集，并且异常值检测程序识别出一系列看起来非常不寻常的购买，因而认为这些购买是可疑的，我们只能有效地调查这些异常值，前提是我们知道这些异常之处在哪里。在某些情况下，这可能是显而易见的，或者在花些时间审查之后会变得清楚，但如果异常的性质从一开始就能明确，那么这样会更有效率和效果。
- en: As with classification and regression, in cases where interpretability is not
    possible, it is often possible to try to understand the predictions using what
    are called post-hoc (after-the-fact) explanations. These use XAI (Explainable
    AI) techniques such as feature importances, proxy models, ALE plots, and so on.
    These are also very useful and will also be covered in future articles. But, there
    is also a very strong benefit to having results that are clear in the first place.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 与分类和回归一样，当无法解释时，通常可以尝试通过所谓的事后解释（post-hoc explanations）来理解预测结果。这些解释使用了XAI（可解释人工智能）技术，如特征重要性、代理模型、ALE图等。这些方法也非常有用，未来的文章中会进一步讨论。但在一开始就拥有清晰的结果也是非常有利的。
- en: In this article, we look specifically at tabular data, though will look at other
    modalities in later articles. There are a number of algorithms for outlier detection
    on tabular data commonly used today, including Isolation Forests, Local Outlier
    Factor (LOF), KNNs, One-Class SVMs, and quite a number of others. These often
    work very well, but unfortunately most do not provide explanations for the outliers
    found.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本文专门讨论表格数据，但将在后续文章中讨论其他形式的数据。目前，常用的表格数据异常值检测算法有多个，包括Isolation Forests、局部异常因子（LOF）、KNN、单类支持向量机（One-Class
    SVM）等。这些算法通常表现良好，但不幸的是，大多数算法并不提供对找到的异常值的解释。
- en: Most outlier detection methods are straightforward to understand at an algorithm
    level, but it is nevertheless difficult to determine why some records were scored
    highly by a detector and others were not. If we process a dataset of financial
    transactions with, for example, an Isolation Forest, we can see which are the
    most unusual records, but may be at a loss as to why, especially if the table
    has many features, if the outliers contain rare combinations of multiple features,
    or the outliers are cases where no features are highly unusual, but multiple features
    are moderately unusual.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数异常值检测方法在算法层面上容易理解，但要确定为什么某些记录被检测器评分较高而其他记录没有，仍然是很困难的。如果我们使用例如Isolation Forest处理一个财务交易数据集，我们可以看到哪些记录是最不寻常的，但可能无法理解其原因，特别是当数据表有许多特征，异常值包含多个特征的罕见组合，或者异常值是那些没有单一特征特别不寻常，但多个特征中等不寻常的情况。
- en: Frequent Patterns Outlier Factor (FPOF)
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 频繁模式异常值因子（FPOF）
- en: We’ve now gone over, at least quickly, outlier detection and interpretability.
    The remainder of this article is an excerpt from my book Outlier Detection in
    Python ([https://www.manning.com/books/outlier-detection-in-python](https://www.manning.com/books/outlier-detection-in-python)),
    which covers FPOF specifically.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经快速浏览了异常检测和可解释性的内容。本文其余部分摘自我写的《Python中的异常检测》一书（[https://www.manning.com/books/outlier-detection-in-python](https://www.manning.com/books/outlier-detection-in-python)），专门讲解FPOF。
- en: 'FPOF ([FP-outlier: Frequent pattern based outlier detection](https://www.semanticscholar.org/paper/FP-outlier%3A-Frequent-pattern-based-outlier-He-Xu/3e9e34df7fbbc4445e6d17b7ecd600bc6d54232d))
    is one of a small handful of detectors that can provide some level of interpretability
    for outlier detection and deserves to be used in outlier detection more than it
    is.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 'FPOF（[FP-outlier: Frequent pattern based outlier detection](https://www.semanticscholar.org/paper/FP-outlier%3A-Frequent-pattern-based-outlier-He-Xu/3e9e34df7fbbc4445e6d17b7ecd600bc6d54232d)）是少数几种能够为异常检测提供某种程度可解释性的检测器之一，值得在异常检测中得到更多的应用。'
- en: It also has the appealing property of being designed to work with categorical,
    as opposed to numeric, data. Most real-world tabular data is mixed, containing
    both numeric and categorical columns. But, most detectors assume all columns are
    numeric, requiring all categorical columns to be numerically encoded (using one-hot,
    ordinal, or another encoding).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有一个吸引人的特点，就是它是专门设计用于处理类别型数据，而不是数值型数据的。大多数现实世界中的表格数据是混合型的，包含了数值型和类别型列。但大多数检测器假设所有列都是数值型的，这就需要将所有类别型列进行数值编码（使用独热编码、顺序编码或其他编码方式）。
- en: 'Where detectors, such as FPOF, assume the data is categorical, we have the
    opposite issue: all numeric features must be binned to be in a categorical format.
    Either is workable, but where the data is primarily categorical, it’s convenient
    to be able to use detectors such as FPOF.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当像FPOF这样的检测器假设数据是类别型时，我们遇到的问题恰恰相反：所有数值型特征必须进行分箱，才能转化为类别型格式。这两种方式都可行，但当数据主要是类别型时，能够使用像FPOF这样的检测器非常方便。
- en: And, there’s a benefit when working with outlier detection to have at our disposal
    both some numeric detectors and some categorical detectors. As there are, unfortunately,
    relatively few categorical detectors, FPOF is also useful in this regard, even
    where interpretability is not necessary.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行异常检测时，拥有一些数值型检测器和一些类别型检测器是非常有益的。不幸的是，类别型检测器相对较少，因此FPOF在这方面也很有用，即使在不需要可解释性的情况下。
- en: The FPOF algorithm
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: FPOF算法
- en: FPOF works by identifying what are called *Frequent Item Sets* (FISs) in a table.
    These are either values in a single feature that are very common, or sets of values
    spanning several columns that frequently appear together.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: FPOF通过识别表格中所谓的*频繁项集*（FISs）来工作。这些项集可以是某一特征中非常常见的值，也可以是跨越多个列、经常一起出现的值集合。
- en: 'Almost all tables contain a significant collection of FISs. FISs based on single
    values will occur so long as some values in a column are significantly more common
    than others, which is almost always the case. And FISs based on multiple columns
    will occur so long as there are associations between the columns: certain values
    (or ranges of numeric values) tend to be associated with other values (or, again,
    ranges of numeric values) in other columns.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有表格都包含大量的频繁项集。基于单一值的频繁项集会出现在某些列中的某些值显著比其他值更常见的情况下，这几乎是永远成立的。基于多个列的频繁项集会出现在这些列之间存在关联的情况下：某些值（或数值范围）往往与其他列中的值（或数值范围）关联。
- en: FPOF is based on the idea that, so long as a dataset has many frequent item
    sets (which almost all do), then most rows will contain multiple frequent item
    sets and inlier (normal) records will contain significantly more frequent item
    sets than outlier rows. We can take advantage of this to identify outliers as
    rows that contain much fewer, and much less frequent, FISs than most rows.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: FPOF的核心思想是，只要一个数据集包含许多频繁项集（几乎所有数据集都有），那么大多数行将包含多个频繁项集，而正常（内点）记录将包含比异常行更多的频繁项集。我们可以利用这一点，将异常行识别为那些包含的频繁项集远少于大多数行的记录。
- en: Example with real-world data
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用真实数据的示例
- en: For a real-world example of using FPOF, we look at the SpeedDating set from
    OpenML ([https://www.openml.org/search?type=data&sort=nr_of_likes&status=active&id=40536](https://www.openml.org/search?type=data&sort=nr_of_likes&status=active&id=40536),
    licensed under CC BY 4.0 DEED).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用FPOF的真实世界示例中，我们来看一下OpenML上的SpeedDating数据集（[https://www.openml.org/search?type=data&sort=nr_of_likes&status=active&id=40536](https://www.openml.org/search?type=data&sort=nr_of_likes&status=active&id=40536)，遵循CC
    BY 4.0 DEED协议）。
- en: Executing FPOF begins with mining the dataset for the FISs. A number of libraries
    are available in Python to support this. For this example, we use mlxtend ([https://rasbt.github.io/mlxtend/](https://rasbt.github.io/mlxtend/)),
    a general-purpose library for machine learning. It provides several algorithms
    to identify frequent item sets; we use one here called *apriori*.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 FPOF 从挖掘数据集中的频繁项集开始。Python 中有许多库可以支持这一操作。在这个示例中，我们使用 mlxtend（[https://rasbt.github.io/mlxtend/](https://rasbt.github.io/mlxtend/)），这是一个通用的机器学习库。它提供了几种算法来识别频繁项集；我们在这里使用了其中一种名为
    *apriori* 的算法。
- en: We first collect the data from OpenML. Normally we would use all categorical
    and (binned) numeric features, but for simplicity here, we will just use only
    a small number of features.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先从 OpenML 收集数据。通常我们会使用所有的分类特征和（分箱的）数值特征，但为了简化起见，在这里我们只使用少量特征。
- en: As indicated, FPOF does require binning the numeric features. Usually we’d simply
    use a small number (perhaps 5 to 20) equal-width bins for each numeric column.
    The pandas cut() method is convenient for this. This example is even a little
    simpler, as we just work with categorical columns.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，FPOF 确实需要对数值特征进行分箱。通常，我们会对每个数值列使用少量（大约 5 到 20 个）等宽的分箱。pandas 的 cut() 方法在这方面非常方便。这个示例甚至更简单，因为我们只处理分类列。
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The apriori algorithm requires all features to be one-hot encoded. For this,
    we use panda’s get_dummies() method.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: apriori 算法要求所有特征都必须进行独热编码。为此，我们使用 pandas 的 get_dummies() 方法。
- en: We then call the apriori method to determine the frequent item sets. Doing this,
    we need to specify the minimum support, which is the minimum fraction of rows
    in which the FIS appears. We don’t want this to be too high, or the records, even
    the strong inliers, will contain few FISs, making them hard to distinguish from
    outliers. And we don’t want this too low, or the FISs may not be meaningful, and
    outliers may contain as many FISs as inliers. With a low minimum support, apriori
    may also generate a very large number of FISs, making execution slower and interpretability
    lower. In this example, we use 0.3.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们调用 apriori 方法来确定频繁项集。在这个过程中，我们需要指定最小支持度，即频繁项集出现的最小行数比例。我们不希望这个值太高，否则记录，即使是强内点，也会包含很少的频繁项集，从而难以与异常值区分开。我们也不希望这个值太低，否则频繁项集可能没有意义，而且异常值和内点可能包含相同数量的频繁项集。较低的最小支持度也可能导致
    apriori 生成大量的频繁项集，导致执行变慢并降低可解释性。在这个例子中，我们使用 0.3。
- en: It’s also possible, and sometimes done, to set restrictions on the size of the
    FISs, requiring they relate to between some minimum and maximum number of columns,
    which may help narrow in on the form of outliers you’re most interested in.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以，且有时会，设置 FIS 的大小限制，要求它们与某些最小和最大列数相关，这有助于缩小你最感兴趣的异常值形式。
- en: The frequent item sets are then returned in a pandas dataframe with columns
    for the support and the list of column values (in the form of the one-hot encoded
    columns, which indicate both the original column and value).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，频繁项集以 pandas 数据框的形式返回，其中包含支持度和列值列表（以独热编码列的形式，指示原始列和值）。
- en: 'To interpret the results, we can first view the frequent_itemsets, shown next.
    To include the length of each FIS we add:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解释结果，我们可以首先查看频繁项集，下面展示了这一部分。为了包括每个频繁项集的长度，我们添加了：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are 24 FISs found, the longest covering three features. The following
    table shows the first ten rows, sorting by support.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 找到了 24 个频繁项集，最长的涵盖了三个特征。下表展示了前十行，按支持度排序。
- en: '![](../Images/0bef8be40f6bb2f89b2fac3967a29d57.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0bef8be40f6bb2f89b2fac3967a29d57.png)'
- en: We then loop through each frequent item set and increment the score for each
    row that contains the frequent item set by the support. This can optionally be
    adjusted to favor frequent item sets of greater lengths (with the idea that a
    FIS with a support of, say 0.4 and covering 5 columns is, everything else equal,
    more relevant than an FIS with support of 0.4 covering, say, 2 columns), but for
    here we simply use the number and support of the FISs in each row.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们遍历每个频繁项集，并通过支持度为每一行中包含该频繁项集的记录增加得分。这个过程可以选择性地调整，以偏向更长的频繁项集（因为支持度为 0.4 且覆盖
    5 列的频繁项集，相较于支持度为 0.4 且覆盖 2 列的频繁项集，在其他条件相同的情况下，更具相关性），但在此我们仅使用每行中频繁项集的数量和支持度。
- en: 'This actually produces a score for normality and not outlierness, so when we
    normalize the scores to be between 0.0 and 1.0, we reverse the order. The rows
    with the highest scores are now the strongest outliers: the rows with the least
    and the least common frequent item sets.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上产生了一个关于正常性而非异常性的得分，因此当我们将得分标准化为介于 0.0 和 1.0 之间时，我们会反转顺序。得分最高的行现在是最强的异常值：那些包含最少和最少常见频繁项集的行。
- en: 'Adding the score column to the original dataframe and sorting by the score,
    we see the most normal row:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 将得分列添加到原始数据框并按得分排序后，我们可以看到最正常的行：
- en: '![](../Images/cd5b92569ca1a82ec11831d8bfc66202.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cd5b92569ca1a82ec11831d8bfc66202.png)'
- en: We can see the values for this row match the FISs well. The value for d_pref_o_attractive
    is [21–100], which is an FIS (with support 0.36); the values for d_pref_o_ambitious
    and d_pref_o_shared_interests are [0–15] and [0–15], which is also an FIS (support
    0.59). The other values also tend to match FISs.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到这一行的值与 FIS 匹配得很好。`d_pref_o_attractive` 的值是 [21–100]，这是一个 FIS（支持度 0.36）；`d_pref_o_ambitious`
    和 `d_pref_o_shared_interests` 的值分别是 [0–15] 和 [0–15]，这也是一个 FIS（支持度 0.59）。其他值也倾向于匹配
    FIS。
- en: The most unusual row is shown next. This matches none of the identified FISs.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来展示的是最不寻常的行。该行与任何已识别的 FIS 都不匹配。
- en: '![](../Images/205f2f8164d00c184faec829190df103.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/205f2f8164d00c184faec829190df103.png)'
- en: As the frequent item sets themselves are quite intelligible, this method has
    the advantage of producing reasonably interpretable results, though this is less
    true where many frequent item sets are used.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由于频繁项集本身非常易于理解，这种方法具有产生合理可解释结果的优势，尽管当使用多个频繁项集时这一点的适用性较差。
- en: '![](../Images/2c12b426d1fa6cdee6a4eae3d9713570.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2c12b426d1fa6cdee6a4eae3d9713570.png)'
- en: The interpretability can be reduced, as outliers are identified not by containing
    FISs, but by not, which means explaining a row’s score amounts to listing all
    the FISs it does not contain. However, it is not strictly necessary to list all
    missing FISs to explain each outlier; listing a small set of the most common FISs
    that are missing will be sufficient to explain outliers to a decent level for
    most purposes. Statistics about the the FISs that are present and the the normal
    numbers and frequencies of the FISs present in rows provides good context to compare.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 可解释性可能会降低，因为异常值是通过不包含 FIS 来识别的，而不是通过包含 FIS，这意味着解释一行的得分就等于列出它没有包含的所有 FIS。然而，解释每个异常值时，并不严格需要列出所有缺失的
    FIS；列出一小组最常见的缺失 FIS 就足以为大多数目的提供合理的异常值解释。关于存在的 FIS 及其在行中出现的正常数值和频率的统计数据，能够为比较提供良好的背景。
- en: One variation on this method uses the infrequent, as opposed to frequent, item
    sets, scoring each row by the number and rarity of each infrequent itemset they
    contain. This can produce useful results as well, but is significantly more computationally
    expensive, as many more item sets need to be mined, and each row is tested against
    many FISs. The final scores can be more interpretable, though, as they are based
    on the item sets found, not missing, in each row.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的一种变体是使用不频繁的项集，而不是频繁的项集，通过每一行所包含的不频繁项集的数量和稀有度来对其进行评分。这也可以产生有用的结果，但计算开销要大得多，因为需要挖掘更多的项集，并且每一行都要与多个
    FIS 进行测试。尽管如此，最终的得分可能更具可解释性，因为它们是基于每一行中找到的项集，而不是缺失的项集。
- en: Conclusions
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Other than the code here, I am not aware of an implementation of FPOF in python,
    though there are some in R. The bulk of the work with FPOF is in mining the FISs
    and there are numerous python tools for this, including the mlxtend library used
    here. The remaining code for FPOP, as seen above, is fairly simple.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这里的代码外，我不知道 Python 中有 FPOF 的实现，尽管 R 中有一些实现。FPOF 的主要工作是挖掘 FIS，而有许多 Python 工具可以用来进行这一操作，包括这里使用的
    mlxtend 库。剩余的 FPOP 代码，如上所示，相对简单。
- en: Given the importance of interpretability in outlier detection, FPOF can very
    often be worth trying.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于异常检测中可解释性的重要性，FPOF 很可能值得尝试。
- en: In future articles, we’ll go over some other interpretable methods for outlier
    detection as well.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的文章中，我们还将介绍一些其他可解释的异常检测方法。
- en: All images are by author
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所有图像均由作者提供
