- en: How to Read OSM Data with DuckDB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 DuckDB 读取 OSM 数据
- en: 原文：[https://towardsdatascience.com/how-to-read-osm-data-with-duckdb-ffeb15197390?source=collection_archive---------0-----------------------#2024-03-02](https://towardsdatascience.com/how-to-read-osm-data-with-duckdb-ffeb15197390?source=collection_archive---------0-----------------------#2024-03-02)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/how-to-read-osm-data-with-duckdb-ffeb15197390?source=collection_archive---------0-----------------------#2024-03-02](https://towardsdatascience.com/how-to-read-osm-data-with-duckdb-ffeb15197390?source=collection_archive---------0-----------------------#2024-03-02)
- en: A deep dive into OpenStreetMap data structure and how to utilize it in a scalable
    way
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入探索 OpenStreetMap 数据结构及其如何以可扩展的方式使用
- en: '[](https://raczeq.medium.com/?source=post_page---byline--ffeb15197390--------------------------------)[![Kamil
    Raczycki](../Images/2c45075e217e60660ad3b4475530333d.png)](https://raczeq.medium.com/?source=post_page---byline--ffeb15197390--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--ffeb15197390--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--ffeb15197390--------------------------------)
    [Kamil Raczycki](https://raczeq.medium.com/?source=post_page---byline--ffeb15197390--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://raczeq.medium.com/?source=post_page---byline--ffeb15197390--------------------------------)[![Kamil
    Raczycki](../Images/2c45075e217e60660ad3b4475530333d.png)](https://raczeq.medium.com/?source=post_page---byline--ffeb15197390--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--ffeb15197390--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--ffeb15197390--------------------------------)
    [Kamil Raczycki](https://raczeq.medium.com/?source=post_page---byline--ffeb15197390--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--ffeb15197390--------------------------------)
    ·29 min read·Mar 2, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--ffeb15197390--------------------------------)
    ·29 分钟阅读·2024年3月2日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/1b9c4439391aa4851cbe3131de09a318.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1b9c4439391aa4851cbe3131de09a318.png)'
- en: 'Dall-E 3 image: Adorable and cute 3D render duck studying a paper map, bright
    sky, with blur background, high quality, 8k'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Dall-E 3 图像：一只可爱且迷人的 3D 渲染鸭子正在研究纸质地图，明亮的天空，模糊的背景，高质量，8k
- en: This article will provide an in-depth look at how to read OpenStreetMap data
    using the DuckDB database.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将深入探讨如何使用 DuckDB 数据库读取 OpenStreetMap 数据。
- en: The steps described in this guide will allow the reader to load the OSM data
    using the Monaco example divided into nodes, ways, and relations.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南中描述的步骤将允许读者使用 Monaco 示例加载 OSM 数据，并将数据分为节点、路径和关系。
- en: '![](../Images/d0ebfd971420ab909f885f939cc1ca64.png)![](../Images/0ff4cf3693bfcbf785e16967120a527e.png)![](../Images/05b73197def9157df492056b089d8d72.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d0ebfd971420ab909f885f939cc1ca64.png)![](../Images/0ff4cf3693bfcbf785e16967120a527e.png)![](../Images/05b73197def9157df492056b089d8d72.png)'
- en: 'The final result of OSM elements read using the DuckDB engine. From the left:
    nodes, ways and relations. Generated by the author using GeoPandas library.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 DuckDB 引擎读取 OSM 元素的最终结果。从左至右：节点、路径和关系。由作者使用 GeoPandas 库生成。
- en: A basic knowledge of the SQL language is expected to fully understand the steps
    described in this tutorial. Most of the GIS-related operations and special joins
    are described further in the article.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完全理解本教程中描述的步骤，预期具备 SQL 语言的基本知识。大多数与 GIS 相关的操作和特殊连接将在文章中进一步描述。
- en: Outline of the article
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文章大纲
- en: What is OSM? — introduction to the OSM service.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 OSM？——OpenStreetMap 服务简介。
- en: OpenStreetMap data model — definition of objects used in the OSM.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenStreetMap 数据模型——定义了在 OSM 中使用的对象。
- en: Reading OSM data — basic operations on the data using DuckDB.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取 OSM 数据——使用 DuckDB 对数据进行基本操作。
- en: Constructing point geometries from the **nodes**
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**节点**中构建点几何体
- en: Constructing linestring and polygon geometries from the **ways**
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**路径**中构建线段和多边形几何体
- en: Constructing polygon and multi-polygon geometries from the **relations**
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从**关系**中构建多边形和多重多边形几何体
- en: Examples of badly defined relation objects
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义不规范的关系对象示例
- en: QuackOSM — a hassle-free tool for reading OSM data
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QuackOSM —— 一款轻松读取 OSM 数据的工具
- en: What is OSM?
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 OSM？
- en: OpenStreetMap ([OSM](https://openstreetmap.org/)) is the most popular free map
    of the world and it's kept alive by a growing base of volunteers and contributors.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: OpenStreetMap（[OSM](https://openstreetmap.org/)）是全球最受欢迎的免费地图，并由日益增长的志愿者和贡献者群体持续维护。
- en: The data collected and built by the community is available publicly for free
    and commercial purposes, so many companies, academic researchers and individual
    developers use this resource in their projects. All data is provided under the
    [Open Data Commons Open Database License](https://opendatacommons.org/licenses/odbl/1.0/)
    (ODbL).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 社区收集并构建的数据可以公开免费用于商业目的，因此许多公司、学术研究人员和个人开发者都在他们的项目中使用这些资源。所有数据都遵循[开放数据公共开源数据库许可证](https://opendatacommons.org/licenses/odbl/1.0/)（ODbL）。
- en: 'The data can be accessed in multiple ways:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可以通过多种方式访问：
- en: Using Overpass API (with Web GUI at [Overpass Turbo](https://overpass-turbo.eu/))
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Overpass API（通过[Overpass Turbo](https://overpass-turbo.eu/)的Web GUI）
- en: Downloading full data as [Planet OSM](https://planet.openstreetmap.org/) (currently
    over 70 GB in 2024)
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载完整数据作为[Planet OSM](https://planet.openstreetmap.org/)（2024年当前超过70GB）
- en: 'Smaller extract downloads: [Geofabrik](https://download.geofabrik.de/), [BBBike](https://extract.bbbike.org/),
    [OpenStreetMap.fr](https://download.openstreetmap.fr/), [Protomaps](https://app.protomaps.com/)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 较小的下载提取： [Geofabrik](https://download.geofabrik.de/), [BBBike](https://extract.bbbike.org/),
    [OpenStreetMap.fr](https://download.openstreetmap.fr/), [Protomaps](https://app.protomaps.com/)
- en: The most space-efficient file type in which the data is stored is Protocolbuffer
    Binary Format with an extension `*.osm.pbf` . You can read more about it [here](https://wiki.openstreetmap.org/wiki/PBF_Format).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 数据存储的最节省空间的文件类型是Protocolbuffer二进制格式，扩展名为`*.osm.pbf`。你可以[在这里](https://wiki.openstreetmap.org/wiki/PBF_Format)了解更多信息。
- en: 'You can also read this short article about OpenStreetMap from [Eugenia Anello](https://medium.com/u/86fdc517c278?source=post_page---user_mention--ffeb15197390--------------------------------):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以阅读[Eugenia Anello](https://medium.com/u/86fdc517c278?source=post_page---user_mention--ffeb15197390--------------------------------)关于OpenStreetMap的简短文章：
- en: '[](/a-comprehensive-guide-for-getting-started-with-openstreetmap-e92dff95fc80?source=post_page-----ffeb15197390--------------------------------)
    [## A comprehensive guide for getting started with OpenStreetMap'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[](/a-comprehensive-guide-for-getting-started-with-openstreetmap-e92dff95fc80?source=post_page-----ffeb15197390--------------------------------)
    [## OpenStreetMap入门指南'
- en: Learn the basics concepts of OpenStreetMap while practising using the website
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在使用网站时学习OpenStreetMap的基本概念
- en: towardsdatascience.com](/a-comprehensive-guide-for-getting-started-with-openstreetmap-e92dff95fc80?source=post_page-----ffeb15197390--------------------------------)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: towardsdatascience.com](/a-comprehensive-guide-for-getting-started-with-openstreetmap-e92dff95fc80?source=post_page-----ffeb15197390--------------------------------)
- en: OpenStreetMap data model
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenStreetMap数据模型
- en: This section is based on [OSM Wiki page](https://wiki.openstreetmap.org/wiki/Elements)
    about Elements
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本节内容基于关于元素的[OSM Wiki页面](https://wiki.openstreetmap.org/wiki/Elements)
- en: 'Conceptually the data in OpenStreetMap is split into 3 components:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从概念上讲，OpenStreetMap中的数据分为3个组件：
- en: Nodes represent points in space. They are represented by a pair of coordinates
    in a WGS84 Coordinate Reference System — longitude and latitude. Nodes can be
    used to define a single feature on a map (eg. bench, lamp post, tree) or be used
    with other nodes to represent a shape of a way.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 节点表示空间中的点。它们通过WGS84坐标参考系统中的一对坐标表示——经度和纬度。节点可以用来定义地图上的单一特征（例如：长椅、路灯、树木），或者与其他节点一起用来表示路径的形状。
- en: '![](../Images/d1b8a31585dcda83fce64f09a495b165.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d1b8a31585dcda83fce64f09a495b165.png)'
- en: Example of a node — a tree in the park. Screenshot from the OpenStreetMap by
    the author.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一个节点的示例——公园里的树。来自OpenStreetMap的截图，作者提供。
- en: Ways are shapes representing a polyline by using an **ordered** list of nodes.
    Those polylines can be open and represent roads, canals, and walls, or they can
    be closed to form a polygon and represent buildings, forests, lakes or other simple
    shapes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 路径是通过使用**有序**节点列表表示的折线形状。这些折线可以是开放的，表示道路、运河和墙壁，或者它们可以闭合形成多边形，表示建筑物、森林、湖泊或其他简单形状。
- en: '![](../Images/66e199dab95b9bcb14552b0375443a37.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66e199dab95b9bcb14552b0375443a37.png)'
- en: Example of a way — a part of a highway road. Screenshot from the OpenStreetMap
    by the author.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个路径的示例——一部分高速公路。来自OpenStreetMap的截图，作者提供。
- en: 'Relations represent relationships between multiple objects and data elements
    defined in the OSM. This could be for example a bus route with ways showing roads
    on which the bus travels and nodes showing stops of a route, or a multi polygon
    with holes represented by at least 2 ways: these can be an *outer* polygon and
    an *inner* polygon.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 关系表示OSM中多个对象和数据元素之间的关系。例如，这可以是一个公交路线，其中路线表示公交行驶的道路，节点表示路线的站点，或者是一个由至少2个路径表示的带孔的多边形：这些可以是*外部*多边形和*内部*多边形。
- en: '![](../Images/638f80e316ca63427f0d70bd3f89cf98.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/638f80e316ca63427f0d70bd3f89cf98.png)'
- en: An example of a relation— a hotel building outline with holes. Screenshot from
    the OpenStreetMap by the author.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关系的示例——一个带有孔洞的酒店建筑轮廓。截图来自作者的OpenStreetMap。
- en: Each element can, but doesn’t have to, have **tags** attached. Tags describe
    the meaning of the element. They are composed of a key and a value. There is no
    fixed dictionary of those values, but users should stay within conventions documented
    in the OSM Wiki.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 每个元素可以，也不一定，附带**标签**。标签描述元素的含义。标签由键和值组成。没有固定的值字典，但用户应遵循OSM Wiki中记录的约定。
- en: Additionally, each element has an ID that is unique in a given element type
    space (so there can be a node with ID = 100, a way with ID = 100 and a relation
    with ID = 100).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，每个元素都有一个在特定元素类型空间中唯一的ID（因此可能存在一个ID为100的节点、ID为100的路径和ID为100的关系）。
- en: Reading OSM data
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取OSM数据
- en: Many tools allow users to transform the OSM data model to file formats commonly
    used in the GIS domain, such as [GDAL](https://gdal.org/drivers/vector/osm.html).
    These tools are automatically reconstructing geometries from the raw data. We
    will try to read it and reconstruct geometries manually.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 许多工具允许用户将OSM数据模型转换为在GIS领域常用的文件格式，例如[GDAL](https://gdal.org/drivers/vector/osm.html)。这些工具会自动从原始数据中重建几何形状。我们将尝试手动读取并重建几何形状。
- en: Examples below show how to access raw data and are written in SQL using [DuckDB](https://duckdb.org/)
    engine with [Spatial](https://duckdb.org/docs/extensions/spatial.html) extension.
    All queries with a full Jupyer notebook can be accessed in the GitHub repository.
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 以下示例展示了如何访问原始数据，并使用[DuckDB](https://duckdb.org/)引擎和[Spatial](https://duckdb.org/docs/extensions/spatial.html)扩展以SQL编写。带有完整Jupyter笔记本的所有查询可以在GitHub代码库中访问。
- en: You can run the notebook in the parallel or you can [install the DuckDB engine](https://duckdb.org/#quickinstall)
    and open the CLI to execute the queries there.
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以在并行环境中运行此笔记本，或者你可以[安装DuckDB引擎](https://duckdb.org/#quickinstall)，并打开CLI在其中执行查询。
- en: '[](https://github.com/RaczeQ/medium-articles/blob/main/articles/osm-duckdb/code.ipynb?source=post_page-----ffeb15197390--------------------------------)
    [## medium-articles/articles/osm-duckdb/code.ipynb at main · RaczeQ/medium-articles'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/RaczeQ/medium-articles/blob/main/articles/osm-duckdb/code.ipynb?source=post_page-----ffeb15197390--------------------------------)
    [## medium-articles/articles/osm-duckdb/code.ipynb at main · RaczeQ/medium-articles'
- en: A repository for the code and data used in Medium articles - medium-articles/articles/osm-duckdb/code.ipynb
    at main ·…
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于Medium文章中代码和数据的代码库 - medium-articles/articles/osm-duckdb/code.ipynb at main
    ·…
- en: github.com](https://github.com/RaczeQ/medium-articles/blob/main/articles/osm-duckdb/code.ipynb?source=post_page-----ffeb15197390--------------------------------)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/RaczeQ/medium-articles/blob/main/articles/osm-duckdb/code.ipynb?source=post_page-----ffeb15197390--------------------------------)
- en: Getting the data
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取数据
- en: 'For simplicity and easy access, examples are focused entirely on the Monaco
    region. You can download the current extract from the Geofabrik download server:
    [https://download.geofabrik.de/europe/monaco.html](https://download.geofabrik.de/europe/monaco.html)
    (and click `monaco-latest.osm.pbf` download link)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简便并便于访问，示例完全聚焦于摩纳哥地区。你可以从Geofabrik下载服务器下载当前的提取数据：[https://download.geofabrik.de/europe/monaco.html](https://download.geofabrik.de/europe/monaco.html)（点击`monaco-latest.osm.pbf`下载链接）
- en: Familiarisation with the data structure
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 熟悉数据结构
- en: 'To start, we will use the `DESCRIBE`function to get information about the columns:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用`DESCRIBE`函数获取有关列的信息：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are 8 columns returned by the `ST_READOSM`function:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`ST_READOSM`函数返回8个列：'
- en: kind — this is the type of an element. It can also have a value of `changeset`representing
    the changes after editing the existing element in the OSM. Extracts from the Geofabrik
    download server don’t contain changesets, so we don’t have to think about them.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: kind —— 这是元素的类型。它也可以具有 `changeset` 的值，表示在编辑现有元素后所做的更改。Geofabrik下载服务器的提取数据不包含changeset，因此我们不需要考虑它们。
- en: id — the element identifier.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: id —— 元素的标识符。
- en: 'tags — map (or a dictionary) of two strings: a tag key and a tag value.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: tags —— 一个由两个字符串组成的映射（或字典）：一个标签键和一个标签值。
- en: refs — list of member IDs related to the element. Nodes should have this list
    empty and ways and relations can’t have it empty.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: refs —— 与元素相关的成员ID列表。节点应将此列表留空，路径和关系不能为空。
- en: lat and lon — latitude and longitude of a node. Ways and relations should have
    these fields empty since only nodes can have coordinates in the OSM.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: lat 和 lon —— 节点的纬度和经度。路径和关系应该将这些字段留空，因为在OSM中只有节点可以拥有坐标。
- en: 'ref_roles and ref_types — a list of additional information about members: what
    role is assigned to the member and what type is it (node, way or relation).'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ref_roles 和 ref_types — 关于成员的附加信息列表：成员被分配的角色是什么，它属于什么类型（节点、道路或关系）。
- en: Counting the elements
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计数元素数量。
- en: Let’s see how many elements there are in total and per element type.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看总共有多少元素，以及每种元素类型的数量。
- en: '[PRE1]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Looking at the elements
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看元素。
- en: Let’s check the examples of the data for each element type.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查每种元素类型的数据示例。
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we can see how the elements are defined: nodes have coordinates, ways have
    *refs* lists filled with node IDs and relations have the most complicated structure
    with *refs* lists filled with IDs and *ref_types* lists showing which ID correspond
    to which element type. Additionally, *ref_roles* have information about the role
    of the member (admin_centre, label, inner, outer).'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到元素的定义：节点有坐标，道路有填充了节点ID的*refs*列表，关系有最复杂的结构，*refs*列表填充了ID，*ref_types*列表显示哪个ID对应哪个元素类型。此外，*ref_roles*包含关于成员角色的信息（admin_centre，label，inner，outer）。
- en: Constructing point geometries from the nodes
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从节点中构建点几何形状。
- en: Now that we know what the structure looks like, we can start building some geometries.
    Starting with nodes should be the easiest since it’s just a pair of latitudes
    and longitudes in the WGS84 Coordinate Reference System.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道结构是什么样的，我们可以开始构建一些几何形状了。从节点开始应该是最简单的，因为它仅仅是WGS84坐标参考系统中的一对纬度和经度。
- en: We should only extract nodes with at least one tag attached since those have
    any semantical meaning for analytical purposes. Nodes without any tags could be
    used to construct ways in the later stages.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该只提取至少附带一个标签的节点，因为这些节点在分析中有语义意义。没有任何标签的节点可能会在后续阶段用于构建道路。
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/c940d87cb6db1a98fff59db98498049a.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c940d87cb6db1a98fff59db98498049a.png)'
- en: Nodes plotted on a map. Generated by the author using GeoPandas library.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 节点在地图上的分布。由作者使用GeoPandas库生成。
- en: After filtering the nodes based on tags, we are left with 3167 points.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在根据标签过滤节点后，我们剩下3167个点。
- en: It’s around 10% of the total number of nodes in the source file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这大约占源文件中节点总数的10%。
- en: Constructing linestring and polygon geometries from the ways
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从道路中构建线字符串和多边形几何形状。
- en: With nodes out of the *way* 😉, let’s focus now on ways. Ways can take the form
    of linestrings or polygons. Let’s focus on linestrings first and then we will
    assign proper geometry types.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让节点“出局” 😉，现在我们专注于道路。道路可以是线字符串或多边形。我们首先关注线字符串，然后再分配合适的几何类型。
- en: 'To construct the ways we have to do multiple operations:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建道路，我们需要执行多个操作：
- en: Select matching ways with tags.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择带有标签的匹配道路。
- en: Unnest all nodes refs for each way element and keep them in the proper order
    (remember - nodes refs order matter!).
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个道路元素展开所有节点引用，并保持它们的正确顺序（记住——节点引用的顺序很重要！）。
- en: Select required nodes with geometries.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择带有几何形状的所需节点。
- en: Group nodes per way ID and construct a linestring geometry using `ST_MakeLine`function.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按道路ID分组节点，并使用`ST_MakeLine`函数构建线字符串几何形状。
- en: Join constructed geometries with tags.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标签构建的几何形状连接。
- en: Let’s start with selecting ways with tags.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从选择带有标签的道路开始。
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now we will unnest refs lists and split them into individual rows. We will also
    utilize DuckDB’s indexing functions to remember the order of elements in the original
    list.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将展开引用列表，并将它们拆分成单独的行。我们还将利用DuckDB的索引功能来记住原始列表中元素的顺序。
- en: '[PRE5]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, there are now multiple rows per way element and multiple ref
    values. Ref_idx represents the original order in the *refs* list.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，现在每个道路元素都有多行数据，且有多个引用值。Ref_idx表示*refs*列表中原始顺序。
- en: 'You can also see the `SEMI JOIN`clause in the query. This is a special join
    available in the DuckDB, that just filters rows without actually joining the second
    table. You can read more about it in the official documentation:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以看到查询中的`SEMI JOIN`子句。这是DuckDB中特有的连接方式，它仅通过过滤行来代替实际的第二张表连接。你可以在官方文档中阅读更多信息：
- en: '[](https://duckdb.org/docs/sql/query_syntax/from?source=post_page-----ffeb15197390--------------------------------#semi-and-anti-joins)
    [## FROM & JOIN Clauses'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://duckdb.org/docs/sql/query_syntax/from?source=post_page-----ffeb15197390--------------------------------#semi-and-anti-joins)
    [## FROM & JOIN 子句'
- en: The FROM clause specifies the source of the data on which the remainder of the
    query should operate. Logically, the…
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: FROM子句指定数据源，查询的其余部分将在该数据源上操作。从逻辑上看，...
- en: duckdb.org](https://duckdb.org/docs/sql/query_syntax/from?source=post_page-----ffeb15197390--------------------------------#semi-and-anti-joins)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[duckdb.org](https://duckdb.org/docs/sql/query_syntax/from?source=post_page-----ffeb15197390--------------------------------#semi-and-anti-joins)'
- en: 'Now we can select the required nodes based on the refs from the previous step:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以根据上一阶段的 refs 选择所需的节点：
- en: '[PRE6]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we can construct the full linestrings:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以构建完整的线字符串（linestring）：
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/4ac75ad2615c915d36bbd5d22d94dbf3.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ac75ad2615c915d36bbd5d22d94dbf3.png)'
- en: Ways linestrings plotted on a map. Generated by the author using GeoPandas library.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在地图上绘制的路线线字符串（linestring）。由作者使用 GeoPandas 库生成。
- en: After doing all of those operations, we have ways in the linestring form. Now
    we have to select the ways that are supposed to be polygons. We can do this based
    on tag values. Unfortunately, there is no single source of truth for this operation.
    We can look at the page from the OSM wiki to see one of the definitions created
    by the community.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些操作后，我们得到的是线字符串形式的路径。现在我们需要选择应该是多边形的路径。我们可以根据标签值来完成这项工作。不幸的是，对于此操作，并没有单一的权威来源。我们可以查看
    OSM 维基页面，了解社区创建的其中一种定义。
- en: '[](https://wiki.openstreetmap.org/wiki/Overpass_turbo/Polygon_Features?source=post_page-----ffeb15197390--------------------------------)
    [## Overpass turbo/Polygon Features'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://wiki.openstreetmap.org/wiki/Overpass_turbo/Polygon_Features?source=post_page-----ffeb15197390--------------------------------)
    [## Overpass turbo/Polygon Features'
- en: As OpenStreetMap doesn't have an intrinsic area data type, an heuristic has
    to be applied to determine whether a way is…
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 由于 OpenStreetMap 没有固有的区域数据类型，因此必须应用启发式方法来确定一条路径是否是……
- en: wiki.openstreetmap.org](https://wiki.openstreetmap.org/wiki/Overpass_turbo/Polygon_Features?source=post_page-----ffeb15197390--------------------------------)
    ![](../Images/78cf5e001831f9276d433c6b61d252da.png)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '[wiki.openstreetmap.org](https://wiki.openstreetmap.org/wiki/Overpass_turbo/Polygon_Features?source=post_page-----ffeb15197390--------------------------------)
    ![](../Images/78cf5e001831f9276d433c6b61d252da.png)'
- en: A screenshot from the Overpass turbo/Polygon Features wiki page. Taken on 2024-01-17.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 Overpass turbo/Polygon Features 维基页面的截图。拍摄于 2024-01-17。
- en: As you can see, this list is quite long, so for brevity we will only check if
    the linestring forms a closed loop and if the area tag value is not ‘no’.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，这个列表相当长，因此为了简洁起见，我们将仅检查线字符串是否形成闭合环路，以及区域标签值是否不是 'no'。
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we can see the mix of linestring and polygon geometries in the final result.
    Of course, the predicate for the *is_polygon* column could (or even *should*)
    be extended by the logic mentioned above regarding the values of the tags.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在最终结果中看到线字符串（linestring）和多边形（polygon）几何体的混合。 当然，*is_polygon*列的谓词可以（甚至*应该*）通过上述提到的关于标签值的逻辑来扩展。
- en: Compared to the image above, many more filled polygons are now visible on the
    map.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 与上面的图片相比，现在地图上可见更多填充的多边形。
- en: '![](../Images/15582954eacc19644cb8eff1f018f0cb.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/15582954eacc19644cb8eff1f018f0cb.png)'
- en: Ways geometries plotted on a map. Generated by the author using GeoPandas library.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在地图上绘制的路线几何体。由作者使用 GeoPandas 库生成。
- en: Constructing polygon and multi-polygon geometries from the relations
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从关系中构建多边形和多多边形几何体
- en: 'Relations are utilized in OSM to group multiple other elements into a single
    object. Here we will focus solely on the (multi-) polygons. These specific elements
    have a `type` tag with one of two values: `boundary`, and `multipolygon`.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OSM 中，关系被用来将多个其他元素组合成一个单一的对象。这里我们将仅关注（多）多边形。这些特定的元素有一个 `type` 标签，其值为两者之一：`boundary`
    和 `multipolygon`。
- en: 'This kind of object is the most complex to reconstruct the geometry for and
    here is the list of steps we have to do:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这种对象是最复杂的，需要重建几何体。以下是我们需要执行的步骤列表：
- en: Select relations with proper `type` value.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择具有适当 `type` 值的关系。
- en: Unnest all refs related to the relation and keep only way refs — we only need
    related way refs to reconstruct a polygon.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将与关系相关的所有 refs 展开，并仅保留路径 refs —— 我们只需要相关的路径 refs 来重建多边形。
- en: Select required ways with linestring geometries — here we can utilize steps
    from constructing ways.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择具有线字符串几何体的所需路径 —— 在这里我们可以利用构建路径的步骤。
- en: Assign an ‘outer’ role to the way ref if it’s `null` and check if any ref from
    the relation has the role ‘outer’ — if a relation has no ‘outer’ refs then treat
    all of them as ‘outer’.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果路径的 ref 为 `null`，则将其分配为 ‘outer’ 角色，并检查关系中的任何 ref 是否具有 ‘outer’ 角色 —— 如果一个关系没有
    ‘outer’ refs，则将它们全部视为 ‘outer’。
- en: Group all linestrings per ‘outer’ and ‘inner’ role and merge them into a single
    multilinestring — many relations are defined with multiple single linestrings
    that only together create a closed polygon.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按“外部”和“内部”角色对所有线字符串进行分组，并将它们合并为一个单一的多线字符串——许多关系是由多个单一线字符串定义的，只有将它们组合起来才能形成一个闭合的多边形。
- en: Split multilinestrings into single closed-loop linestrings and save them as
    polygons.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将多线字符串拆分为单一闭环线字符串，并将其保存为多边形。
- en: Split geometries into ‘outer’ and ‘inner’ polygons. These can be extracted from
    the `ref_role` column of the relation object.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将几何体拆分为“外部”和“内部”多边形。这些可以从关系对象的`ref_role`列中提取。
- en: For each ‘outer’ polygon, select all ‘inner’ polygons that are fully within
    it and make holes in this polygon.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个“外部”多边形，选择所有完全包含在其中的“内部”多边形，并在该多边形中创建孔。
- en: Make a union of all ‘outer’ polygons with holes.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对所有带孔的“外部”多边形进行联合。
- en: Let’s start with selecting relations with matching tag values.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从选择具有匹配标签值的关系开始。
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now we will unnest refs lists and split them into individual rows. Like with
    ways, here we will also utilize DuckDB’s indexing functions to remember the order
    of elements in the original list. Additionally, we will only keep the `way` refs.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将展开引用列表，并将其拆分为单独的行。与路径相似，我们也将利用DuckDB的索引功能来记住原始列表中元素的顺序。此外，我们只会保留`way`引用。
- en: '[PRE10]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the next step, we will construct linestrings for the ways required by the
    relations. The query below compresses almost full logic of reading ways in one
    go (getting required nodes, constructing points and grouping them into linestrings):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们将为关系所需的路径构建线字符串。下面的查询几乎完整地压缩了读取路径的逻辑（获取所需的节点，构建点并将其分组为线字符串）：
- en: '[PRE11]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: After creating the required linestrings, now we can join them with relations
    data. We will also make sure that the required `ref_role` is properly parsed —
    fill in the empty values or replace them if the relation has incorrectly defined
    `ref_roles` in the OSM database.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建所需的线字符串后，我们现在可以将它们与关系数据连接起来。我们还会确保正确解析所需的`ref_role` — 填充空值或替换它们，如果关系在OSM数据库中错误地定义了`ref_roles`。
- en: '[PRE12]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As you can see, there are multiple ways with linestrings assigned to each relation.
    Let’s look at an example to see how they look on the map:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，每个关系都分配了多个路径和线字符串。让我们通过一个示例来看它们在地图上的表现：
- en: '![](../Images/a34fe385da26c62cce2dd5d832df57a9.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a34fe385da26c62cce2dd5d832df57a9.png)'
- en: A single relation ([5986437](https://www.openstreetmap.org/relation/5986437))
    with colour-coded ways that are part of it. Generated by the author using GeoPandas
    library.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单一的关系（[5986437](https://www.openstreetmap.org/relation/5986437)），其中包含按颜色编码的路径。由作者使用GeoPandas库生成。
- en: 'To create full polygons, we have to utilize a `ST_LineMerge` function, that
    will combine a list of linestrings (you can compare it to tying pieces of string
    together). You can read more about this operation here:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建完整的多边形，我们必须利用`ST_LineMerge`函数，它将组合一系列线字符串（你可以将其比作将一段段绳子绑在一起）。你可以在这里阅读更多关于此操作的信息：
- en: '[](https://postgis.net/docs/ST_LineMerge.html?source=post_page-----ffeb15197390--------------------------------)
    [## ST_LineMerge'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://postgis.net/docs/ST_LineMerge.html?source=post_page-----ffeb15197390--------------------------------)
    [## ST_LineMerge'
- en: ST_LineMerge - Return the lines formed by sewing together a MultiLineString.
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ST_LineMerge - 返回通过缝合多个线字符串形成的线。
- en: postgis.net](https://postgis.net/docs/ST_LineMerge.html?source=post_page-----ffeb15197390--------------------------------)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[postgis.net](https://postgis.net/docs/ST_LineMerge.html?source=post_page-----ffeb15197390--------------------------------)'
- en: 'As an additional validation step, we will check if the produced linestrings
    have at least 4 points and if the first point equals the last point, before converting
    them into polygons:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的验证步骤，我们将检查生成的线字符串是否至少包含4个点，并且第一个点是否等于最后一个点，然后再将它们转换为多边形：
- en: '[PRE13]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let’s see the previous example after this operation. We should expect two separate
    polygons to be present:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看执行此操作后的前一个示例。我们应该可以看到两个独立的多边形：
- en: '![](../Images/d72c2b5c71b7e6a1349da547f29bb068.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d72c2b5c71b7e6a1349da547f29bb068.png)'
- en: A single relation ([5986437](https://www.openstreetmap.org/relation/5986437))
    with merged ways as two separate polygons. Generated by the author using GeoPandas
    library.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单一的关系（[5986437](https://www.openstreetmap.org/relation/5986437)），其中合并的路径作为两个独立的多边形。由作者使用GeoPandas库生成。
- en: 'I’ve mentioned previously the `outer` and `inner` ‘ref_types’ of ways that
    create a relation. Here you can see what it looks like:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前提到过，创建关系的路径具有`outer`和`inner`的`ref_types`。这里你可以看到它们的样子：
- en: '![](../Images/4bf65f217dccd5aedeea10bf2b511cde.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4bf65f217dccd5aedeea10bf2b511cde.png)'
- en: A single relation ([8280869](https://www.openstreetmap.org/relation/828086))
    with merged ways grouped into outer and inner polygons. Generated by the author
    using GeoPandas library.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单一关系（[8280869](https://www.openstreetmap.org/relation/828086)）与合并的路径分组为外部和内部多边形。由作者使用
    GeoPandas 库生成。
- en: The roles mean that the `inner` ways are the ‘holes’ within `outer` polygons
    and we have to reproduce this step to make proper geometries.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这些角色意味着 `inner` 路径是 `outer` 多边形中的“孔洞”，我们必须重现这一步骤以确保几何体的正确性。
- en: Let’s focus now on splitting the polygons into groups with and without holes,
    using the `ST_Within` predicate, which checks if a geometry is fully within another.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们专注于将多边形分为有孔和没有孔的两组，使用 `ST_Within` 谓词，它检查一个几何体是否完全位于另一个几何体内。
- en: '[PRE14]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In this query, there is utilized another special join — `ANTI JOIN`. This one
    filters out all the rows on the left-side table that are joined by the right-side
    table.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个查询中，使用了另一种特殊的连接——`ANTI JOIN`。这个连接会过滤掉所有左侧表中与右侧表连接的行。
- en: The last step that is needed is to merge all the polygons for a single relation
    using the `ST_Union_Agg` operation. It will combine all polygons into multipolygons
    (if there is more than one) and produce a single geometry.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是使用 `ST_Union_Agg` 操作将一个关系的所有多边形合并。它将把所有多边形合并为多多边形（如果有多个），并生成一个单一的几何体。
- en: '[PRE15]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here is the previous relation example, now with holes:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这是之前的关系示例，现在带有孔洞：
- en: '![](../Images/217a6f093c325a233d93a5d152a284d4.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/217a6f093c325a233d93a5d152a284d4.png)'
- en: A single relation ([8280869](https://www.openstreetmap.org/relation/828086))
    — a polygon with holes. Generated by the author using GeoPandas library.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 一个单一关系（[8280869](https://www.openstreetmap.org/relation/828086)）——一个带孔的多边形。由作者使用
    GeoPandas 库生成。
- en: '![](../Images/206d0d2c26863920fd791636813f0d85.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/206d0d2c26863920fd791636813f0d85.png)'
- en: Relations geometries plotted on a map. Generated by the author using GeoPandas
    library.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制在地图上的关系几何体。由作者使用 GeoPandas 库生成。
- en: Examples of badly defined relation objects
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误定义的关系对象示例
- en: As OpenStreetMap data is mainly added by the community, there are examples where
    geometries are not properly defined. The OSM wiki describes rules for map makers
    on how to add geometries to a map.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 OpenStreetMap 数据主要由社区添加，因此有些几何体没有正确定义。OSM 维基描述了地图制作人员如何将几何体添加到地图中的规则。
- en: '[](https://wiki.openstreetmap.org/wiki/Relation:multipolygon/validity?source=post_page-----ffeb15197390--------------------------------)
    [## Relation:multipolygon/validity'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://wiki.openstreetmap.org/wiki/Relation:multipolygon/validity?source=post_page-----ffeb15197390--------------------------------)
    [## Relation:multipolygon/validity'
- en: This page is only a proposition, it doesn't represent a consenus of what is
    or isn't valid, but only what could and…
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本页面仅为提议，未代表关于什么有效或无效的共识，只是提出了可能的…
- en: wiki.openstreetmap.org](https://wiki.openstreetmap.org/wiki/Relation:multipolygon/validity?source=post_page-----ffeb15197390--------------------------------)
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: wiki.openstreetmap.org](https://wiki.openstreetmap.org/wiki/Relation:multipolygon/validity?source=post_page-----ffeb15197390--------------------------------)
- en: This section will outline some common mistakes with examples.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将概述一些常见的错误，并附带示例。
- en: Two overlapping ‘outer’ ways in the relation
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系中有两个重叠的“outer”路径
- en: 'This building is defined by two shapes: a rectangle and almost a circle. Since
    these two overlap, you can see how the rendering engine created a gap where there
    probably shouldn’t be any.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这座建筑由两个形状定义：一个矩形和一个几乎是圆形的形状。由于这两者重叠，可以看到渲染引擎在本不应该有空隙的地方产生了一个间隙。
- en: '![](../Images/671b8dd3fbcd20c09c06f10a11affd08.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/671b8dd3fbcd20c09c06f10a11affd08.png)'
- en: Screenshot from the OpenStreetMap by the author.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的 OpenStreetMap 截图。
- en: No ‘outer’ way in the relation
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系中没有“outer”路径
- en: Here you can see a paintball field with `way` members defined as ‘Main Building’
    and 4 ‘Arenas’. These should be all defined as `outer` ways.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你可以看到一个带有 `way` 成员的彩弹场，成员被定义为“主建筑”和 4 个“竞技场”。这些都应该定义为 `outer` 路径。
- en: '![](../Images/927a31510d513e7214b9c5a477933ade.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/927a31510d513e7214b9c5a477933ade.png)'
- en: Screenshot from the OpenStreetMap by the author.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的 OpenStreetMap 截图。
- en: Two overlapping or touching ‘inner’ ways
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 两个重叠或接触的“inner”路径
- en: '![](../Images/2dd6cb3b3ac6ea1ed1b73d63d44823ed.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2dd6cb3b3ac6ea1ed1b73d63d44823ed.png)'
- en: Screenshot from the OpenStreetMap by the author.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的 OpenStreetMap 截图。
- en: 'If you are interested in reading more about how these can be fixed, look into
    this repository:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有兴趣了解更多关于如何修复这些问题的信息，可以查阅这个代码库：
- en: '[](https://github.com/osmlab/fixing-polygons-in-osm/blob/master/doc/background.md?source=post_page-----ffeb15197390--------------------------------)
    [## fixing-polygons-in-osm/doc/background.md at master · osmlab/fixing-polygons-in-osm'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/osmlab/fixing-polygons-in-osm/blob/master/doc/background.md?source=post_page-----ffeb15197390--------------------------------)
    [## fixing-polygons-in-osm/doc/background.md at master · osmlab/fixing-polygons-in-osm'
- en: Fixing (multi)polygons in OpenStreetMap. Contribute to osmlab/fixing-polygons-in-osm
    development by creating an account…
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修复 OpenStreetMap 中的（多重）多边形。通过创建账户，贡献于 osmlab/fixing-polygons-in-osm 的开发…
- en: github.com](https://github.com/osmlab/fixing-polygons-in-osm/blob/master/doc/background.md?source=post_page-----ffeb15197390--------------------------------)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/osmlab/fixing-polygons-in-osm/blob/master/doc/background.md?source=post_page-----ffeb15197390--------------------------------)
- en: QuackOSM — a hassle-free tool for reading OSM data
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QuackOSM — 一个便捷的工具，用于读取 OSM 数据
- en: To end this article I want to highlight a library that can automatically download
    the OSM data, filter it by the geometry or using OSM tags and save it as a GeoParquet
    file that can be easily integrated into more scalable solutions. The library is
    written in Python and is open-source.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束这篇文章，我想强调一个可以自动下载 OSM 数据的库，它可以通过几何或使用 OSM 标签过滤数据，并将其保存为 GeoParquet 文件，便于集成到更可扩展的解决方案中。这个库是用
    Python 编写的，并且是开源的。
- en: 'You can install it with a single command: `pip install quackosm[cli]`.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过一条命令安装它：`pip install quackosm[cli]`。
- en: This tutorial contains a simplified version of the queries used in the QuackOSM
    🦆, but these won’t scale very well for the bigger regions. The library can easily
    parse whole countries such as France on a consumer-grade PC if you need to. You
    can of course utilize the DuckDB engine later on the prepared GeoParquet file
    using `SPATIAL` extension.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程包含了 QuackOSM 🦆 使用的查询的简化版本，但这些查询在更大区域中并不适用。该库可以轻松解析像法国这样的整个国家数据，即便在消费者级的 PC
    上也能运行。如果需要，你当然可以使用 `SPATIAL` 扩展在处理后的 GeoParquet 文件上利用 DuckDB 引擎。
- en: 'All of the steps defined here can be replaced with a single line of code:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这里定义的所有步骤都可以通过一行代码来替代：
- en: '[PRE16]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[](https://github.com/kraina-ai/quackosm?source=post_page-----ffeb15197390--------------------------------)
    [## GitHub - kraina-ai/quackosm: QuackOSM: an open-source Python and CLI tool
    for reading OpenStreetMap…'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://github.com/kraina-ai/quackosm?source=post_page-----ffeb15197390--------------------------------)
    [## GitHub - kraina-ai/quackosm: QuackOSM: an open-source Python and CLI tool
    for reading OpenStreetMap…'
- en: 'QuackOSM: an open-source Python and CLI tool for reading OpenStreetMap PBF
    files using DuckDB - kraina-ai/quackosm'
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: QuackOSM：一个使用 DuckDB 读取 OpenStreetMap PBF 文件的开源 Python 和 CLI 工具 - kraina-ai/quackosm
- en: github.com](https://github.com/kraina-ai/quackosm?source=post_page-----ffeb15197390--------------------------------)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: github.com](https://github.com/kraina-ai/quackosm?source=post_page-----ffeb15197390--------------------------------)
- en: Disclaimer
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 免责声明
- en: I’m the author of the `QuackOSM` library.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我是`QuackOSM`库的作者。
- en: 'You can reach me here:'
  id: totrans-194
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以通过这里联系我：
- en: '[https://www.linkedin.com/in/raczyckikamil/](https://www.linkedin.com/in/raczyckikamil/)'
  id: totrans-195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://www.linkedin.com/in/raczyckikamil/](https://www.linkedin.com/in/raczyckikamil/)'
- en: '[https://github.com/raczeq](https://github.com/raczeq)'
  id: totrans-196
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://github.com/raczeq](https://github.com/raczeq)'
