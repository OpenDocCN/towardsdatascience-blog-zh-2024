- en: 'Step by Step Basics: Code Autodocumentation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逐步基础：代码自动文档生成
- en: 原文：[https://towardsdatascience.com/step-by-step-basics-code-autodocumentation-fa0d9ae4ac71?source=collection_archive---------2-----------------------#2024-03-22](https://towardsdatascience.com/step-by-step-basics-code-autodocumentation-fa0d9ae4ac71?source=collection_archive---------2-----------------------#2024-03-22)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/step-by-step-basics-code-autodocumentation-fa0d9ae4ac71?source=collection_archive---------2-----------------------#2024-03-22](https://towardsdatascience.com/step-by-step-basics-code-autodocumentation-fa0d9ae4ac71?source=collection_archive---------2-----------------------#2024-03-22)
- en: Generate flawless documentation of Python code using Sphinx
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Sphinx 生成完美的 Python 代码文档
- en: '[](https://medium.com/@lucydickinson?source=post_page---byline--fa0d9ae4ac71--------------------------------)[![Lucy
    Dickinson](../Images/5a075bb38f9133678d55a26b2683729f.png)](https://medium.com/@lucydickinson?source=post_page---byline--fa0d9ae4ac71--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fa0d9ae4ac71--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fa0d9ae4ac71--------------------------------)
    [Lucy Dickinson](https://medium.com/@lucydickinson?source=post_page---byline--fa0d9ae4ac71--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@lucydickinson?source=post_page---byline--fa0d9ae4ac71--------------------------------)[![Lucy
    Dickinson](../Images/5a075bb38f9133678d55a26b2683729f.png)](https://medium.com/@lucydickinson?source=post_page---byline--fa0d9ae4ac71--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--fa0d9ae4ac71--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--fa0d9ae4ac71--------------------------------)
    [Lucy Dickinson](https://medium.com/@lucydickinson?source=post_page---byline--fa0d9ae4ac71--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--fa0d9ae4ac71--------------------------------)
    ·9 min read·Mar 22, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发表于 [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--fa0d9ae4ac71--------------------------------)
    ·阅读时间：9分钟·2024年3月22日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/0aa56838fa603355f02b854e8a8f9352.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0aa56838fa603355f02b854e8a8f9352.png)'
- en: Photo by [Dustin Humes](https://unsplash.com/@dustinhumes_photography?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Dustin Humes](https://unsplash.com/@dustinhumes_photography?utm_source=medium&utm_medium=referral)
    通过 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: You can build beautiful, standardised and stylised documentation using just
    the docstrings in a few simple steps.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你可以仅通过几步简单的操作，利用 docstring 构建美观、标准化和风格化的文档。
- en: A Data Scientist holds many responsibilities when working on a project, and
    one that is usually left until the last minute is documentation. Perhaps you’re
    diligent with writing docstrings for classes and functions (well done!) — but
    should that be the resting place of your documentation?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家在项目中承担着许多职责，其中一个通常会被拖延到最后的就是文档编写。也许你很勤奋地为类和函数编写了 docstring（做得好！）——但这应该是文档的最终形式吗？
- en: In my opinion, documentation should sit independently from your code. Your team
    (or you in a few months time) shouldn’t have to trawl through hundreds of lines
    of code in your python modules to understand what’s going on. You can build beautiful,
    standardised and stylised documentation using just the docstrings in a few simple
    steps and make your project speak for itself.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我看来，文档应该独立于代码存在。你的团队（或几个月后的你）不应该需要翻阅 Python 模块中的成百上千行代码才能理解其中的内容。你可以仅通过几步简单的操作，利用
    docstring 构建美观、标准化和风格化的文档，让你的项目自我表达。
- en: In this article, I’ll focus on using the [Sphinx framework](https://www.sphinx-doc.org/en/master/index.html)
    for autodocumenting python modules. I’ll also be using the [Cookiecutter Data
    Science](https://drivendata.github.io/cookiecutter-data-science/) project template
    in Visual Studio Code (VS Code) due to its seamless integration with Sphinx and
    standardised directory structure. Whilst the [official sphinx tutorial documentation](https://sphinx-rtd-tutorial.readthedocs.io/en/latest/index.html)
    is a great resource for those wanting to take a deep dive into this topic, my
    aim for this article is to be a helpful ‘quick start’ guide to take you through
    the key steps. Enjoy :)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将重点介绍如何使用 [Sphinx 框架](https://www.sphinx-doc.org/en/master/index.html)
    来自动生成 Python 模块的文档。我还将使用 [Cookiecutter Data Science](https://drivendata.github.io/cookiecutter-data-science/)
    项目模板，并在 Visual Studio Code (VS Code) 中进行，因为它与 Sphinx 的无缝集成以及标准化的目录结构。虽然 [官方 Sphinx
    教程文档](https://sphinx-rtd-tutorial.readthedocs.io/en/latest/index.html) 是希望深入学习这一主题的绝佳资源，但本文的目标是提供一个帮助你快速入门的指南，带你完成关键步骤。祝你阅读愉快
    :)
- en: A note on docstrings
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于 docstring 的说明
- en: The key to good documentation is docstrings. These are the comment blocks that
    sit within each class, class method and function that describe the nature of the
    code, along with the inputs, outputs and raised errors. There are three core docstring
    formats. These are Google, reStructuredText (reST) and NumPy. They all contain
    the same information, the only difference is that they are formatted differently.
    You can see examples of each docstring format [here](https://realpython.com/documenting-python-code/#docstring-formats).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的文档的关键是 docstring。这些是每个类、类方法和函数中的注释块，用于描述代码的性质，以及输入、输出和引发的错误。有三种核心的 docstring
    格式，它们分别是 Google、reStructuredText (reST) 和 NumPy。它们包含相同的信息，唯一的区别是格式不同。你可以在[这里](https://realpython.com/documenting-python-code/#docstring-formats)查看每种
    docstring 格式的示例。
- en: 'I’ll be using the Google docstring format as it is easy to read and takes up
    less space than the others. The below code block is a typical example of a Google
    docstring:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用 Google docstring 格式，因为它比其他格式更易于阅读且占用空间更小。下面的代码块是一个典型的 Google docstring
    示例：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Top tip. download the ‘autoDocstring — Python Docstring Generator’ in VS Code
    to automatically generate a docstring when you type three double quotation marks
    (i.e. the start of a docstring). Be sure to finish writing the function before
    generating the docstring so that all inputs/outputs/errors get included in the
    docstring template that gets generated for you!*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*顶级技巧：在 VS Code 中下载‘autoDocstring — Python Docstring 生成器’，当你输入三个双引号（即 docstring
    开始符号）时，它将自动生成 docstring。记得在生成 docstring 之前先完成函数编写，这样所有输入/输出/错误都会包含在为你生成的 docstring
    模板中！*'
- en: Let’s move on to making the documentation!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写文档吧！
- en: 'For the purpose of this demo, I have created a python module `demo.py` which
    contains a class and three basic functions (all annotated with docstrings with
    the exception of one function). It is this module that I’ll be building documentation
    for in this article. The contents of this demo.py module is below:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示的目的，我创建了一个名为 `demo.py` 的 Python 模块，其中包含一个类和三个基本函数（除了一个函数，其他都注释了 docstring）。就是这个模块，我将在本文中为其编写文档。以下是
    demo.py 模块的内容：
- en: '![](../Images/ea51927a8000f6c5b5725d577acb8c78.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ea51927a8000f6c5b5725d577acb8c78.png)'
- en: Contents of demo.py module to be documented. Snapshot taken using CodeSnap extension
    in VS Code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: demo.py 模块的内容需要记录。使用 VS Code 中的 CodeSnap 扩展截图。
- en: 1\. Setup
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1. 设置
- en: First thing is to get everything setup. You’ll need to install VS Code and setup
    a new project along with Sphinx. There are a few options here. You can either
    a) set up a new project using Cookiecutter (where the relevant Sphinx setup will
    be generated along with standardised directories) or b) create your own project
    structure and install sphinx separately.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，设置好一切。你需要安装 VS Code 并设置一个新项目，以及安装 Sphinx。这里有几个选项。你可以选择 a) 使用 Cookiecutter
    设置一个新项目（在此过程中会自动生成相关的 Sphinx 设置和标准化目录），或者 b) 创建你自己的项目结构并单独安装 sphinx。
- en: '**option A — install Cookiecutter**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项 A — 安装 Cookiecutter**'
- en: 'In the terminal, pip install Cookiecutter and then create a new project:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，执行 pip install Cookiecutter，然后创建一个新项目：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, answer the questions that appear in the terminal window and your new project
    will be created. The Sphinx framework will be stored in the /docs directory of
    your project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，回答终端窗口中出现的问题，你的新项目将会被创建。Sphinx 框架将存储在项目的 /docs 目录中。
- en: '**option B — Sphinx quickstart**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**选项 B — Sphinx 快速启动**'
- en: 'If the Cookiecutter template doesn’t take your fancy, you can create your own
    project structure from scratch and install sphinx. It is a good idea to make a
    documentation directory and install sphinx there. In the terminal:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 Cookiecutter 模板不符合你的需求，你可以从头开始创建自己的项目结构并安装 sphinx。最好在一个文档目录中安装 sphinx。可以在终端中执行：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 2\. Understanding Sphinx folder structure
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2. 理解 Sphinx 文件夹结构
- en: After you’ve installed Sphinx using one of the options above, there will be
    some files that appear in the documentation directory in your project. The `conf.py`
    file is the key configuration file which you’ll edit to make your documentation
    bespoke — more detail on this in the next section. The `index.rst` file acts as
    a contents for your documentation. You can find more information on the `index.rst`
    file [here](https://sphinx-rtd-tutorial.readthedocs.io/en/latest/build-the-docs.html).
    The `getting-started.rst` and `commands.rst` files are suggested templates for
    your documentation. You can remove these if necessary. The make files (`make.bat`
    and `Makefile`) are used to actually make the documentation. You don’t need to
    edit these but will call them in the terminal window when you’re ready to make
    the documentation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在你通过上述方式安装了 Sphinx 之后，项目中的文档目录下会出现一些文件。`conf.py` 文件是关键的配置文件，你需要编辑它以定制你的文档 ——
    详细内容将在下一节介绍。`index.rst` 文件作为文档的目录。你可以在[这里](https://sphinx-rtd-tutorial.readthedocs.io/en/latest/build-the-docs.html)找到关于
    `index.rst` 文件的更多信息。`getting-started.rst` 和 `commands.rst` 文件是推荐的文档模板。如果需要，你可以删除这些文件。`make`
    文件（`make.bat` 和 `Makefile`）用于实际生成文档。你无需编辑这些文件，但在准备好生成文档时会在终端窗口调用它们。
- en: '![](../Images/34322e8b906de18a36631968b18687fb.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/34322e8b906de18a36631968b18687fb.png)'
- en: Default Sphinx files installed
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 默认安装的 Sphinx 文件
- en: 3\. Conf.py file
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3. Conf.py 文件
- en: 'The configuration file is where the magic happens. This file is used during
    the build process and so it is crucial that you have this set up correctly. Below
    are some steps to modifying the `conf.py` file:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件是魔法发生的地方。这个文件在构建过程中使用，因此确保正确设置它至关重要。以下是修改 `conf.py` 文件的一些步骤：
- en: '**Uncomment the sys.path line** (line 20 in my setup):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**取消注释 sys.path 行**（我的设置中的第 20 行）：'
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Change the pathway of the os.path.abspath** to the relative location of the
    code you want documenting (relative to the `conf.py` file). For example, the python
    modules that I want documenting sits within the src/ directory of my project.
    Hence I will change the os.path.abspath to the look in /src directory which is
    located in the parent folder of the `conf.py` file. You can specify the relative
    location using the . and / syntax:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**更改 os.path.abspath 的路径**，使其指向你想要记录的代码的相对位置（相对于 `conf.py` 文件）。例如，我想要记录的 Python
    模块位于我项目的 `src/` 目录中。因此，我会将 os.path.abspath 更改为指向位于 `conf.py` 文件父文件夹中的 `/src` 目录。你可以使用
    `.` 和 `/` 语法指定相对位置：'
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/24776be77700370824f484404b8be450.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/24776be77700370824f484404b8be450.png)'
- en: The relative location of the directory containing the python modules to the
    documentation folder. In this example, ‘demo.py’ is the module to be documented,
    located in the src/data/ directory.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 文档文件夹中包含 Python 模块的目录的相对位置。在这个示例中，‘demo.py’ 是要记录的模块，位于 `src/data/` 目录中。
- en: '**Add in the relevant extensions**. You’ll need to add in some extensions to
    the `conf.py` file to gain extra functionality when creating your documentation.
    These are all optional and you can have some fun exploring the different extensions
    available [here](https://www.sphinx-doc.org/en/master/usage/extensions/index.html).
    Here are the 5 extensions that I recommend at minimum:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**添加相关扩展**。你需要在 `conf.py` 文件中添加一些扩展，以便在创建文档时获得额外的功能。这些扩展是可选的，你可以在[这里](https://www.sphinx-doc.org/en/master/usage/extensions/index.html)探索可用的不同扩展。我建议至少添加以下五个扩展：'
- en: '[**sphinx.ext.autodoc**](https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html)—
    use documentation from docstrings'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**sphinx.ext.autodoc**](https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html)—
    使用来自文档字符串的文档'
- en: '[**autodocsumm**](https://pypi.org/project/autodocsumm/)— generate a tabular
    summary of all docstrings at the top of the html page by listing out the docstring
    summaries only. Useful when you have a lot of docstrings. *Note. you will need
    to pip install autodocsumm in the terminal.*'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**autodocsumm**](https://pypi.org/project/autodocsumm/)— 通过仅列出文档字符串摘要来在 HTML
    页面的顶部生成一个表格汇总。当你有很多文档字符串时非常有用。*注意：你需要在终端中使用 pip 安装 autodocsumm。*'
- en: '[**sphinx.ext.napoleon**](https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html)
    — enables Sphinx to parse google docstrings'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**sphinx.ext.napoleon**](https://www.sphinx-doc.org/en/master/usage/extensions/napoleon.html)
    — 使 Sphinx 能够解析 Google 风格的文档字符串'
- en: '[**sphinx.ext.viewcode**](https://www.sphinx-doc.org/en/master/usage/extensions/viewcode.html)
    — adds a link to a html page containing the source code for each module'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**sphinx.ext.viewcode**](https://www.sphinx-doc.org/en/master/usage/extensions/viewcode.html)
    — 为每个模块添加一个链接，指向包含源代码的 HTML 页面'
- en: '[**sphinx.ext.coverage**](https://www.sphinx-doc.org/en/master/usage/extensions/coverage.html)
    — provides a summary of how many classes/functions etc have docstrings. Good coverage
    signifies that a codebase is well explained.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**sphinx.ext.coverage**](https://www.sphinx-doc.org/en/master/usage/extensions/coverage.html)
    — 提供类/函数等有多少包含文档字符串的总结。良好的覆盖率表明代码库得到了很好的解释。'
- en: 'Here’s how to include these extensions in the `conf.py` file (line 29 in my
    setup):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何在 `conf.py` 文件中包含这些扩展（在我的设置中是第 29 行）：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Change the theme**. The default theme of the documentation is quite clean,
    although you may prefer to play around with different options by changing the
    ‘html_theme’ variable (line 94 in my setup) from ‘default’ to one of the standard
    [theme options](https://www.sphinx-doc.org/en/master/usage/theming.html) or some
    [third party options](https://sphinx-themes.org/). In this demo, I’ll show the
    default and Read the Docs themes.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**更改主题**。文档的默认主题相当简洁，尽管你可能更喜欢通过将 ''html_theme'' 变量（在我的设置中是第 94 行）从 ''default''
    更改为标准的 [主题选项](https://www.sphinx-doc.org/en/master/usage/theming.html) 或一些 [第三方选项](https://sphinx-themes.org/)来尝试不同的选项。在这个示例中，我将展示默认主题和“Read
    the Docs”主题。'
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Note. you will need to pip install any non-standard (third party) themes.*'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：你需要通过 pip 安装任何非标准（第三方）主题。*'
- en: 4\. Make the html pages
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 生成 html 页面
- en: Now that your `conf.py` file is set up and you have glorious docstrings in your
    code, we’re ready to do some scraping and build some html pages.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你的 `conf.py` 文件已经设置完毕，且代码中有了精彩的文档字符串，我们可以开始抓取并生成一些 html 页面了。
- en: '**Generate .rst files of your python packages**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**生成 Python 包的 .rst 文件**'
- en: 'These files are the precursor to the html pages and are the native format for
    Sphinx. These need to be generated before making the html files. You’ll use the
    [sphinx.apidoc](https://www.sphinx-doc.org/en/master/man/sphinx-apidoc.html) command,
    which uses the autodoc extension to locate all python modules (e.g. any .py files)
    within the sys.path location that you specified in the `conf.py` file. There are
    some optional parameters to include when using the apidoc command which you can
    find in the [documentation](https://www.sphinx-doc.org/en/master/man/sphinx-apidoc.html),
    but I used the following template:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件是 html 页面的前置文件，是 Sphinx 的本地格式。在生成 html 文件之前，需要先生成这些文件。你将使用 [sphinx.apidoc](https://www.sphinx-doc.org/en/master/man/sphinx-apidoc.html)
    命令，它利用 autodoc 扩展来定位你在 `conf.py` 文件中指定的 sys.path 位置下的所有 Python 模块（例如任何 .py 文件）。在使用
    apidoc 命令时，有一些可选参数可以包含，详情请参阅 [文档](https://www.sphinx-doc.org/en/master/man/sphinx-apidoc.html)，但我使用了以下模板：
- en: '*Note. in the terminal, change directory to the root of the project to run
    the following code.*'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：在终端中，切换到项目根目录以运行以下代码。*'
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**-f** (force overwriting any existing generated files).'
  id: totrans-59
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-f**（强制覆盖任何已生成的文件）。'
- en: ''
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**-o output_dir** (directory to place the output files. If it does not exist,
    it is created). Note. replace ‘output_dir’ with a directory name of your choice.
    I set mine to the /docs directory.'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**-o output_dir**（放置输出文件的目录。如果该目录不存在，将会创建）。注意：将 ''output_dir'' 替换为你选择的目录名称。我将我的设置为
    /docs 目录。'
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**module_dir** (location of python packages to document)'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**module_dir**（Python 包的位置，用于文档化）'
- en: After running this command, there should be newly generated .rst files in the
    docs folder.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 运行该命令后，docs 文件夹中应该会生成新的 .rst 文件。
- en: '![](../Images/84b4615becbbe6f7809c3c9c02672edf.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/84b4615becbbe6f7809c3c9c02672edf.png)'
- en: Contents of documentation folder after running sphinx-apidoc command to generate
    .rst files
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 sphinx-apidoc 命令生成 .rst 文件后，文档文件夹的内容
- en: 'Notice that two new .rst files have been generated: `data.rst` and `modules.rst`.
    In addition to `modules.rst`, a .rst file will be generated for each directory
    that contains at least one python module. In my example, `data.rst` is generated
    as I have saved my demo.py file in the src/datadirectory. If you have multiple
    directories of python modules within the location you specified in sys.path in
    the `conf.py` file, then multiple .rst files will be generated. *Note. These files
    do not contain the scraped documentation just yet, they just contain the information
    required for autodoc to make the html files in the next step.*'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，已经生成了两个新的 .rst 文件：`data.rst` 和 `modules.rst`。除了 `modules.rst`，对于每个包含至少一个
    Python 模块的目录，将会生成一个 .rst 文件。在我的示例中，由于我将 demo.py 文件保存在 src/data 目录中，因此生成了 `data.rst`。如果在你指定的
    `conf.py` 文件中的 sys.path 位置包含多个 Python 模块目录，那么将生成多个 .rst 文件。*注意：这些文件目前还不包含抓取的文档，它们只包含
    autodoc 所需的信息，以便在下一步生成 html 文件。*
- en: '**Edit index.rst file**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**编辑 index.rst 文件**'
- en: Remember, `index.rst` acts as a contents page so we must edit this file to include
    all python modules we want documenting. Luckily, the `modules.rst` references
    the source location of all python modules identified in the sys.path, so you can
    simply add this file to `index.rst`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`index.rst` 作为目录页，因此我们必须编辑此文件，以包括我们希望文档化的所有 Python 模块。幸运的是，`modules.rst`
    引用了在 `sys.path` 中识别到的所有 Python 模块的源位置，因此你可以简单地将此文件添加到 `index.rst`。
- en: 'To do this, open the `index.rst` file and add ‘modules’ underneath the toctree
    (table of contents tree) section. Make sure there is a line in between the :maxdepth:
    parameter and the names of the the .rst files.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '为此，打开 `index.rst` 文件，并在 toctree（目录树）部分下方添加‘modules’。确保在 :maxdepth: 参数和 .rst
    文件名称之间有一行空白。'
- en: '*Note. ‘getting-started’ and ‘commands’ will already be in the index.rst file.
    You can delete them from this file if you do not want to generate html pages (although
    a ‘getting-started’ page is probably a good idea!*)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意。‘getting-started’ 和 ‘commands’ 将已经出现在 `index.rst` 文件中。如果你不希望生成 HTML 页面，可以将它们从文件中删除（尽管
    ‘getting-started’ 页面可能是个好主意！）*'
- en: '![](../Images/8e03e40dede70fa331d9dc1a90c7fef3.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8e03e40dede70fa331d9dc1a90c7fef3.png)'
- en: Contents of the index.rst file. I have added in ‘modules’ so that the modules.rst
    file is used in the html generation process.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.rst` 文件的内容。我已添加‘modules’，以便在 HTML 生成过程中使用 `modules.rst` 文件。'
- en: '**Make html files**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建 HTML 文件**'
- en: Now we can use the make files in your documentation directory to build the html
    files. These files will appear in the **_build/html/** directory within your documentation
    folder. You can preview these in VS code if you download the ‘HTML Preview’ extension.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用文档目录中的 make 文件来构建 HTML 文件。这些文件将出现在文档文件夹中的 **_build/html/** 目录下。如果你下载了‘HTML
    Preview’扩展程序，可以在 VS Code 中预览这些文件。
- en: 'Change directory to where the make.bat file is located and run the following
    command in cmd terminal:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到 `make.bat` 文件所在的目录，并在 cmd 终端中运行以下命令：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Note*. *if you are using windows powershell terminal (rather than cmd), use
    the following syntax:*'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意*。*如果你使用的是 Windows PowerShell 终端（而非 cmd），请使用以下语法：*'
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '***Top tip****. if a warning arises when using the make html command that states
    ‘autodoc: failed to import module’, this is most likely due to autodoc not being
    able to find your modules as the sys.path has not been configured correctly in
    conf.py. Make sure this points to the directory where your python modules are
    located.*'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '***顶级提示***。如果在使用 `make html` 命令时出现警告，提示 ‘autodoc: failed to import module’，这很可能是因为
    autodoc 无法找到你的模块，因为 `sys.path` 在 `conf.py` 中未正确配置。确保它指向你的 Python 模块所在的目录。*'
- en: '**Editing html files**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**编辑 HTML 文件**'
- en: 'If you wish to edit your docstrings and update your html files with the changes,
    then you can do so using the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望编辑文档字符串并将更改更新到 HTML 文件中，可以使用以下命令：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let’s take a look at our documentation!
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们来看看我们的文档！
- en: 'As I mentioned above, I have created some documentation of my python module
    `demo.py` in two different themes seen in the images below; ‘default’ (left image)
    and ‘Read the Docs’ (right image). The content is identical but the look and feel
    are different. Let’s take note of the core features:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，我已经为我的 Python 模块 `demo.py` 创建了两种不同主题的文档，如下图所示；‘默认’（左侧图片）和‘Read the Docs’（右侧图片）。内容是相同的，但外观和感觉不同。让我们注意一下核心特点：
- en: Navigation bar on left hand side
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左侧的导航栏
- en: A summary of all classes or functions belonging to the module in tables at the
    top of the page (thanks to the ‘autodocsumm’ extension)
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块所有类或函数的摘要，以表格形式显示在页面顶部（感谢 ‘autodocsumm’ 扩展）
- en: Detailed list of docstring components for all functions and classes below the
    summary
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有函数和类的文档字符串组件的详细列表，位于总结下方
- en: '![](../Images/c7e255289a5c54caa52b9ecefa753d20.png)![](../Images/e7850408e20f8add5d9dbac68615fe35.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c7e255289a5c54caa52b9ecefa753d20.png)![](../Images/e7850408e20f8add5d9dbac68615fe35.png)'
- en: Examples of documentation html pages for a sample python module using default
    theme (left image) and the read the docs theme (right image), generated using
    Sphinx.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认主题（左侧图片）和 Read the Docs 主题（右侧图片）的 Python 模块文档页面示例，通过 Sphinx 生成。
- en: Once you’ve created the html pages, you’ll notice a variety of hierarchical
    html pages will be generated. These will include a home page and pages for each
    package and module. Have a look around the pages to familiarise yourself with
    their structure and read the official documentation to see how you can customise
    them further.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了 html 页面，你会注意到会生成多种层次的 html 页面。这些页面包括主页以及每个包和模块的页面。浏览这些页面，熟悉它们的结构，并阅读官方文档，了解如何进一步自定义它们。
- en: For example, if you wanted to be able to see the raw code of each function in
    the documentation, add the extension ‘sphinx.ext.viewcode’ to the `conf.py` file.
    This will add a hyperlink next to each function or class method which will reveal
    the raw code to allow for easy interrogation without having to delve into the
    codebase.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你希望在文档中查看每个函数的原始代码，可以将扩展 ‘sphinx.ext.viewcode’ 添加到 `conf.py` 文件中。这将为每个函数或类方法添加一个超链接，点击后可以显示原始代码，方便查看，无需深入代码库。
- en: Closing thoughts
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结语
- en: And there we have it. Simple and beautiful documentation of your Python modules
    made in a few easy steps using Sphinx! I hope you have enjoyed learning about
    autodocumentation and find it to be a useful tool to implement in your projects.
    If you have any useful tips then feel free to add a comment :)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。通过几个简单的步骤使用 Sphinx 创建的 Python 模块文档，既简单又美观！希望你在了解自动化文档生成的过程中有所收获，并认为它是一个值得在项目中实现的有用工具。如果你有任何有用的建议，欢迎留言评论
    :)
