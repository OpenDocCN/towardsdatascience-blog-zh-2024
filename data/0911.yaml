- en: Building a simple Agent with Tools and Toolkits in LangChain
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在LangChain中使用工具和工具包构建简单代理
- en: 原文：[https://towardsdatascience.com/building-a-simple-agent-with-tools-and-toolkits-in-langchain-77e0f9bd1fa5?source=collection_archive---------1-----------------------#2024-04-10](https://towardsdatascience.com/building-a-simple-agent-with-tools-and-toolkits-in-langchain-77e0f9bd1fa5?source=collection_archive---------1-----------------------#2024-04-10)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://towardsdatascience.com/building-a-simple-agent-with-tools-and-toolkits-in-langchain-77e0f9bd1fa5?source=collection_archive---------1-----------------------#2024-04-10](https://towardsdatascience.com/building-a-simple-agent-with-tools-and-toolkits-in-langchain-77e0f9bd1fa5?source=collection_archive---------1-----------------------#2024-04-10)
- en: Get familiar with the building blocks of Agents in LangChain
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 熟悉LangChain中代理的构建模块
- en: '[](https://medium.com/@ssmaameri?source=post_page---byline--77e0f9bd1fa5--------------------------------)[![Sami
    Maameri](../Images/9e9892fe7d3cc53ad1c4d165145878ef.png)](https://medium.com/@ssmaameri?source=post_page---byline--77e0f9bd1fa5--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--77e0f9bd1fa5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--77e0f9bd1fa5--------------------------------)
    [Sami Maameri](https://medium.com/@ssmaameri?source=post_page---byline--77e0f9bd1fa5--------------------------------)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://medium.com/@ssmaameri?source=post_page---byline--77e0f9bd1fa5--------------------------------)[![Sami
    Maameri](../Images/9e9892fe7d3cc53ad1c4d165145878ef.png)](https://medium.com/@ssmaameri?source=post_page---byline--77e0f9bd1fa5--------------------------------)[](https://towardsdatascience.com/?source=post_page---byline--77e0f9bd1fa5--------------------------------)[![Towards
    Data Science](../Images/a6ff2676ffcc0c7aad8aaf1d79379785.png)](https://towardsdatascience.com/?source=post_page---byline--77e0f9bd1fa5--------------------------------)
    [Sami Maameri](https://medium.com/@ssmaameri?source=post_page---byline--77e0f9bd1fa5--------------------------------)'
- en: ·Published in [Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--77e0f9bd1fa5--------------------------------)
    ·13 min read·Apr 10, 2024
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ·发布于[Towards Data Science](https://towardsdatascience.com/?source=post_page---byline--77e0f9bd1fa5--------------------------------)
    ·13分钟阅读·2024年4月10日
- en: --
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: --
- en: '![](../Images/c890aaf761bb571b28a0b60b25e8fda6.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c890aaf761bb571b28a0b60b25e8fda6.png)'
- en: Photo by [Dan LeFebvre](https://unsplash.com/@danlefeb?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Dan LeFebvre](https://unsplash.com/@danlefeb?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Let’s build a simple agent in LangChain to help us understand some of the foundational
    concepts and building blocks for how agents work there.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在LangChain中构建一个简单的代理，帮助我们理解一些基础概念以及代理如何工作的构建模块。
- en: By keeping it simple we can get a better grasp of the foundational ideas behind
    these agents, allowing us to build more complex agents in the future.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 通过保持简单，我们可以更好地理解这些代理背后的基础理念，从而在未来构建更复杂的代理。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Want to get notified about my future posts? [*Subscribe here*](https://medium.com/@ssmaameri/subscribe)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 想要获得我未来文章的通知吗？[*在此订阅*](https://medium.com/@ssmaameri/subscribe)
- en: What are Agents
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是代理
- en: The LangChain documentation actually has a pretty [good page](https://python.langchain.com/docs/modules/agents/)
    on the high level concepts around its agents. It’s a short easy read, and definitely
    worth skimming through before getting started.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain文档实际上有一个相当[好的页面](https://python.langchain.com/docs/modules/agents/)介绍了关于代理的高层次概念。它简短易懂，在开始之前浏览一下肯定值得。
- en: If you lookup the definition of AI Agents, you get something along the lines
    of “An entity that is able to perceive its environment, act on its environment,
    and make intelligent decisions about how to reach a goal it has been given, as
    well as the ability to learn as it goes”
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查找人工智能代理的定义，你会看到类似于“一个能够感知其环境、对环境采取行动、做出智能决策以达到目标，并且具有边走边学习能力的实体”的描述。
- en: That fits the definition of LangChain agents pretty well I would say. What makes
    all this possible in software is the reasoning abilities of Large Language Model’s
    (LLM’s). The brains of a LangChain agent are an LLM. It is the LLM that is used
    to reason about the best way to carry out the ask requested by a user.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这完全符合LangChain代理的定义。让这一切在软件中成为可能的是大型语言模型（LLM）的推理能力。LangChain代理的大脑是LLM。正是LLM被用来推理执行用户请求的最佳方法。
- en: In order to carry out its task, and operate on things and retrieve information,
    the agent has what are called Tool’s in LangChain, at its disposal. It is through
    these tools that it is able to interact with its environment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行任务并操作事物以及获取信息，代理在LangChain中有一些叫做工具（Tool）的东西可供使用。正是通过这些工具，它能够与环境进行交互。
- en: The tools are basically just methods/classes the agent has access to that can
    do things like interact with a Stock Market index over an API, update a Google
    Calendar event, or run a query against a database. We can build out tools as needed,
    depending on the nature of tasks we are trying to carry out with the agent to
    fulfil.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具基本上就是代理可以访问的方法/类，它们可以做一些事情，比如通过API与股票市场指数交互、更新Google日历事件或对数据库执行查询。我们可以根据需要构建工具，这取决于我们试图通过代理完成的任务的性质。
- en: A collection of Tools in LangChain are called a Toolkit. Implementation wise,
    this is literally just an array of the Tools that are available for the agent.
    As such, the high level overview of an agent in LangChain looks something like
    this
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在LangChain中，工具的集合称为Toolkit。在实现上，这实际上只是一个包含可供代理使用的工具的数组。因此，LangChain中代理的高级概述大致如下所示
- en: '![](../Images/34df972c8faa9ba0de48bb3d01d91eb9.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/34df972c8faa9ba0de48bb3d01d91eb9.png)'
- en: Image by author
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: So, at a basic level, an agent needs
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，从基本的角度来看，一个代理需要
- en: an LLM to act as its brain, and to give it its reasoning abilities
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个LLM作为它的大脑，并赋予它推理能力
- en: tools so that it can interact with the environment around it and achieve its
    goals
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具，以便它能够与周围的环境进行交互，并实现其目标
- en: Building the Agent
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建代理
- en: To make some of these concepts more concrete, let’s build a simple agent.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让这些概念更加具体，我们来构建一个简单的代理。
- en: We will create a Mathematics Agent that can perform a few simple mathematical
    operations.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个数学代理，它可以执行一些简单的数学运算。
- en: Environment setup
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境设置
- en: First lets setup our environment and script
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们设置我们的环境和脚本
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Alternatively, you can also clone the code used here [from GitHub](https://github.com/smaameri/simple-math-agent)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你也可以克隆这里使用的代码[从GitHub](https://github.com/smaameri/simple-math-agent)
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: or check out the code inside a [Google Colab](https://colab.research.google.com/drive/1dHG7d4Iq0yuDEOWK1UaMZ7ADeTo0uAFT?usp=sharing)
    also.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 或者也可以查看[Google Colab](https://colab.research.google.com/drive/1dHG7d4Iq0yuDEOWK1UaMZ7ADeTo0uAFT?usp=sharing)中的代码。
- en: The Tools
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具
- en: The simplest place to start will be to fist define the tools for our Maths agent.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的开始方式是首先为我们的数学代理定义工具。
- en: Let’s give it “add”, “multiply” and “square” tools, so that it can perform those
    operations on questions we pass to it. By keeping our tools simple we can focus
    on the core concepts, and build the tools ourselves, instead of relying on an
    existing and more complex tools like the WikipediaTool, that acts as a wrapper
    around the Wikipedia API, and requires us to import it from the LangChain library.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为它提供“add”、“multiply”和“square”工具，以便它能够对我们传递给它的问题执行这些操作。通过保持工具简单，我们可以专注于核心概念，自己构建工具，而不是依赖像WikipediaTool这样更复杂的现成工具，它作为Wikipedia
    API的包装器，需要我们从LangChain库中导入。
- en: Again, we are not trying to do anything fancy here, just keeping it simple and
    putting the main building blocks of an agent together so we can understand how
    they work, and get our first agent up and running.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们并不打算做什么复杂的事情，只是保持简单，将代理的主要构建模块拼凑在一起，以便我们能够理解它们是如何工作的，并让我们的第一个代理启动并运行。
- en: Let’s start with the “add” tool. The bottom up way to create a Tool in LangChain
    would be to extend the **BaseTool** class, set the **name** and **description**
    fields on the class, and implement the **_run** method. That would look like this
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从“add”工具开始。在LangChain中创建工具的自底向上的方式是扩展**BaseTool**类，设置类中的**name**和**description**字段，并实现**_run**方法。代码如下所示
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Notice that we need to implement the **_run** method to show what our tool does
    with the parameters that are passed to it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们需要实现**_run**方法，以显示我们的工具如何处理传递给它的参数。
- en: Notice also how it requires a pydantic model for the **args_schema**. We will
    define that here
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意它需要一个pydantic模型作为**args_schema**。我们将在这里定义它。
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, LangChain does give us an easier way to define tools, then by needing to
    extend the **BaseTool** class each time. We can do this with the help of the **@too**l
    decorator. Defining the “add” tool in LangChain using the @tool decorator will
    look like this
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，LangChain确实为我们提供了一种更简便的方式来定义工具，而不需要每次都扩展**BaseTool**类。我们可以借助**@tool**装饰器来做到这一点。使用@tool装饰器在LangChain中定义“add”工具的代码如下所示
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Much simpler right. Behind the scenes, the decorator magically uses the method
    provided to extend the BaseTool class, just as we did earlier. Some thing to note:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 更简单对吧。幕后，装饰器神奇地使用了提供的方法来扩展 BaseTool 类，就像我们之前做的那样。有一点需要注意：
- en: the method name also becomes the tool name
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法名称也成为工具名称
- en: the method params define the input parameters for the tool
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法参数定义了工具的输入参数
- en: the docstring gets converted into the tools description
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档字符串被转换为工具的描述
- en: You can access these properties on the tool also
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在工具上访问这些属性
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that the description of a tool is very important as this is what the LLM
    uses to decide whether or not it is the right tool for the job. A bad description
    may lead to the not tool getting used when it should be, or getting used at the
    wrong times.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，工具的描述非常重要，因为 LLM 会根据这个描述来决定是否选择该工具。如果描述不准确，可能导致工具在该使用时没有被使用，或者在错误的时机被使用。
- en: With the **add** tool done, let’s move on to the definitions for our **multiply**
    and **square** tools.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 完成 **add** 工具后，让我们继续定义 **multiply** 和 **square** 工具。
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And that is it, simple as that.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，简单如斯。
- en: So we have defined our own three [custom tools](https://python.langchain.com/docs/modules/tools/custom_tools/).
    A more common use case might be to use some of the already provided and existing
    tools in LangChain, which you can see [here](https://python.langchain.com/docs/integrations/tools/).
    However, at the source code level, they would all be built and defined using a
    similar methods as described above.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们定义了自己的三个 [自定义工具](https://python.langchain.com/docs/modules/tools/custom_tools/)。一个更常见的用例可能是使用
    LangChain 中已提供和存在的一些工具，你可以在 [这里](https://python.langchain.com/docs/integrations/tools/)
    查看。不过，在源代码层面，它们都会使用类似上述描述的方法来构建和定义。
- en: And that is it as far as our Tools our concerned. Now time to combine our tools
    into a Toolkit.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里为止，我们的工具就算完成了。现在是时候将工具组合成一个工具包了。
- en: The Toolkit
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具包
- en: Toolkits sound fancy, but they are actually very simple. They are **literally**
    just a a list of tools. We can define our toolkit as an array of tools like so
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 工具包听起来很复杂，但其实它们非常简单。它们**实际上**就是一组工具的列表。我们可以像这样定义我们的工具包，作为一个工具数组：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: And that’s it. Really straightforward, and nothing to get confused over.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。非常简单，没有什么好混淆的。
- en: Usually Toolkits are groups of tools that are useful together, and would be
    helpful for agents trying to carry out certain kinds of tasks. For example an
    SQLToolkit might contain a tool for generating an SQL query, validating an SQL
    query, and executing an SQL query.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，工具包是一些可以一起使用的工具组，对于那些试图执行特定任务的智能体来说非常有帮助。例如，SQLToolkit 可能包含用于生成 SQL 查询、验证
    SQL 查询和执行 SQL 查询的工具。
- en: The [Integrations Toolkit](https://python.langchain.com/docs/integrations/toolkits/)
    page on the LangChain docs has a large list of toolkits developed by the community
    that might be useful for you.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain 文档中的 [集成工具包](https://python.langchain.com/docs/integrations/toolkits/)
    页面列出了由社区开发的许多工具包，可能对你有用。
- en: The LLM
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LLM
- en: As mentioned above, an LLM is the brains of an agent. It decides which tools
    to call based on the question passed to it, what are the best next steps to take
    based on a tools description. It also decides when it has reached its final answer,
    and is ready to return that to the user.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，LLM 是智能体的大脑。它根据传入的问题决定调用哪些工具，根据工具的描述决定下一步应该采取哪些最佳步骤。它还决定何时达到最终答案，并准备将其返回给用户。
- en: Let’s setup the LLM here
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里设置 LLM
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The Prompt
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示词
- en: Lastly we need a prompt to pass into our agent, so it has a general idea bout
    what kind of agent it is, and what sorts of tasks it should solve.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要一个提示词传递给我们的智能体，这样它就能大致了解它是什么类型的智能体，以及应该解决哪些任务。
- en: Our agent requires a ChatPromptTemplate to work (more on that later). This is
    what a barebones ChatPromptTemplate looks like. The main part we care about is
    the system prompt, and the rest are just the default settings we are required
    to pass in.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的智能体需要一个 ChatPromptTemplate 来工作（稍后会详细介绍）。这是一个基本的 ChatPromptTemplate，主要关注部分是系统提示，其他则是我们需要传递的默认设置。
- en: In our prompt we have included a sample answer, showing the agent how we want
    it to return the answer only, and not any descriptive text along with the answer
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的提示词中，我们包含了一个示例答案，向智能体展示我们希望它只返回答案，而不附带任何描述性文字。
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That is it. We have setup our Tools and Toolkit, which our agent will need as
    part of its setup, so its knows what are the types of actions and capabilities
    it has at its disposal. And we have also setup the LLM and system prompt.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。我们已经设置好了代理所需的工具和工具包，代理需要这些作为设置的一部分，以便了解它可以执行哪些类型的操作和具有哪些能力。我们也已经设置好了LLM和系统提示。
- en: Now for the fun part. Setting up our Agent!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是有趣的部分了。设置我们的代理！
- en: The Agent
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代理
- en: LangChain has a [number of different agents types](https://python.langchain.com/docs/modules/agents/agent_types/)
    that can be created, with different reasoning powers and abilities. We will be
    using the most capable and powerful agent currently available, the [OpenAI Tools](https://python.langchain.com/docs/modules/agents/agent_types/openai_tools/)
    agent. As per the docs on the the OpenAI Tools agent, which uses newer OpenAI
    models also,
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: LangChain有[多种不同的代理类型](https://python.langchain.com/docs/modules/agents/agent_types/)可以创建，这些代理具有不同的推理能力和特性。我们将使用目前最强大和最有能力的代理——[OpenAI工具](https://python.langchain.com/docs/modules/agents/agent_types/openai_tools/)代理。根据OpenAI工具代理的文档，它也使用了更新的OpenAI模型。
- en: Newer OpenAI models have been fine-tuned to detect when one or more function(s)
    should be called and respond with the inputs that should be passed to the function(s).
    In an API call, you can describe functions and have the model intelligently choose
    to output a JSON object containing arguments to call these functions. The goal
    of the OpenAI tools APIs is to more reliably return valid and useful function
    calls than what can be done using a generic text completion or chat API.
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 更新后的OpenAI模型已经经过微调，以便能够检测何时应该调用一个或多个函数，并响应应传递给函数的输入。在API调用中，你可以描述函数，并让模型智能地选择输出一个包含调用这些函数所需参数的JSON对象。OpenAI工具API的目标是比使用通用的文本完成或聊天API更可靠地返回有效且有用的函数调用。
- en: In other words this agents is good at generating the correct structure for calling
    functions, and is able to understand if more than one function (tool) might be
    needed for our task also. This agent also has the ability to call functions (tools)
    with multiple input parameters, just like ours do. Some agents can only work with
    functions that have a single input parameter.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，这个代理擅长生成正确的结构来调用函数，并能够理解我们的任务是否需要多个函数（工具）。这个代理还能够调用具有多个输入参数的函数（工具），就像我们的代理一样。有些代理只能处理具有单一输入参数的函数。
- en: If you are familiar with [OpenAI’s Function](https://platform.openai.com/docs/guides/function-calling)
    calling feature, where we can use the OpenAI LLM to generate the correct parameters
    to call a function with, the OpenAI Tools agent we are using here is leveraging
    some of that power in order to be able to call the correct tool, with the correct
    parameters.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉[OpenAI的函数调用功能](https://platform.openai.com/docs/guides/function-calling)，在该功能中，我们可以使用OpenAI的LLM来生成正确的参数，以便调用函数，那么我们在这里使用的OpenAI工具代理也在利用其中的一部分功能，能够以正确的参数调用正确的工具。
- en: In order to setup an agent in LangChain, we need to use one of the factory methods
    provided for creating the agent of our choice.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在LangChain中设置代理，我们需要使用提供的工厂方法来创建我们选择的代理。
- en: The factory method for creating an OpenAI tools agent is **create_openai_tools_agent()**.
    And it requires passing in the llm, tools and prompt we setup above. So let’s
    initialise our agent.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 创建OpenAI工具代理的工厂方法是**create_openai_tools_agent()**。它需要传入我们上面设置的LLM、工具和提示。因此，让我们初始化我们的代理。
- en: '[PRE12]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Finally, in order to run agents in LangChain, we cannot just call a “*run*”
    type method on them directly. They need to be run via an AgentExecutor.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了在LangChain中运行代理，我们不能直接调用“*run*”类型的方法。它们需要通过AgentExecutor来运行。
- en: Am bringing up the Agent Executor only here at the end as I don’t think it’s
    a critical concept for understanding how the agents work, and bring it up at the
    start with everything else would just the whole thing seem more complicated than
    it needs to be, as well as distract from understanding some of the other more
    fundamental concepts.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我之所以在最后提到Agent Executor，是因为我认为它不是理解代理工作原理的关键概念，放在开始时与其他内容一起讲解只会让整个过程看起来比实际需要的更复杂，而且还可能分散对一些更基本概念的理解。
- en: So, now that we are introducing it, an AgentExecutor acts as the runtime for
    agents in LangChain, and allow an agent to keep running until it is ready to return
    its final response to the user. In pseudo-code, the AgentExecutor’s are doing
    something along the lines of (pulled directly from [the LangChain docs](https://python.langchain.com/docs/modules/agents/concepts/#agentexecutor))
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们介绍一下，AgentExecutor作为LangChain中代理的运行时，允许代理一直运行，直到准备好返回最终的响应给用户。在伪代码中，AgentExecutor的工作原理大致如下（直接摘自[LangChain文档](https://python.langchain.com/docs/modules/agents/concepts/#agentexecutor)）
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: So they are basically a while loop that keep’s calling the next action methods
    on the agent, until the agent has returned its final response.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它们基本上是一个while循环，持续调用代理的下一个操作方法，直到代理返回最终响应。
- en: So, let us setup our agent inside the agent executor. We pass it the agent,
    and must also pass it the toolkit. And we are setting verbose to True so we can
    get an idea of what the agent is doing as it is processing our request
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们将代理设置在代理执行器内。我们传递给它代理，并且还必须传递工具包。我们将“verbose”设置为True，以便在代理处理我们的请求时了解它在做什么。
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: And that is it. We are now ready to pass commands to our agent
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了。我们现在准备向代理传递命令。
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Let run our script, and see the agent’s output
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行我们的脚本，看看代理的输出。
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/38082f690ae8ca1409e8cac5d2270f77.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/38082f690ae8ca1409e8cac5d2270f77.png)'
- en: Image by author
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: Since we have set **verbose=True** on the AgentExecutor, we can see the lines
    of Action our agent has taken. It has identified we should call the “**add**”
    tool, called the “**add**” tool with the required parameters, and returned us
    our result.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在AgentExecutor上设置了**verbose=True**，我们可以看到代理所采取的每个操作步骤。它已经识别出我们应该调用“**加法**”工具，并使用所需的参数调用了“**加法**”工具，最终返回了结果。
- en: This is what the full source code looks like
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是完整的源代码
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Testing our agent
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试我们的代理
- en: Let’s shoot a few questions at our agent to see how it performs.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向代理提几个问题，看看它的表现如何。
- en: '**what is 5 squared?**'
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5的平方是多少？**'
- en: Again we get the correct result, and see that it does use our **square** tool
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 再次获得正确的结果，看到它确实使用了我们的**平方**工具
- en: '![](../Images/4da75f6cccd073be0ccf10095da58268.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4da75f6cccd073be0ccf10095da58268.png)'
- en: Image by author
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: what is 5 to the power of 6?
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5的6次方是多少？
- en: It takes an interesting course of action. It first uses the **square** tool.
    And then, using the result of that, tries to use the **multiply** tool a few times
    to get the final answer. Admittedly, the final answer, 3125, is wrong, and needs
    to be multiplied by 5 one more time to get the correct answer. But it is interesting
    to see how the agent tried to use different tools, and multiple steps to try and
    get to the final answer.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 它采取了一个有趣的行动步骤。它首先使用**平方**工具。然后，使用该结果，尝试使用**乘法**工具多次来得到最终答案。坦率地说，最终答案3125是错误的，还需要再乘以5才能得到正确的答案。但有趣的是，看到代理尝试使用不同的工具，并通过多个步骤来尝试得到最终答案。
- en: '![](../Images/06605974f62a317700216b36626a3a9f.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/06605974f62a317700216b36626a3a9f.png)'
- en: Image by author
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: '**what is 1 minus 3?**'
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1减去3是多少？**'
- en: We don’t have a minus tool. But it is smart enough to use our add tool, but
    set the second value to -3\. Its funny and somewhat amazing sometimes how they
    are smart and creative like that.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有减法工具。但它足够聪明，使用我们的加法工具，并将第二个值设置为-3。有时候它们真是太聪明和富有创意了，挺有趣的，甚至令人惊讶。
- en: '![](../Images/1c4add21cd9408cce4be6aeaa9abdd53.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1c4add21cd9408cce4be6aeaa9abdd53.png)'
- en: Image by author
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: '**what is the square root of 64**'
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**64的平方根是多少**'
- en: As a final test, what if we ask it to carry out a mathematical operation that
    is not part of our tool set? Since we have no tools for square rooting, it does
    not attempt to call a tool, and instead calculates the value directly using just
    the LLM.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 作为最后的测试，如果我们要求它执行一个不在我们工具集中的数学运算会怎样？由于我们没有平方根工具，它不会尝试调用工具，而是直接使用LLM计算该值。
- en: '![](../Images/670b50b68a2de3c16cf3636692a5838c.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/670b50b68a2de3c16cf3636692a5838c.png)'
- en: Image by author
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: Our system prompt did tell it to answer that it “does not know” if it does not
    have the correct tool for the job, and it did do that sometimes during testing.
    An improved initial system prompt could probably help resolve that, at least to
    some extent
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的系统提示确实告诉它，如果没有正确的工具，它应该回答“不知道”，并且在测试过程中确实有时会这样做。一个改进的初始系统提示可能会有所帮助，至少在一定程度上能解决这个问题。
- en: Observations
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观察
- en: Based on using the agent a bit, I noticed the following
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 基于对代理的使用，我注意到以下几点
- en: when asking it direct questions which it had the tools to answer with, it was
    pretty consistent at using the correct tools for the job, and returning the correct
    answer. So, pretty reliable in that sense.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当直接询问它具备工具可以回答的问题时，它在使用正确工具并返回正确答案方面相当一致。所以，从这个角度来看，它是相当可靠的。
- en: if the question is a little complicated, for example our “5 to the power of
    6” question, it does not always return the correct results.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果问题稍微复杂一点，例如我们提到的“5 的 6 次方”问题，它并不总是返回正确的结果。
- en: it can sometimes use just the pure power of the LLM to answer our question,
    without invoking our tools.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有时可以仅仅使用 LLM 的强大能力来回答我们的问题，而无需调用我们的工具。
- en: The Future
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未来
- en: Agents, and programs that can reason from themselves, are a new paradigm in
    programming, and I think they are going to become a much more mainstream part
    of how lots of things are built. Obviously the non-deterministic (i.e not wholly
    predictable) nature of LLM’s means that agents results will also suffer from this,
    questioning how much we can rely on them for tasks where we need to be sure of
    the answers we have.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 代理和能够自主推理的程序是编程中的一种新范式，我认为它们将成为构建许多事物的主流方式。显然，LLM 的非确定性（即不是完全可预测的）意味着代理的结果也会受到影响，这使我们质疑在需要确保答案准确无误的任务中，我们能在多大程度上依赖它们。
- en: Perhaps as the technology matures, their results can be more and more predictable,
    and we may develop some work arounds for this.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 也许随着技术的成熟，它们的结果将变得更加可预测，我们可能会为此开发一些解决方法。
- en: I can also see agent type libraries and packages starting to become a thing.
    Similar to how we install third party libraries and packages into software, for
    example via the pip package manager for python, or Docker Hub for docker images,
    I wonder if we may start to see a library and package manager of agents start
    being developed, with agents developed that become very good at their specific
    tasks, which we can then also install as packages into out application.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我还看到代理类型的库和软件包开始成为一个趋势。类似于我们如何将第三方库和软件包安装到软件中，例如通过 Python 的 pip 包管理器或 Docker
    镜像的 Docker Hub，我想我们可能会开始看到一个代理的库和包管理器开始被开发出来，代理在某一特定任务上变得非常擅长，然后我们也可以将它们作为软件包安装到我们的应用程序中。
- en: Indeed LangChain’s [library of Toolkits](https://python.langchain.com/docs/integrations/toolkits/)
    for agents to use, listed on their Integrations page, are sets of Tools built
    by the community for people to use, which could be an early example of agent type
    libraries built by the community.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，LangChain 的[工具包库](https://python.langchain.com/docs/integrations/toolkits/)列在其集成页面上，这些工具包是社区构建的工具集，供大家使用，这可能是社区构建的代理类型库的一个早期示例。
- en: Conclusion
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Hope this was a useful introduction into getting you started building with agents
    in LangChain.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这篇文章能为你提供一些有用的入门指导，帮助你开始在 LangChain 中构建代理。
- en: Remember, agents are basically just a brain (the LLM), and a bunch of tools,
    which they can use to get stuff done in the world around us.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，代理基本上就是一个大脑（即 LLM）和一堆工具，它们可以利用这些工具来完成我们周围世界中的任务。
- en: Happy hacking!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 快乐编程！
- en: '*If you enjoyed the article, and would like to stay up to date on future articles
    I release about building things with LangChain and AI tools, do* [*subscribe here*](https://medium.com/@ssmaameri/subscribe)
    *to be notified by email when they come out*'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你喜欢这篇文章，并希望随时了解我发布的关于使用 LangChain 和 AI 工具构建项目的未来文章，欢迎* [*在这里订阅*](https://medium.com/@ssmaameri/subscribe)
    *，这样当新文章发布时，你会通过电子邮件收到通知*'
